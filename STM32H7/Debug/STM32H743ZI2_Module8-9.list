
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001264c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e44  080128f0  080128f0  000228f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014734  08014734  00024734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801473c  0801473c  0002473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08014744  08014744  00024744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  24000000  0801474c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e7c  2400020c  08014958  0003020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001088  08014958  00031088  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b8a3  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005760  00000000  00000000  0006badd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c0  00000000  00000000  00071240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001530  00000000  00000000  00072900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e1f7  00000000  00000000  00073e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022c89  00000000  00000000  000b2027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dd1c  00000000  00000000  000d4cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002429cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070cc  00000000  00000000  00242a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400020c 	.word	0x2400020c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080128d4 	.word	0x080128d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000210 	.word	0x24000210
 80002dc:	080128d4 	.word	0x080128d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f00c fc5a 	bl	800d30c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f00c fce7 	bl	800d438 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	765a      	strb	r2, [r3, #25]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	fefb 7a67 	vrintm.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	22b4      	movs	r2, #180	; 0xb4
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	22ef      	movs	r2, #239	; 0xef
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
}
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f00b f93c 	bl	800beec <HAL_TIM_PWM_Start>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13f      	bne.n	8000d0e <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691c      	ldr	r4, [r3, #16]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f7ff ff87 	bl	8000bc6 <_ZSt5roundf>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	3301      	adds	r3, #1
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	f7ff ff60 	bl	8000ba6 <_ZSt5floorf>
 8000ce6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cee:	ee17 3a90 	vmov	r3, s15
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	9600      	str	r6, [sp, #0]
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f9cf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d02:	4602      	mov	r2, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8000d0c:	e176      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d13f      	bne.n	8000d96 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691c      	ldr	r4, [r3, #16]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	3301      	adds	r3, #1
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d30:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	f7ff ff43 	bl	8000bc6 <_ZSt5roundf>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	3301      	adds	r3, #1
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d66:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6a:	f7ff ff1c 	bl	8000ba6 <_ZSt5floorf>
 8000d6e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	9600      	str	r6, [sp, #0]
 8000d7e:	462b      	mov	r3, r5
 8000d80:	4622      	mov	r2, r4
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f98b 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d94:	e132      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d13f      	bne.n	8000e1e <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691c      	ldr	r4, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	3301      	adds	r3, #1
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f7ff feff 	bl	8000bc6 <_ZSt5roundf>
 8000dc8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	3301      	adds	r3, #1
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	f7ff fed8 	bl	8000ba6 <_ZSt5floorf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 3a90 	vmov	r3, s15
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9600      	str	r6, [sp, #0]
 8000e06:	462b      	mov	r3, r5
 8000e08:	4622      	mov	r2, r4
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f947 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e12:	4602      	mov	r2, r0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e1c:	e0ee      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d13f      	bne.n	8000ea6 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691c      	ldr	r4, [r3, #16]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	3301      	adds	r3, #1
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	f7ff febb 	bl	8000bc6 <_ZSt5roundf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e58:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	3301      	adds	r3, #1
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	f7ff fe94 	bl	8000ba6 <_ZSt5floorf>
 8000e7e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e86:	ee17 3a90 	vmov	r3, s15
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9600      	str	r6, [sp, #0]
 8000e8e:	462b      	mov	r3, r5
 8000e90:	4622      	mov	r2, r4
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f903 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ea4:	e0aa      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d144      	bne.n	8000f38 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691c      	ldr	r4, [r3, #16]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	f7ff fe77 	bl	8000bc6 <_ZSt5roundf>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	eeb0 0a67 	vmov.f32	s0, s15
 8000f02:	f7ff fe50 	bl	8000ba6 <_ZSt5floorf>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9600      	str	r6, [sp, #0]
 8000f16:	462b      	mov	r3, r5
 8000f18:	4622      	mov	r2, r4
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f8bf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000f22:	4602      	mov	r2, r0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f2c:	e066      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8000f2e:	bf00      	nop
 8000f30:	3d4ccccd 	.word	0x3d4ccccd
 8000f34:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b14      	cmp	r3, #20
 8000f3e:	d13f      	bne.n	8000fc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691c      	ldr	r4, [r3, #16]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	3301      	adds	r3, #1
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f7ff fe2e 	bl	8000bc6 <_ZSt5roundf>
 8000f6a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	f7ff fe07 	bl	8000ba6 <_ZSt5floorf>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9600      	str	r6, [sp, #0]
 8000fa8:	462b      	mov	r3, r5
 8000faa:	4622      	mov	r2, r4
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f876 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000fbe:	e01d      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	761a      	strb	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	765a      	strb	r2, [r3, #25]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e5b      	ldrb	r3, [r3, #25]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fe09 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 800106a:	e000      	b.n	800106e <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 800106c:	bf00      	nop
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e1b      	ldrb	r3, [r3, #24]
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fdf3 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001096:	e000      	b.n	800109a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001098:	bf00      	nop
}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	69f9      	ldr	r1, [r7, #28]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	1a8a      	subs	r2, r1, r2
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1acb      	subs	r3, r1, r3
 80010c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4413      	add	r3, r2
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	22c7      	movs	r2, #199	; 0xc7
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001142:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001148:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800114a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800117c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f832 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]
}
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	41a00000 	.word	0x41a00000
 8001170:	469c4000 	.word	0x469c4000
 8001174:	43480000 	.word	0x43480000
 8001178:	42700000 	.word	0x42700000
 800117c:	00000000 	.word	0x00000000

08001180 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
}
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f00a fe9f 	bl	800beec <HAL_TIM_PWM_Start>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	ed2d 8b02 	vpush	{d8}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff ff7e 	bl	80010d8 <_ZSt4fabsf>
 80011dc:	eeb0 7a40 	vmov.f32	s14, s0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e01b      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a04 	vldr	s15, [r3, #16]
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f7ff ff64 	bl	80010d8 <_ZSt4fabsf>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a06 	vldr	s15, [r3, #24]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	bfac      	ite	ge
 8001224:	2301      	movge	r3, #1
 8001226:	2300      	movlt	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e001      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001240:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80014dc <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	f2c0 80db 	blt.w	8001406 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b29b      	uxth	r3, r3
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f008 f83d 	bl	80092dc <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	3301      	adds	r3, #1
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	edd7 7a03 	vldr	s15, [r7, #12]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f7ff fc99 	bl	8000bc6 <_ZSt5roundf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 2a90 	vmov	r2, s15
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d113      	bne.n	80012d8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fa5b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012c2:	eeb0 7b40 	vmov.f64	d7, d0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 80012d6:	e1e0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d113      	bne.n	8001308 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fa43 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012f2:	eeb0 7b40 	vmov.f64	d7, d0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001306:	e1c8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d113      	bne.n	8001338 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa2b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001322:	eeb0 7b40 	vmov.f64	d7, d0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001330:	ee17 2a90 	vmov	r2, s15
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001336:	e1b0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d113      	bne.n	8001368 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fa13 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001352:	eeb0 7b40 	vmov.f64	d7, d0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001366:	e198      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d113      	bne.n	8001398 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f9fb 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001390:	ee17 2a90 	vmov	r2, s15
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001396:	e180      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b14      	cmp	r3, #20
 800139e:	d113      	bne.n	80013c8 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f9e3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80013b2:	eeb0 7b40 	vmov.f64	d7, d0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013c6:	e168      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001404:	e149      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a04 	vldr	s15, [r3, #16]
 800140c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80014e4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	f200 80e5 	bhi.w	80015e6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	f007 ff57 	bl	80092dc <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001440:	ed97 0a03 	vldr	s0, [r7, #12]
 8001444:	f7ff fe48 	bl	80010d8 <_ZSt4fabsf>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001450:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f7ff fbaf 	bl	8000bc6 <_ZSt5roundf>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 2a90 	vmov	r2, s15
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d113      	bne.n	80014ac <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f971 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001496:	eeb0 7b40 	vmov.f64	d7, d0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014a4:	ee17 2a90 	vmov	r2, s15
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014aa:	e0f6      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d119      	bne.n	80014e8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f959 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014da:	e0de      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 80014dc:	3a83126f 	.word	0x3a83126f
 80014e0:	4d64e1c0 	.word	0x4d64e1c0
 80014e4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d113      	bne.n	8001518 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f93b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001502:	eeb0 7b40 	vmov.f64	d7, d0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001516:	e0c0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d113      	bne.n	8001548 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f923 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001532:	eeb0 7b40 	vmov.f64	d7, d0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001540:	ee17 2a90 	vmov	r2, s15
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001546:	e0a8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b10      	cmp	r3, #16
 800154e:	d113      	bne.n	8001578 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f90b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001576:	e090      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b14      	cmp	r3, #20
 800157e:	d113      	bne.n	80015a8 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8f3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001592:	eeb0 7b40 	vmov.f64	d7, d0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015a6:	e078      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015e4:	e059      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015f8:	e04f      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d105      	bne.n	800160e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800160c:	e045      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d105      	bne.n	8001622 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001620:	e03b      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d105      	bne.n	8001636 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001634:	e031      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d105      	bne.n	800164a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001648:	e027      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b14      	cmp	r3, #20
 8001650:	d105      	bne.n	800165e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800165c:	e01d      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	ecbd 8b02 	vpop	{d8}
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80016b4:	ed97 0a00 	vldr	s0, [r7]
 80016b8:	f7ff fd0e 	bl	80010d8 <_ZSt4fabsf>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016e2:	eeb0 0b47 	vmov.f64	d0, d7
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffe5 	bl	80016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001704:	eeb0 7b40 	vmov.f64	d7, d0
 8001708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001732:	edd7 7a00 	vldr	s15, [r7]
 8001736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8001752:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001770 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8001756:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800175a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd28 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	54442eea 	.word	0x54442eea
 8001774:	401921fb 	.word	0x401921fb

08001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800178a:	eeb0 0b47 	vmov.f64	d0, d7
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_CRC_Init+0x54>)
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <MX_CRC_Init+0x58>)
 80017a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_CRC_Init+0x54>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_CRC_Init+0x54>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_CRC_Init+0x54>)
 80017b0:	f248 0205 	movw	r2, #32773	; 0x8005
 80017b4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_CRC_Init+0x54>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_CRC_Init+0x54>)
 80017be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_CRC_Init+0x54>)
 80017c6:	2220      	movs	r2, #32
 80017c8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_CRC_Init+0x54>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_CRC_Init+0x54>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_CRC_Init+0x54>)
 80017d8:	f004 fb98 	bl	8005f0c <HAL_CRC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80017e2:	f002 fbcd 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2400087c 	.word	0x2400087c
 80017f0:	58024c00 	.word	0x58024c00

080017f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_CRC_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_CRC_MspInit+0x40>)
 800180e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58024c00 	.word	0x58024c00
 8001834:	58024400 	.word	0x58024400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200b      	movs	r0, #11
 8001862:	f004 fb12 	bl	8005e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001866:	200b      	movs	r0, #11
 8001868:	f004 fb29 	bl	8005ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	200c      	movs	r0, #12
 8001872:	f004 fb0a 	bl	8005e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001876:	200c      	movs	r0, #12
 8001878:	f004 fb21 	bl	8005ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	200d      	movs	r0, #13
 8001882:	f004 fb02 	bl	8005e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001886:	200d      	movs	r0, #13
 8001888:	f004 fb19 	bl	8005ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200e      	movs	r0, #14
 8001892:	f004 fafa 	bl	8005e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001896:	200e      	movs	r0, #14
 8001898:	f004 fb11 	bl	8005ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	200f      	movs	r0, #15
 80018a2:	f004 faf2 	bl	8005e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f004 fb09 	bl	8005ebe <HAL_NVIC_EnableIRQ>

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400

080018b8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4b8e      	ldr	r3, [pc, #568]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a8c      	ldr	r2, [pc, #560]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a85      	ldr	r2, [pc, #532]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <MX_GPIO_Init+0x250>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a7d      	ldr	r2, [pc, #500]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <MX_GPIO_Init+0x250>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b77      	ldr	r3, [pc, #476]	; (8001b08 <MX_GPIO_Init+0x250>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a76      	ldr	r2, [pc, #472]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <MX_GPIO_Init+0x250>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <MX_GPIO_Init+0x250>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <MX_GPIO_Init+0x250>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <MX_GPIO_Init+0x250>)
 800198a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019a0:	2200      	movs	r2, #0
 80019a2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80019a6:	4859      	ldr	r0, [pc, #356]	; (8001b0c <MX_GPIO_Init+0x254>)
 80019a8:	f007 fc98 	bl	80092dc <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f24c 0102 	movw	r1, #49154	; 0xc002
 80019b2:	4857      	ldr	r0, [pc, #348]	; (8001b10 <MX_GPIO_Init+0x258>)
 80019b4:	f007 fc92 	bl	80092dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4855      	ldr	r0, [pc, #340]	; (8001b14 <MX_GPIO_Init+0x25c>)
 80019c0:	f007 fc8c 	bl	80092dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ca:	4853      	ldr	r0, [pc, #332]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019cc:	f007 fc86 	bl	80092dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	4851      	ldr	r0, [pc, #324]	; (8001b1c <MX_GPIO_Init+0x264>)
 80019d8:	f007 fc80 	bl	80092dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4849      	ldr	r0, [pc, #292]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019f4:	f007 fac2 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019f8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80019fc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	483e      	ldr	r0, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001a12:	f007 fab3 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4838      	ldr	r0, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a2e:	f007 faa5 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001a32:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4831      	ldr	r0, [pc, #196]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a4c:	f007 fa96 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	482a      	ldr	r0, [pc, #168]	; (8001b14 <MX_GPIO_Init+0x25c>)
 8001a6a:	f007 fa87 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4824      	ldr	r0, [pc, #144]	; (8001b18 <MX_GPIO_Init+0x260>)
 8001a88:	f007 fa78 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481d      	ldr	r0, [pc, #116]	; (8001b1c <MX_GPIO_Init+0x264>)
 8001aa6:	f007 fa69 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <MX_GPIO_Init+0x268>)
 8001ac2:	f007 fa5b 	bl	8008f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001adc:	f007 fa4e 	bl	8008f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f004 f9d0 	bl	8005e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aea:	2017      	movs	r0, #23
 8001aec:	f004 f9e7 	bl	8005ebe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f004 f9c8 	bl	8005e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f004 f9df 	bl	8005ebe <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	58021000 	.word	0x58021000
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58020000 	.word	0x58020000
 8001b20:	58021800 	.word	0x58021800

08001b24 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b32:	eef0 7ae7 	vabs.f32	s15, s15
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b52:	f00d fd6d 	bl	800f630 <cosf>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b72:	f00e f92d 	bl	800fdd0 <sinf>
 8001b76:	eef0 7a40 	vmov.f32	s15, s0
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a99      	ldr	r2, [pc, #612]	; (8001df8 <HAL_UARTEx_RxEventCallback+0x274>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	f040 8200 	bne.w	8001f9a <HAL_UARTEx_RxEventCallback+0x416>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8001b9a:	4a98      	ldr	r2, [pc, #608]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001b9c:	4b98      	ldr	r3, [pc, #608]	; (8001e00 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba6:	682b      	ldr	r3, [r5, #0]
 8001ba8:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8001baa:	2214      	movs	r2, #20
 8001bac:	2100      	movs	r1, #0
 8001bae:	4894      	ldr	r0, [pc, #592]	; (8001e00 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001bb0:	f00e fa56 	bl	8010060 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	f240 81de 	bls.w	8001f78 <HAL_UARTEx_RxEventCallback+0x3f4>
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	2b14      	cmp	r3, #20
 8001bc0:	f200 81da 	bhi.w	8001f78 <HAL_UARTEx_RxEventCallback+0x3f4>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	3b02      	subs	r3, #2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001bcc:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8001bce:	4b8d      	ldr	r3, [pc, #564]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4989      	ldr	r1, [pc, #548]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001bd8:	488b      	ldr	r0, [pc, #556]	; (8001e08 <HAL_UARTEx_RxEventCallback+0x284>)
 8001bda:	f004 f9fb 	bl	8005fd4 <HAL_CRC_Calculate>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <HAL_UARTEx_RxEventCallback+0x288>)
 8001be4:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001be6:	4b87      	ldr	r3, [pc, #540]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001bf0:	5c9b      	ldrb	r3, [r3, r2]
 8001bf2:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	497f      	ldr	r1, [pc, #508]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c0a:	4b81      	ldr	r3, [pc, #516]	; (8001e10 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c0c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <HAL_UARTEx_RxEventCallback+0x288>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 81c9 	beq.w	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4879      	ldr	r0, [pc, #484]	; (8001e14 <HAL_UARTEx_RxEventCallback+0x290>)
 8001c30:	f007 fb54 	bl	80092dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3a:	4877      	ldr	r0, [pc, #476]	; (8001e18 <HAL_UARTEx_RxEventCallback+0x294>)
 8001c3c:	f007 fb4e 	bl	80092dc <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8001c40:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b41      	cmp	r3, #65	; 0x41
 8001c46:	d106      	bne.n	8001c56 <HAL_UARTEx_RxEventCallback+0xd2>
 8001c48:	4b6e      	ldr	r3, [pc, #440]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d101      	bne.n	8001c56 <HAL_UARTEx_RxEventCallback+0xd2>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_UARTEx_RxEventCallback+0xd4>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001c5c:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b25a      	sxtb	r2, r3
 8001c64:	4b65      	ldr	r3, [pc, #404]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b25a      	sxtb	r2, r3
 8001c6e:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <HAL_UARTEx_RxEventCallback+0x298>)
 8001c70:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c72:	e1a3      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b42      	cmp	r3, #66	; 0x42
 8001c7a:	d106      	bne.n	8001c8a <HAL_UARTEx_RxEventCallback+0x106>
 8001c7c:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d101      	bne.n	8001c8a <HAL_UARTEx_RxEventCallback+0x106>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_UARTEx_RxEventCallback+0x108>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001c90:	4b5a      	ldr	r3, [pc, #360]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c9a:	789b      	ldrb	r3, [r3, #2]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b25a      	sxtb	r2, r3
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001ca4:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ca6:	e189      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 8001ca8:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b43      	cmp	r3, #67	; 0x43
 8001cae:	d106      	bne.n	8001cbe <HAL_UARTEx_RxEventCallback+0x13a>
 8001cb0:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d101      	bne.n	8001cbe <HAL_UARTEx_RxEventCallback+0x13a>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_UARTEx_RxEventCallback+0x13c>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cce:	789b      	ldrb	r3, [r3, #2]
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b25a      	sxtb	r2, r3
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001cd8:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001cda:	e16f      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 8001cdc:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b44      	cmp	r3, #68	; 0x44
 8001ce2:	d106      	bne.n	8001cf2 <HAL_UARTEx_RxEventCallback+0x16e>
 8001ce4:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d101      	bne.n	8001cf2 <HAL_UARTEx_RxEventCallback+0x16e>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_UARTEx_RxEventCallback+0x170>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b25a      	sxtb	r2, r3
 8001d00:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d02:	789b      	ldrb	r3, [r3, #2]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b25a      	sxtb	r2, r3
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001d0c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d0e:	e155      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b51      	cmp	r3, #81	; 0x51
 8001d16:	d106      	bne.n	8001d26 <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d101      	bne.n	8001d26 <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_UARTEx_RxEventCallback+0x1a4>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d2c:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d36:	789b      	ldrb	r3, [r3, #2]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b25a      	sxtb	r2, r3
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001d40:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d42:	e13b      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b52      	cmp	r3, #82	; 0x52
 8001d4a:	d106      	bne.n	8001d5a <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d101      	bne.n	8001d5a <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_UARTEx_RxEventCallback+0x1d8>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b25a      	sxtb	r2, r3
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d6a:	789b      	ldrb	r3, [r3, #2]
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b25a      	sxtb	r2, r3
 8001d72:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001d74:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d76:	e121      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b53      	cmp	r3, #83	; 0x53
 8001d7e:	d106      	bne.n	8001d8e <HAL_UARTEx_RxEventCallback+0x20a>
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d101      	bne.n	8001d8e <HAL_UARTEx_RxEventCallback+0x20a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_UARTEx_RxEventCallback+0x20c>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b25a      	sxtb	r2, r3
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b25a      	sxtb	r2, r3
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001da8:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001daa:	e107      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b54      	cmp	r3, #84	; 0x54
 8001db2:	d106      	bne.n	8001dc2 <HAL_UARTEx_RxEventCallback+0x23e>
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UARTEx_RxEventCallback+0x23e>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_UARTEx_RxEventCallback+0x240>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001dd2:	789b      	ldrb	r3, [r3, #2]
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001ddc:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001dde:	e0ed      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b61      	cmp	r3, #97	; 0x61
 8001de6:	d129      	bne.n	8001e3c <HAL_UARTEx_RxEventCallback+0x2b8>
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d124      	bne.n	8001e3c <HAL_UARTEx_RxEventCallback+0x2b8>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e023      	b.n	8001e3e <HAL_UARTEx_RxEventCallback+0x2ba>
 8001df6:	bf00      	nop
 8001df8:	24000dec 	.word	0x24000dec
 8001dfc:	2400035c 	.word	0x2400035c
 8001e00:	24000370 	.word	0x24000370
 8001e04:	24000384 	.word	0x24000384
 8001e08:	2400087c 	.word	0x2400087c
 8001e0c:	24000354 	.word	0x24000354
 8001e10:	24000356 	.word	0x24000356
 8001e14:	58021000 	.word	0x58021000
 8001e18:	58020400 	.word	0x58020400
 8001e1c:	2400033b 	.word	0x2400033b
 8001e20:	2400033c 	.word	0x2400033c
 8001e24:	2400033d 	.word	0x2400033d
 8001e28:	2400033e 	.word	0x2400033e
 8001e2c:	2400033f 	.word	0x2400033f
 8001e30:	24000340 	.word	0x24000340
 8001e34:	24000341 	.word	0x24000341
 8001e38:	24000342 	.word	0x24000342
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001e42:	4b94      	ldr	r3, [pc, #592]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	b25a      	sxtb	r2, r3
 8001e48:	4b93      	ldr	r3, [pc, #588]	; (8002098 <HAL_UARTEx_RxEventCallback+0x514>)
 8001e4a:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001e4c:	4b91      	ldr	r3, [pc, #580]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	b25a      	sxtb	r2, r3
 8001e52:	4b92      	ldr	r3, [pc, #584]	; (800209c <HAL_UARTEx_RxEventCallback+0x518>)
 8001e54:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001e56:	4b8f      	ldr	r3, [pc, #572]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e58:	78db      	ldrb	r3, [r3, #3]
 8001e5a:	b25a      	sxtb	r2, r3
 8001e5c:	4b90      	ldr	r3, [pc, #576]	; (80020a0 <HAL_UARTEx_RxEventCallback+0x51c>)
 8001e5e:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e62:	791b      	ldrb	r3, [r3, #4]
 8001e64:	b25a      	sxtb	r2, r3
 8001e66:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <HAL_UARTEx_RxEventCallback+0x520>)
 8001e68:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001e6a:	e0a7      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 8001e6c:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b71      	cmp	r3, #113	; 0x71
 8001e72:	d106      	bne.n	8001e82 <HAL_UARTEx_RxEventCallback+0x2fe>
 8001e74:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <HAL_UARTEx_RxEventCallback+0x524>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d101      	bne.n	8001e82 <HAL_UARTEx_RxEventCallback+0x2fe>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_UARTEx_RxEventCallback+0x300>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d014      	beq.n	8001eb2 <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8001e88:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	b25a      	sxtb	r2, r3
 8001e8e:	4b87      	ldr	r3, [pc, #540]	; (80020ac <HAL_UARTEx_RxEventCallback+0x528>)
 8001e90:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001e92:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e94:	789b      	ldrb	r3, [r3, #2]
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_UARTEx_RxEventCallback+0x52c>)
 8001e9a:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	b25a      	sxtb	r2, r3
 8001ea2:	4b84      	ldr	r3, [pc, #528]	; (80020b4 <HAL_UARTEx_RxEventCallback+0x530>)
 8001ea4:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8001ea6:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	b25a      	sxtb	r2, r3
 8001eac:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <HAL_UARTEx_RxEventCallback+0x534>)
 8001eae:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001eb0:	e084      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8001eb2:	4b78      	ldr	r3, [pc, #480]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b81      	cmp	r3, #129	; 0x81
 8001eb8:	d106      	bne.n	8001ec8 <HAL_UARTEx_RxEventCallback+0x344>
 8001eba:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_UARTEx_RxEventCallback+0x524>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_UARTEx_RxEventCallback+0x344>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_UARTEx_RxEventCallback+0x346>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_UARTEx_RxEventCallback+0x376>
					gripperstate = Old_Rx_Buffer[1];
 8001ece:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_UARTEx_RxEventCallback+0x538>)
 8001ed6:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_UARTEx_RxEventCallback+0x538>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_UARTEx_RxEventCallback+0x36e>
						gripper.GripperOpen();
 8001eea:	4875      	ldr	r0, [pc, #468]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001eec:	f7ff f8c2 	bl	8001074 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ef0:	e064      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
					} else {
						gripper.GripperClose();
 8001ef2:	4873      	ldr	r0, [pc, #460]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001ef4:	f7ff f8a8 	bl	8001048 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ef8:	e060      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
					}

				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 8001efa:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b91      	cmp	r3, #145	; 0x91
 8001f00:	d106      	bne.n	8001f10 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <HAL_UARTEx_RxEventCallback+0x524>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d101      	bne.n	8001f10 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_UARTEx_RxEventCallback+0x38e>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d052      	beq.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8001f16:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f1e:	7892      	ldrb	r2, [r2, #2]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_UARTEx_RxEventCallback+0x540>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f32:	78db      	ldrb	r3, [r3, #3]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f38:	7912      	ldrb	r2, [r2, #4]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f44:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <HAL_UARTEx_RxEventCallback+0x544>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8001f4a:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f4c:	795b      	ldrb	r3, [r3, #5]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f52:	7992      	ldrb	r2, [r2, #6]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HAL_UARTEx_RxEventCallback+0x548>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f66:	79db      	ldrb	r3, [r3, #7]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f70:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_UARTEx_RxEventCallback+0x54c>)
 8001f72:	edc3 7a00 	vstr	s15, [r3]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f76:	e021      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	4855      	ldr	r0, [pc, #340]	; (80020d4 <HAL_UARTEx_RxEventCallback+0x550>)
 8001f7e:	f007 f9ad 	bl	80092dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f88:	4853      	ldr	r0, [pc, #332]	; (80020d8 <HAL_UARTEx_RxEventCallback+0x554>)
 8001f8a:	f007 f9a7 	bl	80092dc <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8001f8e:	220c      	movs	r2, #12
 8001f90:	4952      	ldr	r1, [pc, #328]	; (80020dc <HAL_UARTEx_RxEventCallback+0x558>)
 8001f92:	4853      	ldr	r0, [pc, #332]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001f94:	f00b fb24 	bl	800d5e0 <HAL_UART_Transmit_DMA>
 8001f98:	e011      	b.n	8001fbe <HAL_UARTEx_RxEventCallback+0x43a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	484d      	ldr	r0, [pc, #308]	; (80020d4 <HAL_UARTEx_RxEventCallback+0x550>)
 8001fa0:	f007 f99c 	bl	80092dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001faa:	484b      	ldr	r0, [pc, #300]	; (80020d8 <HAL_UARTEx_RxEventCallback+0x554>)
 8001fac:	f007 f996 	bl	80092dc <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8001fb0:	2215      	movs	r2, #21
 8001fb2:	494c      	ldr	r1, [pc, #304]	; (80020e4 <HAL_UARTEx_RxEventCallback+0x560>)
 8001fb4:	484a      	ldr	r0, [pc, #296]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fb6:	f00b fb13 	bl	800d5e0 <HAL_UART_Transmit_DMA>
 8001fba:	e000      	b.n	8001fbe <HAL_UARTEx_RxEventCallback+0x43a>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001fbc:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8001fbe:	2214      	movs	r2, #20
 8001fc0:	4949      	ldr	r1, [pc, #292]	; (80020e8 <HAL_UARTEx_RxEventCallback+0x564>)
 8001fc2:	4847      	ldr	r0, [pc, #284]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fc4:	f00d fa5f 	bl	800f486 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a48      	ldr	r2, [pc, #288]	; (80020f0 <HAL_UARTEx_RxEventCallback+0x56c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d04a      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a47      	ldr	r2, [pc, #284]	; (80020f4 <HAL_UARTEx_RxEventCallback+0x570>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d045      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_UARTEx_RxEventCallback+0x574>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d040      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a44      	ldr	r2, [pc, #272]	; (80020fc <HAL_UARTEx_RxEventCallback+0x578>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d03b      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_UARTEx_RxEventCallback+0x57c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d036      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a41      	ldr	r2, [pc, #260]	; (8002104 <HAL_UARTEx_RxEventCallback+0x580>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d031      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <HAL_UARTEx_RxEventCallback+0x584>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02c      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_UARTEx_RxEventCallback+0x588>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d027      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <HAL_UARTEx_RxEventCallback+0x58c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d022      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_UARTEx_RxEventCallback+0x590>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d01d      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800202c:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a39      	ldr	r2, [pc, #228]	; (8002118 <HAL_UARTEx_RxEventCallback+0x594>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d018      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a38      	ldr	r2, [pc, #224]	; (800211c <HAL_UARTEx_RxEventCallback+0x598>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a36      	ldr	r2, [pc, #216]	; (8002120 <HAL_UARTEx_RxEventCallback+0x59c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00e      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a35      	ldr	r2, [pc, #212]	; (8002124 <HAL_UARTEx_RxEventCallback+0x5a0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a33      	ldr	r2, [pc, #204]	; (8002128 <HAL_UARTEx_RxEventCallback+0x5a4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a32      	ldr	r2, [pc, #200]	; (800212c <HAL_UARTEx_RxEventCallback+0x5a8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <HAL_UARTEx_RxEventCallback+0x4f6>
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0208 	bic.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e008      	b.n	800208c <HAL_UARTEx_RxEventCallback+0x508>
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0204 	bic.w	r2, r2, #4
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bdb0      	pop	{r4, r5, r7, pc}
 8002094:	2400035c 	.word	0x2400035c
 8002098:	2400033b 	.word	0x2400033b
 800209c:	2400033c 	.word	0x2400033c
 80020a0:	2400033d 	.word	0x2400033d
 80020a4:	2400033e 	.word	0x2400033e
 80020a8:	24000384 	.word	0x24000384
 80020ac:	2400033f 	.word	0x2400033f
 80020b0:	24000340 	.word	0x24000340
 80020b4:	24000341 	.word	0x24000341
 80020b8:	24000342 	.word	0x24000342
 80020bc:	24000358 	.word	0x24000358
 80020c0:	2400031c 	.word	0x2400031c
 80020c4:	24000344 	.word	0x24000344
 80020c8:	24000348 	.word	0x24000348
 80020cc:	2400034c 	.word	0x2400034c
 80020d0:	24000350 	.word	0x24000350
 80020d4:	58021000 	.word	0x58021000
 80020d8:	58020400 	.word	0x58020400
 80020dc:	080128f0 	.word	0x080128f0
 80020e0:	24000dec 	.word	0x24000dec
 80020e4:	08012900 	.word	0x08012900
 80020e8:	24000370 	.word	0x24000370
 80020ec:	24000d74 	.word	0x24000d74
 80020f0:	40020010 	.word	0x40020010
 80020f4:	40020028 	.word	0x40020028
 80020f8:	40020040 	.word	0x40020040
 80020fc:	40020058 	.word	0x40020058
 8002100:	40020070 	.word	0x40020070
 8002104:	40020088 	.word	0x40020088
 8002108:	400200a0 	.word	0x400200a0
 800210c:	400200b8 	.word	0x400200b8
 8002110:	40020410 	.word	0x40020410
 8002114:	40020428 	.word	0x40020428
 8002118:	40020440 	.word	0x40020440
 800211c:	40020458 	.word	0x40020458
 8002120:	40020470 	.word	0x40020470
 8002124:	40020488 	.word	0x40020488
 8002128:	400204a0 	.word	0x400204a0
 800212c:	400204b8 	.word	0x400204b8

08002130 <_ZN11robot_jointC1Ev>:
struct joint_state {
float q1, q2, q3, q4;
};
typedef struct joint_state joint_config;

struct robot_joint {
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	661a      	str	r2, [r3, #96]	; 0x60
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800214e:	665a      	str	r2, [r3, #100]	; 0x64
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	669a      	str	r2, [r3, #104]	; 0x68
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800215e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	671a      	str	r2, [r3, #112]	; 0x70
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	675a      	str	r2, [r3, #116]	; 0x74
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	679a      	str	r2, [r3, #120]	; 0x78
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a06      	ldr	r2, [pc, #24]	; (8002194 <_ZN11robot_jointC1Ev+0x64>)
 800217c:	67da      	str	r2, [r3, #124]	; 0x7c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_ZN11robot_jointC1Ev+0x68>)
 8002182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	3dc28f5c 	.word	0x3dc28f5c
 8002198:	387ba882 	.word	0x387ba882

0800219c <_Z10Update_ivkffffffff>:
};
typedef struct robot_kinematic fcb_kinematic;

fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;

void Update_ivk(float q1, float q2, float q3, float q4, float Vx, float Vy, float Vz, float Wz) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	; 0x38
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	ed87 0a07 	vstr	s0, [r7, #28]
 80021a6:	edc7 0a06 	vstr	s1, [r7, #24]
 80021aa:	ed87 1a05 	vstr	s2, [r7, #20]
 80021ae:	edc7 1a04 	vstr	s3, [r7, #16]
 80021b2:	ed87 2a03 	vstr	s4, [r7, #12]
 80021b6:	edc7 2a02 	vstr	s5, [r7, #8]
 80021ba:	ed87 3a01 	vstr	s6, [r7, #4]
 80021be:	edc7 3a00 	vstr	s7, [r7]
float S13 = sin(q1 + q3);
 80021c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80021c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	f7ff fcc7 	bl	8001b64 <_ZSt3sinf>
 80021d6:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
float C13 = cos(q1 + q3);
 80021da:	ed97 7a07 	vldr	s14, [r7, #28]
 80021de:	edd7 7a05 	vldr	s15, [r7, #20]
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	f7ff fcab 	bl	8001b44 <_ZSt3cosf>
 80021ee:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
float S3 = sin(q3);
 80021f2:	ed97 0a05 	vldr	s0, [r7, #20]
 80021f6:	f7ff fcb5 	bl	8001b64 <_ZSt3sinf>
 80021fa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
float S1 = sin(q1);
 80021fe:	ed97 0a07 	vldr	s0, [r7, #28]
 8002202:	f7ff fcaf 	bl	8001b64 <_ZSt3sinf>
 8002206:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
float C1 = cos(q1);
 800220a:	ed97 0a07 	vldr	s0, [r7, #28]
 800220e:	f7ff fc99 	bl	8001b44 <_ZSt3cosf>
 8002212:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
float L3S3 = L3 * S3;
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	edc7 7a08 	vstr	s15, [r7, #32]

w_q1 = (Vx * C13 + Vy * S13) / (S3 * L12);
 8002228:	ed97 7a03 	vldr	s14, [r7, #12]
 800222c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002234:	edd7 6a02 	vldr	s13, [r7, #8]
 8002238:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800223c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002240:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <_Z10Update_ivkffffffff+0x1bc>)
 8002246:	ed93 7a00 	vldr	s14, [r3]
 800224a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800224e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <_Z10Update_ivkffffffff+0x1c0>)
 8002258:	edc3 7a00 	vstr	s15, [r3]
w_q2 = Vz;
 800225c:	4a40      	ldr	r2, [pc, #256]	; (8002360 <_Z10Update_ivkffffffff+0x1c4>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 8002262:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 8002264:	ed93 7a00 	vldr	s14, [r3]
 8002268:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800226c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002270:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <_Z10Update_ivkffffffff+0x1c8>)
 8002272:	edd3 6a00 	vldr	s13, [r3]
 8002276:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800227a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <_Z10Update_ivkffffffff+0x1cc>)
 8002284:	edd3 6a00 	vldr	s13, [r3]
 8002288:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800228c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002294:	edd7 7a03 	vldr	s15, [r7, #12]
 8002298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229c:	eef1 6a67 	vneg.f32	s13, s15
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <_Z10Update_ivkffffffff+0x1bc>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		- (Vy * (L3 * S13 + L1 * S1 + L2 * S1)) / (L3S3 * L12);
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 80022b4:	edd3 6a00 	vldr	s13, [r3]
 80022b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <_Z10Update_ivkffffffff+0x1c8>)
 80022c2:	ed93 6a00 	vldr	s12, [r3]
 80022c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <_Z10Update_ivkffffffff+0x1cc>)
 80022d4:	ed93 6a00 	vldr	s12, [r3]
 80022d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <_Z10Update_ivkffffffff+0x1bc>)
 80022ee:	edd3 6a00 	vldr	s13, [r3]
 80022f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80022f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80022fe:	ee77 7a67 	vsub.f32	s15, s14, s15
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <_Z10Update_ivkffffffff+0x1d0>)
 8002304:	edc3 7a00 	vstr	s15, [r3]
w_q4 = (Vx * C1 + Vy * S1 + L3 * Wz * S3) / (L3S3);
 8002308:	ed97 7a03 	vldr	s14, [r7, #12]
 800230c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002314:	edd7 6a02 	vldr	s13, [r7, #8]
 8002318:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800231c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 8002326:	edd3 6a00 	vldr	s13, [r3]
 800232a:	edd7 7a00 	vldr	s15, [r7]
 800232e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002332:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800233e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <_Z10Update_ivkffffffff+0x1d4>)
 8002348:	edc3 7a00 	vstr	s15, [r3]

};
 800234c:	bf00      	nop
 800234e:	3738      	adds	r7, #56	; 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2400000c 	.word	0x2400000c
 8002358:	24000010 	.word	0x24000010
 800235c:	240003b4 	.word	0x240003b4
 8002360:	240003b8 	.word	0x240003b8
 8002364:	24000004 	.word	0x24000004
 8002368:	24000008 	.word	0x24000008
 800236c:	240003bc 	.word	0x240003bc
 8002370:	240003c0 	.word	0x240003c0

08002374 <_Z19Update_quintic_Cofffffffff>:




fcb_joint Update_quintic_Coff(float T, float Start_pos, float Final_pos, float Start_velocity, float Final_velocity, float Start_acceleration, float Final_acceleration)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b090      	sub	sp, #64	; 0x40
 8002378:	af00      	add	r7, sp, #0
 800237a:	61f8      	str	r0, [r7, #28]
 800237c:	ed87 0a06 	vstr	s0, [r7, #24]
 8002380:	edc7 0a05 	vstr	s1, [r7, #20]
 8002384:	ed87 1a04 	vstr	s2, [r7, #16]
 8002388:	edc7 1a03 	vstr	s3, [r7, #12]
 800238c:	ed87 2a02 	vstr	s4, [r7, #8]
 8002390:	edc7 2a01 	vstr	s5, [r7, #4]
 8002394:	ed87 3a00 	vstr	s6, [r7]
	fcb_joint joint;
 8002398:	69f8      	ldr	r0, [r7, #28]
 800239a:	f7ff fec9 	bl	8002130 <_ZN11robot_jointC1Ev>
	joint.C0 = Start_pos;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	joint.C1 = Start_velocity;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	joint.C2 = Start_acceleration/2.0;
 80023ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	const float A = Final_pos - (Start_pos + (Start_velocity*T) + (Start_acceleration*T*T/2));
 80023c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80023c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d4:	edd7 6a01 	vldr	s13, [r7, #4]
 80023d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80023dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80023f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity - (Start_velocity + (Start_acceleration*T));
 8002400:	ed97 7a01 	vldr	s14, [r7, #4]
 8002404:	edd7 7a06 	vldr	s15, [r7, #24]
 8002408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	ed97 7a02 	vldr	s14, [r7, #8]
 8002418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8002420:	ed97 7a00 	vldr	s14, [r7]
 8002424:	edd7 7a01 	vldr	s15, [r7, #4]
 8002428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T*T;
 8002430:	edd7 7a06 	vldr	s15, [r7, #24]
 8002434:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002438:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T*T*T;
 800243c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002440:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002444:	ed97 7a06 	vldr	s14, [r7, #24]
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T*T*T*T;
 8002450:	edd7 7a06 	vldr	s15, [r7, #24]
 8002454:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002458:	edd7 7a06 	vldr	s15, [r7, #24]
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002460:	ed97 7a06 	vldr	s14, [r7, #24]
 8002464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002468:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T*T*T*T*T;
 800246c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002470:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002474:	edd7 7a06 	vldr	s15, [r7, #24]
 8002478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800247c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	ed97 7a06 	vldr	s14, [r7, #24]
 8002488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	joint.C3 = (10.0*A/T3) - (4.0*B/T2) + (C/(2.0*T));
 8002490:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002498:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800249c:	ee27 5b06 	vmul.f64	d5, d7, d6
 80024a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80024ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024b4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80024b8:	ee27 4b05 	vmul.f64	d4, d7, d5
 80024bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024c0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80024c4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80024c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80024cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024d0:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80024d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024dc:	ee37 5b07 	vadd.f64	d5, d7, d7
 80024e0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80024e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	joint.C4 = (-15.0*A/T4) + (7.0*B/T3) - (C/T2);
 80024f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024fa:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 80024fe:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002502:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800250a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800250e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002512:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002516:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800251a:	ee27 4b05 	vmul.f64	d4, d7, d5
 800251e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002522:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002526:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800252a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800252e:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8002532:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002536:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800253a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800253e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002542:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	joint.C5 = (6.0*A/T5) - (3.0*B/T4) + (C/(2.0*T3));
 800254c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002550:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002554:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8002558:	ee27 5b06 	vmul.f64	d5, d7, d6
 800255c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002560:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002564:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002568:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800256c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002570:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002574:	ee27 4b05 	vmul.f64	d4, d7, d5
 8002578:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800257c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002580:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002584:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002588:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800258c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8002590:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002598:	ee37 5b07 	vadd.f64	d5, d7, d7
 800259c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80025a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	joint.T = T;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	return joint;
 80025b6:	bf00      	nop
}
 80025b8:	69f8      	ldr	r0, [r7, #28]
 80025ba:	3740      	adds	r7, #64	; 0x40
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_Z12KalmanFilterf11robot_joint>:
//	v = C1 + (2.0*C2*t) + (3.0*C3*t2) + (4.0*C4*t3) + (5.0*C5*t4);
//	a = (2.0*C2) + (6.0*C3*t) + (12.0*C4*t2) + (20.0*C5*t3);
//
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint) {
 80025c0:	b084      	sub	sp, #16
 80025c2:	b580      	push	{r7, lr}
 80025c4:	ed2d 8b08 	vpush	{d8-d11}
 80025c8:	b08a      	sub	sp, #40	; 0x28
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	ed87 0a00 	vstr	s0, [r7]
 80025d2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80025d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
float X1 = joint.X11;
 80025da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
float X2 = joint.X21;
 80025e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e4:	623b      	str	r3, [r7, #32]
float P11 = joint.p11;
 80025e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025ea:	61fb      	str	r3, [r7, #28]
float P12 = joint.p12;
 80025ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025f0:	61bb      	str	r3, [r7, #24]
float P21 = joint.p21;
 80025f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025f6:	617b      	str	r3, [r7, #20]
float P22 = joint.p22;
 80025f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025fc:	613b      	str	r3, [r7, #16]
float Q = joint.Q;
 80025fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002602:	60fb      	str	r3, [r7, #12]
float R = joint.R;
 8002604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002608:	60bb      	str	r3, [r7, #8]

joint.X11 =
		X1 + (X2 * dt)
 800260a:	4bef      	ldr	r3, [pc, #956]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	edd7 7a08 	vldr	s15, [r7, #32]
 8002614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002618:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800261c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002620:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
				- ((X1 - theta_k + X2 * dt)
 8002624:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002628:	edd7 7a00 	vldr	s15, [r7]
 800262c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002630:	4be5      	ldr	r3, [pc, #916]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002632:	edd3 6a00 	vldr	s13, [r3]
 8002636:	edd7 7a08 	vldr	s15, [r7, #32]
 800263a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002646:	4be0      	ldr	r3, [pc, #896]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002654:	edd7 7a07 	vldr	s15, [r7, #28]
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002660:	edd7 7a03 	vldr	s15, [r7, #12]
 8002664:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002668:	4bd7      	ldr	r3, [pc, #860]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	2004      	movs	r0, #4
 8002670:	eeb0 0a67 	vmov.f32	s0, s15
 8002674:	f001 fc9e 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002678:	eeb0 7b40 	vmov.f64	d7, d0
 800267c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002680:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002684:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002688:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 800268c:	4bce      	ldr	r3, [pc, #824]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800268e:	ed93 7a00 	vldr	s14, [r3]
 8002692:	edd7 7a04 	vldr	s15, [r7, #16]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	edd7 7a06 	vldr	s15, [r7, #24]
 800269e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a2:	4bc9      	ldr	r3, [pc, #804]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b0:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 80026b4:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80026b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80026bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c4:	4bc0      	ldr	r3, [pc, #768]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026c6:	edd3 6a00 	vldr	s13, [r3]
 80026ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80026da:	edd7 7a03 	vldr	s15, [r7, #12]
 80026de:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80026e2:	4bb9      	ldr	r3, [pc, #740]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	2004      	movs	r0, #4
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	f001 fc61 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026f2:	eeb0 7b40 	vmov.f64	d7, d0
 80026f6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80026fa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80026fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002702:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 8002706:	4bb0      	ldr	r3, [pc, #704]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002714:	edd7 7a06 	vldr	s15, [r7, #24]
 8002718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271c:	4baa      	ldr	r3, [pc, #680]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800272a:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 800272e:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- ((X1 - theta_k + X2 * dt)
 8002732:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002736:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X11 =
 800273a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
joint.X21 = X2
 800273e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002742:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 8002746:	edd7 7a03 	vldr	s15, [r7, #12]
 800274a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800274e:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	2003      	movs	r0, #3
 8002756:	eeb0 0a67 	vmov.f32	s0, s15
 800275a:	f001 fc2b 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800275e:	eeb0 7b40 	vmov.f64	d7, d0
 8002762:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002766:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800276a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002770:	ed93 7a00 	vldr	s14, [r3]
 8002774:	edd7 7a04 	vldr	s15, [r7, #16]
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002780:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002784:	edd7 7a05 	vldr	s15, [r7, #20]
 8002788:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800278c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002790:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002794:	edd7 7a00 	vldr	s15, [r7]
 8002798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800279c:	4b8a      	ldr	r3, [pc, #552]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800279e:	edd3 5a00 	vldr	s11, [r3]
 80027a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80027a6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027b2:	ee26 9b07 	vmul.f64	d9, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80027b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80027be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80027c4:	edd3 6a00 	vldr	s13, [r3]
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80027d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027dc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80027e0:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	2004      	movs	r0, #4
 80027e8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ec:	f001 fbe2 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027f0:	eeb0 7b40 	vmov.f64	d7, d0
 80027f4:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80027f8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80027fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002800:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002804:	4b70      	ldr	r3, [pc, #448]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	edd7 7a04 	vldr	s15, [r7, #16]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	edd7 7a06 	vldr	s15, [r7, #24]
 8002816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281a:	4b6b      	ldr	r3, [pc, #428]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002828:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 800282c:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 8002830:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002834:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X21 = X2
 8002838:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 800283c:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800283e:	ed93 7a00 	vldr	s14, [r3]
 8002842:	edd7 7a05 	vldr	s15, [r7, #20]
 8002846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284a:	edd7 7a07 	vldr	s15, [r7, #28]
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002856:	edd7 7a03 	vldr	s15, [r7, #12]
 800285a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800285e:	4b5a      	ldr	r3, [pc, #360]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	2004      	movs	r0, #4
 8002866:	eeb0 0a67 	vmov.f32	s0, s15
 800286a:	f001 fba3 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800286e:	eeb0 7b40 	vmov.f64	d7, d0
 8002872:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002876:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800287a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800287e:	ee38 6b07 	vadd.f64	d6, d8, d7
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002884:	ed93 7a00 	vldr	s14, [r3]
 8002888:	edd7 7a04 	vldr	s15, [r7, #16]
 800288c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002890:	edd7 7a06 	vldr	s15, [r7, #24]
 8002894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028a6:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80028aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80028ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80028b8:	edd3 6a00 	vldr	s13, [r3]
 80028bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80028cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80028d4:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	2004      	movs	r0, #4
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	f001 fb68 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028e4:	eeb0 7b40 	vmov.f64	d7, d0
 80028e8:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80028ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80028f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028f4:	ee39 6b07 	vadd.f64	d6, d9, d7
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	edd7 7a06 	vldr	s15, [r7, #24]
 800290a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800291c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002920:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 8002924:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002928:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 800292c:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	edd7 7a05 	vldr	s15, [r7, #20]
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002946:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800294a:	edd7 7a03 	vldr	s15, [r7, #12]
 800294e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	2004      	movs	r0, #4
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	f001 fb29 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002962:	eeb0 7b40 	vmov.f64	d7, d0
 8002966:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800296a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800296e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002972:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002978:	ed93 7a00 	vldr	s14, [r3]
 800297c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002984:	edd7 7a06 	vldr	s15, [r7, #24]
 8002988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800299e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80029a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80029a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80029ac:	ed93 7a00 	vldr	s14, [r3]
 80029b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80029c4:	e002      	b.n	80029cc <_Z12KalmanFilterf11robot_joint+0x40c>
 80029c6:	bf00      	nop
 80029c8:	24000024 	.word	0x24000024
 80029cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80029d4:	4bef      	ldr	r3, [pc, #956]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	2004      	movs	r0, #4
 80029dc:	eeb0 0a67 	vmov.f32	s0, s15
 80029e0:	f001 fae8 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029e4:	eeb0 7b40 	vmov.f64	d7, d0
 80029e8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80029ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80029f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029f4:	ee38 6b07 	vadd.f64	d6, d8, d7
 80029f8:	4be6      	ldr	r3, [pc, #920]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a06:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0e:	4be1      	ldr	r3, [pc, #900]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1c:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002a20:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4bd9      	ldr	r3, [pc, #868]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a2e:	edd3 6a00 	vldr	s13, [r3]
 8002a32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a46:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002a4a:	4bd2      	ldr	r3, [pc, #840]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	2004      	movs	r0, #4
 8002a52:	eeb0 0a67 	vmov.f32	s0, s15
 8002a56:	f001 faad 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a5a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a5e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8002a62:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a6a:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002a6e:	4bc9      	ldr	r3, [pc, #804]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a84:	4bc3      	ldr	r3, [pc, #780]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a96:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 8002a9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002a9e:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002aa2:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 8002aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aaa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002aae:	4bb9      	ldr	r3, [pc, #740]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aba:	f001 fa7b 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002abe:	eeb0 7b40 	vmov.f64	d7, d0
 8002ac2:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002ac6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002aca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ace:	4bb1      	ldr	r3, [pc, #708]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ad0:	ed93 7a00 	vldr	s14, [r3]
 8002ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ae0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ae4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002af0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002af4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002af8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
joint.p21 =
		P21 + P22 * dt + (Q * pow(dt, 3)) / 2
 8002afc:	4ba5      	ldr	r3, [pc, #660]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002afe:	ed93 7a00 	vldr	s14, [r3]
 8002b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b1a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002b1e:	4b9d      	ldr	r3, [pc, #628]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	2003      	movs	r0, #3
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	f001 fa43 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b2e:	eeb0 7b40 	vmov.f64	d7, d0
 8002b32:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002b36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002b3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b3e:	ee38 8b07 	vadd.f64	d8, d8, d7
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 8002b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b46:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002b4a:	4b92      	ldr	r3, [pc, #584]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	2003      	movs	r0, #3
 8002b52:	eeb0 0a67 	vmov.f32	s0, s15
 8002b56:	f001 fa2d 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b5a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b5e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002b62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002b66:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b6a:	4b8a      	ldr	r3, [pc, #552]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b88:	ee36 9b07 	vadd.f64	d9, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002b8c:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
 8002b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002baa:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002bae:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	2004      	movs	r0, #4
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	f001 f9fb 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002bbe:	eeb0 7b40 	vmov.f64	d7, d0
 8002bc2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002bc6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002bca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bce:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 8002bd2:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002bd4:	ed93 7a00 	vldr	s14, [r3]
 8002bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bf6:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002bfa:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002bfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0a:	4b62      	ldr	r3, [pc, #392]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c0c:	edd3 6a00 	vldr	s13, [r3]
 8002c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c24:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002c28:	4b5a      	ldr	r3, [pc, #360]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	2004      	movs	r0, #4
 8002c30:	eeb0 0a67 	vmov.f32	s0, s15
 8002c34:	f001 f9be 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002c38:	eeb0 7b40 	vmov.f64	d7, d0
 8002c3c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002c40:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002c44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c48:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 8002c4c:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c4e:	ed93 7a00 	vldr	s14, [r3]
 8002c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c62:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c70:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002c74:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 8002c78:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002c7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p21 =
 8002c80:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
joint.p22 = P22 + Q * pow(dt, 2)
 8002c84:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c88:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c90:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca0:	f001 f988 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ca4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ca8:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002cac:	ee38 8b07 	vadd.f64	d8, d8, d7
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc4:	f001 f976 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002cc8:	eeb0 7b40 	vmov.f64	d7, d0
 8002ccc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002cd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002cd4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cf6:	ee36 9b07 	vadd.f64	d9, d6, d7
				* ((Q * pow(dt, 3)) / 2 + P22 * dt + P21))
 8002cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cfe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	2003      	movs	r0, #3
 8002d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0e:	f001 f951 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d12:	eeb0 7b40 	vmov.f64	d7, d0
 8002d16:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002d1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002d1e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d24:	ed93 7a00 	vldr	s14, [r3]
 8002d28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d44:	ee29 9b07 	vmul.f64	d9, d9, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002d48:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d56:	edd3 6a00 	vldr	s13, [r3]
 8002d5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d6e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	2004      	movs	r0, #4
 8002d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7e:	f001 f919 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d82:	eeb0 7b40 	vmov.f64	d7, d0
 8002d86:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002d8a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002d8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d92:	e001      	b.n	8002d98 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8002d94:	24000024 	.word	0x24000024
 8002d98:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002daa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dc0:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002dc4:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002dc8:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002dcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p22 = P22 + Q * pow(dt, 2)
 8002dd0:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

return joint;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ddc:	22a0      	movs	r2, #160	; 0xa0
 8002dde:	4619      	mov	r1, r3
 8002de0:	f00d f930 	bl	8010044 <memcpy>

}
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	ecbd 8b08 	vpop	{d8-d11}
 8002dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002df2:	b004      	add	sp, #16
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	24000024 	.word	0x24000024
 8002dfc:	00000000 	.word	0x00000000

08002e00 <HAL_TIM_PeriodElapsedCallback>:
buff.q4 = S3;

return buff;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	ed2d 8b02 	vpush	{d8}
 8002e06:	b0db      	sub	sp, #364	; 0x16c
 8002e08:	af26      	add	r7, sp, #152	; 0x98
 8002e0a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
// tim7 1000 Hz
// tim12 2000 Hz
// tim6 200 Hz
// tim14 500Hz

if (htim == &htim6) {	//
 8002e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e12:	4ac7      	ldr	r2, [pc, #796]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	f040 80bc 	bne.w	8002f92 <HAL_TIM_PeriodElapsedCallback+0x192>

	encoderJ1.AMT21_Read();
 8002e1a:	48c6      	ldr	r0, [pc, #792]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002e1c:	f7fd fe0f 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002e20:	48c4      	ldr	r0, [pc, #784]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002e22:	f7fd fe3b 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4bc3      	ldr	r3, [pc, #780]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002e2c:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8002e2e:	4bc2      	ldr	r3, [pc, #776]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_TIM_PeriodElapsedCallback+0x44>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002e36:	48bf      	ldr	r0, [pc, #764]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002e38:	f7fd fe94 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4bbe      	ldr	r3, [pc, #760]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002e42:	801a      	strh	r2, [r3, #0]
	}

	encoderJ3.AMT21_Read();
 8002e44:	48be      	ldr	r0, [pc, #760]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002e46:	f7fd fdfa 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002e4a:	48bd      	ldr	r0, [pc, #756]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002e4c:	f7fd fe26 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4bbb      	ldr	r3, [pc, #748]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002e56:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8002e58:	4bba      	ldr	r3, [pc, #744]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_TIM_PeriodElapsedCallback+0x6e>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002e60:	48b7      	ldr	r0, [pc, #732]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002e62:	f7fd fe7f 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4bb7      	ldr	r3, [pc, #732]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002e6c:	801a      	strh	r2, [r3, #0]
	}

	float sethome_q1 = -0.4137;
 8002e6e:	4bb7      	ldr	r3, [pc, #732]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float sethome_q2 = 0.1;
 8002e74:	4bb6      	ldr	r3, [pc, #728]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float sethome_q3 =   0.9638;
 8002e7a:	4bb6      	ldr	r3, [pc, #728]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8002e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float sethome_yaw = -0.5501;
 8002e80:	4bb5      	ldr	r3, [pc, #724]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002e82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	error_q1 = sethome_q1*2609.0 - fcb_joint1.Encoder;
 8002e86:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002e8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e8e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8003120 <HAL_TIM_PeriodElapsedCallback+0x320>
 8002e92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e96:	4ba9      	ldr	r3, [pc, #676]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ea4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ea8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002eac:	4bab      	ldr	r3, [pc, #684]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002eae:	edc3 7a00 	vstr	s15, [r3]
	error_q3 = sethome_q3*2609.0 - fcb_joint3.Encoder;
 8002eb2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002eba:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8003120 <HAL_TIM_PeriodElapsedCallback+0x320>
 8002ebe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ec2:	4ba1      	ldr	r3, [pc, #644]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ed0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ed4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ed8:	4ba1      	ldr	r3, [pc, #644]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002eda:	edc3 7a00 	vstr	s15, [r3]

	stepperJ1.StepperSetFrequency(error_q1*-2.0);
 8002ede:	4b9f      	ldr	r3, [pc, #636]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	489c      	ldr	r0, [pc, #624]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002ef2:	f7fe f961 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetFrequency(error_q3/3);
 8002ef6:	4b9a      	ldr	r3, [pc, #616]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002f00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f04:	eeb0 0a47 	vmov.f32	s0, s14
 8002f08:	4897      	ldr	r0, [pc, #604]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002f0a:	f7fe f955 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	if (abs(error_q3) < 20.0)
 8002f0e:	4b94      	ldr	r3, [pc, #592]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	f7fe fe04 	bl	8001b24 <_ZSt3absf>
 8002f1c:	eef0 7a40 	vmov.f32	s15, s0
 8002f20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	bf4c      	ite	mi
 8002f2e:	2301      	movmi	r3, #1
 8002f30:	2300      	movpl	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x142>
	{
		stepperJ3.StepperSetFrequency(0);
 8002f38:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800316c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8002f3c:	488a      	ldr	r0, [pc, #552]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002f3e:	f7fe f93b 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	}
	if ( abs(error_q1) < 15.0 )
 8002f42:	4b86      	ldr	r3, [pc, #536]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4c:	f7fe fdea 	bl	8001b24 <_ZSt3absf>
 8002f50:	eef0 7a40 	vmov.f32	s15, s0
 8002f54:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	bf4c      	ite	mi
 8002f62:	2301      	movmi	r3, #1
 8002f64:	2300      	movpl	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		State_Sethome = 0;
 8002f6c:	4b80      	ldr	r3, [pc, #512]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
		stepperJ1.StepperSetFrequency(0);
 8002f72:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800316c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8002f76:	487b      	ldr	r0, [pc, #492]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002f78:	f7fe f91e 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(0);
 8002f7c:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800316c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8002f80:	4879      	ldr	r0, [pc, #484]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002f82:	f7fe f919 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
		HAL_TIM_Base_Stop_IT(&htim6);
 8002f86:	486a      	ldr	r0, [pc, #424]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002f88:	f008 ff20 	bl	800bdcc <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim7);
 8002f8c:	4879      	ldr	r0, [pc, #484]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8002f8e:	f008 fea5 	bl	800bcdc <HAL_TIM_Base_Start_IT>

if (htim == &htim12) {	//

}

if (htim == &htim5) {	//
 8002f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f96:	4a78      	ldr	r2, [pc, #480]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	f040 81f5 	bne.w	8003388 <HAL_TIM_PeriodElapsedCallback+0x588>

		encoderJ1.AMT21_Read();
 8002f9e:	4865      	ldr	r0, [pc, #404]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002fa0:	f7fd fd4d 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002fa4:	4863      	ldr	r0, [pc, #396]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002fa6:	f7fd fd79 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b62      	ldr	r3, [pc, #392]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002fb0:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002fba:	485e      	ldr	r0, [pc, #376]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002fbc:	f7fd fdd2 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b5d      	ldr	r3, [pc, #372]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002fc6:	801a      	strh	r2, [r3, #0]
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			posJ2 = encoderJ2.getUnwarpValue();
//		}

		encoderJ3.AMT21_Read();
 8002fc8:	485d      	ldr	r0, [pc, #372]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002fca:	f7fd fd38 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002fce:	485c      	ldr	r0, [pc, #368]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002fd0:	f7fd fd64 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002fda:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_TIM_PeriodElapsedCallback+0x1f2>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002fe4:	4856      	ldr	r0, [pc, #344]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002fe6:	f7fd fdbd 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002ff0:	801a      	strh	r2, [r3, #0]
		}

		encoderJ4.AMT21_Read();
 8002ff2:	4862      	ldr	r0, [pc, #392]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8002ff4:	f7fd fd23 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8002ff8:	4860      	ldr	r0, [pc, #384]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8002ffa:	f7fd fd4f 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003004:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003006:	4b5e      	ldr	r3, [pc, #376]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_TIM_PeriodElapsedCallback+0x21c>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() ;
 800300e:	485b      	ldr	r0, [pc, #364]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8003010:	f7fd fda8 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4b5a      	ldr	r3, [pc, #360]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800301a:	801a      	strh	r2, [r3, #0]
//		stepperJ1.StepperSetFrequency(dq1);
//		stepperJ2.StepperSetFrequency(dq2);
//		stepperJ3.StepperSetFrequency(dq3);
//		stepperJ4.StepperSetFrequency(dq4);

		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0.0,fcb_joint3.Encoder / 2609.0, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, 0.0);
 800301c:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b21b      	sxth	r3, r3
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800302a:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8003120 <HAL_TIM_PeriodElapsedCallback+0x320>
 800302e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003032:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8003036:	4b44      	ldr	r3, [pc, #272]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b21b      	sxth	r3, r3
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003044:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8003120 <HAL_TIM_PeriodElapsedCallback+0x320>
 8003048:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800304c:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
 8003050:	4b4d      	ldr	r3, [pc, #308]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b25b      	sxtb	r3, r3
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800305e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8003128 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003066:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 800306a:	4b48      	ldr	r3, [pc, #288]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b25b      	sxtb	r3, r3
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003078:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8003128 <HAL_TIM_PeriodElapsedCallback+0x328>
 800307c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003080:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b25b      	sxtb	r3, r3
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003092:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8003128 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003096:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800309a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800309e:	eddf 3a33 	vldr	s7, [pc, #204]	; 800316c <HAL_TIM_PeriodElapsedCallback+0x36c>
 80030a2:	eeb0 3a67 	vmov.f32	s6, s15
 80030a6:	eddf 1a31 	vldr	s3, [pc, #196]	; 800316c <HAL_TIM_PeriodElapsedCallback+0x36c>
 80030aa:	eeb0 1a44 	vmov.f32	s2, s8
 80030ae:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800316c <HAL_TIM_PeriodElapsedCallback+0x36c>
 80030b2:	eeb0 0a64 	vmov.f32	s0, s9
 80030b6:	f7ff f871 	bl	800219c <_Z10Update_ivkffffffff>

		int i;
				for (i = 1 ; i<num ; i++)
 80030ba:	2301      	movs	r3, #1
 80030bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030c8:	429a      	cmp	r2, r3
 80030ca:	da7e      	bge.n	80031ca <HAL_TIM_PeriodElapsedCallback+0x3ca>
				{
					box_q1[i-1] = box_q1[i];
 80030cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4931      	ldr	r1, [pc, #196]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80030d4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	440a      	add	r2, r1
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	492e      	ldr	r1, [pc, #184]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	601a      	str	r2, [r3, #0]
					box_q2[i-1] = box_q2[i];
 80030e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ea:	3b01      	subs	r3, #1
 80030ec:	492b      	ldr	r1, [pc, #172]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80030ee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	440a      	add	r2, r1
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	4928      	ldr	r1, [pc, #160]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 8003100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003104:	3b01      	subs	r3, #1
 8003106:	4926      	ldr	r1, [pc, #152]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003108:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	440a      	add	r2, r1
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4923      	ldr	r1, [pc, #140]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e043      	b.n	80031a4 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800311c:	f3af 8000 	nop.w
 8003120:	00000000 	.word	0x00000000
 8003124:	40a46200 	.word	0x40a46200
 8003128:	00000000 	.word	0x00000000
 800312c:	408f4000 	.word	0x408f4000
 8003130:	24000aa4 	.word	0x24000aa4
 8003134:	24000228 	.word	0x24000228
 8003138:	24000338 	.word	0x24000338
 800313c:	240005cc 	.word	0x240005cc
 8003140:	24000244 	.word	0x24000244
 8003144:	24000339 	.word	0x24000339
 8003148:	2400070c 	.word	0x2400070c
 800314c:	bed3d07d 	.word	0xbed3d07d
 8003150:	3dcccccd 	.word	0x3dcccccd
 8003154:	3f76bb99 	.word	0x3f76bb99
 8003158:	bf0cd35b 	.word	0xbf0cd35b
 800315c:	24000388 	.word	0x24000388
 8003160:	2400038c 	.word	0x2400038c
 8003164:	2400027c 	.word	0x2400027c
 8003168:	240002cc 	.word	0x240002cc
 800316c:	00000000 	.word	0x00000000
 8003170:	24000000 	.word	0x24000000
 8003174:	24000c20 	.word	0x24000c20
 8003178:	240009c0 	.word	0x240009c0
 800317c:	24000260 	.word	0x24000260
 8003180:	2400033a 	.word	0x2400033a
 8003184:	240007ac 	.word	0x240007ac
 8003188:	2400033f 	.word	0x2400033f
 800318c:	24000340 	.word	0x24000340
 8003190:	24000341 	.word	0x24000341
 8003194:	24000028 	.word	0x24000028
 8003198:	240003ec 	.word	0x240003ec
 800319c:	24000464 	.word	0x24000464
 80031a0:	240004dc 	.word	0x240004dc
					box_q4[i-1] = box_q4[i];
 80031a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031a8:	3b01      	subs	r3, #1
 80031aa:	494a      	ldr	r1, [pc, #296]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80031ac:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	440a      	add	r2, r1
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4947      	ldr	r1, [pc, #284]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	601a      	str	r2, [r3, #0]
				for (i = 1 ; i<num ; i++)
 80031be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031c2:	3301      	adds	r3, #1
 80031c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031c8:	e77a      	b.n	80030c0 <HAL_TIM_PeriodElapsedCallback+0x2c0>
				}
				 box_q1[num-1] = w_q1;
 80031ca:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	4a42      	ldr	r2, [pc, #264]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	4942      	ldr	r1, [pc, #264]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	601a      	str	r2, [r3, #0]
				 box_q2[num-1] = dz;
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25a      	sxtb	r2, r3
 80031e2:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	ee07 2a90 	vmov	s15, r2
 80031ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f0:	4a3d      	ldr	r2, [pc, #244]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	edc3 7a00 	vstr	s15, [r3]
				 box_q3[num-1] = w_q3;
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3b01      	subs	r3, #1
 8003200:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	493a      	ldr	r1, [pc, #232]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	601a      	str	r2, [r3, #0]
				 box_q4[num-1] = w_q4;
 800320c:	4b32      	ldr	r3, [pc, #200]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3b01      	subs	r3, #1
 8003212:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	492f      	ldr	r1, [pc, #188]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	601a      	str	r2, [r3, #0]

				u_q1 = 0.0;
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
				u_q2 = 0.0;
 8003226:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 800322e:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
				u_q4 = 0.0;
 8003236:	4b33      	ldr	r3, [pc, #204]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800324c:	429a      	cmp	r2, r3
 800324e:	da5b      	bge.n	8003308 <HAL_TIM_PeriodElapsedCallback+0x508>
				{
					u_q1 += box_q1[i];
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8003252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800326a:	edc3 7a00 	vstr	s15, [r3]
					u_q2 += box_q2[i];
 800326e:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	ed93 7a00 	vldr	s14, [r3]
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003288:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800328e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	ed93 7a00 	vldr	s14, [r3]
 800329a:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80032a6:	edc3 7a00 	vstr	s15, [r3]
					u_q4 += box_q4[i];
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80032ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	ed93 7a00 	vldr	s14, [r3]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80032c4:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 80032c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032cc:	3301      	adds	r3, #1
 80032ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032d2:	e7b7      	b.n	8003244 <HAL_TIM_PeriodElapsedCallback+0x444>
 80032d4:	24000554 	.word	0x24000554
 80032d8:	24000028 	.word	0x24000028
 80032dc:	240003b4 	.word	0x240003b4
 80032e0:	240003ec 	.word	0x240003ec
 80032e4:	24000341 	.word	0x24000341
 80032e8:	24000464 	.word	0x24000464
 80032ec:	240003bc 	.word	0x240003bc
 80032f0:	240004dc 	.word	0x240004dc
 80032f4:	240003c0 	.word	0x240003c0
 80032f8:	240003c4 	.word	0x240003c4
 80032fc:	240003c8 	.word	0x240003c8
 8003300:	240003cc 	.word	0x240003cc
 8003304:	240003d0 	.word	0x240003d0
				}

				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 8003308:	4bd1      	ldr	r3, [pc, #836]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x850>)
 800330a:	edd3 6a00 	vldr	s13, [r3]
 800330e:	4bd1      	ldr	r3, [pc, #836]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800331a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331e:	eef1 7a67 	vneg.f32	s15, s15
 8003322:	eeb0 0a67 	vmov.f32	s0, s15
 8003326:	48cc      	ldr	r0, [pc, #816]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8003328:	f7fe f9fa 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ2.StepperSetFrequency(u_q2/3.0);
 800332c:	4bcb      	ldr	r3, [pc, #812]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003336:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800333a:	eeb0 0a47 	vmov.f32	s0, s14
 800333e:	48c8      	ldr	r0, [pc, #800]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003340:	f7fd ff3a 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 8003344:	4bc7      	ldr	r3, [pc, #796]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003346:	ed93 7a00 	vldr	s14, [r3]
 800334a:	4bc2      	ldr	r3, [pc, #776]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800335a:	eeb0 0a66 	vmov.f32	s0, s13
 800335e:	48c2      	ldr	r0, [pc, #776]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8003360:	f7fe f9de 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ4.StepperOpenLoopSpeed(u_q4/num*-1.0);
 8003364:	4bc1      	ldr	r3, [pc, #772]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8003366:	edd3 6a00 	vldr	s13, [r3]
 800336a:	4bba      	ldr	r3, [pc, #744]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800337a:	eef1 7a67 	vneg.f32	s15, s15
 800337e:	eeb0 0a67 	vmov.f32	s0, s15
 8003382:	48bb      	ldr	r0, [pc, #748]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8003384:	f7fe f9cc 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>


}


	if (htim == &htim7) {
 8003388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800338c:	4ab9      	ldr	r2, [pc, #740]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x874>)
 800338e:	4293      	cmp	r3, r2
 8003390:	f040 8361 	bne.w	8003a56 <HAL_TIM_PeriodElapsedCallback+0xc56>

		encoderJ1.AMT21_Read();
 8003394:	48b8      	ldr	r0, [pc, #736]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8003396:	f7fd fb52 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800339a:	48b7      	ldr	r0, [pc, #732]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800339c:	f7fd fb7e 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4bb5      	ldr	r3, [pc, #724]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80033a6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80033a8:	4bb4      	ldr	r3, [pc, #720]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <HAL_TIM_PeriodElapsedCallback+0x5be>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 80033b0:	48b1      	ldr	r0, [pc, #708]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80033b2:	f7fd fbd7 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	4bb1      	ldr	r3, [pc, #708]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x880>)
 80033bc:	801a      	strh	r2, [r3, #0]
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			fcb_joint2.Encoder = encoderJ2.getUnwarpValue();
//		}

		encoderJ3.AMT21_Read();
 80033be:	48b1      	ldr	r0, [pc, #708]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x884>)
 80033c0:	f7fd fb3d 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80033c4:	48af      	ldr	r0, [pc, #700]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x884>)
 80033c6:	f7fd fb69 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	4bae      	ldr	r3, [pc, #696]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80033d0:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80033d2:	4bad      	ldr	r3, [pc, #692]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_TIM_PeriodElapsedCallback+0x5e8>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 80033da:	48aa      	ldr	r0, [pc, #680]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x884>)
 80033dc:	f7fd fbc2 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	4ba9      	ldr	r3, [pc, #676]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80033e6:	801a      	strh	r2, [r3, #0]
		}

		encoderJ4.AMT21_Read();
 80033e8:	48a9      	ldr	r0, [pc, #676]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x890>)
 80033ea:	f7fd fb28 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80033ee:	48a8      	ldr	r0, [pc, #672]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x890>)
 80033f0:	f7fd fb54 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4ba6      	ldr	r3, [pc, #664]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x894>)
 80033fa:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80033fc:	4ba5      	ldr	r3, [pc, #660]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x894>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_TIM_PeriodElapsedCallback+0x612>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() ;
 8003404:	48a2      	ldr	r0, [pc, #648]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003406:	f7fd fbad 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	4ba2      	ldr	r3, [pc, #648]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003410:	801a      	strh	r2, [r3, #0]
		}

		float t2 = t * t;
 8003412:	4ba2      	ldr	r3, [pc, #648]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003414:	ed93 7a00 	vldr	s14, [r3]
 8003418:	4ba0      	ldr	r3, [pc, #640]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		float t3 = t * t * t;
 8003426:	4b9d      	ldr	r3, [pc, #628]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003428:	ed93 7a00 	vldr	s14, [r3]
 800342c:	4b9b      	ldr	r3, [pc, #620]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003436:	4b99      	ldr	r3, [pc, #612]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003440:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		float t4 = t * t * t * t;
 8003444:	4b95      	ldr	r3, [pc, #596]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003446:	ed93 7a00 	vldr	s14, [r3]
 800344a:	4b94      	ldr	r3, [pc, #592]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003454:	4b91      	ldr	r3, [pc, #580]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800345e:	4b8f      	ldr	r3, [pc, #572]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003468:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		float t5 = t * t * t * t * t;
 800346c:	4b8b      	ldr	r3, [pc, #556]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800346e:	ed93 7a00 	vldr	s14, [r3]
 8003472:	4b8a      	ldr	r3, [pc, #552]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003474:	edd3 7a00 	vldr	s15, [r3]
 8003478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800347c:	4b87      	ldr	r3, [pc, #540]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800347e:	edd3 7a00 	vldr	s15, [r3]
 8003482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003486:	4b85      	ldr	r3, [pc, #532]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003490:	4b82      	ldr	r3, [pc, #520]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
//			v = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
//			p = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
//			a = ((2.0*fcb_joint1.C2) + (6.0*fcb_joint1.C3*t) + (12.0*fcb_joint1.C4*t2) + (20.0*fcb_joint1.C5*t3));
//		}

		v = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 800349e:	4b7b      	ldr	r3, [pc, #492]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80034a0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80034a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034a8:	4b78      	ldr	r3, [pc, #480]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80034aa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80034ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034b2:	ee37 5b07 	vadd.f64	d5, d7, d7
 80034b6:	4b79      	ldr	r3, [pc, #484]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80034c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80034c8:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80034ca:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80034ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034d2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80034d6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034da:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80034de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80034e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80034ea:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80034ec:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80034f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034f4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80034f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034fc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003500:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003504:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003508:	ee36 6b07 	vadd.f64	d6, d6, d7
 800350c:	4b5f      	ldr	r3, [pc, #380]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800350e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8003512:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003516:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800351a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800351e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003526:	ee25 7b07 	vmul.f64	d7, d5, d7
 800352a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800352e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003532:	4b5b      	ldr	r3, [pc, #364]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8003534:	edc3 7a00 	vstr	s15, [r3]
		p = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 8003538:	4b54      	ldr	r3, [pc, #336]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800353a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800353e:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003540:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8003544:	4b55      	ldr	r3, [pc, #340]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003546:	edd3 7a00 	vldr	s15, [r3]
 800354a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003552:	4b4e      	ldr	r3, [pc, #312]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003554:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8003558:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800355c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003564:	4b49      	ldr	r3, [pc, #292]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003566:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800356a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800356e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003576:	4b45      	ldr	r3, [pc, #276]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003578:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800357c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003588:	4b40      	ldr	r3, [pc, #256]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800358a:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800358e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359a:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 800359c:	edc3 7a00 	vstr	s15, [r3]
		a = ((2.0*fcb_joint3.C2) + (6.0*fcb_joint3.C3*t) + (12.0*fcb_joint3.C4*t2) + (20.0*fcb_joint3.C5*t3));
 80035a0:	4b3a      	ldr	r3, [pc, #232]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80035a2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80035a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035aa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80035ae:	4b37      	ldr	r3, [pc, #220]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80035b0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80035b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035b8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80035bc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80035ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80035d4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80035d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035dc:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 80035e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80035f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80035f6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80035fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035fe:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8003602:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003606:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800360a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800360e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003612:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003616:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800361c:	edc3 7a00 	vstr	s15, [r3]
//		findchessbot_joint_state = find_IK(debug_pos_x, debug_pos_y, 0, 0);
//		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0, fcb_joint3.Encoder / 2609.0, 0, idx, idy, 0.0, 0.0);
// Fuck you


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8003622:	ed93 7a01 	vldr	s14, [r3, #4]
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b21b      	sxth	r3, r3
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x880>)
 800363a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003640:	ed93 7a01 	vldr	s14, [r3, #4]
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b21b      	sxth	r3, r3
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	e02d      	b.n	80036ac <HAL_TIM_PeriodElapsedCallback+0x8ac>
 8003650:	240003c4 	.word	0x240003c4
 8003654:	24000028 	.word	0x24000028
 8003658:	2400027c 	.word	0x2400027c
 800365c:	240003c8 	.word	0x240003c8
 8003660:	240002a4 	.word	0x240002a4
 8003664:	240003cc 	.word	0x240003cc
 8003668:	240002cc 	.word	0x240002cc
 800366c:	240003d0 	.word	0x240003d0
 8003670:	240002f4 	.word	0x240002f4
 8003674:	24000c20 	.word	0x24000c20
 8003678:	24000228 	.word	0x24000228
 800367c:	24000338 	.word	0x24000338
 8003680:	240005cc 	.word	0x240005cc
 8003684:	24000244 	.word	0x24000244
 8003688:	24000339 	.word	0x24000339
 800368c:	2400070c 	.word	0x2400070c
 8003690:	24000260 	.word	0x24000260
 8003694:	2400033a 	.word	0x2400033a
 8003698:	240007ac 	.word	0x240007ac
 800369c:	24000394 	.word	0x24000394
 80036a0:	2400084c 	.word	0x2400084c
 80036a4:	24000850 	.word	0x24000850
 80036a8:	24000854 	.word	0x24000854
 80036ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b4:	4bb2      	ldr	r3, [pc, #712]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 80036b6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80036ba:	4bb2      	ldr	r3, [pc, #712]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80036bc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80036c0:	4bb0      	ldr	r3, [pc, #704]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80036c2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80036c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ca:	4bae      	ldr	r3, [pc, #696]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80036cc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 80036d0:	4bab      	ldr	r3, [pc, #684]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 80036d2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80036d6:	4baa      	ldr	r3, [pc, #680]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 80036d8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80036dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e0:	4ba7      	ldr	r3, [pc, #668]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 80036e2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder / 2609.0, fcb_joint1);
 80036e6:	4ba7      	ldr	r3, [pc, #668]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036f4:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0xb70>
 80036f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036fc:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8003700:	4ea0      	ldr	r6, [pc, #640]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003702:	463d      	mov	r5, r7
 8003704:	4c9f      	ldr	r4, [pc, #636]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003706:	4668      	mov	r0, sp
 8003708:	f104 030c 	add.w	r3, r4, #12
 800370c:	2294      	movs	r2, #148	; 0x94
 800370e:	4619      	mov	r1, r3
 8003710:	f00c fc98 	bl	8010044 <memcpy>
 8003714:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003718:	eeb0 0a48 	vmov.f32	s0, s16
 800371c:	4628      	mov	r0, r5
 800371e:	f7fe ff4f 	bl	80025c0 <_Z12KalmanFilterf11robot_joint>
 8003722:	4630      	mov	r0, r6
 8003724:	463b      	mov	r3, r7
 8003726:	22a0      	movs	r2, #160	; 0xa0
 8003728:	4619      	mov	r1, r3
 800372a:	f00c fc8b 	bl	8010044 <memcpy>
		fcb_joint3 = KalmanFilter(fcb_joint3.Encoder/ 2609.0 ,fcb_joint3);
 800372e:	4b94      	ldr	r3, [pc, #592]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b21b      	sxth	r3, r3
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800373c:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0xb70>
 8003740:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003744:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8003748:	4e8d      	ldr	r6, [pc, #564]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 800374a:	463d      	mov	r5, r7
 800374c:	4c8c      	ldr	r4, [pc, #560]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 800374e:	4668      	mov	r0, sp
 8003750:	f104 030c 	add.w	r3, r4, #12
 8003754:	2294      	movs	r2, #148	; 0x94
 8003756:	4619      	mov	r1, r3
 8003758:	f00c fc74 	bl	8010044 <memcpy>
 800375c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003760:	eeb0 0a48 	vmov.f32	s0, s16
 8003764:	4628      	mov	r0, r5
 8003766:	f7fe ff2b 	bl	80025c0 <_Z12KalmanFilterf11robot_joint>
 800376a:	4630      	mov	r0, r6
 800376c:	463b      	mov	r3, r7
 800376e:	22a0      	movs	r2, #160	; 0xa0
 8003770:	4619      	mov	r1, r3
 8003772:	f00c fc67 	bl	8010044 <memcpy>
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

//		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
//		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003776:	4b83      	ldr	r3, [pc, #524]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	4a82      	ldr	r2, [pc, #520]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 800377c:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 800377e:	4b80      	ldr	r3, [pc, #512]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	4a7f      	ldr	r2, [pc, #508]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003784:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003786:	4b7f      	ldr	r3, [pc, #508]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b21b      	sxth	r3, r3
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003796:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 800379a:	4b79      	ldr	r3, [pc, #484]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b21b      	sxth	r3, r3
 80037a0:	ee07 3a90 	vmov	s15, r3
 80037a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a8:	4b75      	ldr	r3, [pc, #468]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 80037aa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c



//		stepperJ1.StepperOpenLoopSpeed(-1.0 * w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);
		printw_q1 = v * 1000;
 80037ae:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 80037b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037bc:	4b74      	ldr	r3, [pc, #464]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 80037be:	edc3 7a00 	vstr	s15, [r3]
		printw_q2 = 0 * 1000;
 80037c2:	4b74      	ldr	r3, [pc, #464]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0xb94>)
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
		printw_q3 = v * 2000;
 80037ca:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>
 80037d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d8:	4b70      	ldr	r3, [pc, #448]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80037da:	edc3 7a00 	vstr	s15, [r3]
		printw_q4 = v * 1000;
 80037de:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 80037e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ec:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 80037ee:	edc3 7a00 	vstr	s15, [r3]

		printp_q3 = p * 1000.0;
 80037f2:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 80037fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003800:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8003802:	edc3 7a00 	vstr	s15, [r3]
		printa_q3 = a * 1000.0;
 8003806:	4b69      	ldr	r3, [pc, #420]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 8003810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003814:	4b66      	ldr	r3, [pc, #408]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8003816:	edc3 7a00 	vstr	s15, [r3]
//		stepperJ1.StepperOpenLoopSpeed(v);
//		stepperJ2.StepperOpenLoopSpeed(0);
		stepperJ3.StepperOpenLoopSpeed(v);
 800381a:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	eeb0 0a67 	vmov.f32	s0, s15
 8003824:	4863      	ldr	r0, [pc, #396]	; (80039b4 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8003826:	f7fd ff7b 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
//		stepperJ4.StepperOpenLoopSpeed(v);

//		stepperJ1.StepperOpenLoopSpeed
		debug_j1_x11 = fcb_joint1.X11 * 1000.0;
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 800382c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003830:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 8003834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003838:	4b5f      	ldr	r3, [pc, #380]	; (80039b8 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 800383a:	edc3 7a00 	vstr	s15, [r3]
		debug_j3_x11 = fcb_joint3.X11 * 1000.0;
 800383e:	4b50      	ldr	r3, [pc, #320]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003840:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003844:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 8003848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800384c:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 800384e:	edc3 7a00 	vstr	s15, [r3]
		debug_j1_x21 = fcb_joint1.X21 * 1000.0;
 8003852:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003854:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003858:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 800385c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003860:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <HAL_TIM_PeriodElapsedCallback+0xbc0>)
 8003862:	edc3 7a00 	vstr	s15, [r3]
		debug_j3_x21 = fcb_joint3.X21 * 1000.0;
 8003866:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003868:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800386c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 8003870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0xbc4>)
 8003876:	edc3 7a00 	vstr	s15, [r3]
		debug_wq1 = w_q1 * 1000.0;
 800387a:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <HAL_TIM_PeriodElapsedCallback+0xbc8>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 8003884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0xbcc>)
 800388a:	edc3 7a00 	vstr	s15, [r3]
		debug_wq3 = w_q3 * 1000.0;
 800388e:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800398c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 8003898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800389c:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 800389e:	edc3 7a00 	vstr	s15, [r3]

		t = t + (sample_time_1000);
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80038a4:	ed93 7a00 	vldr	s14, [r3]
 80038a8:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80038b4:	edc3 7a00 	vstr	s15, [r3]


		if (t >= fcb_joint3.T) {
 80038b8:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 80038ba:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80038be:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80038c0:	edd3 7a00 	vldr	s15, [r3]
 80038c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	bf94      	ite	ls
 80038ce:	2301      	movls	r3, #1
 80038d0:	2300      	movhi	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80be 	beq.w	8003a56 <HAL_TIM_PeriodElapsedCallback+0xc56>
			t = 0.0;
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f083 0301 	eor.w	r3, r3, #1
 80038ea:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80038ec:	6013      	str	r3, [r2, #0]
//			HAL_TIM_Base_Stop_IT(&htim7);
			if (direction_traj == 0)
 80038ee:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d073      	beq.n	80039e8 <HAL_TIM_PeriodElapsedCallback+0xbe8>
			{
				fcb_joint3 = Update_quintic_Coff(6.0, (fcb_joint3.Encoder / 2609.0), (fcb_joint3.Encoder / 2609.0) - 1.57, 0.0, 0.0, 0.0, 0.0);
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b21b      	sxth	r3, r3
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800390e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0xb70>
 8003912:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003916:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 800391a:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b21b      	sxth	r3, r3
 8003920:	ee07 3a90 	vmov	s15, r3
 8003924:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003928:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0xb70>
 800392c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003930:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8003978 <HAL_TIM_PeriodElapsedCallback+0xb78>
 8003934:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800393c:	4c10      	ldr	r4, [pc, #64]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 800393e:	463b      	mov	r3, r7
 8003940:	ed9f 3a28 	vldr	s6, [pc, #160]	; 80039e4 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 8003944:	eddf 2a27 	vldr	s5, [pc, #156]	; 80039e4 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 8003948:	ed9f 2a26 	vldr	s4, [pc, #152]	; 80039e4 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800394c:	eddf 1a25 	vldr	s3, [pc, #148]	; 80039e4 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 8003950:	eeb0 1a67 	vmov.f32	s2, s15
 8003954:	eef0 0a64 	vmov.f32	s1, s9
 8003958:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fd09 	bl	8002374 <_Z19Update_quintic_Cofffffffff>
 8003962:	4620      	mov	r0, r4
 8003964:	463b      	mov	r3, r7
 8003966:	22a0      	movs	r2, #160	; 0xa0
 8003968:	4619      	mov	r1, r3
 800396a:	f00c fb6b 	bl	8010044 <memcpy>
//					chess_board_ang = 0.0;
//					direction_traj ^= 1;
//				}

	}
}
 800396e:	e072      	b.n	8003a56 <HAL_TIM_PeriodElapsedCallback+0xc56>
 8003970:	00000000 	.word	0x00000000
 8003974:	40a46200 	.word	0x40a46200
 8003978:	51eb851f 	.word	0x51eb851f
 800397c:	3ff91eb8 	.word	0x3ff91eb8
 8003980:	2400070c 	.word	0x2400070c
 8003984:	240005cc 	.word	0x240005cc
 8003988:	2400084c 	.word	0x2400084c
 800398c:	447a0000 	.word	0x447a0000
 8003990:	24000858 	.word	0x24000858
 8003994:	2400085c 	.word	0x2400085c
 8003998:	44fa0000 	.word	0x44fa0000
 800399c:	24000860 	.word	0x24000860
 80039a0:	24000864 	.word	0x24000864
 80039a4:	24000850 	.word	0x24000850
 80039a8:	24000868 	.word	0x24000868
 80039ac:	24000854 	.word	0x24000854
 80039b0:	2400086c 	.word	0x2400086c
 80039b4:	240002cc 	.word	0x240002cc
 80039b8:	240003d4 	.word	0x240003d4
 80039bc:	240003d8 	.word	0x240003d8
 80039c0:	240003dc 	.word	0x240003dc
 80039c4:	240003e0 	.word	0x240003e0
 80039c8:	240003b4 	.word	0x240003b4
 80039cc:	240003e4 	.word	0x240003e4
 80039d0:	240003bc 	.word	0x240003bc
 80039d4:	240003e8 	.word	0x240003e8
 80039d8:	24000394 	.word	0x24000394
 80039dc:	24000020 	.word	0x24000020
 80039e0:	24000390 	.word	0x24000390
 80039e4:	00000000 	.word	0x00000000
				fcb_joint3 = Update_quintic_Coff(6.0, (fcb_joint3.Encoder / 2609.0), (fcb_joint3.Encoder / 2609.0) + 1.57, 0.0, 0.0, 0.0, 0.0);
 80039e8:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b21b      	sxth	r3, r3
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039f6:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8003a68 <HAL_TIM_PeriodElapsedCallback+0xc68>
 80039fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80039fe:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b21b      	sxth	r3, r3
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a10:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8003a68 <HAL_TIM_PeriodElapsedCallback+0xc68>
 8003a14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a18:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8003a70 <HAL_TIM_PeriodElapsedCallback+0xc70>
 8003a1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a24:	4c14      	ldr	r4, [pc, #80]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8003a26:	463b      	mov	r3, r7
 8003a28:	ed9f 3a14 	vldr	s6, [pc, #80]	; 8003a7c <HAL_TIM_PeriodElapsedCallback+0xc7c>
 8003a2c:	eddf 2a13 	vldr	s5, [pc, #76]	; 8003a7c <HAL_TIM_PeriodElapsedCallback+0xc7c>
 8003a30:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8003a7c <HAL_TIM_PeriodElapsedCallback+0xc7c>
 8003a34:	eddf 1a11 	vldr	s3, [pc, #68]	; 8003a7c <HAL_TIM_PeriodElapsedCallback+0xc7c>
 8003a38:	eeb0 1a67 	vmov.f32	s2, s15
 8003a3c:	eef0 0a64 	vmov.f32	s1, s9
 8003a40:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fc95 	bl	8002374 <_Z19Update_quintic_Cofffffffff>
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	22a0      	movs	r2, #160	; 0xa0
 8003a50:	4619      	mov	r1, r3
 8003a52:	f00c faf7 	bl	8010044 <memcpy>
}
 8003a56:	bf00      	nop
 8003a58:	37d4      	adds	r7, #212	; 0xd4
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	ecbd 8b02 	vpop	{d8}
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a62:	bf00      	nop
 8003a64:	f3af 8000 	nop.w
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	40a46200 	.word	0x40a46200
 8003a70:	51eb851f 	.word	0x51eb851f
 8003a74:	3ff91eb8 	.word	0x3ff91eb8
 8003a78:	2400070c 	.word	0x2400070c
 8003a7c:	00000000 	.word	0x00000000

08003a80 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b0a9      	sub	sp, #164	; 0xa4
 8003a84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a86:	f002 f863 	bl	8005b50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003a8a:	f000 f9d9 	bl	8003e40 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003a8e:	f7fd ff13 	bl	80018b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003a92:	f7fd fed1 	bl	8001838 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8003a96:	f001 fdaf 	bl	80055f8 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8003a9a:	f000 ffb3 	bl	8004a04 <MX_TIM2_Init>
	MX_UART4_Init();
 8003a9e:	f001 fd09 	bl	80054b4 <MX_UART4_Init>
	MX_TIM4_Init();
 8003aa2:	f001 f89f 	bl	8004be4 <MX_TIM4_Init>
	MX_SPI3_Init();
 8003aa6:	f000 fc01 	bl	80042ac <MX_SPI3_Init>
	MX_TIM1_Init();
 8003aaa:	f000 fefd 	bl	80048a8 <MX_TIM1_Init>
	MX_TIM3_Init();
 8003aae:	f001 f821 	bl	8004af4 <MX_TIM3_Init>
	MX_TIM5_Init();
 8003ab2:	f001 f90f 	bl	8004cd4 <MX_TIM5_Init>
	MX_TIM15_Init();
 8003ab6:	f001 fa49 	bl	8004f4c <MX_TIM15_Init>
	MX_CRC_Init();
 8003aba:	f7fd fe6d 	bl	8001798 <MX_CRC_Init>
	MX_UART7_Init();
 8003abe:	f001 fd4d 	bl	800555c <MX_UART7_Init>
	MX_TIM6_Init();
 8003ac2:	f001 f955 	bl	8004d70 <MX_TIM6_Init>
	MX_TIM7_Init();
 8003ac6:	f001 f989 	bl	8004ddc <MX_TIM7_Init>
	MX_TIM12_Init();
 8003aca:	f001 f9bd 	bl	8004e48 <MX_TIM12_Init>
	MX_TIM13_Init();
 8003ace:	f001 f9f5 	bl	8004ebc <MX_TIM13_Init>
	MX_TIM14_Init();
 8003ad2:	f001 fa17 	bl	8004f04 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4861      	ldr	r0, [pc, #388]	; (8003c60 <main+0x1e0>)
 8003adc:	f005 fbfe 	bl	80092dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	485f      	ldr	r0, [pc, #380]	; (8003c64 <main+0x1e4>)
 8003ae6:	f005 fbf9 	bl	80092dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003aea:	2200      	movs	r2, #0
 8003aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003af0:	485b      	ldr	r0, [pc, #364]	; (8003c60 <main+0x1e0>)
 8003af2:	f005 fbf3 	bl	80092dc <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8003af6:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003c68 <main+0x1e8>
 8003afa:	485c      	ldr	r0, [pc, #368]	; (8003c6c <main+0x1ec>)
 8003afc:	f7fd fb5c 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 8003b00:	2108      	movs	r1, #8
 8003b02:	485a      	ldr	r0, [pc, #360]	; (8003c6c <main+0x1ec>)
 8003b04:	f7fd fdf4 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8003b08:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8003c70 <main+0x1f0>
 8003b0c:	4857      	ldr	r0, [pc, #348]	; (8003c6c <main+0x1ec>)
 8003b0e:	f7fd fdcb 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8003b12:	4856      	ldr	r0, [pc, #344]	; (8003c6c <main+0x1ec>)
 8003b14:	f7fd fb3f 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8003b18:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8003c68 <main+0x1e8>
 8003b1c:	4855      	ldr	r0, [pc, #340]	; (8003c74 <main+0x1f4>)
 8003b1e:	f7fd fb4b 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(8);
 8003b22:	2108      	movs	r1, #8
 8003b24:	4853      	ldr	r0, [pc, #332]	; (8003c74 <main+0x1f4>)
 8003b26:	f7fd fde3 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8003b2a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003b2e:	4851      	ldr	r0, [pc, #324]	; (8003c74 <main+0x1f4>)
 8003b30:	f7fd fdba 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 8003b34:	484f      	ldr	r0, [pc, #316]	; (8003c74 <main+0x1f4>)
 8003b36:	f7fd fb2e 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8003b3a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8003c68 <main+0x1e8>
 8003b3e:	484e      	ldr	r0, [pc, #312]	; (8003c78 <main+0x1f8>)
 8003b40:	f7fd fb3a 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 8003b44:	2108      	movs	r1, #8
 8003b46:	484c      	ldr	r0, [pc, #304]	; (8003c78 <main+0x1f8>)
 8003b48:	f7fd fdd2 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8003b4c:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8003b50:	4849      	ldr	r0, [pc, #292]	; (8003c78 <main+0x1f8>)
 8003b52:	f7fd fda9 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8003b56:	4848      	ldr	r0, [pc, #288]	; (8003c78 <main+0x1f8>)
 8003b58:	f7fd fb1d 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8003b5c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003c68 <main+0x1e8>
 8003b60:	4846      	ldr	r0, [pc, #280]	; (8003c7c <main+0x1fc>)
 8003b62:	f7fd fb29 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8);
 8003b66:	2108      	movs	r1, #8
 8003b68:	4844      	ldr	r0, [pc, #272]	; (8003c7c <main+0x1fc>)
 8003b6a:	f7fd fdc1 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8003b6e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003b72:	4842      	ldr	r0, [pc, #264]	; (8003c7c <main+0x1fc>)
 8003b74:	f7fd fd98 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8003b78:	4840      	ldr	r0, [pc, #256]	; (8003c7c <main+0x1fc>)
 8003b7a:	f7fd fb0c 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(65);
 8003b7e:	2141      	movs	r1, #65	; 0x41
 8003b80:	483f      	ldr	r0, [pc, #252]	; (8003c80 <main+0x200>)
 8003b82:	f7fd fa50 	bl	8001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 8003b86:	2100      	movs	r1, #0
 8003b88:	483d      	ldr	r0, [pc, #244]	; (8003c80 <main+0x200>)
 8003b8a:	f7fd fa3b 	bl	8001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	//	gripper.ServoRotateDegree(90);
	gripper.ServoEnable();
 8003b8e:	483c      	ldr	r0, [pc, #240]	; (8003c80 <main+0x200>)
 8003b90:	f7fd f864 	bl	8000c5c <_ZN10ServoMotor11ServoEnableEv>
	HAL_Delay(3000);
 8003b94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003b98:	f002 f86c 	bl	8005c74 <HAL_Delay>
	#endif

		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
 8003b9c:	4839      	ldr	r0, [pc, #228]	; (8003c84 <main+0x204>)
 8003b9e:	f008 f89d 	bl	800bcdc <HAL_TIM_Base_Start_IT>
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
	//	HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8003ba2:	2214      	movs	r2, #20
 8003ba4:	4938      	ldr	r1, [pc, #224]	; (8003c88 <main+0x208>)
 8003ba6:	4839      	ldr	r0, [pc, #228]	; (8003c8c <main+0x20c>)
 8003ba8:	f00b fc6d 	bl	800f486 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003bac:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <main+0x210>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <main+0x214>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d04a      	beq.n	8003c4c <main+0x1cc>
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <main+0x210>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <main+0x218>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d045      	beq.n	8003c4c <main+0x1cc>
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <main+0x210>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a35      	ldr	r2, [pc, #212]	; (8003c9c <main+0x21c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d040      	beq.n	8003c4c <main+0x1cc>
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <main+0x210>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <main+0x220>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d03b      	beq.n	8003c4c <main+0x1cc>
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <main+0x210>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <main+0x224>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d036      	beq.n	8003c4c <main+0x1cc>
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <main+0x210>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <main+0x228>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d031      	beq.n	8003c4c <main+0x1cc>
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <main+0x210>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <main+0x22c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02c      	beq.n	8003c4c <main+0x1cc>
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <main+0x210>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <main+0x230>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d027      	beq.n	8003c4c <main+0x1cc>
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <main+0x210>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <main+0x234>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <main+0x1cc>
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <main+0x210>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <main+0x238>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01d      	beq.n	8003c4c <main+0x1cc>
 8003c10:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <main+0x210>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <main+0x23c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <main+0x1cc>
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <main+0x210>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <main+0x240>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <main+0x1cc>
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <main+0x210>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <main+0x244>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <main+0x1cc>
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <main+0x210>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <main+0x248>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <main+0x1cc>
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <main+0x210>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <main+0x24c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <main+0x1cc>
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <main+0x210>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <main+0x250>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d143      	bne.n	8003cd4 <main+0x254>
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <main+0x210>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <main+0x210>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0208 	bic.w	r2, r2, #8
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e042      	b.n	8003ce4 <main+0x264>
 8003c5e:	bf00      	nop
 8003c60:	58020400 	.word	0x58020400
 8003c64:	58021000 	.word	0x58021000
 8003c68:	00000000 	.word	0x00000000
 8003c6c:	2400027c 	.word	0x2400027c
 8003c70:	42280000 	.word	0x42280000
 8003c74:	240002a4 	.word	0x240002a4
 8003c78:	240002cc 	.word	0x240002cc
 8003c7c:	240002f4 	.word	0x240002f4
 8003c80:	2400031c 	.word	0x2400031c
 8003c84:	240009c0 	.word	0x240009c0
 8003c88:	24000370 	.word	0x24000370
 8003c8c:	24000dec 	.word	0x24000dec
 8003c90:	24000d74 	.word	0x24000d74
 8003c94:	40020010 	.word	0x40020010
 8003c98:	40020028 	.word	0x40020028
 8003c9c:	40020040 	.word	0x40020040
 8003ca0:	40020058 	.word	0x40020058
 8003ca4:	40020070 	.word	0x40020070
 8003ca8:	40020088 	.word	0x40020088
 8003cac:	400200a0 	.word	0x400200a0
 8003cb0:	400200b8 	.word	0x400200b8
 8003cb4:	40020410 	.word	0x40020410
 8003cb8:	40020428 	.word	0x40020428
 8003cbc:	40020440 	.word	0x40020440
 8003cc0:	40020458 	.word	0x40020458
 8003cc4:	40020470 	.word	0x40020470
 8003cc8:	40020488 	.word	0x40020488
 8003ccc:	400204a0 	.word	0x400204a0
 8003cd0:	400204b8 	.word	0x400204b8
 8003cd4:	4b54      	ldr	r3, [pc, #336]	; (8003e28 <main+0x3a8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <main+0x3a8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	601a      	str	r2, [r3, #0]
//	{
//		HAL_TIM_Base_Stop_IT(&htim6); // Set home 	200 Hz
//	}

	// Backup
	fcb_joint1.Kp_p = 0.0;
 8003ce4:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <main+0x3ac>)
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0;
 8003cec:	4b4f      	ldr	r3, [pc, #316]	; (8003e2c <main+0x3ac>)
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0;
 8003cf4:	4b4d      	ldr	r3, [pc, #308]	; (8003e2c <main+0x3ac>)
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0;
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <main+0x3ac>)
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0;
 8003d04:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <main+0x3ac>)
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0;
 8003d0c:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <main+0x3ac>)
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0;
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <main+0x3b0>)
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0;
 8003d1c:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <main+0x3b0>)
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0;
 8003d24:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <main+0x3b0>)
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0;
 8003d2c:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <main+0x3b0>)
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0;
 8003d34:	4b3e      	ldr	r3, [pc, #248]	; (8003e30 <main+0x3b0>)
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0;
 8003d3c:	4b3c      	ldr	r3, [pc, #240]	; (8003e30 <main+0x3b0>)
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0;
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <main+0x3b4>)
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0;
 8003d4c:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <main+0x3b4>)
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0;
 8003d54:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <main+0x3b4>)
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0;
 8003d5c:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <main+0x3b4>)
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0;
 8003d64:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <main+0x3b4>)
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0;
 8003d6c:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <main+0x3b4>)
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0;
 8003d74:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <main+0x3b8>)
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0;
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <main+0x3b8>)
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0;
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <main+0x3b8>)
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0;
 8003d8c:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <main+0x3b8>)
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0;
 8003d94:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <main+0x3b8>)
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0;
 8003d9c:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <main+0x3b8>)
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3 = Update_quintic_Coff(6.0, fcb_joint3.Encoder / 2609.0, (fcb_joint3.Encoder / 2609.0) + 0.785, 0.0, 0.0, 0.0, 0.0);
 8003da4:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <main+0x3b4>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b21b      	sxth	r3, r3
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003db2:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8003e18 <main+0x398>
 8003db6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003dba:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <main+0x3b4>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b21b      	sxth	r3, r3
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003dcc:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8003e18 <main+0x398>
 8003dd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003dd4:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8003e20 <main+0x3a0>
 8003dd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ddc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003de0:	4c14      	ldr	r4, [pc, #80]	; (8003e34 <main+0x3b4>)
 8003de2:	463b      	mov	r3, r7
 8003de4:	ed9f 3a15 	vldr	s6, [pc, #84]	; 8003e3c <main+0x3bc>
 8003de8:	eddf 2a14 	vldr	s5, [pc, #80]	; 8003e3c <main+0x3bc>
 8003dec:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8003e3c <main+0x3bc>
 8003df0:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003e3c <main+0x3bc>
 8003df4:	eeb0 1a67 	vmov.f32	s2, s15
 8003df8:	eef0 0a64 	vmov.f32	s1, s9
 8003dfc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fab7 	bl	8002374 <_Z19Update_quintic_Cofffffffff>
 8003e06:	4620      	mov	r0, r4
 8003e08:	463b      	mov	r3, r7
 8003e0a:	22a0      	movs	r2, #160	; 0xa0
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f00c f919 	bl	8010044 <memcpy>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003e12:	e7fe      	b.n	8003e12 <main+0x392>
 8003e14:	f3af 8000 	nop.w
 8003e18:	00000000 	.word	0x00000000
 8003e1c:	40a46200 	.word	0x40a46200
 8003e20:	51eb851f 	.word	0x51eb851f
 8003e24:	3fe91eb8 	.word	0x3fe91eb8
 8003e28:	24000d74 	.word	0x24000d74
 8003e2c:	240005cc 	.word	0x240005cc
 8003e30:	2400066c 	.word	0x2400066c
 8003e34:	2400070c 	.word	0x2400070c
 8003e38:	240007ac 	.word	0x240007ac
 8003e3c:	00000000 	.word	0x00000000

08003e40 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b09c      	sub	sp, #112	; 0x70
 8003e44:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4a:	224c      	movs	r2, #76	; 0x4c
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00c f906 	bl	8010060 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	2220      	movs	r2, #32
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f00c f900 	bl	8010060 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003e60:	2002      	movs	r0, #2
 8003e62:	f005 fa6f 	bl	8009344 <HAL_PWREx_ConfigSupply>
/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003e66:	2300      	movs	r3, #0
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <_Z18SystemClock_Configv+0x10c>)
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	4a37      	ldr	r2, [pc, #220]	; (8003f4c <_Z18SystemClock_Configv+0x10c>)
 8003e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e74:	6193      	str	r3, [r2, #24]
 8003e76:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <_Z18SystemClock_Configv+0x10c>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <_Z18SystemClock_Configv+0x110>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <_Z18SystemClock_Configv+0x110>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e8c:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <_Z18SystemClock_Configv+0x110>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]

while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003e98:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <_Z18SystemClock_Configv+0x10c>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea4:	bf14      	ite	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	2300      	moveq	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d000      	beq.n	8003eb2 <_Z18SystemClock_Configv+0x72>
 8003eb0:	e7f2      	b.n	8003e98 <_Z18SystemClock_Configv+0x58>
/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 60;
 8003eca:	233c      	movs	r3, #60	; 0x3c
 8003ecc:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 2;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 6;
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003eda:	230c      	movs	r3, #12
 8003edc:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f005 fa64 	bl	80093b8 <HAL_RCC_OscConfig>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <_Z18SystemClock_Configv+0xc4>
{
	Error_Handler();
 8003f00:	f000 f83e 	bl	8003f80 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f04:	233f      	movs	r3, #63	; 0x3f
 8003f06:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003f10:	2308      	movs	r3, #8
 8003f12:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003f14:	2340      	movs	r3, #64	; 0x40
 8003f16:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f20:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003f22:	2340      	movs	r3, #64	; 0x40
 8003f24:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	2104      	movs	r1, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f005 fe70 	bl	8009c10 <HAL_RCC_ClockConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <_Z18SystemClock_Configv+0x104>
{
	Error_Handler();
 8003f40:	f000 f81e 	bl	8003f80 <Error_Handler>
}
}
 8003f44:	bf00      	nop
 8003f46:	3770      	adds	r7, #112	; 0x70
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	58024800 	.word	0x58024800
 8003f50:	58000400 	.word	0x58000400

08003f54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]

}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003f84:	2200      	movs	r2, #0
 8003f86:	2101      	movs	r1, #1
 8003f88:	4808      	ldr	r0, [pc, #32]	; (8003fac <Error_Handler+0x2c>)
 8003f8a:	f005 f9a7 	bl	80092dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2102      	movs	r1, #2
 8003f92:	4807      	ldr	r0, [pc, #28]	; (8003fb0 <Error_Handler+0x30>)
 8003f94:	f005 f9a2 	bl	80092dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f9e:	4803      	ldr	r0, [pc, #12]	; (8003fac <Error_Handler+0x2c>)
 8003fa0:	f005 f99c 	bl	80092dc <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fa4:	b672      	cpsid	i
}
 8003fa6:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003fa8:	e7fe      	b.n	8003fa8 <Error_Handler+0x28>
 8003faa:	bf00      	nop
 8003fac:	58020400 	.word	0x58020400
 8003fb0:	58021000 	.word	0x58021000

08003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fbe:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	ee06 3a90 	vmov	s13, r3
 8003fce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003fd2:	eeb0 1b46 	vmov.f64	d1, d6
 8003fd6:	eeb0 0b47 	vmov.f64	d0, d7
 8003fda:	f00b fc0d 	bl	800f7f8 <pow>
 8003fde:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8003fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_Z41__static_initialization_and_destruction_0ii>:
}
/* USER CODE END Error_Handler_Debug */
}
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f040 80e4 	bne.w	80041c6 <_Z41__static_initialization_and_destruction_0ii+0x1da>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004004:	4293      	cmp	r3, r2
 8004006:	f040 80de 	bne.w	80041c6 <_Z41__static_initialization_and_destruction_0ii+0x1da>
AMT21 encoderJ1(&huart4, 0xD4);
 800400a:	22d4      	movs	r2, #212	; 0xd4
 800400c:	4980      	ldr	r1, [pc, #512]	; (8004210 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800400e:	4881      	ldr	r0, [pc, #516]	; (8004214 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8004010:	f7fc fcf6 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004014:	22c4      	movs	r2, #196	; 0xc4
 8004016:	497e      	ldr	r1, [pc, #504]	; (8004210 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8004018:	487f      	ldr	r0, [pc, #508]	; (8004218 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800401a:	f7fc fcf1 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 800401e:	22a4      	movs	r2, #164	; 0xa4
 8004020:	497b      	ldr	r1, [pc, #492]	; (8004210 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8004022:	487e      	ldr	r0, [pc, #504]	; (800421c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8004024:	f7fc fcec 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004028:	2320      	movs	r3, #32
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4b7c      	ldr	r3, [pc, #496]	; (8004220 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800402e:	2200      	movs	r2, #0
 8004030:	497c      	ldr	r1, [pc, #496]	; (8004224 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8004032:	487d      	ldr	r0, [pc, #500]	; (8004228 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8004034:	f7fd f860 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4b7b      	ldr	r3, [pc, #492]	; (800422c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8004040:	2204      	movs	r2, #4
 8004042:	497b      	ldr	r1, [pc, #492]	; (8004230 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8004044:	487b      	ldr	r0, [pc, #492]	; (8004234 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8004046:	f7fd f857 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800404a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4b76      	ldr	r3, [pc, #472]	; (800422c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8004052:	2204      	movs	r2, #4
 8004054:	4978      	ldr	r1, [pc, #480]	; (8004238 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8004056:	4879      	ldr	r0, [pc, #484]	; (800423c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8004058:	f7fd f84e 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 800405c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	4b6f      	ldr	r3, [pc, #444]	; (8004220 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8004064:	2208      	movs	r2, #8
 8004066:	4976      	ldr	r1, [pc, #472]	; (8004240 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004068:	4876      	ldr	r0, [pc, #472]	; (8004244 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800406a:	f7fd f845 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 800406e:	2208      	movs	r2, #8
 8004070:	4975      	ldr	r1, [pc, #468]	; (8004248 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8004072:	4876      	ldr	r0, [pc, #472]	; (800424c <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004074:	f7fc fdb7 	bl	8000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8004078:	4b75      	ldr	r3, [pc, #468]	; (8004250 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800407a:	edd3 7a00 	vldr	s15, [r3]
 800407e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004082:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004086:	ee27 5b06 	vmul.f64	d5, d7, d6
 800408a:	4b72      	ldr	r3, [pc, #456]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800408c:	ed93 7a00 	vldr	s14, [r3]
 8004090:	4b70      	ldr	r3, [pc, #448]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800409e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040a6:	4b6c      	ldr	r3, [pc, #432]	; (8004258 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80040a8:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 80040ac:	4b68      	ldr	r3, [pc, #416]	; (8004250 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80040ae:	edd3 7a00 	vldr	s15, [r3]
 80040b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040b6:	ee37 5b07 	vadd.f64	d5, d7, d7
 80040ba:	4b66      	ldr	r3, [pc, #408]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80040bc:	ed93 7a00 	vldr	s14, [r3]
 80040c0:	4b64      	ldr	r3, [pc, #400]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ca:	4b62      	ldr	r3, [pc, #392]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80040cc:	edd3 7a00 	vldr	s15, [r3]
 80040d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80040d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040e0:	4b5e      	ldr	r3, [pc, #376]	; (800425c <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80040e2:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 80040e6:	4b5e      	ldr	r3, [pc, #376]	; (8004260 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80040e8:	edd3 7a00 	vldr	s15, [r3]
 80040ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040f0:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80040f4:	ee27 5b06 	vmul.f64	d5, d7, d6
 80040f8:	4b56      	ldr	r3, [pc, #344]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80040fa:	ed93 7a00 	vldr	s14, [r3]
 80040fe:	4b55      	ldr	r3, [pc, #340]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004108:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800410c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004110:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8004116:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 800411a:	4b51      	ldr	r3, [pc, #324]	; (8004260 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800411c:	edd3 7a00 	vldr	s15, [r3]
 8004120:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004124:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004128:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800412a:	ed93 7a00 	vldr	s14, [r3]
 800412e:	4b49      	ldr	r3, [pc, #292]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800413a:	edd3 7a00 	vldr	s15, [r3]
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004146:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800414a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800414e:	4b46      	ldr	r3, [pc, #280]	; (8004268 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8004150:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt, 2);
 8004154:	4b45      	ldr	r3, [pc, #276]	; (800426c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8004156:	edd3 7a00 	vldr	s15, [r3]
 800415a:	2002      	movs	r0, #2
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	f7ff ff28 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004164:	eeb0 7b40 	vmov.f64	d7, d0
 8004168:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 800416e:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt, 3);
 8004172:	4b3e      	ldr	r3, [pc, #248]	; (800426c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8004174:	edd3 7a00 	vldr	s15, [r3]
 8004178:	2003      	movs	r0, #3
 800417a:	eeb0 0a67 	vmov.f32	s0, s15
 800417e:	f7ff ff19 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004182:	eeb0 7b40 	vmov.f64	d7, d0
 8004186:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800418a:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 800418c:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt, 4);
 8004190:	4b36      	ldr	r3, [pc, #216]	; (800426c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	2004      	movs	r0, #4
 8004198:	eeb0 0a67 	vmov.f32	s0, s15
 800419c:	f7ff ff0a 	bl	8003fb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80041a0:	eeb0 7b40 	vmov.f64	d7, d0
 80041a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80041aa:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 80041ae:	4833      	ldr	r0, [pc, #204]	; (800427c <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80041b0:	f7fd ffbe 	bl	8002130 <_ZN11robot_jointC1Ev>
 80041b4:	4832      	ldr	r0, [pc, #200]	; (8004280 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80041b6:	f7fd ffbb 	bl	8002130 <_ZN11robot_jointC1Ev>
 80041ba:	4832      	ldr	r0, [pc, #200]	; (8004284 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80041bc:	f7fd ffb8 	bl	8002130 <_ZN11robot_jointC1Ev>
 80041c0:	4831      	ldr	r0, [pc, #196]	; (8004288 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80041c2:	f7fd ffb5 	bl	8002130 <_ZN11robot_jointC1Ev>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11c      	bne.n	8004206 <_Z41__static_initialization_and_destruction_0ii+0x21a>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d117      	bne.n	8004206 <_Z41__static_initialization_and_destruction_0ii+0x21a>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 80041d6:	481d      	ldr	r0, [pc, #116]	; (800424c <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80041d8:	f7fc fd35 	bl	8000c46 <_ZN10ServoMotorD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 80041dc:	4819      	ldr	r0, [pc, #100]	; (8004244 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80041de:	f7fc ffcf 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80041e2:	4816      	ldr	r0, [pc, #88]	; (800423c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80041e4:	f7fc ffcc 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80041e8:	4812      	ldr	r0, [pc, #72]	; (8004234 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80041ea:	f7fc ffc9 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80041ee:	480e      	ldr	r0, [pc, #56]	; (8004228 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80041f0:	f7fc ffc6 	bl	8001180 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 80041f4:	4809      	ldr	r0, [pc, #36]	; (800421c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80041f6:	f7fc fc17 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 80041fa:	4807      	ldr	r0, [pc, #28]	; (8004218 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80041fc:	f7fc fc14 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004200:	4804      	ldr	r0, [pc, #16]	; (8004214 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8004202:	f7fc fc11 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	24000f6c 	.word	0x24000f6c
 8004214:	24000228 	.word	0x24000228
 8004218:	24000244 	.word	0x24000244
 800421c:	24000260 	.word	0x24000260
 8004220:	58020400 	.word	0x58020400
 8004224:	24000a0c 	.word	0x24000a0c
 8004228:	2400027c 	.word	0x2400027c
 800422c:	58021000 	.word	0x58021000
 8004230:	24000af0 	.word	0x24000af0
 8004234:	240002a4 	.word	0x240002a4
 8004238:	24000974 	.word	0x24000974
 800423c:	240002cc 	.word	0x240002cc
 8004240:	24000b3c 	.word	0x24000b3c
 8004244:	240002f4 	.word	0x240002f4
 8004248:	24000928 	.word	0x24000928
 800424c:	2400031c 	.word	0x2400031c
 8004250:	24000018 	.word	0x24000018
 8004254:	24000014 	.word	0x24000014
 8004258:	24000398 	.word	0x24000398
 800425c:	2400039c 	.word	0x2400039c
 8004260:	2400001c 	.word	0x2400001c
 8004264:	240003a0 	.word	0x240003a0
 8004268:	240003a4 	.word	0x240003a4
 800426c:	24000024 	.word	0x24000024
 8004270:	240003a8 	.word	0x240003a8
 8004274:	240003ac 	.word	0x240003ac
 8004278:	240003b0 	.word	0x240003b0
 800427c:	240005cc 	.word	0x240005cc
 8004280:	2400066c 	.word	0x2400066c
 8004284:	2400070c 	.word	0x2400070c
 8004288:	240007ac 	.word	0x240007ac

0800428c <_GLOBAL__sub_I_TIM_MS>:
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
 8004290:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004294:	2001      	movs	r0, #1
 8004296:	f7ff fea9 	bl	8003fec <_Z41__static_initialization_and_destruction_0ii>
 800429a:	bd80      	pop	{r7, pc}

0800429c <_GLOBAL__sub_D_TIM_MS>:
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
 80042a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7ff fea1 	bl	8003fec <_Z41__static_initialization_and_destruction_0ii>
 80042aa:	bd80      	pop	{r7, pc}

080042ac <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80042b0:	4b27      	ldr	r3, [pc, #156]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042b2:	4a28      	ldr	r2, [pc, #160]	; (8004354 <MX_SPI3_Init+0xa8>)
 80042b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80042bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80042c4:	4b22      	ldr	r3, [pc, #136]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042c6:	2203      	movs	r2, #3
 80042c8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042d0:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042dc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042de:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80042ea:	4b19      	ldr	r3, [pc, #100]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80042f6:	4b16      	ldr	r3, [pc, #88]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <MX_SPI3_Init+0xa4>)
 80042fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004302:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <MX_SPI3_Init+0xa4>)
 8004306:	2200      	movs	r2, #0
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800430a:	4b11      	ldr	r3, [pc, #68]	; (8004350 <MX_SPI3_Init+0xa4>)
 800430c:	2200      	movs	r2, #0
 800430e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <MX_SPI3_Init+0xa4>)
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004316:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <MX_SPI3_Init+0xa4>)
 8004318:	2200      	movs	r2, #0
 800431a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <MX_SPI3_Init+0xa4>)
 800431e:	2200      	movs	r2, #0
 8004320:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <MX_SPI3_Init+0xa4>)
 8004324:	2200      	movs	r2, #0
 8004326:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <MX_SPI3_Init+0xa4>)
 800432a:	2200      	movs	r2, #0
 800432c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <MX_SPI3_Init+0xa4>)
 8004330:	2200      	movs	r2, #0
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <MX_SPI3_Init+0xa4>)
 8004336:	2200      	movs	r2, #0
 8004338:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800433a:	4805      	ldr	r0, [pc, #20]	; (8004350 <MX_SPI3_Init+0xa4>)
 800433c:	f007 fb56 	bl	800b9ec <HAL_SPI_Init>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8004346:	f7ff fe1b 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	240008a0 	.word	0x240008a0
 8004354:	40003c00 	.word	0x40003c00

08004358 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b0b8      	sub	sp, #224	; 0xe0
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004370:	f107 0310 	add.w	r3, r7, #16
 8004374:	22bc      	movs	r2, #188	; 0xbc
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f00b fe71 	bl	8010060 <memset>
  if(spiHandle->Instance==SPI3)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <HAL_SPI_MspInit+0xc0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d142      	bne.n	800440e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800438c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800438e:	2300      	movs	r3, #0
 8004390:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004392:	f107 0310 	add.w	r3, r7, #16
 8004396:	4618      	mov	r0, r3
 8004398:	f005 ffc6 	bl	800a328 <HAL_RCCEx_PeriphCLKConfig>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80043a2:	f7ff fded 	bl	8003f80 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_SPI_MspInit+0xc4>)
 80043a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_SPI_MspInit+0xc4>)
 80043ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043b6:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_SPI_MspInit+0xc4>)
 80043b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043c4:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_SPI_MspInit+0xc4>)
 80043c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ca:	4a14      	ldr	r2, [pc, #80]	; (800441c <HAL_SPI_MspInit+0xc4>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_SPI_MspInit+0xc4>)
 80043d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80043e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80043e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ea:	2302      	movs	r3, #2
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043fc:	2306      	movs	r3, #6
 80043fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004402:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004406:	4619      	mov	r1, r3
 8004408:	4805      	ldr	r0, [pc, #20]	; (8004420 <HAL_SPI_MspInit+0xc8>)
 800440a:	f004 fdb7 	bl	8008f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800440e:	bf00      	nop
 8004410:	37e0      	adds	r7, #224	; 0xe0
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40003c00 	.word	0x40003c00
 800441c:	58024400 	.word	0x58024400
 8004420:	58020800 	.word	0x58020800

08004424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_MspInit+0x30>)
 800442c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004430:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_MspInit+0x30>)
 8004432:	f043 0302 	orr.w	r3, r3, #2
 8004436:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_MspInit+0x30>)
 800443c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	58024400 	.word	0x58024400

08004458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800445c:	e7fe      	b.n	800445c <NMI_Handler+0x4>

0800445e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004462:	e7fe      	b.n	8004462 <HardFault_Handler+0x4>

08004464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004468:	e7fe      	b.n	8004468 <MemManage_Handler+0x4>

0800446a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800446e:	e7fe      	b.n	800446e <BusFault_Handler+0x4>

08004470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004474:	e7fe      	b.n	8004474 <UsageFault_Handler+0x4>

08004476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004476:	b480      	push	{r7}
 8004478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a4:	f001 fbc6 	bl	8005c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80044a8:	f001 fd23 	bl	8005ef2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80044b4:	4802      	ldr	r0, [pc, #8]	; (80044c0 <DMA1_Stream0_IRQHandler+0x10>)
 80044b6:	f003 fa4f 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	24000ef4 	.word	0x24000ef4

080044c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044c8:	4802      	ldr	r0, [pc, #8]	; (80044d4 <DMA1_Stream1_IRQHandler+0x10>)
 80044ca:	f003 fa45 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	24000d74 	.word	0x24000d74

080044d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80044dc:	4802      	ldr	r0, [pc, #8]	; (80044e8 <DMA1_Stream2_IRQHandler+0x10>)
 80044de:	f003 fa3b 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	24000e7c 	.word	0x24000e7c

080044ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80044f0:	4802      	ldr	r0, [pc, #8]	; (80044fc <DMA1_Stream3_IRQHandler+0x10>)
 80044f2:	f003 fa31 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	24000c6c 	.word	0x24000c6c

08004500 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004504:	4802      	ldr	r0, [pc, #8]	; (8004510 <DMA1_Stream4_IRQHandler+0x10>)
 8004506:	f003 fa27 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	24000ffc 	.word	0x24000ffc

08004514 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004518:	2040      	movs	r0, #64	; 0x40
 800451a:	f004 fef8 	bl	800930e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 800451e:	2080      	movs	r0, #128	; 0x80
 8004520:	f004 fef5 	bl	800930e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}

08004528 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800452c:	4802      	ldr	r0, [pc, #8]	; (8004538 <USART3_IRQHandler+0x10>)
 800452e:	f009 f8e9 	bl	800d704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	24000dec 	.word	0x24000dec

0800453c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004540:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004544:	f004 fee3 	bl	800930e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004548:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800454c:	f004 fedf 	bl	800930e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8004550:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004554:	f004 fedb 	bl	800930e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004558:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800455c:	f004 fed7 	bl	800930e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	bd80      	pop	{r7, pc}

08004564 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800456a:	f007 fdcd 	bl	800c108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	24000bd4 	.word	0x24000bd4

08004578 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800457e:	f007 fdc3 	bl	800c108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	24000a58 	.word	0x24000a58

0800458c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004592:	f007 fdb9 	bl	800c108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	24000b88 	.word	0x24000b88

080045a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <TIM5_IRQHandler+0x10>)
 80045a6:	f007 fdaf 	bl	800c108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	240009c0 	.word	0x240009c0

080045b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <UART4_IRQHandler+0x10>)
 80045ba:	f009 f8a3 	bl	800d704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24000f6c 	.word	0x24000f6c

080045c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <TIM6_DAC_IRQHandler+0x10>)
 80045ce:	f007 fd9b 	bl	800c108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	24000aa4 	.word	0x24000aa4

080045dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <TIM7_IRQHandler+0x10>)
 80045e2:	f007 fd91 	bl	800c108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	24000c20 	.word	0x24000c20

080045f0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <UART7_IRQHandler+0x10>)
 80045f6:	f009 f885 	bl	800d704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	24000ce4 	.word	0x24000ce4

08004604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
	return 1;
 8004608:	2301      	movs	r3, #1
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_kill>:

int _kill(int pid, int sig)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800461e:	f00b fce7 	bl	800fff0 <__errno>
 8004622:	4603      	mov	r3, r0
 8004624:	2216      	movs	r2, #22
 8004626:	601a      	str	r2, [r3, #0]
	return -1;
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_exit>:

void _exit (int status)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800463c:	f04f 31ff 	mov.w	r1, #4294967295
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ffe7 	bl	8004614 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004646:	e7fe      	b.n	8004646 <_exit+0x12>

08004648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e00a      	b.n	8004670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800465a:	f3af 8000 	nop.w
 800465e:	4601      	mov	r1, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	60ba      	str	r2, [r7, #8]
 8004666:	b2ca      	uxtb	r2, r1
 8004668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	3301      	adds	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	dbf0      	blt.n	800465a <_read+0x12>
	}

return len;
 8004678:	687b      	ldr	r3, [r7, #4]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e009      	b.n	80046a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	60ba      	str	r2, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	3301      	adds	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	dbf1      	blt.n	8004694 <_write+0x12>
	}
	return len;
 80046b0:	687b      	ldr	r3, [r7, #4]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_close>:

int _close(int file)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
	return -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046e2:	605a      	str	r2, [r3, #4]
	return 0;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <_isatty>:

int _isatty(int file)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
	return 1;
 80046fa:	2301      	movs	r3, #1
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	return 0;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800472c:	4a14      	ldr	r2, [pc, #80]	; (8004780 <_sbrk+0x5c>)
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <_sbrk+0x60>)
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <_sbrk+0x64>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <_sbrk+0x64>)
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <_sbrk+0x68>)
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <_sbrk+0x64>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	429a      	cmp	r2, r3
 8004752:	d207      	bcs.n	8004764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004754:	f00b fc4c 	bl	800fff0 <__errno>
 8004758:	4603      	mov	r3, r0
 800475a:	220c      	movs	r2, #12
 800475c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	e009      	b.n	8004778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <_sbrk+0x64>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <_sbrk+0x64>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	4a05      	ldr	r2, [pc, #20]	; (8004788 <_sbrk+0x64>)
 8004774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004776:	68fb      	ldr	r3, [r7, #12]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	24001688 	.word	0x24001688
 8004784:	00000400 	.word	0x00000400
 8004788:	24000870 	.word	0x24000870
 800478c:	24001088 	.word	0x24001088

08004790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004794:	4b39      	ldr	r3, [pc, #228]	; (800487c <SystemInit+0xec>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	4a38      	ldr	r2, [pc, #224]	; (800487c <SystemInit+0xec>)
 800479c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <SystemInit+0xf0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d807      	bhi.n	80047c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047b0:	4b33      	ldr	r3, [pc, #204]	; (8004880 <SystemInit+0xf0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 030f 	bic.w	r3, r3, #15
 80047b8:	4a31      	ldr	r2, [pc, #196]	; (8004880 <SystemInit+0xf0>)
 80047ba:	f043 0307 	orr.w	r3, r3, #7
 80047be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80047c0:	4b30      	ldr	r3, [pc, #192]	; (8004884 <SystemInit+0xf4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2f      	ldr	r2, [pc, #188]	; (8004884 <SystemInit+0xf4>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047cc:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <SystemInit+0xf4>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80047d2:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <SystemInit+0xf4>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	492b      	ldr	r1, [pc, #172]	; (8004884 <SystemInit+0xf4>)
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <SystemInit+0xf8>)
 80047da:	4013      	ands	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <SystemInit+0xf0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047ea:	4b25      	ldr	r3, [pc, #148]	; (8004880 <SystemInit+0xf0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 030f 	bic.w	r3, r3, #15
 80047f2:	4a23      	ldr	r2, [pc, #140]	; (8004880 <SystemInit+0xf0>)
 80047f4:	f043 0307 	orr.w	r3, r3, #7
 80047f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80047fa:	4b22      	ldr	r3, [pc, #136]	; (8004884 <SystemInit+0xf4>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004800:	4b20      	ldr	r3, [pc, #128]	; (8004884 <SystemInit+0xf4>)
 8004802:	2200      	movs	r2, #0
 8004804:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <SystemInit+0xf4>)
 8004808:	2200      	movs	r2, #0
 800480a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <SystemInit+0xf4>)
 800480e:	4a1f      	ldr	r2, [pc, #124]	; (800488c <SystemInit+0xfc>)
 8004810:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <SystemInit+0xf4>)
 8004814:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <SystemInit+0x100>)
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <SystemInit+0xf4>)
 800481a:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <SystemInit+0x104>)
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800481e:	4b19      	ldr	r3, [pc, #100]	; (8004884 <SystemInit+0xf4>)
 8004820:	2200      	movs	r2, #0
 8004822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <SystemInit+0xf4>)
 8004826:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <SystemInit+0x104>)
 8004828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800482a:	4b16      	ldr	r3, [pc, #88]	; (8004884 <SystemInit+0xf4>)
 800482c:	2200      	movs	r2, #0
 800482e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <SystemInit+0xf4>)
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <SystemInit+0x104>)
 8004834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <SystemInit+0xf4>)
 8004838:	2200      	movs	r2, #0
 800483a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <SystemInit+0xf4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a10      	ldr	r2, [pc, #64]	; (8004884 <SystemInit+0xf4>)
 8004842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004846:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <SystemInit+0xf4>)
 800484a:	2200      	movs	r2, #0
 800484c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <SystemInit+0x108>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <SystemInit+0x10c>)
 8004854:	4013      	ands	r3, r2
 8004856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800485a:	d202      	bcs.n	8004862 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <SystemInit+0x110>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <SystemInit+0x114>)
 8004864:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004868:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <SystemInit+0xec>)
 800486c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004870:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	e000ed00 	.word	0xe000ed00
 8004880:	52002000 	.word	0x52002000
 8004884:	58024400 	.word	0x58024400
 8004888:	eaf6ed7f 	.word	0xeaf6ed7f
 800488c:	02020200 	.word	0x02020200
 8004890:	01ff0000 	.word	0x01ff0000
 8004894:	01010280 	.word	0x01010280
 8004898:	5c001000 	.word	0x5c001000
 800489c:	ffff0000 	.word	0xffff0000
 80048a0:	51008108 	.word	0x51008108
 80048a4:	52004000 	.word	0x52004000

080048a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b09a      	sub	sp, #104	; 0x68
 80048ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	609a      	str	r2, [r3, #8]
 80048ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
 80048d8:	615a      	str	r2, [r3, #20]
 80048da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	222c      	movs	r2, #44	; 0x2c
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f00b fbbc 	bl	8010060 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80048e8:	4b44      	ldr	r3, [pc, #272]	; (80049fc <MX_TIM1_Init+0x154>)
 80048ea:	4a45      	ldr	r2, [pc, #276]	; (8004a00 <MX_TIM1_Init+0x158>)
 80048ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80048ee:	4b43      	ldr	r3, [pc, #268]	; (80049fc <MX_TIM1_Init+0x154>)
 80048f0:	22c7      	movs	r2, #199	; 0xc7
 80048f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <MX_TIM1_Init+0x154>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80048fa:	4b40      	ldr	r3, [pc, #256]	; (80049fc <MX_TIM1_Init+0x154>)
 80048fc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004902:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <MX_TIM1_Init+0x154>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004908:	4b3c      	ldr	r3, [pc, #240]	; (80049fc <MX_TIM1_Init+0x154>)
 800490a:	2200      	movs	r2, #0
 800490c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800490e:	4b3b      	ldr	r3, [pc, #236]	; (80049fc <MX_TIM1_Init+0x154>)
 8004910:	2280      	movs	r2, #128	; 0x80
 8004912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004914:	4839      	ldr	r0, [pc, #228]	; (80049fc <MX_TIM1_Init+0x154>)
 8004916:	f007 f98a 	bl	800bc2e <HAL_TIM_Base_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004920:	f7ff fb2e 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004928:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800492a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800492e:	4619      	mov	r1, r3
 8004930:	4832      	ldr	r0, [pc, #200]	; (80049fc <MX_TIM1_Init+0x154>)
 8004932:	f007 fe1d 	bl	800c570 <HAL_TIM_ConfigClockSource>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800493c:	f7ff fb20 	bl	8003f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004940:	482e      	ldr	r0, [pc, #184]	; (80049fc <MX_TIM1_Init+0x154>)
 8004942:	f007 fa72 	bl	800be2a <HAL_TIM_PWM_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800494c:	f7ff fb18 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004950:	2300      	movs	r3, #0
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004954:	2300      	movs	r3, #0
 8004956:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004958:	2300      	movs	r3, #0
 800495a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800495c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004960:	4619      	mov	r1, r3
 8004962:	4826      	ldr	r0, [pc, #152]	; (80049fc <MX_TIM1_Init+0x154>)
 8004964:	f008 fb58 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800496e:	f7ff fb07 	bl	8003f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004972:	2360      	movs	r3, #96	; 0x60
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004976:	f240 1339 	movw	r3, #313	; 0x139
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800497c:	2300      	movs	r3, #0
 800497e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004980:	2300      	movs	r3, #0
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004984:	2300      	movs	r3, #0
 8004986:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004988:	2300      	movs	r3, #0
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800498c:	2300      	movs	r3, #0
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004994:	2204      	movs	r2, #4
 8004996:	4619      	mov	r1, r3
 8004998:	4818      	ldr	r0, [pc, #96]	; (80049fc <MX_TIM1_Init+0x154>)
 800499a:	f007 fcd5 	bl	800c348 <HAL_TIM_PWM_ConfigChannel>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80049a4:	f7ff faec 	bl	8003f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80049ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	4807      	ldr	r0, [pc, #28]	; (80049fc <MX_TIM1_Init+0x154>)
 80049de:	f008 fba9 	bl	800d134 <HAL_TIMEx_ConfigBreakDeadTime>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80049e8:	f7ff faca 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80049ec:	4803      	ldr	r0, [pc, #12]	; (80049fc <MX_TIM1_Init+0x154>)
 80049ee:	f000 fc85 	bl	80052fc <HAL_TIM_MspPostInit>

}
 80049f2:	bf00      	nop
 80049f4:	3768      	adds	r7, #104	; 0x68
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	24000af0 	.word	0x24000af0
 8004a00:	40010000 	.word	0x40010000

08004a04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08e      	sub	sp, #56	; 0x38
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	609a      	str	r2, [r3, #8]
 8004a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a18:	f107 031c 	add.w	r3, r7, #28
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a24:	463b      	mov	r3, r7
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
 8004a2c:	609a      	str	r2, [r3, #8]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	611a      	str	r2, [r3, #16]
 8004a32:	615a      	str	r2, [r3, #20]
 8004a34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a36:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a40:	22c7      	movs	r2, #199	; 0xc7
 8004a42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a44:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a4c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a52:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a5a:	2280      	movs	r2, #128	; 0x80
 8004a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a5e:	4824      	ldr	r0, [pc, #144]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a60:	f007 f8e5 	bl	800bc2e <HAL_TIM_Base_Init>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004a6a:	f7ff fa89 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a78:	4619      	mov	r1, r3
 8004a7a:	481d      	ldr	r0, [pc, #116]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a7c:	f007 fd78 	bl	800c570 <HAL_TIM_ConfigClockSource>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004a86:	f7ff fa7b 	bl	8003f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a8a:	4819      	ldr	r0, [pc, #100]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004a8c:	f007 f9cd 	bl	800be2a <HAL_TIM_PWM_Init>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004a96:	f7ff fa73 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004aa2:	f107 031c 	add.w	r3, r7, #28
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4811      	ldr	r0, [pc, #68]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004aaa:	f008 fab5 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004ab4:	f7ff fa64 	bl	8003f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ab8:	2360      	movs	r3, #96	; 0x60
 8004aba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8004abc:	f240 1339 	movw	r3, #313	; 0x139
 8004ac0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004aca:	463b      	mov	r3, r7
 8004acc:	2208      	movs	r2, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4807      	ldr	r0, [pc, #28]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004ad2:	f007 fc39 	bl	800c348 <HAL_TIM_PWM_ConfigChannel>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004adc:	f7ff fa50 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004ae0:	4803      	ldr	r0, [pc, #12]	; (8004af0 <MX_TIM2_Init+0xec>)
 8004ae2:	f000 fc0b 	bl	80052fc <HAL_TIM_MspPostInit>

}
 8004ae6:	bf00      	nop
 8004ae8:	3738      	adds	r7, #56	; 0x38
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	24000b3c 	.word	0x24000b3c

08004af4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08e      	sub	sp, #56	; 0x38
 8004af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b08:	f107 031c 	add.w	r3, r7, #28
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b14:	463b      	mov	r3, r7
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	611a      	str	r2, [r3, #16]
 8004b22:	615a      	str	r2, [r3, #20]
 8004b24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b28:	4a2d      	ldr	r2, [pc, #180]	; (8004be0 <MX_TIM3_Init+0xec>)
 8004b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b2e:	22c7      	movs	r2, #199	; 0xc7
 8004b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8004b38:	4b28      	ldr	r3, [pc, #160]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b3a:	f640 125f 	movw	r2, #2399	; 0x95f
 8004b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b46:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b4c:	4823      	ldr	r0, [pc, #140]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b4e:	f007 f86e 	bl	800bc2e <HAL_TIM_Base_Init>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004b58:	f7ff fa12 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b66:	4619      	mov	r1, r3
 8004b68:	481c      	ldr	r0, [pc, #112]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b6a:	f007 fd01 	bl	800c570 <HAL_TIM_ConfigClockSource>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004b74:	f7ff fa04 	bl	8003f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004b78:	4818      	ldr	r0, [pc, #96]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b7a:	f007 f956 	bl	800be2a <HAL_TIM_PWM_Init>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004b84:	f7ff f9fc 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b90:	f107 031c 	add.w	r3, r7, #28
 8004b94:	4619      	mov	r1, r3
 8004b96:	4811      	ldr	r0, [pc, #68]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004b98:	f008 fa3e 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004ba2:	f7ff f9ed 	bl	8003f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ba6:	2360      	movs	r3, #96	; 0x60
 8004ba8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4807      	ldr	r0, [pc, #28]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004bbe:	f007 fbc3 	bl	800c348 <HAL_TIM_PWM_ConfigChannel>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004bc8:	f7ff f9da 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004bcc:	4803      	ldr	r0, [pc, #12]	; (8004bdc <MX_TIM3_Init+0xe8>)
 8004bce:	f000 fb95 	bl	80052fc <HAL_TIM_MspPostInit>

}
 8004bd2:	bf00      	nop
 8004bd4:	3738      	adds	r7, #56	; 0x38
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	24000a0c 	.word	0x24000a0c
 8004be0:	40000400 	.word	0x40000400

08004be4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	; 0x38
 8004be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
 8004bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf8:	f107 031c 	add.w	r3, r7, #28
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c04:	463b      	mov	r3, r7
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	611a      	str	r2, [r3, #16]
 8004c12:	615a      	str	r2, [r3, #20]
 8004c14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004c16:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c18:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <MX_TIM4_Init+0xec>)
 8004c1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c1e:	22ef      	movs	r2, #239	; 0xef
 8004c20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c22:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c2a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004c2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c36:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c38:	2280      	movs	r2, #128	; 0x80
 8004c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004c3c:	4823      	ldr	r0, [pc, #140]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c3e:	f006 fff6 	bl	800bc2e <HAL_TIM_Base_Init>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004c48:	f7ff f99a 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c56:	4619      	mov	r1, r3
 8004c58:	481c      	ldr	r0, [pc, #112]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c5a:	f007 fc89 	bl	800c570 <HAL_TIM_ConfigClockSource>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004c64:	f7ff f98c 	bl	8003f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004c68:	4818      	ldr	r0, [pc, #96]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c6a:	f007 f8de 	bl	800be2a <HAL_TIM_PWM_Init>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004c74:	f7ff f984 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c80:	f107 031c 	add.w	r3, r7, #28
 8004c84:	4619      	mov	r1, r3
 8004c86:	4811      	ldr	r0, [pc, #68]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004c88:	f008 f9c6 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004c92:	f7ff f975 	bl	8003f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c96:	2360      	movs	r3, #96	; 0x60
 8004c98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	2208      	movs	r2, #8
 8004caa:	4619      	mov	r1, r3
 8004cac:	4807      	ldr	r0, [pc, #28]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004cae:	f007 fb4b 	bl	800c348 <HAL_TIM_PWM_ConfigChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004cb8:	f7ff f962 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004cbc:	4803      	ldr	r0, [pc, #12]	; (8004ccc <MX_TIM4_Init+0xe8>)
 8004cbe:	f000 fb1d 	bl	80052fc <HAL_TIM_MspPostInit>

}
 8004cc2:	bf00      	nop
 8004cc4:	3738      	adds	r7, #56	; 0x38
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	24000928 	.word	0x24000928
 8004cd0:	40000800 	.word	0x40000800

08004cd4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cda:	f107 0310 	add.w	r3, r7, #16
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
 8004ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce8:	1d3b      	adds	r3, r7, #4
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <MX_TIM5_Init+0x98>)
 8004cf6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004cfa:	22c7      	movs	r2, #199	; 0xc7
 8004cfc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004d06:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004d0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d0c:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004d18:	4813      	ldr	r0, [pc, #76]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004d1a:	f006 ff88 	bl	800bc2e <HAL_TIM_Base_Init>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004d24:	f7ff f92c 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004d2e:	f107 0310 	add.w	r3, r7, #16
 8004d32:	4619      	mov	r1, r3
 8004d34:	480c      	ldr	r0, [pc, #48]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004d36:	f007 fc1b 	bl	800c570 <HAL_TIM_ConfigClockSource>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004d40:	f7ff f91e 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4805      	ldr	r0, [pc, #20]	; (8004d68 <MX_TIM5_Init+0x94>)
 8004d52:	f008 f961 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004d5c:	f7ff f910 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004d60:	bf00      	nop
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	240009c0 	.word	0x240009c0
 8004d6c:	40000c00 	.word	0x40000c00

08004d70 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <MX_TIM6_Init+0x64>)
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <MX_TIM6_Init+0x68>)
 8004d84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8004d86:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <MX_TIM6_Init+0x64>)
 8004d88:	22c7      	movs	r2, #199	; 0xc7
 8004d8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d8c:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <MX_TIM6_Init+0x64>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8004d92:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <MX_TIM6_Init+0x64>)
 8004d94:	f241 726f 	movw	r2, #5999	; 0x176f
 8004d98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <MX_TIM6_Init+0x64>)
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004da0:	480c      	ldr	r0, [pc, #48]	; (8004dd4 <MX_TIM6_Init+0x64>)
 8004da2:	f006 ff44 	bl	800bc2e <HAL_TIM_Base_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004dac:	f7ff f8e8 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db0:	2300      	movs	r3, #0
 8004db2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <MX_TIM6_Init+0x64>)
 8004dbe:	f008 f92b 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004dc8:	f7ff f8da 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	24000aa4 	.word	0x24000aa4
 8004dd8:	40001000 	.word	0x40001000

08004ddc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <MX_TIM7_Init+0x64>)
 8004dee:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <MX_TIM7_Init+0x68>)
 8004df0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <MX_TIM7_Init+0x64>)
 8004df4:	22c7      	movs	r2, #199	; 0xc7
 8004df6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <MX_TIM7_Init+0x64>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <MX_TIM7_Init+0x64>)
 8004e00:	f240 42af 	movw	r2, #1199	; 0x4af
 8004e04:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <MX_TIM7_Init+0x64>)
 8004e08:	2280      	movs	r2, #128	; 0x80
 8004e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e0c:	480c      	ldr	r0, [pc, #48]	; (8004e40 <MX_TIM7_Init+0x64>)
 8004e0e:	f006 ff0e 	bl	800bc2e <HAL_TIM_Base_Init>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004e18:	f7ff f8b2 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4805      	ldr	r0, [pc, #20]	; (8004e40 <MX_TIM7_Init+0x64>)
 8004e2a:	f008 f8f5 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004e34:	f7ff f8a4 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	24000c20 	.word	0x24000c20
 8004e44:	40001400 	.word	0x40001400

08004e48 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e4e:	463b      	mov	r3, r7
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004e5a:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e5c:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <MX_TIM12_Init+0x70>)
 8004e5e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e62:	22c7      	movs	r2, #199	; 0xc7
 8004e64:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e6e:	f240 2257 	movw	r2, #599	; 0x257
 8004e72:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e7c:	2280      	movs	r2, #128	; 0x80
 8004e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004e80:	480c      	ldr	r0, [pc, #48]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e82:	f006 fed4 	bl	800bc2e <HAL_TIM_Base_Init>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8004e8c:	f7ff f878 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e94:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004e96:	463b      	mov	r3, r7
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4806      	ldr	r0, [pc, #24]	; (8004eb4 <MX_TIM12_Init+0x6c>)
 8004e9c:	f007 fb68 	bl	800c570 <HAL_TIM_ConfigClockSource>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8004ea6:	f7ff f86b 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	24000bd4 	.word	0x24000bd4
 8004eb8:	40001800 	.word	0x40001800

08004ebc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <MX_TIM13_Init+0x40>)
 8004ec2:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <MX_TIM13_Init+0x44>)
 8004ec4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <MX_TIM13_Init+0x40>)
 8004ec8:	22c7      	movs	r2, #199	; 0xc7
 8004eca:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <MX_TIM13_Init+0x40>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <MX_TIM13_Init+0x40>)
 8004ed4:	f240 2257 	movw	r2, #599	; 0x257
 8004ed8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <MX_TIM13_Init+0x40>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <MX_TIM13_Init+0x40>)
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004ee6:	4805      	ldr	r0, [pc, #20]	; (8004efc <MX_TIM13_Init+0x40>)
 8004ee8:	f006 fea1 	bl	800bc2e <HAL_TIM_Base_Init>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004ef2:	f7ff f845 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	24000a58 	.word	0x24000a58
 8004f00:	40001c00 	.word	0x40001c00

08004f04 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <MX_TIM14_Init+0x40>)
 8004f0a:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <MX_TIM14_Init+0x44>)
 8004f0c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <MX_TIM14_Init+0x40>)
 8004f10:	22c7      	movs	r2, #199	; 0xc7
 8004f12:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <MX_TIM14_Init+0x40>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <MX_TIM14_Init+0x40>)
 8004f1c:	f640 125f 	movw	r2, #2399	; 0x95f
 8004f20:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <MX_TIM14_Init+0x40>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <MX_TIM14_Init+0x40>)
 8004f2a:	2280      	movs	r2, #128	; 0x80
 8004f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004f2e:	4805      	ldr	r0, [pc, #20]	; (8004f44 <MX_TIM14_Init+0x40>)
 8004f30:	f006 fe7d 	bl	800bc2e <HAL_TIM_Base_Init>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004f3a:	f7ff f821 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	24000b88 	.word	0x24000b88
 8004f48:	40002000 	.word	0x40002000

08004f4c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b09a      	sub	sp, #104	; 0x68
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	611a      	str	r2, [r3, #16]
 8004f7c:	615a      	str	r2, [r3, #20]
 8004f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	222c      	movs	r2, #44	; 0x2c
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f00b f86a 	bl	8010060 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004f8c:	4b3f      	ldr	r3, [pc, #252]	; (800508c <MX_TIM15_Init+0x140>)
 8004f8e:	4a40      	ldr	r2, [pc, #256]	; (8005090 <MX_TIM15_Init+0x144>)
 8004f90:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8004f92:	4b3e      	ldr	r3, [pc, #248]	; (800508c <MX_TIM15_Init+0x140>)
 8004f94:	22ef      	movs	r2, #239	; 0xef
 8004f96:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f98:	4b3c      	ldr	r3, [pc, #240]	; (800508c <MX_TIM15_Init+0x140>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	; (800508c <MX_TIM15_Init+0x140>)
 8004fa0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004fa4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <MX_TIM15_Init+0x140>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004fac:	4b37      	ldr	r3, [pc, #220]	; (800508c <MX_TIM15_Init+0x140>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <MX_TIM15_Init+0x140>)
 8004fb4:	2280      	movs	r2, #128	; 0x80
 8004fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004fb8:	4834      	ldr	r0, [pc, #208]	; (800508c <MX_TIM15_Init+0x140>)
 8004fba:	f006 fe38 	bl	800bc2e <HAL_TIM_Base_Init>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004fc4:	f7fe ffdc 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fcc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	482d      	ldr	r0, [pc, #180]	; (800508c <MX_TIM15_Init+0x140>)
 8004fd6:	f007 facb 	bl	800c570 <HAL_TIM_ConfigClockSource>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004fe0:	f7fe ffce 	bl	8003f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004fe4:	4829      	ldr	r0, [pc, #164]	; (800508c <MX_TIM15_Init+0x140>)
 8004fe6:	f006 ff20 	bl	800be2a <HAL_TIM_PWM_Init>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004ff0:	f7fe ffc6 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004ffc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005000:	4619      	mov	r1, r3
 8005002:	4822      	ldr	r0, [pc, #136]	; (800508c <MX_TIM15_Init+0x140>)
 8005004:	f008 f808 	bl	800d018 <HAL_TIMEx_MasterConfigSynchronization>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800500e:	f7fe ffb7 	bl	8003f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005012:	2360      	movs	r3, #96	; 0x60
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005016:	f240 1339 	movw	r3, #313	; 0x139
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800501c:	2300      	movs	r3, #0
 800501e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005020:	2300      	movs	r3, #0
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005028:	2300      	movs	r3, #0
 800502a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800502c:	2300      	movs	r3, #0
 800502e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005034:	2204      	movs	r2, #4
 8005036:	4619      	mov	r1, r3
 8005038:	4814      	ldr	r0, [pc, #80]	; (800508c <MX_TIM15_Init+0x140>)
 800503a:	f007 f985 	bl	800c348 <HAL_TIM_PWM_ConfigChannel>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005044:	f7fe ff9c 	bl	8003f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005048:	2300      	movs	r3, #0
 800504a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800504c:	2300      	movs	r3, #0
 800504e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800505c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005060:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005066:	2300      	movs	r3, #0
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4807      	ldr	r0, [pc, #28]	; (800508c <MX_TIM15_Init+0x140>)
 8005070:	f008 f860 	bl	800d134 <HAL_TIMEx_ConfigBreakDeadTime>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800507a:	f7fe ff81 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800507e:	4803      	ldr	r0, [pc, #12]	; (800508c <MX_TIM15_Init+0x140>)
 8005080:	f000 f93c 	bl	80052fc <HAL_TIM_MspPostInit>

}
 8005084:	bf00      	nop
 8005086:	3768      	adds	r7, #104	; 0x68
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	24000974 	.word	0x24000974
 8005090:	40014000 	.word	0x40014000

08005094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08e      	sub	sp, #56	; 0x38
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a8b      	ldr	r2, [pc, #556]	; (80052d0 <HAL_TIM_Base_MspInit+0x23c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10f      	bne.n	80050c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050a6:	4b8b      	ldr	r3, [pc, #556]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80050a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ac:	4a89      	ldr	r2, [pc, #548]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050b6:	4b87      	ldr	r3, [pc, #540]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80050b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80050c4:	e100      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ce:	d10f      	bne.n	80050f0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050d0:	4b80      	ldr	r3, [pc, #512]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80050d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d6:	4a7f      	ldr	r2, [pc, #508]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050e0:	4b7c      	ldr	r3, [pc, #496]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80050e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80050ee:	e0eb      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a78      	ldr	r2, [pc, #480]	; (80052d8 <HAL_TIM_Base_MspInit+0x244>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10f      	bne.n	800511a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050fa:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80050fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005100:	4a74      	ldr	r2, [pc, #464]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005102:	f043 0302 	orr.w	r3, r3, #2
 8005106:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800510a:	4b72      	ldr	r3, [pc, #456]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 800510c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005118:	e0d6      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6f      	ldr	r2, [pc, #444]	; (80052dc <HAL_TIM_Base_MspInit+0x248>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10f      	bne.n	8005144 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005124:	4b6b      	ldr	r3, [pc, #428]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800512a:	4a6a      	ldr	r2, [pc, #424]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 800512c:	f043 0304 	orr.w	r3, r3, #4
 8005130:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005134:	4b67      	ldr	r3, [pc, #412]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005142:	e0c1      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a65      	ldr	r2, [pc, #404]	; (80052e0 <HAL_TIM_Base_MspInit+0x24c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d117      	bne.n	800517e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800514e:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005154:	4a5f      	ldr	r2, [pc, #380]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005156:	f043 0308 	orr.w	r3, r3, #8
 800515a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800516c:	2200      	movs	r2, #0
 800516e:	2100      	movs	r1, #0
 8005170:	2032      	movs	r0, #50	; 0x32
 8005172:	f000 fe8a 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005176:	2032      	movs	r0, #50	; 0x32
 8005178:	f000 fea1 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 800517c:	e0a4      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a58      	ldr	r2, [pc, #352]	; (80052e4 <HAL_TIM_Base_MspInit+0x250>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d117      	bne.n	80051b8 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005188:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 800518a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800518e:	4a51      	ldr	r2, [pc, #324]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005190:	f043 0310 	orr.w	r3, r3, #16
 8005194:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005198:	4b4e      	ldr	r3, [pc, #312]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 800519a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80051a6:	2200      	movs	r2, #0
 80051a8:	2100      	movs	r1, #0
 80051aa:	2036      	movs	r0, #54	; 0x36
 80051ac:	f000 fe6d 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051b0:	2036      	movs	r0, #54	; 0x36
 80051b2:	f000 fe84 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 80051b6:	e087      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a4a      	ldr	r2, [pc, #296]	; (80052e8 <HAL_TIM_Base_MspInit+0x254>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d117      	bne.n	80051f2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051c2:	4b44      	ldr	r3, [pc, #272]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80051c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c8:	4a42      	ldr	r2, [pc, #264]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80051ca:	f043 0320 	orr.w	r3, r3, #32
 80051ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051d2:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80051d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80051e0:	2200      	movs	r2, #0
 80051e2:	2100      	movs	r1, #0
 80051e4:	2037      	movs	r0, #55	; 0x37
 80051e6:	f000 fe50 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80051ea:	2037      	movs	r0, #55	; 0x37
 80051ec:	f000 fe67 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 80051f0:	e06a      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <HAL_TIM_Base_MspInit+0x258>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d117      	bne.n	800522c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80051fc:	4b35      	ldr	r3, [pc, #212]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80051fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005202:	4a34      	ldr	r2, [pc, #208]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005208:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800520c:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 800520e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800521a:	2200      	movs	r2, #0
 800521c:	2100      	movs	r1, #0
 800521e:	202b      	movs	r0, #43	; 0x2b
 8005220:	f000 fe33 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005224:	202b      	movs	r0, #43	; 0x2b
 8005226:	f000 fe4a 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 800522a:	e04d      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2f      	ldr	r2, [pc, #188]	; (80052f0 <HAL_TIM_Base_MspInit+0x25c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d117      	bne.n	8005266 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800523c:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 800523e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005242:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005246:	4b23      	ldr	r3, [pc, #140]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005254:	2200      	movs	r2, #0
 8005256:	2100      	movs	r1, #0
 8005258:	202c      	movs	r0, #44	; 0x2c
 800525a:	f000 fe16 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800525e:	202c      	movs	r0, #44	; 0x2c
 8005260:	f000 fe2d 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 8005264:	e030      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <HAL_TIM_Base_MspInit+0x260>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d117      	bne.n	80052a0 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005276:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005280:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 8005282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800528e:	2200      	movs	r2, #0
 8005290:	2100      	movs	r1, #0
 8005292:	202d      	movs	r0, #45	; 0x2d
 8005294:	f000 fdf9 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005298:	202d      	movs	r0, #45	; 0x2d
 800529a:	f000 fe10 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 800529e:	e013      	b.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <HAL_TIM_Base_MspInit+0x264>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10e      	bne.n	80052c8 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80052ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052b0:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80052b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_TIM_Base_MspInit+0x240>)
 80052bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3738      	adds	r7, #56	; 0x38
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40010000 	.word	0x40010000
 80052d4:	58024400 	.word	0x58024400
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40001000 	.word	0x40001000
 80052e8:	40001400 	.word	0x40001400
 80052ec:	40001800 	.word	0x40001800
 80052f0:	40001c00 	.word	0x40001c00
 80052f4:	40002000 	.word	0x40002000
 80052f8:	40014000 	.word	0x40014000

080052fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08c      	sub	sp, #48	; 0x30
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005304:	f107 031c 	add.w	r3, r7, #28
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5e      	ldr	r2, [pc, #376]	; (8005494 <HAL_TIM_MspPostInit+0x198>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d120      	bne.n	8005360 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800531e:	4b5e      	ldr	r3, [pc, #376]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005324:	4a5c      	ldr	r2, [pc, #368]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005326:	f043 0310 	orr.w	r3, r3, #16
 800532a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800532e:	4b5a      	ldr	r3, [pc, #360]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 800533c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005342:	2302      	movs	r3, #2
 8005344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005346:	2300      	movs	r3, #0
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800534a:	2300      	movs	r3, #0
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800534e:	2301      	movs	r3, #1
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8005352:	f107 031c 	add.w	r3, r7, #28
 8005356:	4619      	mov	r1, r3
 8005358:	4850      	ldr	r0, [pc, #320]	; (800549c <HAL_TIM_MspPostInit+0x1a0>)
 800535a:	f003 fe0f 	bl	8008f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800535e:	e094      	b.n	800548a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d120      	bne.n	80053ac <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800536a:	4b4b      	ldr	r3, [pc, #300]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 800536c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005370:	4a49      	ldr	r2, [pc, #292]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005372:	f043 0302 	orr.w	r3, r3, #2
 8005376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800537a:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 800537c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8005388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538e:	2302      	movs	r3, #2
 8005390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005392:	2300      	movs	r3, #0
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005396:	2300      	movs	r3, #0
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800539a:	2301      	movs	r3, #1
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800539e:	f107 031c 	add.w	r3, r7, #28
 80053a2:	4619      	mov	r1, r3
 80053a4:	483e      	ldr	r0, [pc, #248]	; (80054a0 <HAL_TIM_MspPostInit+0x1a4>)
 80053a6:	f003 fde9 	bl	8008f7c <HAL_GPIO_Init>
}
 80053aa:	e06e      	b.n	800548a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a3c      	ldr	r2, [pc, #240]	; (80054a4 <HAL_TIM_MspPostInit+0x1a8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d11f      	bne.n	80053f6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b6:	4b38      	ldr	r3, [pc, #224]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 80053b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053bc:	4a36      	ldr	r2, [pc, #216]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053c6:	4b34      	ldr	r3, [pc, #208]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 80053c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d8:	2302      	movs	r3, #2
 80053da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e0:	2300      	movs	r3, #0
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053e4:	2302      	movs	r3, #2
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80053e8:	f107 031c 	add.w	r3, r7, #28
 80053ec:	4619      	mov	r1, r3
 80053ee:	482e      	ldr	r0, [pc, #184]	; (80054a8 <HAL_TIM_MspPostInit+0x1ac>)
 80053f0:	f003 fdc4 	bl	8008f7c <HAL_GPIO_Init>
}
 80053f4:	e049      	b.n	800548a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_TIM_MspPostInit+0x1b0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d120      	bne.n	8005442 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005406:	4a24      	ldr	r2, [pc, #144]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005410:	4b21      	ldr	r3, [pc, #132]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800541e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005424:	2302      	movs	r3, #2
 8005426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542c:	2300      	movs	r3, #0
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005430:	2302      	movs	r3, #2
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8005434:	f107 031c 	add.w	r3, r7, #28
 8005438:	4619      	mov	r1, r3
 800543a:	4819      	ldr	r0, [pc, #100]	; (80054a0 <HAL_TIM_MspPostInit+0x1a4>)
 800543c:	f003 fd9e 	bl	8008f7c <HAL_GPIO_Init>
}
 8005440:	e023      	b.n	800548a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1a      	ldr	r2, [pc, #104]	; (80054b0 <HAL_TIM_MspPostInit+0x1b4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d11e      	bne.n	800548a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 800544e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005452:	4a11      	ldr	r2, [pc, #68]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 8005454:	f043 0310 	orr.w	r3, r3, #16
 8005458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_TIM_MspPostInit+0x19c>)
 800545e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800546a:	2340      	movs	r3, #64	; 0x40
 800546c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546e:	2302      	movs	r3, #2
 8005470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005472:	2300      	movs	r3, #0
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005476:	2300      	movs	r3, #0
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800547a:	2304      	movs	r3, #4
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800547e:	f107 031c 	add.w	r3, r7, #28
 8005482:	4619      	mov	r1, r3
 8005484:	4805      	ldr	r0, [pc, #20]	; (800549c <HAL_TIM_MspPostInit+0x1a0>)
 8005486:	f003 fd79 	bl	8008f7c <HAL_GPIO_Init>
}
 800548a:	bf00      	nop
 800548c:	3730      	adds	r7, #48	; 0x30
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000
 8005498:	58024400 	.word	0x58024400
 800549c:	58021000 	.word	0x58021000
 80054a0:	58020400 	.word	0x58020400
 80054a4:	40000400 	.word	0x40000400
 80054a8:	58020000 	.word	0x58020000
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40014000 	.word	0x40014000

080054b4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <MX_UART4_Init+0x9c>)
 80054ba:	4a26      	ldr	r2, [pc, #152]	; (8005554 <MX_UART4_Init+0xa0>)
 80054bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <MX_UART4_Init+0x9c>)
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <MX_UART4_Init+0xa4>)
 80054c2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <MX_UART4_Init+0x9c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80054ca:	4b21      	ldr	r3, [pc, #132]	; (8005550 <MX_UART4_Init+0x9c>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80054d0:	4b1f      	ldr	r3, [pc, #124]	; (8005550 <MX_UART4_Init+0x9c>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80054d6:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <MX_UART4_Init+0x9c>)
 80054d8:	220c      	movs	r2, #12
 80054da:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <MX_UART4_Init+0x9c>)
 80054de:	2200      	movs	r2, #0
 80054e0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80054e2:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <MX_UART4_Init+0x9c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <MX_UART4_Init+0x9c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054ee:	4b18      	ldr	r3, [pc, #96]	; (8005550 <MX_UART4_Init+0x9c>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80054f4:	4b16      	ldr	r3, [pc, #88]	; (8005550 <MX_UART4_Init+0x9c>)
 80054f6:	2208      	movs	r2, #8
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <MX_UART4_Init+0x9c>)
 80054fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005502:	4813      	ldr	r0, [pc, #76]	; (8005550 <MX_UART4_Init+0x9c>)
 8005504:	f007 feb2 	bl	800d26c <HAL_UART_Init>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800550e:	f7fe fd37 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005512:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005516:	480e      	ldr	r0, [pc, #56]	; (8005550 <MX_UART4_Init+0x9c>)
 8005518:	f009 ff39 	bl	800f38e <HAL_UARTEx_SetTxFifoThreshold>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8005522:	f7fe fd2d 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005526:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800552a:	4809      	ldr	r0, [pc, #36]	; (8005550 <MX_UART4_Init+0x9c>)
 800552c:	f009 ff6d 	bl	800f40a <HAL_UARTEx_SetRxFifoThreshold>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8005536:	f7fe fd23 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800553a:	4805      	ldr	r0, [pc, #20]	; (8005550 <MX_UART4_Init+0x9c>)
 800553c:	f009 feb3 	bl	800f2a6 <HAL_UARTEx_EnableFifoMode>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8005546:	f7fe fd1b 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	24000f6c 	.word	0x24000f6c
 8005554:	40004c00 	.word	0x40004c00
 8005558:	001e8480 	.word	0x001e8480

0800555c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <MX_UART7_Init+0x94>)
 8005562:	4a24      	ldr	r2, [pc, #144]	; (80055f4 <MX_UART7_Init+0x98>)
 8005564:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <MX_UART7_Init+0x94>)
 8005568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800556c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <MX_UART7_Init+0x94>)
 8005570:	2200      	movs	r2, #0
 8005572:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <MX_UART7_Init+0x94>)
 8005576:	2200      	movs	r2, #0
 8005578:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <MX_UART7_Init+0x94>)
 800557c:	2200      	movs	r2, #0
 800557e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <MX_UART7_Init+0x94>)
 8005582:	220c      	movs	r2, #12
 8005584:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <MX_UART7_Init+0x94>)
 8005588:	2200      	movs	r2, #0
 800558a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800558c:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <MX_UART7_Init+0x94>)
 800558e:	2200      	movs	r2, #0
 8005590:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <MX_UART7_Init+0x94>)
 8005594:	2200      	movs	r2, #0
 8005596:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <MX_UART7_Init+0x94>)
 800559a:	2200      	movs	r2, #0
 800559c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <MX_UART7_Init+0x94>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80055a4:	4812      	ldr	r0, [pc, #72]	; (80055f0 <MX_UART7_Init+0x94>)
 80055a6:	f007 fe61 	bl	800d26c <HAL_UART_Init>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80055b0:	f7fe fce6 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80055b4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80055b8:	480d      	ldr	r0, [pc, #52]	; (80055f0 <MX_UART7_Init+0x94>)
 80055ba:	f009 fee8 	bl	800f38e <HAL_UARTEx_SetTxFifoThreshold>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80055c4:	f7fe fcdc 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80055c8:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80055cc:	4808      	ldr	r0, [pc, #32]	; (80055f0 <MX_UART7_Init+0x94>)
 80055ce:	f009 ff1c 	bl	800f40a <HAL_UARTEx_SetRxFifoThreshold>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80055d8:	f7fe fcd2 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80055dc:	4804      	ldr	r0, [pc, #16]	; (80055f0 <MX_UART7_Init+0x94>)
 80055de:	f009 fe62 	bl	800f2a6 <HAL_UARTEx_EnableFifoMode>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80055e8:	f7fe fcca 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80055ec:	bf00      	nop
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	24000ce4 	.word	0x24000ce4
 80055f4:	40007800 	.word	0x40007800

080055f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80055fc:	4b22      	ldr	r3, [pc, #136]	; (8005688 <MX_USART3_UART_Init+0x90>)
 80055fe:	4a23      	ldr	r2, [pc, #140]	; (800568c <MX_USART3_UART_Init+0x94>)
 8005600:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005602:	4b21      	ldr	r3, [pc, #132]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005608:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800560a:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <MX_USART3_UART_Init+0x90>)
 800560c:	2200      	movs	r2, #0
 800560e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005610:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005612:	2200      	movs	r2, #0
 8005614:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005616:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005618:	2200      	movs	r2, #0
 800561a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <MX_USART3_UART_Init+0x90>)
 800561e:	220c      	movs	r2, #12
 8005620:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005622:	4b19      	ldr	r3, [pc, #100]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005624:	2200      	movs	r2, #0
 8005626:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005628:	4b17      	ldr	r3, [pc, #92]	; (8005688 <MX_USART3_UART_Init+0x90>)
 800562a:	2200      	movs	r2, #0
 800562c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800562e:	4b16      	ldr	r3, [pc, #88]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005630:	2200      	movs	r2, #0
 8005632:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005636:	2200      	movs	r2, #0
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <MX_USART3_UART_Init+0x90>)
 800563c:	2200      	movs	r2, #0
 800563e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005640:	4811      	ldr	r0, [pc, #68]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005642:	f007 fe13 	bl	800d26c <HAL_UART_Init>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800564c:	f7fe fc98 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005650:	2100      	movs	r1, #0
 8005652:	480d      	ldr	r0, [pc, #52]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005654:	f009 fe9b 	bl	800f38e <HAL_UARTEx_SetTxFifoThreshold>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800565e:	f7fe fc8f 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005662:	2100      	movs	r1, #0
 8005664:	4808      	ldr	r0, [pc, #32]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005666:	f009 fed0 	bl	800f40a <HAL_UARTEx_SetRxFifoThreshold>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005670:	f7fe fc86 	bl	8003f80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005674:	4804      	ldr	r0, [pc, #16]	; (8005688 <MX_USART3_UART_Init+0x90>)
 8005676:	f009 fe51 	bl	800f31c <HAL_UARTEx_DisableFifoMode>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005680:	f7fe fc7e 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005684:	bf00      	nop
 8005686:	bd80      	pop	{r7, pc}
 8005688:	24000dec 	.word	0x24000dec
 800568c:	40004800 	.word	0x40004800

08005690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b0bc      	sub	sp, #240	; 0xf0
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005698:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80056a8:	f107 0320 	add.w	r3, r7, #32
 80056ac:	22bc      	movs	r2, #188	; 0xbc
 80056ae:	2100      	movs	r1, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f00a fcd5 	bl	8010060 <memset>
  if(uartHandle->Instance==UART4)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4aa1      	ldr	r2, [pc, #644]	; (8005940 <HAL_UART_MspInit+0x2b0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	f040 80b7 	bne.w	8005830 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80056c2:	2302      	movs	r3, #2
 80056c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056cc:	f107 0320 	add.w	r3, r7, #32
 80056d0:	4618      	mov	r0, r3
 80056d2:	f004 fe29 	bl	800a328 <HAL_RCCEx_PeriphCLKConfig>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80056dc:	f7fe fc50 	bl	8003f80 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80056e0:	4b98      	ldr	r3, [pc, #608]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 80056e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056e6:	4a97      	ldr	r2, [pc, #604]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 80056e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80056f0:	4b94      	ldr	r3, [pc, #592]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 80056f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fe:	4b91      	ldr	r3, [pc, #580]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 8005700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005704:	4a8f      	ldr	r2, [pc, #572]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 8005706:	f043 0308 	orr.w	r3, r3, #8
 800570a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800570e:	4b8d      	ldr	r3, [pc, #564]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 8005710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800571c:	2303      	movs	r3, #3
 800571e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005722:	2302      	movs	r3, #2
 8005724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005734:	2308      	movs	r3, #8
 8005736:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800573a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800573e:	4619      	mov	r1, r3
 8005740:	4881      	ldr	r0, [pc, #516]	; (8005948 <HAL_UART_MspInit+0x2b8>)
 8005742:	f003 fc1b 	bl	8008f7c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8005746:	4b81      	ldr	r3, [pc, #516]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005748:	4a81      	ldr	r2, [pc, #516]	; (8005950 <HAL_UART_MspInit+0x2c0>)
 800574a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800574c:	4b7f      	ldr	r3, [pc, #508]	; (800594c <HAL_UART_MspInit+0x2bc>)
 800574e:	223f      	movs	r2, #63	; 0x3f
 8005750:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005752:	4b7e      	ldr	r3, [pc, #504]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005754:	2200      	movs	r2, #0
 8005756:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005758:	4b7c      	ldr	r3, [pc, #496]	; (800594c <HAL_UART_MspInit+0x2bc>)
 800575a:	2200      	movs	r2, #0
 800575c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800575e:	4b7b      	ldr	r3, [pc, #492]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005764:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005766:	4b79      	ldr	r3, [pc, #484]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005768:	2200      	movs	r2, #0
 800576a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800576c:	4b77      	ldr	r3, [pc, #476]	; (800594c <HAL_UART_MspInit+0x2bc>)
 800576e:	2200      	movs	r2, #0
 8005770:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005772:	4b76      	ldr	r3, [pc, #472]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005774:	2200      	movs	r2, #0
 8005776:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005778:	4b74      	ldr	r3, [pc, #464]	; (800594c <HAL_UART_MspInit+0x2bc>)
 800577a:	2200      	movs	r2, #0
 800577c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800577e:	4b73      	ldr	r3, [pc, #460]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005780:	2204      	movs	r2, #4
 8005782:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005784:	4b71      	ldr	r3, [pc, #452]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005786:	2203      	movs	r2, #3
 8005788:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800578a:	4b70      	ldr	r3, [pc, #448]	; (800594c <HAL_UART_MspInit+0x2bc>)
 800578c:	2200      	movs	r2, #0
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005790:	4b6e      	ldr	r3, [pc, #440]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005792:	2200      	movs	r2, #0
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005796:	486d      	ldr	r0, [pc, #436]	; (800594c <HAL_UART_MspInit+0x2bc>)
 8005798:	f000 fdb6 	bl	8006308 <HAL_DMA_Init>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80057a2:	f7fe fbed 	bl	8003f80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a68      	ldr	r2, [pc, #416]	; (800594c <HAL_UART_MspInit+0x2bc>)
 80057aa:	67da      	str	r2, [r3, #124]	; 0x7c
 80057ac:	4a67      	ldr	r2, [pc, #412]	; (800594c <HAL_UART_MspInit+0x2bc>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80057b2:	4b68      	ldr	r3, [pc, #416]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057b4:	4a68      	ldr	r2, [pc, #416]	; (8005958 <HAL_UART_MspInit+0x2c8>)
 80057b6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80057b8:	4b66      	ldr	r3, [pc, #408]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057be:	4b65      	ldr	r3, [pc, #404]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057c0:	2240      	movs	r2, #64	; 0x40
 80057c2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057c4:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057ca:	4b62      	ldr	r3, [pc, #392]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057d0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057d2:	4b60      	ldr	r3, [pc, #384]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057d8:	4b5e      	ldr	r3, [pc, #376]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057da:	2200      	movs	r2, #0
 80057dc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057e4:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80057ea:	4b5a      	ldr	r3, [pc, #360]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057ec:	2204      	movs	r2, #4
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80057f0:	4b58      	ldr	r3, [pc, #352]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057f2:	2203      	movs	r2, #3
 80057f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80057f6:	4b57      	ldr	r3, [pc, #348]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80057fc:	4b55      	ldr	r3, [pc, #340]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 80057fe:	2200      	movs	r2, #0
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005802:	4854      	ldr	r0, [pc, #336]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 8005804:	f000 fd80 	bl	8006308 <HAL_DMA_Init>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800580e:	f7fe fbb7 	bl	8003f80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a4f      	ldr	r2, [pc, #316]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 8005816:	679a      	str	r2, [r3, #120]	; 0x78
 8005818:	4a4e      	ldr	r2, [pc, #312]	; (8005954 <HAL_UART_MspInit+0x2c4>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	2034      	movs	r0, #52	; 0x34
 8005824:	f000 fb31 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005828:	2034      	movs	r0, #52	; 0x34
 800582a:	f000 fb48 	bl	8005ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800582e:	e153      	b.n	8005ad8 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a49      	ldr	r2, [pc, #292]	; (800595c <HAL_UART_MspInit+0x2cc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	f040 8098 	bne.w	800596c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800583c:	2302      	movs	r3, #2
 800583e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005840:	2300      	movs	r3, #0
 8005842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005846:	f107 0320 	add.w	r3, r7, #32
 800584a:	4618      	mov	r0, r3
 800584c:	f004 fd6c 	bl	800a328 <HAL_RCCEx_PeriphCLKConfig>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8005856:	f7fe fb93 	bl	8003f80 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 800585c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005860:	4a38      	ldr	r2, [pc, #224]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 8005862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005866:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 800586c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005870:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005878:	4b32      	ldr	r3, [pc, #200]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 800587a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800587e:	4a31      	ldr	r2, [pc, #196]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 8005880:	f043 0310 	orr.w	r3, r3, #16
 8005884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005888:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <HAL_UART_MspInit+0x2b4>)
 800588a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005896:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800589a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800589e:	2302      	movs	r3, #2
 80058a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058aa:	2300      	movs	r3, #0
 80058ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80058b0:	2307      	movs	r3, #7
 80058b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80058ba:	4619      	mov	r1, r3
 80058bc:	4828      	ldr	r0, [pc, #160]	; (8005960 <HAL_UART_MspInit+0x2d0>)
 80058be:	f003 fb5d 	bl	8008f7c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80058c2:	4b28      	ldr	r3, [pc, #160]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058c4:	4a28      	ldr	r2, [pc, #160]	; (8005968 <HAL_UART_MspInit+0x2d8>)
 80058c6:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80058c8:	4b26      	ldr	r3, [pc, #152]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058ca:	2250      	movs	r2, #80	; 0x50
 80058cc:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058ce:	4b25      	ldr	r3, [pc, #148]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058d0:	2240      	movs	r2, #64	; 0x40
 80058d2:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058d4:	4b23      	ldr	r3, [pc, #140]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058da:	4b22      	ldr	r3, [pc, #136]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058e0:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058e2:	4b20      	ldr	r3, [pc, #128]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058e8:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80058ee:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80058fa:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 80058fc:	2204      	movs	r2, #4
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005900:	4b18      	ldr	r3, [pc, #96]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 8005902:	2203      	movs	r2, #3
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005906:	4b17      	ldr	r3, [pc, #92]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 8005908:	2200      	movs	r2, #0
 800590a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800590c:	4b15      	ldr	r3, [pc, #84]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8005912:	4814      	ldr	r0, [pc, #80]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 8005914:	f000 fcf8 	bl	8006308 <HAL_DMA_Init>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800591e:	f7fe fb2f 	bl	8003f80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 8005926:	679a      	str	r2, [r3, #120]	; 0x78
 8005928:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <HAL_UART_MspInit+0x2d4>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	2052      	movs	r0, #82	; 0x52
 8005934:	f000 faa9 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005938:	2052      	movs	r0, #82	; 0x52
 800593a:	f000 fac0 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 800593e:	e0cb      	b.n	8005ad8 <HAL_UART_MspInit+0x448>
 8005940:	40004c00 	.word	0x40004c00
 8005944:	58024400 	.word	0x58024400
 8005948:	58020c00 	.word	0x58020c00
 800594c:	24000c6c 	.word	0x24000c6c
 8005950:	40020058 	.word	0x40020058
 8005954:	24000ffc 	.word	0x24000ffc
 8005958:	40020070 	.word	0x40020070
 800595c:	40007800 	.word	0x40007800
 8005960:	58021000 	.word	0x58021000
 8005964:	24000ef4 	.word	0x24000ef4
 8005968:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5b      	ldr	r2, [pc, #364]	; (8005ae0 <HAL_UART_MspInit+0x450>)
 8005972:	4293      	cmp	r3, r2
 8005974:	f040 80b0 	bne.w	8005ad8 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005978:	2302      	movs	r3, #2
 800597a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005982:	f107 0320 	add.w	r3, r7, #32
 8005986:	4618      	mov	r0, r3
 8005988:	f004 fcce 	bl	800a328 <HAL_RCCEx_PeriphCLKConfig>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8005992:	f7fe faf5 	bl	8003f80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005996:	4b53      	ldr	r3, [pc, #332]	; (8005ae4 <HAL_UART_MspInit+0x454>)
 8005998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800599c:	4a51      	ldr	r2, [pc, #324]	; (8005ae4 <HAL_UART_MspInit+0x454>)
 800599e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059a6:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <HAL_UART_MspInit+0x454>)
 80059a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059b4:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <HAL_UART_MspInit+0x454>)
 80059b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ba:	4a4a      	ldr	r2, [pc, #296]	; (8005ae4 <HAL_UART_MspInit+0x454>)
 80059bc:	f043 0308 	orr.w	r3, r3, #8
 80059c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059c4:	4b47      	ldr	r3, [pc, #284]	; (8005ae4 <HAL_UART_MspInit+0x454>)
 80059c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80059d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059da:	2302      	movs	r3, #2
 80059dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80059ec:	2307      	movs	r3, #7
 80059ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80059f6:	4619      	mov	r1, r3
 80059f8:	483b      	ldr	r0, [pc, #236]	; (8005ae8 <HAL_UART_MspInit+0x458>)
 80059fa:	f003 fabf 	bl	8008f7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80059fe:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a00:	4a3b      	ldr	r2, [pc, #236]	; (8005af0 <HAL_UART_MspInit+0x460>)
 8005a02:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005a04:	4b39      	ldr	r3, [pc, #228]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a06:	222d      	movs	r2, #45	; 0x2d
 8005a08:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a0a:	4b38      	ldr	r3, [pc, #224]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a10:	4b36      	ldr	r3, [pc, #216]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a16:	4b35      	ldr	r3, [pc, #212]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a1e:	4b33      	ldr	r3, [pc, #204]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a24:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005a2a:	4b30      	ldr	r3, [pc, #192]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005a30:	4b2e      	ldr	r3, [pc, #184]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a38:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a3e:	482b      	ldr	r0, [pc, #172]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a40:	f000 fc62 	bl	8006308 <HAL_DMA_Init>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_UART_MspInit+0x3be>
      Error_Handler();
 8005a4a:	f7fe fa99 	bl	8003f80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a26      	ldr	r2, [pc, #152]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a52:	67da      	str	r2, [r3, #124]	; 0x7c
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <HAL_UART_MspInit+0x45c>)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8005a5a:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a5c:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <HAL_UART_MspInit+0x468>)
 8005a5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a62:	222e      	movs	r2, #46	; 0x2e
 8005a64:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a66:	4b23      	ldr	r3, [pc, #140]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a68:	2240      	movs	r2, #64	; 0x40
 8005a6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6c:	4b21      	ldr	r3, [pc, #132]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a78:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a7a:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a80:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005a86:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005a8c:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a92:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a94:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a96:	2204      	movs	r2, #4
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a9a:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005aac:	4811      	ldr	r0, [pc, #68]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005aae:	f000 fc2b 	bl	8006308 <HAL_DMA_Init>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8005ab8:	f7fe fa62 	bl	8003f80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78
 8005ac2:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <HAL_UART_MspInit+0x464>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2100      	movs	r1, #0
 8005acc:	2027      	movs	r0, #39	; 0x27
 8005ace:	f000 f9dc 	bl	8005e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ad2:	2027      	movs	r0, #39	; 0x27
 8005ad4:	f000 f9f3 	bl	8005ebe <HAL_NVIC_EnableIRQ>
}
 8005ad8:	bf00      	nop
 8005ada:	37f0      	adds	r7, #240	; 0xf0
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40004800 	.word	0x40004800
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	58020c00 	.word	0x58020c00
 8005aec:	24000d74 	.word	0x24000d74
 8005af0:	40020028 	.word	0x40020028
 8005af4:	24000e7c 	.word	0x24000e7c
 8005af8:	40020040 	.word	0x40020040

08005afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8005afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b00:	f7fe fe46 	bl	8004790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b04:	480c      	ldr	r0, [pc, #48]	; (8005b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b06:	490d      	ldr	r1, [pc, #52]	; (8005b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b08:	4a0d      	ldr	r2, [pc, #52]	; (8005b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b0c:	e002      	b.n	8005b14 <LoopCopyDataInit>

08005b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b12:	3304      	adds	r3, #4

08005b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b18:	d3f9      	bcc.n	8005b0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b1c:	4c0a      	ldr	r4, [pc, #40]	; (8005b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b20:	e001      	b.n	8005b26 <LoopFillZerobss>

08005b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b24:	3204      	adds	r2, #4

08005b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b28:	d3fb      	bcc.n	8005b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b2a:	f00a fa67 	bl	800fffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b2e:	f7fd ffa7 	bl	8003a80 <main>
  bx  lr
 8005b32:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8005b34:	24001688 	.word	0x24001688
  ldr r0, =_sdata
 8005b38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005b3c:	2400020c 	.word	0x2400020c
  ldr r2, =_sidata
 8005b40:	0801474c 	.word	0x0801474c
  ldr r2, =_sbss
 8005b44:	2400020c 	.word	0x2400020c
  ldr r4, =_ebss
 8005b48:	24001088 	.word	0x24001088

08005b4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b4c:	e7fe      	b.n	8005b4c <ADC3_IRQHandler>
	...

08005b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b56:	2003      	movs	r0, #3
 8005b58:	f000 f98c 	bl	8005e74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b5c:	f004 fa0e 	bl	8009f7c <HAL_RCC_GetSysClockFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <HAL_Init+0x68>)
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	4913      	ldr	r1, [pc, #76]	; (8005bbc <HAL_Init+0x6c>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
 8005b78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b7a:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <HAL_Init+0x68>)
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <HAL_Init+0x6c>)
 8005b84:	5cd3      	ldrb	r3, [r2, r3]
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <HAL_Init+0x70>)
 8005b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b94:	4a0b      	ldr	r2, [pc, #44]	; (8005bc4 <HAL_Init+0x74>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f000 f814 	bl	8005bc8 <HAL_InitTick>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e002      	b.n	8005bb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005baa:	f7fe fc3b 	bl	8004424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	08012918 	.word	0x08012918
 8005bc0:	24000030 	.word	0x24000030
 8005bc4:	2400002c 	.word	0x2400002c

08005bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005bd0:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <HAL_InitTick+0x60>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e021      	b.n	8005c20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <HAL_InitTick+0x64>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <HAL_InitTick+0x60>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	4619      	mov	r1, r3
 8005be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f971 	bl	8005eda <HAL_SYSTICK_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e00e      	b.n	8005c20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b0f      	cmp	r3, #15
 8005c06:	d80a      	bhi.n	8005c1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c08:	2200      	movs	r2, #0
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	f000 f93b 	bl	8005e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c14:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <HAL_InitTick+0x68>)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e000      	b.n	8005c20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	24000038 	.word	0x24000038
 8005c2c:	2400002c 	.word	0x2400002c
 8005c30:	24000034 	.word	0x24000034

08005c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <HAL_IncTick+0x20>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <HAL_IncTick+0x24>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4413      	add	r3, r2
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <HAL_IncTick+0x24>)
 8005c46:	6013      	str	r3, [r2, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	24000038 	.word	0x24000038
 8005c58:	24001074 	.word	0x24001074

08005c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_GetTick+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	24001074 	.word	0x24001074

08005c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c7c:	f7ff ffee 	bl	8005c5c <HAL_GetTick>
 8005c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d005      	beq.n	8005c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <HAL_Delay+0x44>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c9a:	bf00      	nop
 8005c9c:	f7ff ffde 	bl	8005c5c <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d8f7      	bhi.n	8005c9c <HAL_Delay+0x28>
  {
  }
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	24000038 	.word	0x24000038

08005cbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <HAL_GetREVID+0x14>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	0c1b      	lsrs	r3, r3, #16
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	5c001000 	.word	0x5c001000

08005cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <__NVIC_SetPriorityGrouping+0x40>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <__NVIC_SetPriorityGrouping+0x44>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d02:	4a04      	ldr	r2, [pc, #16]	; (8005d14 <__NVIC_SetPriorityGrouping+0x40>)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	60d3      	str	r3, [r2, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	e000ed00 	.word	0xe000ed00
 8005d18:	05fa0000 	.word	0x05fa0000

08005d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d20:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <__NVIC_GetPriorityGrouping+0x18>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	0a1b      	lsrs	r3, r3, #8
 8005d26:	f003 0307 	and.w	r3, r3, #7
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	e000ed00 	.word	0xe000ed00

08005d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	db0b      	blt.n	8005d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	f003 021f 	and.w	r2, r3, #31
 8005d50:	4907      	ldr	r1, [pc, #28]	; (8005d70 <__NVIC_EnableIRQ+0x38>)
 8005d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	2001      	movs	r0, #1
 8005d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	e000e100 	.word	0xe000e100

08005d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	6039      	str	r1, [r7, #0]
 8005d7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	db0a      	blt.n	8005d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	490c      	ldr	r1, [pc, #48]	; (8005dc0 <__NVIC_SetPriority+0x4c>)
 8005d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d92:	0112      	lsls	r2, r2, #4
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	440b      	add	r3, r1
 8005d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d9c:	e00a      	b.n	8005db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	4908      	ldr	r1, [pc, #32]	; (8005dc4 <__NVIC_SetPriority+0x50>)
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	3b04      	subs	r3, #4
 8005dac:	0112      	lsls	r2, r2, #4
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	440b      	add	r3, r1
 8005db2:	761a      	strb	r2, [r3, #24]
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	e000e100 	.word	0xe000e100
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b089      	sub	sp, #36	; 0x24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f1c3 0307 	rsb	r3, r3, #7
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	bf28      	it	cs
 8005de6:	2304      	movcs	r3, #4
 8005de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2b06      	cmp	r3, #6
 8005df0:	d902      	bls.n	8005df8 <NVIC_EncodePriority+0x30>
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	3b03      	subs	r3, #3
 8005df6:	e000      	b.n	8005dfa <NVIC_EncodePriority+0x32>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43da      	mvns	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	401a      	ands	r2, r3
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e10:	f04f 31ff 	mov.w	r1, #4294967295
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	43d9      	mvns	r1, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e20:	4313      	orrs	r3, r2
         );
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3724      	adds	r7, #36	; 0x24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e40:	d301      	bcc.n	8005e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e42:	2301      	movs	r3, #1
 8005e44:	e00f      	b.n	8005e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <SysTick_Config+0x40>)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e4e:	210f      	movs	r1, #15
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	f7ff ff8e 	bl	8005d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <SysTick_Config+0x40>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e5e:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <SysTick_Config+0x40>)
 8005e60:	2207      	movs	r2, #7
 8005e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	e000e010 	.word	0xe000e010

08005e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff29 	bl	8005cd4 <__NVIC_SetPriorityGrouping>
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	4603      	mov	r3, r0
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e98:	f7ff ff40 	bl	8005d1c <__NVIC_GetPriorityGrouping>
 8005e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	6978      	ldr	r0, [r7, #20]
 8005ea4:	f7ff ff90 	bl	8005dc8 <NVIC_EncodePriority>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff ff5f 	bl	8005d74 <__NVIC_SetPriority>
}
 8005eb6:	bf00      	nop
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff ff33 	bl	8005d38 <__NVIC_EnableIRQ>
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ffa4 	bl	8005e30 <SysTick_Config>
 8005ee8:	4603      	mov	r3, r0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005ef6:	f000 f802 	bl	8005efe <HAL_SYSTICK_Callback>
}
 8005efa:	bf00      	nop
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e054      	b.n	8005fc8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7f5b      	ldrb	r3, [r3, #29]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb fc60 	bl	80017f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	791b      	ldrb	r3, [r3, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10c      	bne.n	8005f5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <HAL_CRC_Init+0xc4>)
 8005f48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0218 	bic.w	r2, r2, #24
 8005f58:	609a      	str	r2, [r3, #8]
 8005f5a:	e00c      	b.n	8005f76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6899      	ldr	r1, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f948 	bl	80061fc <HAL_CRCEx_Polynomial_Set>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e028      	b.n	8005fc8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	795b      	ldrb	r3, [r3, #5]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d105      	bne.n	8005f8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f04f 32ff 	mov.w	r2, #4294967295
 8005f86:	611a      	str	r2, [r3, #16]
 8005f88:	e004      	b.n	8005f94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6912      	ldr	r2, [r2, #16]
 8005f92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	04c11db7 	.word	0x04c11db7

08005fd4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0201 	orr.w	r2, r2, #1
 8005ff8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d006      	beq.n	8006010 <HAL_CRC_Calculate+0x3c>
 8006002:	2b03      	cmp	r3, #3
 8006004:	d829      	bhi.n	800605a <HAL_CRC_Calculate+0x86>
 8006006:	2b01      	cmp	r3, #1
 8006008:	d019      	beq.n	800603e <HAL_CRC_Calculate+0x6a>
 800600a:	2b02      	cmp	r3, #2
 800600c:	d01e      	beq.n	800604c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800600e:	e024      	b.n	800605a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e00a      	b.n	800602c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3301      	adds	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d3f0      	bcc.n	8006016 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	613b      	str	r3, [r7, #16]
      break;
 800603c:	e00e      	b.n	800605c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f812 	bl	800606c <CRC_Handle_8>
 8006048:	6138      	str	r0, [r7, #16]
      break;
 800604a:	e007      	b.n	800605c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f899 	bl	8006188 <CRC_Handle_16>
 8006056:	6138      	str	r0, [r7, #16]
      break;
 8006058:	e000      	b.n	800605c <HAL_CRC_Calculate+0x88>
      break;
 800605a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006062:	693b      	ldr	r3, [r7, #16]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e023      	b.n	80060c6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	4413      	add	r3, r2
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	3301      	adds	r3, #1
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	440b      	add	r3, r1
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006098:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	3302      	adds	r3, #2
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	440b      	add	r3, r1
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80060a8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	3303      	adds	r3, #3
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	440b      	add	r3, r1
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80060bc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80060be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d3d6      	bcc.n	800607e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04d      	beq.n	8006176 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d107      	bne.n	80060f4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	4413      	add	r3, r2
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d116      	bne.n	800612c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4413      	add	r3, r2
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	b21a      	sxth	r2, r3
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	3301      	adds	r3, #1
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	440b      	add	r3, r1
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	b21b      	sxth	r3, r3
 800611a:	4313      	orrs	r3, r2
 800611c:	b21b      	sxth	r3, r3
 800611e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	8b7a      	ldrh	r2, [r7, #26]
 800612a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b03      	cmp	r3, #3
 8006134:	d11f      	bne.n	8006176 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	b21a      	sxth	r2, r3
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	3301      	adds	r3, #1
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	440b      	add	r3, r1
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b21b      	sxth	r3, r3
 8006152:	4313      	orrs	r3, r2
 8006154:	b21b      	sxth	r3, r3
 8006156:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	8b7a      	ldrh	r2, [r7, #26]
 8006162:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	3302      	adds	r3, #2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3724      	adds	r7, #36	; 0x24
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e013      	b.n	80061c2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	041a      	lsls	r2, r3, #16
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	3302      	adds	r3, #2
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	440b      	add	r3, r1
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	3301      	adds	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3e6      	bcc.n	800619a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	4413      	add	r3, r2
 80061e4:	881a      	ldrh	r2, [r3, #0]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800620c:	231f      	movs	r3, #31
 800620e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006210:	bf00      	nop
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1e5a      	subs	r2, r3, #1
 8006216:	613a      	str	r2, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <HAL_CRCEx_Polynomial_Set+0x34>
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0f0      	beq.n	8006212 <HAL_CRCEx_Polynomial_Set+0x16>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b18      	cmp	r3, #24
 8006234:	d846      	bhi.n	80062c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	080062cb 	.word	0x080062cb
 8006240:	080062c5 	.word	0x080062c5
 8006244:	080062c5 	.word	0x080062c5
 8006248:	080062c5 	.word	0x080062c5
 800624c:	080062c5 	.word	0x080062c5
 8006250:	080062c5 	.word	0x080062c5
 8006254:	080062c5 	.word	0x080062c5
 8006258:	080062c5 	.word	0x080062c5
 800625c:	080062b9 	.word	0x080062b9
 8006260:	080062c5 	.word	0x080062c5
 8006264:	080062c5 	.word	0x080062c5
 8006268:	080062c5 	.word	0x080062c5
 800626c:	080062c5 	.word	0x080062c5
 8006270:	080062c5 	.word	0x080062c5
 8006274:	080062c5 	.word	0x080062c5
 8006278:	080062c5 	.word	0x080062c5
 800627c:	080062ad 	.word	0x080062ad
 8006280:	080062c5 	.word	0x080062c5
 8006284:	080062c5 	.word	0x080062c5
 8006288:	080062c5 	.word	0x080062c5
 800628c:	080062c5 	.word	0x080062c5
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062c5 	.word	0x080062c5
 8006298:	080062c5 	.word	0x080062c5
 800629c:	080062a1 	.word	0x080062a1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b06      	cmp	r3, #6
 80062a4:	d913      	bls.n	80062ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80062aa:	e010      	b.n	80062ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b07      	cmp	r3, #7
 80062b0:	d90f      	bls.n	80062d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80062b6:	e00c      	b.n	80062d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d90b      	bls.n	80062d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80062c2:	e008      	b.n	80062d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]
      break;
 80062c8:	e006      	b.n	80062d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80062ca:	bf00      	nop
 80062cc:	e004      	b.n	80062d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80062ce:	bf00      	nop
 80062d0:	e002      	b.n	80062d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80062d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 0118 	bic.w	r1, r3, #24
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006310:	f7ff fca4 	bl	8005c5c <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e316      	b.n	800694e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a66      	ldr	r2, [pc, #408]	; (80064c0 <HAL_DMA_Init+0x1b8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d04a      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a65      	ldr	r2, [pc, #404]	; (80064c4 <HAL_DMA_Init+0x1bc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d045      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a63      	ldr	r2, [pc, #396]	; (80064c8 <HAL_DMA_Init+0x1c0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d040      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a62      	ldr	r2, [pc, #392]	; (80064cc <HAL_DMA_Init+0x1c4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d03b      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a60      	ldr	r2, [pc, #384]	; (80064d0 <HAL_DMA_Init+0x1c8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d036      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a5f      	ldr	r2, [pc, #380]	; (80064d4 <HAL_DMA_Init+0x1cc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d031      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a5d      	ldr	r2, [pc, #372]	; (80064d8 <HAL_DMA_Init+0x1d0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d02c      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a5c      	ldr	r2, [pc, #368]	; (80064dc <HAL_DMA_Init+0x1d4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d027      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a5a      	ldr	r2, [pc, #360]	; (80064e0 <HAL_DMA_Init+0x1d8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d022      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a59      	ldr	r2, [pc, #356]	; (80064e4 <HAL_DMA_Init+0x1dc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d01d      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a57      	ldr	r2, [pc, #348]	; (80064e8 <HAL_DMA_Init+0x1e0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d018      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a56      	ldr	r2, [pc, #344]	; (80064ec <HAL_DMA_Init+0x1e4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d013      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a54      	ldr	r2, [pc, #336]	; (80064f0 <HAL_DMA_Init+0x1e8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00e      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a53      	ldr	r2, [pc, #332]	; (80064f4 <HAL_DMA_Init+0x1ec>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d009      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a51      	ldr	r2, [pc, #324]	; (80064f8 <HAL_DMA_Init+0x1f0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <HAL_DMA_Init+0xb8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a50      	ldr	r2, [pc, #320]	; (80064fc <HAL_DMA_Init+0x1f4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d101      	bne.n	80063c4 <HAL_DMA_Init+0xbc>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <HAL_DMA_Init+0xbe>
 80063c4:	2300      	movs	r3, #0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 813b 	beq.w	8006642 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a37      	ldr	r2, [pc, #220]	; (80064c0 <HAL_DMA_Init+0x1b8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d04a      	beq.n	800647c <HAL_DMA_Init+0x174>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a36      	ldr	r2, [pc, #216]	; (80064c4 <HAL_DMA_Init+0x1bc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d045      	beq.n	800647c <HAL_DMA_Init+0x174>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a34      	ldr	r2, [pc, #208]	; (80064c8 <HAL_DMA_Init+0x1c0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d040      	beq.n	800647c <HAL_DMA_Init+0x174>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a33      	ldr	r2, [pc, #204]	; (80064cc <HAL_DMA_Init+0x1c4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d03b      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a31      	ldr	r2, [pc, #196]	; (80064d0 <HAL_DMA_Init+0x1c8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d036      	beq.n	800647c <HAL_DMA_Init+0x174>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a30      	ldr	r2, [pc, #192]	; (80064d4 <HAL_DMA_Init+0x1cc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d031      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2e      	ldr	r2, [pc, #184]	; (80064d8 <HAL_DMA_Init+0x1d0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02c      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2d      	ldr	r2, [pc, #180]	; (80064dc <HAL_DMA_Init+0x1d4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d027      	beq.n	800647c <HAL_DMA_Init+0x174>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a2b      	ldr	r2, [pc, #172]	; (80064e0 <HAL_DMA_Init+0x1d8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <HAL_DMA_Init+0x1dc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d01d      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a28      	ldr	r2, [pc, #160]	; (80064e8 <HAL_DMA_Init+0x1e0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <HAL_DMA_Init+0x174>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a27      	ldr	r2, [pc, #156]	; (80064ec <HAL_DMA_Init+0x1e4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a25      	ldr	r2, [pc, #148]	; (80064f0 <HAL_DMA_Init+0x1e8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <HAL_DMA_Init+0x174>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a24      	ldr	r2, [pc, #144]	; (80064f4 <HAL_DMA_Init+0x1ec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a22      	ldr	r2, [pc, #136]	; (80064f8 <HAL_DMA_Init+0x1f0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_DMA_Init+0x174>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a21      	ldr	r2, [pc, #132]	; (80064fc <HAL_DMA_Init+0x1f4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d108      	bne.n	800648e <HAL_DMA_Init+0x186>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	e007      	b.n	800649e <HAL_DMA_Init+0x196>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800649e:	e02f      	b.n	8006500 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064a0:	f7ff fbdc 	bl	8005c5c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d928      	bls.n	8006500 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2203      	movs	r2, #3
 80064b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e246      	b.n	800694e <HAL_DMA_Init+0x646>
 80064c0:	40020010 	.word	0x40020010
 80064c4:	40020028 	.word	0x40020028
 80064c8:	40020040 	.word	0x40020040
 80064cc:	40020058 	.word	0x40020058
 80064d0:	40020070 	.word	0x40020070
 80064d4:	40020088 	.word	0x40020088
 80064d8:	400200a0 	.word	0x400200a0
 80064dc:	400200b8 	.word	0x400200b8
 80064e0:	40020410 	.word	0x40020410
 80064e4:	40020428 	.word	0x40020428
 80064e8:	40020440 	.word	0x40020440
 80064ec:	40020458 	.word	0x40020458
 80064f0:	40020470 	.word	0x40020470
 80064f4:	40020488 	.word	0x40020488
 80064f8:	400204a0 	.word	0x400204a0
 80064fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1c8      	bne.n	80064a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4b83      	ldr	r3, [pc, #524]	; (8006728 <HAL_DMA_Init+0x420>)
 800651a:	4013      	ands	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006526:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006532:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b04      	cmp	r3, #4
 8006552:	d107      	bne.n	8006564 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	4313      	orrs	r3, r2
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006564:	4b71      	ldr	r3, [pc, #452]	; (800672c <HAL_DMA_Init+0x424>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b71      	ldr	r3, [pc, #452]	; (8006730 <HAL_DMA_Init+0x428>)
 800656a:	4013      	ands	r3, r2
 800656c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006570:	d328      	bcc.n	80065c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b28      	cmp	r3, #40	; 0x28
 8006578:	d903      	bls.n	8006582 <HAL_DMA_Init+0x27a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b2e      	cmp	r3, #46	; 0x2e
 8006580:	d917      	bls.n	80065b2 <HAL_DMA_Init+0x2aa>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b3e      	cmp	r3, #62	; 0x3e
 8006588:	d903      	bls.n	8006592 <HAL_DMA_Init+0x28a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b42      	cmp	r3, #66	; 0x42
 8006590:	d90f      	bls.n	80065b2 <HAL_DMA_Init+0x2aa>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b46      	cmp	r3, #70	; 0x46
 8006598:	d903      	bls.n	80065a2 <HAL_DMA_Init+0x29a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b48      	cmp	r3, #72	; 0x48
 80065a0:	d907      	bls.n	80065b2 <HAL_DMA_Init+0x2aa>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b4e      	cmp	r3, #78	; 0x4e
 80065a8:	d905      	bls.n	80065b6 <HAL_DMA_Init+0x2ae>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b52      	cmp	r3, #82	; 0x52
 80065b0:	d801      	bhi.n	80065b6 <HAL_DMA_Init+0x2ae>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <HAL_DMA_Init+0x2b0>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0307 	bic.w	r3, r3, #7
 80065da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d117      	bne.n	800661e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f002 fb31 	bl	8008c68 <DMA_CheckFifoParam>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2240      	movs	r2, #64	; 0x40
 8006610:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e197      	b.n	800694e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f002 fa6c 	bl	8008b04 <DMA_CalcBaseAndBitshift>
 800662c:	4603      	mov	r3, r0
 800662e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	223f      	movs	r2, #63	; 0x3f
 800663a:	409a      	lsls	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	e0cd      	b.n	80067de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a3b      	ldr	r2, [pc, #236]	; (8006734 <HAL_DMA_Init+0x42c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_DMA_Init+0x38a>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a39      	ldr	r2, [pc, #228]	; (8006738 <HAL_DMA_Init+0x430>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01d      	beq.n	8006692 <HAL_DMA_Init+0x38a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a38      	ldr	r2, [pc, #224]	; (800673c <HAL_DMA_Init+0x434>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_DMA_Init+0x38a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a36      	ldr	r2, [pc, #216]	; (8006740 <HAL_DMA_Init+0x438>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_DMA_Init+0x38a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a35      	ldr	r2, [pc, #212]	; (8006744 <HAL_DMA_Init+0x43c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_DMA_Init+0x38a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a33      	ldr	r2, [pc, #204]	; (8006748 <HAL_DMA_Init+0x440>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_DMA_Init+0x38a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a32      	ldr	r2, [pc, #200]	; (800674c <HAL_DMA_Init+0x444>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_DMA_Init+0x38a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a30      	ldr	r2, [pc, #192]	; (8006750 <HAL_DMA_Init+0x448>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d101      	bne.n	8006696 <HAL_DMA_Init+0x38e>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_DMA_Init+0x390>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8097 	beq.w	80067cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a24      	ldr	r2, [pc, #144]	; (8006734 <HAL_DMA_Init+0x42c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d021      	beq.n	80066ec <HAL_DMA_Init+0x3e4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a22      	ldr	r2, [pc, #136]	; (8006738 <HAL_DMA_Init+0x430>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01c      	beq.n	80066ec <HAL_DMA_Init+0x3e4>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a21      	ldr	r2, [pc, #132]	; (800673c <HAL_DMA_Init+0x434>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d017      	beq.n	80066ec <HAL_DMA_Init+0x3e4>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <HAL_DMA_Init+0x438>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d012      	beq.n	80066ec <HAL_DMA_Init+0x3e4>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_DMA_Init+0x43c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00d      	beq.n	80066ec <HAL_DMA_Init+0x3e4>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_DMA_Init+0x440>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d008      	beq.n	80066ec <HAL_DMA_Init+0x3e4>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1b      	ldr	r2, [pc, #108]	; (800674c <HAL_DMA_Init+0x444>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <HAL_DMA_Init+0x3e4>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_DMA_Init+0x448>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4b12      	ldr	r3, [pc, #72]	; (8006754 <HAL_DMA_Init+0x44c>)
 800670a:	4013      	ands	r3, r2
 800670c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d020      	beq.n	8006758 <HAL_DMA_Init+0x450>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b80      	cmp	r3, #128	; 0x80
 800671c:	d102      	bne.n	8006724 <HAL_DMA_Init+0x41c>
 800671e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006722:	e01a      	b.n	800675a <HAL_DMA_Init+0x452>
 8006724:	2300      	movs	r3, #0
 8006726:	e018      	b.n	800675a <HAL_DMA_Init+0x452>
 8006728:	fe10803f 	.word	0xfe10803f
 800672c:	5c001000 	.word	0x5c001000
 8006730:	ffff0000 	.word	0xffff0000
 8006734:	58025408 	.word	0x58025408
 8006738:	5802541c 	.word	0x5802541c
 800673c:	58025430 	.word	0x58025430
 8006740:	58025444 	.word	0x58025444
 8006744:	58025458 	.word	0x58025458
 8006748:	5802546c 	.word	0x5802546c
 800674c:	58025480 	.word	0x58025480
 8006750:	58025494 	.word	0x58025494
 8006754:	fffe000f 	.word	0xfffe000f
 8006758:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68d2      	ldr	r2, [r2, #12]
 800675e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006788:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	4b6e      	ldr	r3, [pc, #440]	; (8006958 <HAL_DMA_Init+0x650>)
 80067a0:	4413      	add	r3, r2
 80067a2:	4a6e      	ldr	r2, [pc, #440]	; (800695c <HAL_DMA_Init+0x654>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	009a      	lsls	r2, r3, #2
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 f9a7 	bl	8008b04 <DMA_CalcBaseAndBitshift>
 80067b6:	4603      	mov	r3, r0
 80067b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	2201      	movs	r2, #1
 80067c4:	409a      	lsls	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	e008      	b.n	80067de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2203      	movs	r2, #3
 80067d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e0b7      	b.n	800694e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a5f      	ldr	r2, [pc, #380]	; (8006960 <HAL_DMA_Init+0x658>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d072      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a5d      	ldr	r2, [pc, #372]	; (8006964 <HAL_DMA_Init+0x65c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d06d      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a5c      	ldr	r2, [pc, #368]	; (8006968 <HAL_DMA_Init+0x660>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d068      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a5a      	ldr	r2, [pc, #360]	; (800696c <HAL_DMA_Init+0x664>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d063      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a59      	ldr	r2, [pc, #356]	; (8006970 <HAL_DMA_Init+0x668>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d05e      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a57      	ldr	r2, [pc, #348]	; (8006974 <HAL_DMA_Init+0x66c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d059      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a56      	ldr	r2, [pc, #344]	; (8006978 <HAL_DMA_Init+0x670>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d054      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a54      	ldr	r2, [pc, #336]	; (800697c <HAL_DMA_Init+0x674>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d04f      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a53      	ldr	r2, [pc, #332]	; (8006980 <HAL_DMA_Init+0x678>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d04a      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a51      	ldr	r2, [pc, #324]	; (8006984 <HAL_DMA_Init+0x67c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d045      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a50      	ldr	r2, [pc, #320]	; (8006988 <HAL_DMA_Init+0x680>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d040      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a4e      	ldr	r2, [pc, #312]	; (800698c <HAL_DMA_Init+0x684>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d03b      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a4d      	ldr	r2, [pc, #308]	; (8006990 <HAL_DMA_Init+0x688>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d036      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a4b      	ldr	r2, [pc, #300]	; (8006994 <HAL_DMA_Init+0x68c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d031      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4a      	ldr	r2, [pc, #296]	; (8006998 <HAL_DMA_Init+0x690>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d02c      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a48      	ldr	r2, [pc, #288]	; (800699c <HAL_DMA_Init+0x694>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d027      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a47      	ldr	r2, [pc, #284]	; (80069a0 <HAL_DMA_Init+0x698>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d022      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a45      	ldr	r2, [pc, #276]	; (80069a4 <HAL_DMA_Init+0x69c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01d      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a44      	ldr	r2, [pc, #272]	; (80069a8 <HAL_DMA_Init+0x6a0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d018      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a42      	ldr	r2, [pc, #264]	; (80069ac <HAL_DMA_Init+0x6a4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a41      	ldr	r2, [pc, #260]	; (80069b0 <HAL_DMA_Init+0x6a8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00e      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a3f      	ldr	r2, [pc, #252]	; (80069b4 <HAL_DMA_Init+0x6ac>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d009      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a3e      	ldr	r2, [pc, #248]	; (80069b8 <HAL_DMA_Init+0x6b0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <HAL_DMA_Init+0x5c6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a3c      	ldr	r2, [pc, #240]	; (80069bc <HAL_DMA_Init+0x6b4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d101      	bne.n	80068d2 <HAL_DMA_Init+0x5ca>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <HAL_DMA_Init+0x5cc>
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d032      	beq.n	800693e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f002 fa41 	bl	8008d60 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d102      	bne.n	80068ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006900:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_DMA_Init+0x624>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d80c      	bhi.n	800692c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f002 fabe 	bl	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	e008      	b.n	800693e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	a7fdabf8 	.word	0xa7fdabf8
 800695c:	cccccccd 	.word	0xcccccccd
 8006960:	40020010 	.word	0x40020010
 8006964:	40020028 	.word	0x40020028
 8006968:	40020040 	.word	0x40020040
 800696c:	40020058 	.word	0x40020058
 8006970:	40020070 	.word	0x40020070
 8006974:	40020088 	.word	0x40020088
 8006978:	400200a0 	.word	0x400200a0
 800697c:	400200b8 	.word	0x400200b8
 8006980:	40020410 	.word	0x40020410
 8006984:	40020428 	.word	0x40020428
 8006988:	40020440 	.word	0x40020440
 800698c:	40020458 	.word	0x40020458
 8006990:	40020470 	.word	0x40020470
 8006994:	40020488 	.word	0x40020488
 8006998:	400204a0 	.word	0x400204a0
 800699c:	400204b8 	.word	0x400204b8
 80069a0:	58025408 	.word	0x58025408
 80069a4:	5802541c 	.word	0x5802541c
 80069a8:	58025430 	.word	0x58025430
 80069ac:	58025444 	.word	0x58025444
 80069b0:	58025458 	.word	0x58025458
 80069b4:	5802546c 	.word	0x5802546c
 80069b8:	58025480 	.word	0x58025480
 80069bc:	58025494 	.word	0x58025494

080069c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e226      	b.n	8006e2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_DMA_Start_IT+0x2a>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e21f      	b.n	8006e2a <HAL_DMA_Start_IT+0x46a>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	f040 820a 	bne.w	8006e14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a68      	ldr	r2, [pc, #416]	; (8006bb4 <HAL_DMA_Start_IT+0x1f4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d04a      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a66      	ldr	r2, [pc, #408]	; (8006bb8 <HAL_DMA_Start_IT+0x1f8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d045      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a65      	ldr	r2, [pc, #404]	; (8006bbc <HAL_DMA_Start_IT+0x1fc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d040      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a63      	ldr	r2, [pc, #396]	; (8006bc0 <HAL_DMA_Start_IT+0x200>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d03b      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a62      	ldr	r2, [pc, #392]	; (8006bc4 <HAL_DMA_Start_IT+0x204>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d036      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a60      	ldr	r2, [pc, #384]	; (8006bc8 <HAL_DMA_Start_IT+0x208>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d031      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a5f      	ldr	r2, [pc, #380]	; (8006bcc <HAL_DMA_Start_IT+0x20c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d02c      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a5d      	ldr	r2, [pc, #372]	; (8006bd0 <HAL_DMA_Start_IT+0x210>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d027      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a5c      	ldr	r2, [pc, #368]	; (8006bd4 <HAL_DMA_Start_IT+0x214>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a5a      	ldr	r2, [pc, #360]	; (8006bd8 <HAL_DMA_Start_IT+0x218>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01d      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a59      	ldr	r2, [pc, #356]	; (8006bdc <HAL_DMA_Start_IT+0x21c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a57      	ldr	r2, [pc, #348]	; (8006be0 <HAL_DMA_Start_IT+0x220>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a56      	ldr	r2, [pc, #344]	; (8006be4 <HAL_DMA_Start_IT+0x224>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a54      	ldr	r2, [pc, #336]	; (8006be8 <HAL_DMA_Start_IT+0x228>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a53      	ldr	r2, [pc, #332]	; (8006bec <HAL_DMA_Start_IT+0x22c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_DMA_Start_IT+0xee>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a51      	ldr	r2, [pc, #324]	; (8006bf0 <HAL_DMA_Start_IT+0x230>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <HAL_DMA_Start_IT+0x100>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e007      	b.n	8006ad0 <HAL_DMA_Start_IT+0x110>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0201 	bic.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f001 fe68 	bl	80087ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a34      	ldr	r2, [pc, #208]	; (8006bb4 <HAL_DMA_Start_IT+0x1f4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d04a      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a33      	ldr	r2, [pc, #204]	; (8006bb8 <HAL_DMA_Start_IT+0x1f8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d045      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a31      	ldr	r2, [pc, #196]	; (8006bbc <HAL_DMA_Start_IT+0x1fc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d040      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <HAL_DMA_Start_IT+0x200>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d03b      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a2e      	ldr	r2, [pc, #184]	; (8006bc4 <HAL_DMA_Start_IT+0x204>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d036      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <HAL_DMA_Start_IT+0x208>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d031      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2b      	ldr	r2, [pc, #172]	; (8006bcc <HAL_DMA_Start_IT+0x20c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02c      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <HAL_DMA_Start_IT+0x210>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d027      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <HAL_DMA_Start_IT+0x214>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <HAL_DMA_Start_IT+0x218>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01d      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <HAL_DMA_Start_IT+0x21c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a24      	ldr	r2, [pc, #144]	; (8006be0 <HAL_DMA_Start_IT+0x220>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <HAL_DMA_Start_IT+0x224>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <HAL_DMA_Start_IT+0x228>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <HAL_DMA_Start_IT+0x22c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_DMA_Start_IT+0x1bc>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <HAL_DMA_Start_IT+0x230>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d101      	bne.n	8006b80 <HAL_DMA_Start_IT+0x1c0>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <HAL_DMA_Start_IT+0x1c2>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d036      	beq.n	8006bf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 021e 	bic.w	r2, r3, #30
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0216 	orr.w	r2, r2, #22
 8006b98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d03e      	beq.n	8006c20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0208 	orr.w	r2, r2, #8
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	e035      	b.n	8006c20 <HAL_DMA_Start_IT+0x260>
 8006bb4:	40020010 	.word	0x40020010
 8006bb8:	40020028 	.word	0x40020028
 8006bbc:	40020040 	.word	0x40020040
 8006bc0:	40020058 	.word	0x40020058
 8006bc4:	40020070 	.word	0x40020070
 8006bc8:	40020088 	.word	0x40020088
 8006bcc:	400200a0 	.word	0x400200a0
 8006bd0:	400200b8 	.word	0x400200b8
 8006bd4:	40020410 	.word	0x40020410
 8006bd8:	40020428 	.word	0x40020428
 8006bdc:	40020440 	.word	0x40020440
 8006be0:	40020458 	.word	0x40020458
 8006be4:	40020470 	.word	0x40020470
 8006be8:	40020488 	.word	0x40020488
 8006bec:	400204a0 	.word	0x400204a0
 8006bf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f023 020e 	bic.w	r2, r3, #14
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 020a 	orr.w	r2, r2, #10
 8006c06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0204 	orr.w	r2, r2, #4
 8006c1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a83      	ldr	r2, [pc, #524]	; (8006e34 <HAL_DMA_Start_IT+0x474>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d072      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a82      	ldr	r2, [pc, #520]	; (8006e38 <HAL_DMA_Start_IT+0x478>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d06d      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a80      	ldr	r2, [pc, #512]	; (8006e3c <HAL_DMA_Start_IT+0x47c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d068      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a7f      	ldr	r2, [pc, #508]	; (8006e40 <HAL_DMA_Start_IT+0x480>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d063      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a7d      	ldr	r2, [pc, #500]	; (8006e44 <HAL_DMA_Start_IT+0x484>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d05e      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a7c      	ldr	r2, [pc, #496]	; (8006e48 <HAL_DMA_Start_IT+0x488>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d059      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a7a      	ldr	r2, [pc, #488]	; (8006e4c <HAL_DMA_Start_IT+0x48c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d054      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a79      	ldr	r2, [pc, #484]	; (8006e50 <HAL_DMA_Start_IT+0x490>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d04f      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a77      	ldr	r2, [pc, #476]	; (8006e54 <HAL_DMA_Start_IT+0x494>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d04a      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a76      	ldr	r2, [pc, #472]	; (8006e58 <HAL_DMA_Start_IT+0x498>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d045      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a74      	ldr	r2, [pc, #464]	; (8006e5c <HAL_DMA_Start_IT+0x49c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d040      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a73      	ldr	r2, [pc, #460]	; (8006e60 <HAL_DMA_Start_IT+0x4a0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d03b      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a71      	ldr	r2, [pc, #452]	; (8006e64 <HAL_DMA_Start_IT+0x4a4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d036      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a70      	ldr	r2, [pc, #448]	; (8006e68 <HAL_DMA_Start_IT+0x4a8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d031      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a6e      	ldr	r2, [pc, #440]	; (8006e6c <HAL_DMA_Start_IT+0x4ac>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02c      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6d      	ldr	r2, [pc, #436]	; (8006e70 <HAL_DMA_Start_IT+0x4b0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d027      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a6b      	ldr	r2, [pc, #428]	; (8006e74 <HAL_DMA_Start_IT+0x4b4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a6a      	ldr	r2, [pc, #424]	; (8006e78 <HAL_DMA_Start_IT+0x4b8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01d      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a68      	ldr	r2, [pc, #416]	; (8006e7c <HAL_DMA_Start_IT+0x4bc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a67      	ldr	r2, [pc, #412]	; (8006e80 <HAL_DMA_Start_IT+0x4c0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a65      	ldr	r2, [pc, #404]	; (8006e84 <HAL_DMA_Start_IT+0x4c4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a64      	ldr	r2, [pc, #400]	; (8006e88 <HAL_DMA_Start_IT+0x4c8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a62      	ldr	r2, [pc, #392]	; (8006e8c <HAL_DMA_Start_IT+0x4cc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_DMA_Start_IT+0x350>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a61      	ldr	r2, [pc, #388]	; (8006e90 <HAL_DMA_Start_IT+0x4d0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <HAL_DMA_Start_IT+0x354>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_DMA_Start_IT+0x356>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d01a      	beq.n	8006d50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d007      	beq.n	8006d50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a37      	ldr	r2, [pc, #220]	; (8006e34 <HAL_DMA_Start_IT+0x474>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d04a      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a36      	ldr	r2, [pc, #216]	; (8006e38 <HAL_DMA_Start_IT+0x478>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d045      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a34      	ldr	r2, [pc, #208]	; (8006e3c <HAL_DMA_Start_IT+0x47c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d040      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a33      	ldr	r2, [pc, #204]	; (8006e40 <HAL_DMA_Start_IT+0x480>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d03b      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a31      	ldr	r2, [pc, #196]	; (8006e44 <HAL_DMA_Start_IT+0x484>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d036      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a30      	ldr	r2, [pc, #192]	; (8006e48 <HAL_DMA_Start_IT+0x488>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d031      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2e      	ldr	r2, [pc, #184]	; (8006e4c <HAL_DMA_Start_IT+0x48c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d02c      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2d      	ldr	r2, [pc, #180]	; (8006e50 <HAL_DMA_Start_IT+0x490>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d027      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2b      	ldr	r2, [pc, #172]	; (8006e54 <HAL_DMA_Start_IT+0x494>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d022      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2a      	ldr	r2, [pc, #168]	; (8006e58 <HAL_DMA_Start_IT+0x498>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d01d      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <HAL_DMA_Start_IT+0x49c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d018      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <HAL_DMA_Start_IT+0x4a0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a25      	ldr	r2, [pc, #148]	; (8006e64 <HAL_DMA_Start_IT+0x4a4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00e      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <HAL_DMA_Start_IT+0x4a8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d009      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a22      	ldr	r2, [pc, #136]	; (8006e6c <HAL_DMA_Start_IT+0x4ac>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_DMA_Start_IT+0x430>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a21      	ldr	r2, [pc, #132]	; (8006e70 <HAL_DMA_Start_IT+0x4b0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d108      	bne.n	8006e02 <HAL_DMA_Start_IT+0x442>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e012      	b.n	8006e28 <HAL_DMA_Start_IT+0x468>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e009      	b.n	8006e28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40020010 	.word	0x40020010
 8006e38:	40020028 	.word	0x40020028
 8006e3c:	40020040 	.word	0x40020040
 8006e40:	40020058 	.word	0x40020058
 8006e44:	40020070 	.word	0x40020070
 8006e48:	40020088 	.word	0x40020088
 8006e4c:	400200a0 	.word	0x400200a0
 8006e50:	400200b8 	.word	0x400200b8
 8006e54:	40020410 	.word	0x40020410
 8006e58:	40020428 	.word	0x40020428
 8006e5c:	40020440 	.word	0x40020440
 8006e60:	40020458 	.word	0x40020458
 8006e64:	40020470 	.word	0x40020470
 8006e68:	40020488 	.word	0x40020488
 8006e6c:	400204a0 	.word	0x400204a0
 8006e70:	400204b8 	.word	0x400204b8
 8006e74:	58025408 	.word	0x58025408
 8006e78:	5802541c 	.word	0x5802541c
 8006e7c:	58025430 	.word	0x58025430
 8006e80:	58025444 	.word	0x58025444
 8006e84:	58025458 	.word	0x58025458
 8006e88:	5802546c 	.word	0x5802546c
 8006e8c:	58025480 	.word	0x58025480
 8006e90:	58025494 	.word	0x58025494

08006e94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e9c:	f7fe fede 	bl	8005c5c <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e2dc      	b.n	8007466 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d008      	beq.n	8006eca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2280      	movs	r2, #128	; 0x80
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e2cd      	b.n	8007466 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a76      	ldr	r2, [pc, #472]	; (80070a8 <HAL_DMA_Abort+0x214>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d04a      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a74      	ldr	r2, [pc, #464]	; (80070ac <HAL_DMA_Abort+0x218>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d045      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a73      	ldr	r2, [pc, #460]	; (80070b0 <HAL_DMA_Abort+0x21c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d040      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a71      	ldr	r2, [pc, #452]	; (80070b4 <HAL_DMA_Abort+0x220>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d03b      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a70      	ldr	r2, [pc, #448]	; (80070b8 <HAL_DMA_Abort+0x224>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d036      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a6e      	ldr	r2, [pc, #440]	; (80070bc <HAL_DMA_Abort+0x228>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d031      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a6d      	ldr	r2, [pc, #436]	; (80070c0 <HAL_DMA_Abort+0x22c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d02c      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a6b      	ldr	r2, [pc, #428]	; (80070c4 <HAL_DMA_Abort+0x230>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d027      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a6a      	ldr	r2, [pc, #424]	; (80070c8 <HAL_DMA_Abort+0x234>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d022      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a68      	ldr	r2, [pc, #416]	; (80070cc <HAL_DMA_Abort+0x238>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d01d      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a67      	ldr	r2, [pc, #412]	; (80070d0 <HAL_DMA_Abort+0x23c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d018      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a65      	ldr	r2, [pc, #404]	; (80070d4 <HAL_DMA_Abort+0x240>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a64      	ldr	r2, [pc, #400]	; (80070d8 <HAL_DMA_Abort+0x244>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00e      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a62      	ldr	r2, [pc, #392]	; (80070dc <HAL_DMA_Abort+0x248>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d009      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a61      	ldr	r2, [pc, #388]	; (80070e0 <HAL_DMA_Abort+0x24c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d004      	beq.n	8006f6a <HAL_DMA_Abort+0xd6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a5f      	ldr	r2, [pc, #380]	; (80070e4 <HAL_DMA_Abort+0x250>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d101      	bne.n	8006f6e <HAL_DMA_Abort+0xda>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <HAL_DMA_Abort+0xdc>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d013      	beq.n	8006f9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 021e 	bic.w	r2, r2, #30
 8006f82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	e00a      	b.n	8006fb2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 020e 	bic.w	r2, r2, #14
 8006faa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a3c      	ldr	r2, [pc, #240]	; (80070a8 <HAL_DMA_Abort+0x214>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d072      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a3a      	ldr	r2, [pc, #232]	; (80070ac <HAL_DMA_Abort+0x218>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d06d      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a39      	ldr	r2, [pc, #228]	; (80070b0 <HAL_DMA_Abort+0x21c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d068      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a37      	ldr	r2, [pc, #220]	; (80070b4 <HAL_DMA_Abort+0x220>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d063      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a36      	ldr	r2, [pc, #216]	; (80070b8 <HAL_DMA_Abort+0x224>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d05e      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a34      	ldr	r2, [pc, #208]	; (80070bc <HAL_DMA_Abort+0x228>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d059      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a33      	ldr	r2, [pc, #204]	; (80070c0 <HAL_DMA_Abort+0x22c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d054      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a31      	ldr	r2, [pc, #196]	; (80070c4 <HAL_DMA_Abort+0x230>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d04f      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a30      	ldr	r2, [pc, #192]	; (80070c8 <HAL_DMA_Abort+0x234>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d04a      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <HAL_DMA_Abort+0x238>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d045      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <HAL_DMA_Abort+0x23c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d040      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2b      	ldr	r2, [pc, #172]	; (80070d4 <HAL_DMA_Abort+0x240>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d03b      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a2a      	ldr	r2, [pc, #168]	; (80070d8 <HAL_DMA_Abort+0x244>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d036      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a28      	ldr	r2, [pc, #160]	; (80070dc <HAL_DMA_Abort+0x248>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d031      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a27      	ldr	r2, [pc, #156]	; (80070e0 <HAL_DMA_Abort+0x24c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d02c      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a25      	ldr	r2, [pc, #148]	; (80070e4 <HAL_DMA_Abort+0x250>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d027      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <HAL_DMA_Abort+0x254>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a22      	ldr	r2, [pc, #136]	; (80070ec <HAL_DMA_Abort+0x258>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01d      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a21      	ldr	r2, [pc, #132]	; (80070f0 <HAL_DMA_Abort+0x25c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <HAL_DMA_Abort+0x260>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <HAL_DMA_Abort+0x264>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1c      	ldr	r2, [pc, #112]	; (80070fc <HAL_DMA_Abort+0x268>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <HAL_DMA_Abort+0x26c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_DMA_Abort+0x20e>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a19      	ldr	r2, [pc, #100]	; (8007104 <HAL_DMA_Abort+0x270>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d132      	bne.n	8007108 <HAL_DMA_Abort+0x274>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e031      	b.n	800710a <HAL_DMA_Abort+0x276>
 80070a6:	bf00      	nop
 80070a8:	40020010 	.word	0x40020010
 80070ac:	40020028 	.word	0x40020028
 80070b0:	40020040 	.word	0x40020040
 80070b4:	40020058 	.word	0x40020058
 80070b8:	40020070 	.word	0x40020070
 80070bc:	40020088 	.word	0x40020088
 80070c0:	400200a0 	.word	0x400200a0
 80070c4:	400200b8 	.word	0x400200b8
 80070c8:	40020410 	.word	0x40020410
 80070cc:	40020428 	.word	0x40020428
 80070d0:	40020440 	.word	0x40020440
 80070d4:	40020458 	.word	0x40020458
 80070d8:	40020470 	.word	0x40020470
 80070dc:	40020488 	.word	0x40020488
 80070e0:	400204a0 	.word	0x400204a0
 80070e4:	400204b8 	.word	0x400204b8
 80070e8:	58025408 	.word	0x58025408
 80070ec:	5802541c 	.word	0x5802541c
 80070f0:	58025430 	.word	0x58025430
 80070f4:	58025444 	.word	0x58025444
 80070f8:	58025458 	.word	0x58025458
 80070fc:	5802546c 	.word	0x5802546c
 8007100:	58025480 	.word	0x58025480
 8007104:	58025494 	.word	0x58025494
 8007108:	2300      	movs	r3, #0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800711c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a6d      	ldr	r2, [pc, #436]	; (80072d8 <HAL_DMA_Abort+0x444>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d04a      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a6b      	ldr	r2, [pc, #428]	; (80072dc <HAL_DMA_Abort+0x448>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d045      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6a      	ldr	r2, [pc, #424]	; (80072e0 <HAL_DMA_Abort+0x44c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d040      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a68      	ldr	r2, [pc, #416]	; (80072e4 <HAL_DMA_Abort+0x450>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d03b      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a67      	ldr	r2, [pc, #412]	; (80072e8 <HAL_DMA_Abort+0x454>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d036      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a65      	ldr	r2, [pc, #404]	; (80072ec <HAL_DMA_Abort+0x458>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d031      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a64      	ldr	r2, [pc, #400]	; (80072f0 <HAL_DMA_Abort+0x45c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d02c      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a62      	ldr	r2, [pc, #392]	; (80072f4 <HAL_DMA_Abort+0x460>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d027      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a61      	ldr	r2, [pc, #388]	; (80072f8 <HAL_DMA_Abort+0x464>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d022      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a5f      	ldr	r2, [pc, #380]	; (80072fc <HAL_DMA_Abort+0x468>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01d      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a5e      	ldr	r2, [pc, #376]	; (8007300 <HAL_DMA_Abort+0x46c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d018      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5c      	ldr	r2, [pc, #368]	; (8007304 <HAL_DMA_Abort+0x470>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d013      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a5b      	ldr	r2, [pc, #364]	; (8007308 <HAL_DMA_Abort+0x474>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00e      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a59      	ldr	r2, [pc, #356]	; (800730c <HAL_DMA_Abort+0x478>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d009      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a58      	ldr	r2, [pc, #352]	; (8007310 <HAL_DMA_Abort+0x47c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d004      	beq.n	80071be <HAL_DMA_Abort+0x32a>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a56      	ldr	r2, [pc, #344]	; (8007314 <HAL_DMA_Abort+0x480>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d108      	bne.n	80071d0 <HAL_DMA_Abort+0x33c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e007      	b.n	80071e0 <HAL_DMA_Abort+0x34c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0201 	bic.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071e0:	e013      	b.n	800720a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071e2:	f7fe fd3b 	bl	8005c5c <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b05      	cmp	r3, #5
 80071ee:	d90c      	bls.n	800720a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2203      	movs	r2, #3
 80071fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e12d      	b.n	8007466 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2f      	ldr	r2, [pc, #188]	; (80072d8 <HAL_DMA_Abort+0x444>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d04a      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_DMA_Abort+0x448>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d045      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <HAL_DMA_Abort+0x44c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d040      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <HAL_DMA_Abort+0x450>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d03b      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a29      	ldr	r2, [pc, #164]	; (80072e8 <HAL_DMA_Abort+0x454>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d036      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a27      	ldr	r2, [pc, #156]	; (80072ec <HAL_DMA_Abort+0x458>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d031      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <HAL_DMA_Abort+0x45c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d02c      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <HAL_DMA_Abort+0x460>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d027      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a23      	ldr	r2, [pc, #140]	; (80072f8 <HAL_DMA_Abort+0x464>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a21      	ldr	r2, [pc, #132]	; (80072fc <HAL_DMA_Abort+0x468>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a20      	ldr	r2, [pc, #128]	; (8007300 <HAL_DMA_Abort+0x46c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <HAL_DMA_Abort+0x470>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1d      	ldr	r2, [pc, #116]	; (8007308 <HAL_DMA_Abort+0x474>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_DMA_Abort+0x478>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <HAL_DMA_Abort+0x47c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_DMA_Abort+0x422>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a18      	ldr	r2, [pc, #96]	; (8007314 <HAL_DMA_Abort+0x480>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d101      	bne.n	80072ba <HAL_DMA_Abort+0x426>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <HAL_DMA_Abort+0x428>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02b      	beq.n	8007318 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	223f      	movs	r2, #63	; 0x3f
 80072d0:	409a      	lsls	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	609a      	str	r2, [r3, #8]
 80072d6:	e02a      	b.n	800732e <HAL_DMA_Abort+0x49a>
 80072d8:	40020010 	.word	0x40020010
 80072dc:	40020028 	.word	0x40020028
 80072e0:	40020040 	.word	0x40020040
 80072e4:	40020058 	.word	0x40020058
 80072e8:	40020070 	.word	0x40020070
 80072ec:	40020088 	.word	0x40020088
 80072f0:	400200a0 	.word	0x400200a0
 80072f4:	400200b8 	.word	0x400200b8
 80072f8:	40020410 	.word	0x40020410
 80072fc:	40020428 	.word	0x40020428
 8007300:	40020440 	.word	0x40020440
 8007304:	40020458 	.word	0x40020458
 8007308:	40020470 	.word	0x40020470
 800730c:	40020488 	.word	0x40020488
 8007310:	400204a0 	.word	0x400204a0
 8007314:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	2201      	movs	r2, #1
 8007328:	409a      	lsls	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a4f      	ldr	r2, [pc, #316]	; (8007470 <HAL_DMA_Abort+0x5dc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d072      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a4d      	ldr	r2, [pc, #308]	; (8007474 <HAL_DMA_Abort+0x5e0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d06d      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a4c      	ldr	r2, [pc, #304]	; (8007478 <HAL_DMA_Abort+0x5e4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d068      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a4a      	ldr	r2, [pc, #296]	; (800747c <HAL_DMA_Abort+0x5e8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d063      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a49      	ldr	r2, [pc, #292]	; (8007480 <HAL_DMA_Abort+0x5ec>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d05e      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a47      	ldr	r2, [pc, #284]	; (8007484 <HAL_DMA_Abort+0x5f0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d059      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a46      	ldr	r2, [pc, #280]	; (8007488 <HAL_DMA_Abort+0x5f4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d054      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a44      	ldr	r2, [pc, #272]	; (800748c <HAL_DMA_Abort+0x5f8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d04f      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a43      	ldr	r2, [pc, #268]	; (8007490 <HAL_DMA_Abort+0x5fc>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d04a      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a41      	ldr	r2, [pc, #260]	; (8007494 <HAL_DMA_Abort+0x600>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d045      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a40      	ldr	r2, [pc, #256]	; (8007498 <HAL_DMA_Abort+0x604>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d040      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a3e      	ldr	r2, [pc, #248]	; (800749c <HAL_DMA_Abort+0x608>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d03b      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3d      	ldr	r2, [pc, #244]	; (80074a0 <HAL_DMA_Abort+0x60c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d036      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a3b      	ldr	r2, [pc, #236]	; (80074a4 <HAL_DMA_Abort+0x610>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d031      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a3a      	ldr	r2, [pc, #232]	; (80074a8 <HAL_DMA_Abort+0x614>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d02c      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a38      	ldr	r2, [pc, #224]	; (80074ac <HAL_DMA_Abort+0x618>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d027      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a37      	ldr	r2, [pc, #220]	; (80074b0 <HAL_DMA_Abort+0x61c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d022      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a35      	ldr	r2, [pc, #212]	; (80074b4 <HAL_DMA_Abort+0x620>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01d      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a34      	ldr	r2, [pc, #208]	; (80074b8 <HAL_DMA_Abort+0x624>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d018      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a32      	ldr	r2, [pc, #200]	; (80074bc <HAL_DMA_Abort+0x628>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a31      	ldr	r2, [pc, #196]	; (80074c0 <HAL_DMA_Abort+0x62c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00e      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a2f      	ldr	r2, [pc, #188]	; (80074c4 <HAL_DMA_Abort+0x630>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2e      	ldr	r2, [pc, #184]	; (80074c8 <HAL_DMA_Abort+0x634>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <HAL_DMA_Abort+0x58a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a2c      	ldr	r2, [pc, #176]	; (80074cc <HAL_DMA_Abort+0x638>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <HAL_DMA_Abort+0x58e>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <HAL_DMA_Abort+0x590>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d015      	beq.n	8007454 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007430:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00c      	beq.n	8007454 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007448:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007452:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40020010 	.word	0x40020010
 8007474:	40020028 	.word	0x40020028
 8007478:	40020040 	.word	0x40020040
 800747c:	40020058 	.word	0x40020058
 8007480:	40020070 	.word	0x40020070
 8007484:	40020088 	.word	0x40020088
 8007488:	400200a0 	.word	0x400200a0
 800748c:	400200b8 	.word	0x400200b8
 8007490:	40020410 	.word	0x40020410
 8007494:	40020428 	.word	0x40020428
 8007498:	40020440 	.word	0x40020440
 800749c:	40020458 	.word	0x40020458
 80074a0:	40020470 	.word	0x40020470
 80074a4:	40020488 	.word	0x40020488
 80074a8:	400204a0 	.word	0x400204a0
 80074ac:	400204b8 	.word	0x400204b8
 80074b0:	58025408 	.word	0x58025408
 80074b4:	5802541c 	.word	0x5802541c
 80074b8:	58025430 	.word	0x58025430
 80074bc:	58025444 	.word	0x58025444
 80074c0:	58025458 	.word	0x58025458
 80074c4:	5802546c 	.word	0x5802546c
 80074c8:	58025480 	.word	0x58025480
 80074cc:	58025494 	.word	0x58025494

080074d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e205      	b.n	80078ee <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d004      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2280      	movs	r2, #128	; 0x80
 80074f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e1fa      	b.n	80078ee <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a8c      	ldr	r2, [pc, #560]	; (8007730 <HAL_DMA_Abort_IT+0x260>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d04a      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a8b      	ldr	r2, [pc, #556]	; (8007734 <HAL_DMA_Abort_IT+0x264>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d045      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a89      	ldr	r2, [pc, #548]	; (8007738 <HAL_DMA_Abort_IT+0x268>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d040      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a88      	ldr	r2, [pc, #544]	; (800773c <HAL_DMA_Abort_IT+0x26c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d03b      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a86      	ldr	r2, [pc, #536]	; (8007740 <HAL_DMA_Abort_IT+0x270>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d036      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a85      	ldr	r2, [pc, #532]	; (8007744 <HAL_DMA_Abort_IT+0x274>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d031      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a83      	ldr	r2, [pc, #524]	; (8007748 <HAL_DMA_Abort_IT+0x278>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d02c      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a82      	ldr	r2, [pc, #520]	; (800774c <HAL_DMA_Abort_IT+0x27c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d027      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a80      	ldr	r2, [pc, #512]	; (8007750 <HAL_DMA_Abort_IT+0x280>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d022      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a7f      	ldr	r2, [pc, #508]	; (8007754 <HAL_DMA_Abort_IT+0x284>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d01d      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a7d      	ldr	r2, [pc, #500]	; (8007758 <HAL_DMA_Abort_IT+0x288>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d018      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a7c      	ldr	r2, [pc, #496]	; (800775c <HAL_DMA_Abort_IT+0x28c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a7a      	ldr	r2, [pc, #488]	; (8007760 <HAL_DMA_Abort_IT+0x290>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00e      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a79      	ldr	r2, [pc, #484]	; (8007764 <HAL_DMA_Abort_IT+0x294>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a77      	ldr	r2, [pc, #476]	; (8007768 <HAL_DMA_Abort_IT+0x298>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d004      	beq.n	8007598 <HAL_DMA_Abort_IT+0xc8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a76      	ldr	r2, [pc, #472]	; (800776c <HAL_DMA_Abort_IT+0x29c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d101      	bne.n	800759c <HAL_DMA_Abort_IT+0xcc>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <HAL_DMA_Abort_IT+0xce>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d065      	beq.n	800766e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2204      	movs	r2, #4
 80075a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a60      	ldr	r2, [pc, #384]	; (8007730 <HAL_DMA_Abort_IT+0x260>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d04a      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a5e      	ldr	r2, [pc, #376]	; (8007734 <HAL_DMA_Abort_IT+0x264>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d045      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a5d      	ldr	r2, [pc, #372]	; (8007738 <HAL_DMA_Abort_IT+0x268>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d040      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a5b      	ldr	r2, [pc, #364]	; (800773c <HAL_DMA_Abort_IT+0x26c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d03b      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a5a      	ldr	r2, [pc, #360]	; (8007740 <HAL_DMA_Abort_IT+0x270>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d036      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a58      	ldr	r2, [pc, #352]	; (8007744 <HAL_DMA_Abort_IT+0x274>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d031      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a57      	ldr	r2, [pc, #348]	; (8007748 <HAL_DMA_Abort_IT+0x278>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d02c      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a55      	ldr	r2, [pc, #340]	; (800774c <HAL_DMA_Abort_IT+0x27c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d027      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a54      	ldr	r2, [pc, #336]	; (8007750 <HAL_DMA_Abort_IT+0x280>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d022      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a52      	ldr	r2, [pc, #328]	; (8007754 <HAL_DMA_Abort_IT+0x284>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01d      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a51      	ldr	r2, [pc, #324]	; (8007758 <HAL_DMA_Abort_IT+0x288>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d018      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a4f      	ldr	r2, [pc, #316]	; (800775c <HAL_DMA_Abort_IT+0x28c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a4e      	ldr	r2, [pc, #312]	; (8007760 <HAL_DMA_Abort_IT+0x290>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a4c      	ldr	r2, [pc, #304]	; (8007764 <HAL_DMA_Abort_IT+0x294>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d009      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a4b      	ldr	r2, [pc, #300]	; (8007768 <HAL_DMA_Abort_IT+0x298>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_DMA_Abort_IT+0x17a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a49      	ldr	r2, [pc, #292]	; (800776c <HAL_DMA_Abort_IT+0x29c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d108      	bne.n	800765c <HAL_DMA_Abort_IT+0x18c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0201 	bic.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e147      	b.n	80078ec <HAL_DMA_Abort_IT+0x41c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e13e      	b.n	80078ec <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 020e 	bic.w	r2, r2, #14
 800767c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <HAL_DMA_Abort_IT+0x260>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d04a      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a29      	ldr	r2, [pc, #164]	; (8007734 <HAL_DMA_Abort_IT+0x264>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d045      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a28      	ldr	r2, [pc, #160]	; (8007738 <HAL_DMA_Abort_IT+0x268>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d040      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a26      	ldr	r2, [pc, #152]	; (800773c <HAL_DMA_Abort_IT+0x26c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d03b      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a25      	ldr	r2, [pc, #148]	; (8007740 <HAL_DMA_Abort_IT+0x270>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d036      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a23      	ldr	r2, [pc, #140]	; (8007744 <HAL_DMA_Abort_IT+0x274>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d031      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a22      	ldr	r2, [pc, #136]	; (8007748 <HAL_DMA_Abort_IT+0x278>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d02c      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a20      	ldr	r2, [pc, #128]	; (800774c <HAL_DMA_Abort_IT+0x27c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d027      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1f      	ldr	r2, [pc, #124]	; (8007750 <HAL_DMA_Abort_IT+0x280>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d022      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1d      	ldr	r2, [pc, #116]	; (8007754 <HAL_DMA_Abort_IT+0x284>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d01d      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1c      	ldr	r2, [pc, #112]	; (8007758 <HAL_DMA_Abort_IT+0x288>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d018      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1a      	ldr	r2, [pc, #104]	; (800775c <HAL_DMA_Abort_IT+0x28c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a19      	ldr	r2, [pc, #100]	; (8007760 <HAL_DMA_Abort_IT+0x290>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00e      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a17      	ldr	r2, [pc, #92]	; (8007764 <HAL_DMA_Abort_IT+0x294>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d009      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a16      	ldr	r2, [pc, #88]	; (8007768 <HAL_DMA_Abort_IT+0x298>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d004      	beq.n	800771e <HAL_DMA_Abort_IT+0x24e>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a14      	ldr	r2, [pc, #80]	; (800776c <HAL_DMA_Abort_IT+0x29c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d128      	bne.n	8007770 <HAL_DMA_Abort_IT+0x2a0>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0201 	bic.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e027      	b.n	8007780 <HAL_DMA_Abort_IT+0x2b0>
 8007730:	40020010 	.word	0x40020010
 8007734:	40020028 	.word	0x40020028
 8007738:	40020040 	.word	0x40020040
 800773c:	40020058 	.word	0x40020058
 8007740:	40020070 	.word	0x40020070
 8007744:	40020088 	.word	0x40020088
 8007748:	400200a0 	.word	0x400200a0
 800774c:	400200b8 	.word	0x400200b8
 8007750:	40020410 	.word	0x40020410
 8007754:	40020428 	.word	0x40020428
 8007758:	40020440 	.word	0x40020440
 800775c:	40020458 	.word	0x40020458
 8007760:	40020470 	.word	0x40020470
 8007764:	40020488 	.word	0x40020488
 8007768:	400204a0 	.word	0x400204a0
 800776c:	400204b8 	.word	0x400204b8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a5c      	ldr	r2, [pc, #368]	; (80078f8 <HAL_DMA_Abort_IT+0x428>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d072      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a5b      	ldr	r2, [pc, #364]	; (80078fc <HAL_DMA_Abort_IT+0x42c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d06d      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a59      	ldr	r2, [pc, #356]	; (8007900 <HAL_DMA_Abort_IT+0x430>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d068      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a58      	ldr	r2, [pc, #352]	; (8007904 <HAL_DMA_Abort_IT+0x434>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d063      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a56      	ldr	r2, [pc, #344]	; (8007908 <HAL_DMA_Abort_IT+0x438>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d05e      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a55      	ldr	r2, [pc, #340]	; (800790c <HAL_DMA_Abort_IT+0x43c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d059      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a53      	ldr	r2, [pc, #332]	; (8007910 <HAL_DMA_Abort_IT+0x440>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d054      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a52      	ldr	r2, [pc, #328]	; (8007914 <HAL_DMA_Abort_IT+0x444>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d04f      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a50      	ldr	r2, [pc, #320]	; (8007918 <HAL_DMA_Abort_IT+0x448>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d04a      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a4f      	ldr	r2, [pc, #316]	; (800791c <HAL_DMA_Abort_IT+0x44c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d045      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a4d      	ldr	r2, [pc, #308]	; (8007920 <HAL_DMA_Abort_IT+0x450>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d040      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a4c      	ldr	r2, [pc, #304]	; (8007924 <HAL_DMA_Abort_IT+0x454>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d03b      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a4a      	ldr	r2, [pc, #296]	; (8007928 <HAL_DMA_Abort_IT+0x458>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d036      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a49      	ldr	r2, [pc, #292]	; (800792c <HAL_DMA_Abort_IT+0x45c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d031      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a47      	ldr	r2, [pc, #284]	; (8007930 <HAL_DMA_Abort_IT+0x460>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d02c      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a46      	ldr	r2, [pc, #280]	; (8007934 <HAL_DMA_Abort_IT+0x464>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d027      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a44      	ldr	r2, [pc, #272]	; (8007938 <HAL_DMA_Abort_IT+0x468>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d022      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a43      	ldr	r2, [pc, #268]	; (800793c <HAL_DMA_Abort_IT+0x46c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d01d      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a41      	ldr	r2, [pc, #260]	; (8007940 <HAL_DMA_Abort_IT+0x470>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d018      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a40      	ldr	r2, [pc, #256]	; (8007944 <HAL_DMA_Abort_IT+0x474>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d013      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a3e      	ldr	r2, [pc, #248]	; (8007948 <HAL_DMA_Abort_IT+0x478>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00e      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a3d      	ldr	r2, [pc, #244]	; (800794c <HAL_DMA_Abort_IT+0x47c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d009      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a3b      	ldr	r2, [pc, #236]	; (8007950 <HAL_DMA_Abort_IT+0x480>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d004      	beq.n	8007870 <HAL_DMA_Abort_IT+0x3a0>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a3a      	ldr	r2, [pc, #232]	; (8007954 <HAL_DMA_Abort_IT+0x484>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d101      	bne.n	8007874 <HAL_DMA_Abort_IT+0x3a4>
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <HAL_DMA_Abort_IT+0x3a6>
 8007874:	2300      	movs	r3, #0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d028      	beq.n	80078cc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007888:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	2201      	movs	r2, #1
 800789a:	409a      	lsls	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40020010 	.word	0x40020010
 80078fc:	40020028 	.word	0x40020028
 8007900:	40020040 	.word	0x40020040
 8007904:	40020058 	.word	0x40020058
 8007908:	40020070 	.word	0x40020070
 800790c:	40020088 	.word	0x40020088
 8007910:	400200a0 	.word	0x400200a0
 8007914:	400200b8 	.word	0x400200b8
 8007918:	40020410 	.word	0x40020410
 800791c:	40020428 	.word	0x40020428
 8007920:	40020440 	.word	0x40020440
 8007924:	40020458 	.word	0x40020458
 8007928:	40020470 	.word	0x40020470
 800792c:	40020488 	.word	0x40020488
 8007930:	400204a0 	.word	0x400204a0
 8007934:	400204b8 	.word	0x400204b8
 8007938:	58025408 	.word	0x58025408
 800793c:	5802541c 	.word	0x5802541c
 8007940:	58025430 	.word	0x58025430
 8007944:	58025444 	.word	0x58025444
 8007948:	58025458 	.word	0x58025458
 800794c:	5802546c 	.word	0x5802546c
 8007950:	58025480 	.word	0x58025480
 8007954:	58025494 	.word	0x58025494

08007958 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007964:	4b67      	ldr	r3, [pc, #412]	; (8007b04 <HAL_DMA_IRQHandler+0x1ac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a67      	ldr	r2, [pc, #412]	; (8007b08 <HAL_DMA_IRQHandler+0x1b0>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	0a9b      	lsrs	r3, r3, #10
 8007970:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007976:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a5f      	ldr	r2, [pc, #380]	; (8007b0c <HAL_DMA_IRQHandler+0x1b4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d04a      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a5d      	ldr	r2, [pc, #372]	; (8007b10 <HAL_DMA_IRQHandler+0x1b8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d045      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a5c      	ldr	r2, [pc, #368]	; (8007b14 <HAL_DMA_IRQHandler+0x1bc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d040      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5a      	ldr	r2, [pc, #360]	; (8007b18 <HAL_DMA_IRQHandler+0x1c0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d03b      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a59      	ldr	r2, [pc, #356]	; (8007b1c <HAL_DMA_IRQHandler+0x1c4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d036      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <HAL_DMA_IRQHandler+0x1c8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d031      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a56      	ldr	r2, [pc, #344]	; (8007b24 <HAL_DMA_IRQHandler+0x1cc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d02c      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a54      	ldr	r2, [pc, #336]	; (8007b28 <HAL_DMA_IRQHandler+0x1d0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d027      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a53      	ldr	r2, [pc, #332]	; (8007b2c <HAL_DMA_IRQHandler+0x1d4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d022      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a51      	ldr	r2, [pc, #324]	; (8007b30 <HAL_DMA_IRQHandler+0x1d8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01d      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a50      	ldr	r2, [pc, #320]	; (8007b34 <HAL_DMA_IRQHandler+0x1dc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d018      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a4e      	ldr	r2, [pc, #312]	; (8007b38 <HAL_DMA_IRQHandler+0x1e0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a4d      	ldr	r2, [pc, #308]	; (8007b3c <HAL_DMA_IRQHandler+0x1e4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00e      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a4b      	ldr	r2, [pc, #300]	; (8007b40 <HAL_DMA_IRQHandler+0x1e8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d009      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a4a      	ldr	r2, [pc, #296]	; (8007b44 <HAL_DMA_IRQHandler+0x1ec>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d004      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a48      	ldr	r2, [pc, #288]	; (8007b48 <HAL_DMA_IRQHandler+0x1f0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d101      	bne.n	8007a2e <HAL_DMA_IRQHandler+0xd6>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <HAL_DMA_IRQHandler+0xd8>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 842b 	beq.w	800828c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2208      	movs	r2, #8
 8007a40:	409a      	lsls	r2, r3
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80a2 	beq.w	8007b90 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a2e      	ldr	r2, [pc, #184]	; (8007b0c <HAL_DMA_IRQHandler+0x1b4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d04a      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a2d      	ldr	r2, [pc, #180]	; (8007b10 <HAL_DMA_IRQHandler+0x1b8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d045      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2b      	ldr	r2, [pc, #172]	; (8007b14 <HAL_DMA_IRQHandler+0x1bc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d040      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <HAL_DMA_IRQHandler+0x1c0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d03b      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <HAL_DMA_IRQHandler+0x1c4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d036      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <HAL_DMA_IRQHandler+0x1c8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d031      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a25      	ldr	r2, [pc, #148]	; (8007b24 <HAL_DMA_IRQHandler+0x1cc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d02c      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a24      	ldr	r2, [pc, #144]	; (8007b28 <HAL_DMA_IRQHandler+0x1d0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d027      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a22      	ldr	r2, [pc, #136]	; (8007b2c <HAL_DMA_IRQHandler+0x1d4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d022      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	; (8007b30 <HAL_DMA_IRQHandler+0x1d8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d01d      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1f      	ldr	r2, [pc, #124]	; (8007b34 <HAL_DMA_IRQHandler+0x1dc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d018      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1e      	ldr	r2, [pc, #120]	; (8007b38 <HAL_DMA_IRQHandler+0x1e0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d013      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1c      	ldr	r2, [pc, #112]	; (8007b3c <HAL_DMA_IRQHandler+0x1e4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00e      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <HAL_DMA_IRQHandler+0x1e8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d009      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a19      	ldr	r2, [pc, #100]	; (8007b44 <HAL_DMA_IRQHandler+0x1ec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d004      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <HAL_DMA_IRQHandler+0x1f0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d12f      	bne.n	8007b4c <HAL_DMA_IRQHandler+0x1f4>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bf14      	ite	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	2300      	moveq	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e02e      	b.n	8007b60 <HAL_DMA_IRQHandler+0x208>
 8007b02:	bf00      	nop
 8007b04:	2400002c 	.word	0x2400002c
 8007b08:	1b4e81b5 	.word	0x1b4e81b5
 8007b0c:	40020010 	.word	0x40020010
 8007b10:	40020028 	.word	0x40020028
 8007b14:	40020040 	.word	0x40020040
 8007b18:	40020058 	.word	0x40020058
 8007b1c:	40020070 	.word	0x40020070
 8007b20:	40020088 	.word	0x40020088
 8007b24:	400200a0 	.word	0x400200a0
 8007b28:	400200b8 	.word	0x400200b8
 8007b2c:	40020410 	.word	0x40020410
 8007b30:	40020428 	.word	0x40020428
 8007b34:	40020440 	.word	0x40020440
 8007b38:	40020458 	.word	0x40020458
 8007b3c:	40020470 	.word	0x40020470
 8007b40:	40020488 	.word	0x40020488
 8007b44:	400204a0 	.word	0x400204a0
 8007b48:	400204b8 	.word	0x400204b8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	bf14      	ite	ne
 8007b5a:	2301      	movne	r3, #1
 8007b5c:	2300      	moveq	r3, #0
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d015      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0204 	bic.w	r2, r2, #4
 8007b72:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	409a      	lsls	r2, r3
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	f043 0201 	orr.w	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b94:	f003 031f 	and.w	r3, r3, #31
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d06e      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a69      	ldr	r2, [pc, #420]	; (8007d50 <HAL_DMA_IRQHandler+0x3f8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d04a      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a67      	ldr	r2, [pc, #412]	; (8007d54 <HAL_DMA_IRQHandler+0x3fc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d045      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a66      	ldr	r2, [pc, #408]	; (8007d58 <HAL_DMA_IRQHandler+0x400>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d040      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a64      	ldr	r2, [pc, #400]	; (8007d5c <HAL_DMA_IRQHandler+0x404>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d03b      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a63      	ldr	r2, [pc, #396]	; (8007d60 <HAL_DMA_IRQHandler+0x408>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d036      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a61      	ldr	r2, [pc, #388]	; (8007d64 <HAL_DMA_IRQHandler+0x40c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d031      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a60      	ldr	r2, [pc, #384]	; (8007d68 <HAL_DMA_IRQHandler+0x410>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d02c      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a5e      	ldr	r2, [pc, #376]	; (8007d6c <HAL_DMA_IRQHandler+0x414>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d027      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a5d      	ldr	r2, [pc, #372]	; (8007d70 <HAL_DMA_IRQHandler+0x418>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d022      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a5b      	ldr	r2, [pc, #364]	; (8007d74 <HAL_DMA_IRQHandler+0x41c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01d      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a5a      	ldr	r2, [pc, #360]	; (8007d78 <HAL_DMA_IRQHandler+0x420>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d018      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a58      	ldr	r2, [pc, #352]	; (8007d7c <HAL_DMA_IRQHandler+0x424>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a57      	ldr	r2, [pc, #348]	; (8007d80 <HAL_DMA_IRQHandler+0x428>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00e      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a55      	ldr	r2, [pc, #340]	; (8007d84 <HAL_DMA_IRQHandler+0x42c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d009      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a54      	ldr	r2, [pc, #336]	; (8007d88 <HAL_DMA_IRQHandler+0x430>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d004      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a52      	ldr	r2, [pc, #328]	; (8007d8c <HAL_DMA_IRQHandler+0x434>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d10a      	bne.n	8007c5c <HAL_DMA_IRQHandler+0x304>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	bf14      	ite	ne
 8007c54:	2301      	movne	r3, #1
 8007c56:	2300      	moveq	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	e003      	b.n	8007c64 <HAL_DMA_IRQHandler+0x30c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2201      	movs	r2, #1
 8007c72:	409a      	lsls	r2, r3
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	f043 0202 	orr.w	r2, r3, #2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 808f 	beq.w	8007db8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2c      	ldr	r2, [pc, #176]	; (8007d50 <HAL_DMA_IRQHandler+0x3f8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d04a      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a2a      	ldr	r2, [pc, #168]	; (8007d54 <HAL_DMA_IRQHandler+0x3fc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d045      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a29      	ldr	r2, [pc, #164]	; (8007d58 <HAL_DMA_IRQHandler+0x400>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d040      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a27      	ldr	r2, [pc, #156]	; (8007d5c <HAL_DMA_IRQHandler+0x404>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d03b      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a26      	ldr	r2, [pc, #152]	; (8007d60 <HAL_DMA_IRQHandler+0x408>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d036      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a24      	ldr	r2, [pc, #144]	; (8007d64 <HAL_DMA_IRQHandler+0x40c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d031      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <HAL_DMA_IRQHandler+0x410>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d02c      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a21      	ldr	r2, [pc, #132]	; (8007d6c <HAL_DMA_IRQHandler+0x414>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d027      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <HAL_DMA_IRQHandler+0x418>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d022      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1e      	ldr	r2, [pc, #120]	; (8007d74 <HAL_DMA_IRQHandler+0x41c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d01d      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_DMA_IRQHandler+0x420>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d018      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <HAL_DMA_IRQHandler+0x424>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d013      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <HAL_DMA_IRQHandler+0x428>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00e      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <HAL_DMA_IRQHandler+0x42c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d009      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_DMA_IRQHandler+0x430>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <HAL_DMA_IRQHandler+0x434>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d12a      	bne.n	8007d90 <HAL_DMA_IRQHandler+0x438>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf14      	ite	ne
 8007d48:	2301      	movne	r3, #1
 8007d4a:	2300      	moveq	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	e023      	b.n	8007d98 <HAL_DMA_IRQHandler+0x440>
 8007d50:	40020010 	.word	0x40020010
 8007d54:	40020028 	.word	0x40020028
 8007d58:	40020040 	.word	0x40020040
 8007d5c:	40020058 	.word	0x40020058
 8007d60:	40020070 	.word	0x40020070
 8007d64:	40020088 	.word	0x40020088
 8007d68:	400200a0 	.word	0x400200a0
 8007d6c:	400200b8 	.word	0x400200b8
 8007d70:	40020410 	.word	0x40020410
 8007d74:	40020428 	.word	0x40020428
 8007d78:	40020440 	.word	0x40020440
 8007d7c:	40020458 	.word	0x40020458
 8007d80:	40020470 	.word	0x40020470
 8007d84:	40020488 	.word	0x40020488
 8007d88:	400204a0 	.word	0x400204a0
 8007d8c:	400204b8 	.word	0x400204b8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2300      	movs	r3, #0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00d      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da0:	f003 031f 	and.w	r3, r3, #31
 8007da4:	2204      	movs	r2, #4
 8007da6:	409a      	lsls	r2, r3
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db0:	f043 0204 	orr.w	r2, r3, #4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	2210      	movs	r2, #16
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80a6 	beq.w	8007f1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a85      	ldr	r2, [pc, #532]	; (8007fe8 <HAL_DMA_IRQHandler+0x690>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d04a      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a83      	ldr	r2, [pc, #524]	; (8007fec <HAL_DMA_IRQHandler+0x694>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d045      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a82      	ldr	r2, [pc, #520]	; (8007ff0 <HAL_DMA_IRQHandler+0x698>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d040      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a80      	ldr	r2, [pc, #512]	; (8007ff4 <HAL_DMA_IRQHandler+0x69c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d03b      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a7f      	ldr	r2, [pc, #508]	; (8007ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d036      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a7d      	ldr	r2, [pc, #500]	; (8007ffc <HAL_DMA_IRQHandler+0x6a4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d031      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a7c      	ldr	r2, [pc, #496]	; (8008000 <HAL_DMA_IRQHandler+0x6a8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d02c      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a7a      	ldr	r2, [pc, #488]	; (8008004 <HAL_DMA_IRQHandler+0x6ac>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d027      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a79      	ldr	r2, [pc, #484]	; (8008008 <HAL_DMA_IRQHandler+0x6b0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d022      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a77      	ldr	r2, [pc, #476]	; (800800c <HAL_DMA_IRQHandler+0x6b4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d01d      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a76      	ldr	r2, [pc, #472]	; (8008010 <HAL_DMA_IRQHandler+0x6b8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d018      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a74      	ldr	r2, [pc, #464]	; (8008014 <HAL_DMA_IRQHandler+0x6bc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d013      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a73      	ldr	r2, [pc, #460]	; (8008018 <HAL_DMA_IRQHandler+0x6c0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00e      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a71      	ldr	r2, [pc, #452]	; (800801c <HAL_DMA_IRQHandler+0x6c4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d009      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a70      	ldr	r2, [pc, #448]	; (8008020 <HAL_DMA_IRQHandler+0x6c8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6e      	ldr	r2, [pc, #440]	; (8008024 <HAL_DMA_IRQHandler+0x6cc>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d10a      	bne.n	8007e84 <HAL_DMA_IRQHandler+0x52c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf14      	ite	ne
 8007e7c:	2301      	movne	r3, #1
 8007e7e:	2300      	moveq	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	e009      	b.n	8007e98 <HAL_DMA_IRQHandler+0x540>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bf14      	ite	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	2300      	moveq	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d03e      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea0:	f003 031f 	and.w	r3, r3, #31
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d018      	beq.n	8007eec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d108      	bne.n	8007eda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d024      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
 8007ed8:	e01f      	b.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01b      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	e016      	b.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0208 	bic.w	r2, r2, #8
 8007f08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2220      	movs	r2, #32
 8007f24:	409a      	lsls	r2, r3
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8110 	beq.w	8008150 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2c      	ldr	r2, [pc, #176]	; (8007fe8 <HAL_DMA_IRQHandler+0x690>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d04a      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a2b      	ldr	r2, [pc, #172]	; (8007fec <HAL_DMA_IRQHandler+0x694>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d045      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a29      	ldr	r2, [pc, #164]	; (8007ff0 <HAL_DMA_IRQHandler+0x698>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d040      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a28      	ldr	r2, [pc, #160]	; (8007ff4 <HAL_DMA_IRQHandler+0x69c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d03b      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a26      	ldr	r2, [pc, #152]	; (8007ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d036      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a25      	ldr	r2, [pc, #148]	; (8007ffc <HAL_DMA_IRQHandler+0x6a4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d031      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a23      	ldr	r2, [pc, #140]	; (8008000 <HAL_DMA_IRQHandler+0x6a8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d02c      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a22      	ldr	r2, [pc, #136]	; (8008004 <HAL_DMA_IRQHandler+0x6ac>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d027      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a20      	ldr	r2, [pc, #128]	; (8008008 <HAL_DMA_IRQHandler+0x6b0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1f      	ldr	r2, [pc, #124]	; (800800c <HAL_DMA_IRQHandler+0x6b4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d01d      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1d      	ldr	r2, [pc, #116]	; (8008010 <HAL_DMA_IRQHandler+0x6b8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	; (8008014 <HAL_DMA_IRQHandler+0x6bc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1a      	ldr	r2, [pc, #104]	; (8008018 <HAL_DMA_IRQHandler+0x6c0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a19      	ldr	r2, [pc, #100]	; (800801c <HAL_DMA_IRQHandler+0x6c4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a17      	ldr	r2, [pc, #92]	; (8008020 <HAL_DMA_IRQHandler+0x6c8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a16      	ldr	r2, [pc, #88]	; (8008024 <HAL_DMA_IRQHandler+0x6cc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d12b      	bne.n	8008028 <HAL_DMA_IRQHandler+0x6d0>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0310 	and.w	r3, r3, #16
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf14      	ite	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	e02a      	b.n	800803c <HAL_DMA_IRQHandler+0x6e4>
 8007fe6:	bf00      	nop
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	bf14      	ite	ne
 8008036:	2301      	movne	r3, #1
 8008038:	2300      	moveq	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8087 	beq.w	8008150 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008046:	f003 031f 	and.w	r3, r3, #31
 800804a:	2220      	movs	r2, #32
 800804c:	409a      	lsls	r2, r3
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b04      	cmp	r3, #4
 800805c:	d139      	bne.n	80080d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0216 	bic.w	r2, r2, #22
 800806c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800807c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <HAL_DMA_IRQHandler+0x736>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0208 	bic.w	r2, r2, #8
 800809c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	223f      	movs	r2, #63	; 0x3f
 80080a8:	409a      	lsls	r2, r3
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 834a 	beq.w	800875c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
          }
          return;
 80080d0:	e344      	b.n	800875c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d018      	beq.n	8008112 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d108      	bne.n	8008100 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d02c      	beq.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	e027      	b.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d023      	beq.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
 8008110:	e01e      	b.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10f      	bne.n	8008140 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0210 	bic.w	r2, r2, #16
 800812e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 8306 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8088 	beq.w	8008278 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2204      	movs	r2, #4
 800816c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a7a      	ldr	r2, [pc, #488]	; (8008360 <HAL_DMA_IRQHandler+0xa08>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d04a      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a79      	ldr	r2, [pc, #484]	; (8008364 <HAL_DMA_IRQHandler+0xa0c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d045      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a77      	ldr	r2, [pc, #476]	; (8008368 <HAL_DMA_IRQHandler+0xa10>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d040      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a76      	ldr	r2, [pc, #472]	; (800836c <HAL_DMA_IRQHandler+0xa14>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d03b      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a74      	ldr	r2, [pc, #464]	; (8008370 <HAL_DMA_IRQHandler+0xa18>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d036      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a73      	ldr	r2, [pc, #460]	; (8008374 <HAL_DMA_IRQHandler+0xa1c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d031      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a71      	ldr	r2, [pc, #452]	; (8008378 <HAL_DMA_IRQHandler+0xa20>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d02c      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a70      	ldr	r2, [pc, #448]	; (800837c <HAL_DMA_IRQHandler+0xa24>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d027      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a6e      	ldr	r2, [pc, #440]	; (8008380 <HAL_DMA_IRQHandler+0xa28>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d022      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a6d      	ldr	r2, [pc, #436]	; (8008384 <HAL_DMA_IRQHandler+0xa2c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d01d      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a6b      	ldr	r2, [pc, #428]	; (8008388 <HAL_DMA_IRQHandler+0xa30>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d018      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a6a      	ldr	r2, [pc, #424]	; (800838c <HAL_DMA_IRQHandler+0xa34>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a68      	ldr	r2, [pc, #416]	; (8008390 <HAL_DMA_IRQHandler+0xa38>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00e      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a67      	ldr	r2, [pc, #412]	; (8008394 <HAL_DMA_IRQHandler+0xa3c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d009      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a65      	ldr	r2, [pc, #404]	; (8008398 <HAL_DMA_IRQHandler+0xa40>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a64      	ldr	r2, [pc, #400]	; (800839c <HAL_DMA_IRQHandler+0xa44>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d108      	bne.n	8008222 <HAL_DMA_IRQHandler+0x8ca>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0201 	bic.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e007      	b.n	8008232 <HAL_DMA_IRQHandler+0x8da>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	429a      	cmp	r2, r3
 800823c:	d307      	bcc.n	800824e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f2      	bne.n	8008232 <HAL_DMA_IRQHandler+0x8da>
 800824c:	e000      	b.n	8008250 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800824e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d004      	beq.n	8008268 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2203      	movs	r2, #3
 8008262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008266:	e003      	b.n	8008270 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8272 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
 800828a:	e26c      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a43      	ldr	r2, [pc, #268]	; (80083a0 <HAL_DMA_IRQHandler+0xa48>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d022      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a42      	ldr	r2, [pc, #264]	; (80083a4 <HAL_DMA_IRQHandler+0xa4c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d01d      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a40      	ldr	r2, [pc, #256]	; (80083a8 <HAL_DMA_IRQHandler+0xa50>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d018      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a3f      	ldr	r2, [pc, #252]	; (80083ac <HAL_DMA_IRQHandler+0xa54>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d013      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a3d      	ldr	r2, [pc, #244]	; (80083b0 <HAL_DMA_IRQHandler+0xa58>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00e      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <HAL_DMA_IRQHandler+0xa5c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d009      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a3a      	ldr	r2, [pc, #232]	; (80083b8 <HAL_DMA_IRQHandler+0xa60>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a39      	ldr	r2, [pc, #228]	; (80083bc <HAL_DMA_IRQHandler+0xa64>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d101      	bne.n	80082e0 <HAL_DMA_IRQHandler+0x988>
 80082dc:	2301      	movs	r3, #1
 80082de:	e000      	b.n	80082e2 <HAL_DMA_IRQHandler+0x98a>
 80082e0:	2300      	movs	r3, #0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 823f 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	2204      	movs	r2, #4
 80082fa:	409a      	lsls	r2, r3
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4013      	ands	r3, r2
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80cd 	beq.w	80084a0 <HAL_DMA_IRQHandler+0xb48>
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f003 0304 	and.w	r3, r3, #4
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80c7 	beq.w	80084a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	2204      	movs	r2, #4
 800831c:	409a      	lsls	r2, r3
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d049      	beq.n	80083c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 8210 	beq.w	8008760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008348:	e20a      	b.n	8008760 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8206 	beq.w	8008760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800835c:	e200      	b.n	8008760 <HAL_DMA_IRQHandler+0xe08>
 800835e:	bf00      	nop
 8008360:	40020010 	.word	0x40020010
 8008364:	40020028 	.word	0x40020028
 8008368:	40020040 	.word	0x40020040
 800836c:	40020058 	.word	0x40020058
 8008370:	40020070 	.word	0x40020070
 8008374:	40020088 	.word	0x40020088
 8008378:	400200a0 	.word	0x400200a0
 800837c:	400200b8 	.word	0x400200b8
 8008380:	40020410 	.word	0x40020410
 8008384:	40020428 	.word	0x40020428
 8008388:	40020440 	.word	0x40020440
 800838c:	40020458 	.word	0x40020458
 8008390:	40020470 	.word	0x40020470
 8008394:	40020488 	.word	0x40020488
 8008398:	400204a0 	.word	0x400204a0
 800839c:	400204b8 	.word	0x400204b8
 80083a0:	58025408 	.word	0x58025408
 80083a4:	5802541c 	.word	0x5802541c
 80083a8:	58025430 	.word	0x58025430
 80083ac:	58025444 	.word	0x58025444
 80083b0:	58025458 	.word	0x58025458
 80083b4:	5802546c 	.word	0x5802546c
 80083b8:	58025480 	.word	0x58025480
 80083bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d160      	bne.n	800848c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a8c      	ldr	r2, [pc, #560]	; (8008600 <HAL_DMA_IRQHandler+0xca8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d04a      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a8a      	ldr	r2, [pc, #552]	; (8008604 <HAL_DMA_IRQHandler+0xcac>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d045      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a89      	ldr	r2, [pc, #548]	; (8008608 <HAL_DMA_IRQHandler+0xcb0>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d040      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a87      	ldr	r2, [pc, #540]	; (800860c <HAL_DMA_IRQHandler+0xcb4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d03b      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a86      	ldr	r2, [pc, #536]	; (8008610 <HAL_DMA_IRQHandler+0xcb8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d036      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a84      	ldr	r2, [pc, #528]	; (8008614 <HAL_DMA_IRQHandler+0xcbc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d031      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a83      	ldr	r2, [pc, #524]	; (8008618 <HAL_DMA_IRQHandler+0xcc0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d02c      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a81      	ldr	r2, [pc, #516]	; (800861c <HAL_DMA_IRQHandler+0xcc4>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d027      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a80      	ldr	r2, [pc, #512]	; (8008620 <HAL_DMA_IRQHandler+0xcc8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d022      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a7e      	ldr	r2, [pc, #504]	; (8008624 <HAL_DMA_IRQHandler+0xccc>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d01d      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a7d      	ldr	r2, [pc, #500]	; (8008628 <HAL_DMA_IRQHandler+0xcd0>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d018      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a7b      	ldr	r2, [pc, #492]	; (800862c <HAL_DMA_IRQHandler+0xcd4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a7a      	ldr	r2, [pc, #488]	; (8008630 <HAL_DMA_IRQHandler+0xcd8>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00e      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a78      	ldr	r2, [pc, #480]	; (8008634 <HAL_DMA_IRQHandler+0xcdc>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d009      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a77      	ldr	r2, [pc, #476]	; (8008638 <HAL_DMA_IRQHandler+0xce0>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d004      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a75      	ldr	r2, [pc, #468]	; (800863c <HAL_DMA_IRQHandler+0xce4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d108      	bne.n	800847c <HAL_DMA_IRQHandler+0xb24>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0208 	bic.w	r2, r2, #8
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e007      	b.n	800848c <HAL_DMA_IRQHandler+0xb34>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0204 	bic.w	r2, r2, #4
 800848a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8165 	beq.w	8008760 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800849e:	e15f      	b.n	8008760 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2202      	movs	r2, #2
 80084aa:	409a      	lsls	r2, r3
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 80c5 	beq.w	8008640 <HAL_DMA_IRQHandler+0xce8>
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80bf 	beq.w	8008640 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2202      	movs	r2, #2
 80084cc:	409a      	lsls	r2, r3
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d018      	beq.n	800850e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 813a 	beq.w	8008764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f8:	e134      	b.n	8008764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8130 	beq.w	8008764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800850c:	e12a      	b.n	8008764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d168      	bne.n	80085ea <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a38      	ldr	r2, [pc, #224]	; (8008600 <HAL_DMA_IRQHandler+0xca8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d04a      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a37      	ldr	r2, [pc, #220]	; (8008604 <HAL_DMA_IRQHandler+0xcac>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d045      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a35      	ldr	r2, [pc, #212]	; (8008608 <HAL_DMA_IRQHandler+0xcb0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d040      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a34      	ldr	r2, [pc, #208]	; (800860c <HAL_DMA_IRQHandler+0xcb4>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d03b      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a32      	ldr	r2, [pc, #200]	; (8008610 <HAL_DMA_IRQHandler+0xcb8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d036      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a31      	ldr	r2, [pc, #196]	; (8008614 <HAL_DMA_IRQHandler+0xcbc>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d031      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a2f      	ldr	r2, [pc, #188]	; (8008618 <HAL_DMA_IRQHandler+0xcc0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d02c      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a2e      	ldr	r2, [pc, #184]	; (800861c <HAL_DMA_IRQHandler+0xcc4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d027      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a2c      	ldr	r2, [pc, #176]	; (8008620 <HAL_DMA_IRQHandler+0xcc8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d022      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a2b      	ldr	r2, [pc, #172]	; (8008624 <HAL_DMA_IRQHandler+0xccc>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d01d      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a29      	ldr	r2, [pc, #164]	; (8008628 <HAL_DMA_IRQHandler+0xcd0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d018      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a28      	ldr	r2, [pc, #160]	; (800862c <HAL_DMA_IRQHandler+0xcd4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d013      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a26      	ldr	r2, [pc, #152]	; (8008630 <HAL_DMA_IRQHandler+0xcd8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00e      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a25      	ldr	r2, [pc, #148]	; (8008634 <HAL_DMA_IRQHandler+0xcdc>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d009      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a23      	ldr	r2, [pc, #140]	; (8008638 <HAL_DMA_IRQHandler+0xce0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d004      	beq.n	80085b8 <HAL_DMA_IRQHandler+0xc60>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a22      	ldr	r2, [pc, #136]	; (800863c <HAL_DMA_IRQHandler+0xce4>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d108      	bne.n	80085ca <HAL_DMA_IRQHandler+0xc72>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0214 	bic.w	r2, r2, #20
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e007      	b.n	80085da <HAL_DMA_IRQHandler+0xc82>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 020a 	bic.w	r2, r2, #10
 80085d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80b8 	beq.w	8008764 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085fc:	e0b2      	b.n	8008764 <HAL_DMA_IRQHandler+0xe0c>
 80085fe:	bf00      	nop
 8008600:	40020010 	.word	0x40020010
 8008604:	40020028 	.word	0x40020028
 8008608:	40020040 	.word	0x40020040
 800860c:	40020058 	.word	0x40020058
 8008610:	40020070 	.word	0x40020070
 8008614:	40020088 	.word	0x40020088
 8008618:	400200a0 	.word	0x400200a0
 800861c:	400200b8 	.word	0x400200b8
 8008620:	40020410 	.word	0x40020410
 8008624:	40020428 	.word	0x40020428
 8008628:	40020440 	.word	0x40020440
 800862c:	40020458 	.word	0x40020458
 8008630:	40020470 	.word	0x40020470
 8008634:	40020488 	.word	0x40020488
 8008638:	400204a0 	.word	0x400204a0
 800863c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	2208      	movs	r2, #8
 800864a:	409a      	lsls	r2, r3
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	4013      	ands	r3, r2
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8088 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8082 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a41      	ldr	r2, [pc, #260]	; (800876c <HAL_DMA_IRQHandler+0xe14>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d04a      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a3f      	ldr	r2, [pc, #252]	; (8008770 <HAL_DMA_IRQHandler+0xe18>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d045      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a3e      	ldr	r2, [pc, #248]	; (8008774 <HAL_DMA_IRQHandler+0xe1c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d040      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a3c      	ldr	r2, [pc, #240]	; (8008778 <HAL_DMA_IRQHandler+0xe20>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d03b      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a3b      	ldr	r2, [pc, #236]	; (800877c <HAL_DMA_IRQHandler+0xe24>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d036      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a39      	ldr	r2, [pc, #228]	; (8008780 <HAL_DMA_IRQHandler+0xe28>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d031      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a38      	ldr	r2, [pc, #224]	; (8008784 <HAL_DMA_IRQHandler+0xe2c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d02c      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a36      	ldr	r2, [pc, #216]	; (8008788 <HAL_DMA_IRQHandler+0xe30>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d027      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a35      	ldr	r2, [pc, #212]	; (800878c <HAL_DMA_IRQHandler+0xe34>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d022      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a33      	ldr	r2, [pc, #204]	; (8008790 <HAL_DMA_IRQHandler+0xe38>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d01d      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a32      	ldr	r2, [pc, #200]	; (8008794 <HAL_DMA_IRQHandler+0xe3c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d018      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a30      	ldr	r2, [pc, #192]	; (8008798 <HAL_DMA_IRQHandler+0xe40>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d013      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a2f      	ldr	r2, [pc, #188]	; (800879c <HAL_DMA_IRQHandler+0xe44>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00e      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a2d      	ldr	r2, [pc, #180]	; (80087a0 <HAL_DMA_IRQHandler+0xe48>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d009      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a2c      	ldr	r2, [pc, #176]	; (80087a4 <HAL_DMA_IRQHandler+0xe4c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d004      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a2a      	ldr	r2, [pc, #168]	; (80087a8 <HAL_DMA_IRQHandler+0xe50>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d108      	bne.n	8008714 <HAL_DMA_IRQHandler+0xdbc>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 021c 	bic.w	r2, r2, #28
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e007      	b.n	8008724 <HAL_DMA_IRQHandler+0xdcc>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 020e 	bic.w	r2, r2, #14
 8008722:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2201      	movs	r2, #1
 800872e:	409a      	lsls	r2, r3
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
 800875a:	e004      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800875c:	bf00      	nop
 800875e:	e002      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008760:	bf00      	nop
 8008762:	e000      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008764:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008766:	3728      	adds	r7, #40	; 0x28
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	40020010 	.word	0x40020010
 8008770:	40020028 	.word	0x40020028
 8008774:	40020040 	.word	0x40020040
 8008778:	40020058 	.word	0x40020058
 800877c:	40020070 	.word	0x40020070
 8008780:	40020088 	.word	0x40020088
 8008784:	400200a0 	.word	0x400200a0
 8008788:	400200b8 	.word	0x400200b8
 800878c:	40020410 	.word	0x40020410
 8008790:	40020428 	.word	0x40020428
 8008794:	40020440 	.word	0x40020440
 8008798:	40020458 	.word	0x40020458
 800879c:	40020470 	.word	0x40020470
 80087a0:	40020488 	.word	0x40020488
 80087a4:	400204a0 	.word	0x400204a0
 80087a8:	400204b8 	.word	0x400204b8

080087ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a84      	ldr	r2, [pc, #528]	; (80089dc <DMA_SetConfig+0x230>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d072      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a82      	ldr	r2, [pc, #520]	; (80089e0 <DMA_SetConfig+0x234>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d06d      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a81      	ldr	r2, [pc, #516]	; (80089e4 <DMA_SetConfig+0x238>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d068      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a7f      	ldr	r2, [pc, #508]	; (80089e8 <DMA_SetConfig+0x23c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d063      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a7e      	ldr	r2, [pc, #504]	; (80089ec <DMA_SetConfig+0x240>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d05e      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a7c      	ldr	r2, [pc, #496]	; (80089f0 <DMA_SetConfig+0x244>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d059      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a7b      	ldr	r2, [pc, #492]	; (80089f4 <DMA_SetConfig+0x248>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d054      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a79      	ldr	r2, [pc, #484]	; (80089f8 <DMA_SetConfig+0x24c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d04f      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a78      	ldr	r2, [pc, #480]	; (80089fc <DMA_SetConfig+0x250>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d04a      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a76      	ldr	r2, [pc, #472]	; (8008a00 <DMA_SetConfig+0x254>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d045      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a75      	ldr	r2, [pc, #468]	; (8008a04 <DMA_SetConfig+0x258>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d040      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a73      	ldr	r2, [pc, #460]	; (8008a08 <DMA_SetConfig+0x25c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d03b      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a72      	ldr	r2, [pc, #456]	; (8008a0c <DMA_SetConfig+0x260>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d036      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a70      	ldr	r2, [pc, #448]	; (8008a10 <DMA_SetConfig+0x264>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d031      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a6f      	ldr	r2, [pc, #444]	; (8008a14 <DMA_SetConfig+0x268>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d02c      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a6d      	ldr	r2, [pc, #436]	; (8008a18 <DMA_SetConfig+0x26c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d027      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a6c      	ldr	r2, [pc, #432]	; (8008a1c <DMA_SetConfig+0x270>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d022      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a6a      	ldr	r2, [pc, #424]	; (8008a20 <DMA_SetConfig+0x274>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01d      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a69      	ldr	r2, [pc, #420]	; (8008a24 <DMA_SetConfig+0x278>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d018      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a67      	ldr	r2, [pc, #412]	; (8008a28 <DMA_SetConfig+0x27c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d013      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a66      	ldr	r2, [pc, #408]	; (8008a2c <DMA_SetConfig+0x280>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00e      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a64      	ldr	r2, [pc, #400]	; (8008a30 <DMA_SetConfig+0x284>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d009      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a63      	ldr	r2, [pc, #396]	; (8008a34 <DMA_SetConfig+0x288>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d004      	beq.n	80088b6 <DMA_SetConfig+0x10a>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a61      	ldr	r2, [pc, #388]	; (8008a38 <DMA_SetConfig+0x28c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d101      	bne.n	80088ba <DMA_SetConfig+0x10e>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e000      	b.n	80088bc <DMA_SetConfig+0x110>
 80088ba:	2300      	movs	r3, #0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00d      	beq.n	80088dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d004      	beq.n	80088dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a3e      	ldr	r2, [pc, #248]	; (80089dc <DMA_SetConfig+0x230>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d04a      	beq.n	800897c <DMA_SetConfig+0x1d0>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a3d      	ldr	r2, [pc, #244]	; (80089e0 <DMA_SetConfig+0x234>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d045      	beq.n	800897c <DMA_SetConfig+0x1d0>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a3b      	ldr	r2, [pc, #236]	; (80089e4 <DMA_SetConfig+0x238>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d040      	beq.n	800897c <DMA_SetConfig+0x1d0>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a3a      	ldr	r2, [pc, #232]	; (80089e8 <DMA_SetConfig+0x23c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d03b      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a38      	ldr	r2, [pc, #224]	; (80089ec <DMA_SetConfig+0x240>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d036      	beq.n	800897c <DMA_SetConfig+0x1d0>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a37      	ldr	r2, [pc, #220]	; (80089f0 <DMA_SetConfig+0x244>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d031      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a35      	ldr	r2, [pc, #212]	; (80089f4 <DMA_SetConfig+0x248>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d02c      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a34      	ldr	r2, [pc, #208]	; (80089f8 <DMA_SetConfig+0x24c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d027      	beq.n	800897c <DMA_SetConfig+0x1d0>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a32      	ldr	r2, [pc, #200]	; (80089fc <DMA_SetConfig+0x250>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d022      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a31      	ldr	r2, [pc, #196]	; (8008a00 <DMA_SetConfig+0x254>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d01d      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a2f      	ldr	r2, [pc, #188]	; (8008a04 <DMA_SetConfig+0x258>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d018      	beq.n	800897c <DMA_SetConfig+0x1d0>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a2e      	ldr	r2, [pc, #184]	; (8008a08 <DMA_SetConfig+0x25c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d013      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a2c      	ldr	r2, [pc, #176]	; (8008a0c <DMA_SetConfig+0x260>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00e      	beq.n	800897c <DMA_SetConfig+0x1d0>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2b      	ldr	r2, [pc, #172]	; (8008a10 <DMA_SetConfig+0x264>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d009      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a29      	ldr	r2, [pc, #164]	; (8008a14 <DMA_SetConfig+0x268>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <DMA_SetConfig+0x1d0>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a28      	ldr	r2, [pc, #160]	; (8008a18 <DMA_SetConfig+0x26c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d101      	bne.n	8008980 <DMA_SetConfig+0x1d4>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <DMA_SetConfig+0x1d6>
 8008980:	2300      	movs	r3, #0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05a      	beq.n	8008a3c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898a:	f003 031f 	and.w	r3, r3, #31
 800898e:	223f      	movs	r2, #63	; 0x3f
 8008990:	409a      	lsls	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b40      	cmp	r3, #64	; 0x40
 80089b4:	d108      	bne.n	80089c8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089c6:	e087      	b.n	8008ad8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	60da      	str	r2, [r3, #12]
}
 80089d8:	e07e      	b.n	8008ad8 <DMA_SetConfig+0x32c>
 80089da:	bf00      	nop
 80089dc:	40020010 	.word	0x40020010
 80089e0:	40020028 	.word	0x40020028
 80089e4:	40020040 	.word	0x40020040
 80089e8:	40020058 	.word	0x40020058
 80089ec:	40020070 	.word	0x40020070
 80089f0:	40020088 	.word	0x40020088
 80089f4:	400200a0 	.word	0x400200a0
 80089f8:	400200b8 	.word	0x400200b8
 80089fc:	40020410 	.word	0x40020410
 8008a00:	40020428 	.word	0x40020428
 8008a04:	40020440 	.word	0x40020440
 8008a08:	40020458 	.word	0x40020458
 8008a0c:	40020470 	.word	0x40020470
 8008a10:	40020488 	.word	0x40020488
 8008a14:	400204a0 	.word	0x400204a0
 8008a18:	400204b8 	.word	0x400204b8
 8008a1c:	58025408 	.word	0x58025408
 8008a20:	5802541c 	.word	0x5802541c
 8008a24:	58025430 	.word	0x58025430
 8008a28:	58025444 	.word	0x58025444
 8008a2c:	58025458 	.word	0x58025458
 8008a30:	5802546c 	.word	0x5802546c
 8008a34:	58025480 	.word	0x58025480
 8008a38:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a28      	ldr	r2, [pc, #160]	; (8008ae4 <DMA_SetConfig+0x338>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d022      	beq.n	8008a8c <DMA_SetConfig+0x2e0>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a27      	ldr	r2, [pc, #156]	; (8008ae8 <DMA_SetConfig+0x33c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d01d      	beq.n	8008a8c <DMA_SetConfig+0x2e0>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a25      	ldr	r2, [pc, #148]	; (8008aec <DMA_SetConfig+0x340>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d018      	beq.n	8008a8c <DMA_SetConfig+0x2e0>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a24      	ldr	r2, [pc, #144]	; (8008af0 <DMA_SetConfig+0x344>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <DMA_SetConfig+0x2e0>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a22      	ldr	r2, [pc, #136]	; (8008af4 <DMA_SetConfig+0x348>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00e      	beq.n	8008a8c <DMA_SetConfig+0x2e0>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a21      	ldr	r2, [pc, #132]	; (8008af8 <DMA_SetConfig+0x34c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d009      	beq.n	8008a8c <DMA_SetConfig+0x2e0>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <DMA_SetConfig+0x350>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d004      	beq.n	8008a8c <DMA_SetConfig+0x2e0>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a1e      	ldr	r2, [pc, #120]	; (8008b00 <DMA_SetConfig+0x354>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d101      	bne.n	8008a90 <DMA_SetConfig+0x2e4>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e000      	b.n	8008a92 <DMA_SetConfig+0x2e6>
 8008a90:	2300      	movs	r3, #0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d020      	beq.n	8008ad8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a9a:	f003 031f 	and.w	r3, r3, #31
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	409a      	lsls	r2, r3
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2b40      	cmp	r3, #64	; 0x40
 8008ab4:	d108      	bne.n	8008ac8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	60da      	str	r2, [r3, #12]
}
 8008ac6:	e007      	b.n	8008ad8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]
}
 8008ad8:	bf00      	nop
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	58025408 	.word	0x58025408
 8008ae8:	5802541c 	.word	0x5802541c
 8008aec:	58025430 	.word	0x58025430
 8008af0:	58025444 	.word	0x58025444
 8008af4:	58025458 	.word	0x58025458
 8008af8:	5802546c 	.word	0x5802546c
 8008afc:	58025480 	.word	0x58025480
 8008b00:	58025494 	.word	0x58025494

08008b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a42      	ldr	r2, [pc, #264]	; (8008c1c <DMA_CalcBaseAndBitshift+0x118>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d04a      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a41      	ldr	r2, [pc, #260]	; (8008c20 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d045      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <DMA_CalcBaseAndBitshift+0x120>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d040      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a3e      	ldr	r2, [pc, #248]	; (8008c28 <DMA_CalcBaseAndBitshift+0x124>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d03b      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a3c      	ldr	r2, [pc, #240]	; (8008c2c <DMA_CalcBaseAndBitshift+0x128>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d036      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a3b      	ldr	r2, [pc, #236]	; (8008c30 <DMA_CalcBaseAndBitshift+0x12c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d031      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a39      	ldr	r2, [pc, #228]	; (8008c34 <DMA_CalcBaseAndBitshift+0x130>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d02c      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a38      	ldr	r2, [pc, #224]	; (8008c38 <DMA_CalcBaseAndBitshift+0x134>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d027      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a36      	ldr	r2, [pc, #216]	; (8008c3c <DMA_CalcBaseAndBitshift+0x138>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d022      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a35      	ldr	r2, [pc, #212]	; (8008c40 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d01d      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a33      	ldr	r2, [pc, #204]	; (8008c44 <DMA_CalcBaseAndBitshift+0x140>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d018      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a32      	ldr	r2, [pc, #200]	; (8008c48 <DMA_CalcBaseAndBitshift+0x144>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d013      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a30      	ldr	r2, [pc, #192]	; (8008c4c <DMA_CalcBaseAndBitshift+0x148>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00e      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a2f      	ldr	r2, [pc, #188]	; (8008c50 <DMA_CalcBaseAndBitshift+0x14c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d009      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a2d      	ldr	r2, [pc, #180]	; (8008c54 <DMA_CalcBaseAndBitshift+0x150>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d004      	beq.n	8008bac <DMA_CalcBaseAndBitshift+0xa8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a2c      	ldr	r2, [pc, #176]	; (8008c58 <DMA_CalcBaseAndBitshift+0x154>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d101      	bne.n	8008bb0 <DMA_CalcBaseAndBitshift+0xac>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e000      	b.n	8008bb2 <DMA_CalcBaseAndBitshift+0xae>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d024      	beq.n	8008c00 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	3b10      	subs	r3, #16
 8008bbe:	4a27      	ldr	r2, [pc, #156]	; (8008c5c <DMA_CalcBaseAndBitshift+0x158>)
 8008bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	4a24      	ldr	r2, [pc, #144]	; (8008c60 <DMA_CalcBaseAndBitshift+0x15c>)
 8008bd0:	5cd3      	ldrb	r3, [r2, r3]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d908      	bls.n	8008bf0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	4b1f      	ldr	r3, [pc, #124]	; (8008c64 <DMA_CalcBaseAndBitshift+0x160>)
 8008be6:	4013      	ands	r3, r2
 8008be8:	1d1a      	adds	r2, r3, #4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	659a      	str	r2, [r3, #88]	; 0x58
 8008bee:	e00d      	b.n	8008c0c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <DMA_CalcBaseAndBitshift+0x160>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8008bfe:	e005      	b.n	8008c0c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	40020010 	.word	0x40020010
 8008c20:	40020028 	.word	0x40020028
 8008c24:	40020040 	.word	0x40020040
 8008c28:	40020058 	.word	0x40020058
 8008c2c:	40020070 	.word	0x40020070
 8008c30:	40020088 	.word	0x40020088
 8008c34:	400200a0 	.word	0x400200a0
 8008c38:	400200b8 	.word	0x400200b8
 8008c3c:	40020410 	.word	0x40020410
 8008c40:	40020428 	.word	0x40020428
 8008c44:	40020440 	.word	0x40020440
 8008c48:	40020458 	.word	0x40020458
 8008c4c:	40020470 	.word	0x40020470
 8008c50:	40020488 	.word	0x40020488
 8008c54:	400204a0 	.word	0x400204a0
 8008c58:	400204b8 	.word	0x400204b8
 8008c5c:	aaaaaaab 	.word	0xaaaaaaab
 8008c60:	08012928 	.word	0x08012928
 8008c64:	fffffc00 	.word	0xfffffc00

08008c68 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d120      	bne.n	8008cbe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d858      	bhi.n	8008d36 <DMA_CheckFifoParam+0xce>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <DMA_CheckFifoParam+0x24>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008caf 	.word	0x08008caf
 8008c94:	08008c9d 	.word	0x08008c9d
 8008c98:	08008d37 	.word	0x08008d37
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d048      	beq.n	8008d3a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cac:	e045      	b.n	8008d3a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cb6:	d142      	bne.n	8008d3e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cbc:	e03f      	b.n	8008d3e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc6:	d123      	bne.n	8008d10 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d838      	bhi.n	8008d42 <DMA_CheckFifoParam+0xda>
 8008cd0:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <DMA_CheckFifoParam+0x70>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008ce9 	.word	0x08008ce9
 8008cdc:	08008cef 	.word	0x08008cef
 8008ce0:	08008ce9 	.word	0x08008ce9
 8008ce4:	08008d01 	.word	0x08008d01
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]
        break;
 8008cec:	e030      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d025      	beq.n	8008d46 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cfe:	e022      	b.n	8008d46 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d08:	d11f      	bne.n	8008d4a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d0e:	e01c      	b.n	8008d4a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d902      	bls.n	8008d1e <DMA_CheckFifoParam+0xb6>
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d003      	beq.n	8008d24 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d1c:	e018      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]
        break;
 8008d22:	e015      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00e      	beq.n	8008d4e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
    break;
 8008d34:	e00b      	b.n	8008d4e <DMA_CheckFifoParam+0xe6>
        break;
 8008d36:	bf00      	nop
 8008d38:	e00a      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
        break;
 8008d3a:	bf00      	nop
 8008d3c:	e008      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
        break;
 8008d3e:	bf00      	nop
 8008d40:	e006      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
        break;
 8008d42:	bf00      	nop
 8008d44:	e004      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
        break;
 8008d46:	bf00      	nop
 8008d48:	e002      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
        break;
 8008d4a:	bf00      	nop
 8008d4c:	e000      	b.n	8008d50 <DMA_CheckFifoParam+0xe8>
    break;
 8008d4e:	bf00      	nop
    }
  }

  return status;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop

08008d60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a38      	ldr	r2, [pc, #224]	; (8008e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d022      	beq.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a36      	ldr	r2, [pc, #216]	; (8008e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01d      	beq.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a35      	ldr	r2, [pc, #212]	; (8008e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d018      	beq.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a33      	ldr	r2, [pc, #204]	; (8008e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d013      	beq.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a32      	ldr	r2, [pc, #200]	; (8008e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00e      	beq.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a30      	ldr	r2, [pc, #192]	; (8008e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d009      	beq.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a2f      	ldr	r2, [pc, #188]	; (8008e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d004      	beq.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a2d      	ldr	r2, [pc, #180]	; (8008e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d101      	bne.n	8008dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01a      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	3b08      	subs	r3, #8
 8008dd0:	4a28      	ldr	r2, [pc, #160]	; (8008e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	091b      	lsrs	r3, r3, #4
 8008dd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	461a      	mov	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a24      	ldr	r2, [pc, #144]	; (8008e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008dec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f003 031f 	and.w	r3, r3, #31
 8008df4:	2201      	movs	r2, #1
 8008df6:	409a      	lsls	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008dfc:	e024      	b.n	8008e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	3b10      	subs	r3, #16
 8008e06:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e08:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4a1c      	ldr	r2, [pc, #112]	; (8008e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d806      	bhi.n	8008e26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4a1b      	ldr	r2, [pc, #108]	; (8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d902      	bls.n	8008e26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3308      	adds	r3, #8
 8008e24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	461a      	mov	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a16      	ldr	r2, [pc, #88]	; (8008e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f003 031f 	and.w	r3, r3, #31
 8008e40:	2201      	movs	r2, #1
 8008e42:	409a      	lsls	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e48:	bf00      	nop
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	58025408 	.word	0x58025408
 8008e58:	5802541c 	.word	0x5802541c
 8008e5c:	58025430 	.word	0x58025430
 8008e60:	58025444 	.word	0x58025444
 8008e64:	58025458 	.word	0x58025458
 8008e68:	5802546c 	.word	0x5802546c
 8008e6c:	58025480 	.word	0x58025480
 8008e70:	58025494 	.word	0x58025494
 8008e74:	cccccccd 	.word	0xcccccccd
 8008e78:	16009600 	.word	0x16009600
 8008e7c:	58025880 	.word	0x58025880
 8008e80:	aaaaaaab 	.word	0xaaaaaaab
 8008e84:	400204b8 	.word	0x400204b8
 8008e88:	4002040f 	.word	0x4002040f
 8008e8c:	10008200 	.word	0x10008200
 8008e90:	40020880 	.word	0x40020880

08008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d04a      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d847      	bhi.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a25      	ldr	r2, [pc, #148]	; (8008f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d022      	beq.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a24      	ldr	r2, [pc, #144]	; (8008f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d01d      	beq.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a22      	ldr	r2, [pc, #136]	; (8008f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d018      	beq.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a21      	ldr	r2, [pc, #132]	; (8008f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d013      	beq.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a1f      	ldr	r2, [pc, #124]	; (8008f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00e      	beq.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d009      	beq.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a1c      	ldr	r2, [pc, #112]	; (8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d004      	beq.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a1b      	ldr	r2, [pc, #108]	; (8008f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d101      	bne.n	8008f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f04:	2300      	movs	r3, #0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4b17      	ldr	r3, [pc, #92]	; (8008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a15      	ldr	r2, [pc, #84]	; (8008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f1c:	671a      	str	r2, [r3, #112]	; 0x70
 8008f1e:	e009      	b.n	8008f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	461a      	mov	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a11      	ldr	r2, [pc, #68]	; (8008f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f32:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2201      	movs	r2, #1
 8008f3a:	409a      	lsls	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	58025408 	.word	0x58025408
 8008f50:	5802541c 	.word	0x5802541c
 8008f54:	58025430 	.word	0x58025430
 8008f58:	58025444 	.word	0x58025444
 8008f5c:	58025458 	.word	0x58025458
 8008f60:	5802546c 	.word	0x5802546c
 8008f64:	58025480 	.word	0x58025480
 8008f68:	58025494 	.word	0x58025494
 8008f6c:	1600963f 	.word	0x1600963f
 8008f70:	58025940 	.word	0x58025940
 8008f74:	1000823f 	.word	0x1000823f
 8008f78:	40020940 	.word	0x40020940

08008f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b089      	sub	sp, #36	; 0x24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f8a:	4b89      	ldr	r3, [pc, #548]	; (80091b0 <HAL_GPIO_Init+0x234>)
 8008f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f8e:	e194      	b.n	80092ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	2101      	movs	r1, #1
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8186 	beq.w	80092b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f003 0303 	and.w	r3, r3, #3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d005      	beq.n	8008fc0 <HAL_GPIO_Init+0x44>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d130      	bne.n	8009022 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	2203      	movs	r2, #3
 8008fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffe:	43db      	mvns	r3, r3
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	4013      	ands	r3, r2
 8009004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	091b      	lsrs	r3, r3, #4
 800900c:	f003 0201 	and.w	r2, r3, #1
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	fa02 f303 	lsl.w	r3, r2, r3
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	4313      	orrs	r3, r2
 800901a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	2b03      	cmp	r3, #3
 800902c:	d017      	beq.n	800905e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	2203      	movs	r2, #3
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	43db      	mvns	r3, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	4013      	ands	r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	4313      	orrs	r3, r2
 8009056:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d123      	bne.n	80090b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	08da      	lsrs	r2, r3, #3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3208      	adds	r2, #8
 8009072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	220f      	movs	r2, #15
 8009082:	fa02 f303 	lsl.w	r3, r2, r3
 8009086:	43db      	mvns	r3, r3
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	4013      	ands	r3, r2
 800908c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	691a      	ldr	r2, [r3, #16]
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	08da      	lsrs	r2, r3, #3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3208      	adds	r2, #8
 80090ac:	69b9      	ldr	r1, [r7, #24]
 80090ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	2203      	movs	r2, #3
 80090be:	fa02 f303 	lsl.w	r3, r2, r3
 80090c2:	43db      	mvns	r3, r3
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	4013      	ands	r3, r2
 80090c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f003 0203 	and.w	r2, r3, #3
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	4313      	orrs	r3, r2
 80090de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 80e0 	beq.w	80092b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090f4:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <HAL_GPIO_Init+0x238>)
 80090f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090fa:	4a2e      	ldr	r2, [pc, #184]	; (80091b4 <HAL_GPIO_Init+0x238>)
 80090fc:	f043 0302 	orr.w	r3, r3, #2
 8009100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009104:	4b2b      	ldr	r3, [pc, #172]	; (80091b4 <HAL_GPIO_Init+0x238>)
 8009106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009112:	4a29      	ldr	r2, [pc, #164]	; (80091b8 <HAL_GPIO_Init+0x23c>)
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	089b      	lsrs	r3, r3, #2
 8009118:	3302      	adds	r3, #2
 800911a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800911e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	220f      	movs	r2, #15
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
 800912e:	43db      	mvns	r3, r3
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	4013      	ands	r3, r2
 8009134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a20      	ldr	r2, [pc, #128]	; (80091bc <HAL_GPIO_Init+0x240>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d052      	beq.n	80091e4 <HAL_GPIO_Init+0x268>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <HAL_GPIO_Init+0x244>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d031      	beq.n	80091aa <HAL_GPIO_Init+0x22e>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a1e      	ldr	r2, [pc, #120]	; (80091c4 <HAL_GPIO_Init+0x248>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d02b      	beq.n	80091a6 <HAL_GPIO_Init+0x22a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a1d      	ldr	r2, [pc, #116]	; (80091c8 <HAL_GPIO_Init+0x24c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d025      	beq.n	80091a2 <HAL_GPIO_Init+0x226>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a1c      	ldr	r2, [pc, #112]	; (80091cc <HAL_GPIO_Init+0x250>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d01f      	beq.n	800919e <HAL_GPIO_Init+0x222>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <HAL_GPIO_Init+0x254>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d019      	beq.n	800919a <HAL_GPIO_Init+0x21e>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1a      	ldr	r2, [pc, #104]	; (80091d4 <HAL_GPIO_Init+0x258>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <HAL_GPIO_Init+0x21a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <HAL_GPIO_Init+0x25c>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00d      	beq.n	8009192 <HAL_GPIO_Init+0x216>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a18      	ldr	r2, [pc, #96]	; (80091dc <HAL_GPIO_Init+0x260>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d007      	beq.n	800918e <HAL_GPIO_Init+0x212>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a17      	ldr	r2, [pc, #92]	; (80091e0 <HAL_GPIO_Init+0x264>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d101      	bne.n	800918a <HAL_GPIO_Init+0x20e>
 8009186:	2309      	movs	r3, #9
 8009188:	e02d      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 800918a:	230a      	movs	r3, #10
 800918c:	e02b      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 800918e:	2308      	movs	r3, #8
 8009190:	e029      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 8009192:	2307      	movs	r3, #7
 8009194:	e027      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 8009196:	2306      	movs	r3, #6
 8009198:	e025      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 800919a:	2305      	movs	r3, #5
 800919c:	e023      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 800919e:	2304      	movs	r3, #4
 80091a0:	e021      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 80091a2:	2303      	movs	r3, #3
 80091a4:	e01f      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e01d      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e01b      	b.n	80091e6 <HAL_GPIO_Init+0x26a>
 80091ae:	bf00      	nop
 80091b0:	58000080 	.word	0x58000080
 80091b4:	58024400 	.word	0x58024400
 80091b8:	58000400 	.word	0x58000400
 80091bc:	58020000 	.word	0x58020000
 80091c0:	58020400 	.word	0x58020400
 80091c4:	58020800 	.word	0x58020800
 80091c8:	58020c00 	.word	0x58020c00
 80091cc:	58021000 	.word	0x58021000
 80091d0:	58021400 	.word	0x58021400
 80091d4:	58021800 	.word	0x58021800
 80091d8:	58021c00 	.word	0x58021c00
 80091dc:	58022000 	.word	0x58022000
 80091e0:	58022400 	.word	0x58022400
 80091e4:	2300      	movs	r3, #0
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	f002 0203 	and.w	r2, r2, #3
 80091ec:	0092      	lsls	r2, r2, #2
 80091ee:	4093      	lsls	r3, r2
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091f6:	4938      	ldr	r1, [pc, #224]	; (80092d8 <HAL_GPIO_Init+0x35c>)
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	089b      	lsrs	r3, r3, #2
 80091fc:	3302      	adds	r3, #2
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	43db      	mvns	r3, r3
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	4013      	ands	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800922a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	43db      	mvns	r3, r3
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	4013      	ands	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4313      	orrs	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	43db      	mvns	r3, r3
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	4013      	ands	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	43db      	mvns	r3, r3
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	4013      	ands	r3, r2
 8009298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	3301      	adds	r3, #1
 80092b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	fa22 f303 	lsr.w	r3, r2, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f47f ae63 	bne.w	8008f90 <HAL_GPIO_Init+0x14>
  }
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	3724      	adds	r7, #36	; 0x24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	58000400 	.word	0x58000400

080092dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	807b      	strh	r3, [r7, #2]
 80092e8:	4613      	mov	r3, r2
 80092ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092ec:	787b      	ldrb	r3, [r7, #1]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092f2:	887a      	ldrh	r2, [r7, #2]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80092f8:	e003      	b.n	8009302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092fa:	887b      	ldrh	r3, [r7, #2]
 80092fc:	041a      	lsls	r2, r3, #16
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	619a      	str	r2, [r3, #24]
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	4603      	mov	r3, r0
 8009316:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800931c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009320:	88fb      	ldrh	r3, [r7, #6]
 8009322:	4013      	ands	r3, r2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d008      	beq.n	800933a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800932c:	88fb      	ldrh	r3, [r7, #6]
 800932e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	4618      	mov	r0, r3
 8009336:	f7fa fe17 	bl	8003f68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800934c:	4b19      	ldr	r3, [pc, #100]	; (80093b4 <HAL_PWREx_ConfigSupply+0x70>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b04      	cmp	r3, #4
 8009356:	d00a      	beq.n	800936e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009358:	4b16      	ldr	r3, [pc, #88]	; (80093b4 <HAL_PWREx_ConfigSupply+0x70>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	429a      	cmp	r2, r3
 8009364:	d001      	beq.n	800936a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e01f      	b.n	80093aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	e01d      	b.n	80093aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800936e:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <HAL_PWREx_ConfigSupply+0x70>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f023 0207 	bic.w	r2, r3, #7
 8009376:	490f      	ldr	r1, [pc, #60]	; (80093b4 <HAL_PWREx_ConfigSupply+0x70>)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4313      	orrs	r3, r2
 800937c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800937e:	f7fc fc6d 	bl	8005c5c <HAL_GetTick>
 8009382:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009384:	e009      	b.n	800939a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009386:	f7fc fc69 	bl	8005c5c <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009394:	d901      	bls.n	800939a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e007      	b.n	80093aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800939a:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <HAL_PWREx_ConfigSupply+0x70>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093a6:	d1ee      	bne.n	8009386 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	58024800 	.word	0x58024800

080093b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08c      	sub	sp, #48	; 0x30
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d102      	bne.n	80093cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f000 bc1c 	b.w	8009c04 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 8087 	beq.w	80094e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093da:	4b9e      	ldr	r3, [pc, #632]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093e4:	4b9b      	ldr	r3, [pc, #620]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	2b10      	cmp	r3, #16
 80093ee:	d007      	beq.n	8009400 <HAL_RCC_OscConfig+0x48>
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	2b18      	cmp	r3, #24
 80093f4:	d110      	bne.n	8009418 <HAL_RCC_OscConfig+0x60>
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	f003 0303 	and.w	r3, r3, #3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d10b      	bne.n	8009418 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009400:	4b94      	ldr	r3, [pc, #592]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d06c      	beq.n	80094e6 <HAL_RCC_OscConfig+0x12e>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d168      	bne.n	80094e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e3f5      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009420:	d106      	bne.n	8009430 <HAL_RCC_OscConfig+0x78>
 8009422:	4b8c      	ldr	r3, [pc, #560]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a8b      	ldr	r2, [pc, #556]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	e02e      	b.n	800948e <HAL_RCC_OscConfig+0xd6>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10c      	bne.n	8009452 <HAL_RCC_OscConfig+0x9a>
 8009438:	4b86      	ldr	r3, [pc, #536]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a85      	ldr	r2, [pc, #532]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800943e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	4b83      	ldr	r3, [pc, #524]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a82      	ldr	r2, [pc, #520]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800944a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e01d      	b.n	800948e <HAL_RCC_OscConfig+0xd6>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800945a:	d10c      	bne.n	8009476 <HAL_RCC_OscConfig+0xbe>
 800945c:	4b7d      	ldr	r3, [pc, #500]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a7c      	ldr	r2, [pc, #496]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	4b7a      	ldr	r3, [pc, #488]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a79      	ldr	r2, [pc, #484]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800946e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	e00b      	b.n	800948e <HAL_RCC_OscConfig+0xd6>
 8009476:	4b77      	ldr	r3, [pc, #476]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a76      	ldr	r2, [pc, #472]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800947c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009480:	6013      	str	r3, [r2, #0]
 8009482:	4b74      	ldr	r3, [pc, #464]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a73      	ldr	r2, [pc, #460]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800948c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d013      	beq.n	80094be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009496:	f7fc fbe1 	bl	8005c5c <HAL_GetTick>
 800949a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800949c:	e008      	b.n	80094b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800949e:	f7fc fbdd 	bl	8005c5c <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b64      	cmp	r3, #100	; 0x64
 80094aa:	d901      	bls.n	80094b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e3a9      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094b0:	4b68      	ldr	r3, [pc, #416]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0f0      	beq.n	800949e <HAL_RCC_OscConfig+0xe6>
 80094bc:	e014      	b.n	80094e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094be:	f7fc fbcd 	bl	8005c5c <HAL_GetTick>
 80094c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094c4:	e008      	b.n	80094d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094c6:	f7fc fbc9 	bl	8005c5c <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b64      	cmp	r3, #100	; 0x64
 80094d2:	d901      	bls.n	80094d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e395      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094d8:	4b5e      	ldr	r3, [pc, #376]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1f0      	bne.n	80094c6 <HAL_RCC_OscConfig+0x10e>
 80094e4:	e000      	b.n	80094e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 80ca 	beq.w	800968a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094f6:	4b57      	ldr	r3, [pc, #348]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009500:	4b54      	ldr	r3, [pc, #336]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009504:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d007      	beq.n	800951c <HAL_RCC_OscConfig+0x164>
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	2b18      	cmp	r3, #24
 8009510:	d156      	bne.n	80095c0 <HAL_RCC_OscConfig+0x208>
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d151      	bne.n	80095c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800951c:	4b4d      	ldr	r3, [pc, #308]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <HAL_RCC_OscConfig+0x17c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e367      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009534:	4b47      	ldr	r3, [pc, #284]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f023 0219 	bic.w	r2, r3, #25
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	4944      	ldr	r1, [pc, #272]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009542:	4313      	orrs	r3, r2
 8009544:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009546:	f7fc fb89 	bl	8005c5c <HAL_GetTick>
 800954a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800954c:	e008      	b.n	8009560 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800954e:	f7fc fb85 	bl	8005c5c <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d901      	bls.n	8009560 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e351      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009560:	4b3c      	ldr	r3, [pc, #240]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0f0      	beq.n	800954e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800956c:	f7fc fba6 	bl	8005cbc <HAL_GetREVID>
 8009570:	4603      	mov	r3, r0
 8009572:	f241 0203 	movw	r2, #4099	; 0x1003
 8009576:	4293      	cmp	r3, r2
 8009578:	d817      	bhi.n	80095aa <HAL_RCC_OscConfig+0x1f2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	2b40      	cmp	r3, #64	; 0x40
 8009580:	d108      	bne.n	8009594 <HAL_RCC_OscConfig+0x1dc>
 8009582:	4b34      	ldr	r3, [pc, #208]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800958a:	4a32      	ldr	r2, [pc, #200]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800958c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009590:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009592:	e07a      	b.n	800968a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009594:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	031b      	lsls	r3, r3, #12
 80095a2:	492c      	ldr	r1, [pc, #176]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095a8:	e06f      	b.n	800968a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095aa:	4b2a      	ldr	r3, [pc, #168]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	061b      	lsls	r3, r3, #24
 80095b8:	4926      	ldr	r1, [pc, #152]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095be:	e064      	b.n	800968a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d047      	beq.n	8009658 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095c8:	4b22      	ldr	r3, [pc, #136]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f023 0219 	bic.w	r2, r3, #25
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	491f      	ldr	r1, [pc, #124]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095da:	f7fc fb3f 	bl	8005c5c <HAL_GetTick>
 80095de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095e0:	e008      	b.n	80095f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095e2:	f7fc fb3b 	bl	8005c5c <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e307      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0f0      	beq.n	80095e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009600:	f7fc fb5c 	bl	8005cbc <HAL_GetREVID>
 8009604:	4603      	mov	r3, r0
 8009606:	f241 0203 	movw	r2, #4099	; 0x1003
 800960a:	4293      	cmp	r3, r2
 800960c:	d817      	bhi.n	800963e <HAL_RCC_OscConfig+0x286>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b40      	cmp	r3, #64	; 0x40
 8009614:	d108      	bne.n	8009628 <HAL_RCC_OscConfig+0x270>
 8009616:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800961e:	4a0d      	ldr	r2, [pc, #52]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009624:	6053      	str	r3, [r2, #4]
 8009626:	e030      	b.n	800968a <HAL_RCC_OscConfig+0x2d2>
 8009628:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	031b      	lsls	r3, r3, #12
 8009636:	4907      	ldr	r1, [pc, #28]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009638:	4313      	orrs	r3, r2
 800963a:	604b      	str	r3, [r1, #4]
 800963c:	e025      	b.n	800968a <HAL_RCC_OscConfig+0x2d2>
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	061b      	lsls	r3, r3, #24
 800964c:	4901      	ldr	r1, [pc, #4]	; (8009654 <HAL_RCC_OscConfig+0x29c>)
 800964e:	4313      	orrs	r3, r2
 8009650:	604b      	str	r3, [r1, #4]
 8009652:	e01a      	b.n	800968a <HAL_RCC_OscConfig+0x2d2>
 8009654:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009658:	4b9e      	ldr	r3, [pc, #632]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a9d      	ldr	r2, [pc, #628]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800965e:	f023 0301 	bic.w	r3, r3, #1
 8009662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009664:	f7fc fafa 	bl	8005c5c <HAL_GetTick>
 8009668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800966c:	f7fc faf6 	bl	8005c5c <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e2c2      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800967e:	4b95      	ldr	r3, [pc, #596]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0304 	and.w	r3, r3, #4
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1f0      	bne.n	800966c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0310 	and.w	r3, r3, #16
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80a9 	beq.w	80097ea <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009698:	4b8e      	ldr	r3, [pc, #568]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096a2:	4b8c      	ldr	r3, [pc, #560]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80096a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d007      	beq.n	80096be <HAL_RCC_OscConfig+0x306>
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b18      	cmp	r3, #24
 80096b2:	d13a      	bne.n	800972a <HAL_RCC_OscConfig+0x372>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d135      	bne.n	800972a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096be:	4b85      	ldr	r3, [pc, #532]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <HAL_RCC_OscConfig+0x31e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	2b80      	cmp	r3, #128	; 0x80
 80096d0:	d001      	beq.n	80096d6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e296      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096d6:	f7fc faf1 	bl	8005cbc <HAL_GetREVID>
 80096da:	4603      	mov	r3, r0
 80096dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d817      	bhi.n	8009714 <HAL_RCC_OscConfig+0x35c>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d108      	bne.n	80096fe <HAL_RCC_OscConfig+0x346>
 80096ec:	4b79      	ldr	r3, [pc, #484]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80096f4:	4a77      	ldr	r2, [pc, #476]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80096f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096fa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096fc:	e075      	b.n	80097ea <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096fe:	4b75      	ldr	r3, [pc, #468]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	069b      	lsls	r3, r3, #26
 800970c:	4971      	ldr	r1, [pc, #452]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800970e:	4313      	orrs	r3, r2
 8009710:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009712:	e06a      	b.n	80097ea <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009714:	4b6f      	ldr	r3, [pc, #444]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	061b      	lsls	r3, r3, #24
 8009722:	496c      	ldr	r1, [pc, #432]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009724:	4313      	orrs	r3, r2
 8009726:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009728:	e05f      	b.n	80097ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d042      	beq.n	80097b8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009732:	4b68      	ldr	r3, [pc, #416]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a67      	ldr	r2, [pc, #412]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973e:	f7fc fa8d 	bl	8005c5c <HAL_GetTick>
 8009742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009744:	e008      	b.n	8009758 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009746:	f7fc fa89 	bl	8005c5c <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d901      	bls.n	8009758 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e255      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009758:	4b5e      	ldr	r3, [pc, #376]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0f0      	beq.n	8009746 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009764:	f7fc faaa 	bl	8005cbc <HAL_GetREVID>
 8009768:	4603      	mov	r3, r0
 800976a:	f241 0203 	movw	r2, #4099	; 0x1003
 800976e:	4293      	cmp	r3, r2
 8009770:	d817      	bhi.n	80097a2 <HAL_RCC_OscConfig+0x3ea>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	2b20      	cmp	r3, #32
 8009778:	d108      	bne.n	800978c <HAL_RCC_OscConfig+0x3d4>
 800977a:	4b56      	ldr	r3, [pc, #344]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009782:	4a54      	ldr	r2, [pc, #336]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009788:	6053      	str	r3, [r2, #4]
 800978a:	e02e      	b.n	80097ea <HAL_RCC_OscConfig+0x432>
 800978c:	4b51      	ldr	r3, [pc, #324]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	069b      	lsls	r3, r3, #26
 800979a:	494e      	ldr	r1, [pc, #312]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800979c:	4313      	orrs	r3, r2
 800979e:	604b      	str	r3, [r1, #4]
 80097a0:	e023      	b.n	80097ea <HAL_RCC_OscConfig+0x432>
 80097a2:	4b4c      	ldr	r3, [pc, #304]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	061b      	lsls	r3, r3, #24
 80097b0:	4948      	ldr	r1, [pc, #288]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60cb      	str	r3, [r1, #12]
 80097b6:	e018      	b.n	80097ea <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80097b8:	4b46      	ldr	r3, [pc, #280]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a45      	ldr	r2, [pc, #276]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80097be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c4:	f7fc fa4a 	bl	8005c5c <HAL_GetTick>
 80097c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097ca:	e008      	b.n	80097de <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80097cc:	f7fc fa46 	bl	8005c5c <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d901      	bls.n	80097de <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e212      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097de:	4b3d      	ldr	r3, [pc, #244]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1f0      	bne.n	80097cc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0308 	and.w	r3, r3, #8
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d036      	beq.n	8009864 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d019      	beq.n	8009832 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097fe:	4b35      	ldr	r3, [pc, #212]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009802:	4a34      	ldr	r2, [pc, #208]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009804:	f043 0301 	orr.w	r3, r3, #1
 8009808:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980a:	f7fc fa27 	bl	8005c5c <HAL_GetTick>
 800980e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009810:	e008      	b.n	8009824 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009812:	f7fc fa23 	bl	8005c5c <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d901      	bls.n	8009824 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e1ef      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009824:	4b2b      	ldr	r3, [pc, #172]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0f0      	beq.n	8009812 <HAL_RCC_OscConfig+0x45a>
 8009830:	e018      	b.n	8009864 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009832:	4b28      	ldr	r3, [pc, #160]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009836:	4a27      	ldr	r2, [pc, #156]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 8009838:	f023 0301 	bic.w	r3, r3, #1
 800983c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800983e:	f7fc fa0d 	bl	8005c5c <HAL_GetTick>
 8009842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009844:	e008      	b.n	8009858 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009846:	f7fc fa09 	bl	8005c5c <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d901      	bls.n	8009858 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e1d5      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009858:	4b1e      	ldr	r3, [pc, #120]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800985a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1f0      	bne.n	8009846 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b00      	cmp	r3, #0
 800986e:	d039      	beq.n	80098e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d019      	beq.n	80098ac <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009878:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a15      	ldr	r2, [pc, #84]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 800987e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009882:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009884:	f7fc f9ea 	bl	8005c5c <HAL_GetTick>
 8009888:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800988a:	e008      	b.n	800989e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800988c:	f7fc f9e6 	bl	8005c5c <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b02      	cmp	r3, #2
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e1b2      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800989e:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0f0      	beq.n	800988c <HAL_RCC_OscConfig+0x4d4>
 80098aa:	e01b      	b.n	80098e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a08      	ldr	r2, [pc, #32]	; (80098d4 <HAL_RCC_OscConfig+0x51c>)
 80098b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098b8:	f7fc f9d0 	bl	8005c5c <HAL_GetTick>
 80098bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098be:	e00b      	b.n	80098d8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80098c0:	f7fc f9cc 	bl	8005c5c <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d904      	bls.n	80098d8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e198      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
 80098d2:	bf00      	nop
 80098d4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098d8:	4ba3      	ldr	r3, [pc, #652]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1ed      	bne.n	80098c0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8081 	beq.w	80099f4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80098f2:	4b9e      	ldr	r3, [pc, #632]	; (8009b6c <HAL_RCC_OscConfig+0x7b4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a9d      	ldr	r2, [pc, #628]	; (8009b6c <HAL_RCC_OscConfig+0x7b4>)
 80098f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098fe:	f7fc f9ad 	bl	8005c5c <HAL_GetTick>
 8009902:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009904:	e008      	b.n	8009918 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009906:	f7fc f9a9 	bl	8005c5c <HAL_GetTick>
 800990a:	4602      	mov	r2, r0
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	2b64      	cmp	r3, #100	; 0x64
 8009912:	d901      	bls.n	8009918 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009914:	2303      	movs	r3, #3
 8009916:	e175      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009918:	4b94      	ldr	r3, [pc, #592]	; (8009b6c <HAL_RCC_OscConfig+0x7b4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0f0      	beq.n	8009906 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d106      	bne.n	800993a <HAL_RCC_OscConfig+0x582>
 800992c:	4b8e      	ldr	r3, [pc, #568]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 800992e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009930:	4a8d      	ldr	r2, [pc, #564]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009932:	f043 0301 	orr.w	r3, r3, #1
 8009936:	6713      	str	r3, [r2, #112]	; 0x70
 8009938:	e02d      	b.n	8009996 <HAL_RCC_OscConfig+0x5de>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10c      	bne.n	800995c <HAL_RCC_OscConfig+0x5a4>
 8009942:	4b89      	ldr	r3, [pc, #548]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009946:	4a88      	ldr	r2, [pc, #544]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009948:	f023 0301 	bic.w	r3, r3, #1
 800994c:	6713      	str	r3, [r2, #112]	; 0x70
 800994e:	4b86      	ldr	r3, [pc, #536]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009952:	4a85      	ldr	r2, [pc, #532]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009954:	f023 0304 	bic.w	r3, r3, #4
 8009958:	6713      	str	r3, [r2, #112]	; 0x70
 800995a:	e01c      	b.n	8009996 <HAL_RCC_OscConfig+0x5de>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b05      	cmp	r3, #5
 8009962:	d10c      	bne.n	800997e <HAL_RCC_OscConfig+0x5c6>
 8009964:	4b80      	ldr	r3, [pc, #512]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009968:	4a7f      	ldr	r2, [pc, #508]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 800996a:	f043 0304 	orr.w	r3, r3, #4
 800996e:	6713      	str	r3, [r2, #112]	; 0x70
 8009970:	4b7d      	ldr	r3, [pc, #500]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009974:	4a7c      	ldr	r2, [pc, #496]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	6713      	str	r3, [r2, #112]	; 0x70
 800997c:	e00b      	b.n	8009996 <HAL_RCC_OscConfig+0x5de>
 800997e:	4b7a      	ldr	r3, [pc, #488]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	4a79      	ldr	r2, [pc, #484]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009984:	f023 0301 	bic.w	r3, r3, #1
 8009988:	6713      	str	r3, [r2, #112]	; 0x70
 800998a:	4b77      	ldr	r3, [pc, #476]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	4a76      	ldr	r2, [pc, #472]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009990:	f023 0304 	bic.w	r3, r3, #4
 8009994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d015      	beq.n	80099ca <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800999e:	f7fc f95d 	bl	8005c5c <HAL_GetTick>
 80099a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099a4:	e00a      	b.n	80099bc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099a6:	f7fc f959 	bl	8005c5c <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e123      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099bc:	4b6a      	ldr	r3, [pc, #424]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 80099be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0ee      	beq.n	80099a6 <HAL_RCC_OscConfig+0x5ee>
 80099c8:	e014      	b.n	80099f4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ca:	f7fc f947 	bl	8005c5c <HAL_GetTick>
 80099ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099d0:	e00a      	b.n	80099e8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099d2:	f7fc f943 	bl	8005c5c <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d901      	bls.n	80099e8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e10d      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099e8:	4b5f      	ldr	r3, [pc, #380]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 80099ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ec:	f003 0302 	and.w	r3, r3, #2
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1ee      	bne.n	80099d2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 8102 	beq.w	8009c02 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80099fe:	4b5a      	ldr	r3, [pc, #360]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a06:	2b18      	cmp	r3, #24
 8009a08:	f000 80bd 	beq.w	8009b86 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	f040 8095 	bne.w	8009b40 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a16:	4b54      	ldr	r3, [pc, #336]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a53      	ldr	r2, [pc, #332]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a22:	f7fc f91b 	bl	8005c5c <HAL_GetTick>
 8009a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a28:	e008      	b.n	8009a3c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a2a:	f7fc f917 	bl	8005c5c <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d901      	bls.n	8009a3c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e0e3      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a3c:	4b4a      	ldr	r3, [pc, #296]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1f0      	bne.n	8009a2a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a48:	4b47      	ldr	r3, [pc, #284]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a4c:	4b48      	ldr	r3, [pc, #288]	; (8009b70 <HAL_RCC_OscConfig+0x7b8>)
 8009a4e:	4013      	ands	r3, r2
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a58:	0112      	lsls	r2, r2, #4
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	4942      	ldr	r1, [pc, #264]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	628b      	str	r3, [r1, #40]	; 0x28
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	3b01      	subs	r3, #1
 8009a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a70:	3b01      	subs	r3, #1
 8009a72:	025b      	lsls	r3, r3, #9
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	041b      	lsls	r3, r3, #16
 8009a80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a84:	431a      	orrs	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	061b      	lsls	r3, r3, #24
 8009a8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a92:	4935      	ldr	r1, [pc, #212]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009a98:	4b33      	ldr	r3, [pc, #204]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4a32      	ldr	r2, [pc, #200]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009a9e:	f023 0301 	bic.w	r3, r3, #1
 8009aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009aa4:	4b30      	ldr	r3, [pc, #192]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aa8:	4b32      	ldr	r3, [pc, #200]	; (8009b74 <HAL_RCC_OscConfig+0x7bc>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ab0:	00d2      	lsls	r2, r2, #3
 8009ab2:	492d      	ldr	r1, [pc, #180]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ab8:	4b2b      	ldr	r3, [pc, #172]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	f023 020c 	bic.w	r2, r3, #12
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac4:	4928      	ldr	r1, [pc, #160]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009aca:	4b27      	ldr	r3, [pc, #156]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	f023 0202 	bic.w	r2, r3, #2
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad6:	4924      	ldr	r1, [pc, #144]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009adc:	4b22      	ldr	r3, [pc, #136]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	4a21      	ldr	r2, [pc, #132]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae8:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	4a1e      	ldr	r2, [pc, #120]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009af4:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	4a1b      	ldr	r2, [pc, #108]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009b00:	4b19      	ldr	r3, [pc, #100]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009b06:	f043 0301 	orr.w	r3, r3, #1
 8009b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b0c:	4b16      	ldr	r3, [pc, #88]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b18:	f7fc f8a0 	bl	8005c5c <HAL_GetTick>
 8009b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b1e:	e008      	b.n	8009b32 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b20:	f7fc f89c 	bl	8005c5c <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e068      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b32:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0f0      	beq.n	8009b20 <HAL_RCC_OscConfig+0x768>
 8009b3e:	e060      	b.n	8009c02 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b40:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a08      	ldr	r2, [pc, #32]	; (8009b68 <HAL_RCC_OscConfig+0x7b0>)
 8009b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4c:	f7fc f886 	bl	8005c5c <HAL_GetTick>
 8009b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b52:	e011      	b.n	8009b78 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b54:	f7fc f882 	bl	8005c5c <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d90a      	bls.n	8009b78 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e04e      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
 8009b6c:	58024800 	.word	0x58024800
 8009b70:	fffffc0c 	.word	0xfffffc0c
 8009b74:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b78:	4b24      	ldr	r3, [pc, #144]	; (8009c0c <HAL_RCC_OscConfig+0x854>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1e7      	bne.n	8009b54 <HAL_RCC_OscConfig+0x79c>
 8009b84:	e03d      	b.n	8009c02 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b86:	4b21      	ldr	r3, [pc, #132]	; (8009c0c <HAL_RCC_OscConfig+0x854>)
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b8c:	4b1f      	ldr	r3, [pc, #124]	; (8009c0c <HAL_RCC_OscConfig+0x854>)
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b90:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d031      	beq.n	8009bfe <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f003 0203 	and.w	r2, r3, #3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d12a      	bne.n	8009bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	091b      	lsrs	r3, r3, #4
 8009bac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d122      	bne.n	8009bfe <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d11a      	bne.n	8009bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	0a5b      	lsrs	r3, r3, #9
 8009bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d111      	bne.n	8009bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d108      	bne.n	8009bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	0e1b      	lsrs	r3, r3, #24
 8009bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d001      	beq.n	8009c02 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3730      	adds	r7, #48	; 0x30
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	58024400 	.word	0x58024400

08009c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e19c      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c24:	4b8a      	ldr	r3, [pc, #552]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 030f 	and.w	r3, r3, #15
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d910      	bls.n	8009c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c32:	4b87      	ldr	r3, [pc, #540]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f023 020f 	bic.w	r2, r3, #15
 8009c3a:	4985      	ldr	r1, [pc, #532]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c42:	4b83      	ldr	r3, [pc, #524]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d001      	beq.n	8009c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e184      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d010      	beq.n	8009c82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	4b7b      	ldr	r3, [pc, #492]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d908      	bls.n	8009c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c70:	4b78      	ldr	r3, [pc, #480]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	4975      	ldr	r1, [pc, #468]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0308 	and.w	r3, r3, #8
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d010      	beq.n	8009cb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	695a      	ldr	r2, [r3, #20]
 8009c92:	4b70      	ldr	r3, [pc, #448]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d908      	bls.n	8009cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c9e:	4b6d      	ldr	r3, [pc, #436]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	496a      	ldr	r1, [pc, #424]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cac:	4313      	orrs	r3, r2
 8009cae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d010      	beq.n	8009cde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699a      	ldr	r2, [r3, #24]
 8009cc0:	4b64      	ldr	r3, [pc, #400]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d908      	bls.n	8009cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ccc:	4b61      	ldr	r3, [pc, #388]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	495e      	ldr	r1, [pc, #376]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0320 	and.w	r3, r3, #32
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d010      	beq.n	8009d0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69da      	ldr	r2, [r3, #28]
 8009cee:	4b59      	ldr	r3, [pc, #356]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d908      	bls.n	8009d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009cfa:	4b56      	ldr	r3, [pc, #344]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	4953      	ldr	r1, [pc, #332]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d010      	beq.n	8009d3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	4b4d      	ldr	r3, [pc, #308]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	f003 030f 	and.w	r3, r3, #15
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d908      	bls.n	8009d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d28:	4b4a      	ldr	r3, [pc, #296]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	f023 020f 	bic.w	r2, r3, #15
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	4947      	ldr	r1, [pc, #284]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d055      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009d46:	4b43      	ldr	r3, [pc, #268]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	4940      	ldr	r1, [pc, #256]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d54:	4313      	orrs	r3, r2
 8009d56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d107      	bne.n	8009d70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d60:	4b3c      	ldr	r3, [pc, #240]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d121      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0f6      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d107      	bne.n	8009d88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d78:	4b36      	ldr	r3, [pc, #216]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d115      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0ea      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d107      	bne.n	8009da0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d90:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d109      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e0de      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009da0:	4b2c      	ldr	r3, [pc, #176]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0d6      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009db0:	4b28      	ldr	r3, [pc, #160]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f023 0207 	bic.w	r2, r3, #7
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4925      	ldr	r1, [pc, #148]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc2:	f7fb ff4b 	bl	8005c5c <HAL_GetTick>
 8009dc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dc8:	e00a      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dca:	f7fb ff47 	bl	8005c5c <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d901      	bls.n	8009de0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e0be      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009de0:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d1eb      	bne.n	8009dca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d010      	beq.n	8009e20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68da      	ldr	r2, [r3, #12]
 8009e02:	4b14      	ldr	r3, [pc, #80]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d208      	bcs.n	8009e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e0e:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f023 020f 	bic.w	r2, r3, #15
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	490e      	ldr	r1, [pc, #56]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d214      	bcs.n	8009e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e2e:	4b08      	ldr	r3, [pc, #32]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f023 020f 	bic.w	r2, r3, #15
 8009e36:	4906      	ldr	r1, [pc, #24]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e3e:	4b04      	ldr	r3, [pc, #16]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d005      	beq.n	8009e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e086      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
 8009e50:	52002000 	.word	0x52002000
 8009e54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0304 	and.w	r3, r3, #4
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d010      	beq.n	8009e86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	4b3f      	ldr	r3, [pc, #252]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d208      	bcs.n	8009e86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e74:	4b3c      	ldr	r3, [pc, #240]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	4939      	ldr	r1, [pc, #228]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d010      	beq.n	8009eb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695a      	ldr	r2, [r3, #20]
 8009e96:	4b34      	ldr	r3, [pc, #208]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d208      	bcs.n	8009eb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ea2:	4b31      	ldr	r3, [pc, #196]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	492e      	ldr	r1, [pc, #184]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0310 	and.w	r3, r3, #16
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d010      	beq.n	8009ee2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	699a      	ldr	r2, [r3, #24]
 8009ec4:	4b28      	ldr	r3, [pc, #160]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d208      	bcs.n	8009ee2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ed0:	4b25      	ldr	r3, [pc, #148]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	4922      	ldr	r1, [pc, #136]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d010      	beq.n	8009f10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	69da      	ldr	r2, [r3, #28]
 8009ef2:	4b1d      	ldr	r3, [pc, #116]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d208      	bcs.n	8009f10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009efe:	4b1a      	ldr	r3, [pc, #104]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	4917      	ldr	r1, [pc, #92]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f10:	f000 f834 	bl	8009f7c <HAL_RCC_GetSysClockFreq>
 8009f14:	4602      	mov	r2, r0
 8009f16:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	0a1b      	lsrs	r3, r3, #8
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	4912      	ldr	r1, [pc, #72]	; (8009f6c <HAL_RCC_ClockConfig+0x35c>)
 8009f22:	5ccb      	ldrb	r3, [r1, r3]
 8009f24:	f003 031f 	and.w	r3, r3, #31
 8009f28:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f2e:	4b0e      	ldr	r3, [pc, #56]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	f003 030f 	and.w	r3, r3, #15
 8009f36:	4a0d      	ldr	r2, [pc, #52]	; (8009f6c <HAL_RCC_ClockConfig+0x35c>)
 8009f38:	5cd3      	ldrb	r3, [r2, r3]
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	4a0a      	ldr	r2, [pc, #40]	; (8009f70 <HAL_RCC_ClockConfig+0x360>)
 8009f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f48:	4a0a      	ldr	r2, [pc, #40]	; (8009f74 <HAL_RCC_ClockConfig+0x364>)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <HAL_RCC_ClockConfig+0x368>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fb fe38 	bl	8005bc8 <HAL_InitTick>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
 8009f6c:	08012918 	.word	0x08012918
 8009f70:	24000030 	.word	0x24000030
 8009f74:	2400002c 	.word	0x2400002c
 8009f78:	24000034 	.word	0x24000034

08009f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b089      	sub	sp, #36	; 0x24
 8009f80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f82:	4bb3      	ldr	r3, [pc, #716]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f8a:	2b18      	cmp	r3, #24
 8009f8c:	f200 8155 	bhi.w	800a23a <HAL_RCC_GetSysClockFreq+0x2be>
 8009f90:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f96:	bf00      	nop
 8009f98:	08009ffd 	.word	0x08009ffd
 8009f9c:	0800a23b 	.word	0x0800a23b
 8009fa0:	0800a23b 	.word	0x0800a23b
 8009fa4:	0800a23b 	.word	0x0800a23b
 8009fa8:	0800a23b 	.word	0x0800a23b
 8009fac:	0800a23b 	.word	0x0800a23b
 8009fb0:	0800a23b 	.word	0x0800a23b
 8009fb4:	0800a23b 	.word	0x0800a23b
 8009fb8:	0800a023 	.word	0x0800a023
 8009fbc:	0800a23b 	.word	0x0800a23b
 8009fc0:	0800a23b 	.word	0x0800a23b
 8009fc4:	0800a23b 	.word	0x0800a23b
 8009fc8:	0800a23b 	.word	0x0800a23b
 8009fcc:	0800a23b 	.word	0x0800a23b
 8009fd0:	0800a23b 	.word	0x0800a23b
 8009fd4:	0800a23b 	.word	0x0800a23b
 8009fd8:	0800a029 	.word	0x0800a029
 8009fdc:	0800a23b 	.word	0x0800a23b
 8009fe0:	0800a23b 	.word	0x0800a23b
 8009fe4:	0800a23b 	.word	0x0800a23b
 8009fe8:	0800a23b 	.word	0x0800a23b
 8009fec:	0800a23b 	.word	0x0800a23b
 8009ff0:	0800a23b 	.word	0x0800a23b
 8009ff4:	0800a23b 	.word	0x0800a23b
 8009ff8:	0800a02f 	.word	0x0800a02f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ffc:	4b94      	ldr	r3, [pc, #592]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d009      	beq.n	800a01c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a008:	4b91      	ldr	r3, [pc, #580]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	08db      	lsrs	r3, r3, #3
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	4a90      	ldr	r2, [pc, #576]	; (800a254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
 800a018:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a01a:	e111      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a01c:	4b8d      	ldr	r3, [pc, #564]	; (800a254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a01e:	61bb      	str	r3, [r7, #24]
    break;
 800a020:	e10e      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a022:	4b8d      	ldr	r3, [pc, #564]	; (800a258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a024:	61bb      	str	r3, [r7, #24]
    break;
 800a026:	e10b      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a028:	4b8c      	ldr	r3, [pc, #560]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a02a:	61bb      	str	r3, [r7, #24]
    break;
 800a02c:	e108      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a02e:	4b88      	ldr	r3, [pc, #544]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a038:	4b85      	ldr	r3, [pc, #532]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03c:	091b      	lsrs	r3, r3, #4
 800a03e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a042:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a044:	4b82      	ldr	r3, [pc, #520]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a04e:	4b80      	ldr	r3, [pc, #512]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a052:	08db      	lsrs	r3, r3, #3
 800a054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	fb02 f303 	mul.w	r3, r2, r3
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 80e1 	beq.w	800a234 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b02      	cmp	r3, #2
 800a076:	f000 8083 	beq.w	800a180 <HAL_RCC_GetSysClockFreq+0x204>
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	f200 80a1 	bhi.w	800a1c4 <HAL_RCC_GetSysClockFreq+0x248>
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <HAL_RCC_GetSysClockFreq+0x114>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d056      	beq.n	800a13c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a08e:	e099      	b.n	800a1c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a090:	4b6f      	ldr	r3, [pc, #444]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0320 	and.w	r3, r3, #32
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d02d      	beq.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a09c:	4b6c      	ldr	r3, [pc, #432]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	08db      	lsrs	r3, r3, #3
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	4a6b      	ldr	r2, [pc, #428]	; (800a254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	ee07 3a90 	vmov	s15, r3
 800a0b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c6:	4b62      	ldr	r3, [pc, #392]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0da:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a260 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a0f6:	e087      	b.n	800a208 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a264 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10a:	4b51      	ldr	r3, [pc, #324]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a11e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a260 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a13a:	e065      	b.n	800a208 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a268 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14e:	4b40      	ldr	r3, [pc, #256]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a162:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a260 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a17e:	e043      	b.n	800a208 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a26c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a192:	4b2f      	ldr	r3, [pc, #188]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a260 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1c2:	e021      	b.n	800a208 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	ee07 3a90 	vmov	s15, r3
 800a1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a268 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d6:	4b1e      	ldr	r3, [pc, #120]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1de:	ee07 3a90 	vmov	s15, r3
 800a1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a260 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a206:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a208:	4b11      	ldr	r3, [pc, #68]	; (800a250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20c:	0a5b      	lsrs	r3, r3, #9
 800a20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a212:	3301      	adds	r3, #1
 800a214:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a220:	edd7 6a07 	vldr	s13, [r7, #28]
 800a224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a22c:	ee17 3a90 	vmov	r3, s15
 800a230:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a232:	e005      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a234:	2300      	movs	r3, #0
 800a236:	61bb      	str	r3, [r7, #24]
    break;
 800a238:	e002      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a23c:	61bb      	str	r3, [r7, #24]
    break;
 800a23e:	bf00      	nop
  }

  return sysclockfreq;
 800a240:	69bb      	ldr	r3, [r7, #24]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3724      	adds	r7, #36	; 0x24
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	58024400 	.word	0x58024400
 800a254:	03d09000 	.word	0x03d09000
 800a258:	003d0900 	.word	0x003d0900
 800a25c:	02dc6c00 	.word	0x02dc6c00
 800a260:	46000000 	.word	0x46000000
 800a264:	4c742400 	.word	0x4c742400
 800a268:	4a742400 	.word	0x4a742400
 800a26c:	4c371b00 	.word	0x4c371b00

0800a270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a276:	f7ff fe81 	bl	8009f7c <HAL_RCC_GetSysClockFreq>
 800a27a:	4602      	mov	r2, r0
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	0a1b      	lsrs	r3, r3, #8
 800a282:	f003 030f 	and.w	r3, r3, #15
 800a286:	490f      	ldr	r1, [pc, #60]	; (800a2c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a288:	5ccb      	ldrb	r3, [r1, r3]
 800a28a:	f003 031f 	and.w	r3, r3, #31
 800a28e:	fa22 f303 	lsr.w	r3, r2, r3
 800a292:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a294:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	4a09      	ldr	r2, [pc, #36]	; (800a2c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a29e:	5cd3      	ldrb	r3, [r2, r3]
 800a2a0:	f003 031f 	and.w	r3, r3, #31
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2aa:	4a07      	ldr	r2, [pc, #28]	; (800a2c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2ae:	4a07      	ldr	r2, [pc, #28]	; (800a2cc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a2b4:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	08012918 	.word	0x08012918
 800a2c8:	24000030 	.word	0x24000030
 800a2cc:	2400002c 	.word	0x2400002c

0800a2d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a2d4:	f7ff ffcc 	bl	800a270 <HAL_RCC_GetHCLKFreq>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	091b      	lsrs	r3, r3, #4
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	4904      	ldr	r1, [pc, #16]	; (800a2f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a2e6:	5ccb      	ldrb	r3, [r1, r3]
 800a2e8:	f003 031f 	and.w	r3, r3, #31
 800a2ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	58024400 	.word	0x58024400
 800a2f8:	08012918 	.word	0x08012918

0800a2fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a300:	f7ff ffb6 	bl	800a270 <HAL_RCC_GetHCLKFreq>
 800a304:	4602      	mov	r2, r0
 800a306:	4b06      	ldr	r3, [pc, #24]	; (800a320 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	0a1b      	lsrs	r3, r3, #8
 800a30c:	f003 0307 	and.w	r3, r3, #7
 800a310:	4904      	ldr	r1, [pc, #16]	; (800a324 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a312:	5ccb      	ldrb	r3, [r1, r3]
 800a314:	f003 031f 	and.w	r3, r3, #31
 800a318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	58024400 	.word	0x58024400
 800a324:	08012918 	.word	0x08012918

0800a328 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a330:	2300      	movs	r3, #0
 800a332:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a334:	2300      	movs	r3, #0
 800a336:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d03f      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a34c:	d02a      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a34e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a352:	d824      	bhi.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a358:	d018      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a35a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a35e:	d81e      	bhi.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a368:	d007      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a36a:	e018      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a36c:	4bab      	ldr	r3, [pc, #684]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	4aaa      	ldr	r2, [pc, #680]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a378:	e015      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3304      	adds	r3, #4
 800a37e:	2102      	movs	r1, #2
 800a380:	4618      	mov	r0, r3
 800a382:	f001 f9cf 	bl	800b724 <RCCEx_PLL2_Config>
 800a386:	4603      	mov	r3, r0
 800a388:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a38a:	e00c      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3324      	adds	r3, #36	; 0x24
 800a390:	2102      	movs	r1, #2
 800a392:	4618      	mov	r0, r3
 800a394:	f001 fa78 	bl	800b888 <RCCEx_PLL3_Config>
 800a398:	4603      	mov	r3, r0
 800a39a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a39c:	e003      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a2:	e000      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a3a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3a6:	7dfb      	ldrb	r3, [r7, #23]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d109      	bne.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a3ac:	4b9b      	ldr	r3, [pc, #620]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3b8:	4998      	ldr	r1, [pc, #608]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	650b      	str	r3, [r1, #80]	; 0x50
 800a3be:	e001      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d03d      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d826      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a3f5 	.word	0x0800a3f5
 800a3e4:	0800a403 	.word	0x0800a403
 800a3e8:	0800a415 	.word	0x0800a415
 800a3ec:	0800a42d 	.word	0x0800a42d
 800a3f0:	0800a42d 	.word	0x0800a42d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3f4:	4b89      	ldr	r3, [pc, #548]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f8:	4a88      	ldr	r2, [pc, #544]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a400:	e015      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3304      	adds	r3, #4
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 f98b 	bl	800b724 <RCCEx_PLL2_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a412:	e00c      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3324      	adds	r3, #36	; 0x24
 800a418:	2100      	movs	r1, #0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 fa34 	bl	800b888 <RCCEx_PLL3_Config>
 800a420:	4603      	mov	r3, r0
 800a422:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a424:	e003      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	75fb      	strb	r3, [r7, #23]
      break;
 800a42a:	e000      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a42c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d109      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a434:	4b79      	ldr	r3, [pc, #484]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a438:	f023 0207 	bic.w	r2, r3, #7
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a440:	4976      	ldr	r1, [pc, #472]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a442:	4313      	orrs	r3, r2
 800a444:	650b      	str	r3, [r1, #80]	; 0x50
 800a446:	e001      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a454:	2b00      	cmp	r3, #0
 800a456:	d042      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a460:	d02b      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a466:	d825      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a468:	2bc0      	cmp	r3, #192	; 0xc0
 800a46a:	d028      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a46c:	2bc0      	cmp	r3, #192	; 0xc0
 800a46e:	d821      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a470:	2b80      	cmp	r3, #128	; 0x80
 800a472:	d016      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a474:	2b80      	cmp	r3, #128	; 0x80
 800a476:	d81d      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a47c:	2b40      	cmp	r3, #64	; 0x40
 800a47e:	d007      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a480:	e018      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a482:	4b66      	ldr	r3, [pc, #408]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	4a65      	ldr	r2, [pc, #404]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a48c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a48e:	e017      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3304      	adds	r3, #4
 800a494:	2100      	movs	r1, #0
 800a496:	4618      	mov	r0, r3
 800a498:	f001 f944 	bl	800b724 <RCCEx_PLL2_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a4a0:	e00e      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3324      	adds	r3, #36	; 0x24
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f001 f9ed 	bl	800b888 <RCCEx_PLL3_Config>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a4b2:	e005      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b8:	e002      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a4ba:	bf00      	nop
 800a4bc:	e000      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a4be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d109      	bne.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a4c6:	4b55      	ldr	r3, [pc, #340]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d2:	4952      	ldr	r1, [pc, #328]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	650b      	str	r3, [r1, #80]	; 0x50
 800a4d8:	e001      	b.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d049      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4f4:	d030      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a4f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4fa:	d82a      	bhi.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a4fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a500:	d02c      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a502:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a506:	d824      	bhi.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a50c:	d018      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a50e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a512:	d81e      	bhi.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a51c:	d007      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a51e:	e018      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a520:	4b3e      	ldr	r3, [pc, #248]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4a3d      	ldr	r2, [pc, #244]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a52a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a52c:	e017      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3304      	adds	r3, #4
 800a532:	2100      	movs	r1, #0
 800a534:	4618      	mov	r0, r3
 800a536:	f001 f8f5 	bl	800b724 <RCCEx_PLL2_Config>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a53e:	e00e      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3324      	adds	r3, #36	; 0x24
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f001 f99e 	bl	800b888 <RCCEx_PLL3_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a550:	e005      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	75fb      	strb	r3, [r7, #23]
      break;
 800a556:	e002      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a558:	bf00      	nop
 800a55a:	e000      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a55c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10a      	bne.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a564:	4b2d      	ldr	r3, [pc, #180]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a568:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a572:	492a      	ldr	r1, [pc, #168]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a574:	4313      	orrs	r3, r2
 800a576:	658b      	str	r3, [r1, #88]	; 0x58
 800a578:	e001      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a586:	2b00      	cmp	r3, #0
 800a588:	d04c      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a594:	d030      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a59a:	d82a      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a59c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5a0:	d02c      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a5a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5a6:	d824      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5ac:	d018      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a5ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5b2:	d81e      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a5b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5bc:	d007      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a5be:	e018      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c0:	4b16      	ldr	r3, [pc, #88]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	4a15      	ldr	r2, [pc, #84]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a5cc:	e017      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 f8a5 	bl	800b724 <RCCEx_PLL2_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a5de:	e00e      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3324      	adds	r3, #36	; 0x24
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f001 f94e 	bl	800b888 <RCCEx_PLL3_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a5f0:	e005      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f6:	e002      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a5f8:	bf00      	nop
 800a5fa:	e000      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a5fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10d      	bne.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a608:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a612:	4902      	ldr	r1, [pc, #8]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a614:	4313      	orrs	r3, r2
 800a616:	658b      	str	r3, [r1, #88]	; 0x58
 800a618:	e004      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a61a:	bf00      	nop
 800a61c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d032      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a634:	2b30      	cmp	r3, #48	; 0x30
 800a636:	d01c      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a638:	2b30      	cmp	r3, #48	; 0x30
 800a63a:	d817      	bhi.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a63c:	2b20      	cmp	r3, #32
 800a63e:	d00c      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a640:	2b20      	cmp	r3, #32
 800a642:	d813      	bhi.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d016      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a648:	2b10      	cmp	r3, #16
 800a64a:	d10f      	bne.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a64c:	4baf      	ldr	r3, [pc, #700]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	4aae      	ldr	r2, [pc, #696]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a658:	e00e      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3304      	adds	r3, #4
 800a65e:	2102      	movs	r1, #2
 800a660:	4618      	mov	r0, r3
 800a662:	f001 f85f 	bl	800b724 <RCCEx_PLL2_Config>
 800a666:	4603      	mov	r3, r0
 800a668:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a66a:	e005      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]
      break;
 800a670:	e002      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a672:	bf00      	nop
 800a674:	e000      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a676:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a678:	7dfb      	ldrb	r3, [r7, #23]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a67e:	4ba3      	ldr	r3, [pc, #652]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a682:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a68a:	49a0      	ldr	r1, [pc, #640]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a690:	e001      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a692:	7dfb      	ldrb	r3, [r7, #23]
 800a694:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d047      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6aa:	d030      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a6ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b0:	d82a      	bhi.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a6b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6b6:	d02c      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a6b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6bc:	d824      	bhi.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a6be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c2:	d018      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a6c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c8:	d81e      	bhi.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d2:	d007      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a6d4:	e018      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d6:	4b8d      	ldr	r3, [pc, #564]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6da:	4a8c      	ldr	r2, [pc, #560]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a6dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a6e2:	e017      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f001 f81a 	bl	800b724 <RCCEx_PLL2_Config>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a6f4:	e00e      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3324      	adds	r3, #36	; 0x24
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f8c3 	bl	800b888 <RCCEx_PLL3_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a706:	e005      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	75fb      	strb	r3, [r7, #23]
      break;
 800a70c:	e002      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a70e:	bf00      	nop
 800a710:	e000      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a712:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a71a:	4b7c      	ldr	r3, [pc, #496]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a726:	4979      	ldr	r1, [pc, #484]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	650b      	str	r3, [r1, #80]	; 0x50
 800a72c:	e001      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d049      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a746:	d02e      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a74c:	d828      	bhi.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a74e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a752:	d02a      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a758:	d822      	bhi.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a75a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a75e:	d026      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a760:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a764:	d81c      	bhi.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a76a:	d010      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a76c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a770:	d816      	bhi.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d01d      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77a:	d111      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3304      	adds	r3, #4
 800a780:	2101      	movs	r1, #1
 800a782:	4618      	mov	r0, r3
 800a784:	f000 ffce 	bl	800b724 <RCCEx_PLL2_Config>
 800a788:	4603      	mov	r3, r0
 800a78a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a78c:	e012      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3324      	adds	r3, #36	; 0x24
 800a792:	2101      	movs	r1, #1
 800a794:	4618      	mov	r0, r3
 800a796:	f001 f877 	bl	800b888 <RCCEx_PLL3_Config>
 800a79a:	4603      	mov	r3, r0
 800a79c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a79e:	e009      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a4:	e006      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7a6:	bf00      	nop
 800a7a8:	e004      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7aa:	bf00      	nop
 800a7ac:	e002      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7ae:	bf00      	nop
 800a7b0:	e000      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7ba:	4b54      	ldr	r3, [pc, #336]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c6:	4951      	ldr	r1, [pc, #324]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	650b      	str	r3, [r1, #80]	; 0x50
 800a7cc:	e001      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d04b      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7e8:	d02e      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a7ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7ee:	d828      	bhi.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f4:	d02a      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7fa:	d822      	bhi.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a7fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a800:	d026      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a806:	d81c      	bhi.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a80c:	d010      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a80e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a812:	d816      	bhi.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01d      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a81c:	d111      	bne.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3304      	adds	r3, #4
 800a822:	2101      	movs	r1, #1
 800a824:	4618      	mov	r0, r3
 800a826:	f000 ff7d 	bl	800b724 <RCCEx_PLL2_Config>
 800a82a:	4603      	mov	r3, r0
 800a82c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a82e:	e012      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3324      	adds	r3, #36	; 0x24
 800a834:	2101      	movs	r1, #1
 800a836:	4618      	mov	r0, r3
 800a838:	f001 f826 	bl	800b888 <RCCEx_PLL3_Config>
 800a83c:	4603      	mov	r3, r0
 800a83e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a840:	e009      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
      break;
 800a846:	e006      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a848:	bf00      	nop
 800a84a:	e004      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a84c:	bf00      	nop
 800a84e:	e002      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a850:	bf00      	nop
 800a852:	e000      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a854:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a85c:	4b2b      	ldr	r3, [pc, #172]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a860:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a86a:	4928      	ldr	r1, [pc, #160]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	658b      	str	r3, [r1, #88]	; 0x58
 800a870:	e001      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d02f      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a88a:	d00e      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a88c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a890:	d814      	bhi.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d015      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a89a:	d10f      	bne.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a89c:	4b1b      	ldr	r3, [pc, #108]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a0:	4a1a      	ldr	r2, [pc, #104]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a8a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a8a8:	e00c      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 ff37 	bl	800b724 <RCCEx_PLL2_Config>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a8ba:	e003      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c0:	e000      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a8c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8c4:	7dfb      	ldrb	r3, [r7, #23]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d109      	bne.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a8ca:	4b10      	ldr	r3, [pc, #64]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d6:	490d      	ldr	r1, [pc, #52]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	650b      	str	r3, [r1, #80]	; 0x50
 800a8dc:	e001      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
 800a8e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d033      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	d81c      	bhi.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a8f6:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fc:	0800a937 	.word	0x0800a937
 800a900:	0800a911 	.word	0x0800a911
 800a904:	0800a91f 	.word	0x0800a91f
 800a908:	0800a937 	.word	0x0800a937
 800a90c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a910:	4bb8      	ldr	r3, [pc, #736]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	4ab7      	ldr	r2, [pc, #732]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a91a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a91c:	e00c      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3304      	adds	r3, #4
 800a922:	2102      	movs	r1, #2
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fefd 	bl	800b724 <RCCEx_PLL2_Config>
 800a92a:	4603      	mov	r3, r0
 800a92c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a92e:	e003      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	75fb      	strb	r3, [r7, #23]
      break;
 800a934:	e000      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a936:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d109      	bne.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a93e:	4bad      	ldr	r3, [pc, #692]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a942:	f023 0203 	bic.w	r2, r3, #3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a94a:	49aa      	ldr	r1, [pc, #680]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a94c:	4313      	orrs	r3, r2
 800a94e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a950:	e001      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 8086 	beq.w	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a964:	4ba4      	ldr	r3, [pc, #656]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4aa3      	ldr	r2, [pc, #652]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a96a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a96e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a970:	f7fb f974 	bl	8005c5c <HAL_GetTick>
 800a974:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a976:	e009      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a978:	f7fb f970 	bl	8005c5c <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b64      	cmp	r3, #100	; 0x64
 800a984:	d902      	bls.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	75fb      	strb	r3, [r7, #23]
        break;
 800a98a:	e005      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a98c:	4b9a      	ldr	r3, [pc, #616]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0ef      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d166      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a99e:	4b95      	ldr	r3, [pc, #596]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9a8:	4053      	eors	r3, r2
 800a9aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d013      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9b2:	4b90      	ldr	r3, [pc, #576]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9bc:	4b8d      	ldr	r3, [pc, #564]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c0:	4a8c      	ldr	r2, [pc, #560]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9c8:	4b8a      	ldr	r3, [pc, #552]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9cc:	4a89      	ldr	r2, [pc, #548]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a9d4:	4a87      	ldr	r2, [pc, #540]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9e4:	d115      	bne.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e6:	f7fb f939 	bl	8005c5c <HAL_GetTick>
 800a9ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9ec:	e00b      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9ee:	f7fb f935 	bl	8005c5c <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d902      	bls.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	75fb      	strb	r3, [r7, #23]
            break;
 800aa04:	e005      	b.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa06:	4b7b      	ldr	r3, [pc, #492]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0ed      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d126      	bne.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa26:	d10d      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800aa28:	4b72      	ldr	r3, [pc, #456]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa36:	0919      	lsrs	r1, r3, #4
 800aa38:	4b70      	ldr	r3, [pc, #448]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800aa3a:	400b      	ands	r3, r1
 800aa3c:	496d      	ldr	r1, [pc, #436]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	610b      	str	r3, [r1, #16]
 800aa42:	e005      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800aa44:	4b6b      	ldr	r3, [pc, #428]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	4a6a      	ldr	r2, [pc, #424]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa4e:	6113      	str	r3, [r2, #16]
 800aa50:	4b68      	ldr	r3, [pc, #416]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa5e:	4965      	ldr	r1, [pc, #404]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	670b      	str	r3, [r1, #112]	; 0x70
 800aa64:	e004      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	75bb      	strb	r3, [r7, #22]
 800aa6a:	e001      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d07e      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa80:	2b28      	cmp	r3, #40	; 0x28
 800aa82:	d867      	bhi.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800aa84:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800ab5b 	.word	0x0800ab5b
 800aa90:	0800ab55 	.word	0x0800ab55
 800aa94:	0800ab55 	.word	0x0800ab55
 800aa98:	0800ab55 	.word	0x0800ab55
 800aa9c:	0800ab55 	.word	0x0800ab55
 800aaa0:	0800ab55 	.word	0x0800ab55
 800aaa4:	0800ab55 	.word	0x0800ab55
 800aaa8:	0800ab55 	.word	0x0800ab55
 800aaac:	0800ab31 	.word	0x0800ab31
 800aab0:	0800ab55 	.word	0x0800ab55
 800aab4:	0800ab55 	.word	0x0800ab55
 800aab8:	0800ab55 	.word	0x0800ab55
 800aabc:	0800ab55 	.word	0x0800ab55
 800aac0:	0800ab55 	.word	0x0800ab55
 800aac4:	0800ab55 	.word	0x0800ab55
 800aac8:	0800ab55 	.word	0x0800ab55
 800aacc:	0800ab43 	.word	0x0800ab43
 800aad0:	0800ab55 	.word	0x0800ab55
 800aad4:	0800ab55 	.word	0x0800ab55
 800aad8:	0800ab55 	.word	0x0800ab55
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab55 	.word	0x0800ab55
 800aae4:	0800ab55 	.word	0x0800ab55
 800aae8:	0800ab55 	.word	0x0800ab55
 800aaec:	0800ab5b 	.word	0x0800ab5b
 800aaf0:	0800ab55 	.word	0x0800ab55
 800aaf4:	0800ab55 	.word	0x0800ab55
 800aaf8:	0800ab55 	.word	0x0800ab55
 800aafc:	0800ab55 	.word	0x0800ab55
 800ab00:	0800ab55 	.word	0x0800ab55
 800ab04:	0800ab55 	.word	0x0800ab55
 800ab08:	0800ab55 	.word	0x0800ab55
 800ab0c:	0800ab5b 	.word	0x0800ab5b
 800ab10:	0800ab55 	.word	0x0800ab55
 800ab14:	0800ab55 	.word	0x0800ab55
 800ab18:	0800ab55 	.word	0x0800ab55
 800ab1c:	0800ab55 	.word	0x0800ab55
 800ab20:	0800ab55 	.word	0x0800ab55
 800ab24:	0800ab55 	.word	0x0800ab55
 800ab28:	0800ab55 	.word	0x0800ab55
 800ab2c:	0800ab5b 	.word	0x0800ab5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3304      	adds	r3, #4
 800ab34:	2101      	movs	r1, #1
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fdf4 	bl	800b724 <RCCEx_PLL2_Config>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ab40:	e00c      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3324      	adds	r3, #36	; 0x24
 800ab46:	2101      	movs	r1, #1
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 fe9d 	bl	800b888 <RCCEx_PLL3_Config>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ab52:	e003      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	75fb      	strb	r3, [r7, #23]
      break;
 800ab58:	e000      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800ab5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ab62:	4b24      	ldr	r3, [pc, #144]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab6e:	4921      	ldr	r1, [pc, #132]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	654b      	str	r3, [r1, #84]	; 0x54
 800ab74:	e001      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d03e      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab8a:	2b05      	cmp	r3, #5
 800ab8c:	d820      	bhi.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800ab8e:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800abd7 	.word	0x0800abd7
 800ab98:	0800abad 	.word	0x0800abad
 800ab9c:	0800abbf 	.word	0x0800abbf
 800aba0:	0800abd7 	.word	0x0800abd7
 800aba4:	0800abd7 	.word	0x0800abd7
 800aba8:	0800abd7 	.word	0x0800abd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3304      	adds	r3, #4
 800abb0:	2101      	movs	r1, #1
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fdb6 	bl	800b724 <RCCEx_PLL2_Config>
 800abb8:	4603      	mov	r3, r0
 800abba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800abbc:	e00c      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3324      	adds	r3, #36	; 0x24
 800abc2:	2101      	movs	r1, #1
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fe5f 	bl	800b888 <RCCEx_PLL3_Config>
 800abca:	4603      	mov	r3, r0
 800abcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800abce:	e003      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	75fb      	strb	r3, [r7, #23]
      break;
 800abd4:	e000      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800abd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d110      	bne.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800abde:	4b05      	ldr	r3, [pc, #20]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800abe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe2:	f023 0207 	bic.w	r2, r3, #7
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abea:	4902      	ldr	r1, [pc, #8]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800abec:	4313      	orrs	r3, r2
 800abee:	654b      	str	r3, [r1, #84]	; 0x54
 800abf0:	e008      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800abf2:	bf00      	nop
 800abf4:	58024400 	.word	0x58024400
 800abf8:	58024800 	.word	0x58024800
 800abfc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d039      	beq.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac16:	2b05      	cmp	r3, #5
 800ac18:	d820      	bhi.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ac1a:	a201      	add	r2, pc, #4	; (adr r2, 800ac20 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac63 	.word	0x0800ac63
 800ac24:	0800ac39 	.word	0x0800ac39
 800ac28:	0800ac4b 	.word	0x0800ac4b
 800ac2c:	0800ac63 	.word	0x0800ac63
 800ac30:	0800ac63 	.word	0x0800ac63
 800ac34:	0800ac63 	.word	0x0800ac63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 fd70 	bl	800b724 <RCCEx_PLL2_Config>
 800ac44:	4603      	mov	r3, r0
 800ac46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ac48:	e00c      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3324      	adds	r3, #36	; 0x24
 800ac4e:	2101      	movs	r1, #1
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 fe19 	bl	800b888 <RCCEx_PLL3_Config>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ac5a:	e003      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac60:	e000      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800ac62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10a      	bne.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac6a:	4bb7      	ldr	r3, [pc, #732]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6e:	f023 0207 	bic.w	r2, r3, #7
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac78:	49b3      	ldr	r1, [pc, #716]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	658b      	str	r3, [r1, #88]	; 0x58
 800ac7e:	e001      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0320 	and.w	r3, r3, #32
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d04b      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac9a:	d02e      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800ac9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aca0:	d828      	bhi.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca6:	d02a      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800aca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acac:	d822      	bhi.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800acae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acb2:	d026      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800acb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acb8:	d81c      	bhi.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800acba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acbe:	d010      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800acc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acc4:	d816      	bhi.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d01d      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800acca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acce:	d111      	bne.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3304      	adds	r3, #4
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fd24 	bl	800b724 <RCCEx_PLL2_Config>
 800acdc:	4603      	mov	r3, r0
 800acde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ace0:	e012      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3324      	adds	r3, #36	; 0x24
 800ace6:	2102      	movs	r1, #2
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fdcd 	bl	800b888 <RCCEx_PLL3_Config>
 800acee:	4603      	mov	r3, r0
 800acf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800acf2:	e009      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	75fb      	strb	r3, [r7, #23]
      break;
 800acf8:	e006      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800acfa:	bf00      	nop
 800acfc:	e004      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800acfe:	bf00      	nop
 800ad00:	e002      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ad02:	bf00      	nop
 800ad04:	e000      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ad06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad0e:	4b8e      	ldr	r3, [pc, #568]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad1c:	498a      	ldr	r1, [pc, #552]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	654b      	str	r3, [r1, #84]	; 0x54
 800ad22:	e001      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d04b      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad3e:	d02e      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800ad40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad44:	d828      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad4a:	d02a      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800ad4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad50:	d822      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad56:	d026      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ad58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad5c:	d81c      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad62:	d010      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ad64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad68:	d816      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01d      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ad6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad72:	d111      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3304      	adds	r3, #4
 800ad78:	2100      	movs	r1, #0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fcd2 	bl	800b724 <RCCEx_PLL2_Config>
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad84:	e012      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3324      	adds	r3, #36	; 0x24
 800ad8a:	2102      	movs	r1, #2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fd7b 	bl	800b888 <RCCEx_PLL3_Config>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad96:	e009      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad9c:	e006      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad9e:	bf00      	nop
 800ada0:	e004      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ada2:	bf00      	nop
 800ada4:	e002      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ada6:	bf00      	nop
 800ada8:	e000      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800adaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adac:	7dfb      	ldrb	r3, [r7, #23]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800adb2:	4b65      	ldr	r3, [pc, #404]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800adb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adc0:	4961      	ldr	r1, [pc, #388]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	658b      	str	r3, [r1, #88]	; 0x58
 800adc6:	e001      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add4:	2b00      	cmp	r3, #0
 800add6:	d04b      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ade2:	d02e      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ade4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ade8:	d828      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800adea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adee:	d02a      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800adf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adf4:	d822      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800adf6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800adfa:	d026      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800adfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ae00:	d81c      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ae02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae06:	d010      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ae08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae0c:	d816      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d01d      	beq.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ae12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae16:	d111      	bne.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 fc80 	bl	800b724 <RCCEx_PLL2_Config>
 800ae24:	4603      	mov	r3, r0
 800ae26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ae28:	e012      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3324      	adds	r3, #36	; 0x24
 800ae2e:	2102      	movs	r1, #2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fd29 	bl	800b888 <RCCEx_PLL3_Config>
 800ae36:	4603      	mov	r3, r0
 800ae38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ae3a:	e009      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae40:	e006      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae42:	bf00      	nop
 800ae44:	e004      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae46:	bf00      	nop
 800ae48:	e002      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae4a:	bf00      	nop
 800ae4c:	e000      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ae56:	4b3c      	ldr	r3, [pc, #240]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae64:	4938      	ldr	r1, [pc, #224]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	658b      	str	r3, [r1, #88]	; 0x58
 800ae6a:	e001      	b.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01a      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae86:	d10a      	bne.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3324      	adds	r3, #36	; 0x24
 800ae8c:	2102      	movs	r1, #2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fcfa 	bl	800b888 <RCCEx_PLL3_Config>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ae9e:	4b2a      	ldr	r3, [pc, #168]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeac:	4926      	ldr	r1, [pc, #152]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0310 	and.w	r3, r3, #16
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d01a      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aec8:	d10a      	bne.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3324      	adds	r3, #36	; 0x24
 800aece:	2102      	movs	r1, #2
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fcd9 	bl	800b888 <RCCEx_PLL3_Config>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aee0:	4b19      	ldr	r3, [pc, #100]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aeee:	4916      	ldr	r1, [pc, #88]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aef0:	4313      	orrs	r3, r2
 800aef2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d036      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af0a:	d01f      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800af0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af10:	d817      	bhi.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800af16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af1a:	d009      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800af1c:	e011      	b.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	3304      	adds	r3, #4
 800af22:	2100      	movs	r1, #0
 800af24:	4618      	mov	r0, r3
 800af26:	f000 fbfd 	bl	800b724 <RCCEx_PLL2_Config>
 800af2a:	4603      	mov	r3, r0
 800af2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800af2e:	e00e      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3324      	adds	r3, #36	; 0x24
 800af34:	2102      	movs	r1, #2
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fca6 	bl	800b888 <RCCEx_PLL3_Config>
 800af3c:	4603      	mov	r3, r0
 800af3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800af40:	e005      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	75fb      	strb	r3, [r7, #23]
      break;
 800af46:	e002      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800af48:	58024400 	.word	0x58024400
      break;
 800af4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10a      	bne.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af54:	4b93      	ldr	r3, [pc, #588]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af62:	4990      	ldr	r1, [pc, #576]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af64:	4313      	orrs	r3, r2
 800af66:	658b      	str	r3, [r1, #88]	; 0x58
 800af68:	e001      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
 800af6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d033      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af84:	d01c      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800af86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af8a:	d816      	bhi.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800af8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af90:	d003      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800af92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af96:	d007      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800af98:	e00f      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af9a:	4b82      	ldr	r3, [pc, #520]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	4a81      	ldr	r2, [pc, #516]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800afa6:	e00c      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3324      	adds	r3, #36	; 0x24
 800afac:	2101      	movs	r1, #1
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 fc6a 	bl	800b888 <RCCEx_PLL3_Config>
 800afb4:	4603      	mov	r3, r0
 800afb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800afb8:	e003      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	75fb      	strb	r3, [r7, #23]
      break;
 800afbe:	e000      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800afc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10a      	bne.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800afc8:	4b76      	ldr	r3, [pc, #472]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afd6:	4973      	ldr	r1, [pc, #460]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afd8:	4313      	orrs	r3, r2
 800afda:	654b      	str	r3, [r1, #84]	; 0x54
 800afdc:	e001      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afde:	7dfb      	ldrb	r3, [r7, #23]
 800afe0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d029      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800aff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800affa:	d007      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800affc:	e00f      	b.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800affe:	4b69      	ldr	r3, [pc, #420]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b002:	4a68      	ldr	r2, [pc, #416]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b00a:	e00b      	b.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3304      	adds	r3, #4
 800b010:	2102      	movs	r1, #2
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fb86 	bl	800b724 <RCCEx_PLL2_Config>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b01c:	e002      	b.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	75fb      	strb	r3, [r7, #23]
      break;
 800b022:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b02a:	4b5e      	ldr	r3, [pc, #376]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b036:	495b      	ldr	r1, [pc, #364]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b038:	4313      	orrs	r3, r2
 800b03a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b03c:	e001      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3324      	adds	r3, #36	; 0x24
 800b052:	2102      	movs	r1, #2
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fc17 	bl	800b888 <RCCEx_PLL3_Config>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d030      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b078:	d017      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b07a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b07e:	d811      	bhi.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b084:	d013      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b08a:	d80b      	bhi.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d010      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b094:	d106      	bne.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b096:	4b43      	ldr	r3, [pc, #268]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09a:	4a42      	ldr	r2, [pc, #264]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b09c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b0a2:	e007      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0a8:	e004      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b0aa:	bf00      	nop
 800b0ac:	e002      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b0ae:	bf00      	nop
 800b0b0:	e000      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b0b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d109      	bne.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b0ba:	4b3a      	ldr	r3, [pc, #232]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c6:	4937      	ldr	r1, [pc, #220]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	654b      	str	r3, [r1, #84]	; 0x54
 800b0cc:	e001      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d008      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b0de:	4b31      	ldr	r3, [pc, #196]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ea:	492e      	ldr	r1, [pc, #184]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d009      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b0fc:	4b29      	ldr	r3, [pc, #164]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b10a:	4926      	ldr	r1, [pc, #152]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d008      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b11c:	4b21      	ldr	r3, [pc, #132]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b120:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b128:	491e      	ldr	r1, [pc, #120]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00d      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b13a:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	4a19      	ldr	r2, [pc, #100]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b144:	6113      	str	r3, [r2, #16]
 800b146:	4b17      	ldr	r3, [pc, #92]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b148:	691a      	ldr	r2, [r3, #16]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b150:	4914      	ldr	r1, [pc, #80]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b152:	4313      	orrs	r3, r2
 800b154:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	da08      	bge.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b15e:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16a:	490e      	ldr	r1, [pc, #56]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d009      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b17c:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b180:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18a:	4906      	ldr	r1, [pc, #24]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b18c:	4313      	orrs	r3, r2
 800b18e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b190:	7dbb      	ldrb	r3, [r7, #22]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	e000      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	58024400 	.word	0x58024400

0800b1a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b1ac:	f7ff f860 	bl	800a270 <HAL_RCC_GetHCLKFreq>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	091b      	lsrs	r3, r3, #4
 800b1b8:	f003 0307 	and.w	r3, r3, #7
 800b1bc:	4904      	ldr	r1, [pc, #16]	; (800b1d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b1be:	5ccb      	ldrb	r3, [r1, r3]
 800b1c0:	f003 031f 	and.w	r3, r3, #31
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	08012918 	.word	0x08012918

0800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b089      	sub	sp, #36	; 0x24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1dc:	4ba1      	ldr	r3, [pc, #644]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e0:	f003 0303 	and.w	r3, r3, #3
 800b1e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b1e6:	4b9f      	ldr	r3, [pc, #636]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ea:	0b1b      	lsrs	r3, r3, #12
 800b1ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b1f2:	4b9c      	ldr	r3, [pc, #624]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	091b      	lsrs	r3, r3, #4
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b1fe:	4b99      	ldr	r3, [pc, #612]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b202:	08db      	lsrs	r3, r3, #3
 800b204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	fb02 f303 	mul.w	r3, r2, r3
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 8111 	beq.w	800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b02      	cmp	r3, #2
 800b226:	f000 8083 	beq.w	800b330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	f200 80a1 	bhi.w	800b374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d056      	beq.n	800b2ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b23e:	e099      	b.n	800b374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b240:	4b88      	ldr	r3, [pc, #544]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0320 	and.w	r3, r3, #32
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d02d      	beq.n	800b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b24c:	4b85      	ldr	r3, [pc, #532]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	08db      	lsrs	r3, r3, #3
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	4a84      	ldr	r2, [pc, #528]	; (800b468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b258:	fa22 f303 	lsr.w	r3, r2, r3
 800b25c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b276:	4b7b      	ldr	r3, [pc, #492]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b286:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b2a6:	e087      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ba:	4b6a      	ldr	r3, [pc, #424]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ea:	e065      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fe:	4b59      	ldr	r3, [pc, #356]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b32e:	e043      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b342:	4b48      	ldr	r3, [pc, #288]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b352:	ed97 6a03 	vldr	s12, [r7, #12]
 800b356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b372:	e021      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b386:	4b37      	ldr	r3, [pc, #220]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b396:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b3b8:	4b2a      	ldr	r3, [pc, #168]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3bc:	0a5b      	lsrs	r3, r3, #9
 800b3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3de:	ee17 2a90 	vmov	r2, s15
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b3e6:	4b1f      	ldr	r3, [pc, #124]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ea:	0c1b      	lsrs	r3, r3, #16
 800b3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f0:	ee07 3a90 	vmov	s15, r3
 800b3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b400:	edd7 6a07 	vldr	s13, [r7, #28]
 800b404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b40c:	ee17 2a90 	vmov	r2, s15
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b414:	4b13      	ldr	r3, [pc, #76]	; (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b418:	0e1b      	lsrs	r3, r3, #24
 800b41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b42a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b42e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43a:	ee17 2a90 	vmov	r2, s15
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b442:	e008      	b.n	800b456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	609a      	str	r2, [r3, #8]
}
 800b456:	bf00      	nop
 800b458:	3724      	adds	r7, #36	; 0x24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	58024400 	.word	0x58024400
 800b468:	03d09000 	.word	0x03d09000
 800b46c:	46000000 	.word	0x46000000
 800b470:	4c742400 	.word	0x4c742400
 800b474:	4a742400 	.word	0x4a742400
 800b478:	4c371b00 	.word	0x4c371b00

0800b47c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b089      	sub	sp, #36	; 0x24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b484:	4ba1      	ldr	r3, [pc, #644]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b488:	f003 0303 	and.w	r3, r3, #3
 800b48c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b48e:	4b9f      	ldr	r3, [pc, #636]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b492:	0d1b      	lsrs	r3, r3, #20
 800b494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b49a:	4b9c      	ldr	r3, [pc, #624]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	0a1b      	lsrs	r3, r3, #8
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b4a6:	4b99      	ldr	r3, [pc, #612]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4aa:	08db      	lsrs	r3, r3, #3
 800b4ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	fb02 f303 	mul.w	r3, r2, r3
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 8111 	beq.w	800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	f000 8083 	beq.w	800b5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	f200 80a1 	bhi.w	800b61c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d056      	beq.n	800b594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b4e6:	e099      	b.n	800b61c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e8:	4b88      	ldr	r3, [pc, #544]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0320 	and.w	r3, r3, #32
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d02d      	beq.n	800b550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4f4:	4b85      	ldr	r3, [pc, #532]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	08db      	lsrs	r3, r3, #3
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	4a84      	ldr	r2, [pc, #528]	; (800b710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b500:	fa22 f303 	lsr.w	r3, r2, r3
 800b504:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51e:	4b7b      	ldr	r3, [pc, #492]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b532:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b54e:	e087      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b562:	4b6a      	ldr	r3, [pc, #424]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b572:	ed97 6a03 	vldr	s12, [r7, #12]
 800b576:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b592:	e065      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a6:	4b59      	ldr	r3, [pc, #356]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5d6:	e043      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ea:	4b48      	ldr	r3, [pc, #288]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f2:	ee07 3a90 	vmov	s15, r3
 800b5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b61a:	e021      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b626:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62e:	4b37      	ldr	r3, [pc, #220]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b642:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b65e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b660:	4b2a      	ldr	r3, [pc, #168]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b664:	0a5b      	lsrs	r3, r3, #9
 800b666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b67a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b67e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b686:	ee17 2a90 	vmov	r2, s15
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b68e:	4b1f      	ldr	r3, [pc, #124]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b692:	0c1b      	lsrs	r3, r3, #16
 800b694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b698:	ee07 3a90 	vmov	s15, r3
 800b69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b4:	ee17 2a90 	vmov	r2, s15
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b6bc:	4b13      	ldr	r3, [pc, #76]	; (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c0:	0e1b      	lsrs	r3, r3, #24
 800b6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e2:	ee17 2a90 	vmov	r2, s15
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b6ea:	e008      	b.n	800b6fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	609a      	str	r2, [r3, #8]
}
 800b6fe:	bf00      	nop
 800b700:	3724      	adds	r7, #36	; 0x24
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	58024400 	.word	0x58024400
 800b710:	03d09000 	.word	0x03d09000
 800b714:	46000000 	.word	0x46000000
 800b718:	4c742400 	.word	0x4c742400
 800b71c:	4a742400 	.word	0x4a742400
 800b720:	4c371b00 	.word	0x4c371b00

0800b724 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b732:	4b53      	ldr	r3, [pc, #332]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d101      	bne.n	800b742 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e099      	b.n	800b876 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b742:	4b4f      	ldr	r3, [pc, #316]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a4e      	ldr	r2, [pc, #312]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b748:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b74c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b74e:	f7fa fa85 	bl	8005c5c <HAL_GetTick>
 800b752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b754:	e008      	b.n	800b768 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b756:	f7fa fa81 	bl	8005c5c <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	2b02      	cmp	r3, #2
 800b762:	d901      	bls.n	800b768 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e086      	b.n	800b876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b768:	4b45      	ldr	r3, [pc, #276]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1f0      	bne.n	800b756 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b774:	4b42      	ldr	r3, [pc, #264]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b778:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	031b      	lsls	r3, r3, #12
 800b782:	493f      	ldr	r1, [pc, #252]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b784:	4313      	orrs	r3, r2
 800b786:	628b      	str	r3, [r1, #40]	; 0x28
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	3b01      	subs	r3, #1
 800b798:	025b      	lsls	r3, r3, #9
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	431a      	orrs	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	041b      	lsls	r3, r3, #16
 800b7a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	061b      	lsls	r3, r3, #24
 800b7b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b7b8:	4931      	ldr	r1, [pc, #196]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b7be:	4b30      	ldr	r3, [pc, #192]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	492d      	ldr	r1, [pc, #180]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b7d0:	4b2b      	ldr	r3, [pc, #172]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	f023 0220 	bic.w	r2, r3, #32
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	4928      	ldr	r1, [pc, #160]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7e2:	4b27      	ldr	r3, [pc, #156]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	4a26      	ldr	r2, [pc, #152]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7e8:	f023 0310 	bic.w	r3, r3, #16
 800b7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7ee:	4b24      	ldr	r3, [pc, #144]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7f2:	4b24      	ldr	r3, [pc, #144]	; (800b884 <RCCEx_PLL2_Config+0x160>)
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	69d2      	ldr	r2, [r2, #28]
 800b7fa:	00d2      	lsls	r2, r2, #3
 800b7fc:	4920      	ldr	r1, [pc, #128]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b7fe:	4313      	orrs	r3, r2
 800b800:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b802:	4b1f      	ldr	r3, [pc, #124]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b806:	4a1e      	ldr	r2, [pc, #120]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b808:	f043 0310 	orr.w	r3, r3, #16
 800b80c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d106      	bne.n	800b822 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b814:	4b1a      	ldr	r3, [pc, #104]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	4a19      	ldr	r2, [pc, #100]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b81a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b81e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b820:	e00f      	b.n	800b842 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d106      	bne.n	800b836 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b828:	4b15      	ldr	r3, [pc, #84]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	4a14      	ldr	r2, [pc, #80]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b82e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b832:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b834:	e005      	b.n	800b842 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b836:	4b12      	ldr	r3, [pc, #72]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83a:	4a11      	ldr	r2, [pc, #68]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b83c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b842:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a0e      	ldr	r2, [pc, #56]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b84c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b84e:	f7fa fa05 	bl	8005c5c <HAL_GetTick>
 800b852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b854:	e008      	b.n	800b868 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b856:	f7fa fa01 	bl	8005c5c <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b02      	cmp	r3, #2
 800b862:	d901      	bls.n	800b868 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e006      	b.n	800b876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b868:	4b05      	ldr	r3, [pc, #20]	; (800b880 <RCCEx_PLL2_Config+0x15c>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0f0      	beq.n	800b856 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b874:	7bfb      	ldrb	r3, [r7, #15]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	58024400 	.word	0x58024400
 800b884:	ffff0007 	.word	0xffff0007

0800b888 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b896:	4b53      	ldr	r3, [pc, #332]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89a:	f003 0303 	and.w	r3, r3, #3
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d101      	bne.n	800b8a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e099      	b.n	800b9da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8a6:	4b4f      	ldr	r3, [pc, #316]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a4e      	ldr	r2, [pc, #312]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b8ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8b2:	f7fa f9d3 	bl	8005c5c <HAL_GetTick>
 800b8b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8b8:	e008      	b.n	800b8cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b8ba:	f7fa f9cf 	bl	8005c5c <HAL_GetTick>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d901      	bls.n	800b8cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e086      	b.n	800b9da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8cc:	4b45      	ldr	r3, [pc, #276]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1f0      	bne.n	800b8ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b8d8:	4b42      	ldr	r3, [pc, #264]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	051b      	lsls	r3, r3, #20
 800b8e6:	493f      	ldr	r1, [pc, #252]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	628b      	str	r3, [r1, #40]	; 0x28
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	025b      	lsls	r3, r3, #9
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	431a      	orrs	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	3b01      	subs	r3, #1
 800b908:	041b      	lsls	r3, r3, #16
 800b90a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b90e:	431a      	orrs	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	3b01      	subs	r3, #1
 800b916:	061b      	lsls	r3, r3, #24
 800b918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b91c:	4931      	ldr	r1, [pc, #196]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b922:	4b30      	ldr	r3, [pc, #192]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	492d      	ldr	r1, [pc, #180]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b930:	4313      	orrs	r3, r2
 800b932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b934:	4b2b      	ldr	r3, [pc, #172]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b938:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	4928      	ldr	r1, [pc, #160]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b942:	4313      	orrs	r3, r2
 800b944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b946:	4b27      	ldr	r3, [pc, #156]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94a:	4a26      	ldr	r2, [pc, #152]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b94c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b952:	4b24      	ldr	r3, [pc, #144]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b956:	4b24      	ldr	r3, [pc, #144]	; (800b9e8 <RCCEx_PLL3_Config+0x160>)
 800b958:	4013      	ands	r3, r2
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	69d2      	ldr	r2, [r2, #28]
 800b95e:	00d2      	lsls	r2, r2, #3
 800b960:	4920      	ldr	r1, [pc, #128]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b962:	4313      	orrs	r3, r2
 800b964:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b966:	4b1f      	ldr	r3, [pc, #124]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96a:	4a1e      	ldr	r2, [pc, #120]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b96c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d106      	bne.n	800b986 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b978:	4b1a      	ldr	r3, [pc, #104]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97c:	4a19      	ldr	r2, [pc, #100]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b97e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b982:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b984:	e00f      	b.n	800b9a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d106      	bne.n	800b99a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b98c:	4b15      	ldr	r3, [pc, #84]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b990:	4a14      	ldr	r2, [pc, #80]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b996:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b998:	e005      	b.n	800b9a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b99a:	4b12      	ldr	r3, [pc, #72]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4a11      	ldr	r2, [pc, #68]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b9a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a0e      	ldr	r2, [pc, #56]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b9ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9b2:	f7fa f953 	bl	8005c5c <HAL_GetTick>
 800b9b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9b8:	e008      	b.n	800b9cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b9ba:	f7fa f94f 	bl	8005c5c <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d901      	bls.n	800b9cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e006      	b.n	800b9da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9cc:	4b05      	ldr	r3, [pc, #20]	; (800b9e4 <RCCEx_PLL3_Config+0x15c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d0f0      	beq.n	800b9ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	58024400 	.word	0x58024400
 800b9e8:	ffff0007 	.word	0xffff0007

0800b9ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e0f1      	b.n	800bbe2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a78      	ldr	r2, [pc, #480]	; (800bbec <HAL_SPI_Init+0x200>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d00f      	beq.n	800ba2e <HAL_SPI_Init+0x42>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a77      	ldr	r2, [pc, #476]	; (800bbf0 <HAL_SPI_Init+0x204>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00a      	beq.n	800ba2e <HAL_SPI_Init+0x42>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a75      	ldr	r2, [pc, #468]	; (800bbf4 <HAL_SPI_Init+0x208>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d005      	beq.n	800ba2e <HAL_SPI_Init+0x42>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	2b0f      	cmp	r3, #15
 800ba28:	d901      	bls.n	800ba2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e0d9      	b.n	800bbe2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f8e2 	bl	800bbf8 <SPI_GetPacketSize>
 800ba34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a6c      	ldr	r2, [pc, #432]	; (800bbec <HAL_SPI_Init+0x200>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00c      	beq.n	800ba5a <HAL_SPI_Init+0x6e>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a6a      	ldr	r2, [pc, #424]	; (800bbf0 <HAL_SPI_Init+0x204>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d007      	beq.n	800ba5a <HAL_SPI_Init+0x6e>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a69      	ldr	r2, [pc, #420]	; (800bbf4 <HAL_SPI_Init+0x208>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d002      	beq.n	800ba5a <HAL_SPI_Init+0x6e>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b08      	cmp	r3, #8
 800ba58:	d811      	bhi.n	800ba7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba5e:	4a63      	ldr	r2, [pc, #396]	; (800bbec <HAL_SPI_Init+0x200>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d009      	beq.n	800ba78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a61      	ldr	r2, [pc, #388]	; (800bbf0 <HAL_SPI_Init+0x204>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d004      	beq.n	800ba78 <HAL_SPI_Init+0x8c>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a60      	ldr	r2, [pc, #384]	; (800bbf4 <HAL_SPI_Init+0x208>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d104      	bne.n	800ba82 <HAL_SPI_Init+0x96>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b10      	cmp	r3, #16
 800ba7c:	d901      	bls.n	800ba82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e0af      	b.n	800bbe2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d106      	bne.n	800ba9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7f8 fc5e 	bl	8004358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2202      	movs	r2, #2
 800baa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f022 0201 	bic.w	r2, r2, #1
 800bab2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800babe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bac8:	d119      	bne.n	800bafe <HAL_SPI_Init+0x112>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bad2:	d103      	bne.n	800badc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d008      	beq.n	800baee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10c      	bne.n	800bafe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baec:	d107      	bne.n	800bafe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bafc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69da      	ldr	r2, [r3, #28]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb06:	431a      	orrs	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb10:	ea42 0103 	orr.w	r1, r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	431a      	orrs	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	431a      	orrs	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	431a      	orrs	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	431a      	orrs	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	431a      	orrs	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb52:	431a      	orrs	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	431a      	orrs	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb5e:	ea42 0103 	orr.w	r1, r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d113      	bne.n	800bb9e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb88:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb9c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0201 	bic.w	r2, r2, #1
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00a      	beq.n	800bbd0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	430a      	orrs	r2, r1
 800bbce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	40013000 	.word	0x40013000
 800bbf0:	40003800 	.word	0x40003800
 800bbf4:	40003c00 	.word	0x40003c00

0800bbf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc04:	095b      	lsrs	r3, r3, #5
 800bc06:	3301      	adds	r3, #1
 800bc08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	3307      	adds	r3, #7
 800bc16:	08db      	lsrs	r3, r3, #3
 800bc18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d101      	bne.n	800bc40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e049      	b.n	800bcd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7f9 fa1d 	bl	8005094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	f000 fd9f 	bl	800c7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d001      	beq.n	800bcf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e054      	b.n	800bd9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68da      	ldr	r2, [r3, #12]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f042 0201 	orr.w	r2, r2, #1
 800bd0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a26      	ldr	r2, [pc, #152]	; (800bdac <HAL_TIM_Base_Start_IT+0xd0>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d022      	beq.n	800bd5c <HAL_TIM_Base_Start_IT+0x80>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1e:	d01d      	beq.n	800bd5c <HAL_TIM_Base_Start_IT+0x80>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a22      	ldr	r2, [pc, #136]	; (800bdb0 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d018      	beq.n	800bd5c <HAL_TIM_Base_Start_IT+0x80>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a21      	ldr	r2, [pc, #132]	; (800bdb4 <HAL_TIM_Base_Start_IT+0xd8>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d013      	beq.n	800bd5c <HAL_TIM_Base_Start_IT+0x80>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a1f      	ldr	r2, [pc, #124]	; (800bdb8 <HAL_TIM_Base_Start_IT+0xdc>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d00e      	beq.n	800bd5c <HAL_TIM_Base_Start_IT+0x80>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a1e      	ldr	r2, [pc, #120]	; (800bdbc <HAL_TIM_Base_Start_IT+0xe0>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d009      	beq.n	800bd5c <HAL_TIM_Base_Start_IT+0x80>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a1c      	ldr	r2, [pc, #112]	; (800bdc0 <HAL_TIM_Base_Start_IT+0xe4>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d004      	beq.n	800bd5c <HAL_TIM_Base_Start_IT+0x80>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a1b      	ldr	r2, [pc, #108]	; (800bdc4 <HAL_TIM_Base_Start_IT+0xe8>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d115      	bne.n	800bd88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <HAL_TIM_Base_Start_IT+0xec>)
 800bd64:	4013      	ands	r3, r2
 800bd66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b06      	cmp	r3, #6
 800bd6c:	d015      	beq.n	800bd9a <HAL_TIM_Base_Start_IT+0xbe>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd74:	d011      	beq.n	800bd9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f042 0201 	orr.w	r2, r2, #1
 800bd84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd86:	e008      	b.n	800bd9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f042 0201 	orr.w	r2, r2, #1
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	e000      	b.n	800bd9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	40010000 	.word	0x40010000
 800bdb0:	40000400 	.word	0x40000400
 800bdb4:	40000800 	.word	0x40000800
 800bdb8:	40000c00 	.word	0x40000c00
 800bdbc:	40010400 	.word	0x40010400
 800bdc0:	40001800 	.word	0x40001800
 800bdc4:	40014000 	.word	0x40014000
 800bdc8:	00010007 	.word	0x00010007

0800bdcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f022 0201 	bic.w	r2, r2, #1
 800bde2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6a1a      	ldr	r2, [r3, #32]
 800bdea:	f241 1311 	movw	r3, #4369	; 0x1111
 800bdee:	4013      	ands	r3, r2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10f      	bne.n	800be14 <HAL_TIM_Base_Stop_IT+0x48>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6a1a      	ldr	r2, [r3, #32]
 800bdfa:	f240 4344 	movw	r3, #1092	; 0x444
 800bdfe:	4013      	ands	r3, r2
 800be00:	2b00      	cmp	r3, #0
 800be02:	d107      	bne.n	800be14 <HAL_TIM_Base_Stop_IT+0x48>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f022 0201 	bic.w	r2, r2, #1
 800be12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b082      	sub	sp, #8
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	e049      	b.n	800bed0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b00      	cmp	r3, #0
 800be46:	d106      	bne.n	800be56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f841 	bl	800bed8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2202      	movs	r2, #2
 800be5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3304      	adds	r3, #4
 800be66:	4619      	mov	r1, r3
 800be68:	4610      	mov	r0, r2
 800be6a:	f000 fca1 	bl	800c7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d109      	bne.n	800bf10 <HAL_TIM_PWM_Start+0x24>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	bf14      	ite	ne
 800bf08:	2301      	movne	r3, #1
 800bf0a:	2300      	moveq	r3, #0
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	e03c      	b.n	800bf8a <HAL_TIM_PWM_Start+0x9e>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b04      	cmp	r3, #4
 800bf14:	d109      	bne.n	800bf2a <HAL_TIM_PWM_Start+0x3e>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	bf14      	ite	ne
 800bf22:	2301      	movne	r3, #1
 800bf24:	2300      	moveq	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	e02f      	b.n	800bf8a <HAL_TIM_PWM_Start+0x9e>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d109      	bne.n	800bf44 <HAL_TIM_PWM_Start+0x58>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	bf14      	ite	ne
 800bf3c:	2301      	movne	r3, #1
 800bf3e:	2300      	moveq	r3, #0
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	e022      	b.n	800bf8a <HAL_TIM_PWM_Start+0x9e>
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b0c      	cmp	r3, #12
 800bf48:	d109      	bne.n	800bf5e <HAL_TIM_PWM_Start+0x72>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	bf14      	ite	ne
 800bf56:	2301      	movne	r3, #1
 800bf58:	2300      	moveq	r3, #0
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	e015      	b.n	800bf8a <HAL_TIM_PWM_Start+0x9e>
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b10      	cmp	r3, #16
 800bf62:	d109      	bne.n	800bf78 <HAL_TIM_PWM_Start+0x8c>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	bf14      	ite	ne
 800bf70:	2301      	movne	r3, #1
 800bf72:	2300      	moveq	r3, #0
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	e008      	b.n	800bf8a <HAL_TIM_PWM_Start+0x9e>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	bf14      	ite	ne
 800bf84:	2301      	movne	r3, #1
 800bf86:	2300      	moveq	r3, #0
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e0a1      	b.n	800c0d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d104      	bne.n	800bfa2 <HAL_TIM_PWM_Start+0xb6>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfa0:	e023      	b.n	800bfea <HAL_TIM_PWM_Start+0xfe>
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	d104      	bne.n	800bfb2 <HAL_TIM_PWM_Start+0xc6>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2202      	movs	r2, #2
 800bfac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfb0:	e01b      	b.n	800bfea <HAL_TIM_PWM_Start+0xfe>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	d104      	bne.n	800bfc2 <HAL_TIM_PWM_Start+0xd6>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2202      	movs	r2, #2
 800bfbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfc0:	e013      	b.n	800bfea <HAL_TIM_PWM_Start+0xfe>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b0c      	cmp	r3, #12
 800bfc6:	d104      	bne.n	800bfd2 <HAL_TIM_PWM_Start+0xe6>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfd0:	e00b      	b.n	800bfea <HAL_TIM_PWM_Start+0xfe>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b10      	cmp	r3, #16
 800bfd6:	d104      	bne.n	800bfe2 <HAL_TIM_PWM_Start+0xf6>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfe0:	e003      	b.n	800bfea <HAL_TIM_PWM_Start+0xfe>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2201      	movs	r2, #1
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 ffea 	bl	800cfcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a38      	ldr	r2, [pc, #224]	; (800c0e0 <HAL_TIM_PWM_Start+0x1f4>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d013      	beq.n	800c02a <HAL_TIM_PWM_Start+0x13e>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a37      	ldr	r2, [pc, #220]	; (800c0e4 <HAL_TIM_PWM_Start+0x1f8>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d00e      	beq.n	800c02a <HAL_TIM_PWM_Start+0x13e>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a35      	ldr	r2, [pc, #212]	; (800c0e8 <HAL_TIM_PWM_Start+0x1fc>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d009      	beq.n	800c02a <HAL_TIM_PWM_Start+0x13e>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a34      	ldr	r2, [pc, #208]	; (800c0ec <HAL_TIM_PWM_Start+0x200>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d004      	beq.n	800c02a <HAL_TIM_PWM_Start+0x13e>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a32      	ldr	r2, [pc, #200]	; (800c0f0 <HAL_TIM_PWM_Start+0x204>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d101      	bne.n	800c02e <HAL_TIM_PWM_Start+0x142>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <HAL_TIM_PWM_Start+0x144>
 800c02e:	2300      	movs	r3, #0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d007      	beq.n	800c044 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a25      	ldr	r2, [pc, #148]	; (800c0e0 <HAL_TIM_PWM_Start+0x1f4>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d022      	beq.n	800c094 <HAL_TIM_PWM_Start+0x1a8>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c056:	d01d      	beq.n	800c094 <HAL_TIM_PWM_Start+0x1a8>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a25      	ldr	r2, [pc, #148]	; (800c0f4 <HAL_TIM_PWM_Start+0x208>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d018      	beq.n	800c094 <HAL_TIM_PWM_Start+0x1a8>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a24      	ldr	r2, [pc, #144]	; (800c0f8 <HAL_TIM_PWM_Start+0x20c>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d013      	beq.n	800c094 <HAL_TIM_PWM_Start+0x1a8>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a22      	ldr	r2, [pc, #136]	; (800c0fc <HAL_TIM_PWM_Start+0x210>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d00e      	beq.n	800c094 <HAL_TIM_PWM_Start+0x1a8>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a1a      	ldr	r2, [pc, #104]	; (800c0e4 <HAL_TIM_PWM_Start+0x1f8>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d009      	beq.n	800c094 <HAL_TIM_PWM_Start+0x1a8>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a1e      	ldr	r2, [pc, #120]	; (800c100 <HAL_TIM_PWM_Start+0x214>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d004      	beq.n	800c094 <HAL_TIM_PWM_Start+0x1a8>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a16      	ldr	r2, [pc, #88]	; (800c0e8 <HAL_TIM_PWM_Start+0x1fc>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d115      	bne.n	800c0c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	689a      	ldr	r2, [r3, #8]
 800c09a:	4b1a      	ldr	r3, [pc, #104]	; (800c104 <HAL_TIM_PWM_Start+0x218>)
 800c09c:	4013      	ands	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2b06      	cmp	r3, #6
 800c0a4:	d015      	beq.n	800c0d2 <HAL_TIM_PWM_Start+0x1e6>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ac:	d011      	beq.n	800c0d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f042 0201 	orr.w	r2, r2, #1
 800c0bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0be:	e008      	b.n	800c0d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 0201 	orr.w	r2, r2, #1
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	e000      	b.n	800c0d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	40010000 	.word	0x40010000
 800c0e4:	40010400 	.word	0x40010400
 800c0e8:	40014000 	.word	0x40014000
 800c0ec:	40014400 	.word	0x40014400
 800c0f0:	40014800 	.word	0x40014800
 800c0f4:	40000400 	.word	0x40000400
 800c0f8:	40000800 	.word	0x40000800
 800c0fc:	40000c00 	.word	0x40000c00
 800c100:	40001800 	.word	0x40001800
 800c104:	00010007 	.word	0x00010007

0800c108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	f003 0302 	and.w	r3, r3, #2
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d122      	bne.n	800c164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d11b      	bne.n	800c164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f06f 0202 	mvn.w	r2, #2
 800c134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fb12 	bl	800c774 <HAL_TIM_IC_CaptureCallback>
 800c150:	e005      	b.n	800c15e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fb04 	bl	800c760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fb15 	bl	800c788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f003 0304 	and.w	r3, r3, #4
 800c16e:	2b04      	cmp	r3, #4
 800c170:	d122      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d11b      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f06f 0204 	mvn.w	r2, #4
 800c188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2202      	movs	r2, #2
 800c18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fae8 	bl	800c774 <HAL_TIM_IC_CaptureCallback>
 800c1a4:	e005      	b.n	800c1b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fada 	bl	800c760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 faeb 	bl	800c788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	f003 0308 	and.w	r3, r3, #8
 800c1c2:	2b08      	cmp	r3, #8
 800c1c4:	d122      	bne.n	800c20c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	f003 0308 	and.w	r3, r3, #8
 800c1d0:	2b08      	cmp	r3, #8
 800c1d2:	d11b      	bne.n	800c20c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f06f 0208 	mvn.w	r2, #8
 800c1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2204      	movs	r2, #4
 800c1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fabe 	bl	800c774 <HAL_TIM_IC_CaptureCallback>
 800c1f8:	e005      	b.n	800c206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fab0 	bl	800c760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fac1 	bl	800c788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	f003 0310 	and.w	r3, r3, #16
 800c216:	2b10      	cmp	r3, #16
 800c218:	d122      	bne.n	800c260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	f003 0310 	and.w	r3, r3, #16
 800c224:	2b10      	cmp	r3, #16
 800c226:	d11b      	bne.n	800c260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f06f 0210 	mvn.w	r2, #16
 800c230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2208      	movs	r2, #8
 800c236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fa94 	bl	800c774 <HAL_TIM_IC_CaptureCallback>
 800c24c:	e005      	b.n	800c25a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fa86 	bl	800c760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fa97 	bl	800c788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d10e      	bne.n	800c28c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d107      	bne.n	800c28c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f06f 0201 	mvn.w	r2, #1
 800c284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7f6 fdba 	bl	8002e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c296:	2b80      	cmp	r3, #128	; 0x80
 800c298:	d10e      	bne.n	800c2b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a4:	2b80      	cmp	r3, #128	; 0x80
 800c2a6:	d107      	bne.n	800c2b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 ffc6 	bl	800d244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2c6:	d10e      	bne.n	800c2e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d2:	2b80      	cmp	r3, #128	; 0x80
 800c2d4:	d107      	bne.n	800c2e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c2de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 ffb9 	bl	800d258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f0:	2b40      	cmp	r3, #64	; 0x40
 800c2f2:	d10e      	bne.n	800c312 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fe:	2b40      	cmp	r3, #64	; 0x40
 800c300:	d107      	bne.n	800c312 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fa45 	bl	800c79c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	f003 0320 	and.w	r3, r3, #32
 800c31c:	2b20      	cmp	r3, #32
 800c31e:	d10e      	bne.n	800c33e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	f003 0320 	and.w	r3, r3, #32
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	d107      	bne.n	800c33e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f06f 0220 	mvn.w	r2, #32
 800c336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 ff79 	bl	800d230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c33e:	bf00      	nop
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c362:	2302      	movs	r3, #2
 800c364:	e0ff      	b.n	800c566 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b14      	cmp	r3, #20
 800c372:	f200 80f0 	bhi.w	800c556 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c376:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37c:	0800c3d1 	.word	0x0800c3d1
 800c380:	0800c557 	.word	0x0800c557
 800c384:	0800c557 	.word	0x0800c557
 800c388:	0800c557 	.word	0x0800c557
 800c38c:	0800c411 	.word	0x0800c411
 800c390:	0800c557 	.word	0x0800c557
 800c394:	0800c557 	.word	0x0800c557
 800c398:	0800c557 	.word	0x0800c557
 800c39c:	0800c453 	.word	0x0800c453
 800c3a0:	0800c557 	.word	0x0800c557
 800c3a4:	0800c557 	.word	0x0800c557
 800c3a8:	0800c557 	.word	0x0800c557
 800c3ac:	0800c493 	.word	0x0800c493
 800c3b0:	0800c557 	.word	0x0800c557
 800c3b4:	0800c557 	.word	0x0800c557
 800c3b8:	0800c557 	.word	0x0800c557
 800c3bc:	0800c4d5 	.word	0x0800c4d5
 800c3c0:	0800c557 	.word	0x0800c557
 800c3c4:	0800c557 	.word	0x0800c557
 800c3c8:	0800c557 	.word	0x0800c557
 800c3cc:	0800c515 	.word	0x0800c515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fa84 	bl	800c8e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	699a      	ldr	r2, [r3, #24]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f042 0208 	orr.w	r2, r2, #8
 800c3ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	699a      	ldr	r2, [r3, #24]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0204 	bic.w	r2, r2, #4
 800c3fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6999      	ldr	r1, [r3, #24]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	691a      	ldr	r2, [r3, #16]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	430a      	orrs	r2, r1
 800c40c:	619a      	str	r2, [r3, #24]
      break;
 800c40e:	e0a5      	b.n	800c55c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 faf4 	bl	800ca04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	699a      	ldr	r2, [r3, #24]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c42a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c43a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6999      	ldr	r1, [r3, #24]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	021a      	lsls	r2, r3, #8
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	619a      	str	r2, [r3, #24]
      break;
 800c450:	e084      	b.n	800c55c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fb5d 	bl	800cb18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	69da      	ldr	r2, [r3, #28]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f042 0208 	orr.w	r2, r2, #8
 800c46c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	69da      	ldr	r2, [r3, #28]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f022 0204 	bic.w	r2, r2, #4
 800c47c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	69d9      	ldr	r1, [r3, #28]
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	691a      	ldr	r2, [r3, #16]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	430a      	orrs	r2, r1
 800c48e:	61da      	str	r2, [r3, #28]
      break;
 800c490:	e064      	b.n	800c55c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fbc5 	bl	800cc28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	69da      	ldr	r2, [r3, #28]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	69da      	ldr	r2, [r3, #28]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	69d9      	ldr	r1, [r3, #28]
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	021a      	lsls	r2, r3, #8
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	61da      	str	r2, [r3, #28]
      break;
 800c4d2:	e043      	b.n	800c55c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 fc0e 	bl	800ccfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0208 	orr.w	r2, r2, #8
 800c4ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0204 	bic.w	r2, r2, #4
 800c4fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	691a      	ldr	r2, [r3, #16]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c512:	e023      	b.n	800c55c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fc52 	bl	800cdc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c52e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c53e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	021a      	lsls	r2, r3, #8
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	430a      	orrs	r2, r1
 800c552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c554:	e002      	b.n	800c55c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	75fb      	strb	r3, [r7, #23]
      break;
 800c55a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop

0800c570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c584:	2b01      	cmp	r3, #1
 800c586:	d101      	bne.n	800c58c <HAL_TIM_ConfigClockSource+0x1c>
 800c588:	2302      	movs	r3, #2
 800c58a:	e0dc      	b.n	800c746 <HAL_TIM_ConfigClockSource+0x1d6>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2202      	movs	r2, #2
 800c598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	4b6a      	ldr	r3, [pc, #424]	; (800c750 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a64      	ldr	r2, [pc, #400]	; (800c754 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	f000 80a9 	beq.w	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5c8:	4a62      	ldr	r2, [pc, #392]	; (800c754 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	f200 80ae 	bhi.w	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c5d0:	4a61      	ldr	r2, [pc, #388]	; (800c758 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	f000 80a1 	beq.w	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5d8:	4a5f      	ldr	r2, [pc, #380]	; (800c758 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	f200 80a6 	bhi.w	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c5e0:	4a5e      	ldr	r2, [pc, #376]	; (800c75c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	f000 8099 	beq.w	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5e8:	4a5c      	ldr	r2, [pc, #368]	; (800c75c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	f200 809e 	bhi.w	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c5f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5f4:	f000 8091 	beq.w	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5fc:	f200 8096 	bhi.w	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c604:	f000 8089 	beq.w	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c60c:	f200 808e 	bhi.w	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c614:	d03e      	beq.n	800c694 <HAL_TIM_ConfigClockSource+0x124>
 800c616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c61a:	f200 8087 	bhi.w	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c61e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c622:	f000 8086 	beq.w	800c732 <HAL_TIM_ConfigClockSource+0x1c2>
 800c626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c62a:	d87f      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c62c:	2b70      	cmp	r3, #112	; 0x70
 800c62e:	d01a      	beq.n	800c666 <HAL_TIM_ConfigClockSource+0xf6>
 800c630:	2b70      	cmp	r3, #112	; 0x70
 800c632:	d87b      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c634:	2b60      	cmp	r3, #96	; 0x60
 800c636:	d050      	beq.n	800c6da <HAL_TIM_ConfigClockSource+0x16a>
 800c638:	2b60      	cmp	r3, #96	; 0x60
 800c63a:	d877      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c63c:	2b50      	cmp	r3, #80	; 0x50
 800c63e:	d03c      	beq.n	800c6ba <HAL_TIM_ConfigClockSource+0x14a>
 800c640:	2b50      	cmp	r3, #80	; 0x50
 800c642:	d873      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c644:	2b40      	cmp	r3, #64	; 0x40
 800c646:	d058      	beq.n	800c6fa <HAL_TIM_ConfigClockSource+0x18a>
 800c648:	2b40      	cmp	r3, #64	; 0x40
 800c64a:	d86f      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c64c:	2b30      	cmp	r3, #48	; 0x30
 800c64e:	d064      	beq.n	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c650:	2b30      	cmp	r3, #48	; 0x30
 800c652:	d86b      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c654:	2b20      	cmp	r3, #32
 800c656:	d060      	beq.n	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c658:	2b20      	cmp	r3, #32
 800c65a:	d867      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d05c      	beq.n	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c660:	2b10      	cmp	r3, #16
 800c662:	d05a      	beq.n	800c71a <HAL_TIM_ConfigClockSource+0x1aa>
 800c664:	e062      	b.n	800c72c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	6899      	ldr	r1, [r3, #8]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f000 fc89 	bl	800cf8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	609a      	str	r2, [r3, #8]
      break;
 800c692:	e04f      	b.n	800c734 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6818      	ldr	r0, [r3, #0]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	6899      	ldr	r1, [r3, #8]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	f000 fc72 	bl	800cf8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689a      	ldr	r2, [r3, #8]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6b6:	609a      	str	r2, [r3, #8]
      break;
 800c6b8:	e03c      	b.n	800c734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6818      	ldr	r0, [r3, #0]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	6859      	ldr	r1, [r3, #4]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f000 fbe2 	bl	800ce90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2150      	movs	r1, #80	; 0x50
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fc3c 	bl	800cf50 <TIM_ITRx_SetConfig>
      break;
 800c6d8:	e02c      	b.n	800c734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6818      	ldr	r0, [r3, #0]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	6859      	ldr	r1, [r3, #4]
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	f000 fc01 	bl	800ceee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2160      	movs	r1, #96	; 0x60
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fc2c 	bl	800cf50 <TIM_ITRx_SetConfig>
      break;
 800c6f8:	e01c      	b.n	800c734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6818      	ldr	r0, [r3, #0]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	6859      	ldr	r1, [r3, #4]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	461a      	mov	r2, r3
 800c708:	f000 fbc2 	bl	800ce90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2140      	movs	r1, #64	; 0x40
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fc1c 	bl	800cf50 <TIM_ITRx_SetConfig>
      break;
 800c718:	e00c      	b.n	800c734 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4619      	mov	r1, r3
 800c724:	4610      	mov	r0, r2
 800c726:	f000 fc13 	bl	800cf50 <TIM_ITRx_SetConfig>
      break;
 800c72a:	e003      	b.n	800c734 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	73fb      	strb	r3, [r7, #15]
      break;
 800c730:	e000      	b.n	800c734 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2201      	movs	r2, #1
 800c738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c744:	7bfb      	ldrb	r3, [r7, #15]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	ffceff88 	.word	0xffceff88
 800c754:	00100040 	.word	0x00100040
 800c758:	00100030 	.word	0x00100030
 800c75c:	00100020 	.word	0x00100020

0800c760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a40      	ldr	r2, [pc, #256]	; (800c8c4 <TIM_Base_SetConfig+0x114>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d013      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ce:	d00f      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a3d      	ldr	r2, [pc, #244]	; (800c8c8 <TIM_Base_SetConfig+0x118>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d00b      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a3c      	ldr	r2, [pc, #240]	; (800c8cc <TIM_Base_SetConfig+0x11c>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d007      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a3b      	ldr	r2, [pc, #236]	; (800c8d0 <TIM_Base_SetConfig+0x120>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d003      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a3a      	ldr	r2, [pc, #232]	; (800c8d4 <TIM_Base_SetConfig+0x124>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d108      	bne.n	800c802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a2f      	ldr	r2, [pc, #188]	; (800c8c4 <TIM_Base_SetConfig+0x114>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d01f      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c810:	d01b      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a2c      	ldr	r2, [pc, #176]	; (800c8c8 <TIM_Base_SetConfig+0x118>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d017      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a2b      	ldr	r2, [pc, #172]	; (800c8cc <TIM_Base_SetConfig+0x11c>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d013      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a2a      	ldr	r2, [pc, #168]	; (800c8d0 <TIM_Base_SetConfig+0x120>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d00f      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a29      	ldr	r2, [pc, #164]	; (800c8d4 <TIM_Base_SetConfig+0x124>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d00b      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a28      	ldr	r2, [pc, #160]	; (800c8d8 <TIM_Base_SetConfig+0x128>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d007      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a27      	ldr	r2, [pc, #156]	; (800c8dc <TIM_Base_SetConfig+0x12c>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d003      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a26      	ldr	r2, [pc, #152]	; (800c8e0 <TIM_Base_SetConfig+0x130>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d108      	bne.n	800c85c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	4313      	orrs	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	4313      	orrs	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	689a      	ldr	r2, [r3, #8]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a10      	ldr	r2, [pc, #64]	; (800c8c4 <TIM_Base_SetConfig+0x114>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d00f      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a12      	ldr	r2, [pc, #72]	; (800c8d4 <TIM_Base_SetConfig+0x124>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d00b      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a11      	ldr	r2, [pc, #68]	; (800c8d8 <TIM_Base_SetConfig+0x128>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d007      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a10      	ldr	r2, [pc, #64]	; (800c8dc <TIM_Base_SetConfig+0x12c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d003      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a0f      	ldr	r2, [pc, #60]	; (800c8e0 <TIM_Base_SetConfig+0x130>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d103      	bne.n	800c8b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	615a      	str	r2, [r3, #20]
}
 800c8b6:	bf00      	nop
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	40010000 	.word	0x40010000
 800c8c8:	40000400 	.word	0x40000400
 800c8cc:	40000800 	.word	0x40000800
 800c8d0:	40000c00 	.word	0x40000c00
 800c8d4:	40010400 	.word	0x40010400
 800c8d8:	40014000 	.word	0x40014000
 800c8dc:	40014400 	.word	0x40014400
 800c8e0:	40014800 	.word	0x40014800

0800c8e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	f023 0201 	bic.w	r2, r3, #1
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	4b37      	ldr	r3, [pc, #220]	; (800c9ec <TIM_OC1_SetConfig+0x108>)
 800c910:	4013      	ands	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4313      	orrs	r3, r2
 800c924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f023 0302 	bic.w	r3, r3, #2
 800c92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	4313      	orrs	r3, r2
 800c936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a2d      	ldr	r2, [pc, #180]	; (800c9f0 <TIM_OC1_SetConfig+0x10c>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d00f      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a2c      	ldr	r2, [pc, #176]	; (800c9f4 <TIM_OC1_SetConfig+0x110>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d00b      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a2b      	ldr	r2, [pc, #172]	; (800c9f8 <TIM_OC1_SetConfig+0x114>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d007      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a2a      	ldr	r2, [pc, #168]	; (800c9fc <TIM_OC1_SetConfig+0x118>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d003      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a29      	ldr	r2, [pc, #164]	; (800ca00 <TIM_OC1_SetConfig+0x11c>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d10c      	bne.n	800c97a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f023 0308 	bic.w	r3, r3, #8
 800c966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	4313      	orrs	r3, r2
 800c970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f023 0304 	bic.w	r3, r3, #4
 800c978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a1c      	ldr	r2, [pc, #112]	; (800c9f0 <TIM_OC1_SetConfig+0x10c>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d00f      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a1b      	ldr	r2, [pc, #108]	; (800c9f4 <TIM_OC1_SetConfig+0x110>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d00b      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a1a      	ldr	r2, [pc, #104]	; (800c9f8 <TIM_OC1_SetConfig+0x114>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d007      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a19      	ldr	r2, [pc, #100]	; (800c9fc <TIM_OC1_SetConfig+0x118>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d003      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a18      	ldr	r2, [pc, #96]	; (800ca00 <TIM_OC1_SetConfig+0x11c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d111      	bne.n	800c9c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	695b      	ldr	r3, [r3, #20]
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	621a      	str	r2, [r3, #32]
}
 800c9e0:	bf00      	nop
 800c9e2:	371c      	adds	r7, #28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	fffeff8f 	.word	0xfffeff8f
 800c9f0:	40010000 	.word	0x40010000
 800c9f4:	40010400 	.word	0x40010400
 800c9f8:	40014000 	.word	0x40014000
 800c9fc:	40014400 	.word	0x40014400
 800ca00:	40014800 	.word	0x40014800

0800ca04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	f023 0210 	bic.w	r2, r3, #16
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	4b34      	ldr	r3, [pc, #208]	; (800cb00 <TIM_OC2_SetConfig+0xfc>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	021b      	lsls	r3, r3, #8
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	f023 0320 	bic.w	r3, r3, #32
 800ca4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	011b      	lsls	r3, r3, #4
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a29      	ldr	r2, [pc, #164]	; (800cb04 <TIM_OC2_SetConfig+0x100>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d003      	beq.n	800ca6c <TIM_OC2_SetConfig+0x68>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a28      	ldr	r2, [pc, #160]	; (800cb08 <TIM_OC2_SetConfig+0x104>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d10d      	bne.n	800ca88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	011b      	lsls	r3, r3, #4
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a1e      	ldr	r2, [pc, #120]	; (800cb04 <TIM_OC2_SetConfig+0x100>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d00f      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a1d      	ldr	r2, [pc, #116]	; (800cb08 <TIM_OC2_SetConfig+0x104>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d00b      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a1c      	ldr	r2, [pc, #112]	; (800cb0c <TIM_OC2_SetConfig+0x108>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d007      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a1b      	ldr	r2, [pc, #108]	; (800cb10 <TIM_OC2_SetConfig+0x10c>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d003      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a1a      	ldr	r2, [pc, #104]	; (800cb14 <TIM_OC2_SetConfig+0x110>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d113      	bne.n	800cad8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cabe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	693a      	ldr	r2, [r7, #16]
 800cac8:	4313      	orrs	r3, r2
 800caca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	621a      	str	r2, [r3, #32]
}
 800caf2:	bf00      	nop
 800caf4:	371c      	adds	r7, #28
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	feff8fff 	.word	0xfeff8fff
 800cb04:	40010000 	.word	0x40010000
 800cb08:	40010400 	.word	0x40010400
 800cb0c:	40014000 	.word	0x40014000
 800cb10:	40014400 	.word	0x40014400
 800cb14:	40014800 	.word	0x40014800

0800cb18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	69db      	ldr	r3, [r3, #28]
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	4b33      	ldr	r3, [pc, #204]	; (800cc10 <TIM_OC3_SetConfig+0xf8>)
 800cb44:	4013      	ands	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f023 0303 	bic.w	r3, r3, #3
 800cb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	021b      	lsls	r3, r3, #8
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a28      	ldr	r2, [pc, #160]	; (800cc14 <TIM_OC3_SetConfig+0xfc>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d003      	beq.n	800cb7e <TIM_OC3_SetConfig+0x66>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a27      	ldr	r2, [pc, #156]	; (800cc18 <TIM_OC3_SetConfig+0x100>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d10d      	bne.n	800cb9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	021b      	lsls	r3, r3, #8
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a1d      	ldr	r2, [pc, #116]	; (800cc14 <TIM_OC3_SetConfig+0xfc>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d00f      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a1c      	ldr	r2, [pc, #112]	; (800cc18 <TIM_OC3_SetConfig+0x100>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d00b      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a1b      	ldr	r2, [pc, #108]	; (800cc1c <TIM_OC3_SetConfig+0x104>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d007      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a1a      	ldr	r2, [pc, #104]	; (800cc20 <TIM_OC3_SetConfig+0x108>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d003      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a19      	ldr	r2, [pc, #100]	; (800cc24 <TIM_OC3_SetConfig+0x10c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d113      	bne.n	800cbea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	011b      	lsls	r3, r3, #4
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	685a      	ldr	r2, [r3, #4]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	697a      	ldr	r2, [r7, #20]
 800cc02:	621a      	str	r2, [r3, #32]
}
 800cc04:	bf00      	nop
 800cc06:	371c      	adds	r7, #28
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	fffeff8f 	.word	0xfffeff8f
 800cc14:	40010000 	.word	0x40010000
 800cc18:	40010400 	.word	0x40010400
 800cc1c:	40014000 	.word	0x40014000
 800cc20:	40014400 	.word	0x40014400
 800cc24:	40014800 	.word	0x40014800

0800cc28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b087      	sub	sp, #28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	69db      	ldr	r3, [r3, #28]
 800cc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	4b24      	ldr	r3, [pc, #144]	; (800cce4 <TIM_OC4_SetConfig+0xbc>)
 800cc54:	4013      	ands	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	021b      	lsls	r3, r3, #8
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	031b      	lsls	r3, r3, #12
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a19      	ldr	r2, [pc, #100]	; (800cce8 <TIM_OC4_SetConfig+0xc0>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d00f      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a18      	ldr	r2, [pc, #96]	; (800ccec <TIM_OC4_SetConfig+0xc4>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00b      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a17      	ldr	r2, [pc, #92]	; (800ccf0 <TIM_OC4_SetConfig+0xc8>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d007      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a16      	ldr	r2, [pc, #88]	; (800ccf4 <TIM_OC4_SetConfig+0xcc>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d003      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <TIM_OC4_SetConfig+0xd0>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d109      	bne.n	800ccbc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	019b      	lsls	r3, r3, #6
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	621a      	str	r2, [r3, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	feff8fff 	.word	0xfeff8fff
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400
 800ccf0:	40014000 	.word	0x40014000
 800ccf4:	40014400 	.word	0x40014400
 800ccf8:	40014800 	.word	0x40014800

0800ccfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4b21      	ldr	r3, [pc, #132]	; (800cdac <TIM_OC5_SetConfig+0xb0>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cd3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	041b      	lsls	r3, r3, #16
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a18      	ldr	r2, [pc, #96]	; (800cdb0 <TIM_OC5_SetConfig+0xb4>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d00f      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a17      	ldr	r2, [pc, #92]	; (800cdb4 <TIM_OC5_SetConfig+0xb8>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d00b      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a16      	ldr	r2, [pc, #88]	; (800cdb8 <TIM_OC5_SetConfig+0xbc>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d007      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a15      	ldr	r2, [pc, #84]	; (800cdbc <TIM_OC5_SetConfig+0xc0>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d003      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a14      	ldr	r2, [pc, #80]	; (800cdc0 <TIM_OC5_SetConfig+0xc4>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d109      	bne.n	800cd86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	693a      	ldr	r2, [r7, #16]
 800cd9e:	621a      	str	r2, [r3, #32]
}
 800cda0:	bf00      	nop
 800cda2:	371c      	adds	r7, #28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	fffeff8f 	.word	0xfffeff8f
 800cdb0:	40010000 	.word	0x40010000
 800cdb4:	40010400 	.word	0x40010400
 800cdb8:	40014000 	.word	0x40014000
 800cdbc:	40014400 	.word	0x40014400
 800cdc0:	40014800 	.word	0x40014800

0800cdc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a1b      	ldr	r3, [r3, #32]
 800cdde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	4b22      	ldr	r3, [pc, #136]	; (800ce78 <TIM_OC6_SetConfig+0xb4>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	021b      	lsls	r3, r3, #8
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	051b      	lsls	r3, r3, #20
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a19      	ldr	r2, [pc, #100]	; (800ce7c <TIM_OC6_SetConfig+0xb8>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d00f      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a18      	ldr	r2, [pc, #96]	; (800ce80 <TIM_OC6_SetConfig+0xbc>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00b      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a17      	ldr	r2, [pc, #92]	; (800ce84 <TIM_OC6_SetConfig+0xc0>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d007      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a16      	ldr	r2, [pc, #88]	; (800ce88 <TIM_OC6_SetConfig+0xc4>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d003      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a15      	ldr	r2, [pc, #84]	; (800ce8c <TIM_OC6_SetConfig+0xc8>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d109      	bne.n	800ce50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	029b      	lsls	r3, r3, #10
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	621a      	str	r2, [r3, #32]
}
 800ce6a:	bf00      	nop
 800ce6c:	371c      	adds	r7, #28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	feff8fff 	.word	0xfeff8fff
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40010400 	.word	0x40010400
 800ce84:	40014000 	.word	0x40014000
 800ce88:	40014400 	.word	0x40014400
 800ce8c:	40014800 	.word	0x40014800

0800ce90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6a1b      	ldr	r3, [r3, #32]
 800cea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	f023 0201 	bic.w	r2, r3, #1
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ceba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	011b      	lsls	r3, r3, #4
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	f023 030a 	bic.w	r3, r3, #10
 800cecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	621a      	str	r2, [r3, #32]
}
 800cee2:	bf00      	nop
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b087      	sub	sp, #28
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6a1b      	ldr	r3, [r3, #32]
 800cefe:	f023 0210 	bic.w	r2, r3, #16
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6a1b      	ldr	r3, [r3, #32]
 800cf10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	031b      	lsls	r3, r3, #12
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cf2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	011b      	lsls	r3, r3, #4
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	621a      	str	r2, [r3, #32]
}
 800cf42:	bf00      	nop
 800cf44:	371c      	adds	r7, #28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
	...

0800cf50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <TIM_ITRx_SetConfig+0x38>)
 800cf64:	4013      	ands	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	f043 0307 	orr.w	r3, r3, #7
 800cf72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	609a      	str	r2, [r3, #8]
}
 800cf7a:	bf00      	nop
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	ffcfff8f 	.word	0xffcfff8f

0800cf8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
 800cf98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	021a      	lsls	r2, r3, #8
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	431a      	orrs	r2, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	697a      	ldr	r2, [r7, #20]
 800cfbe:	609a      	str	r2, [r3, #8]
}
 800cfc0:	bf00      	nop
 800cfc2:	371c      	adds	r7, #28
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	f003 031f 	and.w	r3, r3, #31
 800cfde:	2201      	movs	r2, #1
 800cfe0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6a1a      	ldr	r2, [r3, #32]
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	43db      	mvns	r3, r3
 800cfee:	401a      	ands	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6a1a      	ldr	r2, [r3, #32]
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	f003 031f 	and.w	r3, r3, #31
 800cffe:	6879      	ldr	r1, [r7, #4]
 800d000:	fa01 f303 	lsl.w	r3, r1, r3
 800d004:	431a      	orrs	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	621a      	str	r2, [r3, #32]
}
 800d00a:	bf00      	nop
 800d00c:	371c      	adds	r7, #28
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
	...

0800d018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d101      	bne.n	800d030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d02c:	2302      	movs	r3, #2
 800d02e:	e06d      	b.n	800d10c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2202      	movs	r2, #2
 800d03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a30      	ldr	r2, [pc, #192]	; (800d118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d004      	beq.n	800d064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a2f      	ldr	r2, [pc, #188]	; (800d11c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d108      	bne.n	800d076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d06a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	4313      	orrs	r3, r2
 800d074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d07c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	4313      	orrs	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a20      	ldr	r2, [pc, #128]	; (800d118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d022      	beq.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0a2:	d01d      	beq.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a1d      	ldr	r2, [pc, #116]	; (800d120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d018      	beq.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a1c      	ldr	r2, [pc, #112]	; (800d124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d013      	beq.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a1a      	ldr	r2, [pc, #104]	; (800d128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d00e      	beq.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a15      	ldr	r2, [pc, #84]	; (800d11c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d009      	beq.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a16      	ldr	r2, [pc, #88]	; (800d12c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d004      	beq.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a15      	ldr	r2, [pc, #84]	; (800d130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d10c      	bne.n	800d0fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	68ba      	ldr	r2, [r7, #8]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	40010000 	.word	0x40010000
 800d11c:	40010400 	.word	0x40010400
 800d120:	40000400 	.word	0x40000400
 800d124:	40000800 	.word	0x40000800
 800d128:	40000c00 	.word	0x40000c00
 800d12c:	40001800 	.word	0x40001800
 800d130:	40014000 	.word	0x40014000

0800d134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d13e:	2300      	movs	r3, #0
 800d140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d101      	bne.n	800d150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d14c:	2302      	movs	r3, #2
 800d14e:	e065      	b.n	800d21c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	4313      	orrs	r3, r2
 800d164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	4313      	orrs	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	695b      	ldr	r3, [r3, #20]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	041b      	lsls	r3, r3, #16
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a16      	ldr	r2, [pc, #88]	; (800d228 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d004      	beq.n	800d1de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a14      	ldr	r2, [pc, #80]	; (800d22c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d115      	bne.n	800d20a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e8:	051b      	lsls	r3, r3, #20
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	69db      	ldr	r3, [r3, #28]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	4313      	orrs	r3, r2
 800d208:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	40010000 	.word	0x40010000
 800d22c:	40010400 	.word	0x40010400

0800d230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	e042      	b.n	800d304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d284:	2b00      	cmp	r3, #0
 800d286:	d106      	bne.n	800d296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7f8 f9fd 	bl	8005690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2224      	movs	r2, #36	; 0x24
 800d29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f022 0201 	bic.w	r2, r2, #1
 800d2ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fdee 	bl	800de90 <UART_SetConfig>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d101      	bne.n	800d2be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e022      	b.n	800d304 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d002      	beq.n	800d2cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f001 fb42 	bl	800e950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d2da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	689a      	ldr	r2, [r3, #8]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d2ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f042 0201 	orr.w	r2, r2, #1
 800d2fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f001 fbc9 	bl	800ea94 <UART_CheckIdleState>
 800d302:	4603      	mov	r3, r0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b08a      	sub	sp, #40	; 0x28
 800d310:	af02      	add	r7, sp, #8
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	4613      	mov	r3, r2
 800d31a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d322:	2b20      	cmp	r3, #32
 800d324:	f040 8083 	bne.w	800d42e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <HAL_UART_Transmit+0x28>
 800d32e:	88fb      	ldrh	r3, [r7, #6]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e07b      	b.n	800d430 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d101      	bne.n	800d346 <HAL_UART_Transmit+0x3a>
 800d342:	2302      	movs	r3, #2
 800d344:	e074      	b.n	800d430 <HAL_UART_Transmit+0x124>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2221      	movs	r2, #33	; 0x21
 800d35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d35e:	f7f8 fc7d 	bl	8005c5c <HAL_GetTick>
 800d362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	88fa      	ldrh	r2, [r7, #6]
 800d368:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	88fa      	ldrh	r2, [r7, #6]
 800d370:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d37c:	d108      	bne.n	800d390 <HAL_UART_Transmit+0x84>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d104      	bne.n	800d390 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d386:	2300      	movs	r3, #0
 800d388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	61bb      	str	r3, [r7, #24]
 800d38e:	e003      	b.n	800d398 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d394:	2300      	movs	r3, #0
 800d396:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d3a0:	e02c      	b.n	800d3fc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	2180      	movs	r1, #128	; 0x80
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f001 fbbc 	bl	800eb2a <UART_WaitOnFlagUntilTimeout>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	e039      	b.n	800d430 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10b      	bne.n	800d3da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d3d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	3302      	adds	r3, #2
 800d3d6:	61bb      	str	r3, [r7, #24]
 800d3d8:	e007      	b.n	800d3ea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	781a      	ldrb	r2, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d402:	b29b      	uxth	r3, r3
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1cc      	bne.n	800d3a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2200      	movs	r2, #0
 800d410:	2140      	movs	r1, #64	; 0x40
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f001 fb89 	bl	800eb2a <UART_WaitOnFlagUntilTimeout>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d41e:	2303      	movs	r3, #3
 800d420:	e006      	b.n	800d430 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2220      	movs	r2, #32
 800d426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	e000      	b.n	800d430 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d42e:	2302      	movs	r3, #2
  }
}
 800d430:	4618      	mov	r0, r3
 800d432:	3720      	adds	r7, #32
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08a      	sub	sp, #40	; 0x28
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	603b      	str	r3, [r7, #0]
 800d444:	4613      	mov	r3, r2
 800d446:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d44e:	2b20      	cmp	r3, #32
 800d450:	f040 80c0 	bne.w	800d5d4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <HAL_UART_Receive+0x28>
 800d45a:	88fb      	ldrh	r3, [r7, #6]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	e0b8      	b.n	800d5d6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d101      	bne.n	800d472 <HAL_UART_Receive+0x3a>
 800d46e:	2302      	movs	r3, #2
 800d470:	e0b1      	b.n	800d5d6 <HAL_UART_Receive+0x19e>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2222      	movs	r2, #34	; 0x22
 800d486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2200      	movs	r2, #0
 800d48e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d490:	f7f8 fbe4 	bl	8005c5c <HAL_GetTick>
 800d494:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	88fa      	ldrh	r2, [r7, #6]
 800d49a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	88fa      	ldrh	r2, [r7, #6]
 800d4a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4ae:	d10e      	bne.n	800d4ce <HAL_UART_Receive+0x96>
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d105      	bne.n	800d4c4 <HAL_UART_Receive+0x8c>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d4be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4c2:	e02d      	b.n	800d520 <HAL_UART_Receive+0xe8>
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	22ff      	movs	r2, #255	; 0xff
 800d4c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4cc:	e028      	b.n	800d520 <HAL_UART_Receive+0xe8>
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10d      	bne.n	800d4f2 <HAL_UART_Receive+0xba>
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d104      	bne.n	800d4e8 <HAL_UART_Receive+0xb0>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	22ff      	movs	r2, #255	; 0xff
 800d4e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4e6:	e01b      	b.n	800d520 <HAL_UART_Receive+0xe8>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	227f      	movs	r2, #127	; 0x7f
 800d4ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4f0:	e016      	b.n	800d520 <HAL_UART_Receive+0xe8>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4fa:	d10d      	bne.n	800d518 <HAL_UART_Receive+0xe0>
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d104      	bne.n	800d50e <HAL_UART_Receive+0xd6>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	227f      	movs	r2, #127	; 0x7f
 800d508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d50c:	e008      	b.n	800d520 <HAL_UART_Receive+0xe8>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	223f      	movs	r2, #63	; 0x3f
 800d512:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d516:	e003      	b.n	800d520 <HAL_UART_Receive+0xe8>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d526:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d530:	d108      	bne.n	800d544 <HAL_UART_Receive+0x10c>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d104      	bne.n	800d544 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	e003      	b.n	800d54c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d554:	e032      	b.n	800d5bc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2200      	movs	r2, #0
 800d55e:	2120      	movs	r1, #32
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f001 fae2 	bl	800eb2a <UART_WaitOnFlagUntilTimeout>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d001      	beq.n	800d570 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800d56c:	2303      	movs	r3, #3
 800d56e:	e032      	b.n	800d5d6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10c      	bne.n	800d590 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	8a7b      	ldrh	r3, [r7, #18]
 800d580:	4013      	ands	r3, r2
 800d582:	b29a      	uxth	r2, r3
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	3302      	adds	r3, #2
 800d58c:	61bb      	str	r3, [r7, #24]
 800d58e:	e00c      	b.n	800d5aa <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d596:	b2da      	uxtb	r2, r3
 800d598:	8a7b      	ldrh	r3, [r7, #18]
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	4013      	ands	r3, r2
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1c6      	bne.n	800d556 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2220      	movs	r2, #32
 800d5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	e000      	b.n	800d5d6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800d5d4:	2302      	movs	r3, #2
  }
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3720      	adds	r7, #32
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
	...

0800d5e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08a      	sub	sp, #40	; 0x28
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f4:	2b20      	cmp	r3, #32
 800d5f6:	d17a      	bne.n	800d6ee <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d002      	beq.n	800d604 <HAL_UART_Transmit_DMA+0x24>
 800d5fe:	88fb      	ldrh	r3, [r7, #6]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d101      	bne.n	800d608 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	e073      	b.n	800d6f0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d101      	bne.n	800d616 <HAL_UART_Transmit_DMA+0x36>
 800d612:	2302      	movs	r3, #2
 800d614:	e06c      	b.n	800d6f0 <HAL_UART_Transmit_DMA+0x110>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	88fa      	ldrh	r2, [r7, #6]
 800d628:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	88fa      	ldrh	r2, [r7, #6]
 800d630:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2221      	movs	r2, #33	; 0x21
 800d640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d02c      	beq.n	800d6a6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d650:	4a29      	ldr	r2, [pc, #164]	; (800d6f8 <HAL_UART_Transmit_DMA+0x118>)
 800d652:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d658:	4a28      	ldr	r2, [pc, #160]	; (800d6fc <HAL_UART_Transmit_DMA+0x11c>)
 800d65a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d660:	4a27      	ldr	r2, [pc, #156]	; (800d700 <HAL_UART_Transmit_DMA+0x120>)
 800d662:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d668:	2200      	movs	r2, #0
 800d66a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d674:	4619      	mov	r1, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3328      	adds	r3, #40	; 0x28
 800d67c:	461a      	mov	r2, r3
 800d67e:	88fb      	ldrh	r3, [r7, #6]
 800d680:	f7f9 f99e 	bl	80069c0 <HAL_DMA_Start_IT>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00d      	beq.n	800d6a6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2210      	movs	r2, #16
 800d68e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2220      	movs	r2, #32
 800d69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e024      	b.n	800d6f0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2240      	movs	r2, #64	; 0x40
 800d6ac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	3308      	adds	r3, #8
 800d6bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	e853 3f00 	ldrex	r3, [r3]
 800d6c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3308      	adds	r3, #8
 800d6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d6:	623a      	str	r2, [r7, #32]
 800d6d8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6da:	69f9      	ldr	r1, [r7, #28]
 800d6dc:	6a3a      	ldr	r2, [r7, #32]
 800d6de:	e841 2300 	strex	r3, r2, [r1]
 800d6e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1e5      	bne.n	800d6b6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	e000      	b.n	800d6f0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d6ee:	2302      	movs	r3, #2
  }
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3728      	adds	r7, #40	; 0x28
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	0800ef5d 	.word	0x0800ef5d
 800d6fc:	0800eff3 	.word	0x0800eff3
 800d700:	0800f169 	.word	0x0800f169

0800d704 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b0ba      	sub	sp, #232	; 0xe8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	69db      	ldr	r3, [r3, #28]
 800d712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d72a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d72e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d732:	4013      	ands	r3, r2
 800d734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d11b      	bne.n	800d778 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d744:	f003 0320 	and.w	r3, r3, #32
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d015      	beq.n	800d778 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d750:	f003 0320 	and.w	r3, r3, #32
 800d754:	2b00      	cmp	r3, #0
 800d756:	d105      	bne.n	800d764 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d75c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d009      	beq.n	800d778 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 835a 	beq.w	800de22 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	4798      	blx	r3
      }
      return;
 800d776:	e354      	b.n	800de22 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 811f 	beq.w	800d9c0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d782:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d786:	4b8b      	ldr	r3, [pc, #556]	; (800d9b4 <HAL_UART_IRQHandler+0x2b0>)
 800d788:	4013      	ands	r3, r2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d106      	bne.n	800d79c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d78e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d792:	4b89      	ldr	r3, [pc, #548]	; (800d9b8 <HAL_UART_IRQHandler+0x2b4>)
 800d794:	4013      	ands	r3, r2
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 8112 	beq.w	800d9c0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d011      	beq.n	800d7cc <HAL_UART_IRQHandler+0xc8>
 800d7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00b      	beq.n	800d7cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7c2:	f043 0201 	orr.w	r2, r3, #1
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7d0:	f003 0302 	and.w	r3, r3, #2
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d011      	beq.n	800d7fc <HAL_UART_IRQHandler+0xf8>
 800d7d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00b      	beq.n	800d7fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7f2:	f043 0204 	orr.w	r2, r3, #4
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d800:	f003 0304 	and.w	r3, r3, #4
 800d804:	2b00      	cmp	r3, #0
 800d806:	d011      	beq.n	800d82c <HAL_UART_IRQHandler+0x128>
 800d808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00b      	beq.n	800d82c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2204      	movs	r2, #4
 800d81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d822:	f043 0202 	orr.w	r2, r3, #2
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d830:	f003 0308 	and.w	r3, r3, #8
 800d834:	2b00      	cmp	r3, #0
 800d836:	d017      	beq.n	800d868 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d83c:	f003 0320 	and.w	r3, r3, #32
 800d840:	2b00      	cmp	r3, #0
 800d842:	d105      	bne.n	800d850 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d844:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d848:	4b5a      	ldr	r3, [pc, #360]	; (800d9b4 <HAL_UART_IRQHandler+0x2b0>)
 800d84a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00b      	beq.n	800d868 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2208      	movs	r2, #8
 800d856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d85e:	f043 0208 	orr.w	r2, r3, #8
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d86c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d870:	2b00      	cmp	r3, #0
 800d872:	d012      	beq.n	800d89a <HAL_UART_IRQHandler+0x196>
 800d874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00c      	beq.n	800d89a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d890:	f043 0220 	orr.w	r2, r3, #32
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 82c0 	beq.w	800de26 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8aa:	f003 0320 	and.w	r3, r3, #32
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d013      	beq.n	800d8da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8b6:	f003 0320 	and.w	r3, r3, #32
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d105      	bne.n	800d8ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ee:	2b40      	cmp	r3, #64	; 0x40
 800d8f0:	d005      	beq.n	800d8fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d04f      	beq.n	800d99e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f001 fac6 	bl	800ee90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d90e:	2b40      	cmp	r3, #64	; 0x40
 800d910:	d141      	bne.n	800d996 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d920:	e853 3f00 	ldrex	r3, [r3]
 800d924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3308      	adds	r3, #8
 800d93a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d93e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d94a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d94e:	e841 2300 	strex	r3, r2, [r1]
 800d952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1d9      	bne.n	800d912 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d962:	2b00      	cmp	r3, #0
 800d964:	d013      	beq.n	800d98e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d96a:	4a14      	ldr	r2, [pc, #80]	; (800d9bc <HAL_UART_IRQHandler+0x2b8>)
 800d96c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d972:	4618      	mov	r0, r3
 800d974:	f7f9 fdac 	bl	80074d0 <HAL_DMA_Abort_IT>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d017      	beq.n	800d9ae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d98c:	e00f      	b.n	800d9ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fa74 	bl	800de7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d994:	e00b      	b.n	800d9ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fa70 	bl	800de7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d99c:	e007      	b.n	800d9ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 fa6c 	bl	800de7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d9ac:	e23b      	b.n	800de26 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ae:	bf00      	nop
    return;
 800d9b0:	e239      	b.n	800de26 <HAL_UART_IRQHandler+0x722>
 800d9b2:	bf00      	nop
 800d9b4:	10000001 	.word	0x10000001
 800d9b8:	04000120 	.word	0x04000120
 800d9bc:	0800f1e9 	.word	0x0800f1e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	f040 81ce 	bne.w	800dd66 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ce:	f003 0310 	and.w	r3, r3, #16
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 81c7 	beq.w	800dd66 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9dc:	f003 0310 	and.w	r3, r3, #16
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 81c0 	beq.w	800dd66 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2210      	movs	r2, #16
 800d9ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f8:	2b40      	cmp	r3, #64	; 0x40
 800d9fa:	f040 813b 	bne.w	800dc74 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a8b      	ldr	r2, [pc, #556]	; (800dc34 <HAL_UART_IRQHandler+0x530>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d059      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a89      	ldr	r2, [pc, #548]	; (800dc38 <HAL_UART_IRQHandler+0x534>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d053      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a87      	ldr	r2, [pc, #540]	; (800dc3c <HAL_UART_IRQHandler+0x538>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d04d      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a85      	ldr	r2, [pc, #532]	; (800dc40 <HAL_UART_IRQHandler+0x53c>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d047      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a83      	ldr	r2, [pc, #524]	; (800dc44 <HAL_UART_IRQHandler+0x540>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d041      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a81      	ldr	r2, [pc, #516]	; (800dc48 <HAL_UART_IRQHandler+0x544>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d03b      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a7f      	ldr	r2, [pc, #508]	; (800dc4c <HAL_UART_IRQHandler+0x548>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d035      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a7d      	ldr	r2, [pc, #500]	; (800dc50 <HAL_UART_IRQHandler+0x54c>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d02f      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a7b      	ldr	r2, [pc, #492]	; (800dc54 <HAL_UART_IRQHandler+0x550>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d029      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a79      	ldr	r2, [pc, #484]	; (800dc58 <HAL_UART_IRQHandler+0x554>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d023      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a77      	ldr	r2, [pc, #476]	; (800dc5c <HAL_UART_IRQHandler+0x558>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d01d      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a75      	ldr	r2, [pc, #468]	; (800dc60 <HAL_UART_IRQHandler+0x55c>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d017      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a73      	ldr	r2, [pc, #460]	; (800dc64 <HAL_UART_IRQHandler+0x560>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d011      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a71      	ldr	r2, [pc, #452]	; (800dc68 <HAL_UART_IRQHandler+0x564>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d00b      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a6f      	ldr	r2, [pc, #444]	; (800dc6c <HAL_UART_IRQHandler+0x568>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d005      	beq.n	800dabe <HAL_UART_IRQHandler+0x3ba>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a6d      	ldr	r2, [pc, #436]	; (800dc70 <HAL_UART_IRQHandler+0x56c>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d105      	bne.n	800daca <HAL_UART_IRQHandler+0x3c6>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	e004      	b.n	800dad4 <HAL_UART_IRQHandler+0x3d0>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 81a4 	beq.w	800de2a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dae8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800daec:	429a      	cmp	r2, r3
 800daee:	f080 819c 	bcs.w	800de2a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800daf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db00:	69db      	ldr	r3, [r3, #28]
 800db02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db06:	f000 8086 	beq.w	800dc16 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db16:	e853 3f00 	ldrex	r3, [r3]
 800db1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	461a      	mov	r2, r3
 800db30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db44:	e841 2300 	strex	r3, r2, [r1]
 800db48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800db4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db50:	2b00      	cmp	r3, #0
 800db52:	d1da      	bne.n	800db0a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3308      	adds	r3, #8
 800db5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db5e:	e853 3f00 	ldrex	r3, [r3]
 800db62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800db64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db66:	f023 0301 	bic.w	r3, r3, #1
 800db6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	3308      	adds	r3, #8
 800db74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800db78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800db7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800db80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db84:	e841 2300 	strex	r3, r2, [r1]
 800db88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800db8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1e1      	bne.n	800db54 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3308      	adds	r3, #8
 800db96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db9a:	e853 3f00 	ldrex	r3, [r3]
 800db9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3308      	adds	r3, #8
 800dbb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dbb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dbb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dbba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbbc:	e841 2300 	strex	r3, r2, [r1]
 800dbc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dbc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1e3      	bne.n	800db90 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2220      	movs	r2, #32
 800dbcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbde:	e853 3f00 	ldrex	r3, [r3]
 800dbe2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dbe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbe6:	f023 0310 	bic.w	r3, r3, #16
 800dbea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dbf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbfa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dbfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc00:	e841 2300 	strex	r3, r2, [r1]
 800dc04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1e4      	bne.n	800dbd6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f9 f93f 	bl	8006e94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7f3 ffaa 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc30:	e0fb      	b.n	800de2a <HAL_UART_IRQHandler+0x726>
 800dc32:	bf00      	nop
 800dc34:	40020010 	.word	0x40020010
 800dc38:	40020028 	.word	0x40020028
 800dc3c:	40020040 	.word	0x40020040
 800dc40:	40020058 	.word	0x40020058
 800dc44:	40020070 	.word	0x40020070
 800dc48:	40020088 	.word	0x40020088
 800dc4c:	400200a0 	.word	0x400200a0
 800dc50:	400200b8 	.word	0x400200b8
 800dc54:	40020410 	.word	0x40020410
 800dc58:	40020428 	.word	0x40020428
 800dc5c:	40020440 	.word	0x40020440
 800dc60:	40020458 	.word	0x40020458
 800dc64:	40020470 	.word	0x40020470
 800dc68:	40020488 	.word	0x40020488
 800dc6c:	400204a0 	.word	0x400204a0
 800dc70:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	1ad3      	subs	r3, r2, r3
 800dc84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f000 80cc 	beq.w	800de2e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dc96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f000 80c7 	beq.w	800de2e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca8:	e853 3f00 	ldrex	r3, [r3]
 800dcac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcc2:	647b      	str	r3, [r7, #68]	; 0x44
 800dcc4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dcc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcca:	e841 2300 	strex	r3, r2, [r1]
 800dcce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1e4      	bne.n	800dca0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	3308      	adds	r3, #8
 800dcdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	e853 3f00 	ldrex	r3, [r3]
 800dce4:	623b      	str	r3, [r7, #32]
   return(result);
 800dce6:	6a3a      	ldr	r2, [r7, #32]
 800dce8:	4b54      	ldr	r3, [pc, #336]	; (800de3c <HAL_UART_IRQHandler+0x738>)
 800dcea:	4013      	ands	r3, r2
 800dcec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dcfa:	633a      	str	r2, [r7, #48]	; 0x30
 800dcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd02:	e841 2300 	strex	r3, r2, [r1]
 800dd06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1e3      	bne.n	800dcd6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2220      	movs	r2, #32
 800dd12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	e853 3f00 	ldrex	r3, [r3]
 800dd2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f023 0310 	bic.w	r3, r3, #16
 800dd36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd44:	61fb      	str	r3, [r7, #28]
 800dd46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd48:	69b9      	ldr	r1, [r7, #24]
 800dd4a:	69fa      	ldr	r2, [r7, #28]
 800dd4c:	e841 2300 	strex	r3, r2, [r1]
 800dd50:	617b      	str	r3, [r7, #20]
   return(result);
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1e4      	bne.n	800dd22 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7f3 ff10 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd64:	e063      	b.n	800de2e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00e      	beq.n	800dd90 <HAL_UART_IRQHandler+0x68c>
 800dd72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d008      	beq.n	800dd90 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dd86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f001 fa6e 	bl	800f26a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd8e:	e051      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dd90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d014      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dd9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dda0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d105      	bne.n	800ddb4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dda8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d008      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d03a      	beq.n	800de32 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	4798      	blx	r3
    }
    return;
 800ddc4:	e035      	b.n	800de32 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ddc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d009      	beq.n	800dde6 <HAL_UART_IRQHandler+0x6e2>
 800ddd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f001 fa18 	bl	800f214 <UART_EndTransmit_IT>
    return;
 800dde4:	e026      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dde6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d009      	beq.n	800de06 <HAL_UART_IRQHandler+0x702>
 800ddf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddf6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d003      	beq.n	800de06 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f001 fa47 	bl	800f292 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de04:	e016      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d010      	beq.n	800de34 <HAL_UART_IRQHandler+0x730>
 800de12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de16:	2b00      	cmp	r3, #0
 800de18:	da0c      	bge.n	800de34 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f001 fa2f 	bl	800f27e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de20:	e008      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
      return;
 800de22:	bf00      	nop
 800de24:	e006      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
    return;
 800de26:	bf00      	nop
 800de28:	e004      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
      return;
 800de2a:	bf00      	nop
 800de2c:	e002      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
      return;
 800de2e:	bf00      	nop
 800de30:	e000      	b.n	800de34 <HAL_UART_IRQHandler+0x730>
    return;
 800de32:	bf00      	nop
  }
}
 800de34:	37e8      	adds	r7, #232	; 0xe8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	effffffe 	.word	0xeffffffe

0800de40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800de48:	bf00      	nop
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800de70:	bf00      	nop
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de90:	b5b0      	push	{r4, r5, r7, lr}
 800de92:	b08e      	sub	sp, #56	; 0x38
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	689a      	ldr	r2, [r3, #8]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	431a      	orrs	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	695b      	ldr	r3, [r3, #20]
 800deac:	431a      	orrs	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	4bbf      	ldr	r3, [pc, #764]	; (800e1bc <UART_SetConfig+0x32c>)
 800debe:	4013      	ands	r3, r2
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	6812      	ldr	r2, [r2, #0]
 800dec4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dec6:	430b      	orrs	r3, r1
 800dec8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	68da      	ldr	r2, [r3, #12]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	430a      	orrs	r2, r1
 800dede:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	699b      	ldr	r3, [r3, #24]
 800dee4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4ab5      	ldr	r2, [pc, #724]	; (800e1c0 <UART_SetConfig+0x330>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d004      	beq.n	800defa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800def6:	4313      	orrs	r3, r2
 800def8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	689a      	ldr	r2, [r3, #8]
 800df00:	4bb0      	ldr	r3, [pc, #704]	; (800e1c4 <UART_SetConfig+0x334>)
 800df02:	4013      	ands	r3, r2
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	6812      	ldr	r2, [r2, #0]
 800df08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df0a:	430b      	orrs	r3, r1
 800df0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df14:	f023 010f 	bic.w	r1, r3, #15
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	430a      	orrs	r2, r1
 800df22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4aa7      	ldr	r2, [pc, #668]	; (800e1c8 <UART_SetConfig+0x338>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d176      	bne.n	800e01c <UART_SetConfig+0x18c>
 800df2e:	4ba7      	ldr	r3, [pc, #668]	; (800e1cc <UART_SetConfig+0x33c>)
 800df30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df36:	2b28      	cmp	r3, #40	; 0x28
 800df38:	d86c      	bhi.n	800e014 <UART_SetConfig+0x184>
 800df3a:	a201      	add	r2, pc, #4	; (adr r2, 800df40 <UART_SetConfig+0xb0>)
 800df3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df40:	0800dfe5 	.word	0x0800dfe5
 800df44:	0800e015 	.word	0x0800e015
 800df48:	0800e015 	.word	0x0800e015
 800df4c:	0800e015 	.word	0x0800e015
 800df50:	0800e015 	.word	0x0800e015
 800df54:	0800e015 	.word	0x0800e015
 800df58:	0800e015 	.word	0x0800e015
 800df5c:	0800e015 	.word	0x0800e015
 800df60:	0800dfed 	.word	0x0800dfed
 800df64:	0800e015 	.word	0x0800e015
 800df68:	0800e015 	.word	0x0800e015
 800df6c:	0800e015 	.word	0x0800e015
 800df70:	0800e015 	.word	0x0800e015
 800df74:	0800e015 	.word	0x0800e015
 800df78:	0800e015 	.word	0x0800e015
 800df7c:	0800e015 	.word	0x0800e015
 800df80:	0800dff5 	.word	0x0800dff5
 800df84:	0800e015 	.word	0x0800e015
 800df88:	0800e015 	.word	0x0800e015
 800df8c:	0800e015 	.word	0x0800e015
 800df90:	0800e015 	.word	0x0800e015
 800df94:	0800e015 	.word	0x0800e015
 800df98:	0800e015 	.word	0x0800e015
 800df9c:	0800e015 	.word	0x0800e015
 800dfa0:	0800dffd 	.word	0x0800dffd
 800dfa4:	0800e015 	.word	0x0800e015
 800dfa8:	0800e015 	.word	0x0800e015
 800dfac:	0800e015 	.word	0x0800e015
 800dfb0:	0800e015 	.word	0x0800e015
 800dfb4:	0800e015 	.word	0x0800e015
 800dfb8:	0800e015 	.word	0x0800e015
 800dfbc:	0800e015 	.word	0x0800e015
 800dfc0:	0800e005 	.word	0x0800e005
 800dfc4:	0800e015 	.word	0x0800e015
 800dfc8:	0800e015 	.word	0x0800e015
 800dfcc:	0800e015 	.word	0x0800e015
 800dfd0:	0800e015 	.word	0x0800e015
 800dfd4:	0800e015 	.word	0x0800e015
 800dfd8:	0800e015 	.word	0x0800e015
 800dfdc:	0800e015 	.word	0x0800e015
 800dfe0:	0800e00d 	.word	0x0800e00d
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfea:	e222      	b.n	800e432 <UART_SetConfig+0x5a2>
 800dfec:	2304      	movs	r3, #4
 800dfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dff2:	e21e      	b.n	800e432 <UART_SetConfig+0x5a2>
 800dff4:	2308      	movs	r3, #8
 800dff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dffa:	e21a      	b.n	800e432 <UART_SetConfig+0x5a2>
 800dffc:	2310      	movs	r3, #16
 800dffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e002:	e216      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e004:	2320      	movs	r3, #32
 800e006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e00a:	e212      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e00c:	2340      	movs	r3, #64	; 0x40
 800e00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e012:	e20e      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e014:	2380      	movs	r3, #128	; 0x80
 800e016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e01a:	e20a      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a6b      	ldr	r2, [pc, #428]	; (800e1d0 <UART_SetConfig+0x340>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d130      	bne.n	800e088 <UART_SetConfig+0x1f8>
 800e026:	4b69      	ldr	r3, [pc, #420]	; (800e1cc <UART_SetConfig+0x33c>)
 800e028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e02a:	f003 0307 	and.w	r3, r3, #7
 800e02e:	2b05      	cmp	r3, #5
 800e030:	d826      	bhi.n	800e080 <UART_SetConfig+0x1f0>
 800e032:	a201      	add	r2, pc, #4	; (adr r2, 800e038 <UART_SetConfig+0x1a8>)
 800e034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e038:	0800e051 	.word	0x0800e051
 800e03c:	0800e059 	.word	0x0800e059
 800e040:	0800e061 	.word	0x0800e061
 800e044:	0800e069 	.word	0x0800e069
 800e048:	0800e071 	.word	0x0800e071
 800e04c:	0800e079 	.word	0x0800e079
 800e050:	2300      	movs	r3, #0
 800e052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e056:	e1ec      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e058:	2304      	movs	r3, #4
 800e05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e05e:	e1e8      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e060:	2308      	movs	r3, #8
 800e062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e066:	e1e4      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e068:	2310      	movs	r3, #16
 800e06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e06e:	e1e0      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e070:	2320      	movs	r3, #32
 800e072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e076:	e1dc      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e078:	2340      	movs	r3, #64	; 0x40
 800e07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e07e:	e1d8      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e080:	2380      	movs	r3, #128	; 0x80
 800e082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e086:	e1d4      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a51      	ldr	r2, [pc, #324]	; (800e1d4 <UART_SetConfig+0x344>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d130      	bne.n	800e0f4 <UART_SetConfig+0x264>
 800e092:	4b4e      	ldr	r3, [pc, #312]	; (800e1cc <UART_SetConfig+0x33c>)
 800e094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e096:	f003 0307 	and.w	r3, r3, #7
 800e09a:	2b05      	cmp	r3, #5
 800e09c:	d826      	bhi.n	800e0ec <UART_SetConfig+0x25c>
 800e09e:	a201      	add	r2, pc, #4	; (adr r2, 800e0a4 <UART_SetConfig+0x214>)
 800e0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a4:	0800e0bd 	.word	0x0800e0bd
 800e0a8:	0800e0c5 	.word	0x0800e0c5
 800e0ac:	0800e0cd 	.word	0x0800e0cd
 800e0b0:	0800e0d5 	.word	0x0800e0d5
 800e0b4:	0800e0dd 	.word	0x0800e0dd
 800e0b8:	0800e0e5 	.word	0x0800e0e5
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0c2:	e1b6      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e0c4:	2304      	movs	r3, #4
 800e0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ca:	e1b2      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e0cc:	2308      	movs	r3, #8
 800e0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0d2:	e1ae      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e0d4:	2310      	movs	r3, #16
 800e0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0da:	e1aa      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e0dc:	2320      	movs	r3, #32
 800e0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0e2:	e1a6      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e0e4:	2340      	movs	r3, #64	; 0x40
 800e0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ea:	e1a2      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e0ec:	2380      	movs	r3, #128	; 0x80
 800e0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0f2:	e19e      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a37      	ldr	r2, [pc, #220]	; (800e1d8 <UART_SetConfig+0x348>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d130      	bne.n	800e160 <UART_SetConfig+0x2d0>
 800e0fe:	4b33      	ldr	r3, [pc, #204]	; (800e1cc <UART_SetConfig+0x33c>)
 800e100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e102:	f003 0307 	and.w	r3, r3, #7
 800e106:	2b05      	cmp	r3, #5
 800e108:	d826      	bhi.n	800e158 <UART_SetConfig+0x2c8>
 800e10a:	a201      	add	r2, pc, #4	; (adr r2, 800e110 <UART_SetConfig+0x280>)
 800e10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e110:	0800e129 	.word	0x0800e129
 800e114:	0800e131 	.word	0x0800e131
 800e118:	0800e139 	.word	0x0800e139
 800e11c:	0800e141 	.word	0x0800e141
 800e120:	0800e149 	.word	0x0800e149
 800e124:	0800e151 	.word	0x0800e151
 800e128:	2300      	movs	r3, #0
 800e12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e12e:	e180      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e130:	2304      	movs	r3, #4
 800e132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e136:	e17c      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e138:	2308      	movs	r3, #8
 800e13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e13e:	e178      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e140:	2310      	movs	r3, #16
 800e142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e146:	e174      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e148:	2320      	movs	r3, #32
 800e14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e14e:	e170      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e150:	2340      	movs	r3, #64	; 0x40
 800e152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e156:	e16c      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e158:	2380      	movs	r3, #128	; 0x80
 800e15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e15e:	e168      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a1d      	ldr	r2, [pc, #116]	; (800e1dc <UART_SetConfig+0x34c>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d142      	bne.n	800e1f0 <UART_SetConfig+0x360>
 800e16a:	4b18      	ldr	r3, [pc, #96]	; (800e1cc <UART_SetConfig+0x33c>)
 800e16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e16e:	f003 0307 	and.w	r3, r3, #7
 800e172:	2b05      	cmp	r3, #5
 800e174:	d838      	bhi.n	800e1e8 <UART_SetConfig+0x358>
 800e176:	a201      	add	r2, pc, #4	; (adr r2, 800e17c <UART_SetConfig+0x2ec>)
 800e178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e17c:	0800e195 	.word	0x0800e195
 800e180:	0800e19d 	.word	0x0800e19d
 800e184:	0800e1a5 	.word	0x0800e1a5
 800e188:	0800e1ad 	.word	0x0800e1ad
 800e18c:	0800e1b5 	.word	0x0800e1b5
 800e190:	0800e1e1 	.word	0x0800e1e1
 800e194:	2300      	movs	r3, #0
 800e196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e19a:	e14a      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e19c:	2304      	movs	r3, #4
 800e19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1a2:	e146      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e1a4:	2308      	movs	r3, #8
 800e1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1aa:	e142      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e1ac:	2310      	movs	r3, #16
 800e1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1b2:	e13e      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e1b4:	2320      	movs	r3, #32
 800e1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1ba:	e13a      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e1bc:	cfff69f3 	.word	0xcfff69f3
 800e1c0:	58000c00 	.word	0x58000c00
 800e1c4:	11fff4ff 	.word	0x11fff4ff
 800e1c8:	40011000 	.word	0x40011000
 800e1cc:	58024400 	.word	0x58024400
 800e1d0:	40004400 	.word	0x40004400
 800e1d4:	40004800 	.word	0x40004800
 800e1d8:	40004c00 	.word	0x40004c00
 800e1dc:	40005000 	.word	0x40005000
 800e1e0:	2340      	movs	r3, #64	; 0x40
 800e1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1e6:	e124      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e1e8:	2380      	movs	r3, #128	; 0x80
 800e1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1ee:	e120      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4acc      	ldr	r2, [pc, #816]	; (800e528 <UART_SetConfig+0x698>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d176      	bne.n	800e2e8 <UART_SetConfig+0x458>
 800e1fa:	4bcc      	ldr	r3, [pc, #816]	; (800e52c <UART_SetConfig+0x69c>)
 800e1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e202:	2b28      	cmp	r3, #40	; 0x28
 800e204:	d86c      	bhi.n	800e2e0 <UART_SetConfig+0x450>
 800e206:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <UART_SetConfig+0x37c>)
 800e208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20c:	0800e2b1 	.word	0x0800e2b1
 800e210:	0800e2e1 	.word	0x0800e2e1
 800e214:	0800e2e1 	.word	0x0800e2e1
 800e218:	0800e2e1 	.word	0x0800e2e1
 800e21c:	0800e2e1 	.word	0x0800e2e1
 800e220:	0800e2e1 	.word	0x0800e2e1
 800e224:	0800e2e1 	.word	0x0800e2e1
 800e228:	0800e2e1 	.word	0x0800e2e1
 800e22c:	0800e2b9 	.word	0x0800e2b9
 800e230:	0800e2e1 	.word	0x0800e2e1
 800e234:	0800e2e1 	.word	0x0800e2e1
 800e238:	0800e2e1 	.word	0x0800e2e1
 800e23c:	0800e2e1 	.word	0x0800e2e1
 800e240:	0800e2e1 	.word	0x0800e2e1
 800e244:	0800e2e1 	.word	0x0800e2e1
 800e248:	0800e2e1 	.word	0x0800e2e1
 800e24c:	0800e2c1 	.word	0x0800e2c1
 800e250:	0800e2e1 	.word	0x0800e2e1
 800e254:	0800e2e1 	.word	0x0800e2e1
 800e258:	0800e2e1 	.word	0x0800e2e1
 800e25c:	0800e2e1 	.word	0x0800e2e1
 800e260:	0800e2e1 	.word	0x0800e2e1
 800e264:	0800e2e1 	.word	0x0800e2e1
 800e268:	0800e2e1 	.word	0x0800e2e1
 800e26c:	0800e2c9 	.word	0x0800e2c9
 800e270:	0800e2e1 	.word	0x0800e2e1
 800e274:	0800e2e1 	.word	0x0800e2e1
 800e278:	0800e2e1 	.word	0x0800e2e1
 800e27c:	0800e2e1 	.word	0x0800e2e1
 800e280:	0800e2e1 	.word	0x0800e2e1
 800e284:	0800e2e1 	.word	0x0800e2e1
 800e288:	0800e2e1 	.word	0x0800e2e1
 800e28c:	0800e2d1 	.word	0x0800e2d1
 800e290:	0800e2e1 	.word	0x0800e2e1
 800e294:	0800e2e1 	.word	0x0800e2e1
 800e298:	0800e2e1 	.word	0x0800e2e1
 800e29c:	0800e2e1 	.word	0x0800e2e1
 800e2a0:	0800e2e1 	.word	0x0800e2e1
 800e2a4:	0800e2e1 	.word	0x0800e2e1
 800e2a8:	0800e2e1 	.word	0x0800e2e1
 800e2ac:	0800e2d9 	.word	0x0800e2d9
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2b6:	e0bc      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e2b8:	2304      	movs	r3, #4
 800e2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2be:	e0b8      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e2c0:	2308      	movs	r3, #8
 800e2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2c6:	e0b4      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e2c8:	2310      	movs	r3, #16
 800e2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ce:	e0b0      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e2d0:	2320      	movs	r3, #32
 800e2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2d6:	e0ac      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e2d8:	2340      	movs	r3, #64	; 0x40
 800e2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2de:	e0a8      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e2e0:	2380      	movs	r3, #128	; 0x80
 800e2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2e6:	e0a4      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a90      	ldr	r2, [pc, #576]	; (800e530 <UART_SetConfig+0x6a0>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d130      	bne.n	800e354 <UART_SetConfig+0x4c4>
 800e2f2:	4b8e      	ldr	r3, [pc, #568]	; (800e52c <UART_SetConfig+0x69c>)
 800e2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f6:	f003 0307 	and.w	r3, r3, #7
 800e2fa:	2b05      	cmp	r3, #5
 800e2fc:	d826      	bhi.n	800e34c <UART_SetConfig+0x4bc>
 800e2fe:	a201      	add	r2, pc, #4	; (adr r2, 800e304 <UART_SetConfig+0x474>)
 800e300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e304:	0800e31d 	.word	0x0800e31d
 800e308:	0800e325 	.word	0x0800e325
 800e30c:	0800e32d 	.word	0x0800e32d
 800e310:	0800e335 	.word	0x0800e335
 800e314:	0800e33d 	.word	0x0800e33d
 800e318:	0800e345 	.word	0x0800e345
 800e31c:	2300      	movs	r3, #0
 800e31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e322:	e086      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e324:	2304      	movs	r3, #4
 800e326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e32a:	e082      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e32c:	2308      	movs	r3, #8
 800e32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e332:	e07e      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e334:	2310      	movs	r3, #16
 800e336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e33a:	e07a      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e33c:	2320      	movs	r3, #32
 800e33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e342:	e076      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e344:	2340      	movs	r3, #64	; 0x40
 800e346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e34a:	e072      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e34c:	2380      	movs	r3, #128	; 0x80
 800e34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e352:	e06e      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a76      	ldr	r2, [pc, #472]	; (800e534 <UART_SetConfig+0x6a4>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d130      	bne.n	800e3c0 <UART_SetConfig+0x530>
 800e35e:	4b73      	ldr	r3, [pc, #460]	; (800e52c <UART_SetConfig+0x69c>)
 800e360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e362:	f003 0307 	and.w	r3, r3, #7
 800e366:	2b05      	cmp	r3, #5
 800e368:	d826      	bhi.n	800e3b8 <UART_SetConfig+0x528>
 800e36a:	a201      	add	r2, pc, #4	; (adr r2, 800e370 <UART_SetConfig+0x4e0>)
 800e36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e370:	0800e389 	.word	0x0800e389
 800e374:	0800e391 	.word	0x0800e391
 800e378:	0800e399 	.word	0x0800e399
 800e37c:	0800e3a1 	.word	0x0800e3a1
 800e380:	0800e3a9 	.word	0x0800e3a9
 800e384:	0800e3b1 	.word	0x0800e3b1
 800e388:	2300      	movs	r3, #0
 800e38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e38e:	e050      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e390:	2304      	movs	r3, #4
 800e392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e396:	e04c      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e398:	2308      	movs	r3, #8
 800e39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e39e:	e048      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e3a0:	2310      	movs	r3, #16
 800e3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3a6:	e044      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e3a8:	2320      	movs	r3, #32
 800e3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3ae:	e040      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e3b0:	2340      	movs	r3, #64	; 0x40
 800e3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3b6:	e03c      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e3b8:	2380      	movs	r3, #128	; 0x80
 800e3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3be:	e038      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a5c      	ldr	r2, [pc, #368]	; (800e538 <UART_SetConfig+0x6a8>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d130      	bne.n	800e42c <UART_SetConfig+0x59c>
 800e3ca:	4b58      	ldr	r3, [pc, #352]	; (800e52c <UART_SetConfig+0x69c>)
 800e3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ce:	f003 0307 	and.w	r3, r3, #7
 800e3d2:	2b05      	cmp	r3, #5
 800e3d4:	d826      	bhi.n	800e424 <UART_SetConfig+0x594>
 800e3d6:	a201      	add	r2, pc, #4	; (adr r2, 800e3dc <UART_SetConfig+0x54c>)
 800e3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3dc:	0800e3f5 	.word	0x0800e3f5
 800e3e0:	0800e3fd 	.word	0x0800e3fd
 800e3e4:	0800e405 	.word	0x0800e405
 800e3e8:	0800e40d 	.word	0x0800e40d
 800e3ec:	0800e415 	.word	0x0800e415
 800e3f0:	0800e41d 	.word	0x0800e41d
 800e3f4:	2302      	movs	r3, #2
 800e3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3fa:	e01a      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e3fc:	2304      	movs	r3, #4
 800e3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e402:	e016      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e404:	2308      	movs	r3, #8
 800e406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e40a:	e012      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e40c:	2310      	movs	r3, #16
 800e40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e412:	e00e      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e414:	2320      	movs	r3, #32
 800e416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e41a:	e00a      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e41c:	2340      	movs	r3, #64	; 0x40
 800e41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e422:	e006      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e424:	2380      	movs	r3, #128	; 0x80
 800e426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e42a:	e002      	b.n	800e432 <UART_SetConfig+0x5a2>
 800e42c:	2380      	movs	r3, #128	; 0x80
 800e42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a40      	ldr	r2, [pc, #256]	; (800e538 <UART_SetConfig+0x6a8>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	f040 80ef 	bne.w	800e61c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e43e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e442:	2b20      	cmp	r3, #32
 800e444:	dc46      	bgt.n	800e4d4 <UART_SetConfig+0x644>
 800e446:	2b02      	cmp	r3, #2
 800e448:	f2c0 8081 	blt.w	800e54e <UART_SetConfig+0x6be>
 800e44c:	3b02      	subs	r3, #2
 800e44e:	2b1e      	cmp	r3, #30
 800e450:	d87d      	bhi.n	800e54e <UART_SetConfig+0x6be>
 800e452:	a201      	add	r2, pc, #4	; (adr r2, 800e458 <UART_SetConfig+0x5c8>)
 800e454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e458:	0800e4db 	.word	0x0800e4db
 800e45c:	0800e54f 	.word	0x0800e54f
 800e460:	0800e4e3 	.word	0x0800e4e3
 800e464:	0800e54f 	.word	0x0800e54f
 800e468:	0800e54f 	.word	0x0800e54f
 800e46c:	0800e54f 	.word	0x0800e54f
 800e470:	0800e4f3 	.word	0x0800e4f3
 800e474:	0800e54f 	.word	0x0800e54f
 800e478:	0800e54f 	.word	0x0800e54f
 800e47c:	0800e54f 	.word	0x0800e54f
 800e480:	0800e54f 	.word	0x0800e54f
 800e484:	0800e54f 	.word	0x0800e54f
 800e488:	0800e54f 	.word	0x0800e54f
 800e48c:	0800e54f 	.word	0x0800e54f
 800e490:	0800e503 	.word	0x0800e503
 800e494:	0800e54f 	.word	0x0800e54f
 800e498:	0800e54f 	.word	0x0800e54f
 800e49c:	0800e54f 	.word	0x0800e54f
 800e4a0:	0800e54f 	.word	0x0800e54f
 800e4a4:	0800e54f 	.word	0x0800e54f
 800e4a8:	0800e54f 	.word	0x0800e54f
 800e4ac:	0800e54f 	.word	0x0800e54f
 800e4b0:	0800e54f 	.word	0x0800e54f
 800e4b4:	0800e54f 	.word	0x0800e54f
 800e4b8:	0800e54f 	.word	0x0800e54f
 800e4bc:	0800e54f 	.word	0x0800e54f
 800e4c0:	0800e54f 	.word	0x0800e54f
 800e4c4:	0800e54f 	.word	0x0800e54f
 800e4c8:	0800e54f 	.word	0x0800e54f
 800e4cc:	0800e54f 	.word	0x0800e54f
 800e4d0:	0800e541 	.word	0x0800e541
 800e4d4:	2b40      	cmp	r3, #64	; 0x40
 800e4d6:	d036      	beq.n	800e546 <UART_SetConfig+0x6b6>
 800e4d8:	e039      	b.n	800e54e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e4da:	f7fc fe65 	bl	800b1a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e4de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e4e0:	e03b      	b.n	800e55a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4e2:	f107 0314 	add.w	r3, r7, #20
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fc fe74 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4f0:	e033      	b.n	800e55a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4f2:	f107 0308 	add.w	r3, r7, #8
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fc ffc0 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e500:	e02b      	b.n	800e55a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e502:	4b0a      	ldr	r3, [pc, #40]	; (800e52c <UART_SetConfig+0x69c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f003 0320 	and.w	r3, r3, #32
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d009      	beq.n	800e522 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e50e:	4b07      	ldr	r3, [pc, #28]	; (800e52c <UART_SetConfig+0x69c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	08db      	lsrs	r3, r3, #3
 800e514:	f003 0303 	and.w	r3, r3, #3
 800e518:	4a08      	ldr	r2, [pc, #32]	; (800e53c <UART_SetConfig+0x6ac>)
 800e51a:	fa22 f303 	lsr.w	r3, r2, r3
 800e51e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e520:	e01b      	b.n	800e55a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e522:	4b06      	ldr	r3, [pc, #24]	; (800e53c <UART_SetConfig+0x6ac>)
 800e524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e526:	e018      	b.n	800e55a <UART_SetConfig+0x6ca>
 800e528:	40011400 	.word	0x40011400
 800e52c:	58024400 	.word	0x58024400
 800e530:	40007800 	.word	0x40007800
 800e534:	40007c00 	.word	0x40007c00
 800e538:	58000c00 	.word	0x58000c00
 800e53c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e540:	4bc4      	ldr	r3, [pc, #784]	; (800e854 <UART_SetConfig+0x9c4>)
 800e542:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e544:	e009      	b.n	800e55a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e54a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e54c:	e005      	b.n	800e55a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e54e:	2300      	movs	r3, #0
 800e550:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f000 81da 	beq.w	800e916 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e566:	4abc      	ldr	r2, [pc, #752]	; (800e858 <UART_SetConfig+0x9c8>)
 800e568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e56c:	461a      	mov	r2, r3
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	fbb3 f3f2 	udiv	r3, r3, r2
 800e574:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	4613      	mov	r3, r2
 800e57c:	005b      	lsls	r3, r3, #1
 800e57e:	4413      	add	r3, r2
 800e580:	6a3a      	ldr	r2, [r7, #32]
 800e582:	429a      	cmp	r2, r3
 800e584:	d305      	bcc.n	800e592 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e58c:	6a3a      	ldr	r2, [r7, #32]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d903      	bls.n	800e59a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e598:	e1bd      	b.n	800e916 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	4618      	mov	r0, r3
 800e59e:	f04f 0100 	mov.w	r1, #0
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a6:	4aac      	ldr	r2, [pc, #688]	; (800e858 <UART_SetConfig+0x9c8>)
 800e5a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	f04f 0300 	mov.w	r3, #0
 800e5b2:	f7f2 f8a9 	bl	8000708 <__aeabi_uldivmod>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	4619      	mov	r1, r3
 800e5be:	f04f 0200 	mov.w	r2, #0
 800e5c2:	f04f 0300 	mov.w	r3, #0
 800e5c6:	020b      	lsls	r3, r1, #8
 800e5c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5cc:	0202      	lsls	r2, r0, #8
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	6849      	ldr	r1, [r1, #4]
 800e5d2:	0849      	lsrs	r1, r1, #1
 800e5d4:	4608      	mov	r0, r1
 800e5d6:	f04f 0100 	mov.w	r1, #0
 800e5da:	1814      	adds	r4, r2, r0
 800e5dc:	eb43 0501 	adc.w	r5, r3, r1
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	f04f 0300 	mov.w	r3, #0
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7f2 f88b 	bl	8000708 <__aeabi_uldivmod>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e600:	d308      	bcc.n	800e614 <UART_SetConfig+0x784>
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e608:	d204      	bcs.n	800e614 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e610:	60da      	str	r2, [r3, #12]
 800e612:	e180      	b.n	800e916 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e61a:	e17c      	b.n	800e916 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e624:	f040 80be 	bne.w	800e7a4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e62c:	2b20      	cmp	r3, #32
 800e62e:	dc49      	bgt.n	800e6c4 <UART_SetConfig+0x834>
 800e630:	2b00      	cmp	r3, #0
 800e632:	db7c      	blt.n	800e72e <UART_SetConfig+0x89e>
 800e634:	2b20      	cmp	r3, #32
 800e636:	d87a      	bhi.n	800e72e <UART_SetConfig+0x89e>
 800e638:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <UART_SetConfig+0x7b0>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e6cb 	.word	0x0800e6cb
 800e644:	0800e6d3 	.word	0x0800e6d3
 800e648:	0800e72f 	.word	0x0800e72f
 800e64c:	0800e72f 	.word	0x0800e72f
 800e650:	0800e6db 	.word	0x0800e6db
 800e654:	0800e72f 	.word	0x0800e72f
 800e658:	0800e72f 	.word	0x0800e72f
 800e65c:	0800e72f 	.word	0x0800e72f
 800e660:	0800e6eb 	.word	0x0800e6eb
 800e664:	0800e72f 	.word	0x0800e72f
 800e668:	0800e72f 	.word	0x0800e72f
 800e66c:	0800e72f 	.word	0x0800e72f
 800e670:	0800e72f 	.word	0x0800e72f
 800e674:	0800e72f 	.word	0x0800e72f
 800e678:	0800e72f 	.word	0x0800e72f
 800e67c:	0800e72f 	.word	0x0800e72f
 800e680:	0800e6fb 	.word	0x0800e6fb
 800e684:	0800e72f 	.word	0x0800e72f
 800e688:	0800e72f 	.word	0x0800e72f
 800e68c:	0800e72f 	.word	0x0800e72f
 800e690:	0800e72f 	.word	0x0800e72f
 800e694:	0800e72f 	.word	0x0800e72f
 800e698:	0800e72f 	.word	0x0800e72f
 800e69c:	0800e72f 	.word	0x0800e72f
 800e6a0:	0800e72f 	.word	0x0800e72f
 800e6a4:	0800e72f 	.word	0x0800e72f
 800e6a8:	0800e72f 	.word	0x0800e72f
 800e6ac:	0800e72f 	.word	0x0800e72f
 800e6b0:	0800e72f 	.word	0x0800e72f
 800e6b4:	0800e72f 	.word	0x0800e72f
 800e6b8:	0800e72f 	.word	0x0800e72f
 800e6bc:	0800e72f 	.word	0x0800e72f
 800e6c0:	0800e721 	.word	0x0800e721
 800e6c4:	2b40      	cmp	r3, #64	; 0x40
 800e6c6:	d02e      	beq.n	800e726 <UART_SetConfig+0x896>
 800e6c8:	e031      	b.n	800e72e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6ca:	f7fb fe01 	bl	800a2d0 <HAL_RCC_GetPCLK1Freq>
 800e6ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e6d0:	e033      	b.n	800e73a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6d2:	f7fb fe13 	bl	800a2fc <HAL_RCC_GetPCLK2Freq>
 800e6d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e6d8:	e02f      	b.n	800e73a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6da:	f107 0314 	add.w	r3, r7, #20
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fc fd78 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e6e8:	e027      	b.n	800e73a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6ea:	f107 0308 	add.w	r3, r7, #8
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fc fec4 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e6f8:	e01f      	b.n	800e73a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6fa:	4b58      	ldr	r3, [pc, #352]	; (800e85c <UART_SetConfig+0x9cc>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f003 0320 	and.w	r3, r3, #32
 800e702:	2b00      	cmp	r3, #0
 800e704:	d009      	beq.n	800e71a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e706:	4b55      	ldr	r3, [pc, #340]	; (800e85c <UART_SetConfig+0x9cc>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	08db      	lsrs	r3, r3, #3
 800e70c:	f003 0303 	and.w	r3, r3, #3
 800e710:	4a53      	ldr	r2, [pc, #332]	; (800e860 <UART_SetConfig+0x9d0>)
 800e712:	fa22 f303 	lsr.w	r3, r2, r3
 800e716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e718:	e00f      	b.n	800e73a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e71a:	4b51      	ldr	r3, [pc, #324]	; (800e860 <UART_SetConfig+0x9d0>)
 800e71c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e71e:	e00c      	b.n	800e73a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e720:	4b4c      	ldr	r3, [pc, #304]	; (800e854 <UART_SetConfig+0x9c4>)
 800e722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e724:	e009      	b.n	800e73a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e72a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e72c:	e005      	b.n	800e73a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e72e:	2300      	movs	r3, #0
 800e730:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e732:	2301      	movs	r3, #1
 800e734:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 80ea 	beq.w	800e916 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e746:	4a44      	ldr	r2, [pc, #272]	; (800e858 <UART_SetConfig+0x9c8>)
 800e748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e74c:	461a      	mov	r2, r3
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	fbb3 f3f2 	udiv	r3, r3, r2
 800e754:	005a      	lsls	r2, r3, #1
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	085b      	lsrs	r3, r3, #1
 800e75c:	441a      	add	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	fbb2 f3f3 	udiv	r3, r2, r3
 800e766:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	2b0f      	cmp	r3, #15
 800e76c:	d916      	bls.n	800e79c <UART_SetConfig+0x90c>
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e774:	d212      	bcs.n	800e79c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e778:	b29b      	uxth	r3, r3
 800e77a:	f023 030f 	bic.w	r3, r3, #15
 800e77e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	085b      	lsrs	r3, r3, #1
 800e784:	b29b      	uxth	r3, r3
 800e786:	f003 0307 	and.w	r3, r3, #7
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e78e:	4313      	orrs	r3, r2
 800e790:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e798:	60da      	str	r2, [r3, #12]
 800e79a:	e0bc      	b.n	800e916 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e79c:	2301      	movs	r3, #1
 800e79e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e7a2:	e0b8      	b.n	800e916 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e7a8:	2b20      	cmp	r3, #32
 800e7aa:	dc4b      	bgt.n	800e844 <UART_SetConfig+0x9b4>
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f2c0 8087 	blt.w	800e8c0 <UART_SetConfig+0xa30>
 800e7b2:	2b20      	cmp	r3, #32
 800e7b4:	f200 8084 	bhi.w	800e8c0 <UART_SetConfig+0xa30>
 800e7b8:	a201      	add	r2, pc, #4	; (adr r2, 800e7c0 <UART_SetConfig+0x930>)
 800e7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7be:	bf00      	nop
 800e7c0:	0800e84b 	.word	0x0800e84b
 800e7c4:	0800e865 	.word	0x0800e865
 800e7c8:	0800e8c1 	.word	0x0800e8c1
 800e7cc:	0800e8c1 	.word	0x0800e8c1
 800e7d0:	0800e86d 	.word	0x0800e86d
 800e7d4:	0800e8c1 	.word	0x0800e8c1
 800e7d8:	0800e8c1 	.word	0x0800e8c1
 800e7dc:	0800e8c1 	.word	0x0800e8c1
 800e7e0:	0800e87d 	.word	0x0800e87d
 800e7e4:	0800e8c1 	.word	0x0800e8c1
 800e7e8:	0800e8c1 	.word	0x0800e8c1
 800e7ec:	0800e8c1 	.word	0x0800e8c1
 800e7f0:	0800e8c1 	.word	0x0800e8c1
 800e7f4:	0800e8c1 	.word	0x0800e8c1
 800e7f8:	0800e8c1 	.word	0x0800e8c1
 800e7fc:	0800e8c1 	.word	0x0800e8c1
 800e800:	0800e88d 	.word	0x0800e88d
 800e804:	0800e8c1 	.word	0x0800e8c1
 800e808:	0800e8c1 	.word	0x0800e8c1
 800e80c:	0800e8c1 	.word	0x0800e8c1
 800e810:	0800e8c1 	.word	0x0800e8c1
 800e814:	0800e8c1 	.word	0x0800e8c1
 800e818:	0800e8c1 	.word	0x0800e8c1
 800e81c:	0800e8c1 	.word	0x0800e8c1
 800e820:	0800e8c1 	.word	0x0800e8c1
 800e824:	0800e8c1 	.word	0x0800e8c1
 800e828:	0800e8c1 	.word	0x0800e8c1
 800e82c:	0800e8c1 	.word	0x0800e8c1
 800e830:	0800e8c1 	.word	0x0800e8c1
 800e834:	0800e8c1 	.word	0x0800e8c1
 800e838:	0800e8c1 	.word	0x0800e8c1
 800e83c:	0800e8c1 	.word	0x0800e8c1
 800e840:	0800e8b3 	.word	0x0800e8b3
 800e844:	2b40      	cmp	r3, #64	; 0x40
 800e846:	d037      	beq.n	800e8b8 <UART_SetConfig+0xa28>
 800e848:	e03a      	b.n	800e8c0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e84a:	f7fb fd41 	bl	800a2d0 <HAL_RCC_GetPCLK1Freq>
 800e84e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e850:	e03c      	b.n	800e8cc <UART_SetConfig+0xa3c>
 800e852:	bf00      	nop
 800e854:	003d0900 	.word	0x003d0900
 800e858:	08012930 	.word	0x08012930
 800e85c:	58024400 	.word	0x58024400
 800e860:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e864:	f7fb fd4a 	bl	800a2fc <HAL_RCC_GetPCLK2Freq>
 800e868:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e86a:	e02f      	b.n	800e8cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e86c:	f107 0314 	add.w	r3, r7, #20
 800e870:	4618      	mov	r0, r3
 800e872:	f7fc fcaf 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e87a:	e027      	b.n	800e8cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e87c:	f107 0308 	add.w	r3, r7, #8
 800e880:	4618      	mov	r0, r3
 800e882:	f7fc fdfb 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e88a:	e01f      	b.n	800e8cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e88c:	4b2c      	ldr	r3, [pc, #176]	; (800e940 <UART_SetConfig+0xab0>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f003 0320 	and.w	r3, r3, #32
 800e894:	2b00      	cmp	r3, #0
 800e896:	d009      	beq.n	800e8ac <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e898:	4b29      	ldr	r3, [pc, #164]	; (800e940 <UART_SetConfig+0xab0>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	08db      	lsrs	r3, r3, #3
 800e89e:	f003 0303 	and.w	r3, r3, #3
 800e8a2:	4a28      	ldr	r2, [pc, #160]	; (800e944 <UART_SetConfig+0xab4>)
 800e8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800e8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8aa:	e00f      	b.n	800e8cc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e8ac:	4b25      	ldr	r3, [pc, #148]	; (800e944 <UART_SetConfig+0xab4>)
 800e8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8b0:	e00c      	b.n	800e8cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8b2:	4b25      	ldr	r3, [pc, #148]	; (800e948 <UART_SetConfig+0xab8>)
 800e8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8b6:	e009      	b.n	800e8cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8be:	e005      	b.n	800e8cc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e8ca:	bf00      	nop
    }

    if (pclk != 0U)
 800e8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d021      	beq.n	800e916 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d6:	4a1d      	ldr	r2, [pc, #116]	; (800e94c <UART_SetConfig+0xabc>)
 800e8d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	085b      	lsrs	r3, r3, #1
 800e8ea:	441a      	add	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	2b0f      	cmp	r3, #15
 800e8fa:	d909      	bls.n	800e910 <UART_SetConfig+0xa80>
 800e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e902:	d205      	bcs.n	800e910 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e906:	b29a      	uxth	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	60da      	str	r2, [r3, #12]
 800e90e:	e002      	b.n	800e916 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2201      	movs	r2, #1
 800e91a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2201      	movs	r2, #1
 800e922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e932:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e936:	4618      	mov	r0, r3
 800e938:	3738      	adds	r7, #56	; 0x38
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bdb0      	pop	{r4, r5, r7, pc}
 800e93e:	bf00      	nop
 800e940:	58024400 	.word	0x58024400
 800e944:	03d09000 	.word	0x03d09000
 800e948:	003d0900 	.word	0x003d0900
 800e94c:	08012930 	.word	0x08012930

0800e950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00a      	beq.n	800e97a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00a      	beq.n	800e99c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	430a      	orrs	r2, r1
 800e99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00a      	beq.n	800e9be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c2:	f003 0308 	and.w	r3, r3, #8
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e4:	f003 0310 	and.w	r3, r3, #16
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00a      	beq.n	800ea02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea06:	f003 0320 	and.w	r3, r3, #32
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00a      	beq.n	800ea24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	430a      	orrs	r2, r1
 800ea22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d01a      	beq.n	800ea66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea4e:	d10a      	bne.n	800ea66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	430a      	orrs	r2, r1
 800ea64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	430a      	orrs	r2, r1
 800ea86:	605a      	str	r2, [r3, #4]
  }
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eaa4:	f7f7 f8da 	bl	8005c5c <HAL_GetTick>
 800eaa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f003 0308 	and.w	r3, r3, #8
 800eab4:	2b08      	cmp	r3, #8
 800eab6:	d10e      	bne.n	800ead6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f82f 	bl	800eb2a <UART_WaitOnFlagUntilTimeout>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d001      	beq.n	800ead6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e025      	b.n	800eb22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f003 0304 	and.w	r3, r3, #4
 800eae0:	2b04      	cmp	r3, #4
 800eae2:	d10e      	bne.n	800eb02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f819 	bl	800eb2a <UART_WaitOnFlagUntilTimeout>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d001      	beq.n	800eb02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eafe:	2303      	movs	r3, #3
 800eb00:	e00f      	b.n	800eb22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2220      	movs	r2, #32
 800eb06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b09c      	sub	sp, #112	; 0x70
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	60f8      	str	r0, [r7, #12]
 800eb32:	60b9      	str	r1, [r7, #8]
 800eb34:	603b      	str	r3, [r7, #0]
 800eb36:	4613      	mov	r3, r2
 800eb38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb3a:	e0a9      	b.n	800ec90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb42:	f000 80a5 	beq.w	800ec90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb46:	f7f7 f889 	bl	8005c5c <HAL_GetTick>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d302      	bcc.n	800eb5c <UART_WaitOnFlagUntilTimeout+0x32>
 800eb56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d140      	bne.n	800ebde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb64:	e853 3f00 	ldrex	r3, [r3]
 800eb68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eb6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb70:	667b      	str	r3, [r7, #100]	; 0x64
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb82:	e841 2300 	strex	r3, r2, [r1]
 800eb86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eb88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d1e6      	bne.n	800eb5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3308      	adds	r3, #8
 800eb94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb98:	e853 3f00 	ldrex	r3, [r3]
 800eb9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	f023 0301 	bic.w	r3, r3, #1
 800eba4:	663b      	str	r3, [r7, #96]	; 0x60
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ebae:	64ba      	str	r2, [r7, #72]	; 0x48
 800ebb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebb6:	e841 2300 	strex	r3, r2, [r1]
 800ebba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ebbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1e5      	bne.n	800eb8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2220      	movs	r2, #32
 800ebc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2220      	movs	r2, #32
 800ebce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	e069      	b.n	800ecb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f003 0304 	and.w	r3, r3, #4
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d051      	beq.n	800ec90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebfa:	d149      	bne.n	800ec90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	e853 3f00 	ldrex	r3, [r3]
 800ec12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	461a      	mov	r2, r3
 800ec22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec24:	637b      	str	r3, [r7, #52]	; 0x34
 800ec26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec2c:	e841 2300 	strex	r3, r2, [r1]
 800ec30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1e6      	bne.n	800ec06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	3308      	adds	r3, #8
 800ec3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	e853 3f00 	ldrex	r3, [r3]
 800ec46:	613b      	str	r3, [r7, #16]
   return(result);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	f023 0301 	bic.w	r3, r3, #1
 800ec4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3308      	adds	r3, #8
 800ec56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec58:	623a      	str	r2, [r7, #32]
 800ec5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5c:	69f9      	ldr	r1, [r7, #28]
 800ec5e:	6a3a      	ldr	r2, [r7, #32]
 800ec60:	e841 2300 	strex	r3, r2, [r1]
 800ec64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1e5      	bne.n	800ec38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2220      	movs	r2, #32
 800ec70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2220      	movs	r2, #32
 800ec78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2220      	movs	r2, #32
 800ec80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	e010      	b.n	800ecb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	69da      	ldr	r2, [r3, #28]
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	4013      	ands	r3, r2
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	bf0c      	ite	eq
 800eca0:	2301      	moveq	r3, #1
 800eca2:	2300      	movne	r3, #0
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	461a      	mov	r2, r3
 800eca8:	79fb      	ldrb	r3, [r7, #7]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	f43f af46 	beq.w	800eb3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3770      	adds	r7, #112	; 0x70
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b096      	sub	sp, #88	; 0x58
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	88fa      	ldrh	r2, [r7, #6]
 800ecd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2222      	movs	r2, #34	; 0x22
 800ece4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d02c      	beq.n	800ed4a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecf4:	4a42      	ldr	r2, [pc, #264]	; (800ee00 <UART_Start_Receive_DMA+0x144>)
 800ecf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecfc:	4a41      	ldr	r2, [pc, #260]	; (800ee04 <UART_Start_Receive_DMA+0x148>)
 800ecfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed04:	4a40      	ldr	r2, [pc, #256]	; (800ee08 <UART_Start_Receive_DMA+0x14c>)
 800ed06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	3324      	adds	r3, #36	; 0x24
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed20:	461a      	mov	r2, r3
 800ed22:	88fb      	ldrh	r3, [r7, #6]
 800ed24:	f7f7 fe4c 	bl	80069c0 <HAL_DMA_Start_IT>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00d      	beq.n	800ed4a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2210      	movs	r2, #16
 800ed32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2220      	movs	r2, #32
 800ed42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ed46:	2301      	movs	r3, #1
 800ed48:	e055      	b.n	800edf6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d018      	beq.n	800ed8c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed62:	e853 3f00 	ldrex	r3, [r3]
 800ed66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed6e:	657b      	str	r3, [r7, #84]	; 0x54
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	461a      	mov	r2, r3
 800ed76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed7a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed80:	e841 2300 	strex	r3, r2, [r1]
 800ed84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ed86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1e6      	bne.n	800ed5a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	3308      	adds	r3, #8
 800ed92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	e853 3f00 	ldrex	r3, [r3]
 800ed9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	f043 0301 	orr.w	r3, r3, #1
 800eda2:	653b      	str	r3, [r7, #80]	; 0x50
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	3308      	adds	r3, #8
 800edaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edac:	637a      	str	r2, [r7, #52]	; 0x34
 800edae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800edb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edb4:	e841 2300 	strex	r3, r2, [r1]
 800edb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800edba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1e5      	bne.n	800ed8c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	3308      	adds	r3, #8
 800edc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	e853 3f00 	ldrex	r3, [r3]
 800edce:	613b      	str	r3, [r7, #16]
   return(result);
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	3308      	adds	r3, #8
 800edde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ede0:	623a      	str	r2, [r7, #32]
 800ede2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede4:	69f9      	ldr	r1, [r7, #28]
 800ede6:	6a3a      	ldr	r2, [r7, #32]
 800ede8:	e841 2300 	strex	r3, r2, [r1]
 800edec:	61bb      	str	r3, [r7, #24]
   return(result);
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1e5      	bne.n	800edc0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3758      	adds	r7, #88	; 0x58
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	0800f00f 	.word	0x0800f00f
 800ee04:	0800f131 	.word	0x0800f131
 800ee08:	0800f169 	.word	0x0800f169

0800ee0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b08f      	sub	sp, #60	; 0x3c
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1a:	6a3b      	ldr	r3, [r7, #32]
 800ee1c:	e853 3f00 	ldrex	r3, [r3]
 800ee20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ee28:	637b      	str	r3, [r7, #52]	; 0x34
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	461a      	mov	r2, r3
 800ee30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee34:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee3a:	e841 2300 	strex	r3, r2, [r1]
 800ee3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1e6      	bne.n	800ee14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3308      	adds	r3, #8
 800ee4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	e853 3f00 	ldrex	r3, [r3]
 800ee54:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ee5c:	633b      	str	r3, [r7, #48]	; 0x30
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	3308      	adds	r3, #8
 800ee64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee66:	61ba      	str	r2, [r7, #24]
 800ee68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6a:	6979      	ldr	r1, [r7, #20]
 800ee6c:	69ba      	ldr	r2, [r7, #24]
 800ee6e:	e841 2300 	strex	r3, r2, [r1]
 800ee72:	613b      	str	r3, [r7, #16]
   return(result);
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1e5      	bne.n	800ee46 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2220      	movs	r2, #32
 800ee7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ee82:	bf00      	nop
 800ee84:	373c      	adds	r7, #60	; 0x3c
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
	...

0800ee90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b095      	sub	sp, #84	; 0x54
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eea0:	e853 3f00 	ldrex	r3, [r3]
 800eea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eeac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeb6:	643b      	str	r3, [r7, #64]	; 0x40
 800eeb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eebe:	e841 2300 	strex	r3, r2, [r1]
 800eec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1e6      	bne.n	800ee98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3308      	adds	r3, #8
 800eed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	e853 3f00 	ldrex	r3, [r3]
 800eed8:	61fb      	str	r3, [r7, #28]
   return(result);
 800eeda:	69fa      	ldr	r2, [r7, #28]
 800eedc:	4b1e      	ldr	r3, [pc, #120]	; (800ef58 <UART_EndRxTransfer+0xc8>)
 800eede:	4013      	ands	r3, r2
 800eee0:	64bb      	str	r3, [r7, #72]	; 0x48
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	3308      	adds	r3, #8
 800eee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eeec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eef2:	e841 2300 	strex	r3, r2, [r1]
 800eef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1e5      	bne.n	800eeca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d118      	bne.n	800ef38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	e853 3f00 	ldrex	r3, [r3]
 800ef12:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	f023 0310 	bic.w	r3, r3, #16
 800ef1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	461a      	mov	r2, r3
 800ef22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef24:	61bb      	str	r3, [r7, #24]
 800ef26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef28:	6979      	ldr	r1, [r7, #20]
 800ef2a:	69ba      	ldr	r2, [r7, #24]
 800ef2c:	e841 2300 	strex	r3, r2, [r1]
 800ef30:	613b      	str	r3, [r7, #16]
   return(result);
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d1e6      	bne.n	800ef06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2220      	movs	r2, #32
 800ef3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ef4c:	bf00      	nop
 800ef4e:	3754      	adds	r7, #84	; 0x54
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr
 800ef58:	effffffe 	.word	0xeffffffe

0800ef5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b090      	sub	sp, #64	; 0x40
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef68:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	69db      	ldr	r3, [r3, #28]
 800ef6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef72:	d037      	beq.n	800efe4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ef74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef76:	2200      	movs	r2, #0
 800ef78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ef7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	3308      	adds	r3, #8
 800ef82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef86:	e853 3f00 	ldrex	r3, [r3]
 800ef8a:	623b      	str	r3, [r7, #32]
   return(result);
 800ef8c:	6a3b      	ldr	r3, [r7, #32]
 800ef8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef92:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	3308      	adds	r3, #8
 800ef9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef9c:	633a      	str	r2, [r7, #48]	; 0x30
 800ef9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efa4:	e841 2300 	strex	r3, r2, [r1]
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1e5      	bne.n	800ef7c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	e853 3f00 	ldrex	r3, [r3]
 800efbc:	60fb      	str	r3, [r7, #12]
   return(result);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efc4:	637b      	str	r3, [r7, #52]	; 0x34
 800efc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	461a      	mov	r2, r3
 800efcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efce:	61fb      	str	r3, [r7, #28]
 800efd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd2:	69b9      	ldr	r1, [r7, #24]
 800efd4:	69fa      	ldr	r2, [r7, #28]
 800efd6:	e841 2300 	strex	r3, r2, [r1]
 800efda:	617b      	str	r3, [r7, #20]
   return(result);
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1e6      	bne.n	800efb0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800efe2:	e002      	b.n	800efea <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800efe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800efe6:	f7fe ff2b 	bl	800de40 <HAL_UART_TxCpltCallback>
}
 800efea:	bf00      	nop
 800efec:	3740      	adds	r7, #64	; 0x40
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b084      	sub	sp, #16
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800effe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f7fe ff27 	bl	800de54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f006:	bf00      	nop
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b09c      	sub	sp, #112	; 0x70
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f024:	d071      	beq.n	800f10a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f028:	2200      	movs	r2, #0
 800f02a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f036:	e853 3f00 	ldrex	r3, [r3]
 800f03a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f03c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f03e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f042:	66bb      	str	r3, [r7, #104]	; 0x68
 800f044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	461a      	mov	r2, r3
 800f04a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f04c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f04e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f050:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f054:	e841 2300 	strex	r3, r2, [r1]
 800f058:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1e6      	bne.n	800f02e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3308      	adds	r3, #8
 800f066:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	e853 3f00 	ldrex	r3, [r3]
 800f06e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f072:	f023 0301 	bic.w	r3, r3, #1
 800f076:	667b      	str	r3, [r7, #100]	; 0x64
 800f078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	3308      	adds	r3, #8
 800f07e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f080:	647a      	str	r2, [r7, #68]	; 0x44
 800f082:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f084:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f088:	e841 2300 	strex	r3, r2, [r1]
 800f08c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f090:	2b00      	cmp	r3, #0
 800f092:	d1e5      	bne.n	800f060 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	3308      	adds	r3, #8
 800f09a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	e853 3f00 	ldrex	r3, [r3]
 800f0a2:	623b      	str	r3, [r7, #32]
   return(result);
 800f0a4:	6a3b      	ldr	r3, [r7, #32]
 800f0a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0aa:	663b      	str	r3, [r7, #96]	; 0x60
 800f0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	3308      	adds	r3, #8
 800f0b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0b4:	633a      	str	r2, [r7, #48]	; 0x30
 800f0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0bc:	e841 2300 	strex	r3, r2, [r1]
 800f0c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1e5      	bne.n	800f094 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0ca:	2220      	movs	r2, #32
 800f0cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d118      	bne.n	800f10a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	e853 3f00 	ldrex	r3, [r3]
 800f0e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f023 0310 	bic.w	r3, r3, #16
 800f0ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0f6:	61fb      	str	r3, [r7, #28]
 800f0f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fa:	69b9      	ldr	r1, [r7, #24]
 800f0fc:	69fa      	ldr	r2, [r7, #28]
 800f0fe:	e841 2300 	strex	r3, r2, [r1]
 800f102:	617b      	str	r3, [r7, #20]
   return(result);
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1e6      	bne.n	800f0d8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f10c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d107      	bne.n	800f122 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f114:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f118:	4619      	mov	r1, r3
 800f11a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f11c:	f7f2 fd32 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f120:	e002      	b.n	800f128 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f122:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f124:	f7f4 ff16 	bl	8003f54 <HAL_UART_RxCpltCallback>
}
 800f128:	bf00      	nop
 800f12a:	3770      	adds	r7, #112	; 0x70
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f13c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f142:	2b01      	cmp	r3, #1
 800f144:	d109      	bne.n	800f15a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f14c:	085b      	lsrs	r3, r3, #1
 800f14e:	b29b      	uxth	r3, r3
 800f150:	4619      	mov	r1, r3
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f7f2 fd16 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f158:	e002      	b.n	800f160 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f7fe fe84 	bl	800de68 <HAL_UART_RxHalfCpltCallback>
}
 800f160:	bf00      	nop
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f174:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f17c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f184:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f190:	2b80      	cmp	r3, #128	; 0x80
 800f192:	d109      	bne.n	800f1a8 <UART_DMAError+0x40>
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	2b21      	cmp	r3, #33	; 0x21
 800f198:	d106      	bne.n	800f1a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	2200      	movs	r2, #0
 800f19e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f1a2:	6978      	ldr	r0, [r7, #20]
 800f1a4:	f7ff fe32 	bl	800ee0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b2:	2b40      	cmp	r3, #64	; 0x40
 800f1b4:	d109      	bne.n	800f1ca <UART_DMAError+0x62>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2b22      	cmp	r3, #34	; 0x22
 800f1ba:	d106      	bne.n	800f1ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f1c4:	6978      	ldr	r0, [r7, #20]
 800f1c6:	f7ff fe63 	bl	800ee90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1d0:	f043 0210 	orr.w	r2, r3, #16
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1da:	6978      	ldr	r0, [r7, #20]
 800f1dc:	f7fe fe4e 	bl	800de7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1e0:	bf00      	nop
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f7fe fe38 	bl	800de7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f20c:	bf00      	nop
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b088      	sub	sp, #32
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	e853 3f00 	ldrex	r3, [r3]
 800f228:	60bb      	str	r3, [r7, #8]
   return(result);
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f230:	61fb      	str	r3, [r7, #28]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	461a      	mov	r2, r3
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	61bb      	str	r3, [r7, #24]
 800f23c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f23e:	6979      	ldr	r1, [r7, #20]
 800f240:	69ba      	ldr	r2, [r7, #24]
 800f242:	e841 2300 	strex	r3, r2, [r1]
 800f246:	613b      	str	r3, [r7, #16]
   return(result);
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1e6      	bne.n	800f21c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2220      	movs	r2, #32
 800f252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7fe fdef 	bl	800de40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f262:	bf00      	nop
 800f264:	3720      	adds	r7, #32
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b083      	sub	sp, #12
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f272:	bf00      	nop
 800f274:	370c      	adds	r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f27e:	b480      	push	{r7}
 800f280:	b083      	sub	sp, #12
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f286:	bf00      	nop
 800f288:	370c      	adds	r7, #12
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr

0800f292 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f292:	b480      	push	{r7}
 800f294:	b083      	sub	sp, #12
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d101      	bne.n	800f2bc <HAL_UARTEx_EnableFifoMode+0x16>
 800f2b8:	2302      	movs	r3, #2
 800f2ba:	e02b      	b.n	800f314 <HAL_UARTEx_EnableFifoMode+0x6e>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2224      	movs	r2, #36	; 0x24
 800f2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f022 0201 	bic.w	r2, r2, #1
 800f2e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f2f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f91f 	bl	800f540 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2220      	movs	r2, #32
 800f306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d101      	bne.n	800f332 <HAL_UARTEx_DisableFifoMode+0x16>
 800f32e:	2302      	movs	r3, #2
 800f330:	e027      	b.n	800f382 <HAL_UARTEx_DisableFifoMode+0x66>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2201      	movs	r2, #1
 800f336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2224      	movs	r2, #36	; 0x24
 800f33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f022 0201 	bic.w	r2, r2, #1
 800f358:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f360:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2200      	movs	r2, #0
 800f366:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2220      	movs	r2, #32
 800f374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f38e:	b580      	push	{r7, lr}
 800f390:	b084      	sub	sp, #16
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d101      	bne.n	800f3a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f3a2:	2302      	movs	r3, #2
 800f3a4:	e02d      	b.n	800f402 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2224      	movs	r2, #36	; 0x24
 800f3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f022 0201 	bic.w	r2, r2, #1
 800f3cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	430a      	orrs	r2, r1
 800f3e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f8ac 	bl	800f540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2220      	movs	r2, #32
 800f3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b084      	sub	sp, #16
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d101      	bne.n	800f422 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f41e:	2302      	movs	r3, #2
 800f420:	e02d      	b.n	800f47e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2201      	movs	r2, #1
 800f426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2224      	movs	r2, #36	; 0x24
 800f42e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f022 0201 	bic.w	r2, r2, #1
 800f448:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	430a      	orrs	r2, r1
 800f45c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f86e 	bl	800f540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2220      	movs	r2, #32
 800f470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}

0800f486 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f486:	b580      	push	{r7, lr}
 800f488:	b08c      	sub	sp, #48	; 0x30
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	60f8      	str	r0, [r7, #12]
 800f48e:	60b9      	str	r1, [r7, #8]
 800f490:	4613      	mov	r3, r2
 800f492:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f49a:	2b20      	cmp	r3, #32
 800f49c:	d14a      	bne.n	800f534 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d101      	bne.n	800f4ae <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e043      	b.n	800f536 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d101      	bne.n	800f4bc <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f4b8:	2302      	movs	r3, #2
 800f4ba:	e03c      	b.n	800f536 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f4ca:	88fb      	ldrh	r3, [r7, #6]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	68f8      	ldr	r0, [r7, #12]
 800f4d2:	f7ff fbf3 	bl	800ecbc <UART_Start_Receive_DMA>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f4dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d124      	bne.n	800f52e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d11d      	bne.n	800f528 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2210      	movs	r2, #16
 800f4f2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	e853 3f00 	ldrex	r3, [r3]
 800f500:	617b      	str	r3, [r7, #20]
   return(result);
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	f043 0310 	orr.w	r3, r3, #16
 800f508:	62bb      	str	r3, [r7, #40]	; 0x28
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f512:	627b      	str	r3, [r7, #36]	; 0x24
 800f514:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f516:	6a39      	ldr	r1, [r7, #32]
 800f518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f51a:	e841 2300 	strex	r3, r2, [r1]
 800f51e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1e6      	bne.n	800f4f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f526:	e002      	b.n	800f52e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f528:	2301      	movs	r3, #1
 800f52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f532:	e000      	b.n	800f536 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f534:	2302      	movs	r3, #2
  }
}
 800f536:	4618      	mov	r0, r3
 800f538:	3730      	adds	r7, #48	; 0x30
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
	...

0800f540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d108      	bne.n	800f562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2201      	movs	r2, #1
 800f554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f560:	e031      	b.n	800f5c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f562:	2310      	movs	r3, #16
 800f564:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f566:	2310      	movs	r3, #16
 800f568:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	0e5b      	lsrs	r3, r3, #25
 800f572:	b2db      	uxtb	r3, r3
 800f574:	f003 0307 	and.w	r3, r3, #7
 800f578:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	0f5b      	lsrs	r3, r3, #29
 800f582:	b2db      	uxtb	r3, r3
 800f584:	f003 0307 	and.w	r3, r3, #7
 800f588:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f58a:	7bbb      	ldrb	r3, [r7, #14]
 800f58c:	7b3a      	ldrb	r2, [r7, #12]
 800f58e:	4911      	ldr	r1, [pc, #68]	; (800f5d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f590:	5c8a      	ldrb	r2, [r1, r2]
 800f592:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f596:	7b3a      	ldrb	r2, [r7, #12]
 800f598:	490f      	ldr	r1, [pc, #60]	; (800f5d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f59a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f59c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	7b7a      	ldrb	r2, [r7, #13]
 800f5ac:	4909      	ldr	r1, [pc, #36]	; (800f5d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f5ae:	5c8a      	ldrb	r2, [r1, r2]
 800f5b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f5b4:	7b7a      	ldrb	r2, [r7, #13]
 800f5b6:	4908      	ldr	r1, [pc, #32]	; (800f5d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f5b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f5ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f5c6:	bf00      	nop
 800f5c8:	3714      	adds	r7, #20
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr
 800f5d2:	bf00      	nop
 800f5d4:	08012948 	.word	0x08012948
 800f5d8:	08012950 	.word	0x08012950

0800f5dc <sinf_poly>:
 800f5dc:	07cb      	lsls	r3, r1, #31
 800f5de:	d412      	bmi.n	800f606 <sinf_poly+0x2a>
 800f5e0:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f5e4:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f5e8:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f5ec:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f5f0:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f5f4:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f5f8:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f5fc:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f600:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f604:	4770      	bx	lr
 800f606:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f60a:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f60e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f612:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f616:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f61a:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f61e:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f622:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f626:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f62a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f62e:	e7e5      	b.n	800f5fc <sinf_poly+0x20>

0800f630 <cosf>:
 800f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f632:	ee10 4a10 	vmov	r4, s0
 800f636:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f63a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f63e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f642:	d20c      	bcs.n	800f65e <cosf+0x2e>
 800f644:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f648:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f64c:	d378      	bcc.n	800f740 <cosf+0x110>
 800f64e:	eeb0 0b46 	vmov.f64	d0, d6
 800f652:	483f      	ldr	r0, [pc, #252]	; (800f750 <cosf+0x120>)
 800f654:	2101      	movs	r1, #1
 800f656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f65a:	f7ff bfbf 	b.w	800f5dc <sinf_poly>
 800f65e:	f240 422e 	movw	r2, #1070	; 0x42e
 800f662:	4293      	cmp	r3, r2
 800f664:	d826      	bhi.n	800f6b4 <cosf+0x84>
 800f666:	4b3a      	ldr	r3, [pc, #232]	; (800f750 <cosf+0x120>)
 800f668:	ed93 7b08 	vldr	d7, [r3, #32]
 800f66c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f670:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f674:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f678:	ee17 1a90 	vmov	r1, s15
 800f67c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f680:	1609      	asrs	r1, r1, #24
 800f682:	ee07 1a90 	vmov	s15, r1
 800f686:	f001 0203 	and.w	r2, r1, #3
 800f68a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f68e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f692:	ed92 0b00 	vldr	d0, [r2]
 800f696:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f69a:	f011 0f02 	tst.w	r1, #2
 800f69e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f6a2:	f081 0101 	eor.w	r1, r1, #1
 800f6a6:	bf08      	it	eq
 800f6a8:	4618      	moveq	r0, r3
 800f6aa:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f6ae:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f6b2:	e7d0      	b.n	800f656 <cosf+0x26>
 800f6b4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f6b8:	d23e      	bcs.n	800f738 <cosf+0x108>
 800f6ba:	4b26      	ldr	r3, [pc, #152]	; (800f754 <cosf+0x124>)
 800f6bc:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f6c0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f6c4:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f6c8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f6cc:	6a06      	ldr	r6, [r0, #32]
 800f6ce:	6900      	ldr	r0, [r0, #16]
 800f6d0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f6d4:	40a9      	lsls	r1, r5
 800f6d6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f6da:	fba1 6706 	umull	r6, r7, r1, r6
 800f6de:	fb05 f301 	mul.w	r3, r5, r1
 800f6e2:	463a      	mov	r2, r7
 800f6e4:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f6e8:	1c11      	adds	r1, r2, #0
 800f6ea:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	1a10      	subs	r0, r2, r0
 800f6f2:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f6f6:	eb63 0101 	sbc.w	r1, r3, r1
 800f6fa:	f7f0 ffd7 	bl	80006ac <__aeabi_l2d>
 800f6fe:	0fb5      	lsrs	r5, r6, #30
 800f700:	4b13      	ldr	r3, [pc, #76]	; (800f750 <cosf+0x120>)
 800f702:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800f706:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800f748 <cosf+0x118>
 800f70a:	ec41 0b17 	vmov	d7, r0, r1
 800f70e:	f004 0203 	and.w	r2, r4, #3
 800f712:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f716:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f71a:	ed92 7b00 	vldr	d7, [r2]
 800f71e:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f722:	f014 0f02 	tst.w	r4, #2
 800f726:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f72a:	f085 0101 	eor.w	r1, r5, #1
 800f72e:	bf08      	it	eq
 800f730:	4618      	moveq	r0, r3
 800f732:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f736:	e78e      	b.n	800f656 <cosf+0x26>
 800f738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f73c:	f000 b817 	b.w	800f76e <__math_invalidf>
 800f740:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f746:	bf00      	nop
 800f748:	54442d18 	.word	0x54442d18
 800f74c:	3c1921fb 	.word	0x3c1921fb
 800f750:	08013a00 	.word	0x08013a00
 800f754:	080139a0 	.word	0x080139a0

0800f758 <with_errnof>:
 800f758:	b513      	push	{r0, r1, r4, lr}
 800f75a:	4604      	mov	r4, r0
 800f75c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f760:	f000 fc46 	bl	800fff0 <__errno>
 800f764:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f768:	6004      	str	r4, [r0, #0]
 800f76a:	b002      	add	sp, #8
 800f76c:	bd10      	pop	{r4, pc}

0800f76e <__math_invalidf>:
 800f76e:	eef0 7a40 	vmov.f32	s15, s0
 800f772:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f776:	eef4 7a67 	vcmp.f32	s15, s15
 800f77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f782:	d602      	bvs.n	800f78a <__math_invalidf+0x1c>
 800f784:	2021      	movs	r0, #33	; 0x21
 800f786:	f7ff bfe7 	b.w	800f758 <with_errnof>
 800f78a:	4770      	bx	lr

0800f78c <checkint>:
 800f78c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f790:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f794:	429a      	cmp	r2, r3
 800f796:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f798:	dd2b      	ble.n	800f7f2 <checkint+0x66>
 800f79a:	f240 4333 	movw	r3, #1075	; 0x433
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	dc25      	bgt.n	800f7ee <checkint+0x62>
 800f7a2:	1a9b      	subs	r3, r3, r2
 800f7a4:	f1a3 0620 	sub.w	r6, r3, #32
 800f7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ac:	fa02 f606 	lsl.w	r6, r2, r6
 800f7b0:	fa02 f403 	lsl.w	r4, r2, r3
 800f7b4:	f1c3 0520 	rsb	r5, r3, #32
 800f7b8:	4334      	orrs	r4, r6
 800f7ba:	fa22 f505 	lsr.w	r5, r2, r5
 800f7be:	432c      	orrs	r4, r5
 800f7c0:	409a      	lsls	r2, r3
 800f7c2:	ea20 0602 	bic.w	r6, r0, r2
 800f7c6:	ea21 0704 	bic.w	r7, r1, r4
 800f7ca:	ea56 0207 	orrs.w	r2, r6, r7
 800f7ce:	f1a3 0420 	sub.w	r4, r3, #32
 800f7d2:	f1c3 0220 	rsb	r2, r3, #32
 800f7d6:	d10c      	bne.n	800f7f2 <checkint+0x66>
 800f7d8:	40d8      	lsrs	r0, r3
 800f7da:	fa01 f302 	lsl.w	r3, r1, r2
 800f7de:	4318      	orrs	r0, r3
 800f7e0:	40e1      	lsrs	r1, r4
 800f7e2:	4308      	orrs	r0, r1
 800f7e4:	f000 0301 	and.w	r3, r0, #1
 800f7e8:	f1c3 0002 	rsb	r0, r3, #2
 800f7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ee:	2002      	movs	r0, #2
 800f7f0:	e7fc      	b.n	800f7ec <checkint+0x60>
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	e7fa      	b.n	800f7ec <checkint+0x60>
	...

0800f7f8 <pow>:
 800f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fc:	ed2d 8b0a 	vpush	{d8-d12}
 800f800:	b09b      	sub	sp, #108	; 0x6c
 800f802:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f806:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f80a:	ed8d 1b00 	vstr	d1, [sp]
 800f80e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800f812:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f816:	f109 30ff 	add.w	r0, r9, #4294967295
 800f81a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800f81e:	4288      	cmp	r0, r1
 800f820:	46cc      	mov	ip, r9
 800f822:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800f826:	d806      	bhi.n	800f836 <pow+0x3e>
 800f828:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800f82c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800f830:	297f      	cmp	r1, #127	; 0x7f
 800f832:	f240 81ab 	bls.w	800fb8c <pow+0x394>
 800f836:	19b1      	adds	r1, r6, r6
 800f838:	9104      	str	r1, [sp, #16]
 800f83a:	eb47 0107 	adc.w	r1, r7, r7
 800f83e:	9105      	str	r1, [sp, #20]
 800f840:	9904      	ldr	r1, [sp, #16]
 800f842:	f111 31ff 	adds.w	r1, r1, #4294967295
 800f846:	460a      	mov	r2, r1
 800f848:	9905      	ldr	r1, [sp, #20]
 800f84a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800f84e:	460b      	mov	r3, r1
 800f850:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800f854:	f06f 0001 	mvn.w	r0, #1
 800f858:	4299      	cmp	r1, r3
 800f85a:	bf08      	it	eq
 800f85c:	4290      	cmpeq	r0, r2
 800f85e:	d260      	bcs.n	800f922 <pow+0x12a>
 800f860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f864:	4313      	orrs	r3, r2
 800f866:	d11a      	bne.n	800f89e <pow+0xa6>
 800f868:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800f86c:	1923      	adds	r3, r4, r4
 800f86e:	930c      	str	r3, [sp, #48]	; 0x30
 800f870:	eb42 0302 	adc.w	r3, r2, r2
 800f874:	930d      	str	r3, [sp, #52]	; 0x34
 800f876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f87a:	4bcf      	ldr	r3, [pc, #828]	; (800fbb8 <pow+0x3c0>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	428b      	cmp	r3, r1
 800f880:	bf08      	it	eq
 800f882:	4282      	cmpeq	r2, r0
 800f884:	f080 8265 	bcs.w	800fd52 <pow+0x55a>
 800f888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f88c:	ed9d 6b00 	vldr	d6, [sp]
 800f890:	ee37 0b06 	vadd.f64	d0, d7, d6
 800f894:	b01b      	add	sp, #108	; 0x6c
 800f896:	ecbd 8b0a 	vpop	{d8-d12}
 800f89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89e:	49c7      	ldr	r1, [pc, #796]	; (800fbbc <pow+0x3c4>)
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	428d      	cmp	r5, r1
 800f8a4:	bf08      	it	eq
 800f8a6:	4284      	cmpeq	r4, r0
 800f8a8:	d10b      	bne.n	800f8c2 <pow+0xca>
 800f8aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f8ae:	19b3      	adds	r3, r6, r6
 800f8b0:	930e      	str	r3, [sp, #56]	; 0x38
 800f8b2:	eb42 0302 	adc.w	r3, r2, r2
 800f8b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f8bc:	4bbe      	ldr	r3, [pc, #760]	; (800fbb8 <pow+0x3c0>)
 800f8be:	2200      	movs	r2, #0
 800f8c0:	e7dd      	b.n	800f87e <pow+0x86>
 800f8c2:	1921      	adds	r1, r4, r4
 800f8c4:	9106      	str	r1, [sp, #24]
 800f8c6:	eb45 0105 	adc.w	r1, r5, r5
 800f8ca:	9107      	str	r1, [sp, #28]
 800f8cc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f8d0:	49bb      	ldr	r1, [pc, #748]	; (800fbc0 <pow+0x3c8>)
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	42a1      	cmp	r1, r4
 800f8d6:	bf08      	it	eq
 800f8d8:	4298      	cmpeq	r0, r3
 800f8da:	d3d5      	bcc.n	800f888 <pow+0x90>
 800f8dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f8e0:	428c      	cmp	r4, r1
 800f8e2:	bf08      	it	eq
 800f8e4:	4283      	cmpeq	r3, r0
 800f8e6:	d1cf      	bne.n	800f888 <pow+0x90>
 800f8e8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f8ec:	49b5      	ldr	r1, [pc, #724]	; (800fbc4 <pow+0x3cc>)
 800f8ee:	2000      	movs	r0, #0
 800f8f0:	428c      	cmp	r4, r1
 800f8f2:	bf08      	it	eq
 800f8f4:	4283      	cmpeq	r3, r0
 800f8f6:	f000 822c 	beq.w	800fd52 <pow+0x55a>
 800f8fa:	49b3      	ldr	r1, [pc, #716]	; (800fbc8 <pow+0x3d0>)
 800f8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f900:	42a1      	cmp	r1, r4
 800f902:	bf08      	it	eq
 800f904:	4298      	cmpeq	r0, r3
 800f906:	ea6f 0307 	mvn.w	r3, r7
 800f90a:	bf34      	ite	cc
 800f90c:	2201      	movcc	r2, #1
 800f90e:	2200      	movcs	r2, #0
 800f910:	0fdb      	lsrs	r3, r3, #31
 800f912:	429a      	cmp	r2, r3
 800f914:	f040 821a 	bne.w	800fd4c <pow+0x554>
 800f918:	ed9d 7b00 	vldr	d7, [sp]
 800f91c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f920:	e7b8      	b.n	800f894 <pow+0x9c>
 800f922:	1923      	adds	r3, r4, r4
 800f924:	9308      	str	r3, [sp, #32]
 800f926:	eb45 0305 	adc.w	r3, r5, r5
 800f92a:	9309      	str	r3, [sp, #36]	; 0x24
 800f92c:	9b08      	ldr	r3, [sp, #32]
 800f92e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f932:	9310      	str	r3, [sp, #64]	; 0x40
 800f934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f936:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f93a:	9311      	str	r3, [sp, #68]	; 0x44
 800f93c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f940:	4299      	cmp	r1, r3
 800f942:	bf08      	it	eq
 800f944:	4290      	cmpeq	r0, r2
 800f946:	d22d      	bcs.n	800f9a4 <pow+0x1ac>
 800f948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f94c:	2c00      	cmp	r4, #0
 800f94e:	f175 0300 	sbcs.w	r3, r5, #0
 800f952:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f956:	da16      	bge.n	800f986 <pow+0x18e>
 800f958:	4630      	mov	r0, r6
 800f95a:	4639      	mov	r1, r7
 800f95c:	f7ff ff16 	bl	800f78c <checkint>
 800f960:	2801      	cmp	r0, #1
 800f962:	d110      	bne.n	800f986 <pow+0x18e>
 800f964:	eeb1 0b40 	vneg.f64	d0, d0
 800f968:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800f96c:	4323      	orrs	r3, r4
 800f96e:	d10c      	bne.n	800f98a <pow+0x192>
 800f970:	2e00      	cmp	r6, #0
 800f972:	f177 0300 	sbcs.w	r3, r7, #0
 800f976:	da8d      	bge.n	800f894 <pow+0x9c>
 800f978:	b01b      	add	sp, #108	; 0x6c
 800f97a:	ecbd 8b0a 	vpop	{d8-d12}
 800f97e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f982:	f000 baf1 	b.w	800ff68 <__math_divzero>
 800f986:	2000      	movs	r0, #0
 800f988:	e7ee      	b.n	800f968 <pow+0x170>
 800f98a:	2e00      	cmp	r6, #0
 800f98c:	f177 0300 	sbcs.w	r3, r7, #0
 800f990:	da80      	bge.n	800f894 <pow+0x9c>
 800f992:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f996:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f99a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800f99e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800f9a2:	e777      	b.n	800f894 <pow+0x9c>
 800f9a4:	2c00      	cmp	r4, #0
 800f9a6:	f175 0300 	sbcs.w	r3, r5, #0
 800f9aa:	da35      	bge.n	800fa18 <pow+0x220>
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	4639      	mov	r1, r7
 800f9b0:	f7ff feec 	bl	800f78c <checkint>
 800f9b4:	b940      	cbnz	r0, 800f9c8 <pow+0x1d0>
 800f9b6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f9ba:	b01b      	add	sp, #108	; 0x6c
 800f9bc:	ecbd 8b0a 	vpop	{d8-d12}
 800f9c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	f000 bae8 	b.w	800ff98 <__math_invalid>
 800f9c8:	2801      	cmp	r0, #1
 800f9ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f9ce:	bf14      	ite	ne
 800f9d0:	2000      	movne	r0, #0
 800f9d2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800f9d6:	461d      	mov	r5, r3
 800f9d8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800f9dc:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800f9e0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800f9e4:	2a7f      	cmp	r2, #127	; 0x7f
 800f9e6:	d933      	bls.n	800fa50 <pow+0x258>
 800f9e8:	4974      	ldr	r1, [pc, #464]	; (800fbbc <pow+0x3c4>)
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	428d      	cmp	r5, r1
 800f9ee:	bf08      	it	eq
 800f9f0:	4284      	cmpeq	r4, r0
 800f9f2:	f000 81ae 	beq.w	800fd52 <pow+0x55a>
 800f9f6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d80e      	bhi.n	800fa1c <pow+0x224>
 800f9fe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fa02:	ed9d 7b00 	vldr	d7, [sp]
 800fa06:	42a9      	cmp	r1, r5
 800fa08:	bf08      	it	eq
 800fa0a:	42a0      	cmpeq	r0, r4
 800fa0c:	bf34      	ite	cc
 800fa0e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800fa12:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800fa16:	e73d      	b.n	800f894 <pow+0x9c>
 800fa18:	2000      	movs	r0, #0
 800fa1a:	e7df      	b.n	800f9dc <pow+0x1e4>
 800fa1c:	42a9      	cmp	r1, r5
 800fa1e:	bf08      	it	eq
 800fa20:	42a0      	cmpeq	r0, r4
 800fa22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fa26:	bf2c      	ite	cs
 800fa28:	2301      	movcs	r3, #1
 800fa2a:	2300      	movcc	r3, #0
 800fa2c:	4590      	cmp	r8, r2
 800fa2e:	bf8c      	ite	hi
 800fa30:	f04f 0800 	movhi.w	r8, #0
 800fa34:	f04f 0801 	movls.w	r8, #1
 800fa38:	4543      	cmp	r3, r8
 800fa3a:	f04f 0000 	mov.w	r0, #0
 800fa3e:	f000 80af 	beq.w	800fba0 <pow+0x3a8>
 800fa42:	b01b      	add	sp, #108	; 0x6c
 800fa44:	ecbd 8b0a 	vpop	{d8-d12}
 800fa48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4c:	f000 ba84 	b.w	800ff58 <__math_oflow>
 800fa50:	f1bc 0f00 	cmp.w	ip, #0
 800fa54:	d10e      	bne.n	800fa74 <pow+0x27c>
 800fa56:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800fbb0 <pow+0x3b8>
 800fa5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fa5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fa62:	ec57 6b17 	vmov	r6, r7, d7
 800fa66:	4b59      	ldr	r3, [pc, #356]	; (800fbcc <pow+0x3d4>)
 800fa68:	2100      	movs	r1, #0
 800fa6a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fa6e:	1874      	adds	r4, r6, r1
 800fa70:	eb42 0503 	adc.w	r5, r2, r3
 800fa74:	2300      	movs	r3, #0
 800fa76:	18e3      	adds	r3, r4, r3
 800fa78:	4b55      	ldr	r3, [pc, #340]	; (800fbd0 <pow+0x3d8>)
 800fa7a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800fa7e:	eb45 0303 	adc.w	r3, r5, r3
 800fa82:	1519      	asrs	r1, r3, #20
 800fa84:	ee03 1a10 	vmov	s6, r1
 800fa88:	0d1e      	lsrs	r6, r3, #20
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800fa90:	0536      	lsls	r6, r6, #20
 800fa92:	1a63      	subs	r3, r4, r1
 800fa94:	9312      	str	r3, [sp, #72]	; 0x48
 800fa96:	eb65 0306 	sbc.w	r3, r5, r6
 800fa9a:	9313      	str	r3, [sp, #76]	; 0x4c
 800fa9c:	4b4d      	ldr	r3, [pc, #308]	; (800fbd4 <pow+0x3dc>)
 800fa9e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800faa2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800faa6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800faaa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800faae:	ed93 7b00 	vldr	d7, [r3]
 800fab2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800fab6:	ed93 4b02 	vldr	d4, [r3, #8]
 800faba:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800fabe:	eea3 5b07 	vfma.f64	d5, d3, d7
 800fac2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800fac6:	ee36 9b05 	vadd.f64	d9, d6, d5
 800faca:	ee35 5b49 	vsub.f64	d5, d5, d9
 800face:	eea3 7b04 	vfma.f64	d7, d3, d4
 800fad2:	ed93 4b04 	vldr	d4, [r3, #16]
 800fad6:	ee35 5b06 	vadd.f64	d5, d5, d6
 800fada:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fade:	ee26 4b04 	vmul.f64	d4, d6, d4
 800fae2:	ed93 3b08 	vldr	d3, [r3, #32]
 800fae6:	ee26 0b04 	vmul.f64	d0, d6, d4
 800faea:	eeb0 8b40 	vmov.f64	d8, d0
 800faee:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800faf2:	ed93 4b06 	vldr	d4, [r3, #24]
 800faf6:	ee26 ab00 	vmul.f64	d10, d6, d0
 800fafa:	ee39 1b00 	vadd.f64	d1, d9, d0
 800fafe:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800fb02:	eea6 4b03 	vfma.f64	d4, d6, d3
 800fb06:	ee39 9b41 	vsub.f64	d9, d9, d1
 800fb0a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800fb0e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800fb12:	ee39 9b00 	vadd.f64	d9, d9, d0
 800fb16:	eea6 3b02 	vfma.f64	d3, d6, d2
 800fb1a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800fb1e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800fb22:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800fb26:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800fb2a:	ed9d 6b00 	vldr	d6, [sp]
 800fb2e:	eea0 3b02 	vfma.f64	d3, d0, d2
 800fb32:	eea0 4b03 	vfma.f64	d4, d0, d3
 800fb36:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800fb3a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800fb3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fb42:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fb46:	eeb0 3b46 	vmov.f64	d3, d6
 800fb4a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800fb4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb52:	ee31 9b09 	vadd.f64	d9, d1, d9
 800fb56:	ed9d 6b00 	vldr	d6, [sp]
 800fb5a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800fb5e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800fb62:	193c      	adds	r4, r7, r4
 800fb64:	2c3e      	cmp	r4, #62	; 0x3e
 800fb66:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800fb6a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800fb6e:	d934      	bls.n	800fbda <pow+0x3e2>
 800fb70:	428c      	cmp	r4, r1
 800fb72:	da0d      	bge.n	800fb90 <pow+0x398>
 800fb74:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fb78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb7c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fb80:	2800      	cmp	r0, #0
 800fb82:	f43f ae87 	beq.w	800f894 <pow+0x9c>
 800fb86:	eeb1 0b40 	vneg.f64	d0, d0
 800fb8a:	e683      	b.n	800f894 <pow+0x9c>
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	e771      	b.n	800fa74 <pow+0x27c>
 800fb90:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800fb94:	d920      	bls.n	800fbd8 <pow+0x3e0>
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	f173 0300 	sbcs.w	r3, r3, #0
 800fb9c:	f6bf af51 	bge.w	800fa42 <pow+0x24a>
 800fba0:	b01b      	add	sp, #108	; 0x6c
 800fba2:	ecbd 8b0a 	vpop	{d8-d12}
 800fba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbaa:	f000 b9cd 	b.w	800ff48 <__math_uflow>
 800fbae:	bf00      	nop
 800fbb0:	00000000 	.word	0x00000000
 800fbb4:	43300000 	.word	0x43300000
 800fbb8:	fff00000 	.word	0xfff00000
 800fbbc:	3ff00000 	.word	0x3ff00000
 800fbc0:	ffe00000 	.word	0xffe00000
 800fbc4:	7fe00000 	.word	0x7fe00000
 800fbc8:	7fdfffff 	.word	0x7fdfffff
 800fbcc:	fcc00000 	.word	0xfcc00000
 800fbd0:	c0196aab 	.word	0xc0196aab
 800fbd4:	08012958 	.word	0x08012958
 800fbd8:	460f      	mov	r7, r1
 800fbda:	4e65      	ldr	r6, [pc, #404]	; (800fd70 <pow+0x578>)
 800fbdc:	ed9d 4b02 	vldr	d4, [sp, #8]
 800fbe0:	ed96 6b02 	vldr	d6, [r6, #8]
 800fbe4:	ed96 7b00 	vldr	d7, [r6]
 800fbe8:	eeb0 5b46 	vmov.f64	d5, d6
 800fbec:	eea4 5b07 	vfma.f64	d5, d4, d7
 800fbf0:	ed8d 5b00 	vstr	d5, [sp]
 800fbf4:	ee35 6b46 	vsub.f64	d6, d5, d6
 800fbf8:	eeb0 5b44 	vmov.f64	d5, d4
 800fbfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc00:	ed96 7b04 	vldr	d7, [r6, #16]
 800fc04:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800fc08:	eea6 5b07 	vfma.f64	d5, d6, d7
 800fc0c:	eeb0 7b45 	vmov.f64	d7, d5
 800fc10:	ed96 5b06 	vldr	d5, [r6, #24]
 800fc14:	1849      	adds	r1, r1, r1
 800fc16:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800fc1a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800fc1e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fc22:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800fc26:	ee33 3b07 	vadd.f64	d3, d3, d7
 800fc2a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800fc2e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800fc32:	ed96 5b08 	vldr	d5, [r6, #32]
 800fc36:	ee33 7b07 	vadd.f64	d7, d3, d7
 800fc3a:	1814      	adds	r4, r2, r0
 800fc3c:	0365      	lsls	r5, r4, #13
 800fc3e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800fc42:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fc46:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fc4a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800fc4e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800fc52:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800fc56:	2000      	movs	r0, #0
 800fc58:	eb10 0a04 	adds.w	sl, r0, r4
 800fc5c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fc60:	eb45 0b0c 	adc.w	fp, r5, ip
 800fc64:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fc68:	2f00      	cmp	r7, #0
 800fc6a:	d16a      	bne.n	800fd42 <pow+0x54a>
 800fc6c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800fc70:	4639      	mov	r1, r7
 800fc72:	ea50 0301 	orrs.w	r3, r0, r1
 800fc76:	f04f 0300 	mov.w	r3, #0
 800fc7a:	d115      	bne.n	800fca8 <pow+0x4b0>
 800fc7c:	eb1a 0303 	adds.w	r3, sl, r3
 800fc80:	ee0b 3a10 	vmov	s22, r3
 800fc84:	4b3b      	ldr	r3, [pc, #236]	; (800fd74 <pow+0x57c>)
 800fc86:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800fd58 <pow+0x560>
 800fc8a:	eb4b 0303 	adc.w	r3, fp, r3
 800fc8e:	ee0b 3a90 	vmov	s23, r3
 800fc92:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800fc96:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800fc9a:	b01b      	add	sp, #108	; 0x6c
 800fc9c:	ecbd 8b0a 	vpop	{d8-d12}
 800fca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	f000 b990 	b.w	800ffc8 <__math_check_oflow>
 800fca8:	eb1a 0303 	adds.w	r3, sl, r3
 800fcac:	930a      	str	r3, [sp, #40]	; 0x28
 800fcae:	4b32      	ldr	r3, [pc, #200]	; (800fd78 <pow+0x580>)
 800fcb0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fcb4:	eb4b 0303 	adc.w	r3, fp, r3
 800fcb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcba:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800fcbe:	ee27 6b05 	vmul.f64	d6, d7, d5
 800fcc2:	ee35 7b06 	vadd.f64	d7, d5, d6
 800fcc6:	eeb0 3bc7 	vabs.f64	d3, d7
 800fcca:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800fcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800fd60 <pow+0x568>
 800fcd6:	d52b      	bpl.n	800fd30 <pow+0x538>
 800fcd8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fcdc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800fce8:	ee35 6b06 	vadd.f64	d6, d5, d6
 800fcec:	bf48      	it	mi
 800fcee:	eeb0 4b43 	vmovmi.f64	d4, d3
 800fcf2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800fcf6:	ee34 5b43 	vsub.f64	d5, d4, d3
 800fcfa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fcfe:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd02:	ee37 7b03 	vadd.f64	d7, d7, d3
 800fd06:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fd0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd12:	d105      	bne.n	800fd20 <pow+0x528>
 800fd14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd16:	463a      	mov	r2, r7
 800fd18:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fd1c:	ec43 2b17 	vmov	d7, r2, r3
 800fd20:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800fd24:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800fd28:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fd2c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800fd30:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fd34:	b01b      	add	sp, #108	; 0x6c
 800fd36:	ecbd 8b0a 	vpop	{d8-d12}
 800fd3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3e:	f000 b93a 	b.w	800ffb6 <__math_check_uflow>
 800fd42:	ec4b ab10 	vmov	d0, sl, fp
 800fd46:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fd4a:	e5a3      	b.n	800f894 <pow+0x9c>
 800fd4c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800fd68 <pow+0x570>
 800fd50:	e5a0      	b.n	800f894 <pow+0x9c>
 800fd52:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fd56:	e59d      	b.n	800f894 <pow+0x9c>
 800fd58:	00000000 	.word	0x00000000
 800fd5c:	7f000000 	.word	0x7f000000
 800fd60:	00000000 	.word	0x00000000
 800fd64:	00100000 	.word	0x00100000
	...
 800fd70:	08013ae0 	.word	0x08013ae0
 800fd74:	c0f00000 	.word	0xc0f00000
 800fd78:	3fe00000 	.word	0x3fe00000

0800fd7c <sinf_poly>:
 800fd7c:	07cb      	lsls	r3, r1, #31
 800fd7e:	d412      	bmi.n	800fda6 <sinf_poly+0x2a>
 800fd80:	ee21 6b00 	vmul.f64	d6, d1, d0
 800fd84:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800fd88:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800fd8c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800fd90:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800fd94:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fd98:	eea5 0b06 	vfma.f64	d0, d5, d6
 800fd9c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800fda0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fda4:	4770      	bx	lr
 800fda6:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800fdaa:	ee21 6b01 	vmul.f64	d6, d1, d1
 800fdae:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800fdb2:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800fdb6:	eea1 7b05 	vfma.f64	d7, d1, d5
 800fdba:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800fdbe:	eea1 0b05 	vfma.f64	d0, d1, d5
 800fdc2:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800fdc6:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fdca:	eea6 0b05 	vfma.f64	d0, d6, d5
 800fdce:	e7e5      	b.n	800fd9c <sinf_poly+0x20>

0800fdd0 <sinf>:
 800fdd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdd2:	ee10 4a10 	vmov	r4, s0
 800fdd6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800fdda:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800fdde:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800fde2:	eef0 7a40 	vmov.f32	s15, s0
 800fde6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800fdea:	d218      	bcs.n	800fe1e <sinf+0x4e>
 800fdec:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fdf0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800fdf4:	d20a      	bcs.n	800fe0c <sinf+0x3c>
 800fdf6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800fdfa:	d103      	bne.n	800fe04 <sinf+0x34>
 800fdfc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800fe00:	ed8d 1a01 	vstr	s2, [sp, #4]
 800fe04:	eeb0 0a67 	vmov.f32	s0, s15
 800fe08:	b003      	add	sp, #12
 800fe0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe0c:	483e      	ldr	r0, [pc, #248]	; (800ff08 <sinf+0x138>)
 800fe0e:	eeb0 0b46 	vmov.f64	d0, d6
 800fe12:	2100      	movs	r1, #0
 800fe14:	b003      	add	sp, #12
 800fe16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fe1a:	f7ff bfaf 	b.w	800fd7c <sinf_poly>
 800fe1e:	f240 422e 	movw	r2, #1070	; 0x42e
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d824      	bhi.n	800fe70 <sinf+0xa0>
 800fe26:	4b38      	ldr	r3, [pc, #224]	; (800ff08 <sinf+0x138>)
 800fe28:	ed93 7b08 	vldr	d7, [r3, #32]
 800fe2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fe30:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fe34:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800fe38:	ee17 1a90 	vmov	r1, s15
 800fe3c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800fe40:	1609      	asrs	r1, r1, #24
 800fe42:	ee07 1a90 	vmov	s15, r1
 800fe46:	f001 0203 	and.w	r2, r1, #3
 800fe4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fe4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fe52:	ed92 0b00 	vldr	d0, [r2]
 800fe56:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800fe5a:	f011 0f02 	tst.w	r1, #2
 800fe5e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800fe62:	bf08      	it	eq
 800fe64:	4618      	moveq	r0, r3
 800fe66:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fe6a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fe6e:	e7d1      	b.n	800fe14 <sinf+0x44>
 800fe70:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800fe74:	d23d      	bcs.n	800fef2 <sinf+0x122>
 800fe76:	4b25      	ldr	r3, [pc, #148]	; (800ff0c <sinf+0x13c>)
 800fe78:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800fe7c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800fe80:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800fe84:	6a06      	ldr	r6, [r0, #32]
 800fe86:	6900      	ldr	r0, [r0, #16]
 800fe88:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800fe8c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800fe90:	40a9      	lsls	r1, r5
 800fe92:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fe96:	fba1 6706 	umull	r6, r7, r1, r6
 800fe9a:	fb05 f301 	mul.w	r3, r5, r1
 800fe9e:	463a      	mov	r2, r7
 800fea0:	fbe0 2301 	umlal	r2, r3, r0, r1
 800fea4:	1c11      	adds	r1, r2, #0
 800fea6:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800feaa:	2000      	movs	r0, #0
 800feac:	1a10      	subs	r0, r2, r0
 800feae:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800feb2:	eb63 0101 	sbc.w	r1, r3, r1
 800feb6:	f7f0 fbf9 	bl	80006ac <__aeabi_l2d>
 800feba:	0fb5      	lsrs	r5, r6, #30
 800febc:	4a12      	ldr	r2, [pc, #72]	; (800ff08 <sinf+0x138>)
 800febe:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800fec2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800ff00 <sinf+0x130>
 800fec6:	ec41 0b17 	vmov	d7, r0, r1
 800feca:	f003 0103 	and.w	r1, r3, #3
 800fece:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800fed2:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fed6:	ed91 7b00 	vldr	d7, [r1]
 800feda:	ee20 1b00 	vmul.f64	d1, d0, d0
 800fede:	f013 0f02 	tst.w	r3, #2
 800fee2:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800fee6:	4629      	mov	r1, r5
 800fee8:	bf08      	it	eq
 800feea:	4610      	moveq	r0, r2
 800feec:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fef0:	e790      	b.n	800fe14 <sinf+0x44>
 800fef2:	b003      	add	sp, #12
 800fef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fef8:	f7ff bc39 	b.w	800f76e <__math_invalidf>
 800fefc:	f3af 8000 	nop.w
 800ff00:	54442d18 	.word	0x54442d18
 800ff04:	3c1921fb 	.word	0x3c1921fb
 800ff08:	08013a00 	.word	0x08013a00
 800ff0c:	080139a0 	.word	0x080139a0

0800ff10 <with_errno>:
 800ff10:	b513      	push	{r0, r1, r4, lr}
 800ff12:	4604      	mov	r4, r0
 800ff14:	ed8d 0b00 	vstr	d0, [sp]
 800ff18:	f000 f86a 	bl	800fff0 <__errno>
 800ff1c:	ed9d 0b00 	vldr	d0, [sp]
 800ff20:	6004      	str	r4, [r0, #0]
 800ff22:	b002      	add	sp, #8
 800ff24:	bd10      	pop	{r4, pc}

0800ff26 <xflow>:
 800ff26:	b082      	sub	sp, #8
 800ff28:	b158      	cbz	r0, 800ff42 <xflow+0x1c>
 800ff2a:	eeb1 7b40 	vneg.f64	d7, d0
 800ff2e:	ed8d 7b00 	vstr	d7, [sp]
 800ff32:	ed9d 7b00 	vldr	d7, [sp]
 800ff36:	2022      	movs	r0, #34	; 0x22
 800ff38:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ff3c:	b002      	add	sp, #8
 800ff3e:	f7ff bfe7 	b.w	800ff10 <with_errno>
 800ff42:	eeb0 7b40 	vmov.f64	d7, d0
 800ff46:	e7f2      	b.n	800ff2e <xflow+0x8>

0800ff48 <__math_uflow>:
 800ff48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff50 <__math_uflow+0x8>
 800ff4c:	f7ff bfeb 	b.w	800ff26 <xflow>
 800ff50:	00000000 	.word	0x00000000
 800ff54:	10000000 	.word	0x10000000

0800ff58 <__math_oflow>:
 800ff58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff60 <__math_oflow+0x8>
 800ff5c:	f7ff bfe3 	b.w	800ff26 <xflow>
 800ff60:	00000000 	.word	0x00000000
 800ff64:	70000000 	.word	0x70000000

0800ff68 <__math_divzero>:
 800ff68:	b082      	sub	sp, #8
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ff70:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800ff74:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800ff78:	ed8d 7b00 	vstr	d7, [sp]
 800ff7c:	ed9d 0b00 	vldr	d0, [sp]
 800ff80:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800ff90 <__math_divzero+0x28>
 800ff84:	2022      	movs	r0, #34	; 0x22
 800ff86:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800ff8a:	b002      	add	sp, #8
 800ff8c:	f7ff bfc0 	b.w	800ff10 <with_errno>
	...

0800ff98 <__math_invalid>:
 800ff98:	eeb0 7b40 	vmov.f64	d7, d0
 800ff9c:	eeb4 7b47 	vcmp.f64	d7, d7
 800ffa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ffa8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800ffac:	d602      	bvs.n	800ffb4 <__math_invalid+0x1c>
 800ffae:	2021      	movs	r0, #33	; 0x21
 800ffb0:	f7ff bfae 	b.w	800ff10 <with_errno>
 800ffb4:	4770      	bx	lr

0800ffb6 <__math_check_uflow>:
 800ffb6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ffba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffbe:	d102      	bne.n	800ffc6 <__math_check_uflow+0x10>
 800ffc0:	2022      	movs	r0, #34	; 0x22
 800ffc2:	f7ff bfa5 	b.w	800ff10 <with_errno>
 800ffc6:	4770      	bx	lr

0800ffc8 <__math_check_oflow>:
 800ffc8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ffe8 <__math_check_oflow+0x20>
 800ffcc:	eeb0 7bc0 	vabs.f64	d7, d0
 800ffd0:	eeb4 7b46 	vcmp.f64	d7, d6
 800ffd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd8:	dd02      	ble.n	800ffe0 <__math_check_oflow+0x18>
 800ffda:	2022      	movs	r0, #34	; 0x22
 800ffdc:	f7ff bf98 	b.w	800ff10 <with_errno>
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	f3af 8000 	nop.w
 800ffe8:	ffffffff 	.word	0xffffffff
 800ffec:	7fefffff 	.word	0x7fefffff

0800fff0 <__errno>:
 800fff0:	4b01      	ldr	r3, [pc, #4]	; (800fff8 <__errno+0x8>)
 800fff2:	6818      	ldr	r0, [r3, #0]
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop
 800fff8:	2400003c 	.word	0x2400003c

0800fffc <__libc_init_array>:
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	4d0d      	ldr	r5, [pc, #52]	; (8010034 <__libc_init_array+0x38>)
 8010000:	4c0d      	ldr	r4, [pc, #52]	; (8010038 <__libc_init_array+0x3c>)
 8010002:	1b64      	subs	r4, r4, r5
 8010004:	10a4      	asrs	r4, r4, #2
 8010006:	2600      	movs	r6, #0
 8010008:	42a6      	cmp	r6, r4
 801000a:	d109      	bne.n	8010020 <__libc_init_array+0x24>
 801000c:	4d0b      	ldr	r5, [pc, #44]	; (801003c <__libc_init_array+0x40>)
 801000e:	4c0c      	ldr	r4, [pc, #48]	; (8010040 <__libc_init_array+0x44>)
 8010010:	f002 fc60 	bl	80128d4 <_init>
 8010014:	1b64      	subs	r4, r4, r5
 8010016:	10a4      	asrs	r4, r4, #2
 8010018:	2600      	movs	r6, #0
 801001a:	42a6      	cmp	r6, r4
 801001c:	d105      	bne.n	801002a <__libc_init_array+0x2e>
 801001e:	bd70      	pop	{r4, r5, r6, pc}
 8010020:	f855 3b04 	ldr.w	r3, [r5], #4
 8010024:	4798      	blx	r3
 8010026:	3601      	adds	r6, #1
 8010028:	e7ee      	b.n	8010008 <__libc_init_array+0xc>
 801002a:	f855 3b04 	ldr.w	r3, [r5], #4
 801002e:	4798      	blx	r3
 8010030:	3601      	adds	r6, #1
 8010032:	e7f2      	b.n	801001a <__libc_init_array+0x1e>
 8010034:	0801473c 	.word	0x0801473c
 8010038:	0801473c 	.word	0x0801473c
 801003c:	0801473c 	.word	0x0801473c
 8010040:	08014744 	.word	0x08014744

08010044 <memcpy>:
 8010044:	440a      	add	r2, r1
 8010046:	4291      	cmp	r1, r2
 8010048:	f100 33ff 	add.w	r3, r0, #4294967295
 801004c:	d100      	bne.n	8010050 <memcpy+0xc>
 801004e:	4770      	bx	lr
 8010050:	b510      	push	{r4, lr}
 8010052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010056:	f803 4f01 	strb.w	r4, [r3, #1]!
 801005a:	4291      	cmp	r1, r2
 801005c:	d1f9      	bne.n	8010052 <memcpy+0xe>
 801005e:	bd10      	pop	{r4, pc}

08010060 <memset>:
 8010060:	4402      	add	r2, r0
 8010062:	4603      	mov	r3, r0
 8010064:	4293      	cmp	r3, r2
 8010066:	d100      	bne.n	801006a <memset+0xa>
 8010068:	4770      	bx	lr
 801006a:	f803 1b01 	strb.w	r1, [r3], #1
 801006e:	e7f9      	b.n	8010064 <memset+0x4>

08010070 <__cvt>:
 8010070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010072:	ed2d 8b02 	vpush	{d8}
 8010076:	eeb0 8b40 	vmov.f64	d8, d0
 801007a:	b085      	sub	sp, #20
 801007c:	4617      	mov	r7, r2
 801007e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010080:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010082:	ee18 2a90 	vmov	r2, s17
 8010086:	f025 0520 	bic.w	r5, r5, #32
 801008a:	2a00      	cmp	r2, #0
 801008c:	bfb6      	itet	lt
 801008e:	222d      	movlt	r2, #45	; 0x2d
 8010090:	2200      	movge	r2, #0
 8010092:	eeb1 8b40 	vneglt.f64	d8, d0
 8010096:	2d46      	cmp	r5, #70	; 0x46
 8010098:	460c      	mov	r4, r1
 801009a:	701a      	strb	r2, [r3, #0]
 801009c:	d004      	beq.n	80100a8 <__cvt+0x38>
 801009e:	2d45      	cmp	r5, #69	; 0x45
 80100a0:	d100      	bne.n	80100a4 <__cvt+0x34>
 80100a2:	3401      	adds	r4, #1
 80100a4:	2102      	movs	r1, #2
 80100a6:	e000      	b.n	80100aa <__cvt+0x3a>
 80100a8:	2103      	movs	r1, #3
 80100aa:	ab03      	add	r3, sp, #12
 80100ac:	9301      	str	r3, [sp, #4]
 80100ae:	ab02      	add	r3, sp, #8
 80100b0:	9300      	str	r3, [sp, #0]
 80100b2:	4622      	mov	r2, r4
 80100b4:	4633      	mov	r3, r6
 80100b6:	eeb0 0b48 	vmov.f64	d0, d8
 80100ba:	f000 fca9 	bl	8010a10 <_dtoa_r>
 80100be:	2d47      	cmp	r5, #71	; 0x47
 80100c0:	d109      	bne.n	80100d6 <__cvt+0x66>
 80100c2:	07fb      	lsls	r3, r7, #31
 80100c4:	d407      	bmi.n	80100d6 <__cvt+0x66>
 80100c6:	9b03      	ldr	r3, [sp, #12]
 80100c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100ca:	1a1b      	subs	r3, r3, r0
 80100cc:	6013      	str	r3, [r2, #0]
 80100ce:	b005      	add	sp, #20
 80100d0:	ecbd 8b02 	vpop	{d8}
 80100d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100d6:	2d46      	cmp	r5, #70	; 0x46
 80100d8:	eb00 0204 	add.w	r2, r0, r4
 80100dc:	d10c      	bne.n	80100f8 <__cvt+0x88>
 80100de:	7803      	ldrb	r3, [r0, #0]
 80100e0:	2b30      	cmp	r3, #48	; 0x30
 80100e2:	d107      	bne.n	80100f4 <__cvt+0x84>
 80100e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ec:	bf1c      	itt	ne
 80100ee:	f1c4 0401 	rsbne	r4, r4, #1
 80100f2:	6034      	strne	r4, [r6, #0]
 80100f4:	6833      	ldr	r3, [r6, #0]
 80100f6:	441a      	add	r2, r3
 80100f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010100:	bf08      	it	eq
 8010102:	9203      	streq	r2, [sp, #12]
 8010104:	2130      	movs	r1, #48	; 0x30
 8010106:	9b03      	ldr	r3, [sp, #12]
 8010108:	4293      	cmp	r3, r2
 801010a:	d2dc      	bcs.n	80100c6 <__cvt+0x56>
 801010c:	1c5c      	adds	r4, r3, #1
 801010e:	9403      	str	r4, [sp, #12]
 8010110:	7019      	strb	r1, [r3, #0]
 8010112:	e7f8      	b.n	8010106 <__cvt+0x96>

08010114 <__exponent>:
 8010114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010116:	4603      	mov	r3, r0
 8010118:	2900      	cmp	r1, #0
 801011a:	bfb8      	it	lt
 801011c:	4249      	neglt	r1, r1
 801011e:	f803 2b02 	strb.w	r2, [r3], #2
 8010122:	bfb4      	ite	lt
 8010124:	222d      	movlt	r2, #45	; 0x2d
 8010126:	222b      	movge	r2, #43	; 0x2b
 8010128:	2909      	cmp	r1, #9
 801012a:	7042      	strb	r2, [r0, #1]
 801012c:	dd2a      	ble.n	8010184 <__exponent+0x70>
 801012e:	f10d 0407 	add.w	r4, sp, #7
 8010132:	46a4      	mov	ip, r4
 8010134:	270a      	movs	r7, #10
 8010136:	46a6      	mov	lr, r4
 8010138:	460a      	mov	r2, r1
 801013a:	fb91 f6f7 	sdiv	r6, r1, r7
 801013e:	fb07 1516 	mls	r5, r7, r6, r1
 8010142:	3530      	adds	r5, #48	; 0x30
 8010144:	2a63      	cmp	r2, #99	; 0x63
 8010146:	f104 34ff 	add.w	r4, r4, #4294967295
 801014a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801014e:	4631      	mov	r1, r6
 8010150:	dcf1      	bgt.n	8010136 <__exponent+0x22>
 8010152:	3130      	adds	r1, #48	; 0x30
 8010154:	f1ae 0502 	sub.w	r5, lr, #2
 8010158:	f804 1c01 	strb.w	r1, [r4, #-1]
 801015c:	1c44      	adds	r4, r0, #1
 801015e:	4629      	mov	r1, r5
 8010160:	4561      	cmp	r1, ip
 8010162:	d30a      	bcc.n	801017a <__exponent+0x66>
 8010164:	f10d 0209 	add.w	r2, sp, #9
 8010168:	eba2 020e 	sub.w	r2, r2, lr
 801016c:	4565      	cmp	r5, ip
 801016e:	bf88      	it	hi
 8010170:	2200      	movhi	r2, #0
 8010172:	4413      	add	r3, r2
 8010174:	1a18      	subs	r0, r3, r0
 8010176:	b003      	add	sp, #12
 8010178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801017a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801017e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010182:	e7ed      	b.n	8010160 <__exponent+0x4c>
 8010184:	2330      	movs	r3, #48	; 0x30
 8010186:	3130      	adds	r1, #48	; 0x30
 8010188:	7083      	strb	r3, [r0, #2]
 801018a:	70c1      	strb	r1, [r0, #3]
 801018c:	1d03      	adds	r3, r0, #4
 801018e:	e7f1      	b.n	8010174 <__exponent+0x60>

08010190 <_printf_float>:
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	b08b      	sub	sp, #44	; 0x2c
 8010196:	460c      	mov	r4, r1
 8010198:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801019c:	4616      	mov	r6, r2
 801019e:	461f      	mov	r7, r3
 80101a0:	4605      	mov	r5, r0
 80101a2:	f001 f9b7 	bl	8011514 <_localeconv_r>
 80101a6:	f8d0 b000 	ldr.w	fp, [r0]
 80101aa:	4658      	mov	r0, fp
 80101ac:	f7f0 f898 	bl	80002e0 <strlen>
 80101b0:	2300      	movs	r3, #0
 80101b2:	9308      	str	r3, [sp, #32]
 80101b4:	f8d8 3000 	ldr.w	r3, [r8]
 80101b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80101bc:	6822      	ldr	r2, [r4, #0]
 80101be:	3307      	adds	r3, #7
 80101c0:	f023 0307 	bic.w	r3, r3, #7
 80101c4:	f103 0108 	add.w	r1, r3, #8
 80101c8:	f8c8 1000 	str.w	r1, [r8]
 80101cc:	4682      	mov	sl, r0
 80101ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80101d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010438 <_printf_float+0x2a8>
 80101da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80101de:	eeb0 6bc0 	vabs.f64	d6, d0
 80101e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80101e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ea:	dd24      	ble.n	8010236 <_printf_float+0xa6>
 80101ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f4:	d502      	bpl.n	80101fc <_printf_float+0x6c>
 80101f6:	232d      	movs	r3, #45	; 0x2d
 80101f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101fc:	4b90      	ldr	r3, [pc, #576]	; (8010440 <_printf_float+0x2b0>)
 80101fe:	4891      	ldr	r0, [pc, #580]	; (8010444 <_printf_float+0x2b4>)
 8010200:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010204:	bf94      	ite	ls
 8010206:	4698      	movls	r8, r3
 8010208:	4680      	movhi	r8, r0
 801020a:	2303      	movs	r3, #3
 801020c:	6123      	str	r3, [r4, #16]
 801020e:	f022 0204 	bic.w	r2, r2, #4
 8010212:	2300      	movs	r3, #0
 8010214:	6022      	str	r2, [r4, #0]
 8010216:	9304      	str	r3, [sp, #16]
 8010218:	9700      	str	r7, [sp, #0]
 801021a:	4633      	mov	r3, r6
 801021c:	aa09      	add	r2, sp, #36	; 0x24
 801021e:	4621      	mov	r1, r4
 8010220:	4628      	mov	r0, r5
 8010222:	f000 f9d3 	bl	80105cc <_printf_common>
 8010226:	3001      	adds	r0, #1
 8010228:	f040 808a 	bne.w	8010340 <_printf_float+0x1b0>
 801022c:	f04f 30ff 	mov.w	r0, #4294967295
 8010230:	b00b      	add	sp, #44	; 0x2c
 8010232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010236:	eeb4 0b40 	vcmp.f64	d0, d0
 801023a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023e:	d709      	bvc.n	8010254 <_printf_float+0xc4>
 8010240:	ee10 3a90 	vmov	r3, s1
 8010244:	2b00      	cmp	r3, #0
 8010246:	bfbc      	itt	lt
 8010248:	232d      	movlt	r3, #45	; 0x2d
 801024a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801024e:	487e      	ldr	r0, [pc, #504]	; (8010448 <_printf_float+0x2b8>)
 8010250:	4b7e      	ldr	r3, [pc, #504]	; (801044c <_printf_float+0x2bc>)
 8010252:	e7d5      	b.n	8010200 <_printf_float+0x70>
 8010254:	6863      	ldr	r3, [r4, #4]
 8010256:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801025a:	9104      	str	r1, [sp, #16]
 801025c:	1c59      	adds	r1, r3, #1
 801025e:	d13c      	bne.n	80102da <_printf_float+0x14a>
 8010260:	2306      	movs	r3, #6
 8010262:	6063      	str	r3, [r4, #4]
 8010264:	2300      	movs	r3, #0
 8010266:	9303      	str	r3, [sp, #12]
 8010268:	ab08      	add	r3, sp, #32
 801026a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801026e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010272:	ab07      	add	r3, sp, #28
 8010274:	6861      	ldr	r1, [r4, #4]
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	6022      	str	r2, [r4, #0]
 801027a:	f10d 031b 	add.w	r3, sp, #27
 801027e:	4628      	mov	r0, r5
 8010280:	f7ff fef6 	bl	8010070 <__cvt>
 8010284:	9b04      	ldr	r3, [sp, #16]
 8010286:	9907      	ldr	r1, [sp, #28]
 8010288:	2b47      	cmp	r3, #71	; 0x47
 801028a:	4680      	mov	r8, r0
 801028c:	d108      	bne.n	80102a0 <_printf_float+0x110>
 801028e:	1cc8      	adds	r0, r1, #3
 8010290:	db02      	blt.n	8010298 <_printf_float+0x108>
 8010292:	6863      	ldr	r3, [r4, #4]
 8010294:	4299      	cmp	r1, r3
 8010296:	dd41      	ble.n	801031c <_printf_float+0x18c>
 8010298:	f1a9 0902 	sub.w	r9, r9, #2
 801029c:	fa5f f989 	uxtb.w	r9, r9
 80102a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80102a4:	d820      	bhi.n	80102e8 <_printf_float+0x158>
 80102a6:	3901      	subs	r1, #1
 80102a8:	464a      	mov	r2, r9
 80102aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80102ae:	9107      	str	r1, [sp, #28]
 80102b0:	f7ff ff30 	bl	8010114 <__exponent>
 80102b4:	9a08      	ldr	r2, [sp, #32]
 80102b6:	9004      	str	r0, [sp, #16]
 80102b8:	1813      	adds	r3, r2, r0
 80102ba:	2a01      	cmp	r2, #1
 80102bc:	6123      	str	r3, [r4, #16]
 80102be:	dc02      	bgt.n	80102c6 <_printf_float+0x136>
 80102c0:	6822      	ldr	r2, [r4, #0]
 80102c2:	07d2      	lsls	r2, r2, #31
 80102c4:	d501      	bpl.n	80102ca <_printf_float+0x13a>
 80102c6:	3301      	adds	r3, #1
 80102c8:	6123      	str	r3, [r4, #16]
 80102ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d0a2      	beq.n	8010218 <_printf_float+0x88>
 80102d2:	232d      	movs	r3, #45	; 0x2d
 80102d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102d8:	e79e      	b.n	8010218 <_printf_float+0x88>
 80102da:	9904      	ldr	r1, [sp, #16]
 80102dc:	2947      	cmp	r1, #71	; 0x47
 80102de:	d1c1      	bne.n	8010264 <_printf_float+0xd4>
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1bf      	bne.n	8010264 <_printf_float+0xd4>
 80102e4:	2301      	movs	r3, #1
 80102e6:	e7bc      	b.n	8010262 <_printf_float+0xd2>
 80102e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80102ec:	d118      	bne.n	8010320 <_printf_float+0x190>
 80102ee:	2900      	cmp	r1, #0
 80102f0:	6863      	ldr	r3, [r4, #4]
 80102f2:	dd0b      	ble.n	801030c <_printf_float+0x17c>
 80102f4:	6121      	str	r1, [r4, #16]
 80102f6:	b913      	cbnz	r3, 80102fe <_printf_float+0x16e>
 80102f8:	6822      	ldr	r2, [r4, #0]
 80102fa:	07d0      	lsls	r0, r2, #31
 80102fc:	d502      	bpl.n	8010304 <_printf_float+0x174>
 80102fe:	3301      	adds	r3, #1
 8010300:	440b      	add	r3, r1
 8010302:	6123      	str	r3, [r4, #16]
 8010304:	2300      	movs	r3, #0
 8010306:	65a1      	str	r1, [r4, #88]	; 0x58
 8010308:	9304      	str	r3, [sp, #16]
 801030a:	e7de      	b.n	80102ca <_printf_float+0x13a>
 801030c:	b913      	cbnz	r3, 8010314 <_printf_float+0x184>
 801030e:	6822      	ldr	r2, [r4, #0]
 8010310:	07d2      	lsls	r2, r2, #31
 8010312:	d501      	bpl.n	8010318 <_printf_float+0x188>
 8010314:	3302      	adds	r3, #2
 8010316:	e7f4      	b.n	8010302 <_printf_float+0x172>
 8010318:	2301      	movs	r3, #1
 801031a:	e7f2      	b.n	8010302 <_printf_float+0x172>
 801031c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010320:	9b08      	ldr	r3, [sp, #32]
 8010322:	4299      	cmp	r1, r3
 8010324:	db05      	blt.n	8010332 <_printf_float+0x1a2>
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	6121      	str	r1, [r4, #16]
 801032a:	07d8      	lsls	r0, r3, #31
 801032c:	d5ea      	bpl.n	8010304 <_printf_float+0x174>
 801032e:	1c4b      	adds	r3, r1, #1
 8010330:	e7e7      	b.n	8010302 <_printf_float+0x172>
 8010332:	2900      	cmp	r1, #0
 8010334:	bfd4      	ite	le
 8010336:	f1c1 0202 	rsble	r2, r1, #2
 801033a:	2201      	movgt	r2, #1
 801033c:	4413      	add	r3, r2
 801033e:	e7e0      	b.n	8010302 <_printf_float+0x172>
 8010340:	6823      	ldr	r3, [r4, #0]
 8010342:	055a      	lsls	r2, r3, #21
 8010344:	d407      	bmi.n	8010356 <_printf_float+0x1c6>
 8010346:	6923      	ldr	r3, [r4, #16]
 8010348:	4642      	mov	r2, r8
 801034a:	4631      	mov	r1, r6
 801034c:	4628      	mov	r0, r5
 801034e:	47b8      	blx	r7
 8010350:	3001      	adds	r0, #1
 8010352:	d12a      	bne.n	80103aa <_printf_float+0x21a>
 8010354:	e76a      	b.n	801022c <_printf_float+0x9c>
 8010356:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801035a:	f240 80e2 	bls.w	8010522 <_printf_float+0x392>
 801035e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010362:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036a:	d133      	bne.n	80103d4 <_printf_float+0x244>
 801036c:	4a38      	ldr	r2, [pc, #224]	; (8010450 <_printf_float+0x2c0>)
 801036e:	2301      	movs	r3, #1
 8010370:	4631      	mov	r1, r6
 8010372:	4628      	mov	r0, r5
 8010374:	47b8      	blx	r7
 8010376:	3001      	adds	r0, #1
 8010378:	f43f af58 	beq.w	801022c <_printf_float+0x9c>
 801037c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010380:	429a      	cmp	r2, r3
 8010382:	db02      	blt.n	801038a <_printf_float+0x1fa>
 8010384:	6823      	ldr	r3, [r4, #0]
 8010386:	07d8      	lsls	r0, r3, #31
 8010388:	d50f      	bpl.n	80103aa <_printf_float+0x21a>
 801038a:	4653      	mov	r3, sl
 801038c:	465a      	mov	r2, fp
 801038e:	4631      	mov	r1, r6
 8010390:	4628      	mov	r0, r5
 8010392:	47b8      	blx	r7
 8010394:	3001      	adds	r0, #1
 8010396:	f43f af49 	beq.w	801022c <_printf_float+0x9c>
 801039a:	f04f 0800 	mov.w	r8, #0
 801039e:	f104 091a 	add.w	r9, r4, #26
 80103a2:	9b08      	ldr	r3, [sp, #32]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	4543      	cmp	r3, r8
 80103a8:	dc09      	bgt.n	80103be <_printf_float+0x22e>
 80103aa:	6823      	ldr	r3, [r4, #0]
 80103ac:	079b      	lsls	r3, r3, #30
 80103ae:	f100 8108 	bmi.w	80105c2 <_printf_float+0x432>
 80103b2:	68e0      	ldr	r0, [r4, #12]
 80103b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b6:	4298      	cmp	r0, r3
 80103b8:	bfb8      	it	lt
 80103ba:	4618      	movlt	r0, r3
 80103bc:	e738      	b.n	8010230 <_printf_float+0xa0>
 80103be:	2301      	movs	r3, #1
 80103c0:	464a      	mov	r2, r9
 80103c2:	4631      	mov	r1, r6
 80103c4:	4628      	mov	r0, r5
 80103c6:	47b8      	blx	r7
 80103c8:	3001      	adds	r0, #1
 80103ca:	f43f af2f 	beq.w	801022c <_printf_float+0x9c>
 80103ce:	f108 0801 	add.w	r8, r8, #1
 80103d2:	e7e6      	b.n	80103a2 <_printf_float+0x212>
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	dc3c      	bgt.n	8010454 <_printf_float+0x2c4>
 80103da:	4a1d      	ldr	r2, [pc, #116]	; (8010450 <_printf_float+0x2c0>)
 80103dc:	2301      	movs	r3, #1
 80103de:	4631      	mov	r1, r6
 80103e0:	4628      	mov	r0, r5
 80103e2:	47b8      	blx	r7
 80103e4:	3001      	adds	r0, #1
 80103e6:	f43f af21 	beq.w	801022c <_printf_float+0x9c>
 80103ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80103ee:	4313      	orrs	r3, r2
 80103f0:	d102      	bne.n	80103f8 <_printf_float+0x268>
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	07d9      	lsls	r1, r3, #31
 80103f6:	d5d8      	bpl.n	80103aa <_printf_float+0x21a>
 80103f8:	4653      	mov	r3, sl
 80103fa:	465a      	mov	r2, fp
 80103fc:	4631      	mov	r1, r6
 80103fe:	4628      	mov	r0, r5
 8010400:	47b8      	blx	r7
 8010402:	3001      	adds	r0, #1
 8010404:	f43f af12 	beq.w	801022c <_printf_float+0x9c>
 8010408:	f04f 0900 	mov.w	r9, #0
 801040c:	f104 0a1a 	add.w	sl, r4, #26
 8010410:	9b07      	ldr	r3, [sp, #28]
 8010412:	425b      	negs	r3, r3
 8010414:	454b      	cmp	r3, r9
 8010416:	dc01      	bgt.n	801041c <_printf_float+0x28c>
 8010418:	9b08      	ldr	r3, [sp, #32]
 801041a:	e795      	b.n	8010348 <_printf_float+0x1b8>
 801041c:	2301      	movs	r3, #1
 801041e:	4652      	mov	r2, sl
 8010420:	4631      	mov	r1, r6
 8010422:	4628      	mov	r0, r5
 8010424:	47b8      	blx	r7
 8010426:	3001      	adds	r0, #1
 8010428:	f43f af00 	beq.w	801022c <_printf_float+0x9c>
 801042c:	f109 0901 	add.w	r9, r9, #1
 8010430:	e7ee      	b.n	8010410 <_printf_float+0x280>
 8010432:	bf00      	nop
 8010434:	f3af 8000 	nop.w
 8010438:	ffffffff 	.word	0xffffffff
 801043c:	7fefffff 	.word	0x7fefffff
 8010440:	08014354 	.word	0x08014354
 8010444:	08014358 	.word	0x08014358
 8010448:	08014360 	.word	0x08014360
 801044c:	0801435c 	.word	0x0801435c
 8010450:	08014364 	.word	0x08014364
 8010454:	9a08      	ldr	r2, [sp, #32]
 8010456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010458:	429a      	cmp	r2, r3
 801045a:	bfa8      	it	ge
 801045c:	461a      	movge	r2, r3
 801045e:	2a00      	cmp	r2, #0
 8010460:	4691      	mov	r9, r2
 8010462:	dc38      	bgt.n	80104d6 <_printf_float+0x346>
 8010464:	2300      	movs	r3, #0
 8010466:	9305      	str	r3, [sp, #20]
 8010468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801046c:	f104 021a 	add.w	r2, r4, #26
 8010470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010472:	9905      	ldr	r1, [sp, #20]
 8010474:	9304      	str	r3, [sp, #16]
 8010476:	eba3 0309 	sub.w	r3, r3, r9
 801047a:	428b      	cmp	r3, r1
 801047c:	dc33      	bgt.n	80104e6 <_printf_float+0x356>
 801047e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010482:	429a      	cmp	r2, r3
 8010484:	db3c      	blt.n	8010500 <_printf_float+0x370>
 8010486:	6823      	ldr	r3, [r4, #0]
 8010488:	07da      	lsls	r2, r3, #31
 801048a:	d439      	bmi.n	8010500 <_printf_float+0x370>
 801048c:	9a08      	ldr	r2, [sp, #32]
 801048e:	9b04      	ldr	r3, [sp, #16]
 8010490:	9907      	ldr	r1, [sp, #28]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	eba2 0901 	sub.w	r9, r2, r1
 8010498:	4599      	cmp	r9, r3
 801049a:	bfa8      	it	ge
 801049c:	4699      	movge	r9, r3
 801049e:	f1b9 0f00 	cmp.w	r9, #0
 80104a2:	dc35      	bgt.n	8010510 <_printf_float+0x380>
 80104a4:	f04f 0800 	mov.w	r8, #0
 80104a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104ac:	f104 0a1a 	add.w	sl, r4, #26
 80104b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80104b4:	1a9b      	subs	r3, r3, r2
 80104b6:	eba3 0309 	sub.w	r3, r3, r9
 80104ba:	4543      	cmp	r3, r8
 80104bc:	f77f af75 	ble.w	80103aa <_printf_float+0x21a>
 80104c0:	2301      	movs	r3, #1
 80104c2:	4652      	mov	r2, sl
 80104c4:	4631      	mov	r1, r6
 80104c6:	4628      	mov	r0, r5
 80104c8:	47b8      	blx	r7
 80104ca:	3001      	adds	r0, #1
 80104cc:	f43f aeae 	beq.w	801022c <_printf_float+0x9c>
 80104d0:	f108 0801 	add.w	r8, r8, #1
 80104d4:	e7ec      	b.n	80104b0 <_printf_float+0x320>
 80104d6:	4613      	mov	r3, r2
 80104d8:	4631      	mov	r1, r6
 80104da:	4642      	mov	r2, r8
 80104dc:	4628      	mov	r0, r5
 80104de:	47b8      	blx	r7
 80104e0:	3001      	adds	r0, #1
 80104e2:	d1bf      	bne.n	8010464 <_printf_float+0x2d4>
 80104e4:	e6a2      	b.n	801022c <_printf_float+0x9c>
 80104e6:	2301      	movs	r3, #1
 80104e8:	4631      	mov	r1, r6
 80104ea:	4628      	mov	r0, r5
 80104ec:	9204      	str	r2, [sp, #16]
 80104ee:	47b8      	blx	r7
 80104f0:	3001      	adds	r0, #1
 80104f2:	f43f ae9b 	beq.w	801022c <_printf_float+0x9c>
 80104f6:	9b05      	ldr	r3, [sp, #20]
 80104f8:	9a04      	ldr	r2, [sp, #16]
 80104fa:	3301      	adds	r3, #1
 80104fc:	9305      	str	r3, [sp, #20]
 80104fe:	e7b7      	b.n	8010470 <_printf_float+0x2e0>
 8010500:	4653      	mov	r3, sl
 8010502:	465a      	mov	r2, fp
 8010504:	4631      	mov	r1, r6
 8010506:	4628      	mov	r0, r5
 8010508:	47b8      	blx	r7
 801050a:	3001      	adds	r0, #1
 801050c:	d1be      	bne.n	801048c <_printf_float+0x2fc>
 801050e:	e68d      	b.n	801022c <_printf_float+0x9c>
 8010510:	9a04      	ldr	r2, [sp, #16]
 8010512:	464b      	mov	r3, r9
 8010514:	4442      	add	r2, r8
 8010516:	4631      	mov	r1, r6
 8010518:	4628      	mov	r0, r5
 801051a:	47b8      	blx	r7
 801051c:	3001      	adds	r0, #1
 801051e:	d1c1      	bne.n	80104a4 <_printf_float+0x314>
 8010520:	e684      	b.n	801022c <_printf_float+0x9c>
 8010522:	9a08      	ldr	r2, [sp, #32]
 8010524:	2a01      	cmp	r2, #1
 8010526:	dc01      	bgt.n	801052c <_printf_float+0x39c>
 8010528:	07db      	lsls	r3, r3, #31
 801052a:	d537      	bpl.n	801059c <_printf_float+0x40c>
 801052c:	2301      	movs	r3, #1
 801052e:	4642      	mov	r2, r8
 8010530:	4631      	mov	r1, r6
 8010532:	4628      	mov	r0, r5
 8010534:	47b8      	blx	r7
 8010536:	3001      	adds	r0, #1
 8010538:	f43f ae78 	beq.w	801022c <_printf_float+0x9c>
 801053c:	4653      	mov	r3, sl
 801053e:	465a      	mov	r2, fp
 8010540:	4631      	mov	r1, r6
 8010542:	4628      	mov	r0, r5
 8010544:	47b8      	blx	r7
 8010546:	3001      	adds	r0, #1
 8010548:	f43f ae70 	beq.w	801022c <_printf_float+0x9c>
 801054c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010550:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010558:	d01b      	beq.n	8010592 <_printf_float+0x402>
 801055a:	9b08      	ldr	r3, [sp, #32]
 801055c:	f108 0201 	add.w	r2, r8, #1
 8010560:	3b01      	subs	r3, #1
 8010562:	4631      	mov	r1, r6
 8010564:	4628      	mov	r0, r5
 8010566:	47b8      	blx	r7
 8010568:	3001      	adds	r0, #1
 801056a:	d10e      	bne.n	801058a <_printf_float+0x3fa>
 801056c:	e65e      	b.n	801022c <_printf_float+0x9c>
 801056e:	2301      	movs	r3, #1
 8010570:	464a      	mov	r2, r9
 8010572:	4631      	mov	r1, r6
 8010574:	4628      	mov	r0, r5
 8010576:	47b8      	blx	r7
 8010578:	3001      	adds	r0, #1
 801057a:	f43f ae57 	beq.w	801022c <_printf_float+0x9c>
 801057e:	f108 0801 	add.w	r8, r8, #1
 8010582:	9b08      	ldr	r3, [sp, #32]
 8010584:	3b01      	subs	r3, #1
 8010586:	4543      	cmp	r3, r8
 8010588:	dcf1      	bgt.n	801056e <_printf_float+0x3de>
 801058a:	9b04      	ldr	r3, [sp, #16]
 801058c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010590:	e6db      	b.n	801034a <_printf_float+0x1ba>
 8010592:	f04f 0800 	mov.w	r8, #0
 8010596:	f104 091a 	add.w	r9, r4, #26
 801059a:	e7f2      	b.n	8010582 <_printf_float+0x3f2>
 801059c:	2301      	movs	r3, #1
 801059e:	4642      	mov	r2, r8
 80105a0:	e7df      	b.n	8010562 <_printf_float+0x3d2>
 80105a2:	2301      	movs	r3, #1
 80105a4:	464a      	mov	r2, r9
 80105a6:	4631      	mov	r1, r6
 80105a8:	4628      	mov	r0, r5
 80105aa:	47b8      	blx	r7
 80105ac:	3001      	adds	r0, #1
 80105ae:	f43f ae3d 	beq.w	801022c <_printf_float+0x9c>
 80105b2:	f108 0801 	add.w	r8, r8, #1
 80105b6:	68e3      	ldr	r3, [r4, #12]
 80105b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105ba:	1a5b      	subs	r3, r3, r1
 80105bc:	4543      	cmp	r3, r8
 80105be:	dcf0      	bgt.n	80105a2 <_printf_float+0x412>
 80105c0:	e6f7      	b.n	80103b2 <_printf_float+0x222>
 80105c2:	f04f 0800 	mov.w	r8, #0
 80105c6:	f104 0919 	add.w	r9, r4, #25
 80105ca:	e7f4      	b.n	80105b6 <_printf_float+0x426>

080105cc <_printf_common>:
 80105cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105d0:	4616      	mov	r6, r2
 80105d2:	4699      	mov	r9, r3
 80105d4:	688a      	ldr	r2, [r1, #8]
 80105d6:	690b      	ldr	r3, [r1, #16]
 80105d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105dc:	4293      	cmp	r3, r2
 80105de:	bfb8      	it	lt
 80105e0:	4613      	movlt	r3, r2
 80105e2:	6033      	str	r3, [r6, #0]
 80105e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105e8:	4607      	mov	r7, r0
 80105ea:	460c      	mov	r4, r1
 80105ec:	b10a      	cbz	r2, 80105f2 <_printf_common+0x26>
 80105ee:	3301      	adds	r3, #1
 80105f0:	6033      	str	r3, [r6, #0]
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	0699      	lsls	r1, r3, #26
 80105f6:	bf42      	ittt	mi
 80105f8:	6833      	ldrmi	r3, [r6, #0]
 80105fa:	3302      	addmi	r3, #2
 80105fc:	6033      	strmi	r3, [r6, #0]
 80105fe:	6825      	ldr	r5, [r4, #0]
 8010600:	f015 0506 	ands.w	r5, r5, #6
 8010604:	d106      	bne.n	8010614 <_printf_common+0x48>
 8010606:	f104 0a19 	add.w	sl, r4, #25
 801060a:	68e3      	ldr	r3, [r4, #12]
 801060c:	6832      	ldr	r2, [r6, #0]
 801060e:	1a9b      	subs	r3, r3, r2
 8010610:	42ab      	cmp	r3, r5
 8010612:	dc26      	bgt.n	8010662 <_printf_common+0x96>
 8010614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010618:	1e13      	subs	r3, r2, #0
 801061a:	6822      	ldr	r2, [r4, #0]
 801061c:	bf18      	it	ne
 801061e:	2301      	movne	r3, #1
 8010620:	0692      	lsls	r2, r2, #26
 8010622:	d42b      	bmi.n	801067c <_printf_common+0xb0>
 8010624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010628:	4649      	mov	r1, r9
 801062a:	4638      	mov	r0, r7
 801062c:	47c0      	blx	r8
 801062e:	3001      	adds	r0, #1
 8010630:	d01e      	beq.n	8010670 <_printf_common+0xa4>
 8010632:	6823      	ldr	r3, [r4, #0]
 8010634:	68e5      	ldr	r5, [r4, #12]
 8010636:	6832      	ldr	r2, [r6, #0]
 8010638:	f003 0306 	and.w	r3, r3, #6
 801063c:	2b04      	cmp	r3, #4
 801063e:	bf08      	it	eq
 8010640:	1aad      	subeq	r5, r5, r2
 8010642:	68a3      	ldr	r3, [r4, #8]
 8010644:	6922      	ldr	r2, [r4, #16]
 8010646:	bf0c      	ite	eq
 8010648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801064c:	2500      	movne	r5, #0
 801064e:	4293      	cmp	r3, r2
 8010650:	bfc4      	itt	gt
 8010652:	1a9b      	subgt	r3, r3, r2
 8010654:	18ed      	addgt	r5, r5, r3
 8010656:	2600      	movs	r6, #0
 8010658:	341a      	adds	r4, #26
 801065a:	42b5      	cmp	r5, r6
 801065c:	d11a      	bne.n	8010694 <_printf_common+0xc8>
 801065e:	2000      	movs	r0, #0
 8010660:	e008      	b.n	8010674 <_printf_common+0xa8>
 8010662:	2301      	movs	r3, #1
 8010664:	4652      	mov	r2, sl
 8010666:	4649      	mov	r1, r9
 8010668:	4638      	mov	r0, r7
 801066a:	47c0      	blx	r8
 801066c:	3001      	adds	r0, #1
 801066e:	d103      	bne.n	8010678 <_printf_common+0xac>
 8010670:	f04f 30ff 	mov.w	r0, #4294967295
 8010674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010678:	3501      	adds	r5, #1
 801067a:	e7c6      	b.n	801060a <_printf_common+0x3e>
 801067c:	18e1      	adds	r1, r4, r3
 801067e:	1c5a      	adds	r2, r3, #1
 8010680:	2030      	movs	r0, #48	; 0x30
 8010682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010686:	4422      	add	r2, r4
 8010688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801068c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010690:	3302      	adds	r3, #2
 8010692:	e7c7      	b.n	8010624 <_printf_common+0x58>
 8010694:	2301      	movs	r3, #1
 8010696:	4622      	mov	r2, r4
 8010698:	4649      	mov	r1, r9
 801069a:	4638      	mov	r0, r7
 801069c:	47c0      	blx	r8
 801069e:	3001      	adds	r0, #1
 80106a0:	d0e6      	beq.n	8010670 <_printf_common+0xa4>
 80106a2:	3601      	adds	r6, #1
 80106a4:	e7d9      	b.n	801065a <_printf_common+0x8e>
	...

080106a8 <_printf_i>:
 80106a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106ac:	460c      	mov	r4, r1
 80106ae:	4691      	mov	r9, r2
 80106b0:	7e27      	ldrb	r7, [r4, #24]
 80106b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80106b4:	2f78      	cmp	r7, #120	; 0x78
 80106b6:	4680      	mov	r8, r0
 80106b8:	469a      	mov	sl, r3
 80106ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106be:	d807      	bhi.n	80106d0 <_printf_i+0x28>
 80106c0:	2f62      	cmp	r7, #98	; 0x62
 80106c2:	d80a      	bhi.n	80106da <_printf_i+0x32>
 80106c4:	2f00      	cmp	r7, #0
 80106c6:	f000 80d8 	beq.w	801087a <_printf_i+0x1d2>
 80106ca:	2f58      	cmp	r7, #88	; 0x58
 80106cc:	f000 80a3 	beq.w	8010816 <_printf_i+0x16e>
 80106d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80106d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80106d8:	e03a      	b.n	8010750 <_printf_i+0xa8>
 80106da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80106de:	2b15      	cmp	r3, #21
 80106e0:	d8f6      	bhi.n	80106d0 <_printf_i+0x28>
 80106e2:	a001      	add	r0, pc, #4	; (adr r0, 80106e8 <_printf_i+0x40>)
 80106e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80106e8:	08010741 	.word	0x08010741
 80106ec:	08010755 	.word	0x08010755
 80106f0:	080106d1 	.word	0x080106d1
 80106f4:	080106d1 	.word	0x080106d1
 80106f8:	080106d1 	.word	0x080106d1
 80106fc:	080106d1 	.word	0x080106d1
 8010700:	08010755 	.word	0x08010755
 8010704:	080106d1 	.word	0x080106d1
 8010708:	080106d1 	.word	0x080106d1
 801070c:	080106d1 	.word	0x080106d1
 8010710:	080106d1 	.word	0x080106d1
 8010714:	08010861 	.word	0x08010861
 8010718:	08010785 	.word	0x08010785
 801071c:	08010843 	.word	0x08010843
 8010720:	080106d1 	.word	0x080106d1
 8010724:	080106d1 	.word	0x080106d1
 8010728:	08010883 	.word	0x08010883
 801072c:	080106d1 	.word	0x080106d1
 8010730:	08010785 	.word	0x08010785
 8010734:	080106d1 	.word	0x080106d1
 8010738:	080106d1 	.word	0x080106d1
 801073c:	0801084b 	.word	0x0801084b
 8010740:	680b      	ldr	r3, [r1, #0]
 8010742:	1d1a      	adds	r2, r3, #4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	600a      	str	r2, [r1, #0]
 8010748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801074c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010750:	2301      	movs	r3, #1
 8010752:	e0a3      	b.n	801089c <_printf_i+0x1f4>
 8010754:	6825      	ldr	r5, [r4, #0]
 8010756:	6808      	ldr	r0, [r1, #0]
 8010758:	062e      	lsls	r6, r5, #24
 801075a:	f100 0304 	add.w	r3, r0, #4
 801075e:	d50a      	bpl.n	8010776 <_printf_i+0xce>
 8010760:	6805      	ldr	r5, [r0, #0]
 8010762:	600b      	str	r3, [r1, #0]
 8010764:	2d00      	cmp	r5, #0
 8010766:	da03      	bge.n	8010770 <_printf_i+0xc8>
 8010768:	232d      	movs	r3, #45	; 0x2d
 801076a:	426d      	negs	r5, r5
 801076c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010770:	485e      	ldr	r0, [pc, #376]	; (80108ec <_printf_i+0x244>)
 8010772:	230a      	movs	r3, #10
 8010774:	e019      	b.n	80107aa <_printf_i+0x102>
 8010776:	f015 0f40 	tst.w	r5, #64	; 0x40
 801077a:	6805      	ldr	r5, [r0, #0]
 801077c:	600b      	str	r3, [r1, #0]
 801077e:	bf18      	it	ne
 8010780:	b22d      	sxthne	r5, r5
 8010782:	e7ef      	b.n	8010764 <_printf_i+0xbc>
 8010784:	680b      	ldr	r3, [r1, #0]
 8010786:	6825      	ldr	r5, [r4, #0]
 8010788:	1d18      	adds	r0, r3, #4
 801078a:	6008      	str	r0, [r1, #0]
 801078c:	0628      	lsls	r0, r5, #24
 801078e:	d501      	bpl.n	8010794 <_printf_i+0xec>
 8010790:	681d      	ldr	r5, [r3, #0]
 8010792:	e002      	b.n	801079a <_printf_i+0xf2>
 8010794:	0669      	lsls	r1, r5, #25
 8010796:	d5fb      	bpl.n	8010790 <_printf_i+0xe8>
 8010798:	881d      	ldrh	r5, [r3, #0]
 801079a:	4854      	ldr	r0, [pc, #336]	; (80108ec <_printf_i+0x244>)
 801079c:	2f6f      	cmp	r7, #111	; 0x6f
 801079e:	bf0c      	ite	eq
 80107a0:	2308      	moveq	r3, #8
 80107a2:	230a      	movne	r3, #10
 80107a4:	2100      	movs	r1, #0
 80107a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107aa:	6866      	ldr	r6, [r4, #4]
 80107ac:	60a6      	str	r6, [r4, #8]
 80107ae:	2e00      	cmp	r6, #0
 80107b0:	bfa2      	ittt	ge
 80107b2:	6821      	ldrge	r1, [r4, #0]
 80107b4:	f021 0104 	bicge.w	r1, r1, #4
 80107b8:	6021      	strge	r1, [r4, #0]
 80107ba:	b90d      	cbnz	r5, 80107c0 <_printf_i+0x118>
 80107bc:	2e00      	cmp	r6, #0
 80107be:	d04d      	beq.n	801085c <_printf_i+0x1b4>
 80107c0:	4616      	mov	r6, r2
 80107c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80107c6:	fb03 5711 	mls	r7, r3, r1, r5
 80107ca:	5dc7      	ldrb	r7, [r0, r7]
 80107cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80107d0:	462f      	mov	r7, r5
 80107d2:	42bb      	cmp	r3, r7
 80107d4:	460d      	mov	r5, r1
 80107d6:	d9f4      	bls.n	80107c2 <_printf_i+0x11a>
 80107d8:	2b08      	cmp	r3, #8
 80107da:	d10b      	bne.n	80107f4 <_printf_i+0x14c>
 80107dc:	6823      	ldr	r3, [r4, #0]
 80107de:	07df      	lsls	r7, r3, #31
 80107e0:	d508      	bpl.n	80107f4 <_printf_i+0x14c>
 80107e2:	6923      	ldr	r3, [r4, #16]
 80107e4:	6861      	ldr	r1, [r4, #4]
 80107e6:	4299      	cmp	r1, r3
 80107e8:	bfde      	ittt	le
 80107ea:	2330      	movle	r3, #48	; 0x30
 80107ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80107f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80107f4:	1b92      	subs	r2, r2, r6
 80107f6:	6122      	str	r2, [r4, #16]
 80107f8:	f8cd a000 	str.w	sl, [sp]
 80107fc:	464b      	mov	r3, r9
 80107fe:	aa03      	add	r2, sp, #12
 8010800:	4621      	mov	r1, r4
 8010802:	4640      	mov	r0, r8
 8010804:	f7ff fee2 	bl	80105cc <_printf_common>
 8010808:	3001      	adds	r0, #1
 801080a:	d14c      	bne.n	80108a6 <_printf_i+0x1fe>
 801080c:	f04f 30ff 	mov.w	r0, #4294967295
 8010810:	b004      	add	sp, #16
 8010812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010816:	4835      	ldr	r0, [pc, #212]	; (80108ec <_printf_i+0x244>)
 8010818:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	680e      	ldr	r6, [r1, #0]
 8010820:	061f      	lsls	r7, r3, #24
 8010822:	f856 5b04 	ldr.w	r5, [r6], #4
 8010826:	600e      	str	r6, [r1, #0]
 8010828:	d514      	bpl.n	8010854 <_printf_i+0x1ac>
 801082a:	07d9      	lsls	r1, r3, #31
 801082c:	bf44      	itt	mi
 801082e:	f043 0320 	orrmi.w	r3, r3, #32
 8010832:	6023      	strmi	r3, [r4, #0]
 8010834:	b91d      	cbnz	r5, 801083e <_printf_i+0x196>
 8010836:	6823      	ldr	r3, [r4, #0]
 8010838:	f023 0320 	bic.w	r3, r3, #32
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	2310      	movs	r3, #16
 8010840:	e7b0      	b.n	80107a4 <_printf_i+0xfc>
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	f043 0320 	orr.w	r3, r3, #32
 8010848:	6023      	str	r3, [r4, #0]
 801084a:	2378      	movs	r3, #120	; 0x78
 801084c:	4828      	ldr	r0, [pc, #160]	; (80108f0 <_printf_i+0x248>)
 801084e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010852:	e7e3      	b.n	801081c <_printf_i+0x174>
 8010854:	065e      	lsls	r6, r3, #25
 8010856:	bf48      	it	mi
 8010858:	b2ad      	uxthmi	r5, r5
 801085a:	e7e6      	b.n	801082a <_printf_i+0x182>
 801085c:	4616      	mov	r6, r2
 801085e:	e7bb      	b.n	80107d8 <_printf_i+0x130>
 8010860:	680b      	ldr	r3, [r1, #0]
 8010862:	6826      	ldr	r6, [r4, #0]
 8010864:	6960      	ldr	r0, [r4, #20]
 8010866:	1d1d      	adds	r5, r3, #4
 8010868:	600d      	str	r5, [r1, #0]
 801086a:	0635      	lsls	r5, r6, #24
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	d501      	bpl.n	8010874 <_printf_i+0x1cc>
 8010870:	6018      	str	r0, [r3, #0]
 8010872:	e002      	b.n	801087a <_printf_i+0x1d2>
 8010874:	0671      	lsls	r1, r6, #25
 8010876:	d5fb      	bpl.n	8010870 <_printf_i+0x1c8>
 8010878:	8018      	strh	r0, [r3, #0]
 801087a:	2300      	movs	r3, #0
 801087c:	6123      	str	r3, [r4, #16]
 801087e:	4616      	mov	r6, r2
 8010880:	e7ba      	b.n	80107f8 <_printf_i+0x150>
 8010882:	680b      	ldr	r3, [r1, #0]
 8010884:	1d1a      	adds	r2, r3, #4
 8010886:	600a      	str	r2, [r1, #0]
 8010888:	681e      	ldr	r6, [r3, #0]
 801088a:	6862      	ldr	r2, [r4, #4]
 801088c:	2100      	movs	r1, #0
 801088e:	4630      	mov	r0, r6
 8010890:	f7ef fd2e 	bl	80002f0 <memchr>
 8010894:	b108      	cbz	r0, 801089a <_printf_i+0x1f2>
 8010896:	1b80      	subs	r0, r0, r6
 8010898:	6060      	str	r0, [r4, #4]
 801089a:	6863      	ldr	r3, [r4, #4]
 801089c:	6123      	str	r3, [r4, #16]
 801089e:	2300      	movs	r3, #0
 80108a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108a4:	e7a8      	b.n	80107f8 <_printf_i+0x150>
 80108a6:	6923      	ldr	r3, [r4, #16]
 80108a8:	4632      	mov	r2, r6
 80108aa:	4649      	mov	r1, r9
 80108ac:	4640      	mov	r0, r8
 80108ae:	47d0      	blx	sl
 80108b0:	3001      	adds	r0, #1
 80108b2:	d0ab      	beq.n	801080c <_printf_i+0x164>
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	079b      	lsls	r3, r3, #30
 80108b8:	d413      	bmi.n	80108e2 <_printf_i+0x23a>
 80108ba:	68e0      	ldr	r0, [r4, #12]
 80108bc:	9b03      	ldr	r3, [sp, #12]
 80108be:	4298      	cmp	r0, r3
 80108c0:	bfb8      	it	lt
 80108c2:	4618      	movlt	r0, r3
 80108c4:	e7a4      	b.n	8010810 <_printf_i+0x168>
 80108c6:	2301      	movs	r3, #1
 80108c8:	4632      	mov	r2, r6
 80108ca:	4649      	mov	r1, r9
 80108cc:	4640      	mov	r0, r8
 80108ce:	47d0      	blx	sl
 80108d0:	3001      	adds	r0, #1
 80108d2:	d09b      	beq.n	801080c <_printf_i+0x164>
 80108d4:	3501      	adds	r5, #1
 80108d6:	68e3      	ldr	r3, [r4, #12]
 80108d8:	9903      	ldr	r1, [sp, #12]
 80108da:	1a5b      	subs	r3, r3, r1
 80108dc:	42ab      	cmp	r3, r5
 80108de:	dcf2      	bgt.n	80108c6 <_printf_i+0x21e>
 80108e0:	e7eb      	b.n	80108ba <_printf_i+0x212>
 80108e2:	2500      	movs	r5, #0
 80108e4:	f104 0619 	add.w	r6, r4, #25
 80108e8:	e7f5      	b.n	80108d6 <_printf_i+0x22e>
 80108ea:	bf00      	nop
 80108ec:	08014366 	.word	0x08014366
 80108f0:	08014377 	.word	0x08014377

080108f4 <quorem>:
 80108f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f8:	6903      	ldr	r3, [r0, #16]
 80108fa:	690c      	ldr	r4, [r1, #16]
 80108fc:	42a3      	cmp	r3, r4
 80108fe:	4607      	mov	r7, r0
 8010900:	f2c0 8081 	blt.w	8010a06 <quorem+0x112>
 8010904:	3c01      	subs	r4, #1
 8010906:	f101 0814 	add.w	r8, r1, #20
 801090a:	f100 0514 	add.w	r5, r0, #20
 801090e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010912:	9301      	str	r3, [sp, #4]
 8010914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801091c:	3301      	adds	r3, #1
 801091e:	429a      	cmp	r2, r3
 8010920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010928:	fbb2 f6f3 	udiv	r6, r2, r3
 801092c:	d331      	bcc.n	8010992 <quorem+0x9e>
 801092e:	f04f 0e00 	mov.w	lr, #0
 8010932:	4640      	mov	r0, r8
 8010934:	46ac      	mov	ip, r5
 8010936:	46f2      	mov	sl, lr
 8010938:	f850 2b04 	ldr.w	r2, [r0], #4
 801093c:	b293      	uxth	r3, r2
 801093e:	fb06 e303 	mla	r3, r6, r3, lr
 8010942:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010946:	b29b      	uxth	r3, r3
 8010948:	ebaa 0303 	sub.w	r3, sl, r3
 801094c:	0c12      	lsrs	r2, r2, #16
 801094e:	f8dc a000 	ldr.w	sl, [ip]
 8010952:	fb06 e202 	mla	r2, r6, r2, lr
 8010956:	fa13 f38a 	uxtah	r3, r3, sl
 801095a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801095e:	fa1f fa82 	uxth.w	sl, r2
 8010962:	f8dc 2000 	ldr.w	r2, [ip]
 8010966:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801096a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801096e:	b29b      	uxth	r3, r3
 8010970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010974:	4581      	cmp	r9, r0
 8010976:	f84c 3b04 	str.w	r3, [ip], #4
 801097a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801097e:	d2db      	bcs.n	8010938 <quorem+0x44>
 8010980:	f855 300b 	ldr.w	r3, [r5, fp]
 8010984:	b92b      	cbnz	r3, 8010992 <quorem+0x9e>
 8010986:	9b01      	ldr	r3, [sp, #4]
 8010988:	3b04      	subs	r3, #4
 801098a:	429d      	cmp	r5, r3
 801098c:	461a      	mov	r2, r3
 801098e:	d32e      	bcc.n	80109ee <quorem+0xfa>
 8010990:	613c      	str	r4, [r7, #16]
 8010992:	4638      	mov	r0, r7
 8010994:	f001 f848 	bl	8011a28 <__mcmp>
 8010998:	2800      	cmp	r0, #0
 801099a:	db24      	blt.n	80109e6 <quorem+0xf2>
 801099c:	3601      	adds	r6, #1
 801099e:	4628      	mov	r0, r5
 80109a0:	f04f 0c00 	mov.w	ip, #0
 80109a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80109a8:	f8d0 e000 	ldr.w	lr, [r0]
 80109ac:	b293      	uxth	r3, r2
 80109ae:	ebac 0303 	sub.w	r3, ip, r3
 80109b2:	0c12      	lsrs	r2, r2, #16
 80109b4:	fa13 f38e 	uxtah	r3, r3, lr
 80109b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80109bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109c6:	45c1      	cmp	r9, r8
 80109c8:	f840 3b04 	str.w	r3, [r0], #4
 80109cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80109d0:	d2e8      	bcs.n	80109a4 <quorem+0xb0>
 80109d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109da:	b922      	cbnz	r2, 80109e6 <quorem+0xf2>
 80109dc:	3b04      	subs	r3, #4
 80109de:	429d      	cmp	r5, r3
 80109e0:	461a      	mov	r2, r3
 80109e2:	d30a      	bcc.n	80109fa <quorem+0x106>
 80109e4:	613c      	str	r4, [r7, #16]
 80109e6:	4630      	mov	r0, r6
 80109e8:	b003      	add	sp, #12
 80109ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ee:	6812      	ldr	r2, [r2, #0]
 80109f0:	3b04      	subs	r3, #4
 80109f2:	2a00      	cmp	r2, #0
 80109f4:	d1cc      	bne.n	8010990 <quorem+0x9c>
 80109f6:	3c01      	subs	r4, #1
 80109f8:	e7c7      	b.n	801098a <quorem+0x96>
 80109fa:	6812      	ldr	r2, [r2, #0]
 80109fc:	3b04      	subs	r3, #4
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	d1f0      	bne.n	80109e4 <quorem+0xf0>
 8010a02:	3c01      	subs	r4, #1
 8010a04:	e7eb      	b.n	80109de <quorem+0xea>
 8010a06:	2000      	movs	r0, #0
 8010a08:	e7ee      	b.n	80109e8 <quorem+0xf4>
 8010a0a:	0000      	movs	r0, r0
 8010a0c:	0000      	movs	r0, r0
	...

08010a10 <_dtoa_r>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	ec59 8b10 	vmov	r8, r9, d0
 8010a18:	b095      	sub	sp, #84	; 0x54
 8010a1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010a1c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8010a1e:	9107      	str	r1, [sp, #28]
 8010a20:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010a24:	4606      	mov	r6, r0
 8010a26:	9209      	str	r2, [sp, #36]	; 0x24
 8010a28:	9310      	str	r3, [sp, #64]	; 0x40
 8010a2a:	b975      	cbnz	r5, 8010a4a <_dtoa_r+0x3a>
 8010a2c:	2010      	movs	r0, #16
 8010a2e:	f000 fd75 	bl	801151c <malloc>
 8010a32:	4602      	mov	r2, r0
 8010a34:	6270      	str	r0, [r6, #36]	; 0x24
 8010a36:	b920      	cbnz	r0, 8010a42 <_dtoa_r+0x32>
 8010a38:	4bab      	ldr	r3, [pc, #684]	; (8010ce8 <_dtoa_r+0x2d8>)
 8010a3a:	21ea      	movs	r1, #234	; 0xea
 8010a3c:	48ab      	ldr	r0, [pc, #684]	; (8010cec <_dtoa_r+0x2dc>)
 8010a3e:	f001 f9bd 	bl	8011dbc <__assert_func>
 8010a42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a46:	6005      	str	r5, [r0, #0]
 8010a48:	60c5      	str	r5, [r0, #12]
 8010a4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010a4c:	6819      	ldr	r1, [r3, #0]
 8010a4e:	b151      	cbz	r1, 8010a66 <_dtoa_r+0x56>
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	604a      	str	r2, [r1, #4]
 8010a54:	2301      	movs	r3, #1
 8010a56:	4093      	lsls	r3, r2
 8010a58:	608b      	str	r3, [r1, #8]
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f000 fda6 	bl	80115ac <_Bfree>
 8010a60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010a62:	2200      	movs	r2, #0
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	f1b9 0300 	subs.w	r3, r9, #0
 8010a6a:	bfbb      	ittet	lt
 8010a6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a70:	9303      	strlt	r3, [sp, #12]
 8010a72:	2300      	movge	r3, #0
 8010a74:	2201      	movlt	r2, #1
 8010a76:	bfac      	ite	ge
 8010a78:	6023      	strge	r3, [r4, #0]
 8010a7a:	6022      	strlt	r2, [r4, #0]
 8010a7c:	4b9c      	ldr	r3, [pc, #624]	; (8010cf0 <_dtoa_r+0x2e0>)
 8010a7e:	9c03      	ldr	r4, [sp, #12]
 8010a80:	43a3      	bics	r3, r4
 8010a82:	d11a      	bne.n	8010aba <_dtoa_r+0xaa>
 8010a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a86:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a8a:	6013      	str	r3, [r2, #0]
 8010a8c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010a90:	ea53 0308 	orrs.w	r3, r3, r8
 8010a94:	f000 8512 	beq.w	80114bc <_dtoa_r+0xaac>
 8010a98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a9a:	b953      	cbnz	r3, 8010ab2 <_dtoa_r+0xa2>
 8010a9c:	4b95      	ldr	r3, [pc, #596]	; (8010cf4 <_dtoa_r+0x2e4>)
 8010a9e:	e01f      	b.n	8010ae0 <_dtoa_r+0xd0>
 8010aa0:	4b95      	ldr	r3, [pc, #596]	; (8010cf8 <_dtoa_r+0x2e8>)
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	3308      	adds	r3, #8
 8010aa6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	9800      	ldr	r0, [sp, #0]
 8010aac:	b015      	add	sp, #84	; 0x54
 8010aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab2:	4b90      	ldr	r3, [pc, #576]	; (8010cf4 <_dtoa_r+0x2e4>)
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	3303      	adds	r3, #3
 8010ab8:	e7f5      	b.n	8010aa6 <_dtoa_r+0x96>
 8010aba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010abe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010aca:	d10b      	bne.n	8010ae4 <_dtoa_r+0xd4>
 8010acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ace:	2301      	movs	r3, #1
 8010ad0:	6013      	str	r3, [r2, #0]
 8010ad2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 84ee 	beq.w	80114b6 <_dtoa_r+0xaa6>
 8010ada:	4888      	ldr	r0, [pc, #544]	; (8010cfc <_dtoa_r+0x2ec>)
 8010adc:	6018      	str	r0, [r3, #0]
 8010ade:	1e43      	subs	r3, r0, #1
 8010ae0:	9300      	str	r3, [sp, #0]
 8010ae2:	e7e2      	b.n	8010aaa <_dtoa_r+0x9a>
 8010ae4:	a913      	add	r1, sp, #76	; 0x4c
 8010ae6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010aea:	aa12      	add	r2, sp, #72	; 0x48
 8010aec:	4630      	mov	r0, r6
 8010aee:	f001 f83f 	bl	8011b70 <__d2b>
 8010af2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010af6:	4605      	mov	r5, r0
 8010af8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010afa:	2900      	cmp	r1, #0
 8010afc:	d047      	beq.n	8010b8e <_dtoa_r+0x17e>
 8010afe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010b00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010b04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b08:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010b0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010b10:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010b14:	2400      	movs	r4, #0
 8010b16:	ec43 2b16 	vmov	d6, r2, r3
 8010b1a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010b1e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010cd0 <_dtoa_r+0x2c0>
 8010b22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010b26:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010cd8 <_dtoa_r+0x2c8>
 8010b2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010b2e:	eeb0 7b46 	vmov.f64	d7, d6
 8010b32:	ee06 1a90 	vmov	s13, r1
 8010b36:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8010b3a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010ce0 <_dtoa_r+0x2d0>
 8010b3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010b42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010b46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4e:	ee16 ba90 	vmov	fp, s13
 8010b52:	9411      	str	r4, [sp, #68]	; 0x44
 8010b54:	d508      	bpl.n	8010b68 <_dtoa_r+0x158>
 8010b56:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010b5a:	eeb4 6b47 	vcmp.f64	d6, d7
 8010b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b62:	bf18      	it	ne
 8010b64:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010b68:	f1bb 0f16 	cmp.w	fp, #22
 8010b6c:	d832      	bhi.n	8010bd4 <_dtoa_r+0x1c4>
 8010b6e:	4b64      	ldr	r3, [pc, #400]	; (8010d00 <_dtoa_r+0x2f0>)
 8010b70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b74:	ed93 7b00 	vldr	d7, [r3]
 8010b78:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010b7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b84:	d501      	bpl.n	8010b8a <_dtoa_r+0x17a>
 8010b86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	e023      	b.n	8010bd6 <_dtoa_r+0x1c6>
 8010b8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010b90:	4401      	add	r1, r0
 8010b92:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010b96:	2b20      	cmp	r3, #32
 8010b98:	bfc3      	ittte	gt
 8010b9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b9e:	fa04 f303 	lslgt.w	r3, r4, r3
 8010ba2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010ba6:	f1c3 0320 	rsble	r3, r3, #32
 8010baa:	bfc6      	itte	gt
 8010bac:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010bb0:	ea43 0308 	orrgt.w	r3, r3, r8
 8010bb4:	fa08 f303 	lslle.w	r3, r8, r3
 8010bb8:	ee07 3a90 	vmov	s15, r3
 8010bbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010bc0:	3901      	subs	r1, #1
 8010bc2:	ed8d 7b00 	vstr	d7, [sp]
 8010bc6:	9c01      	ldr	r4, [sp, #4]
 8010bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bcc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010bd0:	2401      	movs	r4, #1
 8010bd2:	e7a0      	b.n	8010b16 <_dtoa_r+0x106>
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010bd8:	1a43      	subs	r3, r0, r1
 8010bda:	1e5a      	subs	r2, r3, #1
 8010bdc:	bf45      	ittet	mi
 8010bde:	f1c3 0301 	rsbmi	r3, r3, #1
 8010be2:	9305      	strmi	r3, [sp, #20]
 8010be4:	2300      	movpl	r3, #0
 8010be6:	2300      	movmi	r3, #0
 8010be8:	9206      	str	r2, [sp, #24]
 8010bea:	bf54      	ite	pl
 8010bec:	9305      	strpl	r3, [sp, #20]
 8010bee:	9306      	strmi	r3, [sp, #24]
 8010bf0:	f1bb 0f00 	cmp.w	fp, #0
 8010bf4:	db18      	blt.n	8010c28 <_dtoa_r+0x218>
 8010bf6:	9b06      	ldr	r3, [sp, #24]
 8010bf8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010bfc:	445b      	add	r3, fp
 8010bfe:	9306      	str	r3, [sp, #24]
 8010c00:	2300      	movs	r3, #0
 8010c02:	9a07      	ldr	r2, [sp, #28]
 8010c04:	2a09      	cmp	r2, #9
 8010c06:	d849      	bhi.n	8010c9c <_dtoa_r+0x28c>
 8010c08:	2a05      	cmp	r2, #5
 8010c0a:	bfc4      	itt	gt
 8010c0c:	3a04      	subgt	r2, #4
 8010c0e:	9207      	strgt	r2, [sp, #28]
 8010c10:	9a07      	ldr	r2, [sp, #28]
 8010c12:	f1a2 0202 	sub.w	r2, r2, #2
 8010c16:	bfcc      	ite	gt
 8010c18:	2400      	movgt	r4, #0
 8010c1a:	2401      	movle	r4, #1
 8010c1c:	2a03      	cmp	r2, #3
 8010c1e:	d848      	bhi.n	8010cb2 <_dtoa_r+0x2a2>
 8010c20:	e8df f002 	tbb	[pc, r2]
 8010c24:	3a2c2e0b 	.word	0x3a2c2e0b
 8010c28:	9b05      	ldr	r3, [sp, #20]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	eba3 030b 	sub.w	r3, r3, fp
 8010c30:	9305      	str	r3, [sp, #20]
 8010c32:	920e      	str	r2, [sp, #56]	; 0x38
 8010c34:	f1cb 0300 	rsb	r3, fp, #0
 8010c38:	e7e3      	b.n	8010c02 <_dtoa_r+0x1f2>
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	9208      	str	r2, [sp, #32]
 8010c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c40:	2a00      	cmp	r2, #0
 8010c42:	dc39      	bgt.n	8010cb8 <_dtoa_r+0x2a8>
 8010c44:	f04f 0a01 	mov.w	sl, #1
 8010c48:	46d1      	mov	r9, sl
 8010c4a:	4652      	mov	r2, sl
 8010c4c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010c50:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010c52:	2100      	movs	r1, #0
 8010c54:	6079      	str	r1, [r7, #4]
 8010c56:	2004      	movs	r0, #4
 8010c58:	f100 0c14 	add.w	ip, r0, #20
 8010c5c:	4594      	cmp	ip, r2
 8010c5e:	6879      	ldr	r1, [r7, #4]
 8010c60:	d92f      	bls.n	8010cc2 <_dtoa_r+0x2b2>
 8010c62:	4630      	mov	r0, r6
 8010c64:	930c      	str	r3, [sp, #48]	; 0x30
 8010c66:	f000 fc61 	bl	801152c <_Balloc>
 8010c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c6c:	9000      	str	r0, [sp, #0]
 8010c6e:	4602      	mov	r2, r0
 8010c70:	2800      	cmp	r0, #0
 8010c72:	d149      	bne.n	8010d08 <_dtoa_r+0x2f8>
 8010c74:	4b23      	ldr	r3, [pc, #140]	; (8010d04 <_dtoa_r+0x2f4>)
 8010c76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c7a:	e6df      	b.n	8010a3c <_dtoa_r+0x2c>
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	e7dd      	b.n	8010c3c <_dtoa_r+0x22c>
 8010c80:	2200      	movs	r2, #0
 8010c82:	9208      	str	r2, [sp, #32]
 8010c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c86:	eb0b 0a02 	add.w	sl, fp, r2
 8010c8a:	f10a 0901 	add.w	r9, sl, #1
 8010c8e:	464a      	mov	r2, r9
 8010c90:	2a01      	cmp	r2, #1
 8010c92:	bfb8      	it	lt
 8010c94:	2201      	movlt	r2, #1
 8010c96:	e7db      	b.n	8010c50 <_dtoa_r+0x240>
 8010c98:	2201      	movs	r2, #1
 8010c9a:	e7f2      	b.n	8010c82 <_dtoa_r+0x272>
 8010c9c:	2401      	movs	r4, #1
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010ca4:	f04f 3aff 	mov.w	sl, #4294967295
 8010ca8:	2100      	movs	r1, #0
 8010caa:	46d1      	mov	r9, sl
 8010cac:	2212      	movs	r2, #18
 8010cae:	9109      	str	r1, [sp, #36]	; 0x24
 8010cb0:	e7ce      	b.n	8010c50 <_dtoa_r+0x240>
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	9208      	str	r2, [sp, #32]
 8010cb6:	e7f5      	b.n	8010ca4 <_dtoa_r+0x294>
 8010cb8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010cbc:	46d1      	mov	r9, sl
 8010cbe:	4652      	mov	r2, sl
 8010cc0:	e7c6      	b.n	8010c50 <_dtoa_r+0x240>
 8010cc2:	3101      	adds	r1, #1
 8010cc4:	6079      	str	r1, [r7, #4]
 8010cc6:	0040      	lsls	r0, r0, #1
 8010cc8:	e7c6      	b.n	8010c58 <_dtoa_r+0x248>
 8010cca:	bf00      	nop
 8010ccc:	f3af 8000 	nop.w
 8010cd0:	636f4361 	.word	0x636f4361
 8010cd4:	3fd287a7 	.word	0x3fd287a7
 8010cd8:	8b60c8b3 	.word	0x8b60c8b3
 8010cdc:	3fc68a28 	.word	0x3fc68a28
 8010ce0:	509f79fb 	.word	0x509f79fb
 8010ce4:	3fd34413 	.word	0x3fd34413
 8010ce8:	08014395 	.word	0x08014395
 8010cec:	080143ac 	.word	0x080143ac
 8010cf0:	7ff00000 	.word	0x7ff00000
 8010cf4:	08014391 	.word	0x08014391
 8010cf8:	08014388 	.word	0x08014388
 8010cfc:	08014365 	.word	0x08014365
 8010d00:	080144a8 	.word	0x080144a8
 8010d04:	0801440b 	.word	0x0801440b
 8010d08:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010d0a:	9900      	ldr	r1, [sp, #0]
 8010d0c:	6011      	str	r1, [r2, #0]
 8010d0e:	f1b9 0f0e 	cmp.w	r9, #14
 8010d12:	d872      	bhi.n	8010dfa <_dtoa_r+0x3ea>
 8010d14:	2c00      	cmp	r4, #0
 8010d16:	d070      	beq.n	8010dfa <_dtoa_r+0x3ea>
 8010d18:	f1bb 0f00 	cmp.w	fp, #0
 8010d1c:	f340 80a6 	ble.w	8010e6c <_dtoa_r+0x45c>
 8010d20:	49ca      	ldr	r1, [pc, #808]	; (801104c <_dtoa_r+0x63c>)
 8010d22:	f00b 020f 	and.w	r2, fp, #15
 8010d26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010d2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010d2e:	ed92 7b00 	vldr	d7, [r2]
 8010d32:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010d36:	f000 808d 	beq.w	8010e54 <_dtoa_r+0x444>
 8010d3a:	4ac5      	ldr	r2, [pc, #788]	; (8011050 <_dtoa_r+0x640>)
 8010d3c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010d40:	ed92 6b08 	vldr	d6, [r2, #32]
 8010d44:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010d48:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010d4c:	f001 010f 	and.w	r1, r1, #15
 8010d50:	2203      	movs	r2, #3
 8010d52:	48bf      	ldr	r0, [pc, #764]	; (8011050 <_dtoa_r+0x640>)
 8010d54:	2900      	cmp	r1, #0
 8010d56:	d17f      	bne.n	8010e58 <_dtoa_r+0x448>
 8010d58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d5c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010d60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010d66:	2900      	cmp	r1, #0
 8010d68:	f000 80b2 	beq.w	8010ed0 <_dtoa_r+0x4c0>
 8010d6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7c:	f140 80a8 	bpl.w	8010ed0 <_dtoa_r+0x4c0>
 8010d80:	f1b9 0f00 	cmp.w	r9, #0
 8010d84:	f000 80a4 	beq.w	8010ed0 <_dtoa_r+0x4c0>
 8010d88:	f1ba 0f00 	cmp.w	sl, #0
 8010d8c:	dd31      	ble.n	8010df2 <_dtoa_r+0x3e2>
 8010d8e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010d92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d9a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010d9e:	3201      	adds	r2, #1
 8010da0:	4650      	mov	r0, sl
 8010da2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010da6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010daa:	ee07 2a90 	vmov	s15, r2
 8010dae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010db2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010db6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010dba:	9c03      	ldr	r4, [sp, #12]
 8010dbc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010dc0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	f040 8086 	bne.w	8010ed6 <_dtoa_r+0x4c6>
 8010dca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010dce:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010dd2:	ec42 1b17 	vmov	d7, r1, r2
 8010dd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dde:	f300 8272 	bgt.w	80112c6 <_dtoa_r+0x8b6>
 8010de2:	eeb1 7b47 	vneg.f64	d7, d7
 8010de6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dee:	f100 8267 	bmi.w	80112c0 <_dtoa_r+0x8b0>
 8010df2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010df6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010dfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010dfc:	2a00      	cmp	r2, #0
 8010dfe:	f2c0 8129 	blt.w	8011054 <_dtoa_r+0x644>
 8010e02:	f1bb 0f0e 	cmp.w	fp, #14
 8010e06:	f300 8125 	bgt.w	8011054 <_dtoa_r+0x644>
 8010e0a:	4b90      	ldr	r3, [pc, #576]	; (801104c <_dtoa_r+0x63c>)
 8010e0c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e10:	ed93 6b00 	vldr	d6, [r3]
 8010e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f280 80c3 	bge.w	8010fa2 <_dtoa_r+0x592>
 8010e1c:	f1b9 0f00 	cmp.w	r9, #0
 8010e20:	f300 80bf 	bgt.w	8010fa2 <_dtoa_r+0x592>
 8010e24:	f040 824c 	bne.w	80112c0 <_dtoa_r+0x8b0>
 8010e28:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010e2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e3c:	464c      	mov	r4, r9
 8010e3e:	464f      	mov	r7, r9
 8010e40:	f280 8222 	bge.w	8011288 <_dtoa_r+0x878>
 8010e44:	f8dd 8000 	ldr.w	r8, [sp]
 8010e48:	2331      	movs	r3, #49	; 0x31
 8010e4a:	f808 3b01 	strb.w	r3, [r8], #1
 8010e4e:	f10b 0b01 	add.w	fp, fp, #1
 8010e52:	e21e      	b.n	8011292 <_dtoa_r+0x882>
 8010e54:	2202      	movs	r2, #2
 8010e56:	e77c      	b.n	8010d52 <_dtoa_r+0x342>
 8010e58:	07cc      	lsls	r4, r1, #31
 8010e5a:	d504      	bpl.n	8010e66 <_dtoa_r+0x456>
 8010e5c:	ed90 6b00 	vldr	d6, [r0]
 8010e60:	3201      	adds	r2, #1
 8010e62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e66:	1049      	asrs	r1, r1, #1
 8010e68:	3008      	adds	r0, #8
 8010e6a:	e773      	b.n	8010d54 <_dtoa_r+0x344>
 8010e6c:	d02e      	beq.n	8010ecc <_dtoa_r+0x4bc>
 8010e6e:	f1cb 0100 	rsb	r1, fp, #0
 8010e72:	4a76      	ldr	r2, [pc, #472]	; (801104c <_dtoa_r+0x63c>)
 8010e74:	f001 000f 	and.w	r0, r1, #15
 8010e78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010e7c:	ed92 7b00 	vldr	d7, [r2]
 8010e80:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010e84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010e88:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010e8c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010e90:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010e94:	486e      	ldr	r0, [pc, #440]	; (8011050 <_dtoa_r+0x640>)
 8010e96:	1109      	asrs	r1, r1, #4
 8010e98:	2400      	movs	r4, #0
 8010e9a:	2202      	movs	r2, #2
 8010e9c:	b939      	cbnz	r1, 8010eae <_dtoa_r+0x49e>
 8010e9e:	2c00      	cmp	r4, #0
 8010ea0:	f43f af60 	beq.w	8010d64 <_dtoa_r+0x354>
 8010ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eac:	e75a      	b.n	8010d64 <_dtoa_r+0x354>
 8010eae:	07cf      	lsls	r7, r1, #31
 8010eb0:	d509      	bpl.n	8010ec6 <_dtoa_r+0x4b6>
 8010eb2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010eb6:	ed90 7b00 	vldr	d7, [r0]
 8010eba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010ebe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010ec2:	3201      	adds	r2, #1
 8010ec4:	2401      	movs	r4, #1
 8010ec6:	1049      	asrs	r1, r1, #1
 8010ec8:	3008      	adds	r0, #8
 8010eca:	e7e7      	b.n	8010e9c <_dtoa_r+0x48c>
 8010ecc:	2202      	movs	r2, #2
 8010ece:	e749      	b.n	8010d64 <_dtoa_r+0x354>
 8010ed0:	465f      	mov	r7, fp
 8010ed2:	4648      	mov	r0, r9
 8010ed4:	e765      	b.n	8010da2 <_dtoa_r+0x392>
 8010ed6:	ec42 1b17 	vmov	d7, r1, r2
 8010eda:	4a5c      	ldr	r2, [pc, #368]	; (801104c <_dtoa_r+0x63c>)
 8010edc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010ee0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010ee4:	9a00      	ldr	r2, [sp, #0]
 8010ee6:	1814      	adds	r4, r2, r0
 8010ee8:	9a08      	ldr	r2, [sp, #32]
 8010eea:	b352      	cbz	r2, 8010f42 <_dtoa_r+0x532>
 8010eec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010ef0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010ef4:	f8dd 8000 	ldr.w	r8, [sp]
 8010ef8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010efc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010f00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010f04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f08:	ee14 2a90 	vmov	r2, s9
 8010f0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f10:	3230      	adds	r2, #48	; 0x30
 8010f12:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1e:	f808 2b01 	strb.w	r2, [r8], #1
 8010f22:	d439      	bmi.n	8010f98 <_dtoa_r+0x588>
 8010f24:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010f28:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f30:	d472      	bmi.n	8011018 <_dtoa_r+0x608>
 8010f32:	45a0      	cmp	r8, r4
 8010f34:	f43f af5d 	beq.w	8010df2 <_dtoa_r+0x3e2>
 8010f38:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010f3c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f40:	e7e0      	b.n	8010f04 <_dtoa_r+0x4f4>
 8010f42:	f8dd 8000 	ldr.w	r8, [sp]
 8010f46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f4a:	4621      	mov	r1, r4
 8010f4c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010f50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f54:	ee14 2a90 	vmov	r2, s9
 8010f58:	3230      	adds	r2, #48	; 0x30
 8010f5a:	f808 2b01 	strb.w	r2, [r8], #1
 8010f5e:	45a0      	cmp	r8, r4
 8010f60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f68:	d118      	bne.n	8010f9c <_dtoa_r+0x58c>
 8010f6a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010f6e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010f72:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7a:	dc4d      	bgt.n	8011018 <_dtoa_r+0x608>
 8010f7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010f80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f88:	f57f af33 	bpl.w	8010df2 <_dtoa_r+0x3e2>
 8010f8c:	4688      	mov	r8, r1
 8010f8e:	3901      	subs	r1, #1
 8010f90:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010f94:	2b30      	cmp	r3, #48	; 0x30
 8010f96:	d0f9      	beq.n	8010f8c <_dtoa_r+0x57c>
 8010f98:	46bb      	mov	fp, r7
 8010f9a:	e02a      	b.n	8010ff2 <_dtoa_r+0x5e2>
 8010f9c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010fa0:	e7d6      	b.n	8010f50 <_dtoa_r+0x540>
 8010fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fa6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010faa:	f8dd 8000 	ldr.w	r8, [sp]
 8010fae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010fb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010fb6:	ee15 3a10 	vmov	r3, s10
 8010fba:	3330      	adds	r3, #48	; 0x30
 8010fbc:	f808 3b01 	strb.w	r3, [r8], #1
 8010fc0:	9b00      	ldr	r3, [sp, #0]
 8010fc2:	eba8 0303 	sub.w	r3, r8, r3
 8010fc6:	4599      	cmp	r9, r3
 8010fc8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010fcc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010fd0:	d133      	bne.n	801103a <_dtoa_r+0x62a>
 8010fd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010fd6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fde:	dc1a      	bgt.n	8011016 <_dtoa_r+0x606>
 8010fe0:	eeb4 7b46 	vcmp.f64	d7, d6
 8010fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe8:	d103      	bne.n	8010ff2 <_dtoa_r+0x5e2>
 8010fea:	ee15 3a10 	vmov	r3, s10
 8010fee:	07d9      	lsls	r1, r3, #31
 8010ff0:	d411      	bmi.n	8011016 <_dtoa_r+0x606>
 8010ff2:	4629      	mov	r1, r5
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	f000 fad9 	bl	80115ac <_Bfree>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ffe:	f888 3000 	strb.w	r3, [r8]
 8011002:	f10b 0301 	add.w	r3, fp, #1
 8011006:	6013      	str	r3, [r2, #0]
 8011008:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801100a:	2b00      	cmp	r3, #0
 801100c:	f43f ad4d 	beq.w	8010aaa <_dtoa_r+0x9a>
 8011010:	f8c3 8000 	str.w	r8, [r3]
 8011014:	e549      	b.n	8010aaa <_dtoa_r+0x9a>
 8011016:	465f      	mov	r7, fp
 8011018:	4643      	mov	r3, r8
 801101a:	4698      	mov	r8, r3
 801101c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011020:	2a39      	cmp	r2, #57	; 0x39
 8011022:	d106      	bne.n	8011032 <_dtoa_r+0x622>
 8011024:	9a00      	ldr	r2, [sp, #0]
 8011026:	429a      	cmp	r2, r3
 8011028:	d1f7      	bne.n	801101a <_dtoa_r+0x60a>
 801102a:	9900      	ldr	r1, [sp, #0]
 801102c:	2230      	movs	r2, #48	; 0x30
 801102e:	3701      	adds	r7, #1
 8011030:	700a      	strb	r2, [r1, #0]
 8011032:	781a      	ldrb	r2, [r3, #0]
 8011034:	3201      	adds	r2, #1
 8011036:	701a      	strb	r2, [r3, #0]
 8011038:	e7ae      	b.n	8010f98 <_dtoa_r+0x588>
 801103a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801103e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011046:	d1b2      	bne.n	8010fae <_dtoa_r+0x59e>
 8011048:	e7d3      	b.n	8010ff2 <_dtoa_r+0x5e2>
 801104a:	bf00      	nop
 801104c:	080144a8 	.word	0x080144a8
 8011050:	08014480 	.word	0x08014480
 8011054:	9908      	ldr	r1, [sp, #32]
 8011056:	2900      	cmp	r1, #0
 8011058:	f000 80d1 	beq.w	80111fe <_dtoa_r+0x7ee>
 801105c:	9907      	ldr	r1, [sp, #28]
 801105e:	2901      	cmp	r1, #1
 8011060:	f300 80b4 	bgt.w	80111cc <_dtoa_r+0x7bc>
 8011064:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011066:	2900      	cmp	r1, #0
 8011068:	f000 80ac 	beq.w	80111c4 <_dtoa_r+0x7b4>
 801106c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011070:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011074:	461c      	mov	r4, r3
 8011076:	930a      	str	r3, [sp, #40]	; 0x28
 8011078:	9b05      	ldr	r3, [sp, #20]
 801107a:	4413      	add	r3, r2
 801107c:	9305      	str	r3, [sp, #20]
 801107e:	9b06      	ldr	r3, [sp, #24]
 8011080:	2101      	movs	r1, #1
 8011082:	4413      	add	r3, r2
 8011084:	4630      	mov	r0, r6
 8011086:	9306      	str	r3, [sp, #24]
 8011088:	f000 fb4c 	bl	8011724 <__i2b>
 801108c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801108e:	4607      	mov	r7, r0
 8011090:	f1b8 0f00 	cmp.w	r8, #0
 8011094:	dd0d      	ble.n	80110b2 <_dtoa_r+0x6a2>
 8011096:	9a06      	ldr	r2, [sp, #24]
 8011098:	2a00      	cmp	r2, #0
 801109a:	dd0a      	ble.n	80110b2 <_dtoa_r+0x6a2>
 801109c:	4542      	cmp	r2, r8
 801109e:	9905      	ldr	r1, [sp, #20]
 80110a0:	bfa8      	it	ge
 80110a2:	4642      	movge	r2, r8
 80110a4:	1a89      	subs	r1, r1, r2
 80110a6:	9105      	str	r1, [sp, #20]
 80110a8:	9906      	ldr	r1, [sp, #24]
 80110aa:	eba8 0802 	sub.w	r8, r8, r2
 80110ae:	1a8a      	subs	r2, r1, r2
 80110b0:	9206      	str	r2, [sp, #24]
 80110b2:	b303      	cbz	r3, 80110f6 <_dtoa_r+0x6e6>
 80110b4:	9a08      	ldr	r2, [sp, #32]
 80110b6:	2a00      	cmp	r2, #0
 80110b8:	f000 80a6 	beq.w	8011208 <_dtoa_r+0x7f8>
 80110bc:	2c00      	cmp	r4, #0
 80110be:	dd13      	ble.n	80110e8 <_dtoa_r+0x6d8>
 80110c0:	4639      	mov	r1, r7
 80110c2:	4622      	mov	r2, r4
 80110c4:	4630      	mov	r0, r6
 80110c6:	930c      	str	r3, [sp, #48]	; 0x30
 80110c8:	f000 fbe8 	bl	801189c <__pow5mult>
 80110cc:	462a      	mov	r2, r5
 80110ce:	4601      	mov	r1, r0
 80110d0:	4607      	mov	r7, r0
 80110d2:	4630      	mov	r0, r6
 80110d4:	f000 fb3c 	bl	8011750 <__multiply>
 80110d8:	4629      	mov	r1, r5
 80110da:	900a      	str	r0, [sp, #40]	; 0x28
 80110dc:	4630      	mov	r0, r6
 80110de:	f000 fa65 	bl	80115ac <_Bfree>
 80110e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110e6:	4615      	mov	r5, r2
 80110e8:	1b1a      	subs	r2, r3, r4
 80110ea:	d004      	beq.n	80110f6 <_dtoa_r+0x6e6>
 80110ec:	4629      	mov	r1, r5
 80110ee:	4630      	mov	r0, r6
 80110f0:	f000 fbd4 	bl	801189c <__pow5mult>
 80110f4:	4605      	mov	r5, r0
 80110f6:	2101      	movs	r1, #1
 80110f8:	4630      	mov	r0, r6
 80110fa:	f000 fb13 	bl	8011724 <__i2b>
 80110fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011100:	2b00      	cmp	r3, #0
 8011102:	4604      	mov	r4, r0
 8011104:	f340 8082 	ble.w	801120c <_dtoa_r+0x7fc>
 8011108:	461a      	mov	r2, r3
 801110a:	4601      	mov	r1, r0
 801110c:	4630      	mov	r0, r6
 801110e:	f000 fbc5 	bl	801189c <__pow5mult>
 8011112:	9b07      	ldr	r3, [sp, #28]
 8011114:	2b01      	cmp	r3, #1
 8011116:	4604      	mov	r4, r0
 8011118:	dd7b      	ble.n	8011212 <_dtoa_r+0x802>
 801111a:	2300      	movs	r3, #0
 801111c:	930a      	str	r3, [sp, #40]	; 0x28
 801111e:	6922      	ldr	r2, [r4, #16]
 8011120:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011124:	6910      	ldr	r0, [r2, #16]
 8011126:	f000 faad 	bl	8011684 <__hi0bits>
 801112a:	f1c0 0020 	rsb	r0, r0, #32
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	4418      	add	r0, r3
 8011132:	f010 001f 	ands.w	r0, r0, #31
 8011136:	f000 808d 	beq.w	8011254 <_dtoa_r+0x844>
 801113a:	f1c0 0220 	rsb	r2, r0, #32
 801113e:	2a04      	cmp	r2, #4
 8011140:	f340 8086 	ble.w	8011250 <_dtoa_r+0x840>
 8011144:	f1c0 001c 	rsb	r0, r0, #28
 8011148:	9b05      	ldr	r3, [sp, #20]
 801114a:	4403      	add	r3, r0
 801114c:	9305      	str	r3, [sp, #20]
 801114e:	9b06      	ldr	r3, [sp, #24]
 8011150:	4403      	add	r3, r0
 8011152:	4480      	add	r8, r0
 8011154:	9306      	str	r3, [sp, #24]
 8011156:	9b05      	ldr	r3, [sp, #20]
 8011158:	2b00      	cmp	r3, #0
 801115a:	dd05      	ble.n	8011168 <_dtoa_r+0x758>
 801115c:	4629      	mov	r1, r5
 801115e:	461a      	mov	r2, r3
 8011160:	4630      	mov	r0, r6
 8011162:	f000 fbf5 	bl	8011950 <__lshift>
 8011166:	4605      	mov	r5, r0
 8011168:	9b06      	ldr	r3, [sp, #24]
 801116a:	2b00      	cmp	r3, #0
 801116c:	dd05      	ble.n	801117a <_dtoa_r+0x76a>
 801116e:	4621      	mov	r1, r4
 8011170:	461a      	mov	r2, r3
 8011172:	4630      	mov	r0, r6
 8011174:	f000 fbec 	bl	8011950 <__lshift>
 8011178:	4604      	mov	r4, r0
 801117a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d06b      	beq.n	8011258 <_dtoa_r+0x848>
 8011180:	4621      	mov	r1, r4
 8011182:	4628      	mov	r0, r5
 8011184:	f000 fc50 	bl	8011a28 <__mcmp>
 8011188:	2800      	cmp	r0, #0
 801118a:	da65      	bge.n	8011258 <_dtoa_r+0x848>
 801118c:	2300      	movs	r3, #0
 801118e:	4629      	mov	r1, r5
 8011190:	220a      	movs	r2, #10
 8011192:	4630      	mov	r0, r6
 8011194:	f000 fa2c 	bl	80115f0 <__multadd>
 8011198:	9b08      	ldr	r3, [sp, #32]
 801119a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801119e:	4605      	mov	r5, r0
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 8192 	beq.w	80114ca <_dtoa_r+0xaba>
 80111a6:	4639      	mov	r1, r7
 80111a8:	2300      	movs	r3, #0
 80111aa:	220a      	movs	r2, #10
 80111ac:	4630      	mov	r0, r6
 80111ae:	f000 fa1f 	bl	80115f0 <__multadd>
 80111b2:	f1ba 0f00 	cmp.w	sl, #0
 80111b6:	4607      	mov	r7, r0
 80111b8:	f300 808e 	bgt.w	80112d8 <_dtoa_r+0x8c8>
 80111bc:	9b07      	ldr	r3, [sp, #28]
 80111be:	2b02      	cmp	r3, #2
 80111c0:	dc51      	bgt.n	8011266 <_dtoa_r+0x856>
 80111c2:	e089      	b.n	80112d8 <_dtoa_r+0x8c8>
 80111c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80111c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80111ca:	e751      	b.n	8011070 <_dtoa_r+0x660>
 80111cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80111d0:	42a3      	cmp	r3, r4
 80111d2:	bfbf      	itttt	lt
 80111d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80111d6:	1ae3      	sublt	r3, r4, r3
 80111d8:	18d2      	addlt	r2, r2, r3
 80111da:	4613      	movlt	r3, r2
 80111dc:	bfb7      	itett	lt
 80111de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80111e0:	1b1c      	subge	r4, r3, r4
 80111e2:	4623      	movlt	r3, r4
 80111e4:	2400      	movlt	r4, #0
 80111e6:	f1b9 0f00 	cmp.w	r9, #0
 80111ea:	bfb5      	itete	lt
 80111ec:	9a05      	ldrlt	r2, [sp, #20]
 80111ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80111f2:	eba2 0809 	sublt.w	r8, r2, r9
 80111f6:	464a      	movge	r2, r9
 80111f8:	bfb8      	it	lt
 80111fa:	2200      	movlt	r2, #0
 80111fc:	e73b      	b.n	8011076 <_dtoa_r+0x666>
 80111fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011202:	9f08      	ldr	r7, [sp, #32]
 8011204:	461c      	mov	r4, r3
 8011206:	e743      	b.n	8011090 <_dtoa_r+0x680>
 8011208:	461a      	mov	r2, r3
 801120a:	e76f      	b.n	80110ec <_dtoa_r+0x6dc>
 801120c:	9b07      	ldr	r3, [sp, #28]
 801120e:	2b01      	cmp	r3, #1
 8011210:	dc18      	bgt.n	8011244 <_dtoa_r+0x834>
 8011212:	9b02      	ldr	r3, [sp, #8]
 8011214:	b9b3      	cbnz	r3, 8011244 <_dtoa_r+0x834>
 8011216:	9b03      	ldr	r3, [sp, #12]
 8011218:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801121c:	b9a2      	cbnz	r2, 8011248 <_dtoa_r+0x838>
 801121e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011222:	0d12      	lsrs	r2, r2, #20
 8011224:	0512      	lsls	r2, r2, #20
 8011226:	b18a      	cbz	r2, 801124c <_dtoa_r+0x83c>
 8011228:	9b05      	ldr	r3, [sp, #20]
 801122a:	3301      	adds	r3, #1
 801122c:	9305      	str	r3, [sp, #20]
 801122e:	9b06      	ldr	r3, [sp, #24]
 8011230:	3301      	adds	r3, #1
 8011232:	9306      	str	r3, [sp, #24]
 8011234:	2301      	movs	r3, #1
 8011236:	930a      	str	r3, [sp, #40]	; 0x28
 8011238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801123a:	2b00      	cmp	r3, #0
 801123c:	f47f af6f 	bne.w	801111e <_dtoa_r+0x70e>
 8011240:	2001      	movs	r0, #1
 8011242:	e774      	b.n	801112e <_dtoa_r+0x71e>
 8011244:	2300      	movs	r3, #0
 8011246:	e7f6      	b.n	8011236 <_dtoa_r+0x826>
 8011248:	9b02      	ldr	r3, [sp, #8]
 801124a:	e7f4      	b.n	8011236 <_dtoa_r+0x826>
 801124c:	920a      	str	r2, [sp, #40]	; 0x28
 801124e:	e7f3      	b.n	8011238 <_dtoa_r+0x828>
 8011250:	d081      	beq.n	8011156 <_dtoa_r+0x746>
 8011252:	4610      	mov	r0, r2
 8011254:	301c      	adds	r0, #28
 8011256:	e777      	b.n	8011148 <_dtoa_r+0x738>
 8011258:	f1b9 0f00 	cmp.w	r9, #0
 801125c:	dc37      	bgt.n	80112ce <_dtoa_r+0x8be>
 801125e:	9b07      	ldr	r3, [sp, #28]
 8011260:	2b02      	cmp	r3, #2
 8011262:	dd34      	ble.n	80112ce <_dtoa_r+0x8be>
 8011264:	46ca      	mov	sl, r9
 8011266:	f1ba 0f00 	cmp.w	sl, #0
 801126a:	d10d      	bne.n	8011288 <_dtoa_r+0x878>
 801126c:	4621      	mov	r1, r4
 801126e:	4653      	mov	r3, sl
 8011270:	2205      	movs	r2, #5
 8011272:	4630      	mov	r0, r6
 8011274:	f000 f9bc 	bl	80115f0 <__multadd>
 8011278:	4601      	mov	r1, r0
 801127a:	4604      	mov	r4, r0
 801127c:	4628      	mov	r0, r5
 801127e:	f000 fbd3 	bl	8011a28 <__mcmp>
 8011282:	2800      	cmp	r0, #0
 8011284:	f73f adde 	bgt.w	8010e44 <_dtoa_r+0x434>
 8011288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801128a:	f8dd 8000 	ldr.w	r8, [sp]
 801128e:	ea6f 0b03 	mvn.w	fp, r3
 8011292:	f04f 0900 	mov.w	r9, #0
 8011296:	4621      	mov	r1, r4
 8011298:	4630      	mov	r0, r6
 801129a:	f000 f987 	bl	80115ac <_Bfree>
 801129e:	2f00      	cmp	r7, #0
 80112a0:	f43f aea7 	beq.w	8010ff2 <_dtoa_r+0x5e2>
 80112a4:	f1b9 0f00 	cmp.w	r9, #0
 80112a8:	d005      	beq.n	80112b6 <_dtoa_r+0x8a6>
 80112aa:	45b9      	cmp	r9, r7
 80112ac:	d003      	beq.n	80112b6 <_dtoa_r+0x8a6>
 80112ae:	4649      	mov	r1, r9
 80112b0:	4630      	mov	r0, r6
 80112b2:	f000 f97b 	bl	80115ac <_Bfree>
 80112b6:	4639      	mov	r1, r7
 80112b8:	4630      	mov	r0, r6
 80112ba:	f000 f977 	bl	80115ac <_Bfree>
 80112be:	e698      	b.n	8010ff2 <_dtoa_r+0x5e2>
 80112c0:	2400      	movs	r4, #0
 80112c2:	4627      	mov	r7, r4
 80112c4:	e7e0      	b.n	8011288 <_dtoa_r+0x878>
 80112c6:	46bb      	mov	fp, r7
 80112c8:	4604      	mov	r4, r0
 80112ca:	4607      	mov	r7, r0
 80112cc:	e5ba      	b.n	8010e44 <_dtoa_r+0x434>
 80112ce:	9b08      	ldr	r3, [sp, #32]
 80112d0:	46ca      	mov	sl, r9
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f000 8100 	beq.w	80114d8 <_dtoa_r+0xac8>
 80112d8:	f1b8 0f00 	cmp.w	r8, #0
 80112dc:	dd05      	ble.n	80112ea <_dtoa_r+0x8da>
 80112de:	4639      	mov	r1, r7
 80112e0:	4642      	mov	r2, r8
 80112e2:	4630      	mov	r0, r6
 80112e4:	f000 fb34 	bl	8011950 <__lshift>
 80112e8:	4607      	mov	r7, r0
 80112ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d05d      	beq.n	80113ac <_dtoa_r+0x99c>
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	4630      	mov	r0, r6
 80112f4:	f000 f91a 	bl	801152c <_Balloc>
 80112f8:	4680      	mov	r8, r0
 80112fa:	b928      	cbnz	r0, 8011308 <_dtoa_r+0x8f8>
 80112fc:	4b82      	ldr	r3, [pc, #520]	; (8011508 <_dtoa_r+0xaf8>)
 80112fe:	4602      	mov	r2, r0
 8011300:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011304:	f7ff bb9a 	b.w	8010a3c <_dtoa_r+0x2c>
 8011308:	693a      	ldr	r2, [r7, #16]
 801130a:	3202      	adds	r2, #2
 801130c:	0092      	lsls	r2, r2, #2
 801130e:	f107 010c 	add.w	r1, r7, #12
 8011312:	300c      	adds	r0, #12
 8011314:	f7fe fe96 	bl	8010044 <memcpy>
 8011318:	2201      	movs	r2, #1
 801131a:	4641      	mov	r1, r8
 801131c:	4630      	mov	r0, r6
 801131e:	f000 fb17 	bl	8011950 <__lshift>
 8011322:	9b00      	ldr	r3, [sp, #0]
 8011324:	3301      	adds	r3, #1
 8011326:	9305      	str	r3, [sp, #20]
 8011328:	9b00      	ldr	r3, [sp, #0]
 801132a:	4453      	add	r3, sl
 801132c:	9309      	str	r3, [sp, #36]	; 0x24
 801132e:	9b02      	ldr	r3, [sp, #8]
 8011330:	f003 0301 	and.w	r3, r3, #1
 8011334:	46b9      	mov	r9, r7
 8011336:	9308      	str	r3, [sp, #32]
 8011338:	4607      	mov	r7, r0
 801133a:	9b05      	ldr	r3, [sp, #20]
 801133c:	4621      	mov	r1, r4
 801133e:	3b01      	subs	r3, #1
 8011340:	4628      	mov	r0, r5
 8011342:	9302      	str	r3, [sp, #8]
 8011344:	f7ff fad6 	bl	80108f4 <quorem>
 8011348:	4603      	mov	r3, r0
 801134a:	3330      	adds	r3, #48	; 0x30
 801134c:	9006      	str	r0, [sp, #24]
 801134e:	4649      	mov	r1, r9
 8011350:	4628      	mov	r0, r5
 8011352:	930a      	str	r3, [sp, #40]	; 0x28
 8011354:	f000 fb68 	bl	8011a28 <__mcmp>
 8011358:	463a      	mov	r2, r7
 801135a:	4682      	mov	sl, r0
 801135c:	4621      	mov	r1, r4
 801135e:	4630      	mov	r0, r6
 8011360:	f000 fb7e 	bl	8011a60 <__mdiff>
 8011364:	68c2      	ldr	r2, [r0, #12]
 8011366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011368:	4680      	mov	r8, r0
 801136a:	bb0a      	cbnz	r2, 80113b0 <_dtoa_r+0x9a0>
 801136c:	4601      	mov	r1, r0
 801136e:	4628      	mov	r0, r5
 8011370:	f000 fb5a 	bl	8011a28 <__mcmp>
 8011374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011376:	4602      	mov	r2, r0
 8011378:	4641      	mov	r1, r8
 801137a:	4630      	mov	r0, r6
 801137c:	920e      	str	r2, [sp, #56]	; 0x38
 801137e:	930a      	str	r3, [sp, #40]	; 0x28
 8011380:	f000 f914 	bl	80115ac <_Bfree>
 8011384:	9b07      	ldr	r3, [sp, #28]
 8011386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011388:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801138c:	ea43 0102 	orr.w	r1, r3, r2
 8011390:	9b08      	ldr	r3, [sp, #32]
 8011392:	430b      	orrs	r3, r1
 8011394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011396:	d10d      	bne.n	80113b4 <_dtoa_r+0x9a4>
 8011398:	2b39      	cmp	r3, #57	; 0x39
 801139a:	d029      	beq.n	80113f0 <_dtoa_r+0x9e0>
 801139c:	f1ba 0f00 	cmp.w	sl, #0
 80113a0:	dd01      	ble.n	80113a6 <_dtoa_r+0x996>
 80113a2:	9b06      	ldr	r3, [sp, #24]
 80113a4:	3331      	adds	r3, #49	; 0x31
 80113a6:	9a02      	ldr	r2, [sp, #8]
 80113a8:	7013      	strb	r3, [r2, #0]
 80113aa:	e774      	b.n	8011296 <_dtoa_r+0x886>
 80113ac:	4638      	mov	r0, r7
 80113ae:	e7b8      	b.n	8011322 <_dtoa_r+0x912>
 80113b0:	2201      	movs	r2, #1
 80113b2:	e7e1      	b.n	8011378 <_dtoa_r+0x968>
 80113b4:	f1ba 0f00 	cmp.w	sl, #0
 80113b8:	db06      	blt.n	80113c8 <_dtoa_r+0x9b8>
 80113ba:	9907      	ldr	r1, [sp, #28]
 80113bc:	ea41 0a0a 	orr.w	sl, r1, sl
 80113c0:	9908      	ldr	r1, [sp, #32]
 80113c2:	ea5a 0101 	orrs.w	r1, sl, r1
 80113c6:	d120      	bne.n	801140a <_dtoa_r+0x9fa>
 80113c8:	2a00      	cmp	r2, #0
 80113ca:	ddec      	ble.n	80113a6 <_dtoa_r+0x996>
 80113cc:	4629      	mov	r1, r5
 80113ce:	2201      	movs	r2, #1
 80113d0:	4630      	mov	r0, r6
 80113d2:	9305      	str	r3, [sp, #20]
 80113d4:	f000 fabc 	bl	8011950 <__lshift>
 80113d8:	4621      	mov	r1, r4
 80113da:	4605      	mov	r5, r0
 80113dc:	f000 fb24 	bl	8011a28 <__mcmp>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	9b05      	ldr	r3, [sp, #20]
 80113e4:	dc02      	bgt.n	80113ec <_dtoa_r+0x9dc>
 80113e6:	d1de      	bne.n	80113a6 <_dtoa_r+0x996>
 80113e8:	07da      	lsls	r2, r3, #31
 80113ea:	d5dc      	bpl.n	80113a6 <_dtoa_r+0x996>
 80113ec:	2b39      	cmp	r3, #57	; 0x39
 80113ee:	d1d8      	bne.n	80113a2 <_dtoa_r+0x992>
 80113f0:	9a02      	ldr	r2, [sp, #8]
 80113f2:	2339      	movs	r3, #57	; 0x39
 80113f4:	7013      	strb	r3, [r2, #0]
 80113f6:	4643      	mov	r3, r8
 80113f8:	4698      	mov	r8, r3
 80113fa:	3b01      	subs	r3, #1
 80113fc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011400:	2a39      	cmp	r2, #57	; 0x39
 8011402:	d051      	beq.n	80114a8 <_dtoa_r+0xa98>
 8011404:	3201      	adds	r2, #1
 8011406:	701a      	strb	r2, [r3, #0]
 8011408:	e745      	b.n	8011296 <_dtoa_r+0x886>
 801140a:	2a00      	cmp	r2, #0
 801140c:	dd03      	ble.n	8011416 <_dtoa_r+0xa06>
 801140e:	2b39      	cmp	r3, #57	; 0x39
 8011410:	d0ee      	beq.n	80113f0 <_dtoa_r+0x9e0>
 8011412:	3301      	adds	r3, #1
 8011414:	e7c7      	b.n	80113a6 <_dtoa_r+0x996>
 8011416:	9a05      	ldr	r2, [sp, #20]
 8011418:	9909      	ldr	r1, [sp, #36]	; 0x24
 801141a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801141e:	428a      	cmp	r2, r1
 8011420:	d02b      	beq.n	801147a <_dtoa_r+0xa6a>
 8011422:	4629      	mov	r1, r5
 8011424:	2300      	movs	r3, #0
 8011426:	220a      	movs	r2, #10
 8011428:	4630      	mov	r0, r6
 801142a:	f000 f8e1 	bl	80115f0 <__multadd>
 801142e:	45b9      	cmp	r9, r7
 8011430:	4605      	mov	r5, r0
 8011432:	f04f 0300 	mov.w	r3, #0
 8011436:	f04f 020a 	mov.w	r2, #10
 801143a:	4649      	mov	r1, r9
 801143c:	4630      	mov	r0, r6
 801143e:	d107      	bne.n	8011450 <_dtoa_r+0xa40>
 8011440:	f000 f8d6 	bl	80115f0 <__multadd>
 8011444:	4681      	mov	r9, r0
 8011446:	4607      	mov	r7, r0
 8011448:	9b05      	ldr	r3, [sp, #20]
 801144a:	3301      	adds	r3, #1
 801144c:	9305      	str	r3, [sp, #20]
 801144e:	e774      	b.n	801133a <_dtoa_r+0x92a>
 8011450:	f000 f8ce 	bl	80115f0 <__multadd>
 8011454:	4639      	mov	r1, r7
 8011456:	4681      	mov	r9, r0
 8011458:	2300      	movs	r3, #0
 801145a:	220a      	movs	r2, #10
 801145c:	4630      	mov	r0, r6
 801145e:	f000 f8c7 	bl	80115f0 <__multadd>
 8011462:	4607      	mov	r7, r0
 8011464:	e7f0      	b.n	8011448 <_dtoa_r+0xa38>
 8011466:	f1ba 0f00 	cmp.w	sl, #0
 801146a:	9a00      	ldr	r2, [sp, #0]
 801146c:	bfcc      	ite	gt
 801146e:	46d0      	movgt	r8, sl
 8011470:	f04f 0801 	movle.w	r8, #1
 8011474:	4490      	add	r8, r2
 8011476:	f04f 0900 	mov.w	r9, #0
 801147a:	4629      	mov	r1, r5
 801147c:	2201      	movs	r2, #1
 801147e:	4630      	mov	r0, r6
 8011480:	9302      	str	r3, [sp, #8]
 8011482:	f000 fa65 	bl	8011950 <__lshift>
 8011486:	4621      	mov	r1, r4
 8011488:	4605      	mov	r5, r0
 801148a:	f000 facd 	bl	8011a28 <__mcmp>
 801148e:	2800      	cmp	r0, #0
 8011490:	dcb1      	bgt.n	80113f6 <_dtoa_r+0x9e6>
 8011492:	d102      	bne.n	801149a <_dtoa_r+0xa8a>
 8011494:	9b02      	ldr	r3, [sp, #8]
 8011496:	07db      	lsls	r3, r3, #31
 8011498:	d4ad      	bmi.n	80113f6 <_dtoa_r+0x9e6>
 801149a:	4643      	mov	r3, r8
 801149c:	4698      	mov	r8, r3
 801149e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114a2:	2a30      	cmp	r2, #48	; 0x30
 80114a4:	d0fa      	beq.n	801149c <_dtoa_r+0xa8c>
 80114a6:	e6f6      	b.n	8011296 <_dtoa_r+0x886>
 80114a8:	9a00      	ldr	r2, [sp, #0]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d1a4      	bne.n	80113f8 <_dtoa_r+0x9e8>
 80114ae:	f10b 0b01 	add.w	fp, fp, #1
 80114b2:	2331      	movs	r3, #49	; 0x31
 80114b4:	e778      	b.n	80113a8 <_dtoa_r+0x998>
 80114b6:	4b15      	ldr	r3, [pc, #84]	; (801150c <_dtoa_r+0xafc>)
 80114b8:	f7ff bb12 	b.w	8010ae0 <_dtoa_r+0xd0>
 80114bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f47f aaee 	bne.w	8010aa0 <_dtoa_r+0x90>
 80114c4:	4b12      	ldr	r3, [pc, #72]	; (8011510 <_dtoa_r+0xb00>)
 80114c6:	f7ff bb0b 	b.w	8010ae0 <_dtoa_r+0xd0>
 80114ca:	f1ba 0f00 	cmp.w	sl, #0
 80114ce:	dc03      	bgt.n	80114d8 <_dtoa_r+0xac8>
 80114d0:	9b07      	ldr	r3, [sp, #28]
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	f73f aec7 	bgt.w	8011266 <_dtoa_r+0x856>
 80114d8:	f8dd 8000 	ldr.w	r8, [sp]
 80114dc:	4621      	mov	r1, r4
 80114de:	4628      	mov	r0, r5
 80114e0:	f7ff fa08 	bl	80108f4 <quorem>
 80114e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80114e8:	f808 3b01 	strb.w	r3, [r8], #1
 80114ec:	9a00      	ldr	r2, [sp, #0]
 80114ee:	eba8 0202 	sub.w	r2, r8, r2
 80114f2:	4592      	cmp	sl, r2
 80114f4:	ddb7      	ble.n	8011466 <_dtoa_r+0xa56>
 80114f6:	4629      	mov	r1, r5
 80114f8:	2300      	movs	r3, #0
 80114fa:	220a      	movs	r2, #10
 80114fc:	4630      	mov	r0, r6
 80114fe:	f000 f877 	bl	80115f0 <__multadd>
 8011502:	4605      	mov	r5, r0
 8011504:	e7ea      	b.n	80114dc <_dtoa_r+0xacc>
 8011506:	bf00      	nop
 8011508:	0801440b 	.word	0x0801440b
 801150c:	08014364 	.word	0x08014364
 8011510:	08014388 	.word	0x08014388

08011514 <_localeconv_r>:
 8011514:	4800      	ldr	r0, [pc, #0]	; (8011518 <_localeconv_r+0x4>)
 8011516:	4770      	bx	lr
 8011518:	24000190 	.word	0x24000190

0801151c <malloc>:
 801151c:	4b02      	ldr	r3, [pc, #8]	; (8011528 <malloc+0xc>)
 801151e:	4601      	mov	r1, r0
 8011520:	6818      	ldr	r0, [r3, #0]
 8011522:	f000 bbe1 	b.w	8011ce8 <_malloc_r>
 8011526:	bf00      	nop
 8011528:	2400003c 	.word	0x2400003c

0801152c <_Balloc>:
 801152c:	b570      	push	{r4, r5, r6, lr}
 801152e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011530:	4604      	mov	r4, r0
 8011532:	460d      	mov	r5, r1
 8011534:	b976      	cbnz	r6, 8011554 <_Balloc+0x28>
 8011536:	2010      	movs	r0, #16
 8011538:	f7ff fff0 	bl	801151c <malloc>
 801153c:	4602      	mov	r2, r0
 801153e:	6260      	str	r0, [r4, #36]	; 0x24
 8011540:	b920      	cbnz	r0, 801154c <_Balloc+0x20>
 8011542:	4b18      	ldr	r3, [pc, #96]	; (80115a4 <_Balloc+0x78>)
 8011544:	4818      	ldr	r0, [pc, #96]	; (80115a8 <_Balloc+0x7c>)
 8011546:	2166      	movs	r1, #102	; 0x66
 8011548:	f000 fc38 	bl	8011dbc <__assert_func>
 801154c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011550:	6006      	str	r6, [r0, #0]
 8011552:	60c6      	str	r6, [r0, #12]
 8011554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011556:	68f3      	ldr	r3, [r6, #12]
 8011558:	b183      	cbz	r3, 801157c <_Balloc+0x50>
 801155a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011562:	b9b8      	cbnz	r0, 8011594 <_Balloc+0x68>
 8011564:	2101      	movs	r1, #1
 8011566:	fa01 f605 	lsl.w	r6, r1, r5
 801156a:	1d72      	adds	r2, r6, #5
 801156c:	0092      	lsls	r2, r2, #2
 801156e:	4620      	mov	r0, r4
 8011570:	f000 fb5a 	bl	8011c28 <_calloc_r>
 8011574:	b160      	cbz	r0, 8011590 <_Balloc+0x64>
 8011576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801157a:	e00e      	b.n	801159a <_Balloc+0x6e>
 801157c:	2221      	movs	r2, #33	; 0x21
 801157e:	2104      	movs	r1, #4
 8011580:	4620      	mov	r0, r4
 8011582:	f000 fb51 	bl	8011c28 <_calloc_r>
 8011586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011588:	60f0      	str	r0, [r6, #12]
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1e4      	bne.n	801155a <_Balloc+0x2e>
 8011590:	2000      	movs	r0, #0
 8011592:	bd70      	pop	{r4, r5, r6, pc}
 8011594:	6802      	ldr	r2, [r0, #0]
 8011596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801159a:	2300      	movs	r3, #0
 801159c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115a0:	e7f7      	b.n	8011592 <_Balloc+0x66>
 80115a2:	bf00      	nop
 80115a4:	08014395 	.word	0x08014395
 80115a8:	0801441c 	.word	0x0801441c

080115ac <_Bfree>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115b0:	4605      	mov	r5, r0
 80115b2:	460c      	mov	r4, r1
 80115b4:	b976      	cbnz	r6, 80115d4 <_Bfree+0x28>
 80115b6:	2010      	movs	r0, #16
 80115b8:	f7ff ffb0 	bl	801151c <malloc>
 80115bc:	4602      	mov	r2, r0
 80115be:	6268      	str	r0, [r5, #36]	; 0x24
 80115c0:	b920      	cbnz	r0, 80115cc <_Bfree+0x20>
 80115c2:	4b09      	ldr	r3, [pc, #36]	; (80115e8 <_Bfree+0x3c>)
 80115c4:	4809      	ldr	r0, [pc, #36]	; (80115ec <_Bfree+0x40>)
 80115c6:	218a      	movs	r1, #138	; 0x8a
 80115c8:	f000 fbf8 	bl	8011dbc <__assert_func>
 80115cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115d0:	6006      	str	r6, [r0, #0]
 80115d2:	60c6      	str	r6, [r0, #12]
 80115d4:	b13c      	cbz	r4, 80115e6 <_Bfree+0x3a>
 80115d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80115d8:	6862      	ldr	r2, [r4, #4]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115e0:	6021      	str	r1, [r4, #0]
 80115e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115e6:	bd70      	pop	{r4, r5, r6, pc}
 80115e8:	08014395 	.word	0x08014395
 80115ec:	0801441c 	.word	0x0801441c

080115f0 <__multadd>:
 80115f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f4:	690e      	ldr	r6, [r1, #16]
 80115f6:	4607      	mov	r7, r0
 80115f8:	4698      	mov	r8, r3
 80115fa:	460c      	mov	r4, r1
 80115fc:	f101 0014 	add.w	r0, r1, #20
 8011600:	2300      	movs	r3, #0
 8011602:	6805      	ldr	r5, [r0, #0]
 8011604:	b2a9      	uxth	r1, r5
 8011606:	fb02 8101 	mla	r1, r2, r1, r8
 801160a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801160e:	0c2d      	lsrs	r5, r5, #16
 8011610:	fb02 c505 	mla	r5, r2, r5, ip
 8011614:	b289      	uxth	r1, r1
 8011616:	3301      	adds	r3, #1
 8011618:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801161c:	429e      	cmp	r6, r3
 801161e:	f840 1b04 	str.w	r1, [r0], #4
 8011622:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011626:	dcec      	bgt.n	8011602 <__multadd+0x12>
 8011628:	f1b8 0f00 	cmp.w	r8, #0
 801162c:	d022      	beq.n	8011674 <__multadd+0x84>
 801162e:	68a3      	ldr	r3, [r4, #8]
 8011630:	42b3      	cmp	r3, r6
 8011632:	dc19      	bgt.n	8011668 <__multadd+0x78>
 8011634:	6861      	ldr	r1, [r4, #4]
 8011636:	4638      	mov	r0, r7
 8011638:	3101      	adds	r1, #1
 801163a:	f7ff ff77 	bl	801152c <_Balloc>
 801163e:	4605      	mov	r5, r0
 8011640:	b928      	cbnz	r0, 801164e <__multadd+0x5e>
 8011642:	4602      	mov	r2, r0
 8011644:	4b0d      	ldr	r3, [pc, #52]	; (801167c <__multadd+0x8c>)
 8011646:	480e      	ldr	r0, [pc, #56]	; (8011680 <__multadd+0x90>)
 8011648:	21b5      	movs	r1, #181	; 0xb5
 801164a:	f000 fbb7 	bl	8011dbc <__assert_func>
 801164e:	6922      	ldr	r2, [r4, #16]
 8011650:	3202      	adds	r2, #2
 8011652:	f104 010c 	add.w	r1, r4, #12
 8011656:	0092      	lsls	r2, r2, #2
 8011658:	300c      	adds	r0, #12
 801165a:	f7fe fcf3 	bl	8010044 <memcpy>
 801165e:	4621      	mov	r1, r4
 8011660:	4638      	mov	r0, r7
 8011662:	f7ff ffa3 	bl	80115ac <_Bfree>
 8011666:	462c      	mov	r4, r5
 8011668:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801166c:	3601      	adds	r6, #1
 801166e:	f8c3 8014 	str.w	r8, [r3, #20]
 8011672:	6126      	str	r6, [r4, #16]
 8011674:	4620      	mov	r0, r4
 8011676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801167a:	bf00      	nop
 801167c:	0801440b 	.word	0x0801440b
 8011680:	0801441c 	.word	0x0801441c

08011684 <__hi0bits>:
 8011684:	0c03      	lsrs	r3, r0, #16
 8011686:	041b      	lsls	r3, r3, #16
 8011688:	b9d3      	cbnz	r3, 80116c0 <__hi0bits+0x3c>
 801168a:	0400      	lsls	r0, r0, #16
 801168c:	2310      	movs	r3, #16
 801168e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011692:	bf04      	itt	eq
 8011694:	0200      	lsleq	r0, r0, #8
 8011696:	3308      	addeq	r3, #8
 8011698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801169c:	bf04      	itt	eq
 801169e:	0100      	lsleq	r0, r0, #4
 80116a0:	3304      	addeq	r3, #4
 80116a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116a6:	bf04      	itt	eq
 80116a8:	0080      	lsleq	r0, r0, #2
 80116aa:	3302      	addeq	r3, #2
 80116ac:	2800      	cmp	r0, #0
 80116ae:	db05      	blt.n	80116bc <__hi0bits+0x38>
 80116b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116b4:	f103 0301 	add.w	r3, r3, #1
 80116b8:	bf08      	it	eq
 80116ba:	2320      	moveq	r3, #32
 80116bc:	4618      	mov	r0, r3
 80116be:	4770      	bx	lr
 80116c0:	2300      	movs	r3, #0
 80116c2:	e7e4      	b.n	801168e <__hi0bits+0xa>

080116c4 <__lo0bits>:
 80116c4:	6803      	ldr	r3, [r0, #0]
 80116c6:	f013 0207 	ands.w	r2, r3, #7
 80116ca:	4601      	mov	r1, r0
 80116cc:	d00b      	beq.n	80116e6 <__lo0bits+0x22>
 80116ce:	07da      	lsls	r2, r3, #31
 80116d0:	d424      	bmi.n	801171c <__lo0bits+0x58>
 80116d2:	0798      	lsls	r0, r3, #30
 80116d4:	bf49      	itett	mi
 80116d6:	085b      	lsrmi	r3, r3, #1
 80116d8:	089b      	lsrpl	r3, r3, #2
 80116da:	2001      	movmi	r0, #1
 80116dc:	600b      	strmi	r3, [r1, #0]
 80116de:	bf5c      	itt	pl
 80116e0:	600b      	strpl	r3, [r1, #0]
 80116e2:	2002      	movpl	r0, #2
 80116e4:	4770      	bx	lr
 80116e6:	b298      	uxth	r0, r3
 80116e8:	b9b0      	cbnz	r0, 8011718 <__lo0bits+0x54>
 80116ea:	0c1b      	lsrs	r3, r3, #16
 80116ec:	2010      	movs	r0, #16
 80116ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80116f2:	bf04      	itt	eq
 80116f4:	0a1b      	lsreq	r3, r3, #8
 80116f6:	3008      	addeq	r0, #8
 80116f8:	071a      	lsls	r2, r3, #28
 80116fa:	bf04      	itt	eq
 80116fc:	091b      	lsreq	r3, r3, #4
 80116fe:	3004      	addeq	r0, #4
 8011700:	079a      	lsls	r2, r3, #30
 8011702:	bf04      	itt	eq
 8011704:	089b      	lsreq	r3, r3, #2
 8011706:	3002      	addeq	r0, #2
 8011708:	07da      	lsls	r2, r3, #31
 801170a:	d403      	bmi.n	8011714 <__lo0bits+0x50>
 801170c:	085b      	lsrs	r3, r3, #1
 801170e:	f100 0001 	add.w	r0, r0, #1
 8011712:	d005      	beq.n	8011720 <__lo0bits+0x5c>
 8011714:	600b      	str	r3, [r1, #0]
 8011716:	4770      	bx	lr
 8011718:	4610      	mov	r0, r2
 801171a:	e7e8      	b.n	80116ee <__lo0bits+0x2a>
 801171c:	2000      	movs	r0, #0
 801171e:	4770      	bx	lr
 8011720:	2020      	movs	r0, #32
 8011722:	4770      	bx	lr

08011724 <__i2b>:
 8011724:	b510      	push	{r4, lr}
 8011726:	460c      	mov	r4, r1
 8011728:	2101      	movs	r1, #1
 801172a:	f7ff feff 	bl	801152c <_Balloc>
 801172e:	4602      	mov	r2, r0
 8011730:	b928      	cbnz	r0, 801173e <__i2b+0x1a>
 8011732:	4b05      	ldr	r3, [pc, #20]	; (8011748 <__i2b+0x24>)
 8011734:	4805      	ldr	r0, [pc, #20]	; (801174c <__i2b+0x28>)
 8011736:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801173a:	f000 fb3f 	bl	8011dbc <__assert_func>
 801173e:	2301      	movs	r3, #1
 8011740:	6144      	str	r4, [r0, #20]
 8011742:	6103      	str	r3, [r0, #16]
 8011744:	bd10      	pop	{r4, pc}
 8011746:	bf00      	nop
 8011748:	0801440b 	.word	0x0801440b
 801174c:	0801441c 	.word	0x0801441c

08011750 <__multiply>:
 8011750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011754:	4614      	mov	r4, r2
 8011756:	690a      	ldr	r2, [r1, #16]
 8011758:	6923      	ldr	r3, [r4, #16]
 801175a:	429a      	cmp	r2, r3
 801175c:	bfb8      	it	lt
 801175e:	460b      	movlt	r3, r1
 8011760:	460d      	mov	r5, r1
 8011762:	bfbc      	itt	lt
 8011764:	4625      	movlt	r5, r4
 8011766:	461c      	movlt	r4, r3
 8011768:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801176c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011770:	68ab      	ldr	r3, [r5, #8]
 8011772:	6869      	ldr	r1, [r5, #4]
 8011774:	eb0a 0709 	add.w	r7, sl, r9
 8011778:	42bb      	cmp	r3, r7
 801177a:	b085      	sub	sp, #20
 801177c:	bfb8      	it	lt
 801177e:	3101      	addlt	r1, #1
 8011780:	f7ff fed4 	bl	801152c <_Balloc>
 8011784:	b930      	cbnz	r0, 8011794 <__multiply+0x44>
 8011786:	4602      	mov	r2, r0
 8011788:	4b42      	ldr	r3, [pc, #264]	; (8011894 <__multiply+0x144>)
 801178a:	4843      	ldr	r0, [pc, #268]	; (8011898 <__multiply+0x148>)
 801178c:	f240 115d 	movw	r1, #349	; 0x15d
 8011790:	f000 fb14 	bl	8011dbc <__assert_func>
 8011794:	f100 0614 	add.w	r6, r0, #20
 8011798:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801179c:	4633      	mov	r3, r6
 801179e:	2200      	movs	r2, #0
 80117a0:	4543      	cmp	r3, r8
 80117a2:	d31e      	bcc.n	80117e2 <__multiply+0x92>
 80117a4:	f105 0c14 	add.w	ip, r5, #20
 80117a8:	f104 0314 	add.w	r3, r4, #20
 80117ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80117b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80117b4:	9202      	str	r2, [sp, #8]
 80117b6:	ebac 0205 	sub.w	r2, ip, r5
 80117ba:	3a15      	subs	r2, #21
 80117bc:	f022 0203 	bic.w	r2, r2, #3
 80117c0:	3204      	adds	r2, #4
 80117c2:	f105 0115 	add.w	r1, r5, #21
 80117c6:	458c      	cmp	ip, r1
 80117c8:	bf38      	it	cc
 80117ca:	2204      	movcc	r2, #4
 80117cc:	9201      	str	r2, [sp, #4]
 80117ce:	9a02      	ldr	r2, [sp, #8]
 80117d0:	9303      	str	r3, [sp, #12]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d808      	bhi.n	80117e8 <__multiply+0x98>
 80117d6:	2f00      	cmp	r7, #0
 80117d8:	dc55      	bgt.n	8011886 <__multiply+0x136>
 80117da:	6107      	str	r7, [r0, #16]
 80117dc:	b005      	add	sp, #20
 80117de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e2:	f843 2b04 	str.w	r2, [r3], #4
 80117e6:	e7db      	b.n	80117a0 <__multiply+0x50>
 80117e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80117ec:	f1ba 0f00 	cmp.w	sl, #0
 80117f0:	d020      	beq.n	8011834 <__multiply+0xe4>
 80117f2:	f105 0e14 	add.w	lr, r5, #20
 80117f6:	46b1      	mov	r9, r6
 80117f8:	2200      	movs	r2, #0
 80117fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80117fe:	f8d9 b000 	ldr.w	fp, [r9]
 8011802:	b2a1      	uxth	r1, r4
 8011804:	fa1f fb8b 	uxth.w	fp, fp
 8011808:	fb0a b101 	mla	r1, sl, r1, fp
 801180c:	4411      	add	r1, r2
 801180e:	f8d9 2000 	ldr.w	r2, [r9]
 8011812:	0c24      	lsrs	r4, r4, #16
 8011814:	0c12      	lsrs	r2, r2, #16
 8011816:	fb0a 2404 	mla	r4, sl, r4, r2
 801181a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801181e:	b289      	uxth	r1, r1
 8011820:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011824:	45f4      	cmp	ip, lr
 8011826:	f849 1b04 	str.w	r1, [r9], #4
 801182a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801182e:	d8e4      	bhi.n	80117fa <__multiply+0xaa>
 8011830:	9901      	ldr	r1, [sp, #4]
 8011832:	5072      	str	r2, [r6, r1]
 8011834:	9a03      	ldr	r2, [sp, #12]
 8011836:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801183a:	3304      	adds	r3, #4
 801183c:	f1b9 0f00 	cmp.w	r9, #0
 8011840:	d01f      	beq.n	8011882 <__multiply+0x132>
 8011842:	6834      	ldr	r4, [r6, #0]
 8011844:	f105 0114 	add.w	r1, r5, #20
 8011848:	46b6      	mov	lr, r6
 801184a:	f04f 0a00 	mov.w	sl, #0
 801184e:	880a      	ldrh	r2, [r1, #0]
 8011850:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011854:	fb09 b202 	mla	r2, r9, r2, fp
 8011858:	4492      	add	sl, r2
 801185a:	b2a4      	uxth	r4, r4
 801185c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011860:	f84e 4b04 	str.w	r4, [lr], #4
 8011864:	f851 4b04 	ldr.w	r4, [r1], #4
 8011868:	f8be 2000 	ldrh.w	r2, [lr]
 801186c:	0c24      	lsrs	r4, r4, #16
 801186e:	fb09 2404 	mla	r4, r9, r4, r2
 8011872:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011876:	458c      	cmp	ip, r1
 8011878:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801187c:	d8e7      	bhi.n	801184e <__multiply+0xfe>
 801187e:	9a01      	ldr	r2, [sp, #4]
 8011880:	50b4      	str	r4, [r6, r2]
 8011882:	3604      	adds	r6, #4
 8011884:	e7a3      	b.n	80117ce <__multiply+0x7e>
 8011886:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1a5      	bne.n	80117da <__multiply+0x8a>
 801188e:	3f01      	subs	r7, #1
 8011890:	e7a1      	b.n	80117d6 <__multiply+0x86>
 8011892:	bf00      	nop
 8011894:	0801440b 	.word	0x0801440b
 8011898:	0801441c 	.word	0x0801441c

0801189c <__pow5mult>:
 801189c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a0:	4615      	mov	r5, r2
 80118a2:	f012 0203 	ands.w	r2, r2, #3
 80118a6:	4606      	mov	r6, r0
 80118a8:	460f      	mov	r7, r1
 80118aa:	d007      	beq.n	80118bc <__pow5mult+0x20>
 80118ac:	4c25      	ldr	r4, [pc, #148]	; (8011944 <__pow5mult+0xa8>)
 80118ae:	3a01      	subs	r2, #1
 80118b0:	2300      	movs	r3, #0
 80118b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118b6:	f7ff fe9b 	bl	80115f0 <__multadd>
 80118ba:	4607      	mov	r7, r0
 80118bc:	10ad      	asrs	r5, r5, #2
 80118be:	d03d      	beq.n	801193c <__pow5mult+0xa0>
 80118c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80118c2:	b97c      	cbnz	r4, 80118e4 <__pow5mult+0x48>
 80118c4:	2010      	movs	r0, #16
 80118c6:	f7ff fe29 	bl	801151c <malloc>
 80118ca:	4602      	mov	r2, r0
 80118cc:	6270      	str	r0, [r6, #36]	; 0x24
 80118ce:	b928      	cbnz	r0, 80118dc <__pow5mult+0x40>
 80118d0:	4b1d      	ldr	r3, [pc, #116]	; (8011948 <__pow5mult+0xac>)
 80118d2:	481e      	ldr	r0, [pc, #120]	; (801194c <__pow5mult+0xb0>)
 80118d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80118d8:	f000 fa70 	bl	8011dbc <__assert_func>
 80118dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118e0:	6004      	str	r4, [r0, #0]
 80118e2:	60c4      	str	r4, [r0, #12]
 80118e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80118e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118ec:	b94c      	cbnz	r4, 8011902 <__pow5mult+0x66>
 80118ee:	f240 2171 	movw	r1, #625	; 0x271
 80118f2:	4630      	mov	r0, r6
 80118f4:	f7ff ff16 	bl	8011724 <__i2b>
 80118f8:	2300      	movs	r3, #0
 80118fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80118fe:	4604      	mov	r4, r0
 8011900:	6003      	str	r3, [r0, #0]
 8011902:	f04f 0900 	mov.w	r9, #0
 8011906:	07eb      	lsls	r3, r5, #31
 8011908:	d50a      	bpl.n	8011920 <__pow5mult+0x84>
 801190a:	4639      	mov	r1, r7
 801190c:	4622      	mov	r2, r4
 801190e:	4630      	mov	r0, r6
 8011910:	f7ff ff1e 	bl	8011750 <__multiply>
 8011914:	4639      	mov	r1, r7
 8011916:	4680      	mov	r8, r0
 8011918:	4630      	mov	r0, r6
 801191a:	f7ff fe47 	bl	80115ac <_Bfree>
 801191e:	4647      	mov	r7, r8
 8011920:	106d      	asrs	r5, r5, #1
 8011922:	d00b      	beq.n	801193c <__pow5mult+0xa0>
 8011924:	6820      	ldr	r0, [r4, #0]
 8011926:	b938      	cbnz	r0, 8011938 <__pow5mult+0x9c>
 8011928:	4622      	mov	r2, r4
 801192a:	4621      	mov	r1, r4
 801192c:	4630      	mov	r0, r6
 801192e:	f7ff ff0f 	bl	8011750 <__multiply>
 8011932:	6020      	str	r0, [r4, #0]
 8011934:	f8c0 9000 	str.w	r9, [r0]
 8011938:	4604      	mov	r4, r0
 801193a:	e7e4      	b.n	8011906 <__pow5mult+0x6a>
 801193c:	4638      	mov	r0, r7
 801193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011942:	bf00      	nop
 8011944:	08014570 	.word	0x08014570
 8011948:	08014395 	.word	0x08014395
 801194c:	0801441c 	.word	0x0801441c

08011950 <__lshift>:
 8011950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011954:	460c      	mov	r4, r1
 8011956:	6849      	ldr	r1, [r1, #4]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801195e:	68a3      	ldr	r3, [r4, #8]
 8011960:	4607      	mov	r7, r0
 8011962:	4691      	mov	r9, r2
 8011964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011968:	f108 0601 	add.w	r6, r8, #1
 801196c:	42b3      	cmp	r3, r6
 801196e:	db0b      	blt.n	8011988 <__lshift+0x38>
 8011970:	4638      	mov	r0, r7
 8011972:	f7ff fddb 	bl	801152c <_Balloc>
 8011976:	4605      	mov	r5, r0
 8011978:	b948      	cbnz	r0, 801198e <__lshift+0x3e>
 801197a:	4602      	mov	r2, r0
 801197c:	4b28      	ldr	r3, [pc, #160]	; (8011a20 <__lshift+0xd0>)
 801197e:	4829      	ldr	r0, [pc, #164]	; (8011a24 <__lshift+0xd4>)
 8011980:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011984:	f000 fa1a 	bl	8011dbc <__assert_func>
 8011988:	3101      	adds	r1, #1
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	e7ee      	b.n	801196c <__lshift+0x1c>
 801198e:	2300      	movs	r3, #0
 8011990:	f100 0114 	add.w	r1, r0, #20
 8011994:	f100 0210 	add.w	r2, r0, #16
 8011998:	4618      	mov	r0, r3
 801199a:	4553      	cmp	r3, sl
 801199c:	db33      	blt.n	8011a06 <__lshift+0xb6>
 801199e:	6920      	ldr	r0, [r4, #16]
 80119a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119a4:	f104 0314 	add.w	r3, r4, #20
 80119a8:	f019 091f 	ands.w	r9, r9, #31
 80119ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119b4:	d02b      	beq.n	8011a0e <__lshift+0xbe>
 80119b6:	f1c9 0e20 	rsb	lr, r9, #32
 80119ba:	468a      	mov	sl, r1
 80119bc:	2200      	movs	r2, #0
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	fa00 f009 	lsl.w	r0, r0, r9
 80119c4:	4302      	orrs	r2, r0
 80119c6:	f84a 2b04 	str.w	r2, [sl], #4
 80119ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ce:	459c      	cmp	ip, r3
 80119d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80119d4:	d8f3      	bhi.n	80119be <__lshift+0x6e>
 80119d6:	ebac 0304 	sub.w	r3, ip, r4
 80119da:	3b15      	subs	r3, #21
 80119dc:	f023 0303 	bic.w	r3, r3, #3
 80119e0:	3304      	adds	r3, #4
 80119e2:	f104 0015 	add.w	r0, r4, #21
 80119e6:	4584      	cmp	ip, r0
 80119e8:	bf38      	it	cc
 80119ea:	2304      	movcc	r3, #4
 80119ec:	50ca      	str	r2, [r1, r3]
 80119ee:	b10a      	cbz	r2, 80119f4 <__lshift+0xa4>
 80119f0:	f108 0602 	add.w	r6, r8, #2
 80119f4:	3e01      	subs	r6, #1
 80119f6:	4638      	mov	r0, r7
 80119f8:	612e      	str	r6, [r5, #16]
 80119fa:	4621      	mov	r1, r4
 80119fc:	f7ff fdd6 	bl	80115ac <_Bfree>
 8011a00:	4628      	mov	r0, r5
 8011a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	e7c5      	b.n	801199a <__lshift+0x4a>
 8011a0e:	3904      	subs	r1, #4
 8011a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a18:	459c      	cmp	ip, r3
 8011a1a:	d8f9      	bhi.n	8011a10 <__lshift+0xc0>
 8011a1c:	e7ea      	b.n	80119f4 <__lshift+0xa4>
 8011a1e:	bf00      	nop
 8011a20:	0801440b 	.word	0x0801440b
 8011a24:	0801441c 	.word	0x0801441c

08011a28 <__mcmp>:
 8011a28:	b530      	push	{r4, r5, lr}
 8011a2a:	6902      	ldr	r2, [r0, #16]
 8011a2c:	690c      	ldr	r4, [r1, #16]
 8011a2e:	1b12      	subs	r2, r2, r4
 8011a30:	d10e      	bne.n	8011a50 <__mcmp+0x28>
 8011a32:	f100 0314 	add.w	r3, r0, #20
 8011a36:	3114      	adds	r1, #20
 8011a38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a48:	42a5      	cmp	r5, r4
 8011a4a:	d003      	beq.n	8011a54 <__mcmp+0x2c>
 8011a4c:	d305      	bcc.n	8011a5a <__mcmp+0x32>
 8011a4e:	2201      	movs	r2, #1
 8011a50:	4610      	mov	r0, r2
 8011a52:	bd30      	pop	{r4, r5, pc}
 8011a54:	4283      	cmp	r3, r0
 8011a56:	d3f3      	bcc.n	8011a40 <__mcmp+0x18>
 8011a58:	e7fa      	b.n	8011a50 <__mcmp+0x28>
 8011a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5e:	e7f7      	b.n	8011a50 <__mcmp+0x28>

08011a60 <__mdiff>:
 8011a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a64:	460c      	mov	r4, r1
 8011a66:	4606      	mov	r6, r0
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	4617      	mov	r7, r2
 8011a6e:	f7ff ffdb 	bl	8011a28 <__mcmp>
 8011a72:	1e05      	subs	r5, r0, #0
 8011a74:	d110      	bne.n	8011a98 <__mdiff+0x38>
 8011a76:	4629      	mov	r1, r5
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff fd57 	bl	801152c <_Balloc>
 8011a7e:	b930      	cbnz	r0, 8011a8e <__mdiff+0x2e>
 8011a80:	4b39      	ldr	r3, [pc, #228]	; (8011b68 <__mdiff+0x108>)
 8011a82:	4602      	mov	r2, r0
 8011a84:	f240 2132 	movw	r1, #562	; 0x232
 8011a88:	4838      	ldr	r0, [pc, #224]	; (8011b6c <__mdiff+0x10c>)
 8011a8a:	f000 f997 	bl	8011dbc <__assert_func>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a98:	bfa4      	itt	ge
 8011a9a:	463b      	movge	r3, r7
 8011a9c:	4627      	movge	r7, r4
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	6879      	ldr	r1, [r7, #4]
 8011aa2:	bfa6      	itte	ge
 8011aa4:	461c      	movge	r4, r3
 8011aa6:	2500      	movge	r5, #0
 8011aa8:	2501      	movlt	r5, #1
 8011aaa:	f7ff fd3f 	bl	801152c <_Balloc>
 8011aae:	b920      	cbnz	r0, 8011aba <__mdiff+0x5a>
 8011ab0:	4b2d      	ldr	r3, [pc, #180]	; (8011b68 <__mdiff+0x108>)
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011ab8:	e7e6      	b.n	8011a88 <__mdiff+0x28>
 8011aba:	693e      	ldr	r6, [r7, #16]
 8011abc:	60c5      	str	r5, [r0, #12]
 8011abe:	6925      	ldr	r5, [r4, #16]
 8011ac0:	f107 0114 	add.w	r1, r7, #20
 8011ac4:	f104 0914 	add.w	r9, r4, #20
 8011ac8:	f100 0e14 	add.w	lr, r0, #20
 8011acc:	f107 0210 	add.w	r2, r7, #16
 8011ad0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011ad4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011ad8:	46f2      	mov	sl, lr
 8011ada:	2700      	movs	r7, #0
 8011adc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011ae0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ae4:	fa1f f883 	uxth.w	r8, r3
 8011ae8:	fa17 f78b 	uxtah	r7, r7, fp
 8011aec:	0c1b      	lsrs	r3, r3, #16
 8011aee:	eba7 0808 	sub.w	r8, r7, r8
 8011af2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011af6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011afa:	fa1f f888 	uxth.w	r8, r8
 8011afe:	141f      	asrs	r7, r3, #16
 8011b00:	454d      	cmp	r5, r9
 8011b02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b06:	f84a 3b04 	str.w	r3, [sl], #4
 8011b0a:	d8e7      	bhi.n	8011adc <__mdiff+0x7c>
 8011b0c:	1b2b      	subs	r3, r5, r4
 8011b0e:	3b15      	subs	r3, #21
 8011b10:	f023 0303 	bic.w	r3, r3, #3
 8011b14:	3304      	adds	r3, #4
 8011b16:	3415      	adds	r4, #21
 8011b18:	42a5      	cmp	r5, r4
 8011b1a:	bf38      	it	cc
 8011b1c:	2304      	movcc	r3, #4
 8011b1e:	4419      	add	r1, r3
 8011b20:	4473      	add	r3, lr
 8011b22:	469e      	mov	lr, r3
 8011b24:	460d      	mov	r5, r1
 8011b26:	4565      	cmp	r5, ip
 8011b28:	d30e      	bcc.n	8011b48 <__mdiff+0xe8>
 8011b2a:	f10c 0203 	add.w	r2, ip, #3
 8011b2e:	1a52      	subs	r2, r2, r1
 8011b30:	f022 0203 	bic.w	r2, r2, #3
 8011b34:	3903      	subs	r1, #3
 8011b36:	458c      	cmp	ip, r1
 8011b38:	bf38      	it	cc
 8011b3a:	2200      	movcc	r2, #0
 8011b3c:	441a      	add	r2, r3
 8011b3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b42:	b17b      	cbz	r3, 8011b64 <__mdiff+0x104>
 8011b44:	6106      	str	r6, [r0, #16]
 8011b46:	e7a5      	b.n	8011a94 <__mdiff+0x34>
 8011b48:	f855 8b04 	ldr.w	r8, [r5], #4
 8011b4c:	fa17 f488 	uxtah	r4, r7, r8
 8011b50:	1422      	asrs	r2, r4, #16
 8011b52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011b56:	b2a4      	uxth	r4, r4
 8011b58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011b5c:	f84e 4b04 	str.w	r4, [lr], #4
 8011b60:	1417      	asrs	r7, r2, #16
 8011b62:	e7e0      	b.n	8011b26 <__mdiff+0xc6>
 8011b64:	3e01      	subs	r6, #1
 8011b66:	e7ea      	b.n	8011b3e <__mdiff+0xde>
 8011b68:	0801440b 	.word	0x0801440b
 8011b6c:	0801441c 	.word	0x0801441c

08011b70 <__d2b>:
 8011b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b74:	4689      	mov	r9, r1
 8011b76:	2101      	movs	r1, #1
 8011b78:	ec57 6b10 	vmov	r6, r7, d0
 8011b7c:	4690      	mov	r8, r2
 8011b7e:	f7ff fcd5 	bl	801152c <_Balloc>
 8011b82:	4604      	mov	r4, r0
 8011b84:	b930      	cbnz	r0, 8011b94 <__d2b+0x24>
 8011b86:	4602      	mov	r2, r0
 8011b88:	4b25      	ldr	r3, [pc, #148]	; (8011c20 <__d2b+0xb0>)
 8011b8a:	4826      	ldr	r0, [pc, #152]	; (8011c24 <__d2b+0xb4>)
 8011b8c:	f240 310a 	movw	r1, #778	; 0x30a
 8011b90:	f000 f914 	bl	8011dbc <__assert_func>
 8011b94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011b98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b9c:	bb35      	cbnz	r5, 8011bec <__d2b+0x7c>
 8011b9e:	2e00      	cmp	r6, #0
 8011ba0:	9301      	str	r3, [sp, #4]
 8011ba2:	d028      	beq.n	8011bf6 <__d2b+0x86>
 8011ba4:	4668      	mov	r0, sp
 8011ba6:	9600      	str	r6, [sp, #0]
 8011ba8:	f7ff fd8c 	bl	80116c4 <__lo0bits>
 8011bac:	9900      	ldr	r1, [sp, #0]
 8011bae:	b300      	cbz	r0, 8011bf2 <__d2b+0x82>
 8011bb0:	9a01      	ldr	r2, [sp, #4]
 8011bb2:	f1c0 0320 	rsb	r3, r0, #32
 8011bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8011bba:	430b      	orrs	r3, r1
 8011bbc:	40c2      	lsrs	r2, r0
 8011bbe:	6163      	str	r3, [r4, #20]
 8011bc0:	9201      	str	r2, [sp, #4]
 8011bc2:	9b01      	ldr	r3, [sp, #4]
 8011bc4:	61a3      	str	r3, [r4, #24]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	bf14      	ite	ne
 8011bca:	2202      	movne	r2, #2
 8011bcc:	2201      	moveq	r2, #1
 8011bce:	6122      	str	r2, [r4, #16]
 8011bd0:	b1d5      	cbz	r5, 8011c08 <__d2b+0x98>
 8011bd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011bd6:	4405      	add	r5, r0
 8011bd8:	f8c9 5000 	str.w	r5, [r9]
 8011bdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011be0:	f8c8 0000 	str.w	r0, [r8]
 8011be4:	4620      	mov	r0, r4
 8011be6:	b003      	add	sp, #12
 8011be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bf0:	e7d5      	b.n	8011b9e <__d2b+0x2e>
 8011bf2:	6161      	str	r1, [r4, #20]
 8011bf4:	e7e5      	b.n	8011bc2 <__d2b+0x52>
 8011bf6:	a801      	add	r0, sp, #4
 8011bf8:	f7ff fd64 	bl	80116c4 <__lo0bits>
 8011bfc:	9b01      	ldr	r3, [sp, #4]
 8011bfe:	6163      	str	r3, [r4, #20]
 8011c00:	2201      	movs	r2, #1
 8011c02:	6122      	str	r2, [r4, #16]
 8011c04:	3020      	adds	r0, #32
 8011c06:	e7e3      	b.n	8011bd0 <__d2b+0x60>
 8011c08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c10:	f8c9 0000 	str.w	r0, [r9]
 8011c14:	6918      	ldr	r0, [r3, #16]
 8011c16:	f7ff fd35 	bl	8011684 <__hi0bits>
 8011c1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c1e:	e7df      	b.n	8011be0 <__d2b+0x70>
 8011c20:	0801440b 	.word	0x0801440b
 8011c24:	0801441c 	.word	0x0801441c

08011c28 <_calloc_r>:
 8011c28:	b513      	push	{r0, r1, r4, lr}
 8011c2a:	434a      	muls	r2, r1
 8011c2c:	4611      	mov	r1, r2
 8011c2e:	9201      	str	r2, [sp, #4]
 8011c30:	f000 f85a 	bl	8011ce8 <_malloc_r>
 8011c34:	4604      	mov	r4, r0
 8011c36:	b118      	cbz	r0, 8011c40 <_calloc_r+0x18>
 8011c38:	9a01      	ldr	r2, [sp, #4]
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	f7fe fa10 	bl	8010060 <memset>
 8011c40:	4620      	mov	r0, r4
 8011c42:	b002      	add	sp, #8
 8011c44:	bd10      	pop	{r4, pc}
	...

08011c48 <_free_r>:
 8011c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c4a:	2900      	cmp	r1, #0
 8011c4c:	d048      	beq.n	8011ce0 <_free_r+0x98>
 8011c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c52:	9001      	str	r0, [sp, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f1a1 0404 	sub.w	r4, r1, #4
 8011c5a:	bfb8      	it	lt
 8011c5c:	18e4      	addlt	r4, r4, r3
 8011c5e:	f000 f8ef 	bl	8011e40 <__malloc_lock>
 8011c62:	4a20      	ldr	r2, [pc, #128]	; (8011ce4 <_free_r+0x9c>)
 8011c64:	9801      	ldr	r0, [sp, #4]
 8011c66:	6813      	ldr	r3, [r2, #0]
 8011c68:	4615      	mov	r5, r2
 8011c6a:	b933      	cbnz	r3, 8011c7a <_free_r+0x32>
 8011c6c:	6063      	str	r3, [r4, #4]
 8011c6e:	6014      	str	r4, [r2, #0]
 8011c70:	b003      	add	sp, #12
 8011c72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c76:	f000 b8e9 	b.w	8011e4c <__malloc_unlock>
 8011c7a:	42a3      	cmp	r3, r4
 8011c7c:	d90b      	bls.n	8011c96 <_free_r+0x4e>
 8011c7e:	6821      	ldr	r1, [r4, #0]
 8011c80:	1862      	adds	r2, r4, r1
 8011c82:	4293      	cmp	r3, r2
 8011c84:	bf04      	itt	eq
 8011c86:	681a      	ldreq	r2, [r3, #0]
 8011c88:	685b      	ldreq	r3, [r3, #4]
 8011c8a:	6063      	str	r3, [r4, #4]
 8011c8c:	bf04      	itt	eq
 8011c8e:	1852      	addeq	r2, r2, r1
 8011c90:	6022      	streq	r2, [r4, #0]
 8011c92:	602c      	str	r4, [r5, #0]
 8011c94:	e7ec      	b.n	8011c70 <_free_r+0x28>
 8011c96:	461a      	mov	r2, r3
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	b10b      	cbz	r3, 8011ca0 <_free_r+0x58>
 8011c9c:	42a3      	cmp	r3, r4
 8011c9e:	d9fa      	bls.n	8011c96 <_free_r+0x4e>
 8011ca0:	6811      	ldr	r1, [r2, #0]
 8011ca2:	1855      	adds	r5, r2, r1
 8011ca4:	42a5      	cmp	r5, r4
 8011ca6:	d10b      	bne.n	8011cc0 <_free_r+0x78>
 8011ca8:	6824      	ldr	r4, [r4, #0]
 8011caa:	4421      	add	r1, r4
 8011cac:	1854      	adds	r4, r2, r1
 8011cae:	42a3      	cmp	r3, r4
 8011cb0:	6011      	str	r1, [r2, #0]
 8011cb2:	d1dd      	bne.n	8011c70 <_free_r+0x28>
 8011cb4:	681c      	ldr	r4, [r3, #0]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	6053      	str	r3, [r2, #4]
 8011cba:	4421      	add	r1, r4
 8011cbc:	6011      	str	r1, [r2, #0]
 8011cbe:	e7d7      	b.n	8011c70 <_free_r+0x28>
 8011cc0:	d902      	bls.n	8011cc8 <_free_r+0x80>
 8011cc2:	230c      	movs	r3, #12
 8011cc4:	6003      	str	r3, [r0, #0]
 8011cc6:	e7d3      	b.n	8011c70 <_free_r+0x28>
 8011cc8:	6825      	ldr	r5, [r4, #0]
 8011cca:	1961      	adds	r1, r4, r5
 8011ccc:	428b      	cmp	r3, r1
 8011cce:	bf04      	itt	eq
 8011cd0:	6819      	ldreq	r1, [r3, #0]
 8011cd2:	685b      	ldreq	r3, [r3, #4]
 8011cd4:	6063      	str	r3, [r4, #4]
 8011cd6:	bf04      	itt	eq
 8011cd8:	1949      	addeq	r1, r1, r5
 8011cda:	6021      	streq	r1, [r4, #0]
 8011cdc:	6054      	str	r4, [r2, #4]
 8011cde:	e7c7      	b.n	8011c70 <_free_r+0x28>
 8011ce0:	b003      	add	sp, #12
 8011ce2:	bd30      	pop	{r4, r5, pc}
 8011ce4:	24000874 	.word	0x24000874

08011ce8 <_malloc_r>:
 8011ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cea:	1ccd      	adds	r5, r1, #3
 8011cec:	f025 0503 	bic.w	r5, r5, #3
 8011cf0:	3508      	adds	r5, #8
 8011cf2:	2d0c      	cmp	r5, #12
 8011cf4:	bf38      	it	cc
 8011cf6:	250c      	movcc	r5, #12
 8011cf8:	2d00      	cmp	r5, #0
 8011cfa:	4606      	mov	r6, r0
 8011cfc:	db01      	blt.n	8011d02 <_malloc_r+0x1a>
 8011cfe:	42a9      	cmp	r1, r5
 8011d00:	d903      	bls.n	8011d0a <_malloc_r+0x22>
 8011d02:	230c      	movs	r3, #12
 8011d04:	6033      	str	r3, [r6, #0]
 8011d06:	2000      	movs	r0, #0
 8011d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d0a:	f000 f899 	bl	8011e40 <__malloc_lock>
 8011d0e:	4921      	ldr	r1, [pc, #132]	; (8011d94 <_malloc_r+0xac>)
 8011d10:	680a      	ldr	r2, [r1, #0]
 8011d12:	4614      	mov	r4, r2
 8011d14:	b99c      	cbnz	r4, 8011d3e <_malloc_r+0x56>
 8011d16:	4f20      	ldr	r7, [pc, #128]	; (8011d98 <_malloc_r+0xb0>)
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	b923      	cbnz	r3, 8011d26 <_malloc_r+0x3e>
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	4630      	mov	r0, r6
 8011d20:	f000 f83c 	bl	8011d9c <_sbrk_r>
 8011d24:	6038      	str	r0, [r7, #0]
 8011d26:	4629      	mov	r1, r5
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f000 f837 	bl	8011d9c <_sbrk_r>
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	d123      	bne.n	8011d7a <_malloc_r+0x92>
 8011d32:	230c      	movs	r3, #12
 8011d34:	6033      	str	r3, [r6, #0]
 8011d36:	4630      	mov	r0, r6
 8011d38:	f000 f888 	bl	8011e4c <__malloc_unlock>
 8011d3c:	e7e3      	b.n	8011d06 <_malloc_r+0x1e>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	1b5b      	subs	r3, r3, r5
 8011d42:	d417      	bmi.n	8011d74 <_malloc_r+0x8c>
 8011d44:	2b0b      	cmp	r3, #11
 8011d46:	d903      	bls.n	8011d50 <_malloc_r+0x68>
 8011d48:	6023      	str	r3, [r4, #0]
 8011d4a:	441c      	add	r4, r3
 8011d4c:	6025      	str	r5, [r4, #0]
 8011d4e:	e004      	b.n	8011d5a <_malloc_r+0x72>
 8011d50:	6863      	ldr	r3, [r4, #4]
 8011d52:	42a2      	cmp	r2, r4
 8011d54:	bf0c      	ite	eq
 8011d56:	600b      	streq	r3, [r1, #0]
 8011d58:	6053      	strne	r3, [r2, #4]
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f000 f876 	bl	8011e4c <__malloc_unlock>
 8011d60:	f104 000b 	add.w	r0, r4, #11
 8011d64:	1d23      	adds	r3, r4, #4
 8011d66:	f020 0007 	bic.w	r0, r0, #7
 8011d6a:	1ac2      	subs	r2, r0, r3
 8011d6c:	d0cc      	beq.n	8011d08 <_malloc_r+0x20>
 8011d6e:	1a1b      	subs	r3, r3, r0
 8011d70:	50a3      	str	r3, [r4, r2]
 8011d72:	e7c9      	b.n	8011d08 <_malloc_r+0x20>
 8011d74:	4622      	mov	r2, r4
 8011d76:	6864      	ldr	r4, [r4, #4]
 8011d78:	e7cc      	b.n	8011d14 <_malloc_r+0x2c>
 8011d7a:	1cc4      	adds	r4, r0, #3
 8011d7c:	f024 0403 	bic.w	r4, r4, #3
 8011d80:	42a0      	cmp	r0, r4
 8011d82:	d0e3      	beq.n	8011d4c <_malloc_r+0x64>
 8011d84:	1a21      	subs	r1, r4, r0
 8011d86:	4630      	mov	r0, r6
 8011d88:	f000 f808 	bl	8011d9c <_sbrk_r>
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	d1dd      	bne.n	8011d4c <_malloc_r+0x64>
 8011d90:	e7cf      	b.n	8011d32 <_malloc_r+0x4a>
 8011d92:	bf00      	nop
 8011d94:	24000874 	.word	0x24000874
 8011d98:	24000878 	.word	0x24000878

08011d9c <_sbrk_r>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	4d06      	ldr	r5, [pc, #24]	; (8011db8 <_sbrk_r+0x1c>)
 8011da0:	2300      	movs	r3, #0
 8011da2:	4604      	mov	r4, r0
 8011da4:	4608      	mov	r0, r1
 8011da6:	602b      	str	r3, [r5, #0]
 8011da8:	f7f2 fcbc 	bl	8004724 <_sbrk>
 8011dac:	1c43      	adds	r3, r0, #1
 8011dae:	d102      	bne.n	8011db6 <_sbrk_r+0x1a>
 8011db0:	682b      	ldr	r3, [r5, #0]
 8011db2:	b103      	cbz	r3, 8011db6 <_sbrk_r+0x1a>
 8011db4:	6023      	str	r3, [r4, #0]
 8011db6:	bd38      	pop	{r3, r4, r5, pc}
 8011db8:	24001078 	.word	0x24001078

08011dbc <__assert_func>:
 8011dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011dbe:	4614      	mov	r4, r2
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	4b09      	ldr	r3, [pc, #36]	; (8011de8 <__assert_func+0x2c>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	68d8      	ldr	r0, [r3, #12]
 8011dca:	b14c      	cbz	r4, 8011de0 <__assert_func+0x24>
 8011dcc:	4b07      	ldr	r3, [pc, #28]	; (8011dec <__assert_func+0x30>)
 8011dce:	9100      	str	r1, [sp, #0]
 8011dd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011dd4:	4906      	ldr	r1, [pc, #24]	; (8011df0 <__assert_func+0x34>)
 8011dd6:	462b      	mov	r3, r5
 8011dd8:	f000 f80e 	bl	8011df8 <fiprintf>
 8011ddc:	f000 fa64 	bl	80122a8 <abort>
 8011de0:	4b04      	ldr	r3, [pc, #16]	; (8011df4 <__assert_func+0x38>)
 8011de2:	461c      	mov	r4, r3
 8011de4:	e7f3      	b.n	8011dce <__assert_func+0x12>
 8011de6:	bf00      	nop
 8011de8:	2400003c 	.word	0x2400003c
 8011dec:	0801457c 	.word	0x0801457c
 8011df0:	08014589 	.word	0x08014589
 8011df4:	080145b7 	.word	0x080145b7

08011df8 <fiprintf>:
 8011df8:	b40e      	push	{r1, r2, r3}
 8011dfa:	b503      	push	{r0, r1, lr}
 8011dfc:	4601      	mov	r1, r0
 8011dfe:	ab03      	add	r3, sp, #12
 8011e00:	4805      	ldr	r0, [pc, #20]	; (8011e18 <fiprintf+0x20>)
 8011e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e06:	6800      	ldr	r0, [r0, #0]
 8011e08:	9301      	str	r3, [sp, #4]
 8011e0a:	f000 f84f 	bl	8011eac <_vfiprintf_r>
 8011e0e:	b002      	add	sp, #8
 8011e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e14:	b003      	add	sp, #12
 8011e16:	4770      	bx	lr
 8011e18:	2400003c 	.word	0x2400003c

08011e1c <__ascii_mbtowc>:
 8011e1c:	b082      	sub	sp, #8
 8011e1e:	b901      	cbnz	r1, 8011e22 <__ascii_mbtowc+0x6>
 8011e20:	a901      	add	r1, sp, #4
 8011e22:	b142      	cbz	r2, 8011e36 <__ascii_mbtowc+0x1a>
 8011e24:	b14b      	cbz	r3, 8011e3a <__ascii_mbtowc+0x1e>
 8011e26:	7813      	ldrb	r3, [r2, #0]
 8011e28:	600b      	str	r3, [r1, #0]
 8011e2a:	7812      	ldrb	r2, [r2, #0]
 8011e2c:	1e10      	subs	r0, r2, #0
 8011e2e:	bf18      	it	ne
 8011e30:	2001      	movne	r0, #1
 8011e32:	b002      	add	sp, #8
 8011e34:	4770      	bx	lr
 8011e36:	4610      	mov	r0, r2
 8011e38:	e7fb      	b.n	8011e32 <__ascii_mbtowc+0x16>
 8011e3a:	f06f 0001 	mvn.w	r0, #1
 8011e3e:	e7f8      	b.n	8011e32 <__ascii_mbtowc+0x16>

08011e40 <__malloc_lock>:
 8011e40:	4801      	ldr	r0, [pc, #4]	; (8011e48 <__malloc_lock+0x8>)
 8011e42:	f000 bbf1 	b.w	8012628 <__retarget_lock_acquire_recursive>
 8011e46:	bf00      	nop
 8011e48:	24001080 	.word	0x24001080

08011e4c <__malloc_unlock>:
 8011e4c:	4801      	ldr	r0, [pc, #4]	; (8011e54 <__malloc_unlock+0x8>)
 8011e4e:	f000 bbec 	b.w	801262a <__retarget_lock_release_recursive>
 8011e52:	bf00      	nop
 8011e54:	24001080 	.word	0x24001080

08011e58 <__sfputc_r>:
 8011e58:	6893      	ldr	r3, [r2, #8]
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	b410      	push	{r4}
 8011e60:	6093      	str	r3, [r2, #8]
 8011e62:	da08      	bge.n	8011e76 <__sfputc_r+0x1e>
 8011e64:	6994      	ldr	r4, [r2, #24]
 8011e66:	42a3      	cmp	r3, r4
 8011e68:	db01      	blt.n	8011e6e <__sfputc_r+0x16>
 8011e6a:	290a      	cmp	r1, #10
 8011e6c:	d103      	bne.n	8011e76 <__sfputc_r+0x1e>
 8011e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e72:	f000 b94b 	b.w	801210c <__swbuf_r>
 8011e76:	6813      	ldr	r3, [r2, #0]
 8011e78:	1c58      	adds	r0, r3, #1
 8011e7a:	6010      	str	r0, [r2, #0]
 8011e7c:	7019      	strb	r1, [r3, #0]
 8011e7e:	4608      	mov	r0, r1
 8011e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e84:	4770      	bx	lr

08011e86 <__sfputs_r>:
 8011e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e88:	4606      	mov	r6, r0
 8011e8a:	460f      	mov	r7, r1
 8011e8c:	4614      	mov	r4, r2
 8011e8e:	18d5      	adds	r5, r2, r3
 8011e90:	42ac      	cmp	r4, r5
 8011e92:	d101      	bne.n	8011e98 <__sfputs_r+0x12>
 8011e94:	2000      	movs	r0, #0
 8011e96:	e007      	b.n	8011ea8 <__sfputs_r+0x22>
 8011e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e9c:	463a      	mov	r2, r7
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	f7ff ffda 	bl	8011e58 <__sfputc_r>
 8011ea4:	1c43      	adds	r3, r0, #1
 8011ea6:	d1f3      	bne.n	8011e90 <__sfputs_r+0xa>
 8011ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011eac <_vfiprintf_r>:
 8011eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	460d      	mov	r5, r1
 8011eb2:	b09d      	sub	sp, #116	; 0x74
 8011eb4:	4614      	mov	r4, r2
 8011eb6:	4698      	mov	r8, r3
 8011eb8:	4606      	mov	r6, r0
 8011eba:	b118      	cbz	r0, 8011ec4 <_vfiprintf_r+0x18>
 8011ebc:	6983      	ldr	r3, [r0, #24]
 8011ebe:	b90b      	cbnz	r3, 8011ec4 <_vfiprintf_r+0x18>
 8011ec0:	f000 fb14 	bl	80124ec <__sinit>
 8011ec4:	4b89      	ldr	r3, [pc, #548]	; (80120ec <_vfiprintf_r+0x240>)
 8011ec6:	429d      	cmp	r5, r3
 8011ec8:	d11b      	bne.n	8011f02 <_vfiprintf_r+0x56>
 8011eca:	6875      	ldr	r5, [r6, #4]
 8011ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ece:	07d9      	lsls	r1, r3, #31
 8011ed0:	d405      	bmi.n	8011ede <_vfiprintf_r+0x32>
 8011ed2:	89ab      	ldrh	r3, [r5, #12]
 8011ed4:	059a      	lsls	r2, r3, #22
 8011ed6:	d402      	bmi.n	8011ede <_vfiprintf_r+0x32>
 8011ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011eda:	f000 fba5 	bl	8012628 <__retarget_lock_acquire_recursive>
 8011ede:	89ab      	ldrh	r3, [r5, #12]
 8011ee0:	071b      	lsls	r3, r3, #28
 8011ee2:	d501      	bpl.n	8011ee8 <_vfiprintf_r+0x3c>
 8011ee4:	692b      	ldr	r3, [r5, #16]
 8011ee6:	b9eb      	cbnz	r3, 8011f24 <_vfiprintf_r+0x78>
 8011ee8:	4629      	mov	r1, r5
 8011eea:	4630      	mov	r0, r6
 8011eec:	f000 f96e 	bl	80121cc <__swsetup_r>
 8011ef0:	b1c0      	cbz	r0, 8011f24 <_vfiprintf_r+0x78>
 8011ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ef4:	07dc      	lsls	r4, r3, #31
 8011ef6:	d50e      	bpl.n	8011f16 <_vfiprintf_r+0x6a>
 8011ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8011efc:	b01d      	add	sp, #116	; 0x74
 8011efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f02:	4b7b      	ldr	r3, [pc, #492]	; (80120f0 <_vfiprintf_r+0x244>)
 8011f04:	429d      	cmp	r5, r3
 8011f06:	d101      	bne.n	8011f0c <_vfiprintf_r+0x60>
 8011f08:	68b5      	ldr	r5, [r6, #8]
 8011f0a:	e7df      	b.n	8011ecc <_vfiprintf_r+0x20>
 8011f0c:	4b79      	ldr	r3, [pc, #484]	; (80120f4 <_vfiprintf_r+0x248>)
 8011f0e:	429d      	cmp	r5, r3
 8011f10:	bf08      	it	eq
 8011f12:	68f5      	ldreq	r5, [r6, #12]
 8011f14:	e7da      	b.n	8011ecc <_vfiprintf_r+0x20>
 8011f16:	89ab      	ldrh	r3, [r5, #12]
 8011f18:	0598      	lsls	r0, r3, #22
 8011f1a:	d4ed      	bmi.n	8011ef8 <_vfiprintf_r+0x4c>
 8011f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f1e:	f000 fb84 	bl	801262a <__retarget_lock_release_recursive>
 8011f22:	e7e9      	b.n	8011ef8 <_vfiprintf_r+0x4c>
 8011f24:	2300      	movs	r3, #0
 8011f26:	9309      	str	r3, [sp, #36]	; 0x24
 8011f28:	2320      	movs	r3, #32
 8011f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f32:	2330      	movs	r3, #48	; 0x30
 8011f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80120f8 <_vfiprintf_r+0x24c>
 8011f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f3c:	f04f 0901 	mov.w	r9, #1
 8011f40:	4623      	mov	r3, r4
 8011f42:	469a      	mov	sl, r3
 8011f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f48:	b10a      	cbz	r2, 8011f4e <_vfiprintf_r+0xa2>
 8011f4a:	2a25      	cmp	r2, #37	; 0x25
 8011f4c:	d1f9      	bne.n	8011f42 <_vfiprintf_r+0x96>
 8011f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8011f52:	d00b      	beq.n	8011f6c <_vfiprintf_r+0xc0>
 8011f54:	465b      	mov	r3, fp
 8011f56:	4622      	mov	r2, r4
 8011f58:	4629      	mov	r1, r5
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	f7ff ff93 	bl	8011e86 <__sfputs_r>
 8011f60:	3001      	adds	r0, #1
 8011f62:	f000 80aa 	beq.w	80120ba <_vfiprintf_r+0x20e>
 8011f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f68:	445a      	add	r2, fp
 8011f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8011f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f000 80a2 	beq.w	80120ba <_vfiprintf_r+0x20e>
 8011f76:	2300      	movs	r3, #0
 8011f78:	f04f 32ff 	mov.w	r2, #4294967295
 8011f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f80:	f10a 0a01 	add.w	sl, sl, #1
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	9307      	str	r3, [sp, #28]
 8011f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8011f8e:	4654      	mov	r4, sl
 8011f90:	2205      	movs	r2, #5
 8011f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f96:	4858      	ldr	r0, [pc, #352]	; (80120f8 <_vfiprintf_r+0x24c>)
 8011f98:	f7ee f9aa 	bl	80002f0 <memchr>
 8011f9c:	9a04      	ldr	r2, [sp, #16]
 8011f9e:	b9d8      	cbnz	r0, 8011fd8 <_vfiprintf_r+0x12c>
 8011fa0:	06d1      	lsls	r1, r2, #27
 8011fa2:	bf44      	itt	mi
 8011fa4:	2320      	movmi	r3, #32
 8011fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011faa:	0713      	lsls	r3, r2, #28
 8011fac:	bf44      	itt	mi
 8011fae:	232b      	movmi	r3, #43	; 0x2b
 8011fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8011fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8011fba:	d015      	beq.n	8011fe8 <_vfiprintf_r+0x13c>
 8011fbc:	9a07      	ldr	r2, [sp, #28]
 8011fbe:	4654      	mov	r4, sl
 8011fc0:	2000      	movs	r0, #0
 8011fc2:	f04f 0c0a 	mov.w	ip, #10
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fcc:	3b30      	subs	r3, #48	; 0x30
 8011fce:	2b09      	cmp	r3, #9
 8011fd0:	d94e      	bls.n	8012070 <_vfiprintf_r+0x1c4>
 8011fd2:	b1b0      	cbz	r0, 8012002 <_vfiprintf_r+0x156>
 8011fd4:	9207      	str	r2, [sp, #28]
 8011fd6:	e014      	b.n	8012002 <_vfiprintf_r+0x156>
 8011fd8:	eba0 0308 	sub.w	r3, r0, r8
 8011fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8011fe0:	4313      	orrs	r3, r2
 8011fe2:	9304      	str	r3, [sp, #16]
 8011fe4:	46a2      	mov	sl, r4
 8011fe6:	e7d2      	b.n	8011f8e <_vfiprintf_r+0xe2>
 8011fe8:	9b03      	ldr	r3, [sp, #12]
 8011fea:	1d19      	adds	r1, r3, #4
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	9103      	str	r1, [sp, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	bfbb      	ittet	lt
 8011ff4:	425b      	neglt	r3, r3
 8011ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8011ffa:	9307      	strge	r3, [sp, #28]
 8011ffc:	9307      	strlt	r3, [sp, #28]
 8011ffe:	bfb8      	it	lt
 8012000:	9204      	strlt	r2, [sp, #16]
 8012002:	7823      	ldrb	r3, [r4, #0]
 8012004:	2b2e      	cmp	r3, #46	; 0x2e
 8012006:	d10c      	bne.n	8012022 <_vfiprintf_r+0x176>
 8012008:	7863      	ldrb	r3, [r4, #1]
 801200a:	2b2a      	cmp	r3, #42	; 0x2a
 801200c:	d135      	bne.n	801207a <_vfiprintf_r+0x1ce>
 801200e:	9b03      	ldr	r3, [sp, #12]
 8012010:	1d1a      	adds	r2, r3, #4
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	9203      	str	r2, [sp, #12]
 8012016:	2b00      	cmp	r3, #0
 8012018:	bfb8      	it	lt
 801201a:	f04f 33ff 	movlt.w	r3, #4294967295
 801201e:	3402      	adds	r4, #2
 8012020:	9305      	str	r3, [sp, #20]
 8012022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012108 <_vfiprintf_r+0x25c>
 8012026:	7821      	ldrb	r1, [r4, #0]
 8012028:	2203      	movs	r2, #3
 801202a:	4650      	mov	r0, sl
 801202c:	f7ee f960 	bl	80002f0 <memchr>
 8012030:	b140      	cbz	r0, 8012044 <_vfiprintf_r+0x198>
 8012032:	2340      	movs	r3, #64	; 0x40
 8012034:	eba0 000a 	sub.w	r0, r0, sl
 8012038:	fa03 f000 	lsl.w	r0, r3, r0
 801203c:	9b04      	ldr	r3, [sp, #16]
 801203e:	4303      	orrs	r3, r0
 8012040:	3401      	adds	r4, #1
 8012042:	9304      	str	r3, [sp, #16]
 8012044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012048:	482c      	ldr	r0, [pc, #176]	; (80120fc <_vfiprintf_r+0x250>)
 801204a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801204e:	2206      	movs	r2, #6
 8012050:	f7ee f94e 	bl	80002f0 <memchr>
 8012054:	2800      	cmp	r0, #0
 8012056:	d03f      	beq.n	80120d8 <_vfiprintf_r+0x22c>
 8012058:	4b29      	ldr	r3, [pc, #164]	; (8012100 <_vfiprintf_r+0x254>)
 801205a:	bb1b      	cbnz	r3, 80120a4 <_vfiprintf_r+0x1f8>
 801205c:	9b03      	ldr	r3, [sp, #12]
 801205e:	3307      	adds	r3, #7
 8012060:	f023 0307 	bic.w	r3, r3, #7
 8012064:	3308      	adds	r3, #8
 8012066:	9303      	str	r3, [sp, #12]
 8012068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801206a:	443b      	add	r3, r7
 801206c:	9309      	str	r3, [sp, #36]	; 0x24
 801206e:	e767      	b.n	8011f40 <_vfiprintf_r+0x94>
 8012070:	fb0c 3202 	mla	r2, ip, r2, r3
 8012074:	460c      	mov	r4, r1
 8012076:	2001      	movs	r0, #1
 8012078:	e7a5      	b.n	8011fc6 <_vfiprintf_r+0x11a>
 801207a:	2300      	movs	r3, #0
 801207c:	3401      	adds	r4, #1
 801207e:	9305      	str	r3, [sp, #20]
 8012080:	4619      	mov	r1, r3
 8012082:	f04f 0c0a 	mov.w	ip, #10
 8012086:	4620      	mov	r0, r4
 8012088:	f810 2b01 	ldrb.w	r2, [r0], #1
 801208c:	3a30      	subs	r2, #48	; 0x30
 801208e:	2a09      	cmp	r2, #9
 8012090:	d903      	bls.n	801209a <_vfiprintf_r+0x1ee>
 8012092:	2b00      	cmp	r3, #0
 8012094:	d0c5      	beq.n	8012022 <_vfiprintf_r+0x176>
 8012096:	9105      	str	r1, [sp, #20]
 8012098:	e7c3      	b.n	8012022 <_vfiprintf_r+0x176>
 801209a:	fb0c 2101 	mla	r1, ip, r1, r2
 801209e:	4604      	mov	r4, r0
 80120a0:	2301      	movs	r3, #1
 80120a2:	e7f0      	b.n	8012086 <_vfiprintf_r+0x1da>
 80120a4:	ab03      	add	r3, sp, #12
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	462a      	mov	r2, r5
 80120aa:	4b16      	ldr	r3, [pc, #88]	; (8012104 <_vfiprintf_r+0x258>)
 80120ac:	a904      	add	r1, sp, #16
 80120ae:	4630      	mov	r0, r6
 80120b0:	f7fe f86e 	bl	8010190 <_printf_float>
 80120b4:	4607      	mov	r7, r0
 80120b6:	1c78      	adds	r0, r7, #1
 80120b8:	d1d6      	bne.n	8012068 <_vfiprintf_r+0x1bc>
 80120ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120bc:	07d9      	lsls	r1, r3, #31
 80120be:	d405      	bmi.n	80120cc <_vfiprintf_r+0x220>
 80120c0:	89ab      	ldrh	r3, [r5, #12]
 80120c2:	059a      	lsls	r2, r3, #22
 80120c4:	d402      	bmi.n	80120cc <_vfiprintf_r+0x220>
 80120c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120c8:	f000 faaf 	bl	801262a <__retarget_lock_release_recursive>
 80120cc:	89ab      	ldrh	r3, [r5, #12]
 80120ce:	065b      	lsls	r3, r3, #25
 80120d0:	f53f af12 	bmi.w	8011ef8 <_vfiprintf_r+0x4c>
 80120d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120d6:	e711      	b.n	8011efc <_vfiprintf_r+0x50>
 80120d8:	ab03      	add	r3, sp, #12
 80120da:	9300      	str	r3, [sp, #0]
 80120dc:	462a      	mov	r2, r5
 80120de:	4b09      	ldr	r3, [pc, #36]	; (8012104 <_vfiprintf_r+0x258>)
 80120e0:	a904      	add	r1, sp, #16
 80120e2:	4630      	mov	r0, r6
 80120e4:	f7fe fae0 	bl	80106a8 <_printf_i>
 80120e8:	e7e4      	b.n	80120b4 <_vfiprintf_r+0x208>
 80120ea:	bf00      	nop
 80120ec:	080146f4 	.word	0x080146f4
 80120f0:	08014714 	.word	0x08014714
 80120f4:	080146d4 	.word	0x080146d4
 80120f8:	080145c2 	.word	0x080145c2
 80120fc:	080145cc 	.word	0x080145cc
 8012100:	08010191 	.word	0x08010191
 8012104:	08011e87 	.word	0x08011e87
 8012108:	080145c8 	.word	0x080145c8

0801210c <__swbuf_r>:
 801210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210e:	460e      	mov	r6, r1
 8012110:	4614      	mov	r4, r2
 8012112:	4605      	mov	r5, r0
 8012114:	b118      	cbz	r0, 801211e <__swbuf_r+0x12>
 8012116:	6983      	ldr	r3, [r0, #24]
 8012118:	b90b      	cbnz	r3, 801211e <__swbuf_r+0x12>
 801211a:	f000 f9e7 	bl	80124ec <__sinit>
 801211e:	4b21      	ldr	r3, [pc, #132]	; (80121a4 <__swbuf_r+0x98>)
 8012120:	429c      	cmp	r4, r3
 8012122:	d12b      	bne.n	801217c <__swbuf_r+0x70>
 8012124:	686c      	ldr	r4, [r5, #4]
 8012126:	69a3      	ldr	r3, [r4, #24]
 8012128:	60a3      	str	r3, [r4, #8]
 801212a:	89a3      	ldrh	r3, [r4, #12]
 801212c:	071a      	lsls	r2, r3, #28
 801212e:	d52f      	bpl.n	8012190 <__swbuf_r+0x84>
 8012130:	6923      	ldr	r3, [r4, #16]
 8012132:	b36b      	cbz	r3, 8012190 <__swbuf_r+0x84>
 8012134:	6923      	ldr	r3, [r4, #16]
 8012136:	6820      	ldr	r0, [r4, #0]
 8012138:	1ac0      	subs	r0, r0, r3
 801213a:	6963      	ldr	r3, [r4, #20]
 801213c:	b2f6      	uxtb	r6, r6
 801213e:	4283      	cmp	r3, r0
 8012140:	4637      	mov	r7, r6
 8012142:	dc04      	bgt.n	801214e <__swbuf_r+0x42>
 8012144:	4621      	mov	r1, r4
 8012146:	4628      	mov	r0, r5
 8012148:	f000 f93c 	bl	80123c4 <_fflush_r>
 801214c:	bb30      	cbnz	r0, 801219c <__swbuf_r+0x90>
 801214e:	68a3      	ldr	r3, [r4, #8]
 8012150:	3b01      	subs	r3, #1
 8012152:	60a3      	str	r3, [r4, #8]
 8012154:	6823      	ldr	r3, [r4, #0]
 8012156:	1c5a      	adds	r2, r3, #1
 8012158:	6022      	str	r2, [r4, #0]
 801215a:	701e      	strb	r6, [r3, #0]
 801215c:	6963      	ldr	r3, [r4, #20]
 801215e:	3001      	adds	r0, #1
 8012160:	4283      	cmp	r3, r0
 8012162:	d004      	beq.n	801216e <__swbuf_r+0x62>
 8012164:	89a3      	ldrh	r3, [r4, #12]
 8012166:	07db      	lsls	r3, r3, #31
 8012168:	d506      	bpl.n	8012178 <__swbuf_r+0x6c>
 801216a:	2e0a      	cmp	r6, #10
 801216c:	d104      	bne.n	8012178 <__swbuf_r+0x6c>
 801216e:	4621      	mov	r1, r4
 8012170:	4628      	mov	r0, r5
 8012172:	f000 f927 	bl	80123c4 <_fflush_r>
 8012176:	b988      	cbnz	r0, 801219c <__swbuf_r+0x90>
 8012178:	4638      	mov	r0, r7
 801217a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801217c:	4b0a      	ldr	r3, [pc, #40]	; (80121a8 <__swbuf_r+0x9c>)
 801217e:	429c      	cmp	r4, r3
 8012180:	d101      	bne.n	8012186 <__swbuf_r+0x7a>
 8012182:	68ac      	ldr	r4, [r5, #8]
 8012184:	e7cf      	b.n	8012126 <__swbuf_r+0x1a>
 8012186:	4b09      	ldr	r3, [pc, #36]	; (80121ac <__swbuf_r+0xa0>)
 8012188:	429c      	cmp	r4, r3
 801218a:	bf08      	it	eq
 801218c:	68ec      	ldreq	r4, [r5, #12]
 801218e:	e7ca      	b.n	8012126 <__swbuf_r+0x1a>
 8012190:	4621      	mov	r1, r4
 8012192:	4628      	mov	r0, r5
 8012194:	f000 f81a 	bl	80121cc <__swsetup_r>
 8012198:	2800      	cmp	r0, #0
 801219a:	d0cb      	beq.n	8012134 <__swbuf_r+0x28>
 801219c:	f04f 37ff 	mov.w	r7, #4294967295
 80121a0:	e7ea      	b.n	8012178 <__swbuf_r+0x6c>
 80121a2:	bf00      	nop
 80121a4:	080146f4 	.word	0x080146f4
 80121a8:	08014714 	.word	0x08014714
 80121ac:	080146d4 	.word	0x080146d4

080121b0 <__ascii_wctomb>:
 80121b0:	b149      	cbz	r1, 80121c6 <__ascii_wctomb+0x16>
 80121b2:	2aff      	cmp	r2, #255	; 0xff
 80121b4:	bf85      	ittet	hi
 80121b6:	238a      	movhi	r3, #138	; 0x8a
 80121b8:	6003      	strhi	r3, [r0, #0]
 80121ba:	700a      	strbls	r2, [r1, #0]
 80121bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80121c0:	bf98      	it	ls
 80121c2:	2001      	movls	r0, #1
 80121c4:	4770      	bx	lr
 80121c6:	4608      	mov	r0, r1
 80121c8:	4770      	bx	lr
	...

080121cc <__swsetup_r>:
 80121cc:	4b32      	ldr	r3, [pc, #200]	; (8012298 <__swsetup_r+0xcc>)
 80121ce:	b570      	push	{r4, r5, r6, lr}
 80121d0:	681d      	ldr	r5, [r3, #0]
 80121d2:	4606      	mov	r6, r0
 80121d4:	460c      	mov	r4, r1
 80121d6:	b125      	cbz	r5, 80121e2 <__swsetup_r+0x16>
 80121d8:	69ab      	ldr	r3, [r5, #24]
 80121da:	b913      	cbnz	r3, 80121e2 <__swsetup_r+0x16>
 80121dc:	4628      	mov	r0, r5
 80121de:	f000 f985 	bl	80124ec <__sinit>
 80121e2:	4b2e      	ldr	r3, [pc, #184]	; (801229c <__swsetup_r+0xd0>)
 80121e4:	429c      	cmp	r4, r3
 80121e6:	d10f      	bne.n	8012208 <__swsetup_r+0x3c>
 80121e8:	686c      	ldr	r4, [r5, #4]
 80121ea:	89a3      	ldrh	r3, [r4, #12]
 80121ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121f0:	0719      	lsls	r1, r3, #28
 80121f2:	d42c      	bmi.n	801224e <__swsetup_r+0x82>
 80121f4:	06dd      	lsls	r5, r3, #27
 80121f6:	d411      	bmi.n	801221c <__swsetup_r+0x50>
 80121f8:	2309      	movs	r3, #9
 80121fa:	6033      	str	r3, [r6, #0]
 80121fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012200:	81a3      	strh	r3, [r4, #12]
 8012202:	f04f 30ff 	mov.w	r0, #4294967295
 8012206:	e03e      	b.n	8012286 <__swsetup_r+0xba>
 8012208:	4b25      	ldr	r3, [pc, #148]	; (80122a0 <__swsetup_r+0xd4>)
 801220a:	429c      	cmp	r4, r3
 801220c:	d101      	bne.n	8012212 <__swsetup_r+0x46>
 801220e:	68ac      	ldr	r4, [r5, #8]
 8012210:	e7eb      	b.n	80121ea <__swsetup_r+0x1e>
 8012212:	4b24      	ldr	r3, [pc, #144]	; (80122a4 <__swsetup_r+0xd8>)
 8012214:	429c      	cmp	r4, r3
 8012216:	bf08      	it	eq
 8012218:	68ec      	ldreq	r4, [r5, #12]
 801221a:	e7e6      	b.n	80121ea <__swsetup_r+0x1e>
 801221c:	0758      	lsls	r0, r3, #29
 801221e:	d512      	bpl.n	8012246 <__swsetup_r+0x7a>
 8012220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012222:	b141      	cbz	r1, 8012236 <__swsetup_r+0x6a>
 8012224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012228:	4299      	cmp	r1, r3
 801222a:	d002      	beq.n	8012232 <__swsetup_r+0x66>
 801222c:	4630      	mov	r0, r6
 801222e:	f7ff fd0b 	bl	8011c48 <_free_r>
 8012232:	2300      	movs	r3, #0
 8012234:	6363      	str	r3, [r4, #52]	; 0x34
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801223c:	81a3      	strh	r3, [r4, #12]
 801223e:	2300      	movs	r3, #0
 8012240:	6063      	str	r3, [r4, #4]
 8012242:	6923      	ldr	r3, [r4, #16]
 8012244:	6023      	str	r3, [r4, #0]
 8012246:	89a3      	ldrh	r3, [r4, #12]
 8012248:	f043 0308 	orr.w	r3, r3, #8
 801224c:	81a3      	strh	r3, [r4, #12]
 801224e:	6923      	ldr	r3, [r4, #16]
 8012250:	b94b      	cbnz	r3, 8012266 <__swsetup_r+0x9a>
 8012252:	89a3      	ldrh	r3, [r4, #12]
 8012254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801225c:	d003      	beq.n	8012266 <__swsetup_r+0x9a>
 801225e:	4621      	mov	r1, r4
 8012260:	4630      	mov	r0, r6
 8012262:	f000 fa07 	bl	8012674 <__smakebuf_r>
 8012266:	89a0      	ldrh	r0, [r4, #12]
 8012268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801226c:	f010 0301 	ands.w	r3, r0, #1
 8012270:	d00a      	beq.n	8012288 <__swsetup_r+0xbc>
 8012272:	2300      	movs	r3, #0
 8012274:	60a3      	str	r3, [r4, #8]
 8012276:	6963      	ldr	r3, [r4, #20]
 8012278:	425b      	negs	r3, r3
 801227a:	61a3      	str	r3, [r4, #24]
 801227c:	6923      	ldr	r3, [r4, #16]
 801227e:	b943      	cbnz	r3, 8012292 <__swsetup_r+0xc6>
 8012280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012284:	d1ba      	bne.n	80121fc <__swsetup_r+0x30>
 8012286:	bd70      	pop	{r4, r5, r6, pc}
 8012288:	0781      	lsls	r1, r0, #30
 801228a:	bf58      	it	pl
 801228c:	6963      	ldrpl	r3, [r4, #20]
 801228e:	60a3      	str	r3, [r4, #8]
 8012290:	e7f4      	b.n	801227c <__swsetup_r+0xb0>
 8012292:	2000      	movs	r0, #0
 8012294:	e7f7      	b.n	8012286 <__swsetup_r+0xba>
 8012296:	bf00      	nop
 8012298:	2400003c 	.word	0x2400003c
 801229c:	080146f4 	.word	0x080146f4
 80122a0:	08014714 	.word	0x08014714
 80122a4:	080146d4 	.word	0x080146d4

080122a8 <abort>:
 80122a8:	b508      	push	{r3, lr}
 80122aa:	2006      	movs	r0, #6
 80122ac:	f000 fa4a 	bl	8012744 <raise>
 80122b0:	2001      	movs	r0, #1
 80122b2:	f7f2 f9bf 	bl	8004634 <_exit>
	...

080122b8 <__sflush_r>:
 80122b8:	898a      	ldrh	r2, [r1, #12]
 80122ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122be:	4605      	mov	r5, r0
 80122c0:	0710      	lsls	r0, r2, #28
 80122c2:	460c      	mov	r4, r1
 80122c4:	d458      	bmi.n	8012378 <__sflush_r+0xc0>
 80122c6:	684b      	ldr	r3, [r1, #4]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	dc05      	bgt.n	80122d8 <__sflush_r+0x20>
 80122cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	dc02      	bgt.n	80122d8 <__sflush_r+0x20>
 80122d2:	2000      	movs	r0, #0
 80122d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122da:	2e00      	cmp	r6, #0
 80122dc:	d0f9      	beq.n	80122d2 <__sflush_r+0x1a>
 80122de:	2300      	movs	r3, #0
 80122e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80122e4:	682f      	ldr	r7, [r5, #0]
 80122e6:	602b      	str	r3, [r5, #0]
 80122e8:	d032      	beq.n	8012350 <__sflush_r+0x98>
 80122ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80122ec:	89a3      	ldrh	r3, [r4, #12]
 80122ee:	075a      	lsls	r2, r3, #29
 80122f0:	d505      	bpl.n	80122fe <__sflush_r+0x46>
 80122f2:	6863      	ldr	r3, [r4, #4]
 80122f4:	1ac0      	subs	r0, r0, r3
 80122f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80122f8:	b10b      	cbz	r3, 80122fe <__sflush_r+0x46>
 80122fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80122fc:	1ac0      	subs	r0, r0, r3
 80122fe:	2300      	movs	r3, #0
 8012300:	4602      	mov	r2, r0
 8012302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012304:	6a21      	ldr	r1, [r4, #32]
 8012306:	4628      	mov	r0, r5
 8012308:	47b0      	blx	r6
 801230a:	1c43      	adds	r3, r0, #1
 801230c:	89a3      	ldrh	r3, [r4, #12]
 801230e:	d106      	bne.n	801231e <__sflush_r+0x66>
 8012310:	6829      	ldr	r1, [r5, #0]
 8012312:	291d      	cmp	r1, #29
 8012314:	d82c      	bhi.n	8012370 <__sflush_r+0xb8>
 8012316:	4a2a      	ldr	r2, [pc, #168]	; (80123c0 <__sflush_r+0x108>)
 8012318:	40ca      	lsrs	r2, r1
 801231a:	07d6      	lsls	r6, r2, #31
 801231c:	d528      	bpl.n	8012370 <__sflush_r+0xb8>
 801231e:	2200      	movs	r2, #0
 8012320:	6062      	str	r2, [r4, #4]
 8012322:	04d9      	lsls	r1, r3, #19
 8012324:	6922      	ldr	r2, [r4, #16]
 8012326:	6022      	str	r2, [r4, #0]
 8012328:	d504      	bpl.n	8012334 <__sflush_r+0x7c>
 801232a:	1c42      	adds	r2, r0, #1
 801232c:	d101      	bne.n	8012332 <__sflush_r+0x7a>
 801232e:	682b      	ldr	r3, [r5, #0]
 8012330:	b903      	cbnz	r3, 8012334 <__sflush_r+0x7c>
 8012332:	6560      	str	r0, [r4, #84]	; 0x54
 8012334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012336:	602f      	str	r7, [r5, #0]
 8012338:	2900      	cmp	r1, #0
 801233a:	d0ca      	beq.n	80122d2 <__sflush_r+0x1a>
 801233c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012340:	4299      	cmp	r1, r3
 8012342:	d002      	beq.n	801234a <__sflush_r+0x92>
 8012344:	4628      	mov	r0, r5
 8012346:	f7ff fc7f 	bl	8011c48 <_free_r>
 801234a:	2000      	movs	r0, #0
 801234c:	6360      	str	r0, [r4, #52]	; 0x34
 801234e:	e7c1      	b.n	80122d4 <__sflush_r+0x1c>
 8012350:	6a21      	ldr	r1, [r4, #32]
 8012352:	2301      	movs	r3, #1
 8012354:	4628      	mov	r0, r5
 8012356:	47b0      	blx	r6
 8012358:	1c41      	adds	r1, r0, #1
 801235a:	d1c7      	bne.n	80122ec <__sflush_r+0x34>
 801235c:	682b      	ldr	r3, [r5, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d0c4      	beq.n	80122ec <__sflush_r+0x34>
 8012362:	2b1d      	cmp	r3, #29
 8012364:	d001      	beq.n	801236a <__sflush_r+0xb2>
 8012366:	2b16      	cmp	r3, #22
 8012368:	d101      	bne.n	801236e <__sflush_r+0xb6>
 801236a:	602f      	str	r7, [r5, #0]
 801236c:	e7b1      	b.n	80122d2 <__sflush_r+0x1a>
 801236e:	89a3      	ldrh	r3, [r4, #12]
 8012370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012374:	81a3      	strh	r3, [r4, #12]
 8012376:	e7ad      	b.n	80122d4 <__sflush_r+0x1c>
 8012378:	690f      	ldr	r7, [r1, #16]
 801237a:	2f00      	cmp	r7, #0
 801237c:	d0a9      	beq.n	80122d2 <__sflush_r+0x1a>
 801237e:	0793      	lsls	r3, r2, #30
 8012380:	680e      	ldr	r6, [r1, #0]
 8012382:	bf08      	it	eq
 8012384:	694b      	ldreq	r3, [r1, #20]
 8012386:	600f      	str	r7, [r1, #0]
 8012388:	bf18      	it	ne
 801238a:	2300      	movne	r3, #0
 801238c:	eba6 0807 	sub.w	r8, r6, r7
 8012390:	608b      	str	r3, [r1, #8]
 8012392:	f1b8 0f00 	cmp.w	r8, #0
 8012396:	dd9c      	ble.n	80122d2 <__sflush_r+0x1a>
 8012398:	6a21      	ldr	r1, [r4, #32]
 801239a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801239c:	4643      	mov	r3, r8
 801239e:	463a      	mov	r2, r7
 80123a0:	4628      	mov	r0, r5
 80123a2:	47b0      	blx	r6
 80123a4:	2800      	cmp	r0, #0
 80123a6:	dc06      	bgt.n	80123b6 <__sflush_r+0xfe>
 80123a8:	89a3      	ldrh	r3, [r4, #12]
 80123aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123ae:	81a3      	strh	r3, [r4, #12]
 80123b0:	f04f 30ff 	mov.w	r0, #4294967295
 80123b4:	e78e      	b.n	80122d4 <__sflush_r+0x1c>
 80123b6:	4407      	add	r7, r0
 80123b8:	eba8 0800 	sub.w	r8, r8, r0
 80123bc:	e7e9      	b.n	8012392 <__sflush_r+0xda>
 80123be:	bf00      	nop
 80123c0:	20400001 	.word	0x20400001

080123c4 <_fflush_r>:
 80123c4:	b538      	push	{r3, r4, r5, lr}
 80123c6:	690b      	ldr	r3, [r1, #16]
 80123c8:	4605      	mov	r5, r0
 80123ca:	460c      	mov	r4, r1
 80123cc:	b913      	cbnz	r3, 80123d4 <_fflush_r+0x10>
 80123ce:	2500      	movs	r5, #0
 80123d0:	4628      	mov	r0, r5
 80123d2:	bd38      	pop	{r3, r4, r5, pc}
 80123d4:	b118      	cbz	r0, 80123de <_fflush_r+0x1a>
 80123d6:	6983      	ldr	r3, [r0, #24]
 80123d8:	b90b      	cbnz	r3, 80123de <_fflush_r+0x1a>
 80123da:	f000 f887 	bl	80124ec <__sinit>
 80123de:	4b14      	ldr	r3, [pc, #80]	; (8012430 <_fflush_r+0x6c>)
 80123e0:	429c      	cmp	r4, r3
 80123e2:	d11b      	bne.n	801241c <_fflush_r+0x58>
 80123e4:	686c      	ldr	r4, [r5, #4]
 80123e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d0ef      	beq.n	80123ce <_fflush_r+0xa>
 80123ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80123f0:	07d0      	lsls	r0, r2, #31
 80123f2:	d404      	bmi.n	80123fe <_fflush_r+0x3a>
 80123f4:	0599      	lsls	r1, r3, #22
 80123f6:	d402      	bmi.n	80123fe <_fflush_r+0x3a>
 80123f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123fa:	f000 f915 	bl	8012628 <__retarget_lock_acquire_recursive>
 80123fe:	4628      	mov	r0, r5
 8012400:	4621      	mov	r1, r4
 8012402:	f7ff ff59 	bl	80122b8 <__sflush_r>
 8012406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012408:	07da      	lsls	r2, r3, #31
 801240a:	4605      	mov	r5, r0
 801240c:	d4e0      	bmi.n	80123d0 <_fflush_r+0xc>
 801240e:	89a3      	ldrh	r3, [r4, #12]
 8012410:	059b      	lsls	r3, r3, #22
 8012412:	d4dd      	bmi.n	80123d0 <_fflush_r+0xc>
 8012414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012416:	f000 f908 	bl	801262a <__retarget_lock_release_recursive>
 801241a:	e7d9      	b.n	80123d0 <_fflush_r+0xc>
 801241c:	4b05      	ldr	r3, [pc, #20]	; (8012434 <_fflush_r+0x70>)
 801241e:	429c      	cmp	r4, r3
 8012420:	d101      	bne.n	8012426 <_fflush_r+0x62>
 8012422:	68ac      	ldr	r4, [r5, #8]
 8012424:	e7df      	b.n	80123e6 <_fflush_r+0x22>
 8012426:	4b04      	ldr	r3, [pc, #16]	; (8012438 <_fflush_r+0x74>)
 8012428:	429c      	cmp	r4, r3
 801242a:	bf08      	it	eq
 801242c:	68ec      	ldreq	r4, [r5, #12]
 801242e:	e7da      	b.n	80123e6 <_fflush_r+0x22>
 8012430:	080146f4 	.word	0x080146f4
 8012434:	08014714 	.word	0x08014714
 8012438:	080146d4 	.word	0x080146d4

0801243c <std>:
 801243c:	2300      	movs	r3, #0
 801243e:	b510      	push	{r4, lr}
 8012440:	4604      	mov	r4, r0
 8012442:	e9c0 3300 	strd	r3, r3, [r0]
 8012446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801244a:	6083      	str	r3, [r0, #8]
 801244c:	8181      	strh	r1, [r0, #12]
 801244e:	6643      	str	r3, [r0, #100]	; 0x64
 8012450:	81c2      	strh	r2, [r0, #14]
 8012452:	6183      	str	r3, [r0, #24]
 8012454:	4619      	mov	r1, r3
 8012456:	2208      	movs	r2, #8
 8012458:	305c      	adds	r0, #92	; 0x5c
 801245a:	f7fd fe01 	bl	8010060 <memset>
 801245e:	4b05      	ldr	r3, [pc, #20]	; (8012474 <std+0x38>)
 8012460:	6263      	str	r3, [r4, #36]	; 0x24
 8012462:	4b05      	ldr	r3, [pc, #20]	; (8012478 <std+0x3c>)
 8012464:	62a3      	str	r3, [r4, #40]	; 0x28
 8012466:	4b05      	ldr	r3, [pc, #20]	; (801247c <std+0x40>)
 8012468:	62e3      	str	r3, [r4, #44]	; 0x2c
 801246a:	4b05      	ldr	r3, [pc, #20]	; (8012480 <std+0x44>)
 801246c:	6224      	str	r4, [r4, #32]
 801246e:	6323      	str	r3, [r4, #48]	; 0x30
 8012470:	bd10      	pop	{r4, pc}
 8012472:	bf00      	nop
 8012474:	0801277d 	.word	0x0801277d
 8012478:	0801279f 	.word	0x0801279f
 801247c:	080127d7 	.word	0x080127d7
 8012480:	080127fb 	.word	0x080127fb

08012484 <_cleanup_r>:
 8012484:	4901      	ldr	r1, [pc, #4]	; (801248c <_cleanup_r+0x8>)
 8012486:	f000 b8af 	b.w	80125e8 <_fwalk_reent>
 801248a:	bf00      	nop
 801248c:	080123c5 	.word	0x080123c5

08012490 <__sfmoreglue>:
 8012490:	b570      	push	{r4, r5, r6, lr}
 8012492:	1e4a      	subs	r2, r1, #1
 8012494:	2568      	movs	r5, #104	; 0x68
 8012496:	4355      	muls	r5, r2
 8012498:	460e      	mov	r6, r1
 801249a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801249e:	f7ff fc23 	bl	8011ce8 <_malloc_r>
 80124a2:	4604      	mov	r4, r0
 80124a4:	b140      	cbz	r0, 80124b8 <__sfmoreglue+0x28>
 80124a6:	2100      	movs	r1, #0
 80124a8:	e9c0 1600 	strd	r1, r6, [r0]
 80124ac:	300c      	adds	r0, #12
 80124ae:	60a0      	str	r0, [r4, #8]
 80124b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80124b4:	f7fd fdd4 	bl	8010060 <memset>
 80124b8:	4620      	mov	r0, r4
 80124ba:	bd70      	pop	{r4, r5, r6, pc}

080124bc <__sfp_lock_acquire>:
 80124bc:	4801      	ldr	r0, [pc, #4]	; (80124c4 <__sfp_lock_acquire+0x8>)
 80124be:	f000 b8b3 	b.w	8012628 <__retarget_lock_acquire_recursive>
 80124c2:	bf00      	nop
 80124c4:	24001084 	.word	0x24001084

080124c8 <__sfp_lock_release>:
 80124c8:	4801      	ldr	r0, [pc, #4]	; (80124d0 <__sfp_lock_release+0x8>)
 80124ca:	f000 b8ae 	b.w	801262a <__retarget_lock_release_recursive>
 80124ce:	bf00      	nop
 80124d0:	24001084 	.word	0x24001084

080124d4 <__sinit_lock_acquire>:
 80124d4:	4801      	ldr	r0, [pc, #4]	; (80124dc <__sinit_lock_acquire+0x8>)
 80124d6:	f000 b8a7 	b.w	8012628 <__retarget_lock_acquire_recursive>
 80124da:	bf00      	nop
 80124dc:	2400107f 	.word	0x2400107f

080124e0 <__sinit_lock_release>:
 80124e0:	4801      	ldr	r0, [pc, #4]	; (80124e8 <__sinit_lock_release+0x8>)
 80124e2:	f000 b8a2 	b.w	801262a <__retarget_lock_release_recursive>
 80124e6:	bf00      	nop
 80124e8:	2400107f 	.word	0x2400107f

080124ec <__sinit>:
 80124ec:	b510      	push	{r4, lr}
 80124ee:	4604      	mov	r4, r0
 80124f0:	f7ff fff0 	bl	80124d4 <__sinit_lock_acquire>
 80124f4:	69a3      	ldr	r3, [r4, #24]
 80124f6:	b11b      	cbz	r3, 8012500 <__sinit+0x14>
 80124f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124fc:	f7ff bff0 	b.w	80124e0 <__sinit_lock_release>
 8012500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012504:	6523      	str	r3, [r4, #80]	; 0x50
 8012506:	4b13      	ldr	r3, [pc, #76]	; (8012554 <__sinit+0x68>)
 8012508:	4a13      	ldr	r2, [pc, #76]	; (8012558 <__sinit+0x6c>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	62a2      	str	r2, [r4, #40]	; 0x28
 801250e:	42a3      	cmp	r3, r4
 8012510:	bf04      	itt	eq
 8012512:	2301      	moveq	r3, #1
 8012514:	61a3      	streq	r3, [r4, #24]
 8012516:	4620      	mov	r0, r4
 8012518:	f000 f820 	bl	801255c <__sfp>
 801251c:	6060      	str	r0, [r4, #4]
 801251e:	4620      	mov	r0, r4
 8012520:	f000 f81c 	bl	801255c <__sfp>
 8012524:	60a0      	str	r0, [r4, #8]
 8012526:	4620      	mov	r0, r4
 8012528:	f000 f818 	bl	801255c <__sfp>
 801252c:	2200      	movs	r2, #0
 801252e:	60e0      	str	r0, [r4, #12]
 8012530:	2104      	movs	r1, #4
 8012532:	6860      	ldr	r0, [r4, #4]
 8012534:	f7ff ff82 	bl	801243c <std>
 8012538:	68a0      	ldr	r0, [r4, #8]
 801253a:	2201      	movs	r2, #1
 801253c:	2109      	movs	r1, #9
 801253e:	f7ff ff7d 	bl	801243c <std>
 8012542:	68e0      	ldr	r0, [r4, #12]
 8012544:	2202      	movs	r2, #2
 8012546:	2112      	movs	r1, #18
 8012548:	f7ff ff78 	bl	801243c <std>
 801254c:	2301      	movs	r3, #1
 801254e:	61a3      	str	r3, [r4, #24]
 8012550:	e7d2      	b.n	80124f8 <__sinit+0xc>
 8012552:	bf00      	nop
 8012554:	08014350 	.word	0x08014350
 8012558:	08012485 	.word	0x08012485

0801255c <__sfp>:
 801255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255e:	4607      	mov	r7, r0
 8012560:	f7ff ffac 	bl	80124bc <__sfp_lock_acquire>
 8012564:	4b1e      	ldr	r3, [pc, #120]	; (80125e0 <__sfp+0x84>)
 8012566:	681e      	ldr	r6, [r3, #0]
 8012568:	69b3      	ldr	r3, [r6, #24]
 801256a:	b913      	cbnz	r3, 8012572 <__sfp+0x16>
 801256c:	4630      	mov	r0, r6
 801256e:	f7ff ffbd 	bl	80124ec <__sinit>
 8012572:	3648      	adds	r6, #72	; 0x48
 8012574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012578:	3b01      	subs	r3, #1
 801257a:	d503      	bpl.n	8012584 <__sfp+0x28>
 801257c:	6833      	ldr	r3, [r6, #0]
 801257e:	b30b      	cbz	r3, 80125c4 <__sfp+0x68>
 8012580:	6836      	ldr	r6, [r6, #0]
 8012582:	e7f7      	b.n	8012574 <__sfp+0x18>
 8012584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012588:	b9d5      	cbnz	r5, 80125c0 <__sfp+0x64>
 801258a:	4b16      	ldr	r3, [pc, #88]	; (80125e4 <__sfp+0x88>)
 801258c:	60e3      	str	r3, [r4, #12]
 801258e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012592:	6665      	str	r5, [r4, #100]	; 0x64
 8012594:	f000 f847 	bl	8012626 <__retarget_lock_init_recursive>
 8012598:	f7ff ff96 	bl	80124c8 <__sfp_lock_release>
 801259c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80125a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80125a4:	6025      	str	r5, [r4, #0]
 80125a6:	61a5      	str	r5, [r4, #24]
 80125a8:	2208      	movs	r2, #8
 80125aa:	4629      	mov	r1, r5
 80125ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80125b0:	f7fd fd56 	bl	8010060 <memset>
 80125b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80125b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80125bc:	4620      	mov	r0, r4
 80125be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125c0:	3468      	adds	r4, #104	; 0x68
 80125c2:	e7d9      	b.n	8012578 <__sfp+0x1c>
 80125c4:	2104      	movs	r1, #4
 80125c6:	4638      	mov	r0, r7
 80125c8:	f7ff ff62 	bl	8012490 <__sfmoreglue>
 80125cc:	4604      	mov	r4, r0
 80125ce:	6030      	str	r0, [r6, #0]
 80125d0:	2800      	cmp	r0, #0
 80125d2:	d1d5      	bne.n	8012580 <__sfp+0x24>
 80125d4:	f7ff ff78 	bl	80124c8 <__sfp_lock_release>
 80125d8:	230c      	movs	r3, #12
 80125da:	603b      	str	r3, [r7, #0]
 80125dc:	e7ee      	b.n	80125bc <__sfp+0x60>
 80125de:	bf00      	nop
 80125e0:	08014350 	.word	0x08014350
 80125e4:	ffff0001 	.word	0xffff0001

080125e8 <_fwalk_reent>:
 80125e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125ec:	4606      	mov	r6, r0
 80125ee:	4688      	mov	r8, r1
 80125f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80125f4:	2700      	movs	r7, #0
 80125f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80125fa:	f1b9 0901 	subs.w	r9, r9, #1
 80125fe:	d505      	bpl.n	801260c <_fwalk_reent+0x24>
 8012600:	6824      	ldr	r4, [r4, #0]
 8012602:	2c00      	cmp	r4, #0
 8012604:	d1f7      	bne.n	80125f6 <_fwalk_reent+0xe>
 8012606:	4638      	mov	r0, r7
 8012608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801260c:	89ab      	ldrh	r3, [r5, #12]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d907      	bls.n	8012622 <_fwalk_reent+0x3a>
 8012612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012616:	3301      	adds	r3, #1
 8012618:	d003      	beq.n	8012622 <_fwalk_reent+0x3a>
 801261a:	4629      	mov	r1, r5
 801261c:	4630      	mov	r0, r6
 801261e:	47c0      	blx	r8
 8012620:	4307      	orrs	r7, r0
 8012622:	3568      	adds	r5, #104	; 0x68
 8012624:	e7e9      	b.n	80125fa <_fwalk_reent+0x12>

08012626 <__retarget_lock_init_recursive>:
 8012626:	4770      	bx	lr

08012628 <__retarget_lock_acquire_recursive>:
 8012628:	4770      	bx	lr

0801262a <__retarget_lock_release_recursive>:
 801262a:	4770      	bx	lr

0801262c <__swhatbuf_r>:
 801262c:	b570      	push	{r4, r5, r6, lr}
 801262e:	460e      	mov	r6, r1
 8012630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012634:	2900      	cmp	r1, #0
 8012636:	b096      	sub	sp, #88	; 0x58
 8012638:	4614      	mov	r4, r2
 801263a:	461d      	mov	r5, r3
 801263c:	da07      	bge.n	801264e <__swhatbuf_r+0x22>
 801263e:	2300      	movs	r3, #0
 8012640:	602b      	str	r3, [r5, #0]
 8012642:	89b3      	ldrh	r3, [r6, #12]
 8012644:	061a      	lsls	r2, r3, #24
 8012646:	d410      	bmi.n	801266a <__swhatbuf_r+0x3e>
 8012648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801264c:	e00e      	b.n	801266c <__swhatbuf_r+0x40>
 801264e:	466a      	mov	r2, sp
 8012650:	f000 f8fa 	bl	8012848 <_fstat_r>
 8012654:	2800      	cmp	r0, #0
 8012656:	dbf2      	blt.n	801263e <__swhatbuf_r+0x12>
 8012658:	9a01      	ldr	r2, [sp, #4]
 801265a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801265e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012662:	425a      	negs	r2, r3
 8012664:	415a      	adcs	r2, r3
 8012666:	602a      	str	r2, [r5, #0]
 8012668:	e7ee      	b.n	8012648 <__swhatbuf_r+0x1c>
 801266a:	2340      	movs	r3, #64	; 0x40
 801266c:	2000      	movs	r0, #0
 801266e:	6023      	str	r3, [r4, #0]
 8012670:	b016      	add	sp, #88	; 0x58
 8012672:	bd70      	pop	{r4, r5, r6, pc}

08012674 <__smakebuf_r>:
 8012674:	898b      	ldrh	r3, [r1, #12]
 8012676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012678:	079d      	lsls	r5, r3, #30
 801267a:	4606      	mov	r6, r0
 801267c:	460c      	mov	r4, r1
 801267e:	d507      	bpl.n	8012690 <__smakebuf_r+0x1c>
 8012680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012684:	6023      	str	r3, [r4, #0]
 8012686:	6123      	str	r3, [r4, #16]
 8012688:	2301      	movs	r3, #1
 801268a:	6163      	str	r3, [r4, #20]
 801268c:	b002      	add	sp, #8
 801268e:	bd70      	pop	{r4, r5, r6, pc}
 8012690:	ab01      	add	r3, sp, #4
 8012692:	466a      	mov	r2, sp
 8012694:	f7ff ffca 	bl	801262c <__swhatbuf_r>
 8012698:	9900      	ldr	r1, [sp, #0]
 801269a:	4605      	mov	r5, r0
 801269c:	4630      	mov	r0, r6
 801269e:	f7ff fb23 	bl	8011ce8 <_malloc_r>
 80126a2:	b948      	cbnz	r0, 80126b8 <__smakebuf_r+0x44>
 80126a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126a8:	059a      	lsls	r2, r3, #22
 80126aa:	d4ef      	bmi.n	801268c <__smakebuf_r+0x18>
 80126ac:	f023 0303 	bic.w	r3, r3, #3
 80126b0:	f043 0302 	orr.w	r3, r3, #2
 80126b4:	81a3      	strh	r3, [r4, #12]
 80126b6:	e7e3      	b.n	8012680 <__smakebuf_r+0xc>
 80126b8:	4b0d      	ldr	r3, [pc, #52]	; (80126f0 <__smakebuf_r+0x7c>)
 80126ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80126bc:	89a3      	ldrh	r3, [r4, #12]
 80126be:	6020      	str	r0, [r4, #0]
 80126c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126c4:	81a3      	strh	r3, [r4, #12]
 80126c6:	9b00      	ldr	r3, [sp, #0]
 80126c8:	6163      	str	r3, [r4, #20]
 80126ca:	9b01      	ldr	r3, [sp, #4]
 80126cc:	6120      	str	r0, [r4, #16]
 80126ce:	b15b      	cbz	r3, 80126e8 <__smakebuf_r+0x74>
 80126d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126d4:	4630      	mov	r0, r6
 80126d6:	f000 f8c9 	bl	801286c <_isatty_r>
 80126da:	b128      	cbz	r0, 80126e8 <__smakebuf_r+0x74>
 80126dc:	89a3      	ldrh	r3, [r4, #12]
 80126de:	f023 0303 	bic.w	r3, r3, #3
 80126e2:	f043 0301 	orr.w	r3, r3, #1
 80126e6:	81a3      	strh	r3, [r4, #12]
 80126e8:	89a0      	ldrh	r0, [r4, #12]
 80126ea:	4305      	orrs	r5, r0
 80126ec:	81a5      	strh	r5, [r4, #12]
 80126ee:	e7cd      	b.n	801268c <__smakebuf_r+0x18>
 80126f0:	08012485 	.word	0x08012485

080126f4 <_raise_r>:
 80126f4:	291f      	cmp	r1, #31
 80126f6:	b538      	push	{r3, r4, r5, lr}
 80126f8:	4604      	mov	r4, r0
 80126fa:	460d      	mov	r5, r1
 80126fc:	d904      	bls.n	8012708 <_raise_r+0x14>
 80126fe:	2316      	movs	r3, #22
 8012700:	6003      	str	r3, [r0, #0]
 8012702:	f04f 30ff 	mov.w	r0, #4294967295
 8012706:	bd38      	pop	{r3, r4, r5, pc}
 8012708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801270a:	b112      	cbz	r2, 8012712 <_raise_r+0x1e>
 801270c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012710:	b94b      	cbnz	r3, 8012726 <_raise_r+0x32>
 8012712:	4620      	mov	r0, r4
 8012714:	f000 f830 	bl	8012778 <_getpid_r>
 8012718:	462a      	mov	r2, r5
 801271a:	4601      	mov	r1, r0
 801271c:	4620      	mov	r0, r4
 801271e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012722:	f000 b817 	b.w	8012754 <_kill_r>
 8012726:	2b01      	cmp	r3, #1
 8012728:	d00a      	beq.n	8012740 <_raise_r+0x4c>
 801272a:	1c59      	adds	r1, r3, #1
 801272c:	d103      	bne.n	8012736 <_raise_r+0x42>
 801272e:	2316      	movs	r3, #22
 8012730:	6003      	str	r3, [r0, #0]
 8012732:	2001      	movs	r0, #1
 8012734:	e7e7      	b.n	8012706 <_raise_r+0x12>
 8012736:	2400      	movs	r4, #0
 8012738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801273c:	4628      	mov	r0, r5
 801273e:	4798      	blx	r3
 8012740:	2000      	movs	r0, #0
 8012742:	e7e0      	b.n	8012706 <_raise_r+0x12>

08012744 <raise>:
 8012744:	4b02      	ldr	r3, [pc, #8]	; (8012750 <raise+0xc>)
 8012746:	4601      	mov	r1, r0
 8012748:	6818      	ldr	r0, [r3, #0]
 801274a:	f7ff bfd3 	b.w	80126f4 <_raise_r>
 801274e:	bf00      	nop
 8012750:	2400003c 	.word	0x2400003c

08012754 <_kill_r>:
 8012754:	b538      	push	{r3, r4, r5, lr}
 8012756:	4d07      	ldr	r5, [pc, #28]	; (8012774 <_kill_r+0x20>)
 8012758:	2300      	movs	r3, #0
 801275a:	4604      	mov	r4, r0
 801275c:	4608      	mov	r0, r1
 801275e:	4611      	mov	r1, r2
 8012760:	602b      	str	r3, [r5, #0]
 8012762:	f7f1 ff57 	bl	8004614 <_kill>
 8012766:	1c43      	adds	r3, r0, #1
 8012768:	d102      	bne.n	8012770 <_kill_r+0x1c>
 801276a:	682b      	ldr	r3, [r5, #0]
 801276c:	b103      	cbz	r3, 8012770 <_kill_r+0x1c>
 801276e:	6023      	str	r3, [r4, #0]
 8012770:	bd38      	pop	{r3, r4, r5, pc}
 8012772:	bf00      	nop
 8012774:	24001078 	.word	0x24001078

08012778 <_getpid_r>:
 8012778:	f7f1 bf44 	b.w	8004604 <_getpid>

0801277c <__sread>:
 801277c:	b510      	push	{r4, lr}
 801277e:	460c      	mov	r4, r1
 8012780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012784:	f000 f894 	bl	80128b0 <_read_r>
 8012788:	2800      	cmp	r0, #0
 801278a:	bfab      	itete	ge
 801278c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801278e:	89a3      	ldrhlt	r3, [r4, #12]
 8012790:	181b      	addge	r3, r3, r0
 8012792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012796:	bfac      	ite	ge
 8012798:	6563      	strge	r3, [r4, #84]	; 0x54
 801279a:	81a3      	strhlt	r3, [r4, #12]
 801279c:	bd10      	pop	{r4, pc}

0801279e <__swrite>:
 801279e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a2:	461f      	mov	r7, r3
 80127a4:	898b      	ldrh	r3, [r1, #12]
 80127a6:	05db      	lsls	r3, r3, #23
 80127a8:	4605      	mov	r5, r0
 80127aa:	460c      	mov	r4, r1
 80127ac:	4616      	mov	r6, r2
 80127ae:	d505      	bpl.n	80127bc <__swrite+0x1e>
 80127b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127b4:	2302      	movs	r3, #2
 80127b6:	2200      	movs	r2, #0
 80127b8:	f000 f868 	bl	801288c <_lseek_r>
 80127bc:	89a3      	ldrh	r3, [r4, #12]
 80127be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127c6:	81a3      	strh	r3, [r4, #12]
 80127c8:	4632      	mov	r2, r6
 80127ca:	463b      	mov	r3, r7
 80127cc:	4628      	mov	r0, r5
 80127ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127d2:	f000 b817 	b.w	8012804 <_write_r>

080127d6 <__sseek>:
 80127d6:	b510      	push	{r4, lr}
 80127d8:	460c      	mov	r4, r1
 80127da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127de:	f000 f855 	bl	801288c <_lseek_r>
 80127e2:	1c43      	adds	r3, r0, #1
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	bf15      	itete	ne
 80127e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80127ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80127ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80127f2:	81a3      	strheq	r3, [r4, #12]
 80127f4:	bf18      	it	ne
 80127f6:	81a3      	strhne	r3, [r4, #12]
 80127f8:	bd10      	pop	{r4, pc}

080127fa <__sclose>:
 80127fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127fe:	f000 b813 	b.w	8012828 <_close_r>
	...

08012804 <_write_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d07      	ldr	r5, [pc, #28]	; (8012824 <_write_r+0x20>)
 8012808:	4604      	mov	r4, r0
 801280a:	4608      	mov	r0, r1
 801280c:	4611      	mov	r1, r2
 801280e:	2200      	movs	r2, #0
 8012810:	602a      	str	r2, [r5, #0]
 8012812:	461a      	mov	r2, r3
 8012814:	f7f1 ff35 	bl	8004682 <_write>
 8012818:	1c43      	adds	r3, r0, #1
 801281a:	d102      	bne.n	8012822 <_write_r+0x1e>
 801281c:	682b      	ldr	r3, [r5, #0]
 801281e:	b103      	cbz	r3, 8012822 <_write_r+0x1e>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	24001078 	.word	0x24001078

08012828 <_close_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4d06      	ldr	r5, [pc, #24]	; (8012844 <_close_r+0x1c>)
 801282c:	2300      	movs	r3, #0
 801282e:	4604      	mov	r4, r0
 8012830:	4608      	mov	r0, r1
 8012832:	602b      	str	r3, [r5, #0]
 8012834:	f7f1 ff41 	bl	80046ba <_close>
 8012838:	1c43      	adds	r3, r0, #1
 801283a:	d102      	bne.n	8012842 <_close_r+0x1a>
 801283c:	682b      	ldr	r3, [r5, #0]
 801283e:	b103      	cbz	r3, 8012842 <_close_r+0x1a>
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	bd38      	pop	{r3, r4, r5, pc}
 8012844:	24001078 	.word	0x24001078

08012848 <_fstat_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	; (8012868 <_fstat_r+0x20>)
 801284c:	2300      	movs	r3, #0
 801284e:	4604      	mov	r4, r0
 8012850:	4608      	mov	r0, r1
 8012852:	4611      	mov	r1, r2
 8012854:	602b      	str	r3, [r5, #0]
 8012856:	f7f1 ff3c 	bl	80046d2 <_fstat>
 801285a:	1c43      	adds	r3, r0, #1
 801285c:	d102      	bne.n	8012864 <_fstat_r+0x1c>
 801285e:	682b      	ldr	r3, [r5, #0]
 8012860:	b103      	cbz	r3, 8012864 <_fstat_r+0x1c>
 8012862:	6023      	str	r3, [r4, #0]
 8012864:	bd38      	pop	{r3, r4, r5, pc}
 8012866:	bf00      	nop
 8012868:	24001078 	.word	0x24001078

0801286c <_isatty_r>:
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	4d06      	ldr	r5, [pc, #24]	; (8012888 <_isatty_r+0x1c>)
 8012870:	2300      	movs	r3, #0
 8012872:	4604      	mov	r4, r0
 8012874:	4608      	mov	r0, r1
 8012876:	602b      	str	r3, [r5, #0]
 8012878:	f7f1 ff3b 	bl	80046f2 <_isatty>
 801287c:	1c43      	adds	r3, r0, #1
 801287e:	d102      	bne.n	8012886 <_isatty_r+0x1a>
 8012880:	682b      	ldr	r3, [r5, #0]
 8012882:	b103      	cbz	r3, 8012886 <_isatty_r+0x1a>
 8012884:	6023      	str	r3, [r4, #0]
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	24001078 	.word	0x24001078

0801288c <_lseek_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d07      	ldr	r5, [pc, #28]	; (80128ac <_lseek_r+0x20>)
 8012890:	4604      	mov	r4, r0
 8012892:	4608      	mov	r0, r1
 8012894:	4611      	mov	r1, r2
 8012896:	2200      	movs	r2, #0
 8012898:	602a      	str	r2, [r5, #0]
 801289a:	461a      	mov	r2, r3
 801289c:	f7f1 ff34 	bl	8004708 <_lseek>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d102      	bne.n	80128aa <_lseek_r+0x1e>
 80128a4:	682b      	ldr	r3, [r5, #0]
 80128a6:	b103      	cbz	r3, 80128aa <_lseek_r+0x1e>
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	24001078 	.word	0x24001078

080128b0 <_read_r>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	4d07      	ldr	r5, [pc, #28]	; (80128d0 <_read_r+0x20>)
 80128b4:	4604      	mov	r4, r0
 80128b6:	4608      	mov	r0, r1
 80128b8:	4611      	mov	r1, r2
 80128ba:	2200      	movs	r2, #0
 80128bc:	602a      	str	r2, [r5, #0]
 80128be:	461a      	mov	r2, r3
 80128c0:	f7f1 fec2 	bl	8004648 <_read>
 80128c4:	1c43      	adds	r3, r0, #1
 80128c6:	d102      	bne.n	80128ce <_read_r+0x1e>
 80128c8:	682b      	ldr	r3, [r5, #0]
 80128ca:	b103      	cbz	r3, 80128ce <_read_r+0x1e>
 80128cc:	6023      	str	r3, [r4, #0]
 80128ce:	bd38      	pop	{r3, r4, r5, pc}
 80128d0:	24001078 	.word	0x24001078

080128d4 <_init>:
 80128d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128d6:	bf00      	nop
 80128d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128da:	bc08      	pop	{r3}
 80128dc:	469e      	mov	lr, r3
 80128de:	4770      	bx	lr

080128e0 <_fini>:
 80128e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128e2:	bf00      	nop
 80128e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128e6:	bc08      	pop	{r3}
 80128e8:	469e      	mov	lr, r3
 80128ea:	4770      	bx	lr
