
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c8c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f6c  08009f6c  00019f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f70  08009f70  00019f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08009f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000444  20000014  08009f88  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000458  08009f88  00020458  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001faec  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f84  00000000  00000000  0003fb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001258  00000000  00000000  00042ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001180  00000000  00000000  00043d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000035df  00000000  00000000  00044e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016c42  00000000  00000000  0004846f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165430  00000000  00000000  0005f0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c44e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e78  00000000  00000000  001c4534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009f0c 	.word	0x08009f0c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	08009f0c 	.word	0x08009f0c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 f8c6 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f844 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fabc 	bl	8000b58 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fa72 	bl	8000ac8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 fa24 	bl	8000a30 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005e8:	f000 f90c 	bl	8000804 <MX_TIM2_Init>
  MX_UART4_Init();
 80005ec:	f000 f9d0 	bl	8000990 <MX_UART4_Init>
  MX_SPI1_Init();
 80005f0:	f000 f8b2 	bl	8000758 <MX_SPI1_Init>
  MX_TIM4_Init();
 80005f4:	f000 f954 	bl	80008a0 <MX_TIM4_Init>


  /* Stepper motors initialization */

//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2101      	movs	r1, #1
 80005fc:	4813      	ldr	r0, [pc, #76]	; (800064c <main+0x7c>)
 80005fe:	f003 fe33 	bl	8004268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0x7c>)
 800060a:	f003 fe2d 	bl	8004268 <HAL_GPIO_WritePin>


  HAL_TIM_Base_Start_IT(&htim2);
 800060e:	4810      	ldr	r0, [pc, #64]	; (8000650 <main+0x80>)
 8000610:	f006 fde6 	bl	80071e0 <HAL_TIM_Base_Start_IT>
	 HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000614:	2104      	movs	r1, #4
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <main+0x84>)
 8000618:	f006 ffbc 	bl	8007594 <HAL_TIM_PWM_Stop>
	  TIM4->ARR = (480000000U/(((TIM4->PSC)+1)*freq))-1;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <main+0x88>)
 800061e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000620:	3301      	adds	r3, #1
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <main+0x8c>)
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <main+0x90>)
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	4a09      	ldr	r2, [pc, #36]	; (8000658 <main+0x88>)
 8000632:	3b01      	subs	r3, #1
 8000634:	62d3      	str	r3, [r2, #44]	; 0x2c
	  TIM4->CCR2 = ((TIM4->ARR)+1)/2;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <main+0x88>)
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063a:	3301      	adds	r3, #1
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <main+0x88>)
 800063e:	085b      	lsrs	r3, r3, #1
 8000640:	6393      	str	r3, [r2, #56]	; 0x38
	 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000642:	2104      	movs	r1, #4
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <main+0x84>)
 8000646:	f006 fe9d 	bl	8007384 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0x7a>
 800064c:	58020400 	.word	0x58020400
 8000650:	20000390 	.word	0x20000390
 8000654:	200000ac 	.word	0x200000ac
 8000658:	40000800 	.word	0x40000800
 800065c:	20000000 	.word	0x20000000
 8000660:	1c9c3800 	.word	0x1c9c3800

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09c      	sub	sp, #112	; 0x70
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066e:	224c      	movs	r2, #76	; 0x4c
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 fc42 	bl	8009efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f009 fc3c 	bl	8009efc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000684:	2002      	movs	r0, #2
 8000686:	f003 fe3d 	bl	8004304 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <SystemClock_Config+0xec>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <SystemClock_Config+0xec>)
 8000694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <SystemClock_Config+0xec>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemClock_Config+0xf0>)
 80006a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemClock_Config+0xf0>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xf0>)
 80006b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006bc:	bf00      	nop
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SystemClock_Config+0xec>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ca:	d1f8      	bne.n	80006be <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80006de:	2303      	movs	r3, #3
 80006e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006e2:	233c      	movs	r3, #60	; 0x3c
 80006e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006ea:	2305      	movs	r3, #5
 80006ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f2:	230c      	movs	r3, #12
 80006f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fe38 	bl	8004378 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800070e:	f000 fbf9 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	233f      	movs	r3, #63	; 0x3f
 8000714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800071e:	2308      	movs	r3, #8
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000726:	2340      	movs	r3, #64	; 0x40
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800072a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f004 fa2d 	bl	8004b98 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000744:	f000 fbde 	bl	8000f04 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3770      	adds	r7, #112	; 0x70
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	58024800 	.word	0x58024800
 8000754:	58000400 	.word	0x58000400

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_SPI1_Init+0xa4>)
 800075e:	4a28      	ldr	r2, [pc, #160]	; (8000800 <MX_SPI1_Init+0xa8>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_SPI1_Init+0xa4>)
 800076c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000770:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000774:	2207      	movs	r2, #7
 8000776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000778:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_SPI1_Init+0xa4>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800078a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_SPI1_Init+0xa4>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_SPI1_Init+0xa4>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007ea:	f006 f8c3 	bl	8006974 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80007f4:	f000 fb86 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000308 	.word	0x20000308
 8000800:	40013000 	.word	0x40013000

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_TIM2_Init+0x98>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_TIM2_Init+0x98>)
 800082c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_TIM2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48-1;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_TIM2_Init+0x98>)
 800083a:	222f      	movs	r2, #47	; 0x2f
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_TIM2_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_TIM2_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_TIM2_Init+0x98>)
 800084c:	f006 fc71 	bl	8007132 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000856:	f000 fb55 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_TIM2_Init+0x98>)
 8000868:	f007 f95a 	bl	8007b20 <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000872:	f000 fb47 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_TIM2_Init+0x98>)
 8000884:	f007 fe94 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800088e:	f000 fb39 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000390 	.word	0x20000390

080008a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008d4:	4a2d      	ldr	r2, [pc, #180]	; (800098c <MX_TIM4_Init+0xec>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24-1;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008da:	2217      	movs	r2, #23
 80008dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008e6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80008ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008f8:	4823      	ldr	r0, [pc, #140]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008fa:	f006 fc1a 	bl	8007132 <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000904:	f000 fafe 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	4619      	mov	r1, r3
 8000914:	481c      	ldr	r0, [pc, #112]	; (8000988 <MX_TIM4_Init+0xe8>)
 8000916:	f007 f903 	bl	8007b20 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000920:	f000 faf0 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000924:	4818      	ldr	r0, [pc, #96]	; (8000988 <MX_TIM4_Init+0xe8>)
 8000926:	f006 fccb 	bl	80072c0 <HAL_TIM_PWM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000930:	f000 fae8 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_TIM4_Init+0xe8>)
 8000944:	f007 fe34 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800094e:	f000 fad9 	bl	8000f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000952:	2360      	movs	r3, #96	; 0x60
 8000954:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250;
 8000956:	23fa      	movs	r3, #250	; 0xfa
 8000958:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <MX_TIM4_Init+0xe8>)
 800096a:	f006 ffc9 	bl	8007900 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000974:	f000 fac6 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM4_Init+0xe8>)
 800097a:	f000 fbb5 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	; 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000ac 	.word	0x200000ac
 800098c:	40000800 	.word	0x40000800

08000990 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <MX_UART4_Init+0x98>)
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <MX_UART4_Init+0x9c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_UART4_Init+0x98>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_UART4_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_UART4_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_UART4_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_UART4_Init+0x98>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_UART4_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_UART4_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_UART4_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_UART4_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_UART4_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80009d8:	2300      	movs	r3, #0
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_UART4_Init+0x98>)
 80009e0:	f009 f8dc 	bl	8009b9c <HAL_RS485Ex_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80009ea:	f000 fa8b 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_UART4_Init+0x98>)
 80009f2:	f009 f994 	bl	8009d1e <HAL_UARTEx_SetTxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 fa82 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_UART4_Init+0x98>)
 8000a04:	f009 f9c9 	bl	8009d9a <HAL_UARTEx_SetRxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8000a0e:	f000 fa79 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_UART4_Init+0x98>)
 8000a14:	f009 f94a 	bl	8009cac <HAL_UARTEx_DisableFifoMode>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_UART4_Init+0x92>
  {
    Error_Handler();
 8000a1e:	f000 fa71 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000278 	.word	0x20000278
 8000a2c:	40004c00 	.word	0x40004c00

08000a30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	; (8000ac4 <MX_USART3_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	f007 fe3f 	bl	80086fc <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 fa3e 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f009 f947 	bl	8009d1e <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 fa35 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f009 f97c 	bl	8009d9a <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 fa2c 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000aae:	f009 f8fd 	bl	8009cac <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 fa24 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000170 	.word	0x20000170
 8000ac4:	40004800 	.word	0x40004800

08000ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200b      	movs	r0, #11
 8000b10:	f000 ffa1 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b14:	200b      	movs	r0, #11
 8000b16:	f000 ffb8 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200c      	movs	r0, #12
 8000b20:	f000 ff99 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b24:	200c      	movs	r0, #12
 8000b26:	f000 ffb0 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2038      	movs	r0, #56	; 0x38
 8000b30:	f000 ff91 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b34:	2038      	movs	r0, #56	; 0x38
 8000b36:	f000 ffa8 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2039      	movs	r0, #57	; 0x39
 8000b40:	f000 ff89 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b44:	2039      	movs	r0, #57	; 0x39
 8000b46:	f000 ffa0 	bl	8001a8a <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58024400 	.word	0x58024400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6e:	4b81      	ldr	r3, [pc, #516]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a7f      	ldr	r2, [pc, #508]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b7d      	ldr	r3, [pc, #500]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	4b79      	ldr	r3, [pc, #484]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b75      	ldr	r3, [pc, #468]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b72      	ldr	r3, [pc, #456]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a70      	ldr	r2, [pc, #448]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b6e      	ldr	r3, [pc, #440]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a69      	ldr	r2, [pc, #420]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b66      	ldr	r3, [pc, #408]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b63      	ldr	r3, [pc, #396]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a61      	ldr	r2, [pc, #388]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b5f      	ldr	r3, [pc, #380]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a5a      	ldr	r2, [pc, #360]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b57      	ldr	r3, [pc, #348]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a52      	ldr	r2, [pc, #328]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b50      	ldr	r3, [pc, #320]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	484c      	ldr	r0, [pc, #304]	; (8000d78 <MX_GPIO_Init+0x220>)
 8000c46:	f003 fb0f 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|STEP_5_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f244 0161 	movw	r1, #16481	; 0x4061
 8000c50:	484a      	ldr	r0, [pc, #296]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000c52:	f003 fb09 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|STEP_3_Pin|STEP_2_Pin|DIR_2_Pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f646 2102 	movw	r1, #27138	; 0x6a02
 8000c5c:	4848      	ldr	r0, [pc, #288]	; (8000d80 <MX_GPIO_Init+0x228>)
 8000c5e:	f003 fb03 	bl	8004268 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin|STEP_4_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000c68:	4846      	ldr	r0, [pc, #280]	; (8000d84 <MX_GPIO_Init+0x22c>)
 8000c6a:	f003 fafd 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8000c6e:	f249 0340 	movw	r3, #36928	; 0x9040
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c74:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	483f      	ldr	r0, [pc, #252]	; (8000d80 <MX_GPIO_Init+0x228>)
 8000c84:	f003 f940 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	483b      	ldr	r0, [pc, #236]	; (8000d8c <MX_GPIO_Init+0x234>)
 8000c9e:	f003 f933 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 8000ca2:	2340      	movs	r3, #64	; 0x40
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482f      	ldr	r0, [pc, #188]	; (8000d78 <MX_GPIO_Init+0x220>)
 8000cba:	f003 f925 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEP_5_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|STEP_5_Pin|DIR_1_Pin;
 8000cbe:	f244 0361 	movw	r3, #16481	; 0x4061
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4829      	ldr	r0, [pc, #164]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000cd8:	f003 f916 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin STEP_3_Pin STEP_2_Pin DIR_2_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|STEP_3_Pin|STEP_2_Pin|DIR_2_Pin
 8000cdc:	f646 2302 	movw	r3, #27138	; 0x6a02
 8000ce0:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4822      	ldr	r0, [pc, #136]	; (8000d80 <MX_GPIO_Init+0x228>)
 8000cf6:	f003 f907 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8000cfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	481b      	ldr	r0, [pc, #108]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000d10:	f003 f8fa 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin STEP_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin|STEP_4_Pin;
 8000d14:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4815      	ldr	r0, [pc, #84]	; (8000d84 <MX_GPIO_Init+0x22c>)
 8000d2e:	f003 f8eb 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_GPIO_Init+0x238>)
 8000d46:	f003 f8df 	bl	8003f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	2017      	movs	r0, #23
 8000d50:	f000 fe81 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d54:	2017      	movs	r0, #23
 8000d56:	f000 fe98 	bl	8001a8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	2028      	movs	r0, #40	; 0x28
 8000d60:	f000 fe79 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f000 fe90 	bl	8001a8a <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3730      	adds	r7, #48	; 0x30
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	58024400 	.word	0x58024400
 8000d78:	58020000 	.word	0x58020000
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	58021000 	.word	0x58021000
 8000d84:	58020c00 	.word	0x58020c00
 8000d88:	11110000 	.word	0x11110000
 8000d8c:	58020800 	.word	0x58020800
 8000d90:	58021800 	.word	0x58021800

08000d94 <HAL_UART_TxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Blue_Button_Pin)
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db8:	d128      	bne.n	8000e0c <HAL_GPIO_EXTI_Callback+0x64>
	{
		flag ^= 0x01;
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f083 0301 	eor.w	r3, r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000dc8:	701a      	strb	r2, [r3, #0]
		 if(flag == 0x01)
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10d      	bne.n	8000df0 <HAL_GPIO_EXTI_Callback+0x48>
		 {
//			 HAL_TIM_Base_Start_IT(&htim2);
			 HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4834      	ldr	r0, [pc, #208]	; (8000ea8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000dd8:	f006 fbdc 	bl	8007594 <HAL_TIM_PWM_Stop>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4833      	ldr	r0, [pc, #204]	; (8000eac <HAL_GPIO_EXTI_Callback+0x104>)
 8000de0:	f003 fa5b 	bl	800429a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de8:	4830      	ldr	r0, [pc, #192]	; (8000eac <HAL_GPIO_EXTI_Callback+0x104>)
 8000dea:	f003 fa56 	bl	800429a <HAL_GPIO_TogglePin>
	}
	else
	{
		__NOP();
	}
}
 8000dee:	e054      	b.n	8000e9a <HAL_GPIO_EXTI_Callback+0xf2>
			 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000df0:	2104      	movs	r1, #4
 8000df2:	482d      	ldr	r0, [pc, #180]	; (8000ea8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000df4:	f006 fac6 	bl	8007384 <HAL_TIM_PWM_Start>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	482c      	ldr	r0, [pc, #176]	; (8000eac <HAL_GPIO_EXTI_Callback+0x104>)
 8000dfc:	f003 fa4d 	bl	800429a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e04:	4829      	ldr	r0, [pc, #164]	; (8000eac <HAL_GPIO_EXTI_Callback+0x104>)
 8000e06:	f003 fa48 	bl	800429a <HAL_GPIO_TogglePin>
}
 8000e0a:	e046      	b.n	8000e9a <HAL_GPIO_EXTI_Callback+0xf2>
	else if(GPIO_Pin == LM1_Pin)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d11e      	bne.n	8000e52 <HAL_GPIO_EXTI_Callback+0xaa>
		if(freq > 10000)
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d93c      	bls.n	8000e9a <HAL_GPIO_EXTI_Callback+0xf2>
			freq -= 100;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3b64      	subs	r3, #100	; 0x64
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e28:	6013      	str	r3, [r2, #0]
			  TIM4->ARR = (480000000U/(((TIM4->PSC)+1)*freq))-1;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e40:	3b01      	subs	r3, #1
 8000e42:	62d3      	str	r3, [r2, #44]	; 0x2c
			  TIM4->CCR2 = ((TIM4->ARR)+1)/2;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e4c:	085b      	lsrs	r3, r3, #1
 8000e4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e50:	e023      	b.n	8000e9a <HAL_GPIO_EXTI_Callback+0xf2>
	else if(GPIO_Pin == LM2_Pin)
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e58:	d11e      	bne.n	8000e98 <HAL_GPIO_EXTI_Callback+0xf0>
		if(freq < 40000)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d819      	bhi.n	8000e9a <HAL_GPIO_EXTI_Callback+0xf2>
			freq += 100;
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3364      	adds	r3, #100	; 0x64
 8000e6c:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e6e:	6013      	str	r3, [r2, #0]
			  TIM4->ARR = (480000000U/(((TIM4->PSC)+1)*freq))-1;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e86:	3b01      	subs	r3, #1
 8000e88:	62d3      	str	r3, [r2, #44]	; 0x2c
			  TIM4->CCR2 = ((TIM4->ARR)+1)/2;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e92:	085b      	lsrs	r3, r3, #1
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e96:	e000      	b.n	8000e9a <HAL_GPIO_EXTI_Callback+0xf2>
		__NOP();
 8000e98:	bf00      	nop
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000030 	.word	0x20000030
 8000ea8:	200000ac 	.word	0x200000ac
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	40000800 	.word	0x40000800
 8000eb8:	1c9c3800 	.word	0x1c9c3800

08000ebc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d110      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  if(freq == FREQ)
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d105      	bne.n	8000ee4 <HAL_TIM_PeriodElapsedCallback+0x28>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2102      	movs	r1, #2
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ede:	f003 f9c3 	bl	8004268 <HAL_GPIO_WritePin>
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
	  }
  }
}
 8000ee2:	e004      	b.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x32>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000eea:	f003 f9bd 	bl	8004268 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000390 	.word	0x20000390
 8000efc:	20000000 	.word	0x20000000
 8000f00:	58021000 	.word	0x58021000

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_MspInit+0x30>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x30>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x30>)
 8000f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	58024400 	.word	0x58024400

08000f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0ba      	sub	sp, #232	; 0xe8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	22bc      	movs	r2, #188	; 0xbc
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f008 ffc9 	bl	8009efc <memset>
  if(hspi->Instance==SPI1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a3b      	ldr	r2, [pc, #236]	; (800105c <HAL_SPI_MspInit+0x118>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d16e      	bne.n	8001052 <HAL_SPI_MspInit+0x10e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 f994 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000f8e:	f7ff ffb9 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f92:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f98:	4a31      	ldr	r2, [pc, #196]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000f9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a22      	ldr	r2, [pc, #136]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_SPI_MspInit+0x11c>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fec:	2320      	movs	r3, #32
 8000fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001004:	2305      	movs	r3, #5
 8001006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800100e:	4619      	mov	r1, r3
 8001010:	4814      	ldr	r0, [pc, #80]	; (8001064 <HAL_SPI_MspInit+0x120>)
 8001012:	f002 ff79 	bl	8003f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001030:	2305      	movs	r3, #5
 8001032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001036:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800103a:	4619      	mov	r1, r3
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <HAL_SPI_MspInit+0x124>)
 800103e:	f002 ff63 	bl	8003f08 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2023      	movs	r0, #35	; 0x23
 8001048:	f000 fd05 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800104c:	2023      	movs	r0, #35	; 0x23
 800104e:	f000 fd1c 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	37e8      	adds	r7, #232	; 0xe8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40013000 	.word	0x40013000
 8001060:	58024400 	.word	0x58024400
 8001064:	58020000 	.word	0x58020000
 8001068:	58021800 	.word	0x58021800

0800106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800107c:	d117      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 8001080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 8001090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	201c      	movs	r0, #28
 80010a2:	f000 fcd8 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a6:	201c      	movs	r0, #28
 80010a8:	f000 fcef 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010ac:	e013      	b.n	80010d6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM4)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <HAL_TIM_Base_MspInit+0x78>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d10e      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	58024400 	.word	0x58024400
 80010e4:	40000800 	.word	0x40000800

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <HAL_TIM_MspPostInit+0x68>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d11e      	bne.n	8001148 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_TIM_MspPostInit+0x6c>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_TIM_MspPostInit+0x6c>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_TIM_MspPostInit+0x6c>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_TIM_MspPostInit+0x70>)
 8001144:	f002 fee0 	bl	8003f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40000800 	.word	0x40000800
 8001154:	58024400 	.word	0x58024400
 8001158:	58020400 	.word	0x58020400

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0bc      	sub	sp, #240	; 0xf0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	22bc      	movs	r2, #188	; 0xbc
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f008 febd 	bl	8009efc <memset>
  if(huart->Instance==UART4)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a67      	ldr	r2, [pc, #412]	; (8001324 <HAL_UART_MspInit+0x1c8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	f040 80db 	bne.w	8001344 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f004 f887 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80011a8:	f7ff feac 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011ac:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b2:	4a5d      	ldr	r2, [pc, #372]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011bc:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b57      	ldr	r3, [pc, #348]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a55      	ldr	r2, [pc, #340]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f8:	4b4b      	ldr	r3, [pc, #300]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001220:	2308      	movs	r3, #8
 8001222:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800122a:	4619      	mov	r1, r3
 800122c:	483f      	ldr	r0, [pc, #252]	; (800132c <HAL_UART_MspInit+0x1d0>)
 800122e:	f002 fe6b 	bl	8003f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001232:	2303      	movs	r3, #3
 8001234:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800124a:	2308      	movs	r3, #8
 800124c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001250:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001254:	4619      	mov	r1, r3
 8001256:	4836      	ldr	r0, [pc, #216]	; (8001330 <HAL_UART_MspInit+0x1d4>)
 8001258:	f002 fe56 	bl	8003f08 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 800125c:	4b35      	ldr	r3, [pc, #212]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <HAL_UART_MspInit+0x1dc>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 8001264:	223f      	movs	r2, #63	; 0x3f
 8001266:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 8001276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800129a:	4826      	ldr	r0, [pc, #152]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 800129c:	f000 fc10 	bl	8001ac0 <HAL_DMA_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 80012a6:	f7ff fe2d 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 80012ae:	67da      	str	r2, [r3, #124]	; 0x7c
 80012b0:	4a20      	ldr	r2, [pc, #128]	; (8001334 <HAL_UART_MspInit+0x1d8>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_UART_MspInit+0x1e4>)
 80012ba:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <HAL_UART_MspInit+0x1e0>)
 80012f6:	f000 fbe3 	bl	8001ac0 <HAL_DMA_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001300:	f7ff fe00 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <HAL_UART_MspInit+0x1e0>)
 8001308:	679a      	str	r2, [r3, #120]	; 0x78
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_UART_MspInit+0x1e0>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2034      	movs	r0, #52	; 0x34
 8001316:	f000 fb9e 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800131a:	2034      	movs	r0, #52	; 0x34
 800131c:	f000 fbb5 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001320:	e0bb      	b.n	800149a <HAL_UART_MspInit+0x33e>
 8001322:	bf00      	nop
 8001324:	40004c00 	.word	0x40004c00
 8001328:	58024400 	.word	0x58024400
 800132c:	58020000 	.word	0x58020000
 8001330:	58020c00 	.word	0x58020c00
 8001334:	20000034 	.word	0x20000034
 8001338:	40020410 	.word	0x40020410
 800133c:	200003dc 	.word	0x200003dc
 8001340:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <HAL_UART_MspInit+0x348>)
 800134a:	4293      	cmp	r3, r2
 800134c:	f040 80a5 	bne.w	800149a <HAL_UART_MspInit+0x33e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4618      	mov	r0, r3
 8001360:	f003 ffa6 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_UART_MspInit+0x212>
      Error_Handler();
 800136a:	f7ff fdcb 	bl	8000f04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800136e:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <HAL_UART_MspInit+0x34c>)
 8001370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001374:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_UART_MspInit+0x34c>)
 8001376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800137e:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_UART_MspInit+0x34c>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138c:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_UART_MspInit+0x34c>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a45      	ldr	r2, [pc, #276]	; (80014a8 <HAL_UART_MspInit+0x34c>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <HAL_UART_MspInit+0x34c>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c4:	2307      	movs	r3, #7
 80013c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ce:	4619      	mov	r1, r3
 80013d0:	4836      	ldr	r0, [pc, #216]	; (80014ac <HAL_UART_MspInit+0x350>)
 80013d2:	f002 fd99 	bl	8003f08 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_UART_MspInit+0x354>)
 80013d8:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <HAL_UART_MspInit+0x358>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <HAL_UART_MspInit+0x354>)
 80013de:	222d      	movs	r2, #45	; 0x2d
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_UART_MspInit+0x354>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <HAL_UART_MspInit+0x354>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <HAL_UART_MspInit+0x354>)
 80013f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_UART_MspInit+0x354>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_UART_MspInit+0x354>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_UART_MspInit+0x354>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_UART_MspInit+0x354>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_UART_MspInit+0x354>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001414:	4826      	ldr	r0, [pc, #152]	; (80014b0 <HAL_UART_MspInit+0x354>)
 8001416:	f000 fb53 	bl	8001ac0 <HAL_DMA_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 8001420:	f7ff fd70 	bl	8000f04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a22      	ldr	r2, [pc, #136]	; (80014b0 <HAL_UART_MspInit+0x354>)
 8001428:	67da      	str	r2, [r3, #124]	; 0x7c
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_UART_MspInit+0x354>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_UART_MspInit+0x360>)
 8001434:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001438:	222e      	movs	r2, #46	; 0x2e
 800143a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 800143e:	2240      	movs	r2, #64	; 0x40
 8001440:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 800144a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800144e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800146e:	4812      	ldr	r0, [pc, #72]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001470:	f000 fb26 	bl	8001ac0 <HAL_DMA_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_UART_MspInit+0x322>
      Error_Handler();
 800147a:	f7ff fd43 	bl	8000f04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001482:	679a      	str	r2, [r3, #120]	; 0x78
 8001484:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <HAL_UART_MspInit+0x35c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2027      	movs	r0, #39	; 0x27
 8001490:	f000 fae1 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001494:	2027      	movs	r0, #39	; 0x27
 8001496:	f000 faf8 	bl	8001a8a <HAL_NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	37f0      	adds	r7, #240	; 0xf0
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004800 	.word	0x40004800
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020c00 	.word	0x58020c00
 80014b0:	200000f8 	.word	0x200000f8
 80014b4:	40020010 	.word	0x40020010
 80014b8:	20000200 	.word	0x20000200
 80014bc:	40020028 	.word	0x40020028

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f000 f99c 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <DMA1_Stream0_IRQHandler+0x10>)
 800151a:	f001 fb8f 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000f8 	.word	0x200000f8

08001528 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA1_Stream1_IRQHandler+0x10>)
 800152e:	f001 fb85 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000200 	.word	0x20000200

0800153c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001540:	2040      	movs	r0, #64	; 0x40
 8001542:	f002 fec4 	bl	80042ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001546:	2080      	movs	r0, #128	; 0x80
 8001548:	f002 fec1 	bl	80042ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM2_IRQHandler+0x10>)
 8001556:	f006 f8b3 	bl	80076c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000390 	.word	0x20000390

08001564 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <SPI1_IRQHandler+0x10>)
 800156a:	f005 fb05 	bl	8006b78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000308 	.word	0x20000308

08001578 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART3_IRQHandler+0x10>)
 800157e:	f007 f90d 	bl	800879c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000170 	.word	0x20000170

0800158c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001590:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001594:	f002 fe9b 	bl	80042ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001598:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800159c:	f002 fe97 	bl	80042ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80015a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015a4:	f002 fe93 	bl	80042ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ac:	f002 fe8f 	bl	80042ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80015b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015b4:	f002 fe8b 	bl	80042ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <UART4_IRQHandler+0x10>)
 80015c2:	f007 f8eb 	bl	800879c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000278 	.word	0x20000278

080015d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <DMA2_Stream0_IRQHandler+0x10>)
 80015d6:	f001 fb31 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000034 	.word	0x20000034

080015e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA2_Stream1_IRQHandler+0x10>)
 80015ea:	f001 fb27 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003dc 	.word	0x200003dc

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <SystemInit+0xec>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <SystemInit+0xec>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <SystemInit+0xf0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	2b06      	cmp	r3, #6
 8001616:	d807      	bhi.n	8001628 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <SystemInit+0xf0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 030f 	bic.w	r3, r3, #15
 8001620:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <SystemInit+0xf0>)
 8001622:	f043 0307 	orr.w	r3, r3, #7
 8001626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <SystemInit+0xf4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <SystemInit+0xf4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <SystemInit+0xf4>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <SystemInit+0xf4>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	492b      	ldr	r1, [pc, #172]	; (80016ec <SystemInit+0xf4>)
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <SystemInit+0xf8>)
 8001642:	4013      	ands	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <SystemInit+0xf0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <SystemInit+0xf0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 030f 	bic.w	r3, r3, #15
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <SystemInit+0xf0>)
 800165c:	f043 0307 	orr.w	r3, r3, #7
 8001660:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <SystemInit+0xf4>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <SystemInit+0xf4>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <SystemInit+0xf4>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <SystemInit+0xf4>)
 8001676:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <SystemInit+0xfc>)
 8001678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <SystemInit+0xf4>)
 800167c:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <SystemInit+0x100>)
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <SystemInit+0xf4>)
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <SystemInit+0x104>)
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <SystemInit+0xf4>)
 8001688:	2200      	movs	r2, #0
 800168a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <SystemInit+0xf4>)
 800168e:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <SystemInit+0x104>)
 8001690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <SystemInit+0xf4>)
 8001694:	2200      	movs	r2, #0
 8001696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <SystemInit+0xf4>)
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <SystemInit+0x104>)
 800169c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <SystemInit+0xf4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <SystemInit+0xf4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <SystemInit+0xf4>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <SystemInit+0xf4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <SystemInit+0x108>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <SystemInit+0x10c>)
 80016bc:	4013      	ands	r3, r2
 80016be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016c2:	d202      	bcs.n	80016ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <SystemInit+0x110>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <SystemInit+0x114>)
 80016cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SystemInit+0xec>)
 80016d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	52002000 	.word	0x52002000
 80016ec:	58024400 	.word	0x58024400
 80016f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80016f4:	02020200 	.word	0x02020200
 80016f8:	01ff0000 	.word	0x01ff0000
 80016fc:	01010280 	.word	0x01010280
 8001700:	5c001000 	.word	0x5c001000
 8001704:	ffff0000 	.word	0xffff0000
 8001708:	51008108 	.word	0x51008108
 800170c:	52004000 	.word	0x52004000

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001714:	f7ff ff70 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171a:	490d      	ldr	r1, [pc, #52]	; (8001750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001730:	4c0a      	ldr	r4, [pc, #40]	; (800175c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f008 fbb9 	bl	8009eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7fe ff45 	bl	80005d0 <main>
  bx  lr
 8001746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001754:	08009f74 	.word	0x08009f74
  ldr r2, =_sbss
 8001758:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800175c:	20000458 	.word	0x20000458

08001760 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC3_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
 800176c:	f000 f968 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001770:	f003 fbc8 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_Init+0x68>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	4913      	ldr	r1, [pc, #76]	; (80017d0 <HAL_Init+0x6c>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_Init+0x68>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_Init+0x6c>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_Init+0x70>)
 80017a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_Init+0x74>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f814 	bl	80017dc <HAL_InitTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e002      	b.n	80017c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017be:	f7ff fba7 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	58024400 	.word	0x58024400
 80017d0:	08009f24 	.word	0x08009f24
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_InitTick+0x60>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e021      	b.n	8001834 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_InitTick+0x64>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_InitTick+0x60>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f94d 	bl	8001aa6 <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00e      	b.n	8001834 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	d80a      	bhi.n	8001832 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 f917 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_InitTick+0x68>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000010 	.word	0x20000010
 8001840:	20000004 	.word	0x20000004
 8001844:	2000000c 	.word	0x2000000c

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000010 	.word	0x20000010
 800186c:	20000454 	.word	0x20000454

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000454 	.word	0x20000454

08001888 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetREVID+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0c1b      	lsrs	r3, r3, #16
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	5c001000 	.word	0x5c001000

080018a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <__NVIC_SetPriorityGrouping+0x40>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x40>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	05fa0000 	.word	0x05fa0000

080018e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db0b      	blt.n	800192e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <__NVIC_EnableIRQ+0x38>)
 800191e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2001      	movs	r0, #1
 8001926:	fa00 f202 	lsl.w	r2, r0, r2
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff29 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff40 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff33 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa4 	bl	80019fc <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff fed2 	bl	8001870 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e316      	b.n	8002106 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a66      	ldr	r2, [pc, #408]	; (8001c78 <HAL_DMA_Init+0x1b8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d04a      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_DMA_Init+0x1bc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d045      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a63      	ldr	r2, [pc, #396]	; (8001c80 <HAL_DMA_Init+0x1c0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d040      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a62      	ldr	r2, [pc, #392]	; (8001c84 <HAL_DMA_Init+0x1c4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d03b      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <HAL_DMA_Init+0x1c8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d036      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a5f      	ldr	r2, [pc, #380]	; (8001c8c <HAL_DMA_Init+0x1cc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d031      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a5d      	ldr	r2, [pc, #372]	; (8001c90 <HAL_DMA_Init+0x1d0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d02c      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5c      	ldr	r2, [pc, #368]	; (8001c94 <HAL_DMA_Init+0x1d4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d027      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5a      	ldr	r2, [pc, #360]	; (8001c98 <HAL_DMA_Init+0x1d8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d022      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a59      	ldr	r2, [pc, #356]	; (8001c9c <HAL_DMA_Init+0x1dc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d01d      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a57      	ldr	r2, [pc, #348]	; (8001ca0 <HAL_DMA_Init+0x1e0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d018      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a56      	ldr	r2, [pc, #344]	; (8001ca4 <HAL_DMA_Init+0x1e4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d013      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_DMA_Init+0x1e8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00e      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_DMA_Init+0x1ec>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d009      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a51      	ldr	r2, [pc, #324]	; (8001cb0 <HAL_DMA_Init+0x1f0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_Init+0xb8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a50      	ldr	r2, [pc, #320]	; (8001cb4 <HAL_DMA_Init+0x1f4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d101      	bne.n	8001b7c <HAL_DMA_Init+0xbc>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_DMA_Init+0xbe>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 813b 	beq.w	8001dfa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a37      	ldr	r2, [pc, #220]	; (8001c78 <HAL_DMA_Init+0x1b8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d04a      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <HAL_DMA_Init+0x1bc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d045      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <HAL_DMA_Init+0x1c0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d040      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a33      	ldr	r2, [pc, #204]	; (8001c84 <HAL_DMA_Init+0x1c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d03b      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a31      	ldr	r2, [pc, #196]	; (8001c88 <HAL_DMA_Init+0x1c8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d036      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_DMA_Init+0x1cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d031      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <HAL_DMA_Init+0x1d0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d02c      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <HAL_DMA_Init+0x1d4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d027      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <HAL_DMA_Init+0x1d8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d022      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_DMA_Init+0x1dc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d01d      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <HAL_DMA_Init+0x1e0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d018      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <HAL_DMA_Init+0x1e4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <HAL_DMA_Init+0x1e8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00e      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a24      	ldr	r2, [pc, #144]	; (8001cac <HAL_DMA_Init+0x1ec>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d009      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_DMA_Init+0x1f0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_DMA_Init+0x174>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <HAL_DMA_Init+0x1f4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d108      	bne.n	8001c46 <HAL_DMA_Init+0x186>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e007      	b.n	8001c56 <HAL_DMA_Init+0x196>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c56:	e02f      	b.n	8001cb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c58:	f7ff fe0a 	bl	8001870 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d928      	bls.n	8001cb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e246      	b.n	8002106 <HAL_DMA_Init+0x646>
 8001c78:	40020010 	.word	0x40020010
 8001c7c:	40020028 	.word	0x40020028
 8001c80:	40020040 	.word	0x40020040
 8001c84:	40020058 	.word	0x40020058
 8001c88:	40020070 	.word	0x40020070
 8001c8c:	40020088 	.word	0x40020088
 8001c90:	400200a0 	.word	0x400200a0
 8001c94:	400200b8 	.word	0x400200b8
 8001c98:	40020410 	.word	0x40020410
 8001c9c:	40020428 	.word	0x40020428
 8001ca0:	40020440 	.word	0x40020440
 8001ca4:	40020458 	.word	0x40020458
 8001ca8:	40020470 	.word	0x40020470
 8001cac:	40020488 	.word	0x40020488
 8001cb0:	400204a0 	.word	0x400204a0
 8001cb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1c8      	bne.n	8001c58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4b83      	ldr	r3, [pc, #524]	; (8001ee0 <HAL_DMA_Init+0x420>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cde:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d107      	bne.n	8001d1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4313      	orrs	r3, r2
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d1c:	4b71      	ldr	r3, [pc, #452]	; (8001ee4 <HAL_DMA_Init+0x424>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b71      	ldr	r3, [pc, #452]	; (8001ee8 <HAL_DMA_Init+0x428>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d28:	d328      	bcc.n	8001d7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b28      	cmp	r3, #40	; 0x28
 8001d30:	d903      	bls.n	8001d3a <HAL_DMA_Init+0x27a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b2e      	cmp	r3, #46	; 0x2e
 8001d38:	d917      	bls.n	8001d6a <HAL_DMA_Init+0x2aa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d40:	d903      	bls.n	8001d4a <HAL_DMA_Init+0x28a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b42      	cmp	r3, #66	; 0x42
 8001d48:	d90f      	bls.n	8001d6a <HAL_DMA_Init+0x2aa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b46      	cmp	r3, #70	; 0x46
 8001d50:	d903      	bls.n	8001d5a <HAL_DMA_Init+0x29a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b48      	cmp	r3, #72	; 0x48
 8001d58:	d907      	bls.n	8001d6a <HAL_DMA_Init+0x2aa>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b4e      	cmp	r3, #78	; 0x4e
 8001d60:	d905      	bls.n	8001d6e <HAL_DMA_Init+0x2ae>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b52      	cmp	r3, #82	; 0x52
 8001d68:	d801      	bhi.n	8001d6e <HAL_DMA_Init+0x2ae>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_DMA_Init+0x2b0>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d117      	bne.n	8001dd6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f001 ff1b 	bl	8003bf4 <DMA_CheckFifoParam>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e197      	b.n	8002106 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f001 fe56 	bl	8003a90 <DMA_CalcBaseAndBitshift>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	223f      	movs	r2, #63	; 0x3f
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e0cd      	b.n	8001f96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3b      	ldr	r2, [pc, #236]	; (8001eec <HAL_DMA_Init+0x42c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_Init+0x38a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a39      	ldr	r2, [pc, #228]	; (8001ef0 <HAL_DMA_Init+0x430>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DMA_Init+0x38a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a38      	ldr	r2, [pc, #224]	; (8001ef4 <HAL_DMA_Init+0x434>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d018      	beq.n	8001e4a <HAL_DMA_Init+0x38a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a36      	ldr	r2, [pc, #216]	; (8001ef8 <HAL_DMA_Init+0x438>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_DMA_Init+0x38a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a35      	ldr	r2, [pc, #212]	; (8001efc <HAL_DMA_Init+0x43c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Init+0x38a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a33      	ldr	r2, [pc, #204]	; (8001f00 <HAL_DMA_Init+0x440>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_DMA_Init+0x38a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a32      	ldr	r2, [pc, #200]	; (8001f04 <HAL_DMA_Init+0x444>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_Init+0x38a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <HAL_DMA_Init+0x448>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Init+0x38e>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_DMA_Init+0x390>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8097 	beq.w	8001f84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_DMA_Init+0x42c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d021      	beq.n	8001ea4 <HAL_DMA_Init+0x3e4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_DMA_Init+0x430>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01c      	beq.n	8001ea4 <HAL_DMA_Init+0x3e4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_DMA_Init+0x434>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d017      	beq.n	8001ea4 <HAL_DMA_Init+0x3e4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_DMA_Init+0x438>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d012      	beq.n	8001ea4 <HAL_DMA_Init+0x3e4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_DMA_Init+0x43c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00d      	beq.n	8001ea4 <HAL_DMA_Init+0x3e4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_DMA_Init+0x440>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d008      	beq.n	8001ea4 <HAL_DMA_Init+0x3e4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_DMA_Init+0x444>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_Init+0x3e4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_DMA_Init+0x448>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_DMA_Init+0x44c>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d020      	beq.n	8001f10 <HAL_DMA_Init+0x450>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b80      	cmp	r3, #128	; 0x80
 8001ed4:	d102      	bne.n	8001edc <HAL_DMA_Init+0x41c>
 8001ed6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eda:	e01a      	b.n	8001f12 <HAL_DMA_Init+0x452>
 8001edc:	2300      	movs	r3, #0
 8001ede:	e018      	b.n	8001f12 <HAL_DMA_Init+0x452>
 8001ee0:	fe10803f 	.word	0xfe10803f
 8001ee4:	5c001000 	.word	0x5c001000
 8001ee8:	ffff0000 	.word	0xffff0000
 8001eec:	58025408 	.word	0x58025408
 8001ef0:	5802541c 	.word	0x5802541c
 8001ef4:	58025430 	.word	0x58025430
 8001ef8:	58025444 	.word	0x58025444
 8001efc:	58025458 	.word	0x58025458
 8001f00:	5802546c 	.word	0x5802546c
 8001f04:	58025480 	.word	0x58025480
 8001f08:	58025494 	.word	0x58025494
 8001f0c:	fffe000f 	.word	0xfffe000f
 8001f10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b6e      	ldr	r3, [pc, #440]	; (8002110 <HAL_DMA_Init+0x650>)
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_DMA_Init+0x654>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f001 fd91 	bl	8003a90 <DMA_CalcBaseAndBitshift>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	e008      	b.n	8001f96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0b7      	b.n	8002106 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	; (8002118 <HAL_DMA_Init+0x658>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d072      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	; (800211c <HAL_DMA_Init+0x65c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d06d      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5c      	ldr	r2, [pc, #368]	; (8002120 <HAL_DMA_Init+0x660>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d068      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_DMA_Init+0x664>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d063      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a59      	ldr	r2, [pc, #356]	; (8002128 <HAL_DMA_Init+0x668>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05e      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_DMA_Init+0x66c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d059      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_DMA_Init+0x670>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d054      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a54      	ldr	r2, [pc, #336]	; (8002134 <HAL_DMA_Init+0x674>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04f      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a53      	ldr	r2, [pc, #332]	; (8002138 <HAL_DMA_Init+0x678>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04a      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_DMA_Init+0x67c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d045      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a50      	ldr	r2, [pc, #320]	; (8002140 <HAL_DMA_Init+0x680>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d040      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4e      	ldr	r2, [pc, #312]	; (8002144 <HAL_DMA_Init+0x684>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d03b      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a4d      	ldr	r2, [pc, #308]	; (8002148 <HAL_DMA_Init+0x688>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d036      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_DMA_Init+0x68c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4a      	ldr	r2, [pc, #296]	; (8002150 <HAL_DMA_Init+0x690>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d02c      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_DMA_Init+0x694>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d027      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a47      	ldr	r2, [pc, #284]	; (8002158 <HAL_DMA_Init+0x698>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d022      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a45      	ldr	r2, [pc, #276]	; (800215c <HAL_DMA_Init+0x69c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a44      	ldr	r2, [pc, #272]	; (8002160 <HAL_DMA_Init+0x6a0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d018      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a42      	ldr	r2, [pc, #264]	; (8002164 <HAL_DMA_Init+0x6a4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a41      	ldr	r2, [pc, #260]	; (8002168 <HAL_DMA_Init+0x6a8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a3f      	ldr	r2, [pc, #252]	; (800216c <HAL_DMA_Init+0x6ac>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a3e      	ldr	r2, [pc, #248]	; (8002170 <HAL_DMA_Init+0x6b0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_Init+0x5c6>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <HAL_DMA_Init+0x6b4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_DMA_Init+0x5ca>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_DMA_Init+0x5cc>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d032      	beq.n	80020f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f001 fe2b 	bl	8003cec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b80      	cmp	r3, #128	; 0x80
 800209c:	d102      	bne.n	80020a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_DMA_Init+0x624>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d80c      	bhi.n	80020e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f001 fea8 	bl	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	e008      	b.n	80020f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	a7fdabf8 	.word	0xa7fdabf8
 8002114:	cccccccd 	.word	0xcccccccd
 8002118:	40020010 	.word	0x40020010
 800211c:	40020028 	.word	0x40020028
 8002120:	40020040 	.word	0x40020040
 8002124:	40020058 	.word	0x40020058
 8002128:	40020070 	.word	0x40020070
 800212c:	40020088 	.word	0x40020088
 8002130:	400200a0 	.word	0x400200a0
 8002134:	400200b8 	.word	0x400200b8
 8002138:	40020410 	.word	0x40020410
 800213c:	40020428 	.word	0x40020428
 8002140:	40020440 	.word	0x40020440
 8002144:	40020458 	.word	0x40020458
 8002148:	40020470 	.word	0x40020470
 800214c:	40020488 	.word	0x40020488
 8002150:	400204a0 	.word	0x400204a0
 8002154:	400204b8 	.word	0x400204b8
 8002158:	58025408 	.word	0x58025408
 800215c:	5802541c 	.word	0x5802541c
 8002160:	58025430 	.word	0x58025430
 8002164:	58025444 	.word	0x58025444
 8002168:	58025458 	.word	0x58025458
 800216c:	5802546c 	.word	0x5802546c
 8002170:	58025480 	.word	0x58025480
 8002174:	58025494 	.word	0x58025494

08002178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff fb76 	bl	8001870 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e2dc      	b.n	800274a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d008      	beq.n	80021ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e2cd      	b.n	800274a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a76      	ldr	r2, [pc, #472]	; (800238c <HAL_DMA_Abort+0x214>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04a      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a74      	ldr	r2, [pc, #464]	; (8002390 <HAL_DMA_Abort+0x218>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d045      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a73      	ldr	r2, [pc, #460]	; (8002394 <HAL_DMA_Abort+0x21c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d040      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_DMA_Abort+0x220>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d03b      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a70      	ldr	r2, [pc, #448]	; (800239c <HAL_DMA_Abort+0x224>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d036      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_DMA_Abort+0x228>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6d      	ldr	r2, [pc, #436]	; (80023a4 <HAL_DMA_Abort+0x22c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d02c      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6b      	ldr	r2, [pc, #428]	; (80023a8 <HAL_DMA_Abort+0x230>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d027      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_DMA_Abort+0x234>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a68      	ldr	r2, [pc, #416]	; (80023b0 <HAL_DMA_Abort+0x238>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01d      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_DMA_Abort+0x23c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d018      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_DMA_Abort+0x240>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a64      	ldr	r2, [pc, #400]	; (80023bc <HAL_DMA_Abort+0x244>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a62      	ldr	r2, [pc, #392]	; (80023c0 <HAL_DMA_Abort+0x248>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a61      	ldr	r2, [pc, #388]	; (80023c4 <HAL_DMA_Abort+0x24c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_DMA_Abort+0xd6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <HAL_DMA_Abort+0x250>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Abort+0xda>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_DMA_Abort+0xdc>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 021e 	bic.w	r2, r2, #30
 8002266:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002276:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e00a      	b.n	8002296 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 020e 	bic.w	r2, r2, #14
 800228e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3c      	ldr	r2, [pc, #240]	; (800238c <HAL_DMA_Abort+0x214>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d072      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_DMA_Abort+0x218>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d06d      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a39      	ldr	r2, [pc, #228]	; (8002394 <HAL_DMA_Abort+0x21c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d068      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a37      	ldr	r2, [pc, #220]	; (8002398 <HAL_DMA_Abort+0x220>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d063      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a36      	ldr	r2, [pc, #216]	; (800239c <HAL_DMA_Abort+0x224>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d05e      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_DMA_Abort+0x228>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d059      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <HAL_DMA_Abort+0x22c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d054      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <HAL_DMA_Abort+0x230>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d04f      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a30      	ldr	r2, [pc, #192]	; (80023ac <HAL_DMA_Abort+0x234>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04a      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2e      	ldr	r2, [pc, #184]	; (80023b0 <HAL_DMA_Abort+0x238>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d045      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <HAL_DMA_Abort+0x23c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d040      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2b      	ldr	r2, [pc, #172]	; (80023b8 <HAL_DMA_Abort+0x240>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d03b      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2a      	ldr	r2, [pc, #168]	; (80023bc <HAL_DMA_Abort+0x244>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d036      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <HAL_DMA_Abort+0x248>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d031      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_DMA_Abort+0x24c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d02c      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_DMA_Abort+0x250>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d027      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_DMA_Abort+0x254>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d022      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_DMA_Abort+0x258>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01d      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_DMA_Abort+0x25c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d018      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_DMA_Abort+0x260>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_DMA_Abort+0x264>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00e      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_DMA_Abort+0x268>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_DMA_Abort+0x26c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d004      	beq.n	8002386 <HAL_DMA_Abort+0x20e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_DMA_Abort+0x270>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d132      	bne.n	80023ec <HAL_DMA_Abort+0x274>
 8002386:	2301      	movs	r3, #1
 8002388:	e031      	b.n	80023ee <HAL_DMA_Abort+0x276>
 800238a:	bf00      	nop
 800238c:	40020010 	.word	0x40020010
 8002390:	40020028 	.word	0x40020028
 8002394:	40020040 	.word	0x40020040
 8002398:	40020058 	.word	0x40020058
 800239c:	40020070 	.word	0x40020070
 80023a0:	40020088 	.word	0x40020088
 80023a4:	400200a0 	.word	0x400200a0
 80023a8:	400200b8 	.word	0x400200b8
 80023ac:	40020410 	.word	0x40020410
 80023b0:	40020428 	.word	0x40020428
 80023b4:	40020440 	.word	0x40020440
 80023b8:	40020458 	.word	0x40020458
 80023bc:	40020470 	.word	0x40020470
 80023c0:	40020488 	.word	0x40020488
 80023c4:	400204a0 	.word	0x400204a0
 80023c8:	400204b8 	.word	0x400204b8
 80023cc:	58025408 	.word	0x58025408
 80023d0:	5802541c 	.word	0x5802541c
 80023d4:	58025430 	.word	0x58025430
 80023d8:	58025444 	.word	0x58025444
 80023dc:	58025458 	.word	0x58025458
 80023e0:	5802546c 	.word	0x5802546c
 80023e4:	58025480 	.word	0x58025480
 80023e8:	58025494 	.word	0x58025494
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002400:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <HAL_DMA_Abort+0x444>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04a      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6b      	ldr	r2, [pc, #428]	; (80025c0 <HAL_DMA_Abort+0x448>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d045      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6a      	ldr	r2, [pc, #424]	; (80025c4 <HAL_DMA_Abort+0x44c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d040      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a68      	ldr	r2, [pc, #416]	; (80025c8 <HAL_DMA_Abort+0x450>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d03b      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a67      	ldr	r2, [pc, #412]	; (80025cc <HAL_DMA_Abort+0x454>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d036      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a65      	ldr	r2, [pc, #404]	; (80025d0 <HAL_DMA_Abort+0x458>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a64      	ldr	r2, [pc, #400]	; (80025d4 <HAL_DMA_Abort+0x45c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d02c      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a62      	ldr	r2, [pc, #392]	; (80025d8 <HAL_DMA_Abort+0x460>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d027      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a61      	ldr	r2, [pc, #388]	; (80025dc <HAL_DMA_Abort+0x464>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5f      	ldr	r2, [pc, #380]	; (80025e0 <HAL_DMA_Abort+0x468>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <HAL_DMA_Abort+0x46c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a5c      	ldr	r2, [pc, #368]	; (80025e8 <HAL_DMA_Abort+0x470>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <HAL_DMA_Abort+0x474>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a59      	ldr	r2, [pc, #356]	; (80025f0 <HAL_DMA_Abort+0x478>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_DMA_Abort+0x47c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_Abort+0x32a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_DMA_Abort+0x480>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d108      	bne.n	80024b4 <HAL_DMA_Abort+0x33c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e007      	b.n	80024c4 <HAL_DMA_Abort+0x34c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024c4:	e013      	b.n	80024ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c6:	f7ff f9d3 	bl	8001870 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d90c      	bls.n	80024ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e12d      	b.n	800274a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1e5      	bne.n	80024c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_DMA_Abort+0x444>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04a      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2d      	ldr	r2, [pc, #180]	; (80025c0 <HAL_DMA_Abort+0x448>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d045      	beq.n	800259a <HAL_DMA_Abort+0x422>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <HAL_DMA_Abort+0x44c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d040      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_DMA_Abort+0x450>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d03b      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_DMA_Abort+0x454>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d036      	beq.n	800259a <HAL_DMA_Abort+0x422>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_DMA_Abort+0x458>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d031      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <HAL_DMA_Abort+0x45c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d02c      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_DMA_Abort+0x460>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d027      	beq.n	800259a <HAL_DMA_Abort+0x422>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_DMA_Abort+0x464>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d022      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_DMA_Abort+0x468>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01d      	beq.n	800259a <HAL_DMA_Abort+0x422>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <HAL_DMA_Abort+0x46c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d018      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_DMA_Abort+0x470>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_DMA_Abort+0x474>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00e      	beq.n	800259a <HAL_DMA_Abort+0x422>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_DMA_Abort+0x478>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_DMA_Abort+0x47c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d004      	beq.n	800259a <HAL_DMA_Abort+0x422>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_DMA_Abort+0x480>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_DMA_Abort+0x426>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_DMA_Abort+0x428>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02b      	beq.n	80025fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	223f      	movs	r2, #63	; 0x3f
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	e02a      	b.n	8002612 <HAL_DMA_Abort+0x49a>
 80025bc:	40020010 	.word	0x40020010
 80025c0:	40020028 	.word	0x40020028
 80025c4:	40020040 	.word	0x40020040
 80025c8:	40020058 	.word	0x40020058
 80025cc:	40020070 	.word	0x40020070
 80025d0:	40020088 	.word	0x40020088
 80025d4:	400200a0 	.word	0x400200a0
 80025d8:	400200b8 	.word	0x400200b8
 80025dc:	40020410 	.word	0x40020410
 80025e0:	40020428 	.word	0x40020428
 80025e4:	40020440 	.word	0x40020440
 80025e8:	40020458 	.word	0x40020458
 80025ec:	40020470 	.word	0x40020470
 80025f0:	40020488 	.word	0x40020488
 80025f4:	400204a0 	.word	0x400204a0
 80025f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2201      	movs	r2, #1
 800260c:	409a      	lsls	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_DMA_Abort+0x5dc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d072      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_DMA_Abort+0x5e0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d06d      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_DMA_Abort+0x5e4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d068      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a4a      	ldr	r2, [pc, #296]	; (8002760 <HAL_DMA_Abort+0x5e8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d063      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a49      	ldr	r2, [pc, #292]	; (8002764 <HAL_DMA_Abort+0x5ec>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d05e      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a47      	ldr	r2, [pc, #284]	; (8002768 <HAL_DMA_Abort+0x5f0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d059      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a46      	ldr	r2, [pc, #280]	; (800276c <HAL_DMA_Abort+0x5f4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d054      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a44      	ldr	r2, [pc, #272]	; (8002770 <HAL_DMA_Abort+0x5f8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04f      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a43      	ldr	r2, [pc, #268]	; (8002774 <HAL_DMA_Abort+0x5fc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d04a      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a41      	ldr	r2, [pc, #260]	; (8002778 <HAL_DMA_Abort+0x600>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d045      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a40      	ldr	r2, [pc, #256]	; (800277c <HAL_DMA_Abort+0x604>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d040      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <HAL_DMA_Abort+0x608>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d03b      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3d      	ldr	r2, [pc, #244]	; (8002784 <HAL_DMA_Abort+0x60c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d036      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a3b      	ldr	r2, [pc, #236]	; (8002788 <HAL_DMA_Abort+0x610>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d031      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_DMA_Abort+0x614>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d02c      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a38      	ldr	r2, [pc, #224]	; (8002790 <HAL_DMA_Abort+0x618>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d027      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <HAL_DMA_Abort+0x61c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d022      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a35      	ldr	r2, [pc, #212]	; (8002798 <HAL_DMA_Abort+0x620>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01d      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a34      	ldr	r2, [pc, #208]	; (800279c <HAL_DMA_Abort+0x624>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d018      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a32      	ldr	r2, [pc, #200]	; (80027a0 <HAL_DMA_Abort+0x628>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a31      	ldr	r2, [pc, #196]	; (80027a4 <HAL_DMA_Abort+0x62c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00e      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <HAL_DMA_Abort+0x630>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2e      	ldr	r2, [pc, #184]	; (80027ac <HAL_DMA_Abort+0x634>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d004      	beq.n	8002702 <HAL_DMA_Abort+0x58a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <HAL_DMA_Abort+0x638>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_DMA_Abort+0x58e>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_DMA_Abort+0x590>
 8002706:	2300      	movs	r3, #0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002714:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002736:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40020010 	.word	0x40020010
 8002758:	40020028 	.word	0x40020028
 800275c:	40020040 	.word	0x40020040
 8002760:	40020058 	.word	0x40020058
 8002764:	40020070 	.word	0x40020070
 8002768:	40020088 	.word	0x40020088
 800276c:	400200a0 	.word	0x400200a0
 8002770:	400200b8 	.word	0x400200b8
 8002774:	40020410 	.word	0x40020410
 8002778:	40020428 	.word	0x40020428
 800277c:	40020440 	.word	0x40020440
 8002780:	40020458 	.word	0x40020458
 8002784:	40020470 	.word	0x40020470
 8002788:	40020488 	.word	0x40020488
 800278c:	400204a0 	.word	0x400204a0
 8002790:	400204b8 	.word	0x400204b8
 8002794:	58025408 	.word	0x58025408
 8002798:	5802541c 	.word	0x5802541c
 800279c:	58025430 	.word	0x58025430
 80027a0:	58025444 	.word	0x58025444
 80027a4:	58025458 	.word	0x58025458
 80027a8:	5802546c 	.word	0x5802546c
 80027ac:	58025480 	.word	0x58025480
 80027b0:	58025494 	.word	0x58025494

080027b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e205      	b.n	8002bd2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d004      	beq.n	80027dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e1fa      	b.n	8002bd2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a8c      	ldr	r2, [pc, #560]	; (8002a14 <HAL_DMA_Abort_IT+0x260>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04a      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a8b      	ldr	r2, [pc, #556]	; (8002a18 <HAL_DMA_Abort_IT+0x264>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d045      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a89      	ldr	r2, [pc, #548]	; (8002a1c <HAL_DMA_Abort_IT+0x268>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d040      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a88      	ldr	r2, [pc, #544]	; (8002a20 <HAL_DMA_Abort_IT+0x26c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d03b      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a86      	ldr	r2, [pc, #536]	; (8002a24 <HAL_DMA_Abort_IT+0x270>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d036      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a85      	ldr	r2, [pc, #532]	; (8002a28 <HAL_DMA_Abort_IT+0x274>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d031      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a83      	ldr	r2, [pc, #524]	; (8002a2c <HAL_DMA_Abort_IT+0x278>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02c      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a82      	ldr	r2, [pc, #520]	; (8002a30 <HAL_DMA_Abort_IT+0x27c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d027      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a80      	ldr	r2, [pc, #512]	; (8002a34 <HAL_DMA_Abort_IT+0x280>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a7f      	ldr	r2, [pc, #508]	; (8002a38 <HAL_DMA_Abort_IT+0x284>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a7d      	ldr	r2, [pc, #500]	; (8002a3c <HAL_DMA_Abort_IT+0x288>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_DMA_Abort_IT+0x28c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a7a      	ldr	r2, [pc, #488]	; (8002a44 <HAL_DMA_Abort_IT+0x290>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a79      	ldr	r2, [pc, #484]	; (8002a48 <HAL_DMA_Abort_IT+0x294>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a77      	ldr	r2, [pc, #476]	; (8002a4c <HAL_DMA_Abort_IT+0x298>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_DMA_Abort_IT+0xc8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a76      	ldr	r2, [pc, #472]	; (8002a50 <HAL_DMA_Abort_IT+0x29c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_DMA_Abort_IT+0xcc>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_DMA_Abort_IT+0xce>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d065      	beq.n	8002952 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2204      	movs	r2, #4
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a60      	ldr	r2, [pc, #384]	; (8002a14 <HAL_DMA_Abort_IT+0x260>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5e      	ldr	r2, [pc, #376]	; (8002a18 <HAL_DMA_Abort_IT+0x264>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5d      	ldr	r2, [pc, #372]	; (8002a1c <HAL_DMA_Abort_IT+0x268>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5b      	ldr	r2, [pc, #364]	; (8002a20 <HAL_DMA_Abort_IT+0x26c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_DMA_Abort_IT+0x270>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_DMA_Abort_IT+0x274>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a57      	ldr	r2, [pc, #348]	; (8002a2c <HAL_DMA_Abort_IT+0x278>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a55      	ldr	r2, [pc, #340]	; (8002a30 <HAL_DMA_Abort_IT+0x27c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <HAL_DMA_Abort_IT+0x280>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a52      	ldr	r2, [pc, #328]	; (8002a38 <HAL_DMA_Abort_IT+0x284>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a51      	ldr	r2, [pc, #324]	; (8002a3c <HAL_DMA_Abort_IT+0x288>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4f      	ldr	r2, [pc, #316]	; (8002a40 <HAL_DMA_Abort_IT+0x28c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_DMA_Abort_IT+0x290>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a4c      	ldr	r2, [pc, #304]	; (8002a48 <HAL_DMA_Abort_IT+0x294>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_DMA_Abort_IT+0x298>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Abort_IT+0x17a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a49      	ldr	r2, [pc, #292]	; (8002a50 <HAL_DMA_Abort_IT+0x29c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <HAL_DMA_Abort_IT+0x18c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e147      	b.n	8002bd0 <HAL_DMA_Abort_IT+0x41c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e13e      	b.n	8002bd0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 020e 	bic.w	r2, r2, #14
 8002960:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <HAL_DMA_Abort_IT+0x260>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d04a      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <HAL_DMA_Abort_IT+0x264>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d045      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <HAL_DMA_Abort_IT+0x268>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d040      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a26      	ldr	r2, [pc, #152]	; (8002a20 <HAL_DMA_Abort_IT+0x26c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d03b      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <HAL_DMA_Abort_IT+0x270>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d036      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <HAL_DMA_Abort_IT+0x274>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d031      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <HAL_DMA_Abort_IT+0x278>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d02c      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_DMA_Abort_IT+0x27c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d027      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_DMA_Abort_IT+0x280>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_DMA_Abort_IT+0x284>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01d      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_DMA_Abort_IT+0x288>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d018      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_DMA_Abort_IT+0x28c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_DMA_Abort_IT+0x290>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_DMA_Abort_IT+0x294>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_DMA_Abort_IT+0x298>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x24e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_DMA_Abort_IT+0x29c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d128      	bne.n	8002a54 <HAL_DMA_Abort_IT+0x2a0>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e027      	b.n	8002a64 <HAL_DMA_Abort_IT+0x2b0>
 8002a14:	40020010 	.word	0x40020010
 8002a18:	40020028 	.word	0x40020028
 8002a1c:	40020040 	.word	0x40020040
 8002a20:	40020058 	.word	0x40020058
 8002a24:	40020070 	.word	0x40020070
 8002a28:	40020088 	.word	0x40020088
 8002a2c:	400200a0 	.word	0x400200a0
 8002a30:	400200b8 	.word	0x400200b8
 8002a34:	40020410 	.word	0x40020410
 8002a38:	40020428 	.word	0x40020428
 8002a3c:	40020440 	.word	0x40020440
 8002a40:	40020458 	.word	0x40020458
 8002a44:	40020470 	.word	0x40020470
 8002a48:	40020488 	.word	0x40020488
 8002a4c:	400204a0 	.word	0x400204a0
 8002a50:	400204b8 	.word	0x400204b8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a5c      	ldr	r2, [pc, #368]	; (8002bdc <HAL_DMA_Abort_IT+0x428>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d072      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <HAL_DMA_Abort_IT+0x42c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d06d      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a59      	ldr	r2, [pc, #356]	; (8002be4 <HAL_DMA_Abort_IT+0x430>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d068      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a58      	ldr	r2, [pc, #352]	; (8002be8 <HAL_DMA_Abort_IT+0x434>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d063      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_DMA_Abort_IT+0x438>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d05e      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a55      	ldr	r2, [pc, #340]	; (8002bf0 <HAL_DMA_Abort_IT+0x43c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d059      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a53      	ldr	r2, [pc, #332]	; (8002bf4 <HAL_DMA_Abort_IT+0x440>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d054      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a52      	ldr	r2, [pc, #328]	; (8002bf8 <HAL_DMA_Abort_IT+0x444>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d04f      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a50      	ldr	r2, [pc, #320]	; (8002bfc <HAL_DMA_Abort_IT+0x448>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d04a      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4f      	ldr	r2, [pc, #316]	; (8002c00 <HAL_DMA_Abort_IT+0x44c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d045      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4d      	ldr	r2, [pc, #308]	; (8002c04 <HAL_DMA_Abort_IT+0x450>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d040      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a4c      	ldr	r2, [pc, #304]	; (8002c08 <HAL_DMA_Abort_IT+0x454>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d03b      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <HAL_DMA_Abort_IT+0x458>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d036      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_DMA_Abort_IT+0x45c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d031      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a47      	ldr	r2, [pc, #284]	; (8002c14 <HAL_DMA_Abort_IT+0x460>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02c      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <HAL_DMA_Abort_IT+0x464>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d027      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a44      	ldr	r2, [pc, #272]	; (8002c1c <HAL_DMA_Abort_IT+0x468>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d022      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <HAL_DMA_Abort_IT+0x46c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01d      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a41      	ldr	r2, [pc, #260]	; (8002c24 <HAL_DMA_Abort_IT+0x470>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d018      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a40      	ldr	r2, [pc, #256]	; (8002c28 <HAL_DMA_Abort_IT+0x474>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <HAL_DMA_Abort_IT+0x478>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00e      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a3d      	ldr	r2, [pc, #244]	; (8002c30 <HAL_DMA_Abort_IT+0x47c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a3b      	ldr	r2, [pc, #236]	; (8002c34 <HAL_DMA_Abort_IT+0x480>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x3a0>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a3a      	ldr	r2, [pc, #232]	; (8002c38 <HAL_DMA_Abort_IT+0x484>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_DMA_Abort_IT+0x3a4>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_DMA_Abort_IT+0x3a6>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d028      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40020010 	.word	0x40020010
 8002be0:	40020028 	.word	0x40020028
 8002be4:	40020040 	.word	0x40020040
 8002be8:	40020058 	.word	0x40020058
 8002bec:	40020070 	.word	0x40020070
 8002bf0:	40020088 	.word	0x40020088
 8002bf4:	400200a0 	.word	0x400200a0
 8002bf8:	400200b8 	.word	0x400200b8
 8002bfc:	40020410 	.word	0x40020410
 8002c00:	40020428 	.word	0x40020428
 8002c04:	40020440 	.word	0x40020440
 8002c08:	40020458 	.word	0x40020458
 8002c0c:	40020470 	.word	0x40020470
 8002c10:	40020488 	.word	0x40020488
 8002c14:	400204a0 	.word	0x400204a0
 8002c18:	400204b8 	.word	0x400204b8
 8002c1c:	58025408 	.word	0x58025408
 8002c20:	5802541c 	.word	0x5802541c
 8002c24:	58025430 	.word	0x58025430
 8002c28:	58025444 	.word	0x58025444
 8002c2c:	58025458 	.word	0x58025458
 8002c30:	5802546c 	.word	0x5802546c
 8002c34:	58025480 	.word	0x58025480
 8002c38:	58025494 	.word	0x58025494

08002c3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c48:	4b67      	ldr	r3, [pc, #412]	; (8002de8 <HAL_DMA_IRQHandler+0x1ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a67      	ldr	r2, [pc, #412]	; (8002dec <HAL_DMA_IRQHandler+0x1b0>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0a9b      	lsrs	r3, r3, #10
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a5f      	ldr	r2, [pc, #380]	; (8002df0 <HAL_DMA_IRQHandler+0x1b4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d04a      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5d      	ldr	r2, [pc, #372]	; (8002df4 <HAL_DMA_IRQHandler+0x1b8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d045      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5c      	ldr	r2, [pc, #368]	; (8002df8 <HAL_DMA_IRQHandler+0x1bc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d040      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_DMA_IRQHandler+0x1c0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d03b      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a59      	ldr	r2, [pc, #356]	; (8002e00 <HAL_DMA_IRQHandler+0x1c4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d036      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_DMA_IRQHandler+0x1c8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d031      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_DMA_IRQHandler+0x1cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d02c      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a54      	ldr	r2, [pc, #336]	; (8002e0c <HAL_DMA_IRQHandler+0x1d0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d027      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a53      	ldr	r2, [pc, #332]	; (8002e10 <HAL_DMA_IRQHandler+0x1d4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <HAL_DMA_IRQHandler+0x1d8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01d      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <HAL_DMA_IRQHandler+0x1dc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d018      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4e      	ldr	r2, [pc, #312]	; (8002e1c <HAL_DMA_IRQHandler+0x1e0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <HAL_DMA_IRQHandler+0x1e4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_DMA_IRQHandler+0x1e8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_DMA_IRQHandler+0x1ec>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xd2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a48      	ldr	r2, [pc, #288]	; (8002e2c <HAL_DMA_IRQHandler+0x1f0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_DMA_IRQHandler+0xd6>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_DMA_IRQHandler+0xd8>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 842b 	beq.w	8003570 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2208      	movs	r2, #8
 8002d24:	409a      	lsls	r2, r3
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80a2 	beq.w	8002e74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <HAL_DMA_IRQHandler+0x1b4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d04a      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <HAL_DMA_IRQHandler+0x1b8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d045      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_DMA_IRQHandler+0x1bc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d040      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_DMA_IRQHandler+0x1c0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d03b      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a28      	ldr	r2, [pc, #160]	; (8002e00 <HAL_DMA_IRQHandler+0x1c4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d036      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_DMA_IRQHandler+0x1c8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d031      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_DMA_IRQHandler+0x1cc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02c      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <HAL_DMA_IRQHandler+0x1d0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d027      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <HAL_DMA_IRQHandler+0x1d4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d022      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <HAL_DMA_IRQHandler+0x1d8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d01d      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_DMA_IRQHandler+0x1dc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d018      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <HAL_DMA_IRQHandler+0x1e0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_DMA_IRQHandler+0x1e4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <HAL_DMA_IRQHandler+0x1e8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_DMA_IRQHandler+0x1ec>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x194>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_DMA_IRQHandler+0x1f0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d12f      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x1f4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e02e      	b.n	8002e44 <HAL_DMA_IRQHandler+0x208>
 8002de6:	bf00      	nop
 8002de8:	20000004 	.word	0x20000004
 8002dec:	1b4e81b5 	.word	0x1b4e81b5
 8002df0:	40020010 	.word	0x40020010
 8002df4:	40020028 	.word	0x40020028
 8002df8:	40020040 	.word	0x40020040
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	40020070 	.word	0x40020070
 8002e04:	40020088 	.word	0x40020088
 8002e08:	400200a0 	.word	0x400200a0
 8002e0c:	400200b8 	.word	0x400200b8
 8002e10:	40020410 	.word	0x40020410
 8002e14:	40020428 	.word	0x40020428
 8002e18:	40020440 	.word	0x40020440
 8002e1c:	40020458 	.word	0x40020458
 8002e20:	40020470 	.word	0x40020470
 8002e24:	40020488 	.word	0x40020488
 8002e28:	400204a0 	.word	0x400204a0
 8002e2c:	400204b8 	.word	0x400204b8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d015      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2208      	movs	r2, #8
 8002e62:	409a      	lsls	r2, r3
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d06e      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a69      	ldr	r2, [pc, #420]	; (8003034 <HAL_DMA_IRQHandler+0x3f8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04a      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a67      	ldr	r2, [pc, #412]	; (8003038 <HAL_DMA_IRQHandler+0x3fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d045      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a66      	ldr	r2, [pc, #408]	; (800303c <HAL_DMA_IRQHandler+0x400>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d040      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a64      	ldr	r2, [pc, #400]	; (8003040 <HAL_DMA_IRQHandler+0x404>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d03b      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a63      	ldr	r2, [pc, #396]	; (8003044 <HAL_DMA_IRQHandler+0x408>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d036      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a61      	ldr	r2, [pc, #388]	; (8003048 <HAL_DMA_IRQHandler+0x40c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a60      	ldr	r2, [pc, #384]	; (800304c <HAL_DMA_IRQHandler+0x410>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d02c      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_DMA_IRQHandler+0x414>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d027      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <HAL_DMA_IRQHandler+0x418>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5b      	ldr	r2, [pc, #364]	; (8003058 <HAL_DMA_IRQHandler+0x41c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_DMA_IRQHandler+0x420>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_DMA_IRQHandler+0x424>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a57      	ldr	r2, [pc, #348]	; (8003064 <HAL_DMA_IRQHandler+0x428>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a55      	ldr	r2, [pc, #340]	; (8003068 <HAL_DMA_IRQHandler+0x42c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a54      	ldr	r2, [pc, #336]	; (800306c <HAL_DMA_IRQHandler+0x430>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2ee>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_DMA_IRQHandler+0x434>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10a      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x304>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e003      	b.n	8002f48 <HAL_DMA_IRQHandler+0x30c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f043 0202 	orr.w	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2204      	movs	r2, #4
 8002f72:	409a      	lsls	r2, r3
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 808f 	beq.w	800309c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <HAL_DMA_IRQHandler+0x3f8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04a      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <HAL_DMA_IRQHandler+0x3fc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d045      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_DMA_IRQHandler+0x400>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d040      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_DMA_IRQHandler+0x404>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d03b      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <HAL_DMA_IRQHandler+0x408>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d036      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a24      	ldr	r2, [pc, #144]	; (8003048 <HAL_DMA_IRQHandler+0x40c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a23      	ldr	r2, [pc, #140]	; (800304c <HAL_DMA_IRQHandler+0x410>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d02c      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a21      	ldr	r2, [pc, #132]	; (8003050 <HAL_DMA_IRQHandler+0x414>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d027      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a20      	ldr	r2, [pc, #128]	; (8003054 <HAL_DMA_IRQHandler+0x418>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <HAL_DMA_IRQHandler+0x41c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01d      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_DMA_IRQHandler+0x420>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_DMA_IRQHandler+0x424>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_DMA_IRQHandler+0x428>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_DMA_IRQHandler+0x42c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_DMA_IRQHandler+0x430>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_DMA_IRQHandler+0x3e2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a15      	ldr	r2, [pc, #84]	; (8003070 <HAL_DMA_IRQHandler+0x434>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d12a      	bne.n	8003074 <HAL_DMA_IRQHandler+0x438>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e023      	b.n	800307c <HAL_DMA_IRQHandler+0x440>
 8003034:	40020010 	.word	0x40020010
 8003038:	40020028 	.word	0x40020028
 800303c:	40020040 	.word	0x40020040
 8003040:	40020058 	.word	0x40020058
 8003044:	40020070 	.word	0x40020070
 8003048:	40020088 	.word	0x40020088
 800304c:	400200a0 	.word	0x400200a0
 8003050:	400200b8 	.word	0x400200b8
 8003054:	40020410 	.word	0x40020410
 8003058:	40020428 	.word	0x40020428
 800305c:	40020440 	.word	0x40020440
 8003060:	40020458 	.word	0x40020458
 8003064:	40020470 	.word	0x40020470
 8003068:	40020488 	.word	0x40020488
 800306c:	400204a0 	.word	0x400204a0
 8003070:	400204b8 	.word	0x400204b8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2204      	movs	r2, #4
 800308a:	409a      	lsls	r2, r3
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2210      	movs	r2, #16
 80030a6:	409a      	lsls	r2, r3
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a6 	beq.w	80031fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a85      	ldr	r2, [pc, #532]	; (80032cc <HAL_DMA_IRQHandler+0x690>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d04a      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a83      	ldr	r2, [pc, #524]	; (80032d0 <HAL_DMA_IRQHandler+0x694>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d045      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a82      	ldr	r2, [pc, #520]	; (80032d4 <HAL_DMA_IRQHandler+0x698>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d040      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a80      	ldr	r2, [pc, #512]	; (80032d8 <HAL_DMA_IRQHandler+0x69c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d03b      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7f      	ldr	r2, [pc, #508]	; (80032dc <HAL_DMA_IRQHandler+0x6a0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d036      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a7d      	ldr	r2, [pc, #500]	; (80032e0 <HAL_DMA_IRQHandler+0x6a4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d031      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7c      	ldr	r2, [pc, #496]	; (80032e4 <HAL_DMA_IRQHandler+0x6a8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d02c      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7a      	ldr	r2, [pc, #488]	; (80032e8 <HAL_DMA_IRQHandler+0x6ac>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d027      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a79      	ldr	r2, [pc, #484]	; (80032ec <HAL_DMA_IRQHandler+0x6b0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a77      	ldr	r2, [pc, #476]	; (80032f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01d      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a76      	ldr	r2, [pc, #472]	; (80032f4 <HAL_DMA_IRQHandler+0x6b8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d018      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a74      	ldr	r2, [pc, #464]	; (80032f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a73      	ldr	r2, [pc, #460]	; (80032fc <HAL_DMA_IRQHandler+0x6c0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a71      	ldr	r2, [pc, #452]	; (8003300 <HAL_DMA_IRQHandler+0x6c4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a70      	ldr	r2, [pc, #448]	; (8003304 <HAL_DMA_IRQHandler+0x6c8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_DMA_IRQHandler+0x516>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_DMA_IRQHandler+0x6cc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10a      	bne.n	8003168 <HAL_DMA_IRQHandler+0x52c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e009      	b.n	800317c <HAL_DMA_IRQHandler+0x540>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d03e      	beq.n	80031fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2210      	movs	r2, #16
 800318a:	409a      	lsls	r2, r3
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d024      	beq.n	80031fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
 80031bc:	e01f      	b.n	80031fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01b      	beq.n	80031fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
 80031ce:	e016      	b.n	80031fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d107      	bne.n	80031ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0208 	bic.w	r2, r2, #8
 80031ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2220      	movs	r2, #32
 8003208:	409a      	lsls	r2, r3
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8110 	beq.w	8003434 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <HAL_DMA_IRQHandler+0x690>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d04a      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_DMA_IRQHandler+0x694>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d045      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <HAL_DMA_IRQHandler+0x698>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d040      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <HAL_DMA_IRQHandler+0x69c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d03b      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a26      	ldr	r2, [pc, #152]	; (80032dc <HAL_DMA_IRQHandler+0x6a0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d036      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <HAL_DMA_IRQHandler+0x6a4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d031      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_DMA_IRQHandler+0x6a8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d02c      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_DMA_IRQHandler+0x6ac>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d027      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a20      	ldr	r2, [pc, #128]	; (80032ec <HAL_DMA_IRQHandler+0x6b0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d022      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d01d      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_DMA_IRQHandler+0x6b8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d018      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <HAL_DMA_IRQHandler+0x6c0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_DMA_IRQHandler+0x6c4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a17      	ldr	r2, [pc, #92]	; (8003304 <HAL_DMA_IRQHandler+0x6c8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x678>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_DMA_IRQHandler+0x6cc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d12b      	bne.n	800330c <HAL_DMA_IRQHandler+0x6d0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e02a      	b.n	8003320 <HAL_DMA_IRQHandler+0x6e4>
 80032ca:	bf00      	nop
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8087 	beq.w	8003434 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2220      	movs	r2, #32
 8003330:	409a      	lsls	r2, r3
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b04      	cmp	r3, #4
 8003340:	d139      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0216 	bic.w	r2, r2, #22
 8003350:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003360:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_DMA_IRQHandler+0x736>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	223f      	movs	r2, #63	; 0x3f
 800338c:	409a      	lsls	r2, r3
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 834a 	beq.w	8003a40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
          }
          return;
 80033b4:	e344      	b.n	8003a40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d018      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d02c      	beq.n	8003434 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e027      	b.n	8003434 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d023      	beq.n	8003434 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e01e      	b.n	8003434 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10f      	bne.n	8003424 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0210 	bic.w	r2, r2, #16
 8003412:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8306 	beq.w	8003a4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8088 	beq.w	800355c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2204      	movs	r2, #4
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7a      	ldr	r2, [pc, #488]	; (8003644 <HAL_DMA_IRQHandler+0xa08>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04a      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a79      	ldr	r2, [pc, #484]	; (8003648 <HAL_DMA_IRQHandler+0xa0c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_DMA_IRQHandler+0xa10>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d040      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a76      	ldr	r2, [pc, #472]	; (8003650 <HAL_DMA_IRQHandler+0xa14>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a74      	ldr	r2, [pc, #464]	; (8003654 <HAL_DMA_IRQHandler+0xa18>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d036      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	; (8003658 <HAL_DMA_IRQHandler+0xa1c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a71      	ldr	r2, [pc, #452]	; (800365c <HAL_DMA_IRQHandler+0xa20>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02c      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a70      	ldr	r2, [pc, #448]	; (8003660 <HAL_DMA_IRQHandler+0xa24>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d027      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_DMA_IRQHandler+0xa28>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6d      	ldr	r2, [pc, #436]	; (8003668 <HAL_DMA_IRQHandler+0xa2c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6b      	ldr	r2, [pc, #428]	; (800366c <HAL_DMA_IRQHandler+0xa30>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <HAL_DMA_IRQHandler+0xa34>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a68      	ldr	r2, [pc, #416]	; (8003674 <HAL_DMA_IRQHandler+0xa38>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_DMA_IRQHandler+0xa3c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_DMA_IRQHandler+0xa40>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x8b8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a64      	ldr	r2, [pc, #400]	; (8003680 <HAL_DMA_IRQHandler+0xa44>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <HAL_DMA_IRQHandler+0x8ca>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e007      	b.n	8003516 <HAL_DMA_IRQHandler+0x8da>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3301      	adds	r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	429a      	cmp	r2, r3
 8003520:	d307      	bcc.n	8003532 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f2      	bne.n	8003516 <HAL_DMA_IRQHandler+0x8da>
 8003530:	e000      	b.n	8003534 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003532:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003552:	e003      	b.n	800355c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8272 	beq.w	8003a4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
 800356e:	e26c      	b.n	8003a4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a43      	ldr	r2, [pc, #268]	; (8003684 <HAL_DMA_IRQHandler+0xa48>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x984>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a42      	ldr	r2, [pc, #264]	; (8003688 <HAL_DMA_IRQHandler+0xa4c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d01d      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x984>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a40      	ldr	r2, [pc, #256]	; (800368c <HAL_DMA_IRQHandler+0xa50>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x984>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <HAL_DMA_IRQHandler+0xa54>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x984>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <HAL_DMA_IRQHandler+0xa58>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x984>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <HAL_DMA_IRQHandler+0xa5c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x984>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3a      	ldr	r2, [pc, #232]	; (800369c <HAL_DMA_IRQHandler+0xa60>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x984>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a39      	ldr	r2, [pc, #228]	; (80036a0 <HAL_DMA_IRQHandler+0xa64>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x988>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_IRQHandler+0x98a>
 80035c4:	2300      	movs	r3, #0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 823f 	beq.w	8003a4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2204      	movs	r2, #4
 80035de:	409a      	lsls	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80cd 	beq.w	8003784 <HAL_DMA_IRQHandler+0xb48>
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80c7 	beq.w	8003784 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2204      	movs	r2, #4
 8003600:	409a      	lsls	r2, r3
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d049      	beq.n	80036a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8210 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800362c:	e20a      	b.n	8003a44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8206 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003640:	e200      	b.n	8003a44 <HAL_DMA_IRQHandler+0xe08>
 8003642:	bf00      	nop
 8003644:	40020010 	.word	0x40020010
 8003648:	40020028 	.word	0x40020028
 800364c:	40020040 	.word	0x40020040
 8003650:	40020058 	.word	0x40020058
 8003654:	40020070 	.word	0x40020070
 8003658:	40020088 	.word	0x40020088
 800365c:	400200a0 	.word	0x400200a0
 8003660:	400200b8 	.word	0x400200b8
 8003664:	40020410 	.word	0x40020410
 8003668:	40020428 	.word	0x40020428
 800366c:	40020440 	.word	0x40020440
 8003670:	40020458 	.word	0x40020458
 8003674:	40020470 	.word	0x40020470
 8003678:	40020488 	.word	0x40020488
 800367c:	400204a0 	.word	0x400204a0
 8003680:	400204b8 	.word	0x400204b8
 8003684:	58025408 	.word	0x58025408
 8003688:	5802541c 	.word	0x5802541c
 800368c:	58025430 	.word	0x58025430
 8003690:	58025444 	.word	0x58025444
 8003694:	58025458 	.word	0x58025458
 8003698:	5802546c 	.word	0x5802546c
 800369c:	58025480 	.word	0x58025480
 80036a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d160      	bne.n	8003770 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a8c      	ldr	r2, [pc, #560]	; (80038e4 <HAL_DMA_IRQHandler+0xca8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04a      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a8a      	ldr	r2, [pc, #552]	; (80038e8 <HAL_DMA_IRQHandler+0xcac>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d045      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a89      	ldr	r2, [pc, #548]	; (80038ec <HAL_DMA_IRQHandler+0xcb0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d040      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a87      	ldr	r2, [pc, #540]	; (80038f0 <HAL_DMA_IRQHandler+0xcb4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03b      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a86      	ldr	r2, [pc, #536]	; (80038f4 <HAL_DMA_IRQHandler+0xcb8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d036      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a84      	ldr	r2, [pc, #528]	; (80038f8 <HAL_DMA_IRQHandler+0xcbc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d031      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a83      	ldr	r2, [pc, #524]	; (80038fc <HAL_DMA_IRQHandler+0xcc0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d02c      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a81      	ldr	r2, [pc, #516]	; (8003900 <HAL_DMA_IRQHandler+0xcc4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d027      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a80      	ldr	r2, [pc, #512]	; (8003904 <HAL_DMA_IRQHandler+0xcc8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7e      	ldr	r2, [pc, #504]	; (8003908 <HAL_DMA_IRQHandler+0xccc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01d      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7d      	ldr	r2, [pc, #500]	; (800390c <HAL_DMA_IRQHandler+0xcd0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7b      	ldr	r2, [pc, #492]	; (8003910 <HAL_DMA_IRQHandler+0xcd4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7a      	ldr	r2, [pc, #488]	; (8003914 <HAL_DMA_IRQHandler+0xcd8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a78      	ldr	r2, [pc, #480]	; (8003918 <HAL_DMA_IRQHandler+0xcdc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a77      	ldr	r2, [pc, #476]	; (800391c <HAL_DMA_IRQHandler+0xce0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_DMA_IRQHandler+0xb12>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_DMA_IRQHandler+0xce4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d108      	bne.n	8003760 <HAL_DMA_IRQHandler+0xb24>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0208 	bic.w	r2, r2, #8
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e007      	b.n	8003770 <HAL_DMA_IRQHandler+0xb34>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8165 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003782:	e15f      	b.n	8003a44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2202      	movs	r2, #2
 800378e:	409a      	lsls	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80c5 	beq.w	8003924 <HAL_DMA_IRQHandler+0xce8>
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80bf 	beq.w	8003924 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2202      	movs	r2, #2
 80037b0:	409a      	lsls	r2, r3
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d018      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 813a 	beq.w	8003a48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037dc:	e134      	b.n	8003a48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8130 	beq.w	8003a48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f0:	e12a      	b.n	8003a48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d168      	bne.n	80038ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a38      	ldr	r2, [pc, #224]	; (80038e4 <HAL_DMA_IRQHandler+0xca8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04a      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a37      	ldr	r2, [pc, #220]	; (80038e8 <HAL_DMA_IRQHandler+0xcac>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d045      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a35      	ldr	r2, [pc, #212]	; (80038ec <HAL_DMA_IRQHandler+0xcb0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d040      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <HAL_DMA_IRQHandler+0xcb4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d03b      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a32      	ldr	r2, [pc, #200]	; (80038f4 <HAL_DMA_IRQHandler+0xcb8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d036      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a31      	ldr	r2, [pc, #196]	; (80038f8 <HAL_DMA_IRQHandler+0xcbc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d031      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2f      	ldr	r2, [pc, #188]	; (80038fc <HAL_DMA_IRQHandler+0xcc0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02c      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <HAL_DMA_IRQHandler+0xcc4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d027      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <HAL_DMA_IRQHandler+0xcc8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <HAL_DMA_IRQHandler+0xccc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a29      	ldr	r2, [pc, #164]	; (800390c <HAL_DMA_IRQHandler+0xcd0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_DMA_IRQHandler+0xcd4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a26      	ldr	r2, [pc, #152]	; (8003914 <HAL_DMA_IRQHandler+0xcd8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a25      	ldr	r2, [pc, #148]	; (8003918 <HAL_DMA_IRQHandler+0xcdc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <HAL_DMA_IRQHandler+0xce0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_DMA_IRQHandler+0xc60>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a22      	ldr	r2, [pc, #136]	; (8003920 <HAL_DMA_IRQHandler+0xce4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d108      	bne.n	80038ae <HAL_DMA_IRQHandler+0xc72>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0214 	bic.w	r2, r2, #20
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e007      	b.n	80038be <HAL_DMA_IRQHandler+0xc82>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020a 	bic.w	r2, r2, #10
 80038bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80b8 	beq.w	8003a48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e0:	e0b2      	b.n	8003a48 <HAL_DMA_IRQHandler+0xe0c>
 80038e2:	bf00      	nop
 80038e4:	40020010 	.word	0x40020010
 80038e8:	40020028 	.word	0x40020028
 80038ec:	40020040 	.word	0x40020040
 80038f0:	40020058 	.word	0x40020058
 80038f4:	40020070 	.word	0x40020070
 80038f8:	40020088 	.word	0x40020088
 80038fc:	400200a0 	.word	0x400200a0
 8003900:	400200b8 	.word	0x400200b8
 8003904:	40020410 	.word	0x40020410
 8003908:	40020428 	.word	0x40020428
 800390c:	40020440 	.word	0x40020440
 8003910:	40020458 	.word	0x40020458
 8003914:	40020470 	.word	0x40020470
 8003918:	40020488 	.word	0x40020488
 800391c:	400204a0 	.word	0x400204a0
 8003920:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	2208      	movs	r2, #8
 800392e:	409a      	lsls	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8088 	beq.w	8003a4a <HAL_DMA_IRQHandler+0xe0e>
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8082 	beq.w	8003a4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a41      	ldr	r2, [pc, #260]	; (8003a50 <HAL_DMA_IRQHandler+0xe14>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04a      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3f      	ldr	r2, [pc, #252]	; (8003a54 <HAL_DMA_IRQHandler+0xe18>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a3e      	ldr	r2, [pc, #248]	; (8003a58 <HAL_DMA_IRQHandler+0xe1c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d040      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <HAL_DMA_IRQHandler+0xe20>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d03b      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <HAL_DMA_IRQHandler+0xe24>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d036      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a39      	ldr	r2, [pc, #228]	; (8003a64 <HAL_DMA_IRQHandler+0xe28>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_DMA_IRQHandler+0xe2c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d02c      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a36      	ldr	r2, [pc, #216]	; (8003a6c <HAL_DMA_IRQHandler+0xe30>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d027      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a35      	ldr	r2, [pc, #212]	; (8003a70 <HAL_DMA_IRQHandler+0xe34>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a33      	ldr	r2, [pc, #204]	; (8003a74 <HAL_DMA_IRQHandler+0xe38>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a32      	ldr	r2, [pc, #200]	; (8003a78 <HAL_DMA_IRQHandler+0xe3c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a30      	ldr	r2, [pc, #192]	; (8003a7c <HAL_DMA_IRQHandler+0xe40>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2f      	ldr	r2, [pc, #188]	; (8003a80 <HAL_DMA_IRQHandler+0xe44>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2d      	ldr	r2, [pc, #180]	; (8003a84 <HAL_DMA_IRQHandler+0xe48>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <HAL_DMA_IRQHandler+0xe4c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xdaa>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <HAL_DMA_IRQHandler+0xe50>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <HAL_DMA_IRQHandler+0xdbc>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 021c 	bic.w	r2, r2, #28
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e007      	b.n	8003a08 <HAL_DMA_IRQHandler+0xdcc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 020e 	bic.w	r2, r2, #14
 8003a06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
 8003a3e:	e004      	b.n	8003a4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003a40:	bf00      	nop
 8003a42:	e002      	b.n	8003a4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a44:	bf00      	nop
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40020010 	.word	0x40020010
 8003a54:	40020028 	.word	0x40020028
 8003a58:	40020040 	.word	0x40020040
 8003a5c:	40020058 	.word	0x40020058
 8003a60:	40020070 	.word	0x40020070
 8003a64:	40020088 	.word	0x40020088
 8003a68:	400200a0 	.word	0x400200a0
 8003a6c:	400200b8 	.word	0x400200b8
 8003a70:	40020410 	.word	0x40020410
 8003a74:	40020428 	.word	0x40020428
 8003a78:	40020440 	.word	0x40020440
 8003a7c:	40020458 	.word	0x40020458
 8003a80:	40020470 	.word	0x40020470
 8003a84:	40020488 	.word	0x40020488
 8003a88:	400204a0 	.word	0x400204a0
 8003a8c:	400204b8 	.word	0x400204b8

08003a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a42      	ldr	r2, [pc, #264]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x118>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04a      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a41      	ldr	r2, [pc, #260]	; (8003bac <DMA_CalcBaseAndBitshift+0x11c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d045      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a3f      	ldr	r2, [pc, #252]	; (8003bb0 <DMA_CalcBaseAndBitshift+0x120>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d040      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3e      	ldr	r2, [pc, #248]	; (8003bb4 <DMA_CalcBaseAndBitshift+0x124>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d03b      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <DMA_CalcBaseAndBitshift+0x128>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d036      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a3b      	ldr	r2, [pc, #236]	; (8003bbc <DMA_CalcBaseAndBitshift+0x12c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d031      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a39      	ldr	r2, [pc, #228]	; (8003bc0 <DMA_CalcBaseAndBitshift+0x130>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02c      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a38      	ldr	r2, [pc, #224]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x134>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d027      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a36      	ldr	r2, [pc, #216]	; (8003bc8 <DMA_CalcBaseAndBitshift+0x138>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <DMA_CalcBaseAndBitshift+0x13c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d01d      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a33      	ldr	r2, [pc, #204]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x140>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <DMA_CalcBaseAndBitshift+0x144>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <DMA_CalcBaseAndBitshift+0x148>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <DMA_CalcBaseAndBitshift+0x14c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <DMA_CalcBaseAndBitshift+0x150>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <DMA_CalcBaseAndBitshift+0x154>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <DMA_CalcBaseAndBitshift+0xac>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <DMA_CalcBaseAndBitshift+0xae>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d024      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3b10      	subs	r3, #16
 8003b4a:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <DMA_CalcBaseAndBitshift+0x158>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	4a24      	ldr	r2, [pc, #144]	; (8003bec <DMA_CalcBaseAndBitshift+0x15c>)
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d908      	bls.n	8003b7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x160>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	659a      	str	r2, [r3, #88]	; 0x58
 8003b7a:	e00d      	b.n	8003b98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x160>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8a:	e005      	b.n	8003b98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40020010 	.word	0x40020010
 8003bac:	40020028 	.word	0x40020028
 8003bb0:	40020040 	.word	0x40020040
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	40020070 	.word	0x40020070
 8003bbc:	40020088 	.word	0x40020088
 8003bc0:	400200a0 	.word	0x400200a0
 8003bc4:	400200b8 	.word	0x400200b8
 8003bc8:	40020410 	.word	0x40020410
 8003bcc:	40020428 	.word	0x40020428
 8003bd0:	40020440 	.word	0x40020440
 8003bd4:	40020458 	.word	0x40020458
 8003bd8:	40020470 	.word	0x40020470
 8003bdc:	40020488 	.word	0x40020488
 8003be0:	400204a0 	.word	0x400204a0
 8003be4:	400204b8 	.word	0x400204b8
 8003be8:	aaaaaaab 	.word	0xaaaaaaab
 8003bec:	08009f34 	.word	0x08009f34
 8003bf0:	fffffc00 	.word	0xfffffc00

08003bf4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d120      	bne.n	8003c4a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d858      	bhi.n	8003cc2 <DMA_CheckFifoParam+0xce>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <DMA_CheckFifoParam+0x24>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c3b 	.word	0x08003c3b
 8003c20:	08003c29 	.word	0x08003c29
 8003c24:	08003cc3 	.word	0x08003cc3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d048      	beq.n	8003cc6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c38:	e045      	b.n	8003cc6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c42:	d142      	bne.n	8003cca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c48:	e03f      	b.n	8003cca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c52:	d123      	bne.n	8003c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d838      	bhi.n	8003cce <DMA_CheckFifoParam+0xda>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <DMA_CheckFifoParam+0x70>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c7b 	.word	0x08003c7b
 8003c6c:	08003c75 	.word	0x08003c75
 8003c70:	08003c8d 	.word	0x08003c8d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
        break;
 8003c78:	e030      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d025      	beq.n	8003cd2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c8a:	e022      	b.n	8003cd2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c94:	d11f      	bne.n	8003cd6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c9a:	e01c      	b.n	8003cd6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d902      	bls.n	8003caa <DMA_CheckFifoParam+0xb6>
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d003      	beq.n	8003cb0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ca8:	e018      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
        break;
 8003cae:	e015      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8003cc0:	e00b      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
        break;
 8003cc2:	bf00      	nop
 8003cc4:	e00a      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e008      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e006      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e004      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
    break;
 8003cda:	bf00      	nop
    }
  }

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop

08003cec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a38      	ldr	r2, [pc, #224]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a36      	ldr	r2, [pc, #216]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01d      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a33      	ldr	r2, [pc, #204]	; (8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a32      	ldr	r2, [pc, #200]	; (8003df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01a      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	3b08      	subs	r3, #8
 8003d5c:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d88:	e024      	b.n	8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	3b10      	subs	r3, #16
 8003d92:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d806      	bhi.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d902      	bls.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3308      	adds	r3, #8
 8003db0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003dc4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2201      	movs	r2, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	58025408 	.word	0x58025408
 8003de4:	5802541c 	.word	0x5802541c
 8003de8:	58025430 	.word	0x58025430
 8003dec:	58025444 	.word	0x58025444
 8003df0:	58025458 	.word	0x58025458
 8003df4:	5802546c 	.word	0x5802546c
 8003df8:	58025480 	.word	0x58025480
 8003dfc:	58025494 	.word	0x58025494
 8003e00:	cccccccd 	.word	0xcccccccd
 8003e04:	16009600 	.word	0x16009600
 8003e08:	58025880 	.word	0x58025880
 8003e0c:	aaaaaaab 	.word	0xaaaaaaab
 8003e10:	400204b8 	.word	0x400204b8
 8003e14:	4002040f 	.word	0x4002040f
 8003e18:	10008200 	.word	0x10008200
 8003e1c:	40020880 	.word	0x40020880

08003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04a      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d847      	bhi.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a24      	ldr	r2, [pc, #144]	; (8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a22      	ldr	r2, [pc, #136]	; (8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ea8:	671a      	str	r2, [r3, #112]	; 0x70
 8003eaa:	e009      	b.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ebe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	58025408 	.word	0x58025408
 8003edc:	5802541c 	.word	0x5802541c
 8003ee0:	58025430 	.word	0x58025430
 8003ee4:	58025444 	.word	0x58025444
 8003ee8:	58025458 	.word	0x58025458
 8003eec:	5802546c 	.word	0x5802546c
 8003ef0:	58025480 	.word	0x58025480
 8003ef4:	58025494 	.word	0x58025494
 8003ef8:	1600963f 	.word	0x1600963f
 8003efc:	58025940 	.word	0x58025940
 8003f00:	1000823f 	.word	0x1000823f
 8003f04:	40020940 	.word	0x40020940

08003f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f16:	4b89      	ldr	r3, [pc, #548]	; (800413c <HAL_GPIO_Init+0x234>)
 8003f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f1a:	e194      	b.n	8004246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2101      	movs	r1, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8186 	beq.w	8004240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d00b      	beq.n	8003f54 <HAL_GPIO_Init+0x4c>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d007      	beq.n	8003f54 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f48:	2b11      	cmp	r3, #17
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b12      	cmp	r3, #18
 8003f52:	d130      	bne.n	8003fb6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 0201 	and.w	r2, r3, #1
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0xee>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b12      	cmp	r3, #18
 8003ff4:	d123      	bne.n	800403e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	08da      	lsrs	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3208      	adds	r2, #8
 8003ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	220f      	movs	r2, #15
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	08da      	lsrs	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3208      	adds	r2, #8
 8004038:	69b9      	ldr	r1, [r7, #24]
 800403a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	2203      	movs	r2, #3
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0203 	and.w	r2, r3, #3
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80e0 	beq.w	8004240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004080:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <HAL_GPIO_Init+0x238>)
 8004082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004086:	4a2e      	ldr	r2, [pc, #184]	; (8004140 <HAL_GPIO_Init+0x238>)
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_GPIO_Init+0x238>)
 8004092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800409e:	4a29      	ldr	r2, [pc, #164]	; (8004144 <HAL_GPIO_Init+0x23c>)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	3302      	adds	r3, #2
 80040a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	220f      	movs	r2, #15
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <HAL_GPIO_Init+0x240>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d052      	beq.n	8004170 <HAL_GPIO_Init+0x268>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <HAL_GPIO_Init+0x244>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d031      	beq.n	8004136 <HAL_GPIO_Init+0x22e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_GPIO_Init+0x248>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d02b      	beq.n	8004132 <HAL_GPIO_Init+0x22a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_GPIO_Init+0x24c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d025      	beq.n	800412e <HAL_GPIO_Init+0x226>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <HAL_GPIO_Init+0x250>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01f      	beq.n	800412a <HAL_GPIO_Init+0x222>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <HAL_GPIO_Init+0x254>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d019      	beq.n	8004126 <HAL_GPIO_Init+0x21e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <HAL_GPIO_Init+0x258>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_GPIO_Init+0x21a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_GPIO_Init+0x25c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00d      	beq.n	800411e <HAL_GPIO_Init+0x216>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a18      	ldr	r2, [pc, #96]	; (8004168 <HAL_GPIO_Init+0x260>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <HAL_GPIO_Init+0x212>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a17      	ldr	r2, [pc, #92]	; (800416c <HAL_GPIO_Init+0x264>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_GPIO_Init+0x20e>
 8004112:	2309      	movs	r3, #9
 8004114:	e02d      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 8004116:	230a      	movs	r3, #10
 8004118:	e02b      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 800411a:	2308      	movs	r3, #8
 800411c:	e029      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 800411e:	2307      	movs	r3, #7
 8004120:	e027      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 8004122:	2306      	movs	r3, #6
 8004124:	e025      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 8004126:	2305      	movs	r3, #5
 8004128:	e023      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 800412a:	2304      	movs	r3, #4
 800412c:	e021      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 800412e:	2303      	movs	r3, #3
 8004130:	e01f      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 8004132:	2302      	movs	r3, #2
 8004134:	e01d      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 8004136:	2301      	movs	r3, #1
 8004138:	e01b      	b.n	8004172 <HAL_GPIO_Init+0x26a>
 800413a:	bf00      	nop
 800413c:	58000080 	.word	0x58000080
 8004140:	58024400 	.word	0x58024400
 8004144:	58000400 	.word	0x58000400
 8004148:	58020000 	.word	0x58020000
 800414c:	58020400 	.word	0x58020400
 8004150:	58020800 	.word	0x58020800
 8004154:	58020c00 	.word	0x58020c00
 8004158:	58021000 	.word	0x58021000
 800415c:	58021400 	.word	0x58021400
 8004160:	58021800 	.word	0x58021800
 8004164:	58021c00 	.word	0x58021c00
 8004168:	58022000 	.word	0x58022000
 800416c:	58022400 	.word	0x58022400
 8004170:	2300      	movs	r3, #0
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	f002 0203 	and.w	r2, r2, #3
 8004178:	0092      	lsls	r2, r2, #2
 800417a:	4093      	lsls	r3, r2
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004182:	4938      	ldr	r1, [pc, #224]	; (8004264 <HAL_GPIO_Init+0x35c>)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3302      	adds	r3, #2
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800420a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f ae63 	bne.w	8003f1c <HAL_GPIO_Init+0x14>
  }
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	3724      	adds	r7, #36	; 0x24
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	58000400 	.word	0x58000400

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004284:	e003      	b.n	800428e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042ac:	887a      	ldrh	r2, [r7, #2]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4013      	ands	r3, r2
 80042b2:	041a      	lsls	r2, r3, #16
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	43d9      	mvns	r1, r3
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	400b      	ands	r3, r1
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	619a      	str	r2, [r3, #24]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc fd57 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_PWREx_ConfigSupply+0x70>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d00a      	beq.n	800432e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004318:	4b16      	ldr	r3, [pc, #88]	; (8004374 <HAL_PWREx_ConfigSupply+0x70>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d001      	beq.n	800432a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e01f      	b.n	800436a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e01d      	b.n	800436a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_PWREx_ConfigSupply+0x70>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f023 0207 	bic.w	r2, r3, #7
 8004336:	490f      	ldr	r1, [pc, #60]	; (8004374 <HAL_PWREx_ConfigSupply+0x70>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4313      	orrs	r3, r2
 800433c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800433e:	f7fd fa97 	bl	8001870 <HAL_GetTick>
 8004342:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004344:	e009      	b.n	800435a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004346:	f7fd fa93 	bl	8001870 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004354:	d901      	bls.n	800435a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e007      	b.n	800436a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_PWREx_ConfigSupply+0x70>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004366:	d1ee      	bne.n	8004346 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	58024800 	.word	0x58024800

08004378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	; 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e3ff      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8087 	beq.w	80044a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004398:	4b99      	ldr	r3, [pc, #612]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043a2:	4b97      	ldr	r3, [pc, #604]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d007      	beq.n	80043be <HAL_RCC_OscConfig+0x46>
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	2b18      	cmp	r3, #24
 80043b2:	d110      	bne.n	80043d6 <HAL_RCC_OscConfig+0x5e>
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d10b      	bne.n	80043d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043be:	4b90      	ldr	r3, [pc, #576]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d06c      	beq.n	80044a4 <HAL_RCC_OscConfig+0x12c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d168      	bne.n	80044a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e3d9      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043de:	d106      	bne.n	80043ee <HAL_RCC_OscConfig+0x76>
 80043e0:	4b87      	ldr	r3, [pc, #540]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a86      	ldr	r2, [pc, #536]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	e02e      	b.n	800444c <HAL_RCC_OscConfig+0xd4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x98>
 80043f6:	4b82      	ldr	r3, [pc, #520]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a81      	ldr	r2, [pc, #516]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80043fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b7f      	ldr	r3, [pc, #508]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7e      	ldr	r2, [pc, #504]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e01d      	b.n	800444c <HAL_RCC_OscConfig+0xd4>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0xbc>
 800441a:	4b79      	ldr	r3, [pc, #484]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a78      	ldr	r2, [pc, #480]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a75      	ldr	r2, [pc, #468]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xd4>
 8004434:	4b72      	ldr	r3, [pc, #456]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a71      	ldr	r2, [pc, #452]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b6f      	ldr	r3, [pc, #444]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6e      	ldr	r2, [pc, #440]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd fa0c 	bl	8001870 <HAL_GetTick>
 8004458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd fa08 	bl	8001870 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e38d      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800446e:	4b64      	ldr	r3, [pc, #400]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xe4>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd f9f8 	bl	8001870 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd f9f4 	bl	8001870 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e379      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004496:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x10c>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80ae 	beq.w	8004610 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b4:	4b52      	ldr	r3, [pc, #328]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044be:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_RCC_OscConfig+0x162>
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2b18      	cmp	r3, #24
 80044ce:	d13a      	bne.n	8004546 <HAL_RCC_OscConfig+0x1ce>
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d135      	bne.n	8004546 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044da:	4b49      	ldr	r3, [pc, #292]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e34b      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f2:	f7fd f9c9 	bl	8001888 <HAL_GetREVID>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d817      	bhi.n	8004530 <HAL_RCC_OscConfig+0x1b8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d108      	bne.n	800451a <HAL_RCC_OscConfig+0x1a2>
 8004508:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004510:	4a3b      	ldr	r2, [pc, #236]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004516:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004518:	e07a      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	031b      	lsls	r3, r3, #12
 8004528:	4935      	ldr	r1, [pc, #212]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800452e:	e06f      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	4930      	ldr	r1, [pc, #192]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004544:	e064      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d045      	beq.n	80045da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0219 	bic.w	r2, r3, #25
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	4929      	ldr	r1, [pc, #164]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd f986 	bl	8001870 <HAL_GetTick>
 8004564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004568:	f7fd f982 	bl	8001870 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e307      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	f7fd f97f 	bl	8001888 <HAL_GetREVID>
 800458a:	4603      	mov	r3, r0
 800458c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004590:	4293      	cmp	r3, r2
 8004592:	d817      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x24c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d108      	bne.n	80045ae <HAL_RCC_OscConfig+0x236>
 800459c:	4b18      	ldr	r3, [pc, #96]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	6053      	str	r3, [r2, #4]
 80045ac:	e030      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	031b      	lsls	r3, r3, #12
 80045bc:	4910      	ldr	r1, [pc, #64]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	604b      	str	r3, [r1, #4]
 80045c2:	e025      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	490b      	ldr	r1, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	e01a      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a08      	ldr	r2, [pc, #32]	; (8004600 <HAL_RCC_OscConfig+0x288>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd f943 	bl	8001870 <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fd f93f 	bl	8001870 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d903      	bls.n	8004604 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e2c4      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
 8004600:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004604:	4ba4      	ldr	r3, [pc, #656]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ee      	bne.n	80045ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a9 	beq.w	8004770 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461e:	4b9e      	ldr	r3, [pc, #632]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004626:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004628:	4b9b      	ldr	r3, [pc, #620]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d007      	beq.n	8004644 <HAL_RCC_OscConfig+0x2cc>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b18      	cmp	r3, #24
 8004638:	d13a      	bne.n	80046b0 <HAL_RCC_OscConfig+0x338>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d135      	bne.n	80046b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004644:	4b94      	ldr	r3, [pc, #592]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x2e4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d001      	beq.n	800465c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e296      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800465c:	f7fd f914 	bl	8001888 <HAL_GetREVID>
 8004660:	4603      	mov	r3, r0
 8004662:	f241 0203 	movw	r2, #4099	; 0x1003
 8004666:	4293      	cmp	r3, r2
 8004668:	d817      	bhi.n	800469a <HAL_RCC_OscConfig+0x322>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	2b20      	cmp	r3, #32
 8004670:	d108      	bne.n	8004684 <HAL_RCC_OscConfig+0x30c>
 8004672:	4b89      	ldr	r3, [pc, #548]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800467a:	4a87      	ldr	r2, [pc, #540]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 800467c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004680:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004682:	e075      	b.n	8004770 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004684:	4b84      	ldr	r3, [pc, #528]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	069b      	lsls	r3, r3, #26
 8004692:	4981      	ldr	r1, [pc, #516]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004698:	e06a      	b.n	8004770 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800469a:	4b7f      	ldr	r3, [pc, #508]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	497b      	ldr	r1, [pc, #492]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046ae:	e05f      	b.n	8004770 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d042      	beq.n	800473e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046b8:	4b77      	ldr	r3, [pc, #476]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a76      	ldr	r2, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd f8d4 	bl	8001870 <HAL_GetTick>
 80046c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046cc:	f7fd f8d0 	bl	8001870 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e255      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046de:	4b6e      	ldr	r3, [pc, #440]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ea:	f7fd f8cd 	bl	8001888 <HAL_GetREVID>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d817      	bhi.n	8004728 <HAL_RCC_OscConfig+0x3b0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d108      	bne.n	8004712 <HAL_RCC_OscConfig+0x39a>
 8004700:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004708:	4a63      	ldr	r2, [pc, #396]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 800470a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800470e:	6053      	str	r3, [r2, #4]
 8004710:	e02e      	b.n	8004770 <HAL_RCC_OscConfig+0x3f8>
 8004712:	4b61      	ldr	r3, [pc, #388]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	495d      	ldr	r1, [pc, #372]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
 8004726:	e023      	b.n	8004770 <HAL_RCC_OscConfig+0x3f8>
 8004728:	4b5b      	ldr	r3, [pc, #364]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	4958      	ldr	r1, [pc, #352]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004738:	4313      	orrs	r3, r2
 800473a:	60cb      	str	r3, [r1, #12]
 800473c:	e018      	b.n	8004770 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800473e:	4b56      	ldr	r3, [pc, #344]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a55      	ldr	r2, [pc, #340]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd f891 	bl	8001870 <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004752:	f7fd f88d 	bl	8001870 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e212      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004764:	4b4c      	ldr	r3, [pc, #304]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f0      	bne.n	8004752 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d036      	beq.n	80047ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d019      	beq.n	80047b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004784:	4b44      	ldr	r3, [pc, #272]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	4a43      	ldr	r2, [pc, #268]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd f86e 	bl	8001870 <HAL_GetTick>
 8004794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004798:	f7fd f86a 	bl	8001870 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e1ef      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80047ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x420>
 80047b6:	e018      	b.n	80047ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b8:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80047ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047bc:	4a36      	ldr	r2, [pc, #216]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fd f854 	bl	8001870 <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fd f850 	bl	8001870 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e1d5      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047de:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d036      	beq.n	8004864 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d019      	beq.n	8004832 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047fe:	4b26      	ldr	r3, [pc, #152]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a25      	ldr	r2, [pc, #148]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004808:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800480a:	f7fd f831 	bl	8001870 <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004812:	f7fd f82d 	bl	8001870 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e1b2      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x49a>
 8004830:	e018      	b.n	8004864 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 8004838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800483c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800483e:	f7fd f817 	bl	8001870 <HAL_GetTick>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004846:	f7fd f813 	bl	8001870 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e198      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_RCC_OscConfig+0x520>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8085 	beq.w	800497c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <HAL_RCC_OscConfig+0x524>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a09      	ldr	r2, [pc, #36]	; (800489c <HAL_RCC_OscConfig+0x524>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800487e:	f7fc fff7 	bl	8001870 <HAL_GetTick>
 8004882:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004884:	e00c      	b.n	80048a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004886:	f7fc fff3 	bl	8001870 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d905      	bls.n	80048a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e178      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
 8004898:	58024400 	.word	0x58024400
 800489c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a0:	4b96      	ldr	r3, [pc, #600]	; (8004afc <HAL_RCC_OscConfig+0x784>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ec      	beq.n	8004886 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x54a>
 80048b4:	4b92      	ldr	r3, [pc, #584]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	4a91      	ldr	r2, [pc, #580]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6713      	str	r3, [r2, #112]	; 0x70
 80048c0:	e02d      	b.n	800491e <HAL_RCC_OscConfig+0x5a6>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x56c>
 80048ca:	4b8d      	ldr	r3, [pc, #564]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4a8c      	ldr	r2, [pc, #560]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
 80048d6:	4b8a      	ldr	r3, [pc, #552]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	4a89      	ldr	r2, [pc, #548]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048dc:	f023 0304 	bic.w	r3, r3, #4
 80048e0:	6713      	str	r3, [r2, #112]	; 0x70
 80048e2:	e01c      	b.n	800491e <HAL_RCC_OscConfig+0x5a6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d10c      	bne.n	8004906 <HAL_RCC_OscConfig+0x58e>
 80048ec:	4b84      	ldr	r3, [pc, #528]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	4a83      	ldr	r2, [pc, #524]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048f2:	f043 0304 	orr.w	r3, r3, #4
 80048f6:	6713      	str	r3, [r2, #112]	; 0x70
 80048f8:	4b81      	ldr	r3, [pc, #516]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4a80      	ldr	r2, [pc, #512]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
 8004904:	e00b      	b.n	800491e <HAL_RCC_OscConfig+0x5a6>
 8004906:	4b7e      	ldr	r3, [pc, #504]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	4a7d      	ldr	r2, [pc, #500]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	6713      	str	r3, [r2, #112]	; 0x70
 8004912:	4b7b      	ldr	r3, [pc, #492]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	4a7a      	ldr	r2, [pc, #488]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d015      	beq.n	8004952 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004926:	f7fc ffa3 	bl	8001870 <HAL_GetTick>
 800492a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492e:	f7fc ff9f 	bl	8001870 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f241 3288 	movw	r2, #5000	; 0x1388
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e122      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004944:	4b6e      	ldr	r3, [pc, #440]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0ee      	beq.n	800492e <HAL_RCC_OscConfig+0x5b6>
 8004950:	e014      	b.n	800497c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004952:	f7fc ff8d 	bl	8001870 <HAL_GetTick>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004958:	e00a      	b.n	8004970 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800495a:	f7fc ff89 	bl	8001870 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f241 3288 	movw	r2, #5000	; 0x1388
 8004968:	4293      	cmp	r3, r2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e10c      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004970:	4b63      	ldr	r3, [pc, #396]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1ee      	bne.n	800495a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8101 	beq.w	8004b88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004986:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800498e:	2b18      	cmp	r3, #24
 8004990:	f000 80bc 	beq.w	8004b0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	2b02      	cmp	r3, #2
 800499a:	f040 8095 	bne.w	8004ac8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b58      	ldr	r3, [pc, #352]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a57      	ldr	r2, [pc, #348]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80049a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fc ff61 	bl	8001870 <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fc ff5d 	bl	8001870 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0e2      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d0:	4b4b      	ldr	r3, [pc, #300]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80049d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d4:	4b4b      	ldr	r3, [pc, #300]	; (8004b04 <HAL_RCC_OscConfig+0x78c>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049e0:	0112      	lsls	r2, r2, #4
 80049e2:	430a      	orrs	r2, r1
 80049e4:	4946      	ldr	r1, [pc, #280]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	628b      	str	r3, [r1, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	3b01      	subs	r3, #1
 80049f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	3b01      	subs	r3, #1
 80049fa:	025b      	lsls	r3, r3, #9
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	3b01      	subs	r3, #1
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	3b01      	subs	r3, #1
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a1a:	4939      	ldr	r1, [pc, #228]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a20:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a36      	ldr	r2, [pc, #216]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a2c:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a30:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <HAL_RCC_OscConfig+0x790>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a38:	00d2      	lsls	r2, r2, #3
 8004a3a:	4931      	ldr	r1, [pc, #196]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a40:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	f023 020c 	bic.w	r2, r3, #12
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	492c      	ldr	r1, [pc, #176]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a52:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f023 0202 	bic.w	r2, r3, #2
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	4928      	ldr	r1, [pc, #160]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a64:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a70:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fc fee6 	bl	8001870 <HAL_GetTick>
 8004aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fc fee2 	bl	8001870 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e067      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x730>
 8004ac6:	e05f      	b.n	8004b88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fc fecc 	bl	8001870 <HAL_GetTick>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fc fec8 	bl	8001870 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e04d      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <HAL_RCC_OscConfig+0x788>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x764>
 8004afa:	e045      	b.n	8004b88 <HAL_RCC_OscConfig+0x810>
 8004afc:	58024800 	.word	0x58024800
 8004b00:	58024400 	.word	0x58024400
 8004b04:	fffffc0c 	.word	0xfffffc0c
 8004b08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCC_OscConfig+0x81c>)
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <HAL_RCC_OscConfig+0x81c>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d031      	beq.n	8004b84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f003 0203 	and.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d12a      	bne.n	8004b84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d122      	bne.n	8004b84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d11a      	bne.n	8004b84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d111      	bne.n	8004b84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d108      	bne.n	8004b84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	0e1b      	lsrs	r3, r3, #24
 8004b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3730      	adds	r7, #48	; 0x30
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400

08004b98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e19c      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bac:	4b8a      	ldr	r3, [pc, #552]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d910      	bls.n	8004bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bba:	4b87      	ldr	r3, [pc, #540]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 020f 	bic.w	r2, r3, #15
 8004bc2:	4985      	ldr	r1, [pc, #532]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b83      	ldr	r3, [pc, #524]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e184      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d010      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	4b7b      	ldr	r3, [pc, #492]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d908      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bf8:	4b78      	ldr	r3, [pc, #480]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	4975      	ldr	r1, [pc, #468]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	4b70      	ldr	r3, [pc, #448]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d908      	bls.n	8004c38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c26:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	496a      	ldr	r1, [pc, #424]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d010      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	4b64      	ldr	r3, [pc, #400]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d908      	bls.n	8004c66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c54:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	495e      	ldr	r1, [pc, #376]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	4b59      	ldr	r3, [pc, #356]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d908      	bls.n	8004c94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c82:	4b56      	ldr	r3, [pc, #344]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	4953      	ldr	r1, [pc, #332]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4b4d      	ldr	r3, [pc, #308]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d908      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb0:	4b4a      	ldr	r3, [pc, #296]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f023 020f 	bic.w	r2, r3, #15
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4947      	ldr	r1, [pc, #284]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d055      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cce:	4b43      	ldr	r3, [pc, #268]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4940      	ldr	r1, [pc, #256]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ce8:	4b3c      	ldr	r3, [pc, #240]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d121      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0f6      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d107      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d00:	4b36      	ldr	r3, [pc, #216]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d115      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0ea      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d18:	4b30      	ldr	r3, [pc, #192]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0de      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d28:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0d6      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d38:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f023 0207 	bic.w	r2, r3, #7
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4925      	ldr	r1, [pc, #148]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4a:	f7fc fd91 	bl	8001870 <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d52:	f7fc fd8d 	bl	8001870 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0be      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d68:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d1eb      	bne.n	8004d52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d010      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d208      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d96:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f023 020f 	bic.w	r2, r3, #15
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	490e      	ldr	r1, [pc, #56]	; (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d214      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 020f 	bic.w	r2, r3, #15
 8004dbe:	4906      	ldr	r1, [pc, #24]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e086      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
 8004dd8:	52002000 	.word	0x52002000
 8004ddc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	4b3f      	ldr	r3, [pc, #252]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d208      	bcs.n	8004e0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dfc:	4b3c      	ldr	r3, [pc, #240]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4939      	ldr	r1, [pc, #228]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d208      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	492e      	ldr	r1, [pc, #184]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d208      	bcs.n	8004e6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e58:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	4922      	ldr	r1, [pc, #136]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d010      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d208      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e86:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4917      	ldr	r1, [pc, #92]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e98:	f000 f834 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	4912      	ldr	r1, [pc, #72]	; (8004ef4 <HAL_RCC_ClockConfig+0x35c>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	4a0d      	ldr	r2, [pc, #52]	; (8004ef4 <HAL_RCC_ClockConfig+0x35c>)
 8004ec0:	5cd3      	ldrb	r3, [r2, r3]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <HAL_RCC_ClockConfig+0x360>)
 8004ece:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x364>)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x368>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc fc7e 	bl	80017dc <HAL_InitTick>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	08009f24 	.word	0x08009f24
 8004ef8:	20000008 	.word	0x20000008
 8004efc:	20000004 	.word	0x20000004
 8004f00:	2000000c 	.word	0x2000000c

08004f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b089      	sub	sp, #36	; 0x24
 8004f08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f0a:	4bb3      	ldr	r3, [pc, #716]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f12:	2b18      	cmp	r3, #24
 8004f14:	f200 8155 	bhi.w	80051c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004f18:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f85 	.word	0x08004f85
 8004f24:	080051c3 	.word	0x080051c3
 8004f28:	080051c3 	.word	0x080051c3
 8004f2c:	080051c3 	.word	0x080051c3
 8004f30:	080051c3 	.word	0x080051c3
 8004f34:	080051c3 	.word	0x080051c3
 8004f38:	080051c3 	.word	0x080051c3
 8004f3c:	080051c3 	.word	0x080051c3
 8004f40:	08004fab 	.word	0x08004fab
 8004f44:	080051c3 	.word	0x080051c3
 8004f48:	080051c3 	.word	0x080051c3
 8004f4c:	080051c3 	.word	0x080051c3
 8004f50:	080051c3 	.word	0x080051c3
 8004f54:	080051c3 	.word	0x080051c3
 8004f58:	080051c3 	.word	0x080051c3
 8004f5c:	080051c3 	.word	0x080051c3
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	080051c3 	.word	0x080051c3
 8004f68:	080051c3 	.word	0x080051c3
 8004f6c:	080051c3 	.word	0x080051c3
 8004f70:	080051c3 	.word	0x080051c3
 8004f74:	080051c3 	.word	0x080051c3
 8004f78:	080051c3 	.word	0x080051c3
 8004f7c:	080051c3 	.word	0x080051c3
 8004f80:	08004fb7 	.word	0x08004fb7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f84:	4b94      	ldr	r3, [pc, #592]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f90:	4b91      	ldr	r3, [pc, #580]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	08db      	lsrs	r3, r3, #3
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	4a90      	ldr	r2, [pc, #576]	; (80051dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004fa2:	e111      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fa4:	4b8d      	ldr	r3, [pc, #564]	; (80051dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fa6:	61bb      	str	r3, [r7, #24]
    break;
 8004fa8:	e10e      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004faa:	4b8d      	ldr	r3, [pc, #564]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fac:	61bb      	str	r3, [r7, #24]
    break;
 8004fae:	e10b      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004fb0:	4b8c      	ldr	r3, [pc, #560]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fb2:	61bb      	str	r3, [r7, #24]
    break;
 8004fb4:	e108      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb6:	4b88      	ldr	r3, [pc, #544]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fc0:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fcc:	4b82      	ldr	r3, [pc, #520]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fd6:	4b80      	ldr	r3, [pc, #512]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80e1 	beq.w	80051bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f000 8083 	beq.w	8005108 <HAL_RCC_GetSysClockFreq+0x204>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b02      	cmp	r3, #2
 8005006:	f200 80a1 	bhi.w	800514c <HAL_RCC_GetSysClockFreq+0x248>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_RCC_GetSysClockFreq+0x114>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d056      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005016:	e099      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005018:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02d      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005024:	4b6c      	ldr	r3, [pc, #432]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	4a6b      	ldr	r2, [pc, #428]	; (80051dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
 8005034:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b62      	ldr	r3, [pc, #392]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005062:	eddf 5a61 	vldr	s11, [pc, #388]	; 80051e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800507e:	e087      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80051ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b51      	ldr	r3, [pc, #324]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80051e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050c2:	e065      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80051f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b40      	ldr	r3, [pc, #256]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80051e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005106:	e043      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a38 	vldr	s13, [pc, #224]	; 80051f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a02 	vldr	s12, [r7, #8]
 800512e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80051e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514a:	e021      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a26 	vldr	s13, [pc, #152]	; 80051f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005172:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80051e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005190:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	0a5b      	lsrs	r3, r3, #9
 8005196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519a:	3301      	adds	r3, #1
 800519c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b4:	ee17 3a90 	vmov	r3, s15
 80051b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80051ba:	e005      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]
    break;
 80051c0:	e002      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051c4:	61bb      	str	r3, [r7, #24]
    break;
 80051c6:	bf00      	nop
  }

  return sysclockfreq;
 80051c8:	69bb      	ldr	r3, [r7, #24]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3724      	adds	r7, #36	; 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	03d09000 	.word	0x03d09000
 80051e0:	003d0900 	.word	0x003d0900
 80051e4:	02dc6c00 	.word	0x02dc6c00
 80051e8:	46000000 	.word	0x46000000
 80051ec:	4c742400 	.word	0x4c742400
 80051f0:	4a742400 	.word	0x4a742400
 80051f4:	4c371b00 	.word	0x4c371b00

080051f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051fe:	f7ff fe81 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8005202:	4602      	mov	r2, r0
 8005204:	4b10      	ldr	r3, [pc, #64]	; (8005248 <HAL_RCC_GetHCLKFreq+0x50>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	0a1b      	lsrs	r3, r3, #8
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	490f      	ldr	r1, [pc, #60]	; (800524c <HAL_RCC_GetHCLKFreq+0x54>)
 8005210:	5ccb      	ldrb	r3, [r1, r3]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_GetHCLKFreq+0x50>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	4a09      	ldr	r2, [pc, #36]	; (800524c <HAL_RCC_GetHCLKFreq+0x54>)
 8005226:	5cd3      	ldrb	r3, [r2, r3]
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	fa22 f303 	lsr.w	r3, r2, r3
 8005232:	4a07      	ldr	r2, [pc, #28]	; (8005250 <HAL_RCC_GetHCLKFreq+0x58>)
 8005234:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005236:	4a07      	ldr	r2, [pc, #28]	; (8005254 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800523c:	4b04      	ldr	r3, [pc, #16]	; (8005250 <HAL_RCC_GetHCLKFreq+0x58>)
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	58024400 	.word	0x58024400
 800524c:	08009f24 	.word	0x08009f24
 8005250:	20000008 	.word	0x20000008
 8005254:	20000004 	.word	0x20000004

08005258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800525c:	f7ff ffcc 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	091b      	lsrs	r3, r3, #4
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4904      	ldr	r1, [pc, #16]	; (8005280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	58024400 	.word	0x58024400
 8005280:	08009f24 	.word	0x08009f24

08005284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005288:	f7ff ffb6 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4904      	ldr	r1, [pc, #16]	; (80052ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	58024400 	.word	0x58024400
 80052ac:	08009f24 	.word	0x08009f24

080052b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052b8:	2300      	movs	r3, #0
 80052ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052bc:	2300      	movs	r3, #0
 80052be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d03f      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052d4:	d02a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052da:	d824      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e0:	d018      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e6:	d81e      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f0:	d007      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052f2:	e018      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f4:	4bab      	ldr	r3, [pc, #684]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4aaa      	ldr	r2, [pc, #680]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005300:	e015      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	2102      	movs	r1, #2
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f9cf 	bl	80066ac <RCCEx_PLL2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005312:	e00c      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	2102      	movs	r1, #2
 800531a:	4618      	mov	r0, r3
 800531c:	f001 fa78 	bl	8006810 <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
      break;
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800532c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005334:	4b9b      	ldr	r3, [pc, #620]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005340:	4998      	ldr	r1, [pc, #608]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005342:	4313      	orrs	r3, r2
 8005344:	650b      	str	r3, [r1, #80]	; 0x50
 8005346:	e001      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d03d      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	2b04      	cmp	r3, #4
 800535e:	d826      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005360:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	0800537d 	.word	0x0800537d
 800536c:	0800538b 	.word	0x0800538b
 8005370:	0800539d 	.word	0x0800539d
 8005374:	080053b5 	.word	0x080053b5
 8005378:	080053b5 	.word	0x080053b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537c:	4b89      	ldr	r3, [pc, #548]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a88      	ldr	r2, [pc, #544]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005388:	e015      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	2100      	movs	r1, #0
 8005390:	4618      	mov	r0, r3
 8005392:	f001 f98b 	bl	80066ac <RCCEx_PLL2_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800539a:	e00c      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3324      	adds	r3, #36	; 0x24
 80053a0:	2100      	movs	r1, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fa34 	bl	8006810 <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053ac:	e003      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75fb      	strb	r3, [r7, #23]
      break;
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80053b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d109      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053bc:	4b79      	ldr	r3, [pc, #484]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	f023 0207 	bic.w	r2, r3, #7
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	4976      	ldr	r1, [pc, #472]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	650b      	str	r3, [r1, #80]	; 0x50
 80053ce:	e001      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d042      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e8:	d02b      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ee:	d825      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053f0:	2bc0      	cmp	r3, #192	; 0xc0
 80053f2:	d028      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053f4:	2bc0      	cmp	r3, #192	; 0xc0
 80053f6:	d821      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	d016      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d81d      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d007      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005408:	e018      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540a:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	4a65      	ldr	r2, [pc, #404]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005416:	e017      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 f944 	bl	80066ac <RCCEx_PLL2_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005428:	e00e      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3324      	adds	r3, #36	; 0x24
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f001 f9ed 	bl	8006810 <RCCEx_PLL3_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800543a:	e005      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
      break;
 8005440:	e002      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005442:	bf00      	nop
 8005444:	e000      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800544e:	4b55      	ldr	r3, [pc, #340]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545a:	4952      	ldr	r1, [pc, #328]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	650b      	str	r3, [r1, #80]	; 0x50
 8005460:	e001      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546e:	2b00      	cmp	r3, #0
 8005470:	d049      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800547c:	d030      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800547e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005482:	d82a      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005484:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005488:	d02c      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800548a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800548e:	d824      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005494:	d018      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549a:	d81e      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80054a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a4:	d007      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80054a6:	e018      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a8:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	4a3d      	ldr	r2, [pc, #244]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054b4:	e017      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3304      	adds	r3, #4
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 f8f5 	bl	80066ac <RCCEx_PLL2_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054c6:	e00e      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 f99e 	bl	8006810 <RCCEx_PLL3_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054d8:	e005      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
      break;
 80054de:	e002      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80054e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054ec:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054fa:	492a      	ldr	r1, [pc, #168]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	658b      	str	r3, [r1, #88]	; 0x58
 8005500:	e001      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550e:	2b00      	cmp	r3, #0
 8005510:	d04c      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800551c:	d030      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800551e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005522:	d82a      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005524:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005528:	d02c      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800552a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800552e:	d824      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005534:	d018      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800553a:	d81e      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005544:	d007      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005546:	e018      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005548:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800554e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005554:	e017      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	2100      	movs	r1, #0
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f8a5 	bl	80066ac <RCCEx_PLL2_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005566:	e00e      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3324      	adds	r3, #36	; 0x24
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f001 f94e 	bl	8006810 <RCCEx_PLL3_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005578:	e005      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
      break;
 800557e:	e002      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10d      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800559a:	4902      	ldr	r1, [pc, #8]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559c:	4313      	orrs	r3, r2
 800559e:	658b      	str	r3, [r1, #88]	; 0x58
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d032      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055bc:	2b30      	cmp	r3, #48	; 0x30
 80055be:	d01c      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055c0:	2b30      	cmp	r3, #48	; 0x30
 80055c2:	d817      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d00c      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d813      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d10f      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d4:	4baf      	ldr	r3, [pc, #700]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	4aae      	ldr	r2, [pc, #696]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055e0:	e00e      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2102      	movs	r1, #2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f85f 	bl	80066ac <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055f2:	e005      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
      break;
 80055f8:	e002      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80055fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005606:	4ba3      	ldr	r3, [pc, #652]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005612:	49a0      	ldr	r1, [pc, #640]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005614:	4313      	orrs	r3, r2
 8005616:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005618:	e001      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d047      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005632:	d030      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005638:	d82a      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800563a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800563e:	d02c      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005640:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005644:	d824      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	d018      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005650:	d81e      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	d007      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800565c:	e018      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a8c      	ldr	r2, [pc, #560]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800566a:	e017      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	2100      	movs	r1, #0
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f81a 	bl	80066ac <RCCEx_PLL2_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800567c:	e00e      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3324      	adds	r3, #36	; 0x24
 8005682:	2100      	movs	r1, #0
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f8c3 	bl	8006810 <RCCEx_PLL3_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800568e:	e005      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
      break;
 8005694:	e002      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800569a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056a2:	4b7c      	ldr	r3, [pc, #496]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	4979      	ldr	r1, [pc, #484]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	650b      	str	r3, [r1, #80]	; 0x50
 80056b4:	e001      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d049      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ce:	d02e      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80056d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d4:	d828      	bhi.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80056d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056da:	d02a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80056dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056e0:	d822      	bhi.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80056e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056e6:	d026      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80056e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056ec:	d81c      	bhi.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80056ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f2:	d010      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80056f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f8:	d816      	bhi.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01d      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005702:	d111      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3304      	adds	r3, #4
 8005708:	2101      	movs	r1, #1
 800570a:	4618      	mov	r0, r3
 800570c:	f000 ffce 	bl	80066ac <RCCEx_PLL2_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005714:	e012      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3324      	adds	r3, #36	; 0x24
 800571a:	2101      	movs	r1, #1
 800571c:	4618      	mov	r0, r3
 800571e:	f001 f877 	bl	8006810 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005726:	e009      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	75fb      	strb	r3, [r7, #23]
      break;
 800572c:	e006      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800572e:	bf00      	nop
 8005730:	e004      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005732:	bf00      	nop
 8005734:	e002      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800573a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005742:	4b54      	ldr	r3, [pc, #336]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005746:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574e:	4951      	ldr	r1, [pc, #324]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005750:	4313      	orrs	r3, r2
 8005752:	650b      	str	r3, [r1, #80]	; 0x50
 8005754:	e001      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d04b      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800576c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005770:	d02e      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005776:	d828      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d02a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d822      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005784:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005788:	d026      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800578a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800578e:	d81c      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005794:	d010      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579a:	d816      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01d      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80057a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a4:	d111      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	2101      	movs	r1, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 ff7d 	bl	80066ac <RCCEx_PLL2_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057b6:	e012      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3324      	adds	r3, #36	; 0x24
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f826 	bl	8006810 <RCCEx_PLL3_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057c8:	e009      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	75fb      	strb	r3, [r7, #23]
      break;
 80057ce:	e006      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057d0:	bf00      	nop
 80057d2:	e004      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057f2:	4928      	ldr	r1, [pc, #160]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	658b      	str	r3, [r1, #88]	; 0x58
 80057f8:	e001      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d02f      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005812:	d00e      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005818:	d814      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d015      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800581e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005822:	d10f      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800582a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005830:	e00c      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	2101      	movs	r1, #1
 8005838:	4618      	mov	r0, r3
 800583a:	f000 ff37 	bl	80066ac <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005842:	e003      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800584a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585e:	490d      	ldr	r1, [pc, #52]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005860:	4313      	orrs	r3, r2
 8005862:	650b      	str	r3, [r1, #80]	; 0x50
 8005864:	e001      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d033      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587a:	2b03      	cmp	r3, #3
 800587c:	d81c      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800587e:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	080058bf 	.word	0x080058bf
 8005888:	08005899 	.word	0x08005899
 800588c:	080058a7 	.word	0x080058a7
 8005890:	080058bf 	.word	0x080058bf
 8005894:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005898:	4bb8      	ldr	r3, [pc, #736]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4ab7      	ldr	r2, [pc, #732]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800589e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058a4:	e00c      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	2102      	movs	r1, #2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fefd 	bl	80066ac <RCCEx_PLL2_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058b6:	e003      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
      break;
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80058be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058c6:	4bad      	ldr	r3, [pc, #692]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	f023 0203 	bic.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	49aa      	ldr	r1, [pc, #680]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058d8:	e001      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8086 	beq.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ec:	4ba4      	ldr	r3, [pc, #656]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4aa3      	ldr	r2, [pc, #652]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80058f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058f8:	f7fb ffba 	bl	8001870 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058fe:	e009      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005900:	f7fb ffb6 	bl	8001870 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	; 0x64
 800590c:	d902      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	75fb      	strb	r3, [r7, #23]
        break;
 8005912:	e005      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005914:	4b9a      	ldr	r3, [pc, #616]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ef      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d166      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005926:	4b95      	ldr	r3, [pc, #596]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005928:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005930:	4053      	eors	r3, r2
 8005932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005936:	2b00      	cmp	r3, #0
 8005938:	d013      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800593a:	4b90      	ldr	r3, [pc, #576]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005942:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005944:	4b8d      	ldr	r3, [pc, #564]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	4a8c      	ldr	r2, [pc, #560]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800594a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005950:	4b8a      	ldr	r3, [pc, #552]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	4a89      	ldr	r2, [pc, #548]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800595c:	4a87      	ldr	r2, [pc, #540]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596c:	d115      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596e:	f7fb ff7f 	bl	8001870 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005974:	e00b      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fb ff7b 	bl	8001870 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d902      	bls.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	75fb      	strb	r3, [r7, #23]
            break;
 800598c:	e005      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800598e:	4b7b      	ldr	r3, [pc, #492]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ed      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d126      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ae:	d10d      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80059b0:	4b72      	ldr	r3, [pc, #456]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059be:	0919      	lsrs	r1, r3, #4
 80059c0:	4b70      	ldr	r3, [pc, #448]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80059c2:	400b      	ands	r3, r1
 80059c4:	496d      	ldr	r1, [pc, #436]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	610b      	str	r3, [r1, #16]
 80059ca:	e005      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80059cc:	4b6b      	ldr	r3, [pc, #428]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	4a6a      	ldr	r2, [pc, #424]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059d6:	6113      	str	r3, [r2, #16]
 80059d8:	4b68      	ldr	r3, [pc, #416]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e6:	4965      	ldr	r1, [pc, #404]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	670b      	str	r3, [r1, #112]	; 0x70
 80059ec:	e004      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	75bb      	strb	r3, [r7, #22]
 80059f2:	e001      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d07e      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a08:	2b28      	cmp	r3, #40	; 0x28
 8005a0a:	d867      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005ae3 	.word	0x08005ae3
 8005a18:	08005add 	.word	0x08005add
 8005a1c:	08005add 	.word	0x08005add
 8005a20:	08005add 	.word	0x08005add
 8005a24:	08005add 	.word	0x08005add
 8005a28:	08005add 	.word	0x08005add
 8005a2c:	08005add 	.word	0x08005add
 8005a30:	08005add 	.word	0x08005add
 8005a34:	08005ab9 	.word	0x08005ab9
 8005a38:	08005add 	.word	0x08005add
 8005a3c:	08005add 	.word	0x08005add
 8005a40:	08005add 	.word	0x08005add
 8005a44:	08005add 	.word	0x08005add
 8005a48:	08005add 	.word	0x08005add
 8005a4c:	08005add 	.word	0x08005add
 8005a50:	08005add 	.word	0x08005add
 8005a54:	08005acb 	.word	0x08005acb
 8005a58:	08005add 	.word	0x08005add
 8005a5c:	08005add 	.word	0x08005add
 8005a60:	08005add 	.word	0x08005add
 8005a64:	08005add 	.word	0x08005add
 8005a68:	08005add 	.word	0x08005add
 8005a6c:	08005add 	.word	0x08005add
 8005a70:	08005add 	.word	0x08005add
 8005a74:	08005ae3 	.word	0x08005ae3
 8005a78:	08005add 	.word	0x08005add
 8005a7c:	08005add 	.word	0x08005add
 8005a80:	08005add 	.word	0x08005add
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005add 	.word	0x08005add
 8005a90:	08005add 	.word	0x08005add
 8005a94:	08005ae3 	.word	0x08005ae3
 8005a98:	08005add 	.word	0x08005add
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005add 	.word	0x08005add
 8005aa4:	08005add 	.word	0x08005add
 8005aa8:	08005add 	.word	0x08005add
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005ae3 	.word	0x08005ae3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fdf4 	bl	80066ac <RCCEx_PLL2_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ac8:	e00c      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3324      	adds	r3, #36	; 0x24
 8005ace:	2101      	movs	r1, #1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fe9d 	bl	8006810 <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ada:	e003      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af6:	4921      	ldr	r1, [pc, #132]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	654b      	str	r3, [r1, #84]	; 0x54
 8005afc:	e001      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03e      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d820      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b5f 	.word	0x08005b5f
 8005b20:	08005b35 	.word	0x08005b35
 8005b24:	08005b47 	.word	0x08005b47
 8005b28:	08005b5f 	.word	0x08005b5f
 8005b2c:	08005b5f 	.word	0x08005b5f
 8005b30:	08005b5f 	.word	0x08005b5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fdb6 	bl	80066ac <RCCEx_PLL2_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b44:	e00c      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3324      	adds	r3, #36	; 0x24
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fe5f 	bl	8006810 <RCCEx_PLL3_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d110      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f023 0207 	bic.w	r2, r3, #7
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b72:	4902      	ldr	r1, [pc, #8]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	654b      	str	r3, [r1, #84]	; 0x54
 8005b78:	e008      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005b7a:	bf00      	nop
 8005b7c:	58024400 	.word	0x58024400
 8005b80:	58024800 	.word	0x58024800
 8005b84:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d039      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d820      	bhi.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005beb 	.word	0x08005beb
 8005bac:	08005bc1 	.word	0x08005bc1
 8005bb0:	08005bd3 	.word	0x08005bd3
 8005bb4:	08005beb 	.word	0x08005beb
 8005bb8:	08005beb 	.word	0x08005beb
 8005bbc:	08005beb 	.word	0x08005beb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fd70 	bl	80066ac <RCCEx_PLL2_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005bd0:	e00c      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3324      	adds	r3, #36	; 0x24
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fe19 	bl	8006810 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005be2:	e003      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	e000      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bf2:	4bb7      	ldr	r3, [pc, #732]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	f023 0207 	bic.w	r2, r3, #7
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	49b3      	ldr	r1, [pc, #716]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	658b      	str	r3, [r1, #88]	; 0x58
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d04b      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c22:	d02e      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c28:	d828      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d02a      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d822      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005c36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c3a:	d026      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c40:	d81c      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c46:	d010      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4c:	d816      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01d      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c56:	d111      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fd24 	bl	80066ac <RCCEx_PLL2_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c68:	e012      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3324      	adds	r3, #36	; 0x24
 8005c6e:	2102      	movs	r1, #2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fdcd 	bl	8006810 <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c7a:	e009      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c80:	e006      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c82:	bf00      	nop
 8005c84:	e004      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c96:	4b8e      	ldr	r3, [pc, #568]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca4:	498a      	ldr	r1, [pc, #552]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	654b      	str	r3, [r1, #84]	; 0x54
 8005caa:	e001      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d04b      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005cc6:	d02e      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005cc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ccc:	d828      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd2:	d02a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd8:	d822      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cde:	d026      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005ce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ce4:	d81c      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cea:	d010      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf0:	d816      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01d      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfa:	d111      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fcd2 	bl	80066ac <RCCEx_PLL2_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d0c:	e012      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3324      	adds	r3, #36	; 0x24
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fd7b 	bl	8006810 <RCCEx_PLL3_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d1e:	e009      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
      break;
 8005d24:	e006      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005d26:	bf00      	nop
 8005d28:	e004      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e002      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d3a:	4b65      	ldr	r3, [pc, #404]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d48:	4961      	ldr	r1, [pc, #388]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8005d4e:	e001      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d04b      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d6a:	d02e      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005d6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d70:	d828      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d76:	d02a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7c:	d822      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d82:	d026      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005d84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d88:	d81c      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d8e:	d010      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d94:	d816      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01d      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9e:	d111      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fc80 	bl	80066ac <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005db0:	e012      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2102      	movs	r1, #2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fd29 	bl	8006810 <RCCEx_PLL3_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005dc2:	e009      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc8:	e006      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e004      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005dce:	bf00      	nop
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005dde:	4b3c      	ldr	r3, [pc, #240]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dec:	4938      	ldr	r1, [pc, #224]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	658b      	str	r3, [r1, #88]	; 0x58
 8005df2:	e001      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0e:	d10a      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3324      	adds	r3, #36	; 0x24
 8005e14:	2102      	movs	r1, #2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fcfa 	bl	8006810 <RCCEx_PLL3_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e26:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e34:	4926      	ldr	r1, [pc, #152]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e50:	d10a      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3324      	adds	r3, #36	; 0x24
 8005e56:	2102      	movs	r1, #2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fcd9 	bl	8006810 <RCCEx_PLL3_Config>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e68:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e76:	4916      	ldr	r1, [pc, #88]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d036      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e92:	d01f      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e98:	d817      	bhi.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea2:	d009      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005ea4:	e011      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fbfd 	bl	80066ac <RCCEx_PLL2_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005eb6:	e00e      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3324      	adds	r3, #36	; 0x24
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fca6 	bl	8006810 <RCCEx_PLL3_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ec8:	e005      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ece:	e002      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005ed0:	58024400 	.word	0x58024400
      break;
 8005ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005edc:	4b93      	ldr	r3, [pc, #588]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005eea:	4990      	ldr	r1, [pc, #576]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	658b      	str	r3, [r1, #88]	; 0x58
 8005ef0:	e001      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d033      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f0c:	d01c      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f12:	d816      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f18:	d003      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f1e:	d007      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005f20:	e00f      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f22:	4b82      	ldr	r3, [pc, #520]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	4a81      	ldr	r2, [pc, #516]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f2e:	e00c      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3324      	adds	r3, #36	; 0x24
 8005f34:	2101      	movs	r1, #1
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc6a 	bl	8006810 <RCCEx_PLL3_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f40:	e003      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
      break;
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f50:	4b76      	ldr	r3, [pc, #472]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5e:	4973      	ldr	r1, [pc, #460]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	654b      	str	r3, [r1, #84]	; 0x54
 8005f64:	e001      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d029      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f82:	d007      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005f84:	e00f      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f86:	4b69      	ldr	r3, [pc, #420]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	4a68      	ldr	r2, [pc, #416]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f92:	e00b      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	2102      	movs	r1, #2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fb86 	bl	80066ac <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005fa4:	e002      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fb2:	4b5e      	ldr	r3, [pc, #376]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	495b      	ldr	r1, [pc, #364]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005fc4:	e001      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3324      	adds	r3, #36	; 0x24
 8005fda:	2102      	movs	r1, #2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fc17 	bl	8006810 <RCCEx_PLL3_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d030      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006000:	d017      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006006:	d811      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600c:	d013      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800600e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006012:	d80b      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d010      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601c:	d106      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601e:	4b43      	ldr	r3, [pc, #268]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4a42      	ldr	r2, [pc, #264]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800602a:	e007      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	75fb      	strb	r3, [r7, #23]
      break;
 8006030:	e004      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006032:	bf00      	nop
 8006034:	e002      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800603a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800603c:	7dfb      	ldrb	r3, [r7, #23]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006042:	4b3a      	ldr	r3, [pc, #232]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604e:	4937      	ldr	r1, [pc, #220]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006050:	4313      	orrs	r3, r2
 8006052:	654b      	str	r3, [r1, #84]	; 0x54
 8006054:	e001      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006066:	4b31      	ldr	r3, [pc, #196]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	492e      	ldr	r1, [pc, #184]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006074:	4313      	orrs	r3, r2
 8006076:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006084:	4b29      	ldr	r3, [pc, #164]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006092:	4926      	ldr	r1, [pc, #152]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006094:	4313      	orrs	r3, r2
 8006096:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b0:	491e      	ldr	r1, [pc, #120]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060c2:	4b1a      	ldr	r3, [pc, #104]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060cc:	6113      	str	r3, [r2, #16]
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80060d8:	4914      	ldr	r1, [pc, #80]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da08      	bge.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80060e6:	4b11      	ldr	r3, [pc, #68]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f2:	490e      	ldr	r1, [pc, #56]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	4906      	ldr	r1, [pc, #24]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006118:	7dbb      	ldrb	r3, [r7, #22]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	e000      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	58024400 	.word	0x58024400

08006130 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006134:	f7ff f860 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8006138:	4602      	mov	r2, r0
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	091b      	lsrs	r3, r3, #4
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	4904      	ldr	r1, [pc, #16]	; (8006158 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006146:	5ccb      	ldrb	r3, [r1, r3]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	58024400 	.word	0x58024400
 8006158:	08009f24 	.word	0x08009f24

0800615c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800615c:	b480      	push	{r7}
 800615e:	b089      	sub	sp, #36	; 0x24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006164:	4ba1      	ldr	r3, [pc, #644]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800616e:	4b9f      	ldr	r3, [pc, #636]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	0b1b      	lsrs	r3, r3, #12
 8006174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006178:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800617a:	4b9c      	ldr	r3, [pc, #624]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006186:	4b99      	ldr	r3, [pc, #612]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	08db      	lsrs	r3, r3, #3
 800618c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8111 	beq.w	80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	f000 8083 	beq.w	80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	f200 80a1 	bhi.w	80062fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d056      	beq.n	8006274 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061c6:	e099      	b.n	80062fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c8:	4b88      	ldr	r3, [pc, #544]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02d      	beq.n	8006230 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061d4:	4b85      	ldr	r3, [pc, #532]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	08db      	lsrs	r3, r3, #3
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	4a84      	ldr	r2, [pc, #528]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
 80061e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fe:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006212:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800622e:	e087      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800623e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006242:	4b6a      	ldr	r3, [pc, #424]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006252:	ed97 6a03 	vldr	s12, [r7, #12]
 8006256:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800625a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006272:	e065      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006286:	4b59      	ldr	r3, [pc, #356]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006296:	ed97 6a03 	vldr	s12, [r7, #12]
 800629a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800629e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062b6:	e043      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ca:	4b48      	ldr	r3, [pc, #288]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062da:	ed97 6a03 	vldr	s12, [r7, #12]
 80062de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062fa:	e021      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800630a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630e:	4b37      	ldr	r3, [pc, #220]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006322:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800633e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	0a5b      	lsrs	r3, r3, #9
 8006346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800635a:	edd7 6a07 	vldr	s13, [r7, #28]
 800635e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006366:	ee17 2a90 	vmov	r2, s15
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800636e:	4b1f      	ldr	r3, [pc, #124]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006388:	edd7 6a07 	vldr	s13, [r7, #28]
 800638c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006394:	ee17 2a90 	vmov	r2, s15
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800639c:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	0e1b      	lsrs	r3, r3, #24
 80063a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c2:	ee17 2a90 	vmov	r2, s15
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063ca:	e008      	b.n	80063de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	609a      	str	r2, [r3, #8]
}
 80063de:	bf00      	nop
 80063e0:	3724      	adds	r7, #36	; 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	58024400 	.word	0x58024400
 80063f0:	03d09000 	.word	0x03d09000
 80063f4:	46000000 	.word	0x46000000
 80063f8:	4c742400 	.word	0x4c742400
 80063fc:	4a742400 	.word	0x4a742400
 8006400:	4c371b00 	.word	0x4c371b00

08006404 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800640c:	4ba1      	ldr	r3, [pc, #644]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006416:	4b9f      	ldr	r3, [pc, #636]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	0d1b      	lsrs	r3, r3, #20
 800641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006420:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006422:	4b9c      	ldr	r3, [pc, #624]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800642e:	4b99      	ldr	r3, [pc, #612]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8111 	beq.w	8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b02      	cmp	r3, #2
 8006456:	f000 8083 	beq.w	8006560 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b02      	cmp	r3, #2
 800645e:	f200 80a1 	bhi.w	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d056      	beq.n	800651c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800646e:	e099      	b.n	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006470:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d02d      	beq.n	80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800647c:	4b85      	ldr	r3, [pc, #532]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	4a84      	ldr	r2, [pc, #528]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
 800648c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a6:	4b7b      	ldr	r3, [pc, #492]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800669c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80064d6:	e087      	b.n	80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80064e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ea:	4b6a      	ldr	r3, [pc, #424]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800669c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800651a:	e065      	b.n	80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800652a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652e:	4b59      	ldr	r3, [pc, #356]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006542:	eddf 5a56 	vldr	s11, [pc, #344]	; 800669c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800655e:	e043      	b.n	80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800656e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006572:	4b48      	ldr	r3, [pc, #288]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006582:	ed97 6a03 	vldr	s12, [r7, #12]
 8006586:	eddf 5a45 	vldr	s11, [pc, #276]	; 800669c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800658a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065a2:	e021      	b.n	80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800669c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80065e8:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	0a5b      	lsrs	r3, r3, #9
 80065ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006602:	edd7 6a07 	vldr	s13, [r7, #28]
 8006606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660e:	ee17 2a90 	vmov	r2, s15
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006616:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	0c1b      	lsrs	r3, r3, #16
 800661c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800662c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006630:	edd7 6a07 	vldr	s13, [r7, #28]
 8006634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663c:	ee17 2a90 	vmov	r2, s15
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006644:	4b13      	ldr	r3, [pc, #76]	; (8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	0e1b      	lsrs	r3, r3, #24
 800664a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800665a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800665e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666a:	ee17 2a90 	vmov	r2, s15
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006672:	e008      	b.n	8006686 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	609a      	str	r2, [r3, #8]
}
 8006686:	bf00      	nop
 8006688:	3724      	adds	r7, #36	; 0x24
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	03d09000 	.word	0x03d09000
 800669c:	46000000 	.word	0x46000000
 80066a0:	4c742400 	.word	0x4c742400
 80066a4:	4a742400 	.word	0x4a742400
 80066a8:	4c371b00 	.word	0x4c371b00

080066ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066ba:	4b53      	ldr	r3, [pc, #332]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d101      	bne.n	80066ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e099      	b.n	80067fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066ca:	4b4f      	ldr	r3, [pc, #316]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a4e      	ldr	r2, [pc, #312]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80066d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d6:	f7fb f8cb 	bl	8001870 <HAL_GetTick>
 80066da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066dc:	e008      	b.n	80066f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066de:	f7fb f8c7 	bl	8001870 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e086      	b.n	80067fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066f0:	4b45      	ldr	r3, [pc, #276]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f0      	bne.n	80066de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80066fc:	4b42      	ldr	r3, [pc, #264]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	031b      	lsls	r3, r3, #12
 800670a:	493f      	ldr	r1, [pc, #252]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 800670c:	4313      	orrs	r3, r2
 800670e:	628b      	str	r3, [r1, #40]	; 0x28
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	3b01      	subs	r3, #1
 8006716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	3b01      	subs	r3, #1
 8006720:	025b      	lsls	r3, r3, #9
 8006722:	b29b      	uxth	r3, r3
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	3b01      	subs	r3, #1
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	3b01      	subs	r3, #1
 800673a:	061b      	lsls	r3, r3, #24
 800673c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006740:	4931      	ldr	r1, [pc, #196]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006742:	4313      	orrs	r3, r2
 8006744:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006746:	4b30      	ldr	r3, [pc, #192]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	492d      	ldr	r1, [pc, #180]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006754:	4313      	orrs	r3, r2
 8006756:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006758:	4b2b      	ldr	r3, [pc, #172]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	f023 0220 	bic.w	r2, r3, #32
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	4928      	ldr	r1, [pc, #160]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006766:	4313      	orrs	r3, r2
 8006768:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800676a:	4b27      	ldr	r3, [pc, #156]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	4a26      	ldr	r2, [pc, #152]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006770:	f023 0310 	bic.w	r3, r3, #16
 8006774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <RCCEx_PLL2_Config+0x160>)
 800677c:	4013      	ands	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	69d2      	ldr	r2, [r2, #28]
 8006782:	00d2      	lsls	r2, r2, #3
 8006784:	4920      	ldr	r1, [pc, #128]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006786:	4313      	orrs	r3, r2
 8006788:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800678a:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	4a1e      	ldr	r2, [pc, #120]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 8006790:	f043 0310 	orr.w	r3, r3, #16
 8006794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800679c:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4a19      	ldr	r2, [pc, #100]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067a8:	e00f      	b.n	80067ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d106      	bne.n	80067be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80067b0:	4b15      	ldr	r3, [pc, #84]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a14      	ldr	r2, [pc, #80]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067bc:	e005      	b.n	80067ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	4a11      	ldr	r2, [pc, #68]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067ca:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d6:	f7fb f84b 	bl	8001870 <HAL_GetTick>
 80067da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067dc:	e008      	b.n	80067f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80067de:	f7fb f847 	bl	8001870 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e006      	b.n	80067fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <RCCEx_PLL2_Config+0x15c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	58024400 	.word	0x58024400
 800680c:	ffff0007 	.word	0xffff0007

08006810 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800681e:	4b53      	ldr	r3, [pc, #332]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	2b03      	cmp	r3, #3
 8006828:	d101      	bne.n	800682e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e099      	b.n	8006962 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800682e:	4b4f      	ldr	r3, [pc, #316]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a4e      	ldr	r2, [pc, #312]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800683a:	f7fb f819 	bl	8001870 <HAL_GetTick>
 800683e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006840:	e008      	b.n	8006854 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006842:	f7fb f815 	bl	8001870 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e086      	b.n	8006962 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006854:	4b45      	ldr	r3, [pc, #276]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f0      	bne.n	8006842 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006860:	4b42      	ldr	r3, [pc, #264]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	051b      	lsls	r3, r3, #20
 800686e:	493f      	ldr	r1, [pc, #252]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006870:	4313      	orrs	r3, r2
 8006872:	628b      	str	r3, [r1, #40]	; 0x28
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	3b01      	subs	r3, #1
 800687a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	3b01      	subs	r3, #1
 8006884:	025b      	lsls	r3, r3, #9
 8006886:	b29b      	uxth	r3, r3
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	3b01      	subs	r3, #1
 8006890:	041b      	lsls	r3, r3, #16
 8006892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	3b01      	subs	r3, #1
 800689e:	061b      	lsls	r3, r3, #24
 80068a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068a4:	4931      	ldr	r1, [pc, #196]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80068aa:	4b30      	ldr	r3, [pc, #192]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	492d      	ldr	r1, [pc, #180]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068bc:	4b2b      	ldr	r3, [pc, #172]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	4928      	ldr	r1, [pc, #160]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068ce:	4b27      	ldr	r3, [pc, #156]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <RCCEx_PLL3_Config+0x160>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	69d2      	ldr	r2, [r2, #28]
 80068e6:	00d2      	lsls	r2, r2, #3
 80068e8:	4920      	ldr	r1, [pc, #128]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80068ee:	4b1f      	ldr	r3, [pc, #124]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 80068f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006900:	4b1a      	ldr	r3, [pc, #104]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	4a19      	ldr	r2, [pc, #100]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800690a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800690c:	e00f      	b.n	800692e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d106      	bne.n	8006922 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006914:	4b15      	ldr	r3, [pc, #84]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	4a14      	ldr	r2, [pc, #80]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 800691a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800691e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006920:	e005      	b.n	800692e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	4a11      	ldr	r2, [pc, #68]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800692c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a0e      	ldr	r2, [pc, #56]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800693a:	f7fa ff99 	bl	8001870 <HAL_GetTick>
 800693e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006940:	e008      	b.n	8006954 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006942:	f7fa ff95 	bl	8001870 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e006      	b.n	8006962 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <RCCEx_PLL3_Config+0x15c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f0      	beq.n	8006942 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	58024400 	.word	0x58024400
 8006970:	ffff0007 	.word	0xffff0007

08006974 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0eb      	b.n	8006b62 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a75      	ldr	r2, [pc, #468]	; (8006b6c <HAL_SPI_Init+0x1f8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00f      	beq.n	80069ba <HAL_SPI_Init+0x46>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a74      	ldr	r2, [pc, #464]	; (8006b70 <HAL_SPI_Init+0x1fc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00a      	beq.n	80069ba <HAL_SPI_Init+0x46>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a72      	ldr	r2, [pc, #456]	; (8006b74 <HAL_SPI_Init+0x200>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d005      	beq.n	80069ba <HAL_SPI_Init+0x46>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b0f      	cmp	r3, #15
 80069b4:	d901      	bls.n	80069ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e0d3      	b.n	8006b62 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fb9e 	bl	80070fc <SPI_GetPacketSize>
 80069c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a69      	ldr	r2, [pc, #420]	; (8006b6c <HAL_SPI_Init+0x1f8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00c      	beq.n	80069e6 <HAL_SPI_Init+0x72>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a67      	ldr	r2, [pc, #412]	; (8006b70 <HAL_SPI_Init+0x1fc>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d007      	beq.n	80069e6 <HAL_SPI_Init+0x72>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a66      	ldr	r2, [pc, #408]	; (8006b74 <HAL_SPI_Init+0x200>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d002      	beq.n	80069e6 <HAL_SPI_Init+0x72>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d811      	bhi.n	8006a0a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80069ea:	4a60      	ldr	r2, [pc, #384]	; (8006b6c <HAL_SPI_Init+0x1f8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a5e      	ldr	r2, [pc, #376]	; (8006b70 <HAL_SPI_Init+0x1fc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_SPI_Init+0x90>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a5d      	ldr	r2, [pc, #372]	; (8006b74 <HAL_SPI_Init+0x200>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d104      	bne.n	8006a0e <HAL_SPI_Init+0x9a>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d901      	bls.n	8006a0e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e0a9      	b.n	8006b62 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fa fa8e 	bl	8000f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a48:	d119      	bne.n	8006a7e <HAL_SPI_Init+0x10a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a52:	d103      	bne.n	8006a5c <HAL_SPI_Init+0xe8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10c      	bne.n	8006a7e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a6c:	d107      	bne.n	8006a7e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69da      	ldr	r2, [r3, #28]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	431a      	orrs	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	ea42 0103 	orr.w	r1, r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ade:	ea42 0103 	orr.w	r1, r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d113      	bne.n	8006b1e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40013000 	.word	0x40013000
 8006b70:	40003800 	.word	0x40003800
 8006b74:	40003c00 	.word	0x40003c00

08006b78 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08a      	sub	sp, #40	; 0x28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006b90:	6a3a      	ldr	r2, [r7, #32]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4013      	ands	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006baa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3330      	adds	r3, #48	; 0x30
 8006bb2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d113      	bne.n	8006be6 <HAL_SPI_IRQHandler+0x6e>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10e      	bne.n	8006be6 <HAL_SPI_IRQHandler+0x6e>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
    handled = 1UL;
 8006be2:	2301      	movs	r3, #1
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10f      	bne.n	8006c10 <HAL_SPI_IRQHandler+0x98>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <HAL_SPI_IRQHandler+0x98>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d105      	bne.n	8006c10 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
    handled = 1UL;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <HAL_SPI_IRQHandler+0xc2>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <HAL_SPI_IRQHandler+0xc2>
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d105      	bne.n	8006c3a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
    handled = 1UL;
 8006c36:	2301      	movs	r3, #1
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 816f 	bne.w	8006f20 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80a0 	beq.w	8006d8e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0208 	orr.w	r2, r2, #8
 8006c5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0210 	orr.w	r2, r2, #16
 8006c6c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c7c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0208 	bic.w	r2, r2, #8
 8006c8c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00f      	beq.n	8006cb8 <HAL_SPI_IRQHandler+0x140>
 8006c98:	7cfb      	ldrb	r3, [r7, #19]
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d004      	beq.n	8006ca8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_SPI_IRQHandler+0x140>
 8006ca8:	7cfb      	ldrb	r3, [r7, #19]
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d059      	beq.n	8006d62 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d154      	bne.n	8006d62 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d13d      	bne.n	8006d42 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8006cc6:	e036      	b.n	8006d36 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b0f      	cmp	r3, #15
 8006cce:	d90b      	bls.n	8006ce8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cda:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce0:	1d1a      	adds	r2, r3, #4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
 8006ce6:	e01d      	b.n	8006d24 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b07      	cmp	r3, #7
 8006cee:	d90b      	bls.n	8006d08 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	8812      	ldrh	r2, [r2, #0]
 8006cf8:	b292      	uxth	r2, r2
 8006cfa:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	665a      	str	r2, [r3, #100]	; 0x64
 8006d06:	e00d      	b.n	8006d24 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d14:	7812      	ldrb	r2, [r2, #0]
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1c2      	bne.n	8006cc8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f93a 	bl	8006fbc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f90a 	bl	8006f74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8006d60:	e0e3      	b.n	8006f2a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006d62:	7cfb      	ldrb	r3, [r7, #19]
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	d103      	bne.n	8006d70 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f8f9 	bl	8006f60 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8006d6e:	e0d9      	b.n	8006f24 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d103      	bne.n	8006d7e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8e8 	bl	8006f4c <HAL_SPI_RxCpltCallback>
    return;
 8006d7c:	e0d2      	b.n	8006f24 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006d7e:	7cfb      	ldrb	r3, [r7, #19]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	f040 80cf 	bne.w	8006f24 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8d6 	bl	8006f38 <HAL_SPI_TxCpltCallback>
    return;
 8006d8c:	e0ca      	b.n	8006f24 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <HAL_SPI_IRQHandler+0x23c>
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db0:	619a      	str	r2, [r3, #24]

    return;
 8006db2:	e0ba      	b.n	8006f2a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80b5 	beq.w	8006f2a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00f      	beq.n	8006dea <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd0:	f043 0204 	orr.w	r2, r3, #4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00f      	beq.n	8006e14 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfa:	f043 0201 	orr.w	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e12:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00f      	beq.n	8006e3e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e24:	f043 0208 	orr.w	r2, r3, #8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e3c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00f      	beq.n	8006e68 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0220 	orr.w	r2, r2, #32
 8006e66:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d05a      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6919      	ldr	r1, [r3, #16]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <HAL_SPI_IRQHandler+0x3b8>)
 8006e8e:	400b      	ands	r3, r1
 8006e90:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e9c:	d138      	bne.n	8006f10 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006eac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d013      	beq.n	8006ede <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eba:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <HAL_SPI_IRQHandler+0x3bc>)
 8006ebc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fb fc76 	bl	80027b4 <HAL_DMA_Abort_IT>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d020      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eea:	4a12      	ldr	r2, [pc, #72]	; (8006f34 <HAL_SPI_IRQHandler+0x3bc>)
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fb fc5e 	bl	80027b4 <HAL_DMA_Abort_IT>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d014      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f0e:	e00b      	b.n	8006f28 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f82b 	bl	8006f74 <HAL_SPI_ErrorCallback>
    return;
 8006f1e:	e003      	b.n	8006f28 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8006f20:	bf00      	nop
 8006f22:	e002      	b.n	8006f2a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006f24:	bf00      	nop
 8006f26:	e000      	b.n	8006f2a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006f28:	bf00      	nop
  }
}
 8006f2a:	3728      	adds	r7, #40	; 0x28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	fffffc94 	.word	0xfffffc94
 8006f34:	08006f89 	.word	0x08006f89

08006f38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff ffe0 	bl	8006f74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0208 	orr.w	r2, r2, #8
 8006fda:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0210 	orr.w	r2, r2, #16
 8006fea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6919      	ldr	r1, [r3, #16]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b3c      	ldr	r3, [pc, #240]	; (80070f8 <SPI_CloseTransfer+0x13c>)
 8007008:	400b      	ands	r3, r1
 800700a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800701a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b04      	cmp	r3, #4
 8007026:	d014      	beq.n	8007052 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007038:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0220 	orr.w	r2, r2, #32
 8007050:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b03      	cmp	r3, #3
 800705c:	d014      	beq.n	8007088 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00f      	beq.n	8007088 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706e:	f043 0204 	orr.w	r2, r3, #4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007086:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007098:	f043 0201 	orr.w	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00f      	beq.n	80070dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c2:	f043 0208 	orr.w	r2, r3, #8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	fffffc90 	.word	0xfffffc90

080070fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	3301      	adds	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	3307      	adds	r3, #7
 800711a:	08db      	lsrs	r3, r3, #3
 800711c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	fb02 f303 	mul.w	r3, r2, r3
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e049      	b.n	80071d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7f9 ff87 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3304      	adds	r3, #4
 800716e:	4619      	mov	r1, r3
 8007170:	4610      	mov	r0, r2
 8007172:	f000 fdf1 	bl	8007d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d001      	beq.n	80071f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e04f      	b.n	8007298 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a23      	ldr	r2, [pc, #140]	; (80072a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01d      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0x76>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007222:	d018      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0x76>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1f      	ldr	r2, [pc, #124]	; (80072a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0x76>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0x76>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1c      	ldr	r2, [pc, #112]	; (80072b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0x76>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1b      	ldr	r2, [pc, #108]	; (80072b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0x76>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a19      	ldr	r2, [pc, #100]	; (80072b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d115      	bne.n	8007282 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <HAL_TIM_Base_Start_IT+0xdc>)
 800725e:	4013      	ands	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b06      	cmp	r3, #6
 8007266:	d015      	beq.n	8007294 <HAL_TIM_Base_Start_IT+0xb4>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726e:	d011      	beq.n	8007294 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007280:	e008      	b.n	8007294 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e000      	b.n	8007296 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40010400 	.word	0x40010400
 80072b8:	40001800 	.word	0x40001800
 80072bc:	00010007 	.word	0x00010007

080072c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e049      	b.n	8007366 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f841 	bl	800736e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	f000 fd2a 	bl	8007d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_TIM_PWM_Start+0x24>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	bf14      	ite	ne
 80073a0:	2301      	movne	r3, #1
 80073a2:	2300      	moveq	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	e03c      	b.n	8007422 <HAL_TIM_PWM_Start+0x9e>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d109      	bne.n	80073c2 <HAL_TIM_PWM_Start+0x3e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	bf14      	ite	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	2300      	moveq	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e02f      	b.n	8007422 <HAL_TIM_PWM_Start+0x9e>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d109      	bne.n	80073dc <HAL_TIM_PWM_Start+0x58>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	bf14      	ite	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	2300      	moveq	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	e022      	b.n	8007422 <HAL_TIM_PWM_Start+0x9e>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d109      	bne.n	80073f6 <HAL_TIM_PWM_Start+0x72>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	bf14      	ite	ne
 80073ee:	2301      	movne	r3, #1
 80073f0:	2300      	moveq	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	e015      	b.n	8007422 <HAL_TIM_PWM_Start+0x9e>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d109      	bne.n	8007410 <HAL_TIM_PWM_Start+0x8c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	bf14      	ite	ne
 8007408:	2301      	movne	r3, #1
 800740a:	2300      	moveq	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	e008      	b.n	8007422 <HAL_TIM_PWM_Start+0x9e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	bf14      	ite	ne
 800741c:	2301      	movne	r3, #1
 800741e:	2300      	moveq	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e09c      	b.n	8007564 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <HAL_TIM_PWM_Start+0xb6>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007438:	e023      	b.n	8007482 <HAL_TIM_PWM_Start+0xfe>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d104      	bne.n	800744a <HAL_TIM_PWM_Start+0xc6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007448:	e01b      	b.n	8007482 <HAL_TIM_PWM_Start+0xfe>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d104      	bne.n	800745a <HAL_TIM_PWM_Start+0xd6>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007458:	e013      	b.n	8007482 <HAL_TIM_PWM_Start+0xfe>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b0c      	cmp	r3, #12
 800745e:	d104      	bne.n	800746a <HAL_TIM_PWM_Start+0xe6>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007468:	e00b      	b.n	8007482 <HAL_TIM_PWM_Start+0xfe>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b10      	cmp	r3, #16
 800746e:	d104      	bne.n	800747a <HAL_TIM_PWM_Start+0xf6>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007478:	e003      	b.n	8007482 <HAL_TIM_PWM_Start+0xfe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2201      	movs	r2, #1
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f001 f86a 	bl	8008564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a35      	ldr	r2, [pc, #212]	; (800756c <HAL_TIM_PWM_Start+0x1e8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_TIM_PWM_Start+0x13e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a34      	ldr	r2, [pc, #208]	; (8007570 <HAL_TIM_PWM_Start+0x1ec>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_TIM_PWM_Start+0x13e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a32      	ldr	r2, [pc, #200]	; (8007574 <HAL_TIM_PWM_Start+0x1f0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_TIM_PWM_Start+0x13e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a31      	ldr	r2, [pc, #196]	; (8007578 <HAL_TIM_PWM_Start+0x1f4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_TIM_PWM_Start+0x13e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a2f      	ldr	r2, [pc, #188]	; (800757c <HAL_TIM_PWM_Start+0x1f8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_PWM_Start+0x142>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <HAL_TIM_PWM_Start+0x144>
 80074c6:	2300      	movs	r3, #0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d007      	beq.n	80074dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a22      	ldr	r2, [pc, #136]	; (800756c <HAL_TIM_PWM_Start+0x1e8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d01d      	beq.n	8007522 <HAL_TIM_PWM_Start+0x19e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ee:	d018      	beq.n	8007522 <HAL_TIM_PWM_Start+0x19e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a22      	ldr	r2, [pc, #136]	; (8007580 <HAL_TIM_PWM_Start+0x1fc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d013      	beq.n	8007522 <HAL_TIM_PWM_Start+0x19e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a21      	ldr	r2, [pc, #132]	; (8007584 <HAL_TIM_PWM_Start+0x200>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00e      	beq.n	8007522 <HAL_TIM_PWM_Start+0x19e>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1f      	ldr	r2, [pc, #124]	; (8007588 <HAL_TIM_PWM_Start+0x204>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d009      	beq.n	8007522 <HAL_TIM_PWM_Start+0x19e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a17      	ldr	r2, [pc, #92]	; (8007570 <HAL_TIM_PWM_Start+0x1ec>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d004      	beq.n	8007522 <HAL_TIM_PWM_Start+0x19e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1b      	ldr	r2, [pc, #108]	; (800758c <HAL_TIM_PWM_Start+0x208>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d115      	bne.n	800754e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	4b19      	ldr	r3, [pc, #100]	; (8007590 <HAL_TIM_PWM_Start+0x20c>)
 800752a:	4013      	ands	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b06      	cmp	r3, #6
 8007532:	d015      	beq.n	8007560 <HAL_TIM_PWM_Start+0x1dc>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753a:	d011      	beq.n	8007560 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0201 	orr.w	r2, r2, #1
 800754a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800754c:	e008      	b.n	8007560 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0201 	orr.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	e000      	b.n	8007562 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007560:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40010000 	.word	0x40010000
 8007570:	40010400 	.word	0x40010400
 8007574:	40014000 	.word	0x40014000
 8007578:	40014400 	.word	0x40014400
 800757c:	40014800 	.word	0x40014800
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40001800 	.word	0x40001800
 8007590:	00010007 	.word	0x00010007

08007594 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 ffdc 	bl	8008564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a3e      	ldr	r2, [pc, #248]	; (80076ac <HAL_TIM_PWM_Stop+0x118>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_TIM_PWM_Stop+0x4a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a3d      	ldr	r2, [pc, #244]	; (80076b0 <HAL_TIM_PWM_Stop+0x11c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_TIM_PWM_Stop+0x4a>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a3b      	ldr	r2, [pc, #236]	; (80076b4 <HAL_TIM_PWM_Stop+0x120>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_TIM_PWM_Stop+0x4a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a3a      	ldr	r2, [pc, #232]	; (80076b8 <HAL_TIM_PWM_Stop+0x124>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_TIM_PWM_Stop+0x4a>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a38      	ldr	r2, [pc, #224]	; (80076bc <HAL_TIM_PWM_Stop+0x128>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d101      	bne.n	80075e2 <HAL_TIM_PWM_Stop+0x4e>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <HAL_TIM_PWM_Stop+0x50>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d017      	beq.n	8007618 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80075f2:	4013      	ands	r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10f      	bne.n	8007618 <HAL_TIM_PWM_Stop+0x84>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6a1a      	ldr	r2, [r3, #32]
 80075fe:	f240 4344 	movw	r3, #1092	; 0x444
 8007602:	4013      	ands	r3, r2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d107      	bne.n	8007618 <HAL_TIM_PWM_Stop+0x84>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007616:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a1a      	ldr	r2, [r3, #32]
 800761e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007622:	4013      	ands	r3, r2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <HAL_TIM_PWM_Stop+0xb4>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	f240 4344 	movw	r3, #1092	; 0x444
 8007632:	4013      	ands	r3, r2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d107      	bne.n	8007648 <HAL_TIM_PWM_Stop+0xb4>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <HAL_TIM_PWM_Stop+0xc4>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007656:	e023      	b.n	80076a0 <HAL_TIM_PWM_Stop+0x10c>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d104      	bne.n	8007668 <HAL_TIM_PWM_Stop+0xd4>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007666:	e01b      	b.n	80076a0 <HAL_TIM_PWM_Stop+0x10c>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b08      	cmp	r3, #8
 800766c:	d104      	bne.n	8007678 <HAL_TIM_PWM_Stop+0xe4>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007676:	e013      	b.n	80076a0 <HAL_TIM_PWM_Stop+0x10c>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b0c      	cmp	r3, #12
 800767c:	d104      	bne.n	8007688 <HAL_TIM_PWM_Stop+0xf4>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007686:	e00b      	b.n	80076a0 <HAL_TIM_PWM_Stop+0x10c>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b10      	cmp	r3, #16
 800768c:	d104      	bne.n	8007698 <HAL_TIM_PWM_Stop+0x104>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007696:	e003      	b.n	80076a0 <HAL_TIM_PWM_Stop+0x10c>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40010400 	.word	0x40010400
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800

080076c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d122      	bne.n	800771c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d11b      	bne.n	800771c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0202 	mvn.w	r2, #2
 80076ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb0a 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 8007708:	e005      	b.n	8007716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fafc 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fb0d 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d122      	bne.n	8007770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b04      	cmp	r3, #4
 8007736:	d11b      	bne.n	8007770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0204 	mvn.w	r2, #4
 8007740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2202      	movs	r2, #2
 8007746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fae0 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 800775c:	e005      	b.n	800776a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fad2 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fae3 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b08      	cmp	r3, #8
 800777c:	d122      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b08      	cmp	r3, #8
 800778a:	d11b      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f06f 0208 	mvn.w	r2, #8
 8007794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2204      	movs	r2, #4
 800779a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fab6 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 80077b0:	e005      	b.n	80077be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 faa8 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fab9 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d122      	bne.n	8007818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d11b      	bne.n	8007818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0210 	mvn.w	r2, #16
 80077e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2208      	movs	r2, #8
 80077ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa8c 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 8007804:	e005      	b.n	8007812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa7e 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa8f 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b01      	cmp	r3, #1
 8007824:	d10e      	bne.n	8007844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d107      	bne.n	8007844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0201 	mvn.w	r2, #1
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7f9 fb3c 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784e:	2b80      	cmp	r3, #128	; 0x80
 8007850:	d10e      	bne.n	8007870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785c:	2b80      	cmp	r3, #128	; 0x80
 800785e:	d107      	bne.n	8007870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 ff32 	bl	80086d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787e:	d10e      	bne.n	800789e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d107      	bne.n	800789e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 ff25 	bl	80086e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d10e      	bne.n	80078ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d107      	bne.n	80078ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fa3d 	bl	8007d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d10e      	bne.n	80078f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	d107      	bne.n	80078f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f06f 0220 	mvn.w	r2, #32
 80078ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fee5 	bl	80086c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007916:	2302      	movs	r3, #2
 8007918:	e0fd      	b.n	8007b16 <HAL_TIM_PWM_ConfigChannel+0x216>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b14      	cmp	r3, #20
 8007926:	f200 80f0 	bhi.w	8007b0a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007985 	.word	0x08007985
 8007934:	08007b0b 	.word	0x08007b0b
 8007938:	08007b0b 	.word	0x08007b0b
 800793c:	08007b0b 	.word	0x08007b0b
 8007940:	080079c5 	.word	0x080079c5
 8007944:	08007b0b 	.word	0x08007b0b
 8007948:	08007b0b 	.word	0x08007b0b
 800794c:	08007b0b 	.word	0x08007b0b
 8007950:	08007a07 	.word	0x08007a07
 8007954:	08007b0b 	.word	0x08007b0b
 8007958:	08007b0b 	.word	0x08007b0b
 800795c:	08007b0b 	.word	0x08007b0b
 8007960:	08007a47 	.word	0x08007a47
 8007964:	08007b0b 	.word	0x08007b0b
 8007968:	08007b0b 	.word	0x08007b0b
 800796c:	08007b0b 	.word	0x08007b0b
 8007970:	08007a89 	.word	0x08007a89
 8007974:	08007b0b 	.word	0x08007b0b
 8007978:	08007b0b 	.word	0x08007b0b
 800797c:	08007b0b 	.word	0x08007b0b
 8007980:	08007ac9 	.word	0x08007ac9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fa7e 	bl	8007e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0208 	orr.w	r2, r2, #8
 800799e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0204 	bic.w	r2, r2, #4
 80079ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6999      	ldr	r1, [r3, #24]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	691a      	ldr	r2, [r3, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	619a      	str	r2, [r3, #24]
      break;
 80079c2:	e0a3      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 faee 	bl	8007fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699a      	ldr	r2, [r3, #24]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6999      	ldr	r1, [r3, #24]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	021a      	lsls	r2, r3, #8
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	619a      	str	r2, [r3, #24]
      break;
 8007a04:	e082      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fb57 	bl	80080c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69da      	ldr	r2, [r3, #28]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69da      	ldr	r2, [r3, #28]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0204 	bic.w	r2, r2, #4
 8007a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69d9      	ldr	r1, [r3, #28]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	61da      	str	r2, [r3, #28]
      break;
 8007a44:	e062      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fbbd 	bl	80081cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69da      	ldr	r2, [r3, #28]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69d9      	ldr	r1, [r3, #28]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	021a      	lsls	r2, r3, #8
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	61da      	str	r2, [r3, #28]
      break;
 8007a86:	e041      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fc04 	bl	800829c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0208 	orr.w	r2, r2, #8
 8007aa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0204 	bic.w	r2, r2, #4
 8007ab2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	691a      	ldr	r2, [r3, #16]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ac6:	e021      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68b9      	ldr	r1, [r7, #8]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fc46 	bl	8008360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	021a      	lsls	r2, r3, #8
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b08:	e000      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007b0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop

08007b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_TIM_ConfigClockSource+0x18>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0db      	b.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4b69      	ldr	r3, [pc, #420]	; (8007cf8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a63      	ldr	r2, [pc, #396]	; (8007cfc <HAL_TIM_ConfigClockSource+0x1dc>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	f000 80a9 	beq.w	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b74:	4a61      	ldr	r2, [pc, #388]	; (8007cfc <HAL_TIM_ConfigClockSource+0x1dc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	f200 80ae 	bhi.w	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b7c:	4a60      	ldr	r2, [pc, #384]	; (8007d00 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	f000 80a1 	beq.w	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b84:	4a5e      	ldr	r2, [pc, #376]	; (8007d00 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f200 80a6 	bhi.w	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b8c:	4a5d      	ldr	r2, [pc, #372]	; (8007d04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	f000 8099 	beq.w	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b94:	4a5b      	ldr	r2, [pc, #364]	; (8007d04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	f200 809e 	bhi.w	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ba0:	f000 8091 	beq.w	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ba4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ba8:	f200 8096 	bhi.w	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb0:	f000 8089 	beq.w	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb8:	f200 808e 	bhi.w	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc0:	d03e      	beq.n	8007c40 <HAL_TIM_ConfigClockSource+0x120>
 8007bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc6:	f200 8087 	bhi.w	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bce:	f000 8085 	beq.w	8007cdc <HAL_TIM_ConfigClockSource+0x1bc>
 8007bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd6:	d87f      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007bd8:	2b70      	cmp	r3, #112	; 0x70
 8007bda:	d01a      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0xf2>
 8007bdc:	2b70      	cmp	r3, #112	; 0x70
 8007bde:	d87b      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007be0:	2b60      	cmp	r3, #96	; 0x60
 8007be2:	d050      	beq.n	8007c86 <HAL_TIM_ConfigClockSource+0x166>
 8007be4:	2b60      	cmp	r3, #96	; 0x60
 8007be6:	d877      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007be8:	2b50      	cmp	r3, #80	; 0x50
 8007bea:	d03c      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x146>
 8007bec:	2b50      	cmp	r3, #80	; 0x50
 8007bee:	d873      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d058      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x186>
 8007bf4:	2b40      	cmp	r3, #64	; 0x40
 8007bf6:	d86f      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007bf8:	2b30      	cmp	r3, #48	; 0x30
 8007bfa:	d064      	beq.n	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007bfc:	2b30      	cmp	r3, #48	; 0x30
 8007bfe:	d86b      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d060      	beq.n	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d867      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d05c      	beq.n	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d05a      	beq.n	8007cc6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007c10:	e062      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6899      	ldr	r1, [r3, #8]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f000 fc7f 	bl	8008524 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	609a      	str	r2, [r3, #8]
      break;
 8007c3e:	e04e      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	6899      	ldr	r1, [r3, #8]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f000 fc68 	bl	8008524 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c62:	609a      	str	r2, [r3, #8]
      break;
 8007c64:	e03b      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	6859      	ldr	r1, [r3, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f000 fbd8 	bl	8008428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2150      	movs	r1, #80	; 0x50
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fc32 	bl	80084e8 <TIM_ITRx_SetConfig>
      break;
 8007c84:	e02b      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	6859      	ldr	r1, [r3, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f000 fbf7 	bl	8008486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2160      	movs	r1, #96	; 0x60
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fc22 	bl	80084e8 <TIM_ITRx_SetConfig>
      break;
 8007ca4:	e01b      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f000 fbb8 	bl	8008428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2140      	movs	r1, #64	; 0x40
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fc12 	bl	80084e8 <TIM_ITRx_SetConfig>
      break;
 8007cc4:	e00b      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f000 fc09 	bl	80084e8 <TIM_ITRx_SetConfig>
        break;
 8007cd6:	e002      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e000      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007cdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	ffceff88 	.word	0xffceff88
 8007cfc:	00100040 	.word	0x00100040
 8007d00:	00100030 	.word	0x00100030
 8007d04:	00100020 	.word	0x00100020

08007d08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a40      	ldr	r2, [pc, #256]	; (8007e6c <TIM_Base_SetConfig+0x114>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d013      	beq.n	8007d98 <TIM_Base_SetConfig+0x40>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d76:	d00f      	beq.n	8007d98 <TIM_Base_SetConfig+0x40>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a3d      	ldr	r2, [pc, #244]	; (8007e70 <TIM_Base_SetConfig+0x118>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00b      	beq.n	8007d98 <TIM_Base_SetConfig+0x40>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a3c      	ldr	r2, [pc, #240]	; (8007e74 <TIM_Base_SetConfig+0x11c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d007      	beq.n	8007d98 <TIM_Base_SetConfig+0x40>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a3b      	ldr	r2, [pc, #236]	; (8007e78 <TIM_Base_SetConfig+0x120>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <TIM_Base_SetConfig+0x40>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a3a      	ldr	r2, [pc, #232]	; (8007e7c <TIM_Base_SetConfig+0x124>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d108      	bne.n	8007daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a2f      	ldr	r2, [pc, #188]	; (8007e6c <TIM_Base_SetConfig+0x114>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d01f      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db8:	d01b      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a2c      	ldr	r2, [pc, #176]	; (8007e70 <TIM_Base_SetConfig+0x118>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d017      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a2b      	ldr	r2, [pc, #172]	; (8007e74 <TIM_Base_SetConfig+0x11c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <TIM_Base_SetConfig+0x120>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00f      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a29      	ldr	r2, [pc, #164]	; (8007e7c <TIM_Base_SetConfig+0x124>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00b      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a28      	ldr	r2, [pc, #160]	; (8007e80 <TIM_Base_SetConfig+0x128>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d007      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a27      	ldr	r2, [pc, #156]	; (8007e84 <TIM_Base_SetConfig+0x12c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_Base_SetConfig+0x9a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a26      	ldr	r2, [pc, #152]	; (8007e88 <TIM_Base_SetConfig+0x130>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d108      	bne.n	8007e04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a10      	ldr	r2, [pc, #64]	; (8007e6c <TIM_Base_SetConfig+0x114>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00f      	beq.n	8007e50 <TIM_Base_SetConfig+0xf8>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <TIM_Base_SetConfig+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00b      	beq.n	8007e50 <TIM_Base_SetConfig+0xf8>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a11      	ldr	r2, [pc, #68]	; (8007e80 <TIM_Base_SetConfig+0x128>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d007      	beq.n	8007e50 <TIM_Base_SetConfig+0xf8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a10      	ldr	r2, [pc, #64]	; (8007e84 <TIM_Base_SetConfig+0x12c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <TIM_Base_SetConfig+0xf8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a0f      	ldr	r2, [pc, #60]	; (8007e88 <TIM_Base_SetConfig+0x130>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d103      	bne.n	8007e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	615a      	str	r2, [r3, #20]
}
 8007e5e:	bf00      	nop
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40010000 	.word	0x40010000
 8007e70:	40000400 	.word	0x40000400
 8007e74:	40000800 	.word	0x40000800
 8007e78:	40000c00 	.word	0x40000c00
 8007e7c:	40010400 	.word	0x40010400
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40014400 	.word	0x40014400
 8007e88:	40014800 	.word	0x40014800

08007e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4b37      	ldr	r3, [pc, #220]	; (8007f94 <TIM_OC1_SetConfig+0x108>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f023 0302 	bic.w	r3, r3, #2
 8007ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a2d      	ldr	r2, [pc, #180]	; (8007f98 <TIM_OC1_SetConfig+0x10c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00f      	beq.n	8007f08 <TIM_OC1_SetConfig+0x7c>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a2c      	ldr	r2, [pc, #176]	; (8007f9c <TIM_OC1_SetConfig+0x110>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00b      	beq.n	8007f08 <TIM_OC1_SetConfig+0x7c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a2b      	ldr	r2, [pc, #172]	; (8007fa0 <TIM_OC1_SetConfig+0x114>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d007      	beq.n	8007f08 <TIM_OC1_SetConfig+0x7c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a2a      	ldr	r2, [pc, #168]	; (8007fa4 <TIM_OC1_SetConfig+0x118>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d003      	beq.n	8007f08 <TIM_OC1_SetConfig+0x7c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a29      	ldr	r2, [pc, #164]	; (8007fa8 <TIM_OC1_SetConfig+0x11c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d10c      	bne.n	8007f22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f023 0308 	bic.w	r3, r3, #8
 8007f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f023 0304 	bic.w	r3, r3, #4
 8007f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a1c      	ldr	r2, [pc, #112]	; (8007f98 <TIM_OC1_SetConfig+0x10c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00f      	beq.n	8007f4a <TIM_OC1_SetConfig+0xbe>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <TIM_OC1_SetConfig+0x110>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00b      	beq.n	8007f4a <TIM_OC1_SetConfig+0xbe>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a1a      	ldr	r2, [pc, #104]	; (8007fa0 <TIM_OC1_SetConfig+0x114>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d007      	beq.n	8007f4a <TIM_OC1_SetConfig+0xbe>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a19      	ldr	r2, [pc, #100]	; (8007fa4 <TIM_OC1_SetConfig+0x118>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d003      	beq.n	8007f4a <TIM_OC1_SetConfig+0xbe>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <TIM_OC1_SetConfig+0x11c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d111      	bne.n	8007f6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	621a      	str	r2, [r3, #32]
}
 8007f88:	bf00      	nop
 8007f8a:	371c      	adds	r7, #28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	fffeff8f 	.word	0xfffeff8f
 8007f98:	40010000 	.word	0x40010000
 8007f9c:	40010400 	.word	0x40010400
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800

08007fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f023 0210 	bic.w	r2, r3, #16
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4b34      	ldr	r3, [pc, #208]	; (80080a8 <TIM_OC2_SetConfig+0xfc>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f023 0320 	bic.w	r3, r3, #32
 8007ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a29      	ldr	r2, [pc, #164]	; (80080ac <TIM_OC2_SetConfig+0x100>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_OC2_SetConfig+0x68>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a28      	ldr	r2, [pc, #160]	; (80080b0 <TIM_OC2_SetConfig+0x104>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d10d      	bne.n	8008030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a1e      	ldr	r2, [pc, #120]	; (80080ac <TIM_OC2_SetConfig+0x100>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00f      	beq.n	8008058 <TIM_OC2_SetConfig+0xac>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <TIM_OC2_SetConfig+0x104>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d00b      	beq.n	8008058 <TIM_OC2_SetConfig+0xac>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a1c      	ldr	r2, [pc, #112]	; (80080b4 <TIM_OC2_SetConfig+0x108>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d007      	beq.n	8008058 <TIM_OC2_SetConfig+0xac>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1b      	ldr	r2, [pc, #108]	; (80080b8 <TIM_OC2_SetConfig+0x10c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d003      	beq.n	8008058 <TIM_OC2_SetConfig+0xac>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1a      	ldr	r2, [pc, #104]	; (80080bc <TIM_OC2_SetConfig+0x110>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d113      	bne.n	8008080 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800805e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	feff8fff 	.word	0xfeff8fff
 80080ac:	40010000 	.word	0x40010000
 80080b0:	40010400 	.word	0x40010400
 80080b4:	40014000 	.word	0x40014000
 80080b8:	40014400 	.word	0x40014400
 80080bc:	40014800 	.word	0x40014800

080080c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <TIM_OC3_SetConfig+0xf8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_OC3_SetConfig+0x66>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a26      	ldr	r2, [pc, #152]	; (80081bc <TIM_OC3_SetConfig+0xfc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d10d      	bne.n	8008142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800812c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a1c      	ldr	r2, [pc, #112]	; (80081b8 <TIM_OC3_SetConfig+0xf8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00f      	beq.n	800816a <TIM_OC3_SetConfig+0xaa>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a1b      	ldr	r2, [pc, #108]	; (80081bc <TIM_OC3_SetConfig+0xfc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00b      	beq.n	800816a <TIM_OC3_SetConfig+0xaa>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a1a      	ldr	r2, [pc, #104]	; (80081c0 <TIM_OC3_SetConfig+0x100>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d007      	beq.n	800816a <TIM_OC3_SetConfig+0xaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a19      	ldr	r2, [pc, #100]	; (80081c4 <TIM_OC3_SetConfig+0x104>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_OC3_SetConfig+0xaa>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <TIM_OC3_SetConfig+0x108>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d113      	bne.n	8008192 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	621a      	str	r2, [r3, #32]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40010400 	.word	0x40010400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40014400 	.word	0x40014400
 80081c8:	40014800 	.word	0x40014800

080081cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	031b      	lsls	r3, r3, #12
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a18      	ldr	r2, [pc, #96]	; (8008288 <TIM_OC4_SetConfig+0xbc>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00f      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a17      	ldr	r2, [pc, #92]	; (800828c <TIM_OC4_SetConfig+0xc0>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00b      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a16      	ldr	r2, [pc, #88]	; (8008290 <TIM_OC4_SetConfig+0xc4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d007      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a15      	ldr	r2, [pc, #84]	; (8008294 <TIM_OC4_SetConfig+0xc8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a14      	ldr	r2, [pc, #80]	; (8008298 <TIM_OC4_SetConfig+0xcc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d109      	bne.n	8008260 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	019b      	lsls	r3, r3, #6
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40010000 	.word	0x40010000
 800828c:	40010400 	.word	0x40010400
 8008290:	40014000 	.word	0x40014000
 8008294:	40014400 	.word	0x40014400
 8008298:	40014800 	.word	0x40014800

0800829c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	041b      	lsls	r3, r3, #16
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a17      	ldr	r2, [pc, #92]	; (800834c <TIM_OC5_SetConfig+0xb0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00f      	beq.n	8008312 <TIM_OC5_SetConfig+0x76>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a16      	ldr	r2, [pc, #88]	; (8008350 <TIM_OC5_SetConfig+0xb4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00b      	beq.n	8008312 <TIM_OC5_SetConfig+0x76>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a15      	ldr	r2, [pc, #84]	; (8008354 <TIM_OC5_SetConfig+0xb8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d007      	beq.n	8008312 <TIM_OC5_SetConfig+0x76>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a14      	ldr	r2, [pc, #80]	; (8008358 <TIM_OC5_SetConfig+0xbc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d003      	beq.n	8008312 <TIM_OC5_SetConfig+0x76>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a13      	ldr	r2, [pc, #76]	; (800835c <TIM_OC5_SetConfig+0xc0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d109      	bne.n	8008326 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008318:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	621a      	str	r2, [r3, #32]
}
 8008340:	bf00      	nop
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	40010000 	.word	0x40010000
 8008350:	40010400 	.word	0x40010400
 8008354:	40014000 	.word	0x40014000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800

08008360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	051b      	lsls	r3, r3, #20
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a18      	ldr	r2, [pc, #96]	; (8008414 <TIM_OC6_SetConfig+0xb4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00f      	beq.n	80083d8 <TIM_OC6_SetConfig+0x78>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a17      	ldr	r2, [pc, #92]	; (8008418 <TIM_OC6_SetConfig+0xb8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00b      	beq.n	80083d8 <TIM_OC6_SetConfig+0x78>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a16      	ldr	r2, [pc, #88]	; (800841c <TIM_OC6_SetConfig+0xbc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d007      	beq.n	80083d8 <TIM_OC6_SetConfig+0x78>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a15      	ldr	r2, [pc, #84]	; (8008420 <TIM_OC6_SetConfig+0xc0>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_OC6_SetConfig+0x78>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a14      	ldr	r2, [pc, #80]	; (8008424 <TIM_OC6_SetConfig+0xc4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d109      	bne.n	80083ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	029b      	lsls	r3, r3, #10
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	621a      	str	r2, [r3, #32]
}
 8008406:	bf00      	nop
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40010000 	.word	0x40010000
 8008418:	40010400 	.word	0x40010400
 800841c:	40014000 	.word	0x40014000
 8008420:	40014400 	.word	0x40014400
 8008424:	40014800 	.word	0x40014800

08008428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	f023 0201 	bic.w	r2, r3, #1
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f023 030a 	bic.w	r3, r3, #10
 8008464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008486:	b480      	push	{r7}
 8008488:	b087      	sub	sp, #28
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f023 0210 	bic.w	r2, r3, #16
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	031b      	lsls	r3, r3, #12
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <TIM_ITRx_SetConfig+0x38>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	f043 0307 	orr.w	r3, r3, #7
 800850a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	609a      	str	r2, [r3, #8]
}
 8008512:	bf00      	nop
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	ffcfff8f 	.word	0xffcfff8f

08008524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800853e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	021a      	lsls	r2, r3, #8
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	431a      	orrs	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4313      	orrs	r3, r2
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	609a      	str	r2, [r3, #8]
}
 8008558:	bf00      	nop
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	2201      	movs	r2, #1
 8008578:	fa02 f303 	lsl.w	r3, r2, r3
 800857c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	43db      	mvns	r3, r3
 8008586:	401a      	ands	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a1a      	ldr	r2, [r3, #32]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	fa01 f303 	lsl.w	r3, r1, r3
 800859c:	431a      	orrs	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e068      	b.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a2e      	ldr	r2, [pc, #184]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a2d      	ldr	r2, [pc, #180]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d108      	bne.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008614:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01d      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863a:	d018      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1b      	ldr	r2, [pc, #108]	; (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a1a      	ldr	r2, [pc, #104]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00e      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a18      	ldr	r2, [pc, #96]	; (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a13      	ldr	r2, [pc, #76]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a14      	ldr	r2, [pc, #80]	; (80086bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d10c      	bne.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4313      	orrs	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	40010000 	.word	0x40010000
 80086ac:	40010400 	.word	0x40010400
 80086b0:	40000400 	.word	0x40000400
 80086b4:	40000800 	.word	0x40000800
 80086b8:	40000c00 	.word	0x40000c00
 80086bc:	40001800 	.word	0x40001800

080086c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e042      	b.n	8008794 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008714:	2b00      	cmp	r3, #0
 8008716:	d106      	bne.n	8008726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7f8 fd1b 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2224      	movs	r2, #36	; 0x24
 800872a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0201 	bic.w	r2, r2, #1
 800873c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fafc 	bl	8008d3c <UART_SetConfig>
 8008744:	4603      	mov	r3, r0
 8008746:	2b01      	cmp	r3, #1
 8008748:	d101      	bne.n	800874e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e022      	b.n	8008794 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 f850 	bl	80097fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800876a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800877a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 f8d7 	bl	8009940 <UART_CheckIdleState>
 8008792:	4603      	mov	r3, r0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	f640 030f 	movw	r3, #2063	; 0x80f
 80087c2:	4013      	ands	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d118      	bne.n	80087fe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d013      	beq.n	80087fe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8282 	beq.w	8008cf8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
      }
      return;
 80087fc:	e27c      	b.n	8008cf8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80ef 	beq.w	80089e4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4b73      	ldr	r3, [pc, #460]	; (80089d8 <HAL_UART_IRQHandler+0x23c>)
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d105      	bne.n	800881c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	4b72      	ldr	r3, [pc, #456]	; (80089dc <HAL_UART_IRQHandler+0x240>)
 8008814:	4013      	ands	r3, r2
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80e4 	beq.w	80089e4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d010      	beq.n	8008848 <HAL_UART_IRQHandler+0xac>
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2201      	movs	r2, #1
 8008836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800883e:	f043 0201 	orr.w	r2, r3, #1
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d010      	beq.n	8008874 <HAL_UART_IRQHandler+0xd8>
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2202      	movs	r2, #2
 8008862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886a:	f043 0204 	orr.w	r2, r3, #4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <HAL_UART_IRQHandler+0x104>
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2204      	movs	r2, #4
 800888e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008896:	f043 0202 	orr.w	r2, r3, #2
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d015      	beq.n	80088d6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d104      	bne.n	80088be <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4b48      	ldr	r3, [pc, #288]	; (80089d8 <HAL_UART_IRQHandler+0x23c>)
 80088b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2208      	movs	r2, #8
 80088c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088cc:	f043 0208 	orr.w	r2, r3, #8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d011      	beq.n	8008904 <HAL_UART_IRQHandler+0x168>
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088fa:	f043 0220 	orr.w	r2, r3, #32
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 81f6 	beq.w	8008cfc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	d011      	beq.n	800893e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	f003 0320 	and.w	r3, r3, #32
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d007      	beq.n	800893e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008944:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d004      	beq.n	800895e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800895a:	2b00      	cmp	r3, #0
 800895c:	d031      	beq.n	80089c2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 f8ba 	bl	8009ad8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896e:	2b40      	cmp	r3, #64	; 0x40
 8008970:	d123      	bne.n	80089ba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008980:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d013      	beq.n	80089b2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800898e:	4a14      	ldr	r2, [pc, #80]	; (80089e0 <HAL_UART_IRQHandler+0x244>)
 8008990:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008996:	4618      	mov	r0, r3
 8008998:	f7f9 ff0c 	bl	80027b4 <HAL_DMA_Abort_IT>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d017      	beq.n	80089d2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b0:	e00f      	b.n	80089d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9ac 	bl	8008d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b8:	e00b      	b.n	80089d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f9a8 	bl	8008d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c0:	e007      	b.n	80089d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f9a4 	bl	8008d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80089d0:	e194      	b.n	8008cfc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d2:	bf00      	nop
    return;
 80089d4:	e192      	b.n	8008cfc <HAL_UART_IRQHandler+0x560>
 80089d6:	bf00      	nop
 80089d8:	10000001 	.word	0x10000001
 80089dc:	04000120 	.word	0x04000120
 80089e0:	08009b3d 	.word	0x08009b3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	f040 810f 	bne.w	8008c0c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8109 	beq.w	8008c0c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 8103 	beq.w	8008c0c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b40      	cmp	r3, #64	; 0x40
 8008a1a:	f040 80bb 	bne.w	8008b94 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a96      	ldr	r2, [pc, #600]	; (8008c80 <HAL_UART_IRQHandler+0x4e4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d059      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a94      	ldr	r2, [pc, #592]	; (8008c84 <HAL_UART_IRQHandler+0x4e8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d053      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a92      	ldr	r2, [pc, #584]	; (8008c88 <HAL_UART_IRQHandler+0x4ec>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d04d      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a90      	ldr	r2, [pc, #576]	; (8008c8c <HAL_UART_IRQHandler+0x4f0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d047      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a8e      	ldr	r2, [pc, #568]	; (8008c90 <HAL_UART_IRQHandler+0x4f4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d041      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a8c      	ldr	r2, [pc, #560]	; (8008c94 <HAL_UART_IRQHandler+0x4f8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d03b      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a8a      	ldr	r2, [pc, #552]	; (8008c98 <HAL_UART_IRQHandler+0x4fc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d035      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a88      	ldr	r2, [pc, #544]	; (8008c9c <HAL_UART_IRQHandler+0x500>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d02f      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a86      	ldr	r2, [pc, #536]	; (8008ca0 <HAL_UART_IRQHandler+0x504>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d029      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a84      	ldr	r2, [pc, #528]	; (8008ca4 <HAL_UART_IRQHandler+0x508>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d023      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a82      	ldr	r2, [pc, #520]	; (8008ca8 <HAL_UART_IRQHandler+0x50c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d01d      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a80      	ldr	r2, [pc, #512]	; (8008cac <HAL_UART_IRQHandler+0x510>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d017      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a7e      	ldr	r2, [pc, #504]	; (8008cb0 <HAL_UART_IRQHandler+0x514>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d011      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a7c      	ldr	r2, [pc, #496]	; (8008cb4 <HAL_UART_IRQHandler+0x518>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00b      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a7a      	ldr	r2, [pc, #488]	; (8008cb8 <HAL_UART_IRQHandler+0x51c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d005      	beq.n	8008ade <HAL_UART_IRQHandler+0x342>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a78      	ldr	r2, [pc, #480]	; (8008cbc <HAL_UART_IRQHandler+0x520>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d105      	bne.n	8008aea <HAL_UART_IRQHandler+0x34e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	e004      	b.n	8008af4 <HAL_UART_IRQHandler+0x358>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 8101 	beq.w	8008d00 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b04:	893a      	ldrh	r2, [r7, #8]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	f080 80fa 	bcs.w	8008d00 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	893a      	ldrh	r2, [r7, #8]
 8008b10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1e:	d02b      	beq.n	8008b78 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b2e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0201 	bic.w	r2, r2, #1
 8008b3e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b4e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0210 	bic.w	r2, r2, #16
 8008b6c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 fb00 	bl	8002178 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f8c9 	bl	8008d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b92:	e0b5      	b.n	8008d00 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 80a8 	beq.w	8008d04 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008bb4:	897b      	ldrh	r3, [r7, #10]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80a4 	beq.w	8008d04 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bca:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6899      	ldr	r1, [r3, #8]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b3a      	ldr	r3, [pc, #232]	; (8008cc0 <HAL_UART_IRQHandler+0x524>)
 8008bd8:	400b      	ands	r3, r1
 8008bda:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0210 	bic.w	r2, r2, #16
 8008bfe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c00:	897b      	ldrh	r3, [r7, #10]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f88d 	bl	8008d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c0a:	e07b      	b.n	8008d04 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00d      	beq.n	8008c32 <HAL_UART_IRQHandler+0x496>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d008      	beq.n	8008c32 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 f820 	bl	8009c70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c30:	e06b      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d012      	beq.n	8008c62 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d008      	beq.n	8008c62 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d057      	beq.n	8008d08 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	4798      	blx	r3
    }
    return;
 8008c60:	e052      	b.n	8008d08 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02b      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x528>
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d026      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 ff76 	bl	8009b68 <UART_EndTransmit_IT>
    return;
 8008c7c:	e045      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
 8008c7e:	bf00      	nop
 8008c80:	40020010 	.word	0x40020010
 8008c84:	40020028 	.word	0x40020028
 8008c88:	40020040 	.word	0x40020040
 8008c8c:	40020058 	.word	0x40020058
 8008c90:	40020070 	.word	0x40020070
 8008c94:	40020088 	.word	0x40020088
 8008c98:	400200a0 	.word	0x400200a0
 8008c9c:	400200b8 	.word	0x400200b8
 8008ca0:	40020410 	.word	0x40020410
 8008ca4:	40020428 	.word	0x40020428
 8008ca8:	40020440 	.word	0x40020440
 8008cac:	40020458 	.word	0x40020458
 8008cb0:	40020470 	.word	0x40020470
 8008cb4:	40020488 	.word	0x40020488
 8008cb8:	400204a0 	.word	0x400204a0
 8008cbc:	400204b8 	.word	0x400204b8
 8008cc0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x544>
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 ffdd 	bl	8009c98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cde:	e014      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00f      	beq.n	8008d0a <HAL_UART_IRQHandler+0x56e>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	da0c      	bge.n	8008d0a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 ffc7 	bl	8009c84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cf6:	e008      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
      return;
 8008cf8:	bf00      	nop
 8008cfa:	e006      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
    return;
 8008cfc:	bf00      	nop
 8008cfe:	e004      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
      return;
 8008d00:	bf00      	nop
 8008d02:	e002      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
      return;
 8008d04:	bf00      	nop
 8008d06:	e000      	b.n	8008d0a <HAL_UART_IRQHandler+0x56e>
    return;
 8008d08:	bf00      	nop
  }
}
 8008d0a:	3720      	adds	r7, #32
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d3c:	b5b0      	push	{r4, r5, r7, lr}
 8008d3e:	b08e      	sub	sp, #56	; 0x38
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4bbf      	ldr	r3, [pc, #764]	; (8009068 <UART_SetConfig+0x32c>)
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d72:	430b      	orrs	r3, r1
 8008d74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4ab5      	ldr	r2, [pc, #724]	; (800906c <UART_SetConfig+0x330>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d004      	beq.n	8008da6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008da2:	4313      	orrs	r3, r2
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	4bb0      	ldr	r3, [pc, #704]	; (8009070 <UART_SetConfig+0x334>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6812      	ldr	r2, [r2, #0]
 8008db4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008db6:	430b      	orrs	r3, r1
 8008db8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	f023 010f 	bic.w	r1, r3, #15
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4aa7      	ldr	r2, [pc, #668]	; (8009074 <UART_SetConfig+0x338>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d176      	bne.n	8008ec8 <UART_SetConfig+0x18c>
 8008dda:	4ba7      	ldr	r3, [pc, #668]	; (8009078 <UART_SetConfig+0x33c>)
 8008ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008de2:	2b28      	cmp	r3, #40	; 0x28
 8008de4:	d86c      	bhi.n	8008ec0 <UART_SetConfig+0x184>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <UART_SetConfig+0xb0>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e91 	.word	0x08008e91
 8008df0:	08008ec1 	.word	0x08008ec1
 8008df4:	08008ec1 	.word	0x08008ec1
 8008df8:	08008ec1 	.word	0x08008ec1
 8008dfc:	08008ec1 	.word	0x08008ec1
 8008e00:	08008ec1 	.word	0x08008ec1
 8008e04:	08008ec1 	.word	0x08008ec1
 8008e08:	08008ec1 	.word	0x08008ec1
 8008e0c:	08008e99 	.word	0x08008e99
 8008e10:	08008ec1 	.word	0x08008ec1
 8008e14:	08008ec1 	.word	0x08008ec1
 8008e18:	08008ec1 	.word	0x08008ec1
 8008e1c:	08008ec1 	.word	0x08008ec1
 8008e20:	08008ec1 	.word	0x08008ec1
 8008e24:	08008ec1 	.word	0x08008ec1
 8008e28:	08008ec1 	.word	0x08008ec1
 8008e2c:	08008ea1 	.word	0x08008ea1
 8008e30:	08008ec1 	.word	0x08008ec1
 8008e34:	08008ec1 	.word	0x08008ec1
 8008e38:	08008ec1 	.word	0x08008ec1
 8008e3c:	08008ec1 	.word	0x08008ec1
 8008e40:	08008ec1 	.word	0x08008ec1
 8008e44:	08008ec1 	.word	0x08008ec1
 8008e48:	08008ec1 	.word	0x08008ec1
 8008e4c:	08008ea9 	.word	0x08008ea9
 8008e50:	08008ec1 	.word	0x08008ec1
 8008e54:	08008ec1 	.word	0x08008ec1
 8008e58:	08008ec1 	.word	0x08008ec1
 8008e5c:	08008ec1 	.word	0x08008ec1
 8008e60:	08008ec1 	.word	0x08008ec1
 8008e64:	08008ec1 	.word	0x08008ec1
 8008e68:	08008ec1 	.word	0x08008ec1
 8008e6c:	08008eb1 	.word	0x08008eb1
 8008e70:	08008ec1 	.word	0x08008ec1
 8008e74:	08008ec1 	.word	0x08008ec1
 8008e78:	08008ec1 	.word	0x08008ec1
 8008e7c:	08008ec1 	.word	0x08008ec1
 8008e80:	08008ec1 	.word	0x08008ec1
 8008e84:	08008ec1 	.word	0x08008ec1
 8008e88:	08008ec1 	.word	0x08008ec1
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e96:	e222      	b.n	80092de <UART_SetConfig+0x5a2>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e9e:	e21e      	b.n	80092de <UART_SetConfig+0x5a2>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ea6:	e21a      	b.n	80092de <UART_SetConfig+0x5a2>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eae:	e216      	b.n	80092de <UART_SetConfig+0x5a2>
 8008eb0:	2320      	movs	r3, #32
 8008eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb6:	e212      	b.n	80092de <UART_SetConfig+0x5a2>
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ebe:	e20e      	b.n	80092de <UART_SetConfig+0x5a2>
 8008ec0:	2380      	movs	r3, #128	; 0x80
 8008ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec6:	e20a      	b.n	80092de <UART_SetConfig+0x5a2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a6b      	ldr	r2, [pc, #428]	; (800907c <UART_SetConfig+0x340>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d130      	bne.n	8008f34 <UART_SetConfig+0x1f8>
 8008ed2:	4b69      	ldr	r3, [pc, #420]	; (8009078 <UART_SetConfig+0x33c>)
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b05      	cmp	r3, #5
 8008edc:	d826      	bhi.n	8008f2c <UART_SetConfig+0x1f0>
 8008ede:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <UART_SetConfig+0x1a8>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008efd 	.word	0x08008efd
 8008ee8:	08008f05 	.word	0x08008f05
 8008eec:	08008f0d 	.word	0x08008f0d
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f1d 	.word	0x08008f1d
 8008ef8:	08008f25 	.word	0x08008f25
 8008efc:	2300      	movs	r3, #0
 8008efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f02:	e1ec      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f04:	2304      	movs	r3, #4
 8008f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f0a:	e1e8      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f0c:	2308      	movs	r3, #8
 8008f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f12:	e1e4      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f14:	2310      	movs	r3, #16
 8008f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f1a:	e1e0      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f1c:	2320      	movs	r3, #32
 8008f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f22:	e1dc      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f24:	2340      	movs	r3, #64	; 0x40
 8008f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2a:	e1d8      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f2c:	2380      	movs	r3, #128	; 0x80
 8008f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f32:	e1d4      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a51      	ldr	r2, [pc, #324]	; (8009080 <UART_SetConfig+0x344>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d130      	bne.n	8008fa0 <UART_SetConfig+0x264>
 8008f3e:	4b4e      	ldr	r3, [pc, #312]	; (8009078 <UART_SetConfig+0x33c>)
 8008f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b05      	cmp	r3, #5
 8008f48:	d826      	bhi.n	8008f98 <UART_SetConfig+0x25c>
 8008f4a:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <UART_SetConfig+0x214>)
 8008f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f50:	08008f69 	.word	0x08008f69
 8008f54:	08008f71 	.word	0x08008f71
 8008f58:	08008f79 	.word	0x08008f79
 8008f5c:	08008f81 	.word	0x08008f81
 8008f60:	08008f89 	.word	0x08008f89
 8008f64:	08008f91 	.word	0x08008f91
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6e:	e1b6      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f70:	2304      	movs	r3, #4
 8008f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f76:	e1b2      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f78:	2308      	movs	r3, #8
 8008f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7e:	e1ae      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f86:	e1aa      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f88:	2320      	movs	r3, #32
 8008f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8e:	e1a6      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f90:	2340      	movs	r3, #64	; 0x40
 8008f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f96:	e1a2      	b.n	80092de <UART_SetConfig+0x5a2>
 8008f98:	2380      	movs	r3, #128	; 0x80
 8008f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9e:	e19e      	b.n	80092de <UART_SetConfig+0x5a2>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a37      	ldr	r2, [pc, #220]	; (8009084 <UART_SetConfig+0x348>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d130      	bne.n	800900c <UART_SetConfig+0x2d0>
 8008faa:	4b33      	ldr	r3, [pc, #204]	; (8009078 <UART_SetConfig+0x33c>)
 8008fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d826      	bhi.n	8009004 <UART_SetConfig+0x2c8>
 8008fb6:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <UART_SetConfig+0x280>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08008fd5 	.word	0x08008fd5
 8008fc0:	08008fdd 	.word	0x08008fdd
 8008fc4:	08008fe5 	.word	0x08008fe5
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	08008ff5 	.word	0x08008ff5
 8008fd0:	08008ffd 	.word	0x08008ffd
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fda:	e180      	b.n	80092de <UART_SetConfig+0x5a2>
 8008fdc:	2304      	movs	r3, #4
 8008fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe2:	e17c      	b.n	80092de <UART_SetConfig+0x5a2>
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fea:	e178      	b.n	80092de <UART_SetConfig+0x5a2>
 8008fec:	2310      	movs	r3, #16
 8008fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff2:	e174      	b.n	80092de <UART_SetConfig+0x5a2>
 8008ff4:	2320      	movs	r3, #32
 8008ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ffa:	e170      	b.n	80092de <UART_SetConfig+0x5a2>
 8008ffc:	2340      	movs	r3, #64	; 0x40
 8008ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009002:	e16c      	b.n	80092de <UART_SetConfig+0x5a2>
 8009004:	2380      	movs	r3, #128	; 0x80
 8009006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800900a:	e168      	b.n	80092de <UART_SetConfig+0x5a2>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a1d      	ldr	r2, [pc, #116]	; (8009088 <UART_SetConfig+0x34c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d142      	bne.n	800909c <UART_SetConfig+0x360>
 8009016:	4b18      	ldr	r3, [pc, #96]	; (8009078 <UART_SetConfig+0x33c>)
 8009018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	2b05      	cmp	r3, #5
 8009020:	d838      	bhi.n	8009094 <UART_SetConfig+0x358>
 8009022:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <UART_SetConfig+0x2ec>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009041 	.word	0x08009041
 800902c:	08009049 	.word	0x08009049
 8009030:	08009051 	.word	0x08009051
 8009034:	08009059 	.word	0x08009059
 8009038:	08009061 	.word	0x08009061
 800903c:	0800908d 	.word	0x0800908d
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009046:	e14a      	b.n	80092de <UART_SetConfig+0x5a2>
 8009048:	2304      	movs	r3, #4
 800904a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904e:	e146      	b.n	80092de <UART_SetConfig+0x5a2>
 8009050:	2308      	movs	r3, #8
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009056:	e142      	b.n	80092de <UART_SetConfig+0x5a2>
 8009058:	2310      	movs	r3, #16
 800905a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905e:	e13e      	b.n	80092de <UART_SetConfig+0x5a2>
 8009060:	2320      	movs	r3, #32
 8009062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009066:	e13a      	b.n	80092de <UART_SetConfig+0x5a2>
 8009068:	cfff69f3 	.word	0xcfff69f3
 800906c:	58000c00 	.word	0x58000c00
 8009070:	11fff4ff 	.word	0x11fff4ff
 8009074:	40011000 	.word	0x40011000
 8009078:	58024400 	.word	0x58024400
 800907c:	40004400 	.word	0x40004400
 8009080:	40004800 	.word	0x40004800
 8009084:	40004c00 	.word	0x40004c00
 8009088:	40005000 	.word	0x40005000
 800908c:	2340      	movs	r3, #64	; 0x40
 800908e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009092:	e124      	b.n	80092de <UART_SetConfig+0x5a2>
 8009094:	2380      	movs	r3, #128	; 0x80
 8009096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909a:	e120      	b.n	80092de <UART_SetConfig+0x5a2>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4acc      	ldr	r2, [pc, #816]	; (80093d4 <UART_SetConfig+0x698>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d176      	bne.n	8009194 <UART_SetConfig+0x458>
 80090a6:	4bcc      	ldr	r3, [pc, #816]	; (80093d8 <UART_SetConfig+0x69c>)
 80090a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090ae:	2b28      	cmp	r3, #40	; 0x28
 80090b0:	d86c      	bhi.n	800918c <UART_SetConfig+0x450>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <UART_SetConfig+0x37c>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	0800915d 	.word	0x0800915d
 80090bc:	0800918d 	.word	0x0800918d
 80090c0:	0800918d 	.word	0x0800918d
 80090c4:	0800918d 	.word	0x0800918d
 80090c8:	0800918d 	.word	0x0800918d
 80090cc:	0800918d 	.word	0x0800918d
 80090d0:	0800918d 	.word	0x0800918d
 80090d4:	0800918d 	.word	0x0800918d
 80090d8:	08009165 	.word	0x08009165
 80090dc:	0800918d 	.word	0x0800918d
 80090e0:	0800918d 	.word	0x0800918d
 80090e4:	0800918d 	.word	0x0800918d
 80090e8:	0800918d 	.word	0x0800918d
 80090ec:	0800918d 	.word	0x0800918d
 80090f0:	0800918d 	.word	0x0800918d
 80090f4:	0800918d 	.word	0x0800918d
 80090f8:	0800916d 	.word	0x0800916d
 80090fc:	0800918d 	.word	0x0800918d
 8009100:	0800918d 	.word	0x0800918d
 8009104:	0800918d 	.word	0x0800918d
 8009108:	0800918d 	.word	0x0800918d
 800910c:	0800918d 	.word	0x0800918d
 8009110:	0800918d 	.word	0x0800918d
 8009114:	0800918d 	.word	0x0800918d
 8009118:	08009175 	.word	0x08009175
 800911c:	0800918d 	.word	0x0800918d
 8009120:	0800918d 	.word	0x0800918d
 8009124:	0800918d 	.word	0x0800918d
 8009128:	0800918d 	.word	0x0800918d
 800912c:	0800918d 	.word	0x0800918d
 8009130:	0800918d 	.word	0x0800918d
 8009134:	0800918d 	.word	0x0800918d
 8009138:	0800917d 	.word	0x0800917d
 800913c:	0800918d 	.word	0x0800918d
 8009140:	0800918d 	.word	0x0800918d
 8009144:	0800918d 	.word	0x0800918d
 8009148:	0800918d 	.word	0x0800918d
 800914c:	0800918d 	.word	0x0800918d
 8009150:	0800918d 	.word	0x0800918d
 8009154:	0800918d 	.word	0x0800918d
 8009158:	08009185 	.word	0x08009185
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009162:	e0bc      	b.n	80092de <UART_SetConfig+0x5a2>
 8009164:	2304      	movs	r3, #4
 8009166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916a:	e0b8      	b.n	80092de <UART_SetConfig+0x5a2>
 800916c:	2308      	movs	r3, #8
 800916e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009172:	e0b4      	b.n	80092de <UART_SetConfig+0x5a2>
 8009174:	2310      	movs	r3, #16
 8009176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917a:	e0b0      	b.n	80092de <UART_SetConfig+0x5a2>
 800917c:	2320      	movs	r3, #32
 800917e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009182:	e0ac      	b.n	80092de <UART_SetConfig+0x5a2>
 8009184:	2340      	movs	r3, #64	; 0x40
 8009186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918a:	e0a8      	b.n	80092de <UART_SetConfig+0x5a2>
 800918c:	2380      	movs	r3, #128	; 0x80
 800918e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009192:	e0a4      	b.n	80092de <UART_SetConfig+0x5a2>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a90      	ldr	r2, [pc, #576]	; (80093dc <UART_SetConfig+0x6a0>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d130      	bne.n	8009200 <UART_SetConfig+0x4c4>
 800919e:	4b8e      	ldr	r3, [pc, #568]	; (80093d8 <UART_SetConfig+0x69c>)
 80091a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	2b05      	cmp	r3, #5
 80091a8:	d826      	bhi.n	80091f8 <UART_SetConfig+0x4bc>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <UART_SetConfig+0x474>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091c9 	.word	0x080091c9
 80091b4:	080091d1 	.word	0x080091d1
 80091b8:	080091d9 	.word	0x080091d9
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091e9 	.word	0x080091e9
 80091c4:	080091f1 	.word	0x080091f1
 80091c8:	2300      	movs	r3, #0
 80091ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ce:	e086      	b.n	80092de <UART_SetConfig+0x5a2>
 80091d0:	2304      	movs	r3, #4
 80091d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d6:	e082      	b.n	80092de <UART_SetConfig+0x5a2>
 80091d8:	2308      	movs	r3, #8
 80091da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091de:	e07e      	b.n	80092de <UART_SetConfig+0x5a2>
 80091e0:	2310      	movs	r3, #16
 80091e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e6:	e07a      	b.n	80092de <UART_SetConfig+0x5a2>
 80091e8:	2320      	movs	r3, #32
 80091ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ee:	e076      	b.n	80092de <UART_SetConfig+0x5a2>
 80091f0:	2340      	movs	r3, #64	; 0x40
 80091f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f6:	e072      	b.n	80092de <UART_SetConfig+0x5a2>
 80091f8:	2380      	movs	r3, #128	; 0x80
 80091fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091fe:	e06e      	b.n	80092de <UART_SetConfig+0x5a2>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a76      	ldr	r2, [pc, #472]	; (80093e0 <UART_SetConfig+0x6a4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d130      	bne.n	800926c <UART_SetConfig+0x530>
 800920a:	4b73      	ldr	r3, [pc, #460]	; (80093d8 <UART_SetConfig+0x69c>)
 800920c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	2b05      	cmp	r3, #5
 8009214:	d826      	bhi.n	8009264 <UART_SetConfig+0x528>
 8009216:	a201      	add	r2, pc, #4	; (adr r2, 800921c <UART_SetConfig+0x4e0>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	08009235 	.word	0x08009235
 8009220:	0800923d 	.word	0x0800923d
 8009224:	08009245 	.word	0x08009245
 8009228:	0800924d 	.word	0x0800924d
 800922c:	08009255 	.word	0x08009255
 8009230:	0800925d 	.word	0x0800925d
 8009234:	2300      	movs	r3, #0
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e050      	b.n	80092de <UART_SetConfig+0x5a2>
 800923c:	2304      	movs	r3, #4
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e04c      	b.n	80092de <UART_SetConfig+0x5a2>
 8009244:	2308      	movs	r3, #8
 8009246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924a:	e048      	b.n	80092de <UART_SetConfig+0x5a2>
 800924c:	2310      	movs	r3, #16
 800924e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009252:	e044      	b.n	80092de <UART_SetConfig+0x5a2>
 8009254:	2320      	movs	r3, #32
 8009256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800925a:	e040      	b.n	80092de <UART_SetConfig+0x5a2>
 800925c:	2340      	movs	r3, #64	; 0x40
 800925e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009262:	e03c      	b.n	80092de <UART_SetConfig+0x5a2>
 8009264:	2380      	movs	r3, #128	; 0x80
 8009266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800926a:	e038      	b.n	80092de <UART_SetConfig+0x5a2>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a5c      	ldr	r2, [pc, #368]	; (80093e4 <UART_SetConfig+0x6a8>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d130      	bne.n	80092d8 <UART_SetConfig+0x59c>
 8009276:	4b58      	ldr	r3, [pc, #352]	; (80093d8 <UART_SetConfig+0x69c>)
 8009278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927a:	f003 0307 	and.w	r3, r3, #7
 800927e:	2b05      	cmp	r3, #5
 8009280:	d826      	bhi.n	80092d0 <UART_SetConfig+0x594>
 8009282:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <UART_SetConfig+0x54c>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	080092a1 	.word	0x080092a1
 800928c:	080092a9 	.word	0x080092a9
 8009290:	080092b1 	.word	0x080092b1
 8009294:	080092b9 	.word	0x080092b9
 8009298:	080092c1 	.word	0x080092c1
 800929c:	080092c9 	.word	0x080092c9
 80092a0:	2302      	movs	r3, #2
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a6:	e01a      	b.n	80092de <UART_SetConfig+0x5a2>
 80092a8:	2304      	movs	r3, #4
 80092aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ae:	e016      	b.n	80092de <UART_SetConfig+0x5a2>
 80092b0:	2308      	movs	r3, #8
 80092b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b6:	e012      	b.n	80092de <UART_SetConfig+0x5a2>
 80092b8:	2310      	movs	r3, #16
 80092ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092be:	e00e      	b.n	80092de <UART_SetConfig+0x5a2>
 80092c0:	2320      	movs	r3, #32
 80092c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092c6:	e00a      	b.n	80092de <UART_SetConfig+0x5a2>
 80092c8:	2340      	movs	r3, #64	; 0x40
 80092ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ce:	e006      	b.n	80092de <UART_SetConfig+0x5a2>
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092d6:	e002      	b.n	80092de <UART_SetConfig+0x5a2>
 80092d8:	2380      	movs	r3, #128	; 0x80
 80092da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a40      	ldr	r2, [pc, #256]	; (80093e4 <UART_SetConfig+0x6a8>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	f040 80ef 	bne.w	80094c8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ee:	2b20      	cmp	r3, #32
 80092f0:	dc46      	bgt.n	8009380 <UART_SetConfig+0x644>
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	f2c0 8081 	blt.w	80093fa <UART_SetConfig+0x6be>
 80092f8:	3b02      	subs	r3, #2
 80092fa:	2b1e      	cmp	r3, #30
 80092fc:	d87d      	bhi.n	80093fa <UART_SetConfig+0x6be>
 80092fe:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <UART_SetConfig+0x5c8>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	08009387 	.word	0x08009387
 8009308:	080093fb 	.word	0x080093fb
 800930c:	0800938f 	.word	0x0800938f
 8009310:	080093fb 	.word	0x080093fb
 8009314:	080093fb 	.word	0x080093fb
 8009318:	080093fb 	.word	0x080093fb
 800931c:	0800939f 	.word	0x0800939f
 8009320:	080093fb 	.word	0x080093fb
 8009324:	080093fb 	.word	0x080093fb
 8009328:	080093fb 	.word	0x080093fb
 800932c:	080093fb 	.word	0x080093fb
 8009330:	080093fb 	.word	0x080093fb
 8009334:	080093fb 	.word	0x080093fb
 8009338:	080093fb 	.word	0x080093fb
 800933c:	080093af 	.word	0x080093af
 8009340:	080093fb 	.word	0x080093fb
 8009344:	080093fb 	.word	0x080093fb
 8009348:	080093fb 	.word	0x080093fb
 800934c:	080093fb 	.word	0x080093fb
 8009350:	080093fb 	.word	0x080093fb
 8009354:	080093fb 	.word	0x080093fb
 8009358:	080093fb 	.word	0x080093fb
 800935c:	080093fb 	.word	0x080093fb
 8009360:	080093fb 	.word	0x080093fb
 8009364:	080093fb 	.word	0x080093fb
 8009368:	080093fb 	.word	0x080093fb
 800936c:	080093fb 	.word	0x080093fb
 8009370:	080093fb 	.word	0x080093fb
 8009374:	080093fb 	.word	0x080093fb
 8009378:	080093fb 	.word	0x080093fb
 800937c:	080093ed 	.word	0x080093ed
 8009380:	2b40      	cmp	r3, #64	; 0x40
 8009382:	d036      	beq.n	80093f2 <UART_SetConfig+0x6b6>
 8009384:	e039      	b.n	80093fa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009386:	f7fc fed3 	bl	8006130 <HAL_RCCEx_GetD3PCLK1Freq>
 800938a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800938c:	e03b      	b.n	8009406 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938e:	f107 0314 	add.w	r3, r7, #20
 8009392:	4618      	mov	r0, r3
 8009394:	f7fc fee2 	bl	800615c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800939c:	e033      	b.n	8009406 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800939e:	f107 0308 	add.w	r3, r7, #8
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fd f82e 	bl	8006404 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ac:	e02b      	b.n	8009406 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ae:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <UART_SetConfig+0x69c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <UART_SetConfig+0x69c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	08db      	lsrs	r3, r3, #3
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	4a08      	ldr	r2, [pc, #32]	; (80093e8 <UART_SetConfig+0x6ac>)
 80093c6:	fa22 f303 	lsr.w	r3, r2, r3
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093cc:	e01b      	b.n	8009406 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80093ce:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <UART_SetConfig+0x6ac>)
 80093d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093d2:	e018      	b.n	8009406 <UART_SetConfig+0x6ca>
 80093d4:	40011400 	.word	0x40011400
 80093d8:	58024400 	.word	0x58024400
 80093dc:	40007800 	.word	0x40007800
 80093e0:	40007c00 	.word	0x40007c00
 80093e4:	58000c00 	.word	0x58000c00
 80093e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093ec:	4bc4      	ldr	r3, [pc, #784]	; (8009700 <UART_SetConfig+0x9c4>)
 80093ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093f0:	e009      	b.n	8009406 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093f8:	e005      	b.n	8009406 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 81da 	beq.w	80097c2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	4abc      	ldr	r2, [pc, #752]	; (8009704 <UART_SetConfig+0x9c8>)
 8009414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009418:	461a      	mov	r2, r3
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009420:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	4613      	mov	r3, r2
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	4413      	add	r3, r2
 800942c:	6a3a      	ldr	r2, [r7, #32]
 800942e:	429a      	cmp	r2, r3
 8009430:	d305      	bcc.n	800943e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009438:	6a3a      	ldr	r2, [r7, #32]
 800943a:	429a      	cmp	r2, r3
 800943c:	d903      	bls.n	8009446 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009444:	e1bd      	b.n	80097c2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	4618      	mov	r0, r3
 800944a:	f04f 0100 	mov.w	r1, #0
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	4aac      	ldr	r2, [pc, #688]	; (8009704 <UART_SetConfig+0x9c8>)
 8009454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009458:	b29a      	uxth	r2, r3
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	f7f6 ff3b 	bl	80002d8 <__aeabi_uldivmod>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4610      	mov	r0, r2
 8009468:	4619      	mov	r1, r3
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	020b      	lsls	r3, r1, #8
 8009474:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009478:	0202      	lsls	r2, r0, #8
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	6849      	ldr	r1, [r1, #4]
 800947e:	0849      	lsrs	r1, r1, #1
 8009480:	4608      	mov	r0, r1
 8009482:	f04f 0100 	mov.w	r1, #0
 8009486:	1814      	adds	r4, r2, r0
 8009488:	eb43 0501 	adc.w	r5, r3, r1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	461a      	mov	r2, r3
 8009492:	f04f 0300 	mov.w	r3, #0
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f6 ff1d 	bl	80002d8 <__aeabi_uldivmod>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4613      	mov	r3, r2
 80094a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ac:	d308      	bcc.n	80094c0 <UART_SetConfig+0x784>
 80094ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b4:	d204      	bcs.n	80094c0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094bc:	60da      	str	r2, [r3, #12]
 80094be:	e180      	b.n	80097c2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80094c6:	e17c      	b.n	80097c2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d0:	f040 80bf 	bne.w	8009652 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80094d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094d8:	2b20      	cmp	r3, #32
 80094da:	dc49      	bgt.n	8009570 <UART_SetConfig+0x834>
 80094dc:	2b00      	cmp	r3, #0
 80094de:	db7c      	blt.n	80095da <UART_SetConfig+0x89e>
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d87a      	bhi.n	80095da <UART_SetConfig+0x89e>
 80094e4:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <UART_SetConfig+0x7b0>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009577 	.word	0x08009577
 80094f0:	0800957f 	.word	0x0800957f
 80094f4:	080095db 	.word	0x080095db
 80094f8:	080095db 	.word	0x080095db
 80094fc:	08009587 	.word	0x08009587
 8009500:	080095db 	.word	0x080095db
 8009504:	080095db 	.word	0x080095db
 8009508:	080095db 	.word	0x080095db
 800950c:	08009597 	.word	0x08009597
 8009510:	080095db 	.word	0x080095db
 8009514:	080095db 	.word	0x080095db
 8009518:	080095db 	.word	0x080095db
 800951c:	080095db 	.word	0x080095db
 8009520:	080095db 	.word	0x080095db
 8009524:	080095db 	.word	0x080095db
 8009528:	080095db 	.word	0x080095db
 800952c:	080095a7 	.word	0x080095a7
 8009530:	080095db 	.word	0x080095db
 8009534:	080095db 	.word	0x080095db
 8009538:	080095db 	.word	0x080095db
 800953c:	080095db 	.word	0x080095db
 8009540:	080095db 	.word	0x080095db
 8009544:	080095db 	.word	0x080095db
 8009548:	080095db 	.word	0x080095db
 800954c:	080095db 	.word	0x080095db
 8009550:	080095db 	.word	0x080095db
 8009554:	080095db 	.word	0x080095db
 8009558:	080095db 	.word	0x080095db
 800955c:	080095db 	.word	0x080095db
 8009560:	080095db 	.word	0x080095db
 8009564:	080095db 	.word	0x080095db
 8009568:	080095db 	.word	0x080095db
 800956c:	080095cd 	.word	0x080095cd
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	d02e      	beq.n	80095d2 <UART_SetConfig+0x896>
 8009574:	e031      	b.n	80095da <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009576:	f7fb fe6f 	bl	8005258 <HAL_RCC_GetPCLK1Freq>
 800957a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800957c:	e033      	b.n	80095e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800957e:	f7fb fe81 	bl	8005284 <HAL_RCC_GetPCLK2Freq>
 8009582:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009584:	e02f      	b.n	80095e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	4618      	mov	r0, r3
 800958c:	f7fc fde6 	bl	800615c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009594:	e027      	b.n	80095e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009596:	f107 0308 	add.w	r3, r7, #8
 800959a:	4618      	mov	r0, r3
 800959c:	f7fc ff32 	bl	8006404 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095a4:	e01f      	b.n	80095e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a6:	4b58      	ldr	r3, [pc, #352]	; (8009708 <UART_SetConfig+0x9cc>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095b2:	4b55      	ldr	r3, [pc, #340]	; (8009708 <UART_SetConfig+0x9cc>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	08db      	lsrs	r3, r3, #3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	4a53      	ldr	r2, [pc, #332]	; (800970c <UART_SetConfig+0x9d0>)
 80095be:	fa22 f303 	lsr.w	r3, r2, r3
 80095c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095c4:	e00f      	b.n	80095e6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80095c6:	4b51      	ldr	r3, [pc, #324]	; (800970c <UART_SetConfig+0x9d0>)
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ca:	e00c      	b.n	80095e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095cc:	4b4c      	ldr	r3, [pc, #304]	; (8009700 <UART_SetConfig+0x9c4>)
 80095ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095d0:	e009      	b.n	80095e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095d8:	e005      	b.n	80095e6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80095e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 80ea 	beq.w	80097c2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	4a44      	ldr	r2, [pc, #272]	; (8009704 <UART_SetConfig+0x9c8>)
 80095f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009600:	005a      	lsls	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	085b      	lsrs	r3, r3, #1
 8009608:	441a      	add	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009612:	b29b      	uxth	r3, r3
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	2b0f      	cmp	r3, #15
 800961a:	d916      	bls.n	800964a <UART_SetConfig+0x90e>
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009622:	d212      	bcs.n	800964a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	b29b      	uxth	r3, r3
 8009628:	f023 030f 	bic.w	r3, r3, #15
 800962c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	085b      	lsrs	r3, r3, #1
 8009632:	b29b      	uxth	r3, r3
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	b29a      	uxth	r2, r3
 800963a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800963c:	4313      	orrs	r3, r2
 800963e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009646:	60da      	str	r2, [r3, #12]
 8009648:	e0bb      	b.n	80097c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009650:	e0b7      	b.n	80097c2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009652:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009656:	2b20      	cmp	r3, #32
 8009658:	dc4a      	bgt.n	80096f0 <UART_SetConfig+0x9b4>
 800965a:	2b00      	cmp	r3, #0
 800965c:	f2c0 8086 	blt.w	800976c <UART_SetConfig+0xa30>
 8009660:	2b20      	cmp	r3, #32
 8009662:	f200 8083 	bhi.w	800976c <UART_SetConfig+0xa30>
 8009666:	a201      	add	r2, pc, #4	; (adr r2, 800966c <UART_SetConfig+0x930>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	080096f7 	.word	0x080096f7
 8009670:	08009711 	.word	0x08009711
 8009674:	0800976d 	.word	0x0800976d
 8009678:	0800976d 	.word	0x0800976d
 800967c:	08009719 	.word	0x08009719
 8009680:	0800976d 	.word	0x0800976d
 8009684:	0800976d 	.word	0x0800976d
 8009688:	0800976d 	.word	0x0800976d
 800968c:	08009729 	.word	0x08009729
 8009690:	0800976d 	.word	0x0800976d
 8009694:	0800976d 	.word	0x0800976d
 8009698:	0800976d 	.word	0x0800976d
 800969c:	0800976d 	.word	0x0800976d
 80096a0:	0800976d 	.word	0x0800976d
 80096a4:	0800976d 	.word	0x0800976d
 80096a8:	0800976d 	.word	0x0800976d
 80096ac:	08009739 	.word	0x08009739
 80096b0:	0800976d 	.word	0x0800976d
 80096b4:	0800976d 	.word	0x0800976d
 80096b8:	0800976d 	.word	0x0800976d
 80096bc:	0800976d 	.word	0x0800976d
 80096c0:	0800976d 	.word	0x0800976d
 80096c4:	0800976d 	.word	0x0800976d
 80096c8:	0800976d 	.word	0x0800976d
 80096cc:	0800976d 	.word	0x0800976d
 80096d0:	0800976d 	.word	0x0800976d
 80096d4:	0800976d 	.word	0x0800976d
 80096d8:	0800976d 	.word	0x0800976d
 80096dc:	0800976d 	.word	0x0800976d
 80096e0:	0800976d 	.word	0x0800976d
 80096e4:	0800976d 	.word	0x0800976d
 80096e8:	0800976d 	.word	0x0800976d
 80096ec:	0800975f 	.word	0x0800975f
 80096f0:	2b40      	cmp	r3, #64	; 0x40
 80096f2:	d037      	beq.n	8009764 <UART_SetConfig+0xa28>
 80096f4:	e03a      	b.n	800976c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f6:	f7fb fdaf 	bl	8005258 <HAL_RCC_GetPCLK1Freq>
 80096fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096fc:	e03c      	b.n	8009778 <UART_SetConfig+0xa3c>
 80096fe:	bf00      	nop
 8009700:	003d0900 	.word	0x003d0900
 8009704:	08009f3c 	.word	0x08009f3c
 8009708:	58024400 	.word	0x58024400
 800970c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009710:	f7fb fdb8 	bl	8005284 <HAL_RCC_GetPCLK2Freq>
 8009714:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009716:	e02f      	b.n	8009778 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009718:	f107 0314 	add.w	r3, r7, #20
 800971c:	4618      	mov	r0, r3
 800971e:	f7fc fd1d 	bl	800615c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009726:	e027      	b.n	8009778 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009728:	f107 0308 	add.w	r3, r7, #8
 800972c:	4618      	mov	r0, r3
 800972e:	f7fc fe69 	bl	8006404 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009736:	e01f      	b.n	8009778 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009738:	4b2c      	ldr	r3, [pc, #176]	; (80097ec <UART_SetConfig+0xab0>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d009      	beq.n	8009758 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009744:	4b29      	ldr	r3, [pc, #164]	; (80097ec <UART_SetConfig+0xab0>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	08db      	lsrs	r3, r3, #3
 800974a:	f003 0303 	and.w	r3, r3, #3
 800974e:	4a28      	ldr	r2, [pc, #160]	; (80097f0 <UART_SetConfig+0xab4>)
 8009750:	fa22 f303 	lsr.w	r3, r2, r3
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009756:	e00f      	b.n	8009778 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009758:	4b25      	ldr	r3, [pc, #148]	; (80097f0 <UART_SetConfig+0xab4>)
 800975a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800975c:	e00c      	b.n	8009778 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800975e:	4b25      	ldr	r3, [pc, #148]	; (80097f4 <UART_SetConfig+0xab8>)
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009762:	e009      	b.n	8009778 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800976a:	e005      	b.n	8009778 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009776:	bf00      	nop
    }

    if (pclk != 0U)
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d021      	beq.n	80097c2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	4a1d      	ldr	r2, [pc, #116]	; (80097f8 <UART_SetConfig+0xabc>)
 8009784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009788:	461a      	mov	r2, r3
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	085b      	lsrs	r3, r3, #1
 8009796:	441a      	add	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b0f      	cmp	r3, #15
 80097a8:	d908      	bls.n	80097bc <UART_SetConfig+0xa80>
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b0:	d204      	bcs.n	80097bc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b8:	60da      	str	r2, [r3, #12]
 80097ba:	e002      	b.n	80097c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80097de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3738      	adds	r7, #56	; 0x38
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bdb0      	pop	{r4, r5, r7, pc}
 80097ea:	bf00      	nop
 80097ec:	58024400 	.word	0x58024400
 80097f0:	03d09000 	.word	0x03d09000
 80097f4:	003d0900 	.word	0x003d0900
 80097f8:	08009f3c 	.word	0x08009f3c

080097fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	430a      	orrs	r2, r1
 8009846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00a      	beq.n	800986a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	f003 0310 	and.w	r3, r3, #16
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	f003 0320 	and.w	r3, r3, #32
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01a      	beq.n	8009912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098fa:	d10a      	bne.n	8009912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	605a      	str	r2, [r3, #4]
  }
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af02      	add	r7, sp, #8
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009950:	f7f7 ff8e 	bl	8001870 <HAL_GetTick>
 8009954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b08      	cmp	r3, #8
 8009962:	d10e      	bne.n	8009982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f82f 	bl	80099d6 <UART_WaitOnFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e025      	b.n	80099ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0304 	and.w	r3, r3, #4
 800998c:	2b04      	cmp	r3, #4
 800998e:	d10e      	bne.n	80099ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f819 	bl	80099d6 <UART_WaitOnFlagUntilTimeout>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e00f      	b.n	80099ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	603b      	str	r3, [r7, #0]
 80099e2:	4613      	mov	r3, r2
 80099e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e6:	e062      	b.n	8009aae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d05e      	beq.n	8009aae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099f0:	f7f7 ff3e 	bl	8001870 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d302      	bcc.n	8009a06 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d11d      	bne.n	8009a42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 0201 	bic.w	r2, r2, #1
 8009a24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2220      	movs	r2, #32
 8009a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e045      	b.n	8009ace <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d02e      	beq.n	8009aae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a5e:	d126      	bne.n	8009aae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e00f      	b.n	8009ace <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69da      	ldr	r2, [r3, #28]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	bf0c      	ite	eq
 8009abe:	2301      	moveq	r3, #1
 8009ac0:	2300      	movne	r3, #0
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d08d      	beq.n	80099e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009aee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6899      	ldr	r1, [r3, #8]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <UART_EndRxTransfer+0x60>)
 8009afc:	400b      	ands	r3, r1
 8009afe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d107      	bne.n	8009b18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 0210 	bic.w	r2, r2, #16
 8009b16:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	effffffe 	.word	0xeffffffe

08009b3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff f8d8 	bl	8008d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b7e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7f7 f900 	bl	8000d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e056      	b.n	8009c62 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7f7 fac8 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2224      	movs	r2, #36	; 0x24
 8009bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0201 	bic.w	r2, r2, #1
 8009be2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff f8a9 	bl	8008d3c <UART_SetConfig>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d101      	bne.n	8009bf4 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e036      	b.n	8009c62 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff fdfd 	bl	80097fc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c10:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	055b      	lsls	r3, r3, #21
 8009c2a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	041b      	lsls	r3, r3, #16
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <HAL_RS485Ex_Init+0xd0>)
 8009c3e:	4013      	ands	r3, r2
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	6812      	ldr	r2, [r2, #0]
 8009c44:	6979      	ldr	r1, [r7, #20]
 8009c46:	430b      	orrs	r3, r1
 8009c48:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f042 0201 	orr.w	r2, r2, #1
 8009c58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7ff fe70 	bl	8009940 <UART_CheckIdleState>
 8009c60:	4603      	mov	r3, r0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	fc00ffff 	.word	0xfc00ffff

08009c70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d101      	bne.n	8009cc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e027      	b.n	8009d12 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2224      	movs	r2, #36	; 0x24
 8009cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 0201 	bic.w	r2, r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009cf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e02d      	b.n	8009d92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2224      	movs	r2, #36	; 0x24
 8009d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f022 0201 	bic.w	r2, r2, #1
 8009d5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f850 	bl	8009e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e02d      	b.n	8009e0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2224      	movs	r2, #36	; 0x24
 8009dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0201 	bic.w	r2, r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f812 	bl	8009e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d108      	bne.n	8009e3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e38:	e031      	b.n	8009e9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e3a:	2310      	movs	r3, #16
 8009e3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e3e:	2310      	movs	r3, #16
 8009e40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	0e5b      	lsrs	r3, r3, #25
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 0307 	and.w	r3, r3, #7
 8009e50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	0f5b      	lsrs	r3, r3, #29
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	7b3a      	ldrb	r2, [r7, #12]
 8009e66:	4911      	ldr	r1, [pc, #68]	; (8009eac <UARTEx_SetNbDataToProcess+0x94>)
 8009e68:	5c8a      	ldrb	r2, [r1, r2]
 8009e6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e6e:	7b3a      	ldrb	r2, [r7, #12]
 8009e70:	490f      	ldr	r1, [pc, #60]	; (8009eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8009e72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	7b7a      	ldrb	r2, [r7, #13]
 8009e84:	4909      	ldr	r1, [pc, #36]	; (8009eac <UARTEx_SetNbDataToProcess+0x94>)
 8009e86:	5c8a      	ldrb	r2, [r1, r2]
 8009e88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e8c:	7b7a      	ldrb	r2, [r7, #13]
 8009e8e:	4908      	ldr	r1, [pc, #32]	; (8009eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8009e90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e9e:	bf00      	nop
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	08009f54 	.word	0x08009f54
 8009eb0:	08009f5c 	.word	0x08009f5c

08009eb4 <__libc_init_array>:
 8009eb4:	b570      	push	{r4, r5, r6, lr}
 8009eb6:	4d0d      	ldr	r5, [pc, #52]	; (8009eec <__libc_init_array+0x38>)
 8009eb8:	4c0d      	ldr	r4, [pc, #52]	; (8009ef0 <__libc_init_array+0x3c>)
 8009eba:	1b64      	subs	r4, r4, r5
 8009ebc:	10a4      	asrs	r4, r4, #2
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	42a6      	cmp	r6, r4
 8009ec2:	d109      	bne.n	8009ed8 <__libc_init_array+0x24>
 8009ec4:	4d0b      	ldr	r5, [pc, #44]	; (8009ef4 <__libc_init_array+0x40>)
 8009ec6:	4c0c      	ldr	r4, [pc, #48]	; (8009ef8 <__libc_init_array+0x44>)
 8009ec8:	f000 f820 	bl	8009f0c <_init>
 8009ecc:	1b64      	subs	r4, r4, r5
 8009ece:	10a4      	asrs	r4, r4, #2
 8009ed0:	2600      	movs	r6, #0
 8009ed2:	42a6      	cmp	r6, r4
 8009ed4:	d105      	bne.n	8009ee2 <__libc_init_array+0x2e>
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009edc:	4798      	blx	r3
 8009ede:	3601      	adds	r6, #1
 8009ee0:	e7ee      	b.n	8009ec0 <__libc_init_array+0xc>
 8009ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee6:	4798      	blx	r3
 8009ee8:	3601      	adds	r6, #1
 8009eea:	e7f2      	b.n	8009ed2 <__libc_init_array+0x1e>
 8009eec:	08009f6c 	.word	0x08009f6c
 8009ef0:	08009f6c 	.word	0x08009f6c
 8009ef4:	08009f6c 	.word	0x08009f6c
 8009ef8:	08009f70 	.word	0x08009f70

08009efc <memset>:
 8009efc:	4402      	add	r2, r0
 8009efe:	4603      	mov	r3, r0
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d100      	bne.n	8009f06 <memset+0xa>
 8009f04:	4770      	bx	lr
 8009f06:	f803 1b01 	strb.w	r1, [r3], #1
 8009f0a:	e7f9      	b.n	8009f00 <memset+0x4>

08009f0c <_init>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr

08009f18 <_fini>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr
