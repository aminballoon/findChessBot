
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  08013fb0  08013fb0  00023fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015ef4  08015ef4  00025ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08015efc  08015efc  00025efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08015f04  08015f04  00025f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000408  24000000  08015f0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011fc  24000408  08016314  00030408  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001604  08016314  00031604  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003eb17  00000000  00000000  00030436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c06  00000000  00000000  0006ef4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001748  00000000  00000000  00074b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001590  00000000  00000000  000762a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e592  00000000  00000000  00077830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023b47  00000000  00000000  000b5dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016de4b  00000000  00000000  000d9909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00247754  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007364  00000000  00000000  002477a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000408 	.word	0x24000408
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013f98 	.word	0x08013f98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400040c 	.word	0x2400040c
 80002dc:	08013f98 	.word	0x08013f98

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00d facc 	bl	800dc78 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00d fb59 	bl	800dda4 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000850:	db0b      	blt.n	800086a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <_ZN5AMT216unwarpEv+0xa0>)
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e020      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc0c      	bgt.n	800089a <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e008      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	441a      	add	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	615a      	str	r2, [r3, #20]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	ffffc001 	.word	0xffffc001

080008d4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000910:	edc7 0a00 	vstr	s1, [r7]
 8000914:	edd7 0a00 	vldr	s1, [r7]
 8000918:	ed97 0a01 	vldr	s0, [r7, #4]
 800091c:	f00f fea8 	bl	8010670 <atan2f>
 8000920:	eef0 7a40 	vmov.f32	s15, s0
 8000924:	eeb0 0a67 	vmov.f32	s0, s15
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	ed87 0a01 	vstr	s0, [r7, #4]
 8000938:	ed97 0a01 	vldr	s0, [r7, #4]
 800093c:	f00f fe9a 	bl	8010674 <sqrtf>
 8000940:	eef0 7a40 	vmov.f32	s15, s0
 8000944:	eeb0 0a67 	vmov.f32	s0, s15
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <_ZN10RobotJointC1Ev+0xd4>)
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	2002      	movs	r0, #2
 8000966:	eeb0 0a67 	vmov.f32	s0, s15
 800096a:	f000 fecd 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800096e:	eeb0 7b40 	vmov.f64	d7, d0
 8000972:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edc3 7a01 	vstr	s15, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	2003      	movs	r0, #3
 8000984:	eeb0 0a67 	vmov.f32	s0, s15
 8000988:	f000 febe 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800098c:	eeb0 7b40 	vmov.f64	d7, d0
 8000990:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	edc3 7a02 	vstr	s15, [r3, #8]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	2004      	movs	r0, #4
 80009a2:	eeb0 0a67 	vmov.f32	s0, s15
 80009a6:	f000 feaf 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80009aa:	eeb0 7b40 	vmov.f64	d7, d0
 80009ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edc3 7a03 	vstr	s15, [r3, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <_ZN10RobotJointC1Ev+0xd8>)
 8000a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <_ZN10RobotJointC1Ev+0xdc>)
 8000a14:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	3b03126f 	.word	0x3b03126f
 8000a28:	3dcccccd 	.word	0x3dcccccd
 8000a2c:	3a83126f 	.word	0x3a83126f

08000a30 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

}
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	; 0x40
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8000a50:	ed87 0a08 	vstr	s0, [r7, #32]
 8000a54:	edc7 0a07 	vstr	s1, [r7, #28]
 8000a58:	ed87 1a06 	vstr	s2, [r7, #24]
 8000a5c:	edc7 1a05 	vstr	s3, [r7, #20]
 8000a60:	ed87 2a04 	vstr	s4, [r7, #16]
 8000a64:	edc7 2a03 	vstr	s5, [r7, #12]
 8000a68:	ed87 3a02 	vstr	s6, [r7, #8]
 8000a6c:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000a70:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a74:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a80:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000a84:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a88:	eeb0 0b46 	vmov.f64	d0, d6
 8000a8c:	f00f fda8 	bl	80105e0 <sin>
 8000a90:	eeb0 7b40 	vmov.f64	d7, d0
 8000a94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000a9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aac:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ab0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ab4:	eeb0 0b46 	vmov.f64	d0, d6
 8000ab8:	f00f fd4a 	bl	8010550 <cos>
 8000abc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad0:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ad4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ad8:	eeb0 0b46 	vmov.f64	d0, d6
 8000adc:	f00f fd80 	bl	80105e0 <sin>
 8000ae0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ae4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ae8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8000af0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000af8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000afc:	eeb0 0b46 	vmov.f64	d0, d6
 8000b00:	f00f fd6e 	bl	80105e0 <sin>
 8000b04:	eeb0 7b40 	vmov.f64	d7, d0
 8000b08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b0c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000b10:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b1c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b20:	eeb0 0b46 	vmov.f64	d0, d6
 8000b24:	f00f fd14 	bl	8010550 <cos>
 8000b28:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000b34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b38:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b40:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000b44:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b54:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b64:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000b68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b70:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b82:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000b90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b94:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ba0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000c94 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bb0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc4:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000bc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bcc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bdc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000be0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000be4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000be8:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000c94 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000bec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000bf0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000bf4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000bf8:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c08:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000c0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c10:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c14:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c18:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000c20:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000c2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c3e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c4e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c52:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c6a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000c78:	bf00      	nop
 8000c7a:	3740      	adds	r7, #64	; 0x40
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	00000000 	.word	0x00000000
 8000c84:	408f4000 	.word	0x408f4000
 8000c88:	439d8000 	.word	0x439d8000
 8000c8c:	43bfa000 	.word	0x43bfa000
 8000c90:	447a0000 	.word	0x447a0000
 8000c94:	41540000 	.word	0x41540000
 8000c98:	43b90000 	.word	0x43b90000

08000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b091      	sub	sp, #68	; 0x44
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	61f8      	str	r0, [r7, #28]
 8000ca4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ca8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000cac:	ed87 1a04 	vstr	s2, [r7, #16]
 8000cb0:	edc7 1a03 	vstr	s3, [r7, #12]
 8000cb4:	ed87 2a02 	vstr	s4, [r7, #8]
 8000cb8:	edc7 2a01 	vstr	s5, [r7, #4]
 8000cbc:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000cd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000ce2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ce6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000cf6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d0a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000d0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d12:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000d16:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000d22:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000d36:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000d42:	ed97 7a00 	vldr	s14, [r7]
 8000d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d66:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000d8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d92:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d96:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000db2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000db6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000dbe:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000dc2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dca:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dda:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000dde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000de2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000de6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000dee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000df2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dfe:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000e02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000e14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e1c:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000e20:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e30:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e38:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000e3c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e40:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e44:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e48:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e50:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000e54:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e58:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000e5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000e6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e76:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000e7a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e86:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e92:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000e96:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e9e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ea2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ea6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000eaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000eae:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eba:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000ebe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ec2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ec6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000ed8:	bf00      	nop
 8000eda:	3744      	adds	r7, #68	; 0x44
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	ed2d 8b08 	vpush	{d8-d11}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f02:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f0a:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000f12:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000f1a:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f22:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f2a:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000f32:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000f4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f52:	edd7 7a00 	vldr	s15, [r7]
 8000f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edd3 6a00 	vldr	s13, [r3]
 8000f60:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 7a00 	vldr	s14, [r3]
 8000f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	2004      	movs	r0, #4
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	f000 fbb3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fa2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000faa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edd3 5a00 	vldr	s11, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fce:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fda:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fde:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edd3 6a00 	vldr	s13, [r3]
 8000ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001004:	edd7 7a03 	vldr	s15, [r7, #12]
 8001008:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	2004      	movs	r0, #4
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	f000 fb76 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800101c:	eeb0 7b40 	vmov.f64	d7, d0
 8001020:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001024:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001028:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800102c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edd3 5a00 	vldr	s11, [r3]
 800103c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001040:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001044:	edd7 7a06 	vldr	s15, [r7, #24]
 8001048:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001054:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001058:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 800105c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001060:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 800106a:	edd7 7a08 	vldr	s15, [r7, #32]
 800106e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001072:	edd7 7a03 	vldr	s15, [r7, #12]
 8001076:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	2003      	movs	r0, #3
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	f000 fb3f 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800108a:	eeb0 7b40 	vmov.f64	d7, d0
 800108e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001092:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001096:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b8:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80010bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010c0:	edd7 7a00 	vldr	s15, [r7]
 80010c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edd3 5a00 	vldr	s11, [r3]
 80010ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80010d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edd3 6a00 	vldr	s13, [r3]
 80010f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001104:	edd7 7a03 	vldr	s15, [r7, #12]
 8001108:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	2004      	movs	r0, #4
 8001114:	eeb0 0a67 	vmov.f32	s0, s15
 8001118:	f000 faf6 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800111c:	eeb0 7b40 	vmov.f64	d7, d0
 8001120:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001124:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800112c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 5a00 	vldr	s11, [r3]
 800113c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001140:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001144:	edd7 7a06 	vldr	s15, [r7, #24]
 8001148:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001154:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001158:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800115c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001160:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	edd7 7a05 	vldr	s15, [r7, #20]
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	edd7 7a07 	vldr	s15, [r7, #28]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001184:	edd7 7a03 	vldr	s15, [r7, #12]
 8001188:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	2004      	movs	r0, #4
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	f000 fab6 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800119c:	eeb0 7b40 	vmov.f64	d7, d0
 80011a0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011a4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ac:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 5a00 	vldr	s11, [r3]
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edd3 6a00 	vldr	s13, [r3]
 80011ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	2004      	movs	r0, #4
 800120a:	eeb0 0a67 	vmov.f32	s0, s15
 800120e:	f000 fa7b 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001212:	eeb0 7b40 	vmov.f64	d7, d0
 8001216:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800121a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800121e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001222:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edd3 5a00 	vldr	s11, [r3]
 8001232:	edd7 7a04 	vldr	s15, [r7, #16]
 8001236:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800123a:	edd7 7a06 	vldr	s15, [r7, #24]
 800123e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800124a:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800124e:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001252:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001256:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125a:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	edd7 7a05 	vldr	s15, [r7, #20]
 8001268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001274:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001278:	edd7 7a03 	vldr	s15, [r7, #12]
 800127c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	2004      	movs	r0, #4
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	f000 fa3c 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001290:	eeb0 7b40 	vmov.f64	d7, d0
 8001294:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001298:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800129c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012a0:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 5a00 	vldr	s11, [r3]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012bc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c8:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	2004      	movs	r0, #4
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	f000 f9fe 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800130c:	eeb0 7b40 	vmov.f64	d7, d0
 8001310:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001314:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001318:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800131c:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 5a00 	vldr	s11, [r3]
 800132c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001330:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001334:	edd7 7a06 	vldr	s15, [r7, #24]
 8001338:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001344:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001348:	ed97 7a07 	vldr	s14, [r7, #28]
 800134c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	edd7 7a05 	vldr	s15, [r7, #20]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800136a:	edd7 7a03 	vldr	s15, [r7, #12]
 800136e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	2004      	movs	r0, #4
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f000 f9c3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800138a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800138e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001392:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	edd3 5a00 	vldr	s11, [r3]
 80013a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ae:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ba:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013be:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80013c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013c6:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ca:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	2003      	movs	r0, #3
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f000 f991 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013e6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ea:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013f2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	ed93 7a00 	vldr	s14, [r3]
 80013fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001408:	ee36 6b07 	vadd.f64	d6, d6, d7
 800140c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001410:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001414:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001418:	ee28 7b07 	vmul.f64	d7, d8, d7
 800141c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	edd7 7a05 	vldr	s15, [r7, #20]
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001440:	edd7 7a03 	vldr	s15, [r7, #12]
 8001444:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	2003      	movs	r0, #3
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	f000 f958 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001458:	eeb0 7b40 	vmov.f64	d7, d0
 800145c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001460:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001464:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001468:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800146c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001470:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	2003      	movs	r0, #3
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	f000 f942 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001484:	eeb0 7b40 	vmov.f64	d7, d0
 8001488:	ee29 7b07 	vmul.f64	d7, d9, d7
 800148c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001490:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	edd7 7a04 	vldr	s15, [r7, #16]
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b2:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80014d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	2004      	movs	r0, #4
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f000 f910 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014e8:	eeb0 7b40 	vmov.f64	d7, d0
 80014ec:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80014f0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f8:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 5a00 	vldr	s11, [r3]
 8001508:	edd7 7a04 	vldr	s15, [r7, #16]
 800150c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001510:	edd7 7a06 	vldr	s15, [r7, #24]
 8001514:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001524:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001528:	ed97 7a07 	vldr	s14, [r7, #28]
 800152c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	edd3 6a00 	vldr	s13, [r3]
 800153a:	edd7 7a05 	vldr	s15, [r7, #20]
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	2004      	movs	r0, #4
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	f000 f8d3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800156a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800156e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001572:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	ed93 7a00 	vldr	s14, [r3]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 5a00 	vldr	s11, [r3]
 8001582:	edd7 7a04 	vldr	s15, [r7, #16]
 8001586:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800158a:	edd7 7a06 	vldr	s15, [r7, #24]
 800158e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800159a:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800159e:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80015a2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80015b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015bc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	2002      	movs	r0, #2
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	f000 f89c 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015d0:	eeb0 7b40 	vmov.f64	d7, d0
 80015d4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015d8:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	2003      	movs	r0, #3
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	f000 f88a 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015f4:	eeb0 7b40 	vmov.f64	d7, d0
 80015f8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001600:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	edd7 7a04 	vldr	s15, [r7, #16]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001616:	ee36 6b07 	vadd.f64	d6, d6, d7
 800161a:	edd7 7a06 	vldr	s15, [r7, #24]
 800161e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001622:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 8001626:	edd7 7a03 	vldr	s15, [r7, #12]
 800162a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	2003      	movs	r0, #3
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f000 f865 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800163e:	eeb0 7b40 	vmov.f64	d7, d0
 8001642:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001646:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800164a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	edd7 7a04 	vldr	s15, [r7, #16]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001660:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001664:	edd7 7a05 	vldr	s15, [r7, #20]
 8001668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800166c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001670:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001674:	ed97 7a07 	vldr	s14, [r7, #28]
 8001678:	edd7 7a02 	vldr	s15, [r7, #8]
 800167c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 6a00 	vldr	s13, [r3]
 8001686:	edd7 7a05 	vldr	s15, [r7, #20]
 800168a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001696:	edd7 7a03 	vldr	s15, [r7, #12]
 800169a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	2004      	movs	r0, #4
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f000 f82d 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016ae:	eeb0 7b40 	vmov.f64	d7, d0
 80016b2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80016b6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80016ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016be:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edd3 5a00 	vldr	s11, [r3]
 80016ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016ea:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80016ee:	ee38 7b47 	vsub.f64	d7, d8, d7
 80016f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	ecbd 8b08 	vpop	{d8-d11}
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001712:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001714:	edd7 7a01 	vldr	s15, [r7, #4]
 8001718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	ee06 3a90 	vmov	s13, r3
 8001722:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001726:	eeb0 1b46 	vmov.f64	d1, d6
 800172a:	eeb0 0b47 	vmov.f64	d0, d7
 800172e:	f00e fc4b 	bl	800ffc8 <pow>
 8001732:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001736:	eeb0 0b47 	vmov.f64	d0, d7
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
 800174a:	edd7 7a01 	vldr	s15, [r7, #4]
 800174e:	fefb 7a67 	vrintm.f32	s15, s15
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	fef8 7a67 	vrinta.f32	s15, s15
 8001772:	eeb0 0a67 	vmov.f32	s0, s15
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	22b4      	movs	r2, #180	; 0xb4
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	761a      	strb	r2, [r3, #24]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	22ef      	movs	r2, #239	; 0xef
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
}
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f00b f825 	bl	800c858 <HAL_TIM_PWM_Start>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d13f      	bne.n	80018aa <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691c      	ldr	r4, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	3301      	adds	r3, #1
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001844:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	f7ff ff86 	bl	8001760 <_ZSt5roundf>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	3301      	adds	r3, #1
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001872:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	f7ff ff5f 	bl	8001740 <_ZSt5floorf>
 8001882:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	9600      	str	r6, [sp, #0]
 8001892:	462b      	mov	r3, r5
 8001894:	4622      	mov	r2, r4
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9cf 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 800189e:	4602      	mov	r2, r0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80018a8:	e176      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d13f      	bne.n	8001932 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691c      	ldr	r4, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	3301      	adds	r3, #1
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff ff42 	bl	8001760 <_ZSt5roundf>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	3301      	adds	r3, #1
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fa:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f7ff ff1b 	bl	8001740 <_ZSt5floorf>
 800190a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 800190e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001912:	ee17 3a90 	vmov	r3, s15
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	9600      	str	r6, [sp, #0]
 800191a:	462b      	mov	r3, r5
 800191c:	4622      	mov	r2, r4
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f98b 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001926:	4602      	mov	r2, r0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001930:	e132      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b08      	cmp	r3, #8
 8001938:	d13f      	bne.n	80019ba <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691c      	ldr	r4, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	3301      	adds	r3, #1
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001954:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	f7ff fefe 	bl	8001760 <_ZSt5roundf>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	3301      	adds	r3, #1
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	f7ff fed7 	bl	8001740 <_ZSt5floorf>
 8001992:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	9600      	str	r6, [sp, #0]
 80019a2:	462b      	mov	r3, r5
 80019a4:	4622      	mov	r2, r4
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f947 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 80019ae:	4602      	mov	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019b8:	e0ee      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d13f      	bne.n	8001a42 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691c      	ldr	r4, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	3301      	adds	r3, #1
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019dc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	f7ff feba 	bl	8001760 <_ZSt5roundf>
 80019ec:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	3301      	adds	r3, #1
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	f7ff fe93 	bl	8001740 <_ZSt5floorf>
 8001a1a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	9600      	str	r6, [sp, #0]
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f903 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001a36:	4602      	mov	r2, r0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a40:	e0aa      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d144      	bne.n	8001ad4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691c      	ldr	r4, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a64:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	f7ff fe76 	bl	8001760 <_ZSt5roundf>
 8001a74:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	3301      	adds	r3, #1
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f7ff fe4f 	bl	8001740 <_ZSt5floorf>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	9600      	str	r6, [sp, #0]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8bf 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ac8:	e066      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001aca:	bf00      	nop
 8001acc:	3d4ccccd 	.word	0x3d4ccccd
 8001ad0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b14      	cmp	r3, #20
 8001ada:	d13f      	bne.n	8001b5c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691c      	ldr	r4, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f7ff fe2d 	bl	8001760 <_ZSt5roundf>
 8001b06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0e:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	f7ff fe06 	bl	8001740 <_ZSt5floorf>
 8001b34:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3c:	ee17 3a90 	vmov	r3, s15
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	9600      	str	r6, [sp, #0]
 8001b44:	462b      	mov	r3, r5
 8001b46:	4622      	mov	r2, r4
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f876 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001b50:	4602      	mov	r2, r0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b5a:	e01d      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2200      	movs	r2, #0
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba0 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	761a      	strb	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	765a      	strb	r2, [r3, #25]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e5b      	ldrb	r3, [r3, #25]
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe09 	bl	8001818 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c06:	e000      	b.n	8001c0a <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001c08:	bf00      	nop
}
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e1b      	ldrb	r3, [r3, #24]
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fdf3 	bl	8001818 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c32:	e000      	b.n	8001c36 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001c34:	bf00      	nop
}
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	69f9      	ldr	r1, [r7, #28]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	1a8a      	subs	r2, r1, r2
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1acb      	subs	r3, r1, r3
 8001c60:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4413      	add	r3, r2
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c82:	eef0 7ae7 	vabs.f32	s15, s15
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001cac:	619a      	str	r2, [r3, #24]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cb4:	61da      	str	r2, [r3, #28]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001cba:	621a      	str	r2, [r3, #32]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	22c7      	movs	r2, #199	; 0xc7
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ce0:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001ce6:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001ce8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d14 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f82f 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	60da      	str	r2, [r3, #12]
}
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	41a00000 	.word	0x41a00000
 8001d0c:	469c4000 	.word	0x469c4000
 8001d10:	43480000 	.word	0x43480000
 8001d14:	00000000 	.word	0x00000000

08001d18 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
}
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f00a fd89 	bl	800c858 <HAL_TIM_PWM_Start>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	ed2d 8b02 	vpush	{d8}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	f7ff ff80 	bl	8001c74 <_ZSt4fabsf>
 8001d74:	eeb0 7a40 	vmov.f32	s14, s0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e01b      	b.n	8001dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da0:	eeb0 0a67 	vmov.f32	s0, s15
 8001da4:	f7ff ff66 	bl	8001c74 <_ZSt4fabsf>
 8001da8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	edd3 7a06 	vldr	s15, [r3, #24]
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	bfac      	ite	ge
 8001dbc:	2301      	movge	r3, #1
 8001dbe:	2300      	movlt	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e001      	b.n	8001dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dd8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002074 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	f2c0 80db 	blt.w	8001f9e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	4619      	mov	r1, r3
 8001df6:	f007 ff27 	bl	8009c48 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	3301      	adds	r3, #1
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002078 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f7ff fc9a 	bl	8001760 <_ZSt5roundf>
 8001e2c:	eef0 7a40 	vmov.f32	s15, s0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	ee17 2a90 	vmov	r2, s15
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fa5b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001e6e:	e1e0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d113      	bne.n	8001ea0 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fa43 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e98:	ee17 2a90 	vmov	r2, s15
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e9e:	e1c8      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d113      	bne.n	8001ed0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fa2b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eba:	eeb0 7b40 	vmov.f64	d7, d0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ec8:	ee17 2a90 	vmov	r2, s15
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ece:	e1b0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d113      	bne.n	8001f00 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fa13 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eea:	eeb0 7b40 	vmov.f64	d7, d0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ef8:	ee17 2a90 	vmov	r2, s15
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001efe:	e198      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d113      	bne.n	8001f30 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f9fb 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f28:	ee17 2a90 	vmov	r2, s15
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f2e:	e180      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b14      	cmp	r3, #20
 8001f36:	d113      	bne.n	8001f60 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f9e3 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f58:	ee17 2a90 	vmov	r2, s15
 8001f5c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f5e:	e168      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f9c:	e149      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fa4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800207c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	f200 80e5 	bhi.w	800217e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6898      	ldr	r0, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f007 fe41 	bl	8009c48 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	3301      	adds	r3, #1
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001fd8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fdc:	f7ff fe4a 	bl	8001c74 <_ZSt4fabsf>
 8001fe0:	eef0 7a40 	vmov.f32	s15, s0
 8001fe4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001fe8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002078 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffc:	f7ff fbb0 	bl	8001760 <_ZSt5roundf>
 8002000:	eef0 7a40 	vmov.f32	s15, s0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200e:	ee17 2a90 	vmov	r2, s15
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d113      	bne.n	8002044 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f971 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800202e:	eeb0 7b40 	vmov.f64	d7, d0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800203c:	ee17 2a90 	vmov	r2, s15
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002042:	e0f6      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d119      	bne.n	8002080 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f959 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800205e:	eeb0 7b40 	vmov.f64	d7, d0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800206c:	ee17 2a90 	vmov	r2, s15
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002072:	e0de      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8002074:	3a83126f 	.word	0x3a83126f
 8002078:	4d64e1c0 	.word	0x4d64e1c0
 800207c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d113      	bne.n	80020b0 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f93b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800209a:	eeb0 7b40 	vmov.f64	d7, d0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a8:	ee17 2a90 	vmov	r2, s15
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020ae:	e0c0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d113      	bne.n	80020e0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f923 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020ca:	eeb0 7b40 	vmov.f64	d7, d0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020d8:	ee17 2a90 	vmov	r2, s15
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020de:	e0a8      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d113      	bne.n	8002110 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f90b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020fa:	eeb0 7b40 	vmov.f64	d7, d0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002108:	ee17 2a90 	vmov	r2, s15
 800210c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800210e:	e090      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b14      	cmp	r3, #20
 8002116:	d113      	bne.n	8002140 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f8f3 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800212a:	eeb0 7b40 	vmov.f64	d7, d0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002138:	ee17 2a90 	vmov	r2, s15
 800213c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800213e:	e078      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217c:	e059      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2200      	movs	r2, #0
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002190:	e04f      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b04      	cmp	r3, #4
 8002198:	d105      	bne.n	80021a6 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021a4:	e045      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d105      	bne.n	80021ba <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021b8:	e03b      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d105      	bne.n	80021ce <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021cc:	e031      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d105      	bne.n	80021e2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
}
 80021e0:	e027      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b14      	cmp	r3, #20
 80021e8:	d105      	bne.n	80021f6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021f4:	e01d      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	ecbd 8b02 	vpop	{d8}
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop

08002240 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 800224c:	ed97 0a00 	vldr	s0, [r7]
 8002250:	f7ff fd10 	bl	8001c74 <_ZSt4fabsf>
 8002254:	eef0 7a40 	vmov.f32	s15, s0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800227a:	eeb0 0b47 	vmov.f64	d0, d7
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffe5 	bl	8002266 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800229c:	eeb0 7b40 	vmov.f64	d7, d0
 80022a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	0000      	movs	r0, r0
 80022b4:	0000      	movs	r0, r0
	...

080022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	ed93 7a07 	vldr	s14, [r3, #28]
 80022ca:	edd7 7a00 	vldr	s15, [r7]
 80022ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edd3 7a08 	vldr	s15, [r3, #32]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80022ea:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002308 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80022ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80022f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fd28 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	704a95d1 	.word	0x704a95d1
 800230c:	40b88b2f 	.word	0x40b88b2f

08002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002322:	eeb0 0b47 	vmov.f64	d0, d7
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_CRC_Init+0x54>)
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <MX_CRC_Init+0x58>)
 8002338:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_CRC_Init+0x54>)
 800233c:	2201      	movs	r2, #1
 800233e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_CRC_Init+0x54>)
 8002342:	2201      	movs	r2, #1
 8002344:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_CRC_Init+0x54>)
 8002348:	f248 0205 	movw	r2, #32773	; 0x8005
 800234c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <MX_CRC_Init+0x54>)
 8002350:	2208      	movs	r2, #8
 8002352:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_CRC_Init+0x54>)
 8002356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_CRC_Init+0x54>)
 800235e:	2220      	movs	r2, #32
 8002360:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_CRC_Init+0x54>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_CRC_Init+0x54>)
 800236a:	2201      	movs	r2, #1
 800236c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_CRC_Init+0x54>)
 8002370:	f004 fa82 	bl	8006878 <HAL_CRC_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800237a:	f002 f9a3 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	24000be0 	.word	0x24000be0
 8002388:	58024c00 	.word	0x58024c00

0800238c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_CRC_MspInit+0x3c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10e      	bne.n	80023bc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a4:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	58024c00 	.word	0x58024c00
 80023cc:	58024400 	.word	0x58024400

080023d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <MX_DMA_Init+0x9c>)
 80023d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023dc:	4a23      	ldr	r2, [pc, #140]	; (800246c <MX_DMA_Init+0x9c>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <MX_DMA_Init+0x9c>)
 80023e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	200b      	movs	r0, #11
 80023fa:	f004 f9fc 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023fe:	200b      	movs	r0, #11
 8002400:	f004 fa13 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	200c      	movs	r0, #12
 800240a:	f004 f9f4 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800240e:	200c      	movs	r0, #12
 8002410:	f004 fa0b 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	200d      	movs	r0, #13
 800241a:	f004 f9ec 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800241e:	200d      	movs	r0, #13
 8002420:	f004 fa03 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	200e      	movs	r0, #14
 800242a:	f004 f9e4 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800242e:	200e      	movs	r0, #14
 8002430:	f004 f9fb 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	200f      	movs	r0, #15
 800243a:	f004 f9dc 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800243e:	200f      	movs	r0, #15
 8002440:	f004 f9f3 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	2010      	movs	r0, #16
 800244a:	f004 f9d4 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800244e:	2010      	movs	r0, #16
 8002450:	f004 f9eb 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	2011      	movs	r0, #17
 800245a:	f004 f9cc 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800245e:	2011      	movs	r0, #17
 8002460:	f004 f9e3 	bl	800682a <HAL_NVIC_EnableIRQ>

}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400

08002470 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002486:	4b87      	ldr	r3, [pc, #540]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <MX_GPIO_Init+0x234>)
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002496:	4b83      	ldr	r3, [pc, #524]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a4:	4b7f      	ldr	r3, [pc, #508]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024aa:	4a7e      	ldr	r2, [pc, #504]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b4:	4b7b      	ldr	r3, [pc, #492]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024c2:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	4a76      	ldr	r2, [pc, #472]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d2:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e6:	4a6f      	ldr	r2, [pc, #444]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f0:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002504:	4a67      	ldr	r2, [pc, #412]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800251c:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <MX_GPIO_Init+0x234>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <MX_GPIO_Init+0x234>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800253a:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <MX_GPIO_Init+0x234>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254a:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <MX_GPIO_Init+0x234>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002558:	2200      	movs	r2, #0
 800255a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800255e:	4852      	ldr	r0, [pc, #328]	; (80026a8 <MX_GPIO_Init+0x238>)
 8002560:	f007 fb72 	bl	8009c48 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002564:	2200      	movs	r2, #0
 8002566:	f24c 0102 	movw	r1, #49154	; 0xc002
 800256a:	4850      	ldr	r0, [pc, #320]	; (80026ac <MX_GPIO_Init+0x23c>)
 800256c:	f007 fb6c 	bl	8009c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002576:	484e      	ldr	r0, [pc, #312]	; (80026b0 <MX_GPIO_Init+0x240>)
 8002578:	f007 fb66 	bl	8009c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002582:	484c      	ldr	r0, [pc, #304]	; (80026b4 <MX_GPIO_Init+0x244>)
 8002584:	f007 fb60 	bl	8009c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258e:	484a      	ldr	r0, [pc, #296]	; (80026b8 <MX_GPIO_Init+0x248>)
 8002590:	f007 fb5a 	bl	8009c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002594:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002598:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <MX_GPIO_Init+0x238>)
 80025ae:	f007 f99b 	bl	80098e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80025b2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80025b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	4838      	ldr	r0, [pc, #224]	; (80026ac <MX_GPIO_Init+0x23c>)
 80025ca:	f007 f98d 	bl	80098e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80025ce:	f24c 0302 	movw	r3, #49154	; 0xc002
 80025d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	4831      	ldr	r0, [pc, #196]	; (80026ac <MX_GPIO_Init+0x23c>)
 80025e8:	f007 f97e 	bl	80098e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80025ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	4619      	mov	r1, r3
 8002604:	482a      	ldr	r0, [pc, #168]	; (80026b0 <MX_GPIO_Init+0x240>)
 8002606:	f007 f96f 	bl	80098e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800260a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	2301      	movs	r3, #1
 8002612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4619      	mov	r1, r3
 8002622:	4824      	ldr	r0, [pc, #144]	; (80026b4 <MX_GPIO_Init+0x244>)
 8002624:	f007 f960 	bl	80098e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	481d      	ldr	r0, [pc, #116]	; (80026b8 <MX_GPIO_Init+0x248>)
 8002642:	f007 f951 	bl	80098e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8002646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800264c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	4817      	ldr	r0, [pc, #92]	; (80026bc <MX_GPIO_Init+0x24c>)
 800265e:	f007 f943 	bl	80098e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002666:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800266a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	480c      	ldr	r0, [pc, #48]	; (80026a8 <MX_GPIO_Init+0x238>)
 8002678:	f007 f936 	bl	80098e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	2100      	movs	r1, #0
 8002680:	2017      	movs	r0, #23
 8002682:	f004 f8b8 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002686:	2017      	movs	r0, #23
 8002688:	f004 f8cf 	bl	800682a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	2028      	movs	r0, #40	; 0x28
 8002692:	f004 f8b0 	bl	80067f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002696:	2028      	movs	r0, #40	; 0x28
 8002698:	f004 f8c7 	bl	800682a <HAL_NVIC_EnableIRQ>

}
 800269c:	bf00      	nop
 800269e:	3730      	adds	r7, #48	; 0x30
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	58024400 	.word	0x58024400
 80026a8:	58020400 	.word	0x58020400
 80026ac:	58021000 	.word	0x58021000
 80026b0:	58020c00 	.word	0x58020c00
 80026b4:	58020800 	.word	0x58020800
 80026b8:	58020000 	.word	0x58020000
 80026bc:	58021800 	.word	0x58021800

080026c0 <_Z12Insert_queueii>:

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    if (bot == LIMIT - 1)
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <_Z12Insert_queueii+0x6c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b13      	cmp	r3, #19
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <_Z12Insert_queueii+0x20>
    {
        return false;
 80026dc:	2300      	movs	r3, #0
 80026de:	e01e      	b.n	800271e <_Z12Insert_queueii+0x5e>
    }
    else
    {
        if (first == - 1)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_Z12Insert_queueii+0x70>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	bf0c      	ite	eq
 80026ea:	2301      	moveq	r3, #1
 80026ec:	2300      	movne	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <_Z12Insert_queueii+0x3a>
        {
            first = 0;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <_Z12Insert_queueii+0x70>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
        }
		bot++;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <_Z12Insert_queueii+0x6c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <_Z12Insert_queueii+0x6c>)
 8002702:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <_Z12Insert_queueii+0x6c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	490a      	ldr	r1, [pc, #40]	; (8002734 <_Z12Insert_queueii+0x74>)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <_Z12Insert_queueii+0x6c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4908      	ldr	r1, [pc, #32]	; (8002738 <_Z12Insert_queueii+0x78>)
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 800271c:	2301      	movs	r3, #1
    }
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	24000004 	.word	0x24000004
 8002730:	24000000 	.word	0x24000000
 8002734:	24000b04 	.word	0x24000b04
 8002738:	24000b54 	.word	0x24000b54

0800273c <_Z10Call_queuev>:

int Call_queue()
    {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
    int output;
    if (first == - 1 || first > bot)
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <_Z10Call_queuev+0x94>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d005      	beq.n	8002758 <_Z10Call_queuev+0x1c>
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <_Z10Call_queuev+0x94>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <_Z10Call_queuev+0x98>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	dd01      	ble.n	800275c <_Z10Call_queuev+0x20>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <_Z10Call_queuev+0x22>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d026      	beq.n	80027b0 <_Z10Call_queuev+0x74>
    {
        printf("Don't have stack in queue \n");
 8002762:	481d      	ldr	r0, [pc, #116]	; (80027d8 <_Z10Call_queuev+0x9c>)
 8002764:	f00f fc14 	bl	8011f90 <puts>
        for (int num = 0; num <= bot+1; num++)
 8002768:	2300      	movs	r3, #0
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <_Z10Call_queuev+0x98>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	bfd4      	ite	le
 8002778:	2301      	movle	r3, #1
 800277a:	2300      	movgt	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <_Z10Call_queuev+0x58>
        {
        	queue[num] = 0;
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <_Z10Call_queuev+0xa0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2100      	movs	r1, #0
 8002788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int num = 0; num <= bot+1; num++)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	e7eb      	b.n	800276c <_Z10Call_queuev+0x30>
        }
        first = -1;
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <_Z10Call_queuev+0x94>)
 8002796:	f04f 32ff 	mov.w	r2, #4294967295
 800279a:	601a      	str	r2, [r3, #0]
        bot = -1;
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <_Z10Call_queuev+0x98>)
 800279e:	f04f 32ff 	mov.w	r2, #4294967295
 80027a2:	601a      	str	r2, [r3, #0]
        printf("Clear queue \n");
 80027a4:	480e      	ldr	r0, [pc, #56]	; (80027e0 <_Z10Call_queuev+0xa4>)
 80027a6:	f00f fbf3 	bl	8011f90 <puts>
        output = 255;
 80027aa:	23ff      	movs	r3, #255	; 0xff
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	e00a      	b.n	80027c6 <_Z10Call_queuev+0x8a>
    }
    else
    {
    	output = queue[first];
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <_Z10Call_queuev+0x94>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <_Z10Call_queuev+0xa0>)
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	607b      	str	r3, [r7, #4]
        first++;
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <_Z10Call_queuev+0x94>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <_Z10Call_queuev+0x94>)
 80027c4:	6013      	str	r3, [r2, #0]
    }
    return output;
 80027c6:	687b      	ldr	r3, [r7, #4]

}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	24000000 	.word	0x24000000
 80027d4:	24000004 	.word	0x24000004
 80027d8:	08013fb0 	.word	0x08013fb0
 80027dc:	24000b04 	.word	0x24000b04
 80027e0:	08013fcc 	.word	0x08013fcc

080027e4 <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4)/1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b092      	sub	sp, #72	; 0x48
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80027ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80027f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80027f6:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x/1000.0;
 80027fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80027fe:	eddf 6a76 	vldr	s13, [pc, #472]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002806:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y/1000.0;
 800280a:	ed97 7a02 	vldr	s14, [r7, #8]
 800280e:	eddf 6a72 	vldr	s13, [pc, #456]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002816:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z/1000.0;
 800281a:	ed97 7a01 	vldr	s14, [r7, #4]
 800281e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002826:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw/1000.0;
 800282a:	ed97 7a00 	vldr	s14, [r7]
 800282e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002836:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x*x)+(y*y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 800283a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800283e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002842:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002846:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 8002850:	edd3 6a00 	vldr	s13, [r3]
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 8002864:	edd3 6a00 	vldr	s13, [r3]
 8002868:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002872:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002876:	4b59      	ldr	r3, [pc, #356]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800288e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1-(C3*C3));
 8002892:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002896:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800289a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800289e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	f7fe f842 	bl	800092e <_ZSt4sqrtf>
 80028aa:	eef0 7a40 	vmov.f32	s15, s0
 80028ae:	eef1 7a67 	vneg.f32	s15, s15
 80028b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3,C3);
 80028b6:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80028ba:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80028be:	f7fe f822 	bl	8000906 <_ZSt5atan2ff>
 80028c2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3*S3;
 80028c6:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3*C3);
 80028d8:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3*x) + (L123C3*y);
 80028f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028f8:	eeb1 7a67 	vneg.f32	s14, s15
 80028fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002904:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002908:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800290c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002914:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3*y) + (L123C3*x);
 8002918:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800291c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002924:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002928:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800292c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1,C1);
 8002938:	edd7 0a07 	vldr	s1, [r7, #28]
 800293c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002940:	f7fd ffe1 	bl	8000906 <_ZSt5atan2ff>
 8002944:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002948:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800294c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002954:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295c:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <_Z6fcb_IKffff+0x200>)
 8002962:	ed93 7a00 	vldr	s14, [r3]
 8002966:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800296a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <_Z6fcb_IKffff+0x204>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <_Z6fcb_IKffff+0x208>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002982:	edc7 7a04 	vstr	s15, [r7, #16]
//	Planning_q1 = q1;
//	Planning_q2 = q2;
//	Planning_q3 = q3;
//	Planning_q4 = q4;

	Planning_q1 = q1*1000.0;
 8002986:	edd7 7a06 	vldr	s15, [r7, #24]
 800298a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <_Z6fcb_IKffff+0x20c>)
 8002994:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2*1000.0;
 8002998:	edd7 7a04 	vldr	s15, [r7, #16]
 800299c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 80029a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_Z6fcb_IKffff+0x210>)
 80029a6:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3*1000.0;
 80029aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <_Z6fcb_IKffff+0x214>)
 80029b8:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4*1000.0;
 80029bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029c0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 80029c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <_Z6fcb_IKffff+0x218>)
 80029ca:	edc3 7a00 	vstr	s15, [r3]

}
 80029ce:	bf00      	nop
 80029d0:	3748      	adds	r7, #72	; 0x48
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	447a0000 	.word	0x447a0000
 80029dc:	24000210 	.word	0x24000210
 80029e0:	2400020c 	.word	0x2400020c
 80029e4:	2400021c 	.word	0x2400021c
 80029e8:	24000218 	.word	0x24000218
 80029ec:	24000214 	.word	0x24000214
 80029f0:	24000bb8 	.word	0x24000bb8
 80029f4:	24000bbc 	.word	0x24000bbc
 80029f8:	24000bc0 	.word	0x24000bc0
 80029fc:	24000bc4 	.word	0x24000bc4

08002a00 <_Z20Update_State_Machinev>:
float offset_x = 430.0;
float offset_y = 0.59371 ;
int indexy;
float pos_x,pos_y;
void Update_State_Machine()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	ed2d 8b02 	vpush	{d8}
 8002a06:	af00      	add	r7, sp, #0

    switch (control_state)
 8002a08:	4bad      	ldr	r3, [pc, #692]	; (8002cc0 <_Z20Update_State_Machinev+0x2c0>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b29      	subs	r3, #41	; 0x29
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	f200 828a 	bhi.w	8002f2a <_Z20Update_State_Machinev+0x52a>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <_Z20Update_State_Machinev+0x1c>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a5d 	.word	0x08002a5d
 8002a20:	08002c15 	.word	0x08002c15
 8002a24:	08002c65 	.word	0x08002c65
 8002a28:	08002f2b 	.word	0x08002f2b
 8002a2c:	08002f2b 	.word	0x08002f2b
 8002a30:	08002f2b 	.word	0x08002f2b
 8002a34:	08002f2b 	.word	0x08002f2b
 8002a38:	08002f2b 	.word	0x08002f2b
 8002a3c:	08002f2b 	.word	0x08002f2b
 8002a40:	08002f2b 	.word	0x08002f2b
 8002a44:	08002f39 	.word	0x08002f39
 8002a48:	08002d29 	.word	0x08002d29
 8002a4c:	08002f39 	.word	0x08002f39
 8002a50:	08002e15 	.word	0x08002e15
 8002a54:	08002f39 	.word	0x08002f39
 8002a58:	08002ec1 	.word	0x08002ec1
    {
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002a5c:	f7ff fe6e 	bl	800273c <_Z10Call_queuev>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4a98      	ldr	r2, [pc, #608]	; (8002cc4 <_Z20Update_State_Machinev+0x2c4>)
 8002a64:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002a66:	4b97      	ldr	r3, [pc, #604]	; (8002cc4 <_Z20Update_State_Machinev+0x2c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2bff      	cmp	r3, #255	; 0xff
 8002a6c:	f000 80ce 	beq.w	8002c0c <_Z20Update_State_Machinev+0x20c>
			{
				test_value_r = radias[indexy];
 8002a70:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <_Z20Update_State_Machinev+0x2c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a94      	ldr	r2, [pc, #592]	; (8002cc8 <_Z20Update_State_Machinev+0x2c8>)
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a82:	ee17 2a90 	vmov	r2, s15
 8002a86:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <_Z20Update_State_Machinev+0x2cc>)
 8002a88:	601a      	str	r2, [r3, #0]
				test_value_theta = theta[indexy];
 8002a8a:	4b8e      	ldr	r3, [pc, #568]	; (8002cc4 <_Z20Update_State_Machinev+0x2c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a90      	ldr	r2, [pc, #576]	; (8002cd0 <_Z20Update_State_Machinev+0x2d0>)
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9c:	ee17 2a90 	vmov	r2, s15
 8002aa0:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <_Z20Update_State_Machinev+0x2d4>)
 8002aa2:	601a      	str	r2, [r3, #0]
				pos_x = (test_value_r*cos(test_value_theta/1000.0)) + offset_x;
 8002aa4:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <_Z20Update_State_Machinev+0x2cc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ab0:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <_Z20Update_State_Machinev+0x2d4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002abc:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8002cb8 <_Z20Update_State_Machinev+0x2b8>
 8002ac0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ac4:	eeb0 0b46 	vmov.f64	d0, d6
 8002ac8:	f00d fd42 	bl	8010550 <cos>
 8002acc:	eeb0 7b40 	vmov.f64	d7, d0
 8002ad0:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002ad4:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <_Z20Update_State_Machinev+0x2d8>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ade:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ae2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ae6:	4b7d      	ldr	r3, [pc, #500]	; (8002cdc <_Z20Update_State_Machinev+0x2dc>)
 8002ae8:	edc3 7a00 	vstr	s15, [r3]
				pos_y = (test_value_r*sin(test_value_theta/1000.0)) + offset_y;
 8002aec:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <_Z20Update_State_Machinev+0x2cc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002af8:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <_Z20Update_State_Machinev+0x2d4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b04:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002cb8 <_Z20Update_State_Machinev+0x2b8>
 8002b08:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b0c:	eeb0 0b46 	vmov.f64	d0, d6
 8002b10:	f00d fd66 	bl	80105e0 <sin>
 8002b14:	eeb0 7b40 	vmov.f64	d7, d0
 8002b18:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002b1c:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <_Z20Update_State_Machinev+0x2e0>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <_Z20Update_State_Machinev+0x2e4>)
 8002b30:	edc3 7a00 	vstr	s15, [r3]
				fcb_IK(pos_x, pos_y, 0, 0);
 8002b34:	4b69      	ldr	r3, [pc, #420]	; (8002cdc <_Z20Update_State_Machinev+0x2dc>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <_Z20Update_State_Machinev+0x2e4>)
 8002b3c:	ed93 7a00 	vldr	s14, [r3]
 8002b40:	eddf 1a69 	vldr	s3, [pc, #420]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002b44:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002b48:	eef0 0a47 	vmov.f32	s1, s14
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	f7ff fe48 	bl	80027e4 <_Z6fcb_IKffff>
				Max_Time = 3;
 8002b54:	4b65      	ldr	r3, [pc, #404]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002b56:	4a66      	ldr	r2, [pc, #408]	; (8002cf0 <_Z20Update_State_Machinev+0x2f0>)
 8002b58:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002b5a:	4b64      	ldr	r3, [pc, #400]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	4b64      	ldr	r3, [pc, #400]	; (8002cf4 <_Z20Update_State_Machinev+0x2f4>)
 8002b62:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002b66:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <_Z20Update_State_Machinev+0x2f8>)
 8002b68:	edd3 6a00 	vldr	s13, [r3]
 8002b6c:	ed9f 3a5e 	vldr	s6, [pc, #376]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002b70:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002b74:	ed9f 2a5c 	vldr	s4, [pc, #368]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002b78:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002b7c:	eeb0 1a66 	vmov.f32	s2, s13
 8002b80:	eef0 0a47 	vmov.f32	s1, s14
 8002b84:	eeb0 0a67 	vmov.f32	s0, s15
 8002b88:	485a      	ldr	r0, [pc, #360]	; (8002cf4 <_Z20Update_State_Machinev+0x2f4>)
 8002b8a:	f7fe f887 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002b8e:	4b57      	ldr	r3, [pc, #348]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <_Z20Update_State_Machinev+0x2fc>)
 8002b96:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002b9a:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <_Z20Update_State_Machinev+0x300>)
 8002b9c:	edd3 6a00 	vldr	s13, [r3]
 8002ba0:	ed9f 3a51 	vldr	s6, [pc, #324]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002ba4:	eddf 2a50 	vldr	s5, [pc, #320]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002ba8:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002bac:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002bb0:	eeb0 1a66 	vmov.f32	s2, s13
 8002bb4:	eef0 0a47 	vmov.f32	s1, s14
 8002bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbc:	484f      	ldr	r0, [pc, #316]	; (8002cfc <_Z20Update_State_Machinev+0x2fc>)
 8002bbe:	f7fe f86d 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <_Z20Update_State_Machinev+0x304>)
 8002bca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <_Z20Update_State_Machinev+0x308>)
 8002bd0:	edd3 6a00 	vldr	s13, [r3]
 8002bd4:	ed9f 3a44 	vldr	s6, [pc, #272]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002bd8:	eddf 2a43 	vldr	s5, [pc, #268]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002bdc:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002be0:	eddf 1a41 	vldr	s3, [pc, #260]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002be4:	eeb0 1a66 	vmov.f32	s2, s13
 8002be8:	eef0 0a47 	vmov.f32	s1, s14
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	4844      	ldr	r0, [pc, #272]	; (8002d04 <_Z20Update_State_Machinev+0x304>)
 8002bf2:	f7fe f853 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002bf6:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <_Z20Update_State_Machinev+0x30c>)
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002bfe:	4844      	ldr	r0, [pc, #272]	; (8002d10 <_Z20Update_State_Machinev+0x310>)
 8002c00:	f009 fd22 	bl	800c648 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002c04:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <_Z20Update_State_Machinev+0x2c0>)
 8002c06:	2234      	movs	r2, #52	; 0x34
 8002c08:	701a      	strb	r2, [r3, #0]
			}

//		Planning_q1
//		Planning_q3

		break;
 8002c0a:	e196      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>
				control_state = 0;
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <_Z20Update_State_Machinev+0x2c0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
		break;
 8002c12:	e192      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>

	case 42:
		Max_Time = 6;
 8002c14:	4b35      	ldr	r3, [pc, #212]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002c16:	4a3f      	ldr	r2, [pc, #252]	; (8002d14 <_Z20Update_State_Machinev+0x314>)
 8002c18:	601a      	str	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, -10200.0, 0.0, 0.0, 0.0, 0.0);
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <_Z20Update_State_Machinev+0x318>)
 8002c22:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c26:	ed9f 3a30 	vldr	s6, [pc, #192]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c2a:	eddf 2a2f 	vldr	s5, [pc, #188]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c2e:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c32:	eddf 1a2d 	vldr	s3, [pc, #180]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c36:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8002d1c <_Z20Update_State_Machinev+0x31c>
 8002c3a:	eef0 0a47 	vmov.f32	s1, s14
 8002c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c42:	4835      	ldr	r0, [pc, #212]	; (8002d18 <_Z20Update_State_Machinev+0x318>)
 8002c44:	f7fe f82a 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <_Z20Update_State_Machinev+0x30c>)
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002c50:	482f      	ldr	r0, [pc, #188]	; (8002d10 <_Z20Update_State_Machinev+0x310>)
 8002c52:	f009 fcf9 	bl	800c648 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <_Z20Update_State_Machinev+0x2c0>)
 8002c58:	2236      	movs	r2, #54	; 0x36
 8002c5a:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <_Z20Update_State_Machinev+0x320>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
		break;
 8002c62:	e16a      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>

	case 43:
		Max_Time = 6;
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002c66:	4a2b      	ldr	r2, [pc, #172]	; (8002d14 <_Z20Update_State_Machinev+0x314>)
 8002c68:	601a      	str	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, -200.0, 0.0, 0.0, 0.0, 0.0);
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <_Z20Update_State_Machinev+0x2ec>)
 8002c6c:	edd3 7a00 	vldr	s15, [r3]
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <_Z20Update_State_Machinev+0x318>)
 8002c72:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c76:	ed9f 3a1c 	vldr	s6, [pc, #112]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c7a:	eddf 2a1b 	vldr	s5, [pc, #108]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c7e:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c82:	eddf 1a19 	vldr	s3, [pc, #100]	; 8002ce8 <_Z20Update_State_Machinev+0x2e8>
 8002c86:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002d24 <_Z20Update_State_Machinev+0x324>
 8002c8a:	eef0 0a47 	vmov.f32	s1, s14
 8002c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c92:	4821      	ldr	r0, [pc, #132]	; (8002d18 <_Z20Update_State_Machinev+0x318>)
 8002c94:	f7fe f802 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <_Z20Update_State_Machinev+0x30c>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002ca0:	481b      	ldr	r0, [pc, #108]	; (8002d10 <_Z20Update_State_Machinev+0x310>)
 8002ca2:	f009 fcd1 	bl	800c648 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <_Z20Update_State_Machinev+0x2c0>)
 8002ca8:	2238      	movs	r2, #56	; 0x38
 8002caa:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <_Z20Update_State_Machinev+0x320>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
		break;
 8002cb2:	e142      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	00000000 	.word	0x00000000
 8002cbc:	408f4000 	.word	0x408f4000
 8002cc0:	24000bac 	.word	0x24000bac
 8002cc4:	24000bc8 	.word	0x24000bc8
 8002cc8:	24000108 	.word	0x24000108
 8002ccc:	24000ba4 	.word	0x24000ba4
 8002cd0:	24000008 	.word	0x24000008
 8002cd4:	24000ba8 	.word	0x24000ba8
 8002cd8:	24000220 	.word	0x24000220
 8002cdc:	24000bcc 	.word	0x24000bcc
 8002ce0:	24000224 	.word	0x24000224
 8002ce4:	24000bd0 	.word	0x24000bd0
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	24000ab0 	.word	0x24000ab0
 8002cf0:	40400000 	.word	0x40400000
 8002cf4:	24000534 	.word	0x24000534
 8002cf8:	24000bb8 	.word	0x24000bb8
 8002cfc:	240006fc 	.word	0x240006fc
 8002d00:	24000bc0 	.word	0x24000bc0
 8002d04:	240007e0 	.word	0x240007e0
 8002d08:	24000bc4 	.word	0x24000bc4
 8002d0c:	24000bb4 	.word	0x24000bb4
 8002d10:	24000f38 	.word	0x24000f38
 8002d14:	40c00000 	.word	0x40c00000
 8002d18:	24000618 	.word	0x24000618
 8002d1c:	c61f6000 	.word	0xc61f6000
 8002d20:	24000aac 	.word	0x24000aac
 8002d24:	c3480000 	.word	0xc3480000

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002d28:	4886      	ldr	r0, [pc, #536]	; (8002f44 <_Z20Update_State_Machinev+0x544>)
 8002d2a:	f009 fd05 	bl	800c738 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8002d2e:	4b86      	ldr	r3, [pc, #536]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002d36:	4b85      	ldr	r3, [pc, #532]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002d3e:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8002f50 <_Z20Update_State_Machinev+0x550>
 8002d42:	4884      	ldr	r0, [pc, #528]	; (8002f54 <_Z20Update_State_Machinev+0x554>)
 8002d44:	f7ff fab8 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002d48:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8002f50 <_Z20Update_State_Machinev+0x550>
 8002d4c:	4882      	ldr	r0, [pc, #520]	; (8002f58 <_Z20Update_State_Machinev+0x558>)
 8002d4e:	f7ff fab3 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 8002d52:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002d58:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 8002d5c:	4b7f      	ldr	r3, [pc, #508]	; (8002f5c <_Z20Update_State_Machinev+0x55c>)
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	4a7e      	ldr	r2, [pc, #504]	; (8002f5c <_Z20Update_State_Machinev+0x55c>)
 8002d62:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	4a78      	ldr	r2, [pc, #480]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002d6c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.C1 = 0;
 8002d70:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002d7a:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002d98:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002da2:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <_Z20Update_State_Machinev+0x548>)
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8002dca:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <_Z20Update_State_Machinev+0x54c>)
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8002dd4:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <_Z20Update_State_Machinev+0x55c>)
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <_Z20Update_State_Machinev+0x55c>)
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8002de8:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <_Z20Update_State_Machinev+0x55c>)
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8002df2:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <_Z20Update_State_Machinev+0x55c>)
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8002dfc:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <_Z20Update_State_Machinev+0x55c>)
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 8002e06:	4b56      	ldr	r3, [pc, #344]	; (8002f60 <_Z20Update_State_Machinev+0x560>)
 8002e08:	222a      	movs	r2, #42	; 0x2a
 8002e0a:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <_Z20Update_State_Machinev+0x564>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
		break;
 8002e12:	e092      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>

//		State_FIN = true;
		break;

	case 54:
		fcb_joint2.Goal_Velocity = 0;
 8002e14:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002e1c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8002f50 <_Z20Update_State_Machinev+0x550>
 8002e20:	4852      	ldr	r0, [pc, #328]	; (8002f6c <_Z20Update_State_Machinev+0x56c>)
 8002e22:	f7ff fa49 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 8002e26:	4847      	ldr	r0, [pc, #284]	; (8002f44 <_Z20Update_State_Machinev+0x544>)
 8002e28:	f009 fc86 	bl	800c738 <HAL_TIM_Base_Stop_IT>
		if (Gripper_State[first-1] == 1)
 8002e2c:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <_Z20Update_State_Machinev+0x570>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	4a50      	ldr	r2, [pc, #320]	; (8002f74 <_Z20Update_State_Machinev+0x574>)
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <_Z20Update_State_Machinev+0x44e>
		{
			gripper.GripperClose();
 8002e46:	484c      	ldr	r0, [pc, #304]	; (8002f78 <_Z20Update_State_Machinev+0x578>)
 8002e48:	f7fe fecc 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
 8002e4c:	e00f      	b.n	8002e6e <_Z20Update_State_Machinev+0x46e>
		}
		else if (Gripper_State[first-1] == 2)
 8002e4e:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <_Z20Update_State_Machinev+0x570>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <_Z20Update_State_Machinev+0x574>)
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <_Z20Update_State_Machinev+0x46e>
		{
			gripper.GripperOpen();
 8002e68:	4843      	ldr	r0, [pc, #268]	; (8002f78 <_Z20Update_State_Machinev+0x578>)
 8002e6a:	f7fe fed1 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8002e78:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8002ea0:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8002eb2:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <_Z20Update_State_Machinev+0x560>)
 8002eb4:	222b      	movs	r2, #43	; 0x2b
 8002eb6:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <_Z20Update_State_Machinev+0x564>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
		break;
 8002ebe:	e03c      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002ec8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8002f50 <_Z20Update_State_Machinev+0x550>
 8002ecc:	4827      	ldr	r0, [pc, #156]	; (8002f6c <_Z20Update_State_Machinev+0x56c>)
 8002ece:	f7ff f9f3 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 8002ed2:	481c      	ldr	r0, [pc, #112]	; (8002f44 <_Z20Update_State_Machinev+0x544>)
 8002ed4:	f009 fc30 	bl	800c738 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C0 = 0;
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <_Z20Update_State_Machinev+0x568>)
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <_Z20Update_State_Machinev+0x560>)
 8002f1e:	2229      	movs	r2, #41	; 0x29
 8002f20:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <_Z20Update_State_Machinev+0x564>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
		break;
 8002f28:	e007      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>

	default:
		control_state = 0;
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <_Z20Update_State_Machinev+0x560>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <_Z20Update_State_Machinev+0x564>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
		break;
 8002f36:	e000      	b.n	8002f3a <_Z20Update_State_Machinev+0x53a>
		break;
 8002f38:	bf00      	nop
    }
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	ecbd 8b02 	vpop	{d8}
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	24000f38 	.word	0x24000f38
 8002f48:	24000534 	.word	0x24000534
 8002f4c:	240006fc 	.word	0x240006fc
 8002f50:	00000000 	.word	0x00000000
 8002f54:	24000494 	.word	0x24000494
 8002f58:	240004e4 	.word	0x240004e4
 8002f5c:	240007e0 	.word	0x240007e0
 8002f60:	24000bac 	.word	0x24000bac
 8002f64:	24000aac 	.word	0x24000aac
 8002f68:	24000618 	.word	0x24000618
 8002f6c:	240004bc 	.word	0x240004bc
 8002f70:	24000000 	.word	0x24000000
 8002f74:	24000b54 	.word	0x24000b54
 8002f78:	24000a8c 	.word	0x24000a8c

08002f7c <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a8f      	ldr	r2, [pc, #572]	; (80031c8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	f040 8188 	bne.w	80032a2 <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8002f92:	4a8e      	ldr	r2, [pc, #568]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8002f94:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <HAL_UARTEx_RxEventCallback+0x254>)
 8002f96:	4614      	mov	r4, r2
 8002f98:	461d      	mov	r5, r3
 8002f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9e:	682b      	ldr	r3, [r5, #0]
 8002fa0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8002fa2:	2214      	movs	r2, #20
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	488a      	ldr	r0, [pc, #552]	; (80031d0 <HAL_UARTEx_RxEventCallback+0x254>)
 8002fa8:	f00e fb3a 	bl	8011620 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	f240 8166 	bls.w	8003280 <HAL_UARTEx_RxEventCallback+0x304>
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	2b14      	cmp	r3, #20
 8002fb8:	f200 8162 	bhi.w	8003280 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	3b02      	subs	r3, #2
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	4b84      	ldr	r3, [pc, #528]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8002fc4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8002fc6:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	497f      	ldr	r1, [pc, #508]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8002fd0:	4881      	ldr	r0, [pc, #516]	; (80031d8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8002fd2:	f003 fcb5 	bl	8006940 <HAL_CRC_Calculate>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b80      	ldr	r3, [pc, #512]	; (80031dc <HAL_UARTEx_RxEventCallback+0x260>)
 8002fdc:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8002fde:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b79      	ldr	r3, [pc, #484]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8002fe8:	5c9b      	ldrb	r3, [r3, r2]
 8002fea:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8002fec:	b21a      	sxth	r2, r3
 8002fee:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4975      	ldr	r1, [pc, #468]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	b21b      	sxth	r3, r3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8003002:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <HAL_UARTEx_RxEventCallback+0x264>)
 8003004:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8003006:	4b75      	ldr	r3, [pc, #468]	; (80031dc <HAL_UARTEx_RxEventCallback+0x260>)
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <HAL_UARTEx_RxEventCallback+0x264>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	429a      	cmp	r2, r3
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8151 	beq.w	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003022:	2201      	movs	r2, #1
 8003024:	2102      	movs	r1, #2
 8003026:	486f      	ldr	r0, [pc, #444]	; (80031e4 <HAL_UARTEx_RxEventCallback+0x268>)
 8003028:	f006 fe0e 	bl	8009c48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003032:	486d      	ldr	r0, [pc, #436]	; (80031e8 <HAL_UARTEx_RxEventCallback+0x26c>)
 8003034:	f006 fe08 	bl	8009c48 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003038:	4b64      	ldr	r3, [pc, #400]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b61      	cmp	r3, #97	; 0x61
 800303e:	d106      	bne.n	800304e <HAL_UARTEx_RxEventCallback+0xd2>
 8003040:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b05      	cmp	r3, #5
 8003048:	d101      	bne.n	800304e <HAL_UARTEx_RxEventCallback+0xd2>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_UARTEx_RxEventCallback+0xd4>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d014      	beq.n	800307e <HAL_UARTEx_RxEventCallback+0x102>
				{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003054:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	b25a      	sxtb	r2, r3
 800305a:	4b64      	ldr	r3, [pc, #400]	; (80031ec <HAL_UARTEx_RxEventCallback+0x270>)
 800305c:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8003060:	789b      	ldrb	r3, [r3, #2]
 8003062:	b25a      	sxtb	r2, r3
 8003064:	4b62      	ldr	r3, [pc, #392]	; (80031f0 <HAL_UARTEx_RxEventCallback+0x274>)
 8003066:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 800306a:	78db      	ldrb	r3, [r3, #3]
 800306c:	b25a      	sxtb	r2, r3
 800306e:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <HAL_UARTEx_RxEventCallback+0x278>)
 8003070:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8003072:	4b56      	ldr	r3, [pc, #344]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8003074:	791b      	ldrb	r3, [r3, #4]
 8003076:	b25a      	sxtb	r2, r3
 8003078:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <HAL_UARTEx_RxEventCallback+0x27c>)
 800307a:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
					pyaw = Old_Rx_Buffer[7];
				}

			}
 800307c:	e122      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 800307e:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b71      	cmp	r3, #113	; 0x71
 8003084:	d106      	bne.n	8003094 <HAL_UARTEx_RxEventCallback+0x118>
 8003086:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b05      	cmp	r3, #5
 800308e:	d101      	bne.n	8003094 <HAL_UARTEx_RxEventCallback+0x118>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_UARTEx_RxEventCallback+0x11a>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d014      	beq.n	80030c4 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 800309a:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 800309c:	785b      	ldrb	r3, [r3, #1]
 800309e:	b25a      	sxtb	r2, r3
 80030a0:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_UARTEx_RxEventCallback+0x280>)
 80030a2:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80030a4:	4b49      	ldr	r3, [pc, #292]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	b25a      	sxtb	r2, r3
 80030aa:	4b55      	ldr	r3, [pc, #340]	; (8003200 <HAL_UARTEx_RxEventCallback+0x284>)
 80030ac:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 80030b0:	78db      	ldrb	r3, [r3, #3]
 80030b2:	b25a      	sxtb	r2, r3
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_UARTEx_RxEventCallback+0x288>)
 80030b6:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80030b8:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 80030ba:	791b      	ldrb	r3, [r3, #4]
 80030bc:	b25a      	sxtb	r2, r3
 80030be:	4b52      	ldr	r3, [pc, #328]	; (8003208 <HAL_UARTEx_RxEventCallback+0x28c>)
 80030c0:	701a      	strb	r2, [r3, #0]
			}
 80030c2:	e0ff      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2)
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b85      	cmp	r3, #133	; 0x85
 80030ca:	d106      	bne.n	80030da <HAL_UARTEx_RxEventCallback+0x15e>
 80030cc:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d101      	bne.n	80030da <HAL_UARTEx_RxEventCallback+0x15e>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_UARTEx_RxEventCallback+0x160>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80030e0:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_UARTEx_RxEventCallback+0x290>)
 80030e2:	2233      	movs	r2, #51	; 0x33
 80030e4:	701a      	strb	r2, [r3, #0]
			}
 80030e6:	e0ed      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b86      	cmp	r3, #134	; 0x86
 80030ee:	d106      	bne.n	80030fe <HAL_UARTEx_RxEventCallback+0x182>
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d101      	bne.n	80030fe <HAL_UARTEx_RxEventCallback+0x182>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_UARTEx_RxEventCallback+0x184>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 8003104:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 800310c:	789b      	ldrb	r3, [r3, #2]
 800310e:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	6938      	ldr	r0, [r7, #16]
 8003114:	f7ff fad4 	bl	80026c0 <_Z12Insert_queueii>
			}
 8003118:	e0d4      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2)
 800311a:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b87      	cmp	r3, #135	; 0x87
 8003120:	d106      	bne.n	8003130 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d101      	bne.n	8003130 <HAL_UARTEx_RxEventCallback+0x1b4>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_UARTEx_RxEventCallback+0x1b6>
 8003130:	2300      	movs	r3, #0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8003138:	785b      	ldrb	r3, [r3, #1]
 800313a:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 800313c:	4a33      	ldr	r2, [pc, #204]	; (800320c <HAL_UARTEx_RxEventCallback+0x290>)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 8003142:	f7ff fc5d 	bl	8002a00 <_Z20Update_State_Machinev>
			}
 8003146:	e0bd      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2)
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b89      	cmp	r3, #137	; 0x89
 800314e:	d106      	bne.n	800315e <HAL_UARTEx_RxEventCallback+0x1e2>
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d101      	bne.n	800315e <HAL_UARTEx_RxEventCallback+0x1e2>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_UARTEx_RxEventCallback+0x1e4>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 8003164:	f7ff fc4c 	bl	8002a00 <_Z20Update_State_Machinev>
			}
 8003168:	e0ac      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b81      	cmp	r3, #129	; 0x81
 8003170:	d106      	bne.n	8003180 <HAL_UARTEx_RxEventCallback+0x204>
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d101      	bne.n	8003180 <HAL_UARTEx_RxEventCallback+0x204>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_UARTEx_RxEventCallback+0x206>
 8003180:	2300      	movs	r3, #0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	461a      	mov	r2, r3
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_UARTEx_RxEventCallback+0x294>)
 800318e:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0)
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_UARTEx_RxEventCallback+0x294>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80031a2:	481c      	ldr	r0, [pc, #112]	; (8003214 <HAL_UARTEx_RxEventCallback+0x298>)
 80031a4:	f7fe fd34 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
			}
 80031a8:	e08c      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 80031aa:	481a      	ldr	r0, [pc, #104]	; (8003214 <HAL_UARTEx_RxEventCallback+0x298>)
 80031ac:	f7fe fd1a 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
			}
 80031b0:	e088      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8)
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_UARTEx_RxEventCallback+0x250>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b91      	cmp	r3, #145	; 0x91
 80031b8:	d12e      	bne.n	8003218 <HAL_UARTEx_RxEventCallback+0x29c>
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_UARTEx_RxEventCallback+0x258>)
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d129      	bne.n	8003218 <HAL_UARTEx_RxEventCallback+0x29c>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e028      	b.n	800321a <HAL_UARTEx_RxEventCallback+0x29e>
 80031c8:	24001260 	.word	0x24001260
 80031cc:	24000ad4 	.word	0x24000ad4
 80031d0:	24000ae8 	.word	0x24000ae8
 80031d4:	24000afc 	.word	0x24000afc
 80031d8:	24000be0 	.word	0x24000be0
 80031dc:	24000acc 	.word	0x24000acc
 80031e0:	24000ace 	.word	0x24000ace
 80031e4:	58021000 	.word	0x58021000
 80031e8:	58020400 	.word	0x58020400
 80031ec:	24000ab4 	.word	0x24000ab4
 80031f0:	24000ab5 	.word	0x24000ab5
 80031f4:	24000ab6 	.word	0x24000ab6
 80031f8:	24000ab7 	.word	0x24000ab7
 80031fc:	24000ab8 	.word	0x24000ab8
 8003200:	24000ab9 	.word	0x24000ab9
 8003204:	24000aba 	.word	0x24000aba
 8003208:	24000abb 	.word	0x24000abb
 800320c:	24000bac 	.word	0x24000bac
 8003210:	24000ad0 	.word	0x24000ad0
 8003214:	24000a8c 	.word	0x24000a8c
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d052      	beq.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_UARTEx_RxEventCallback+0x420>)
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	4a5d      	ldr	r2, [pc, #372]	; (800339c <HAL_UARTEx_RxEventCallback+0x420>)
 8003226:	7892      	ldrb	r2, [r2, #2]
 8003228:	4313      	orrs	r3, r2
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003232:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <HAL_UARTEx_RxEventCallback+0x424>)
 8003234:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <HAL_UARTEx_RxEventCallback+0x420>)
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	4a57      	ldr	r2, [pc, #348]	; (800339c <HAL_UARTEx_RxEventCallback+0x420>)
 8003240:	7912      	ldrb	r2, [r2, #4]
 8003242:	4313      	orrs	r3, r2
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <HAL_UARTEx_RxEventCallback+0x428>)
 800324e:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8003252:	4b52      	ldr	r3, [pc, #328]	; (800339c <HAL_UARTEx_RxEventCallback+0x420>)
 8003254:	795b      	ldrb	r3, [r3, #5]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_UARTEx_RxEventCallback+0x420>)
 800325a:	7992      	ldrb	r2, [r2, #6]
 800325c:	4313      	orrs	r3, r2
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003266:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_UARTEx_RxEventCallback+0x42c>)
 8003268:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 800326c:	4b4b      	ldr	r3, [pc, #300]	; (800339c <HAL_UARTEx_RxEventCallback+0x420>)
 800326e:	79db      	ldrb	r3, [r3, #7]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003278:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <HAL_UARTEx_RxEventCallback+0x430>)
 800327a:	edc3 7a00 	vstr	s15, [r3]
			}
 800327e:	e021      	b.n	80032c4 <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003280:	2200      	movs	r2, #0
 8003282:	2102      	movs	r1, #2
 8003284:	484a      	ldr	r0, [pc, #296]	; (80033b0 <HAL_UARTEx_RxEventCallback+0x434>)
 8003286:	f006 fcdf 	bl	8009c48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800328a:	2201      	movs	r2, #1
 800328c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003290:	4848      	ldr	r0, [pc, #288]	; (80033b4 <HAL_UARTEx_RxEventCallback+0x438>)
 8003292:	f006 fcd9 	bl	8009c48 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8003296:	220c      	movs	r2, #12
 8003298:	4947      	ldr	r1, [pc, #284]	; (80033b8 <HAL_UARTEx_RxEventCallback+0x43c>)
 800329a:	4848      	ldr	r0, [pc, #288]	; (80033bc <HAL_UARTEx_RxEventCallback+0x440>)
 800329c:	f00a fe56 	bl	800df4c <HAL_UART_Transmit_DMA>
 80032a0:	e011      	b.n	80032c6 <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2102      	movs	r1, #2
 80032a6:	4842      	ldr	r0, [pc, #264]	; (80033b0 <HAL_UARTEx_RxEventCallback+0x434>)
 80032a8:	f006 fcce 	bl	8009c48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80032ac:	2201      	movs	r2, #1
 80032ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032b2:	4840      	ldr	r0, [pc, #256]	; (80033b4 <HAL_UARTEx_RxEventCallback+0x438>)
 80032b4:	f006 fcc8 	bl	8009c48 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80032b8:	2215      	movs	r2, #21
 80032ba:	4941      	ldr	r1, [pc, #260]	; (80033c0 <HAL_UARTEx_RxEventCallback+0x444>)
 80032bc:	483f      	ldr	r0, [pc, #252]	; (80033bc <HAL_UARTEx_RxEventCallback+0x440>)
 80032be:	f00a fe45 	bl	800df4c <HAL_UART_Transmit_DMA>
 80032c2:	e000      	b.n	80032c6 <HAL_UARTEx_RxEventCallback+0x34a>
			}
 80032c4:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80032c6:	2214      	movs	r2, #20
 80032c8:	493e      	ldr	r1, [pc, #248]	; (80033c4 <HAL_UARTEx_RxEventCallback+0x448>)
 80032ca:	483c      	ldr	r0, [pc, #240]	; (80033bc <HAL_UARTEx_RxEventCallback+0x440>)
 80032cc:	f00c fd9b 	bl	800fe06 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80032d0:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <HAL_UARTEx_RxEventCallback+0x450>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d04a      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <HAL_UARTEx_RxEventCallback+0x454>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d045      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3a      	ldr	r2, [pc, #232]	; (80033d4 <HAL_UARTEx_RxEventCallback+0x458>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d040      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 80032ee:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a39      	ldr	r2, [pc, #228]	; (80033d8 <HAL_UARTEx_RxEventCallback+0x45c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d03b      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 80032f8:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a37      	ldr	r2, [pc, #220]	; (80033dc <HAL_UARTEx_RxEventCallback+0x460>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d036      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x464>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d031      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 800330c:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <HAL_UARTEx_RxEventCallback+0x468>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02c      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003316:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x46c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d027      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a31      	ldr	r2, [pc, #196]	; (80033ec <HAL_UARTEx_RxEventCallback+0x470>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 800332a:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <HAL_UARTEx_RxEventCallback+0x474>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01d      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2e      	ldr	r2, [pc, #184]	; (80033f4 <HAL_UARTEx_RxEventCallback+0x478>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x47c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_UARTEx_RxEventCallback+0x480>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <HAL_UARTEx_RxEventCallback+0x484>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <HAL_UARTEx_RxEventCallback+0x488>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a27      	ldr	r2, [pc, #156]	; (8003408 <HAL_UARTEx_RxEventCallback+0x48c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d108      	bne.n	8003382 <HAL_UARTEx_RxEventCallback+0x406>
 8003370:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0208 	bic.w	r2, r2, #8
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e008      	b.n	8003394 <HAL_UARTEx_RxEventCallback+0x418>
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0204 	bic.w	r2, r2, #4
 8003390:	601a      	str	r2, [r3, #0]
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bdb0      	pop	{r4, r5, r7, pc}
 800339c:	24000ad4 	.word	0x24000ad4
 80033a0:	24000abc 	.word	0x24000abc
 80033a4:	24000ac0 	.word	0x24000ac0
 80033a8:	24000ac4 	.word	0x24000ac4
 80033ac:	24000ac8 	.word	0x24000ac8
 80033b0:	58021000 	.word	0x58021000
 80033b4:	58020400 	.word	0x58020400
 80033b8:	08013fdc 	.word	0x08013fdc
 80033bc:	24001260 	.word	0x24001260
 80033c0:	08013fec 	.word	0x08013fec
 80033c4:	24000ae8 	.word	0x24000ae8
 80033c8:	240011e8 	.word	0x240011e8
 80033cc:	40020010 	.word	0x40020010
 80033d0:	40020028 	.word	0x40020028
 80033d4:	40020040 	.word	0x40020040
 80033d8:	40020058 	.word	0x40020058
 80033dc:	40020070 	.word	0x40020070
 80033e0:	40020088 	.word	0x40020088
 80033e4:	400200a0 	.word	0x400200a0
 80033e8:	400200b8 	.word	0x400200b8
 80033ec:	40020410 	.word	0x40020410
 80033f0:	40020428 	.word	0x40020428
 80033f4:	40020440 	.word	0x40020440
 80033f8:	40020458 	.word	0x40020458
 80033fc:	40020470 	.word	0x40020470
 8003400:	40020488 	.word	0x40020488
 8003404:	400204a0 	.word	0x400204a0
 8003408:	400204b8 	.word	0x400204b8
 800340c:	00000000 	.word	0x00000000

08003410 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4ac9      	ldr	r2, [pc, #804]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f040 80bc 	bne.w	800359a <HAL_TIM_PeriodElapsedCallback+0x18a>
		encoderJ1.AMT21_Read();
 8003422:	48c8      	ldr	r0, [pc, #800]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003424:	f7fd f94f 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003428:	48c6      	ldr	r0, [pc, #792]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800342a:	f7fd f97b 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	4bc5      	ldr	r3, [pc, #788]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003434:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003436:	4bc4      	ldr	r3, [pc, #784]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d110      	bne.n	8003460 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 800343e:	48c1      	ldr	r0, [pc, #772]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003440:	f7fd f9d4 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003444:	4603      	mov	r3, r0
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800344e:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003452:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003456:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800345a:	4bbc      	ldr	r3, [pc, #752]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800345c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003460:	48bb      	ldr	r0, [pc, #748]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003462:	f7fd f930 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003466:	48ba      	ldr	r0, [pc, #744]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003468:	f7fd f95c 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	4bb8      	ldr	r3, [pc, #736]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003472:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 8003474:	4bb7      	ldr	r3, [pc, #732]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d112      	bne.n	80034a2 <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 800347c:	48b4      	ldr	r0, [pc, #720]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800347e:	f7fd f9d7 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 8003482:	48b3      	ldr	r0, [pc, #716]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003484:	f7fd fa33 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8003488:	ee07 0a90 	vmov	s15, r0
 800348c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003490:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003494:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003498:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800349c:	4bae      	ldr	r3, [pc, #696]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800349e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 80034a2:	48ae      	ldr	r0, [pc, #696]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80034a4:	f7fd f90f 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80034a8:	48ac      	ldr	r0, [pc, #688]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80034aa:	f7fd f93b 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	4bab      	ldr	r3, [pc, #684]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80034b4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80034b6:	4baa      	ldr	r3, [pc, #680]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d110      	bne.n	80034e0 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 80034be:	48a7      	ldr	r0, [pc, #668]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80034c0:	f7fd f994 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80034c4:	4603      	mov	r3, r0
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80034ce:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 80034d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034da:	4ba2      	ldr	r3, [pc, #648]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80034dc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80034e0:	48a1      	ldr	r0, [pc, #644]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80034e2:	f7fd f8f0 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80034e6:	48a0      	ldr	r0, [pc, #640]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80034e8:	f7fd f91c 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b9e      	ldr	r3, [pc, #632]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80034f2:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80034f4:	4b9d      	ldr	r3, [pc, #628]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d110      	bne.n	800351e <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 80034fc:	489a      	ldr	r0, [pc, #616]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80034fe:	f7fd f975 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003502:	4603      	mov	r3, r0
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800350c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003510:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003514:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003518:	4b95      	ldr	r3, [pc, #596]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800351a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx, dy, dz, 0.0);
 800351e:	4b8b      	ldr	r3, [pc, #556]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003520:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003524:	4b8f      	ldr	r3, [pc, #572]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003526:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800352a:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b25b      	sxtb	r3, r3
 8003530:	ee06 3a90 	vmov	s13, r3
 8003534:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003538:	4b8f      	ldr	r3, [pc, #572]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b25b      	sxtb	r3, r3
 800353e:	ee06 3a10 	vmov	s12, r3
 8003542:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003546:	4b8d      	ldr	r3, [pc, #564]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b25b      	sxtb	r3, r3
 800354c:	ee05 3a90 	vmov	s11, r3
 8003550:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003554:	eddf 3a8a 	vldr	s7, [pc, #552]	; 8003780 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003558:	eeb0 3a65 	vmov.f32	s6, s11
 800355c:	eef0 2a46 	vmov.f32	s5, s12
 8003560:	eeb0 2a66 	vmov.f32	s4, s13
 8003564:	eddf 1a86 	vldr	s3, [pc, #536]	; 8003780 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003568:	eeb0 1a47 	vmov.f32	s2, s14
 800356c:	eddf 0a84 	vldr	s1, [pc, #528]	; 8003780 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003570:	eeb0 0a67 	vmov.f32	s0, s15
 8003574:	4883      	ldr	r0, [pc, #524]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003576:	f7fd fa67 	bl	8000a48 <_ZN10RobotJoint9UpdateIVKEffffffff>

			stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 800357a:	4b82      	ldr	r3, [pc, #520]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800357c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003580:	eeb0 0a67 	vmov.f32	s0, s15
 8003584:	4880      	ldr	r0, [pc, #512]	; (8003788 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003586:	f7fe fe97 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
			stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 800358a:	4b7e      	ldr	r3, [pc, #504]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800358c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003590:	eeb0 0a67 	vmov.f32	s0, s15
 8003594:	487d      	ldr	r0, [pc, #500]	; (800378c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8003596:	f7fe fe8f 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a7c      	ldr	r2, [pc, #496]	; (8003790 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	f040 808f 	bne.w	80036c2 <HAL_TIM_PeriodElapsedCallback+0x2b2>
	{
		encoderJ1.AMT21_Read();
 80035a4:	4867      	ldr	r0, [pc, #412]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80035a6:	f7fd f88e 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80035aa:	4866      	ldr	r0, [pc, #408]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80035ac:	f7fd f8ba 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b64      	ldr	r3, [pc, #400]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80035b6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80035b8:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d110      	bne.n	80035e2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 80035c0:	4860      	ldr	r0, [pc, #384]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80035c2:	f7fd f913 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80035c6:	4603      	mov	r3, r0
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80035d0:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 80035d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035dc:	4b5b      	ldr	r3, [pc, #364]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80035de:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 80035e2:	485b      	ldr	r0, [pc, #364]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80035e4:	f7fd f86f 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 80035e8:	4859      	ldr	r0, [pc, #356]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80035ea:	f7fd f89b 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b58      	ldr	r3, [pc, #352]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80035f4:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 80035f6:	4b57      	ldr	r3, [pc, #348]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d112      	bne.n	8003624 <HAL_TIM_PeriodElapsedCallback+0x214>
			encoderJ2.unwarp();
 80035fe:	4854      	ldr	r0, [pc, #336]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003600:	f7fd f916 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 8003604:	4852      	ldr	r0, [pc, #328]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003606:	f7fd f972 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 800360a:	ee07 0a90 	vmov	s15, r0
 800360e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003612:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003616:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800361a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003620:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 8003624:	484d      	ldr	r0, [pc, #308]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003626:	f7fd f84e 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800362a:	484c      	ldr	r0, [pc, #304]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800362c:	f7fd f87a 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003636:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003638:	4b49      	ldr	r3, [pc, #292]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d110      	bne.n	8003662 <HAL_TIM_PeriodElapsedCallback+0x252>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 8003640:	4846      	ldr	r0, [pc, #280]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003642:	f7fd f8d3 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003646:	4603      	mov	r3, r0
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003650:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003654:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003658:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800365c:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800365e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003662:	4841      	ldr	r0, [pc, #260]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003664:	f7fd f82f 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003668:	483f      	ldr	r0, [pc, #252]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800366a:	f7fd f85b 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003674:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d110      	bne.n	80036a0 <HAL_TIM_PeriodElapsedCallback+0x290>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 800367e:	483a      	ldr	r0, [pc, #232]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003680:	f7fd f8b4 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003684:	4603      	mov	r3, r0
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800368e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003692:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003696:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800369a:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800369c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		if (State_FIN)
 80036a0:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_TIM_PeriodElapsedCallback+0x2b2>
		 {
			Balloon++;
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	4a39      	ldr	r2, [pc, #228]	; (8003798 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80036b2:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 80036b4:	f7ff f9a4 	bl	8002a00 <_Z20Update_State_Machinev>
			Update_State_Machine();
 80036b8:	f7ff f9a2 	bl	8002a00 <_Z20Update_State_Machinev>
			State_FIN = false;
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
		 }

	}

	if (htim == &htim14) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a35      	ldr	r2, [pc, #212]	; (800379c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	f040 8483 	bne.w	8003fd2 <HAL_TIM_PeriodElapsedCallback+0xbc2>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80036ce:	ed93 7a00 	vldr	s14, [r3]
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80036d4:	edd3 7a00 	vldr	s15, [r3]
 80036d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 80036e0:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80036e2:	ed93 7a00 	vldr	s14, [r3]
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 80036fe:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003700:	ed93 7a00 	vldr	s14, [r3]
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003722:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003728:	ed93 7a00 	vldr	s14, [r3]
 800372c:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003736:	e035      	b.n	80037a4 <HAL_TIM_PeriodElapsedCallback+0x394>
 8003738:	645a1cac 	.word	0x645a1cac
 800373c:	4004df3b 	.word	0x4004df3b
 8003740:	24000d70 	.word	0x24000d70
 8003744:	24000424 	.word	0x24000424
 8003748:	24000aa8 	.word	0x24000aa8
 800374c:	24000534 	.word	0x24000534
 8003750:	24000440 	.word	0x24000440
 8003754:	24000aa9 	.word	0x24000aa9
 8003758:	24000618 	.word	0x24000618
 800375c:	2400045c 	.word	0x2400045c
 8003760:	24000aaa 	.word	0x24000aaa
 8003764:	240006fc 	.word	0x240006fc
 8003768:	24000478 	.word	0x24000478
 800376c:	24000aab 	.word	0x24000aab
 8003770:	240007e0 	.word	0x240007e0
 8003774:	24000ab8 	.word	0x24000ab8
 8003778:	24000ab9 	.word	0x24000ab9
 800377c:	24000aba 	.word	0x24000aba
 8003780:	00000000 	.word	0x00000000
 8003784:	240009a8 	.word	0x240009a8
 8003788:	24000494 	.word	0x24000494
 800378c:	240004e4 	.word	0x240004e4
 8003790:	24000fd0 	.word	0x24000fd0
 8003794:	24000aac 	.word	0x24000aac
 8003798:	24000bb0 	.word	0x24000bb0
 800379c:	24000f38 	.word	0x24000f38
 80037a0:	24000bb4 	.word	0x24000bb4
 80037a4:	4be2      	ldr	r3, [pc, #904]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ae:	4be0      	ldr	r3, [pc, #896]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b8:	4bdd      	ldr	r3, [pc, #884]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	edc7 7a06 	vstr	s15, [r7, #24]
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;


		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 80037c6:	4bdb      	ldr	r3, [pc, #876]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80037c8:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80037cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037d0:	4bd8      	ldr	r3, [pc, #864]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80037d2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80037d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037da:	ee37 5b07 	vadd.f64	d5, d7, d7
 80037de:	4bd4      	ldr	r3, [pc, #848]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80037ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80037f0:	4bd0      	ldr	r3, [pc, #832]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80037f2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80037f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037fa:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80037fe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003802:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003806:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800380a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800380e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003812:	4bc8      	ldr	r3, [pc, #800]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003814:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003818:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800381c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003820:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003824:	edd7 7a08 	vldr	s15, [r7, #32]
 8003828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800382c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003830:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003834:	4bbf      	ldr	r3, [pc, #764]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003836:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800383a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003842:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003846:	edd7 7a07 	vldr	s15, [r7, #28]
 800384a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003852:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003856:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800385a:	4bb6      	ldr	r3, [pc, #728]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800385c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 8003860:	4bb4      	ldr	r3, [pc, #720]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003862:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003866:	4bb3      	ldr	r3, [pc, #716]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003868:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 800386c:	4bb0      	ldr	r3, [pc, #704]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800386e:	edd3 7a00 	vldr	s15, [r3]
 8003872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800387a:	4bae      	ldr	r3, [pc, #696]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800387c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003880:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800388c:	4ba9      	ldr	r3, [pc, #676]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800388e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003892:	edd7 7a08 	vldr	s15, [r7, #32]
 8003896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800389a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800389e:	4ba5      	ldr	r3, [pc, #660]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80038a0:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80038a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80038a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b0:	4ba0      	ldr	r3, [pc, #640]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80038b2:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80038b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80038ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c2:	4b9c      	ldr	r3, [pc, #624]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80038c4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0*fcb_joint2.C2*t) + (3.0*fcb_joint2.C3*t2) + (4.0*fcb_joint2.C4*t3) + (5.0*fcb_joint2.C5*t4);
 80038c8:	4b9b      	ldr	r3, [pc, #620]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80038ca:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80038ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038d2:	4b99      	ldr	r3, [pc, #612]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80038d4:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80038d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038dc:	ee37 5b07 	vadd.f64	d5, d7, d7
 80038e0:	4b93      	ldr	r3, [pc, #588]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80038ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80038f2:	4b91      	ldr	r3, [pc, #580]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80038f4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80038f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038fc:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003900:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003904:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800390c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003910:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003914:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003916:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800391a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800391e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003922:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003926:	edd7 7a08 	vldr	s15, [r7, #32]
 800392a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800392e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003932:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003936:	4b80      	ldr	r3, [pc, #512]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003938:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800393c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003940:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003944:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003948:	edd7 7a07 	vldr	s15, [r7, #28]
 800394c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003950:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003954:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003958:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800395c:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800395e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1*t) + (fcb_joint2.C2*t2) + (fcb_joint2.C3*t3) + (fcb_joint2.C4*t4) + (fcb_joint2.C5*t5));
 8003962:	4b75      	ldr	r3, [pc, #468]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003964:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003968:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800396a:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003970:	edd3 7a00 	vldr	s15, [r3]
 8003974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800397c:	4b6e      	ldr	r3, [pc, #440]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800397e:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003982:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800398a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398e:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003990:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003994:	edd7 7a08 	vldr	s15, [r7, #32]
 8003998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800399c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a0:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80039a2:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80039a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80039aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b2:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80039b4:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80039b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80039bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	4b5c      	ldr	r3, [pc, #368]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80039c6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 80039ca:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 80039cc:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80039d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 80039d6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80039da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039de:	ee37 5b07 	vadd.f64	d5, d7, d7
 80039e2:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80039e4:	edd3 7a00 	vldr	s15, [r3]
 80039e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039f4:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 80039f6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80039fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039fe:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003a02:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a12:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a16:	4b49      	ldr	r3, [pc, #292]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a18:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003a1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a20:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003a24:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a28:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a3a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a42:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003a46:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a5e:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a60:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 8003a64:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a66:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003a6a:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a6c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003a70:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003a72:	edd3 7a00 	vldr	s15, [r3]
 8003a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a7e:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a80:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003a84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a90:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a92:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003a96:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003aa4:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003aa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ab4:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003ab6:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8003abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003ac8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0*fcb_joint4.C2*t) + (3.0*fcb_joint4.C3*t2) + (4.0*fcb_joint4.C4*t3) + (5.0*fcb_joint4.C5*t4);
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003ace:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003ad2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003ad8:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ae0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aee:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003af2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003af8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003afc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b00:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003b04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b10:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003b1a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b22:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003b26:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b2e:	e009      	b.n	8003b44 <HAL_TIM_PeriodElapsedCallback+0x734>
 8003b30:	24000bb4 	.word	0x24000bb4
 8003b34:	24000534 	.word	0x24000534
 8003b38:	24000618 	.word	0x24000618
 8003b3c:	240006fc 	.word	0x240006fc
 8003b40:	240007e0 	.word	0x240007e0
 8003b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b48:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b50:	4bc7      	ldr	r3, [pc, #796]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003b52:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003b56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b5a:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003b5e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b62:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b76:	4bbe      	ldr	r3, [pc, #760]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003b78:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1*t) + (fcb_joint4.C2*t2) + (fcb_joint4.C3*t3) + (fcb_joint4.C4*t4) + (fcb_joint4.C5*t5));
 8003b7c:	4bbc      	ldr	r3, [pc, #752]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003b7e:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003b82:	4bbb      	ldr	r3, [pc, #748]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003b84:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003b88:	4bba      	ldr	r3, [pc, #744]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b96:	4bb6      	ldr	r3, [pc, #728]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003b98:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003b9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ba8:	4bb1      	ldr	r3, [pc, #708]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003baa:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003bae:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bba:	4bad      	ldr	r3, [pc, #692]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003bbc:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003bc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bcc:	4ba8      	ldr	r3, [pc, #672]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003bce:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003bd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bde:	4ba4      	ldr	r3, [pc, #656]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003be0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;


		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003be4:	4ba4      	ldr	r3, [pc, #656]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003be6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003bea:	eeb0 0a67 	vmov.f32	s0, s15
 8003bee:	48a2      	ldr	r0, [pc, #648]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003bf0:	f7fd f978 	bl	8000ee4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003bf4:	4ba0      	ldr	r3, [pc, #640]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003bf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bfa:	4a9f      	ldr	r2, [pc, #636]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003bfc:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003c00:	4b9d      	ldr	r3, [pc, #628]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c06:	4a9c      	ldr	r2, [pc, #624]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c08:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003c0c:	4b9b      	ldr	r3, [pc, #620]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c0e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	4899      	ldr	r0, [pc, #612]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c18:	f7fd f964 	bl	8000ee4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003c1c:	4b97      	ldr	r3, [pc, #604]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c22:	4a96      	ldr	r2, [pc, #600]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c24:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003c28:	4b94      	ldr	r3, [pc, #592]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c2e:	4a93      	ldr	r2, [pc, #588]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c30:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
//		fcb_joint1.Kd_p = 0.0004;
//		fcb_joint3.Kp_p = 0.015; // 0.015
//		fcb_joint3.Ki_p = 0.009; // 0.009
//		fcb_joint3.Kd_p = 0.0015; // 0.0015

		fcb_joint1.Kp_p = 0.2;
 8003c34:	4b90      	ldr	r3, [pc, #576]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c36:	4a92      	ldr	r2, [pc, #584]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8003c38:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0001;
 8003c3a:	4b8f      	ldr	r3, [pc, #572]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c3c:	4a91      	ldr	r2, [pc, #580]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8003c3e:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0001;
 8003c40:	4b8d      	ldr	r3, [pc, #564]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c42:	4a90      	ldr	r2, [pc, #576]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8003c44:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 0.002;
 8003c46:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c48:	4a8f      	ldr	r2, [pc, #572]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003c4c:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003c54:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint3.Kp_p = 0.0006;
//		fcb_joint3.Ki_p = 0.00001;
//		fcb_joint3.Kd_p = 0.00001;

		fcb_joint1.Kp_v = 0.0;
 8003c5c:	4b86      	ldr	r3, [pc, #536]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8003c64:	4b84      	ldr	r3, [pc, #528]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003c6c:	4b82      	ldr	r3, [pc, #520]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 0.0;
 8003c74:	4b81      	ldr	r3, [pc, #516]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003c7c:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8003c84:	4b7d      	ldr	r3, [pc, #500]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8003c8c:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c8e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003c92:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c94:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9c:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003c9e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003ca4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003ca8:	4b74      	ldr	r3, [pc, #464]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003caa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb2:	4b72      	ldr	r3, [pc, #456]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003cb4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cba:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003cbe:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cc0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc8:	4b6b      	ldr	r3, [pc, #428]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cca:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8003cce:	4b6b      	ldr	r3, [pc, #428]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003cd0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003cd4:	4b69      	ldr	r3, [pc, #420]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003cd6:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cde:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003ce0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003ce4:	4b64      	ldr	r3, [pc, #400]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ce6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cec:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf4:	4b60      	ldr	r3, [pc, #384]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cf6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003cfa:	4b60      	ldr	r3, [pc, #384]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003cfc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003d00:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003d02:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003d0c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d12:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003d16:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d18:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d20:	4b55      	ldr	r3, [pc, #340]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d22:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003d28:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003d2e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d36:	4b51      	ldr	r3, [pc, #324]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003d38:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003d3c:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d3e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8003d42:	4b4d      	ldr	r3, [pc, #308]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d44:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003d48:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d4a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003d52:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8003d56:	4b48      	ldr	r3, [pc, #288]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d58:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003d5c:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d5e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8003d66:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d6c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003d70:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d72:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003d76:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d78:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003d7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8003d84:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8003d88:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d8a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d90:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8003d98:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d9e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003da2:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003da4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8003dac:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 8003db0:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003db2:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003db6:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003db8:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003dbe:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003dc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8003dca:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003dce:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003dd0:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003dd6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003dda:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003ddc:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003de0:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003de2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003dea:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003df0:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003df6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e04:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e0a:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e10:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003e14:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e22:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e28:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8003e30:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e36:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e3c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8003e44:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e4a:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e50:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e56:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003e5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8003e62:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003e68:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 8003e6c:	e00e      	b.n	8003e8c <HAL_TIM_PeriodElapsedCallback+0xa7c>
 8003e6e:	bf00      	nop
 8003e70:	240007e0 	.word	0x240007e0
 8003e74:	24000bb4 	.word	0x24000bb4
 8003e78:	24000534 	.word	0x24000534
 8003e7c:	240006fc 	.word	0x240006fc
 8003e80:	3e4ccccd 	.word	0x3e4ccccd
 8003e84:	38d1b717 	.word	0x38d1b717
 8003e88:	3b03126f 	.word	0x3b03126f
//		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);

//		stepperJ1.StepperOpenLoopSpeedM(0.0);
//		stepperJ3.StepperOpenLoopSpeedM(0.0);

		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
 8003e8c:	4b97      	ldr	r3, [pc, #604]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003e8e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003e92:	eeb0 0a67 	vmov.f32	s0, s15
 8003e96:	4896      	ldr	r0, [pc, #600]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8003e98:	f7fe fa0e 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Goal_Velocity);
 8003e9c:	4b95      	ldr	r3, [pc, #596]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003e9e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea6:	4894      	ldr	r0, [pc, #592]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003ea8:	f7fe fa06 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
//
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8003eac:	4b93      	ldr	r3, [pc, #588]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8003eae:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb6:	4892      	ldr	r0, [pc, #584]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8003eb8:	f7fe f9fe 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ3.StepperOpenLoopSpeedM(0);
		stepperJ4.StepperOpenLoopSpeedM(0);
 8003ebc:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8004104 <HAL_TIM_PeriodElapsedCallback+0xcf4>
 8003ec0:	4891      	ldr	r0, [pc, #580]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8003ec2:	f7fe f9f9 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003ec6:	4b89      	ldr	r3, [pc, #548]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eca:	4a88      	ldr	r2, [pc, #544]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003ecc:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003ece:	4b89      	ldr	r3, [pc, #548]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed2:	4a88      	ldr	r2, [pc, #544]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003ed4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8003ed6:	4b85      	ldr	r3, [pc, #532]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003edc:	4a83      	ldr	r2, [pc, #524]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003ede:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8003ee2:	4b84      	ldr	r3, [pc, #528]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee8:	4a82      	ldr	r2, [pc, #520]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003eea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003eee:	4b7f      	ldr	r3, [pc, #508]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	4a7e      	ldr	r2, [pc, #504]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8003ef8:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	4a7d      	ldr	r2, [pc, #500]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8003f02:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f08:	4a78      	ldr	r2, [pc, #480]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8003f0e:	4b77      	ldr	r3, [pc, #476]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f14:	4a77      	ldr	r2, [pc, #476]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94


		t = t + sample_time_500;
 8003f1a:	4b7c      	ldr	r3, [pc, #496]	; (800410c <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8003f1c:	ed93 7a00 	vldr	s14, [r3]
 8003f20:	4b7b      	ldr	r3, [pc, #492]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 8003f22:	edd3 7a00 	vldr	s15, [r3]
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	4b78      	ldr	r3, [pc, #480]	; (800410c <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8003f2c:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time )
 8003f30:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8003f32:	ed93 7a00 	vldr	s14, [r3]
 8003f36:	4b77      	ldr	r3, [pc, #476]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f44:	bfac      	ite	ge
 8003f46:	2301      	movge	r3, #1
 8003f48:	2300      	movlt	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d040      	beq.n	8003fd2 <HAL_TIM_PeriodElapsedCallback+0xbc2>
			{
			t = (int)0;
 8003f50:	4b6e      	ldr	r3, [pc, #440]	; (800410c <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8003f58:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8003f62:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 8003f6c:	4b5f      	ldr	r3, [pc, #380]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8003f76:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 8003f80:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 8003f88:	4b5a      	ldr	r3, [pc, #360]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 8003f90:	4b56      	ldr	r3, [pc, #344]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8003f9a:	4b56      	ldr	r3, [pc, #344]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint1.Old_p = 0;
 8003fa4:	4b51      	ldr	r3, [pc, #324]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint1.Old_v = 0;
 8003fb8:	4b4c      	ldr	r3, [pc, #304]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 8003fc2:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 8003fcc:	4b52      	ldr	r3, [pc, #328]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
			}


	}
	if(htim == &htim17){
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a51      	ldr	r2, [pc, #324]	; (800411c <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	f040 8083 	bne.w	80040e2 <HAL_TIM_PeriodElapsedCallback+0xcd2>
		uint8_t encoder_state[12] = {
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 16) & 0xFF),
 8003fdc:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fde:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe6:	ee17 3a90 	vmov	r3, s15
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	141b      	asrs	r3, r3, #16
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
		};
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	733b      	strb	r3, [r7, #12]
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 8) & 0xFF),
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003ff4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ffc:	ee17 3a90 	vmov	r3, s15
 8004000:	b21b      	sxth	r3, r3
 8004002:	121b      	asrs	r3, r3, #8
		};
 8004004:	b2db      	uxtb	r3, r3
 8004006:	737b      	strb	r3, [r7, #13]
				(uint8_t)(((int16_t)fcb_joint1.Encoder) & 0xFF),
 8004008:	4b38      	ldr	r3, [pc, #224]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 800400a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800400e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004012:	ee17 3a90 	vmov	r3, s15
 8004016:	b21b      	sxth	r3, r3
		};
 8004018:	b2db      	uxtb	r3, r3
 800401a:	73bb      	strb	r3, [r7, #14]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 16) & 0xFF),
 800401c:	4b37      	ldr	r3, [pc, #220]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 800401e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004026:	ee17 3a90 	vmov	r3, s15
 800402a:	141b      	asrs	r3, r3, #16
		};
 800402c:	b2db      	uxtb	r3, r3
 800402e:	73fb      	strb	r3, [r7, #15]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 8) & 0xFF),
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8004032:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800403a:	ee17 3a90 	vmov	r3, s15
 800403e:	121b      	asrs	r3, r3, #8
		};
 8004040:	b2db      	uxtb	r3, r3
 8004042:	743b      	strb	r3, [r7, #16]
				(uint8_t)(((int32_t)fcb_joint2.Encoder) & 0xFF),
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8004046:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800404a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404e:	edc7 7a00 	vstr	s15, [r7]
		};
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	747b      	strb	r3, [r7, #17]
				(uint8_t)(((int32_t)fcb_joint3.Encoder >> 16) & 0xFF),
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800405a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800405e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004062:	ee17 3a90 	vmov	r3, s15
 8004066:	141b      	asrs	r3, r3, #16
		};
 8004068:	b2db      	uxtb	r3, r3
 800406a:	74bb      	strb	r3, [r7, #18]
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800406e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004076:	ee17 3a90 	vmov	r3, s15
 800407a:	b21b      	sxth	r3, r3
 800407c:	121b      	asrs	r3, r3, #8
		};
 800407e:	b2db      	uxtb	r3, r3
 8004080:	74fb      	strb	r3, [r7, #19]
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004084:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800408c:	ee17 3a90 	vmov	r3, s15
 8004090:	b21b      	sxth	r3, r3
		};
 8004092:	b2db      	uxtb	r3, r3
 8004094:	753b      	strb	r3, [r7, #20]
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8004098:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800409c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a0:	ee17 3a90 	vmov	r3, s15
 80040a4:	141b      	asrs	r3, r3, #16
		};
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	757b      	strb	r3, [r7, #21]
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 80040ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b4:	ee17 3a90 	vmov	r3, s15
 80040b8:	b21b      	sxth	r3, r3
 80040ba:	121b      	asrs	r3, r3, #8
		};
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	75bb      	strb	r3, [r7, #22]
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 80040c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ca:	ee17 3a90 	vmov	r3, s15
 80040ce:	b21b      	sxth	r3, r3
		};
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&encoder_state, 12);
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	220c      	movs	r2, #12
 80040da:	4619      	mov	r1, r3
 80040dc:	4811      	ldr	r0, [pc, #68]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 80040de:	f009 ff35 	bl	800df4c <HAL_UART_Transmit_DMA>
	}
}
 80040e2:	bf00      	nop
 80040e4:	3728      	adds	r7, #40	; 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	24000534 	.word	0x24000534
 80040f0:	24000494 	.word	0x24000494
 80040f4:	240006fc 	.word	0x240006fc
 80040f8:	240004e4 	.word	0x240004e4
 80040fc:	24000618 	.word	0x24000618
 8004100:	240004bc 	.word	0x240004bc
 8004104:	00000000 	.word	0x00000000
 8004108:	2400050c 	.word	0x2400050c
 800410c:	24000bb4 	.word	0x24000bb4
 8004110:	24000208 	.word	0x24000208
 8004114:	24000ab0 	.word	0x24000ab0
 8004118:	24000aac 	.word	0x24000aac
 800411c:	24000d24 	.word	0x24000d24
 8004120:	240007e0 	.word	0x240007e0
 8004124:	240014e8 	.word	0x240014e8

08004128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800412c:	f002 f9c6 	bl	80064bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004130:	f000 fa10 	bl	8004554 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004134:	f7fe f99c 	bl	8002470 <MX_GPIO_Init>
  MX_DMA_Init();
 8004138:	f7fe f94a 	bl	80023d0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800413c:	f001 fe5c 	bl	8005df8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004140:	f000 ff8a 	bl	8005058 <MX_TIM2_Init>
  MX_UART4_Init();
 8004144:	f001 fd6a 	bl	8005c1c <MX_UART4_Init>
  MX_TIM4_Init();
 8004148:	f001 f876 	bl	8005238 <MX_TIM4_Init>
  MX_SPI3_Init();
 800414c:	f000 fba6 	bl	800489c <MX_SPI3_Init>
  MX_TIM1_Init();
 8004150:	f000 fed4 	bl	8004efc <MX_TIM1_Init>
  MX_TIM3_Init();
 8004154:	f000 fff8 	bl	8005148 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004158:	f001 f8e6 	bl	8005328 <MX_TIM5_Init>
  MX_TIM15_Init();
 800415c:	f001 fa20 	bl	80055a0 <MX_TIM15_Init>
  MX_CRC_Init();
 8004160:	f7fe f8e6 	bl	8002330 <MX_CRC_Init>
  MX_UART7_Init();
 8004164:	f001 fdae 	bl	8005cc4 <MX_UART7_Init>
  MX_TIM6_Init();
 8004168:	f001 f92c 	bl	80053c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800416c:	f001 f960 	bl	8005430 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004170:	f001 f994 	bl	800549c <MX_TIM12_Init>
  MX_TIM13_Init();
 8004174:	f001 f9cc 	bl	8005510 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004178:	f001 f9ee 	bl	8005558 <MX_TIM14_Init>
  MX_TIM16_Init();
 800417c:	f001 fab4 	bl	80056e8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004180:	f001 fdee 	bl	8005d60 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8004184:	f001 fad6 	bl	8005734 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8004188:	2214      	movs	r2, #20
 800418a:	496a      	ldr	r1, [pc, #424]	; (8004334 <main+0x20c>)
 800418c:	486a      	ldr	r0, [pc, #424]	; (8004338 <main+0x210>)
 800418e:	f00b fe3a 	bl	800fe06 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8004192:	4b6a      	ldr	r3, [pc, #424]	; (800433c <main+0x214>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6a      	ldr	r2, [pc, #424]	; (8004340 <main+0x218>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d04a      	beq.n	8004232 <main+0x10a>
 800419c:	4b67      	ldr	r3, [pc, #412]	; (800433c <main+0x214>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a68      	ldr	r2, [pc, #416]	; (8004344 <main+0x21c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d045      	beq.n	8004232 <main+0x10a>
 80041a6:	4b65      	ldr	r3, [pc, #404]	; (800433c <main+0x214>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a67      	ldr	r2, [pc, #412]	; (8004348 <main+0x220>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d040      	beq.n	8004232 <main+0x10a>
 80041b0:	4b62      	ldr	r3, [pc, #392]	; (800433c <main+0x214>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a65      	ldr	r2, [pc, #404]	; (800434c <main+0x224>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d03b      	beq.n	8004232 <main+0x10a>
 80041ba:	4b60      	ldr	r3, [pc, #384]	; (800433c <main+0x214>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a64      	ldr	r2, [pc, #400]	; (8004350 <main+0x228>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d036      	beq.n	8004232 <main+0x10a>
 80041c4:	4b5d      	ldr	r3, [pc, #372]	; (800433c <main+0x214>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a62      	ldr	r2, [pc, #392]	; (8004354 <main+0x22c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d031      	beq.n	8004232 <main+0x10a>
 80041ce:	4b5b      	ldr	r3, [pc, #364]	; (800433c <main+0x214>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a61      	ldr	r2, [pc, #388]	; (8004358 <main+0x230>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d02c      	beq.n	8004232 <main+0x10a>
 80041d8:	4b58      	ldr	r3, [pc, #352]	; (800433c <main+0x214>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5f      	ldr	r2, [pc, #380]	; (800435c <main+0x234>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d027      	beq.n	8004232 <main+0x10a>
 80041e2:	4b56      	ldr	r3, [pc, #344]	; (800433c <main+0x214>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5e      	ldr	r2, [pc, #376]	; (8004360 <main+0x238>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d022      	beq.n	8004232 <main+0x10a>
 80041ec:	4b53      	ldr	r3, [pc, #332]	; (800433c <main+0x214>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5c      	ldr	r2, [pc, #368]	; (8004364 <main+0x23c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01d      	beq.n	8004232 <main+0x10a>
 80041f6:	4b51      	ldr	r3, [pc, #324]	; (800433c <main+0x214>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a5b      	ldr	r2, [pc, #364]	; (8004368 <main+0x240>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <main+0x10a>
 8004200:	4b4e      	ldr	r3, [pc, #312]	; (800433c <main+0x214>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a59      	ldr	r2, [pc, #356]	; (800436c <main+0x244>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <main+0x10a>
 800420a:	4b4c      	ldr	r3, [pc, #304]	; (800433c <main+0x214>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a58      	ldr	r2, [pc, #352]	; (8004370 <main+0x248>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <main+0x10a>
 8004214:	4b49      	ldr	r3, [pc, #292]	; (800433c <main+0x214>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a56      	ldr	r2, [pc, #344]	; (8004374 <main+0x24c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <main+0x10a>
 800421e:	4b47      	ldr	r3, [pc, #284]	; (800433c <main+0x214>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a55      	ldr	r2, [pc, #340]	; (8004378 <main+0x250>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <main+0x10a>
 8004228:	4b44      	ldr	r3, [pc, #272]	; (800433c <main+0x214>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a53      	ldr	r2, [pc, #332]	; (800437c <main+0x254>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d108      	bne.n	8004244 <main+0x11c>
 8004232:	4b42      	ldr	r3, [pc, #264]	; (800433c <main+0x214>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b40      	ldr	r3, [pc, #256]	; (800433c <main+0x214>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0208 	bic.w	r2, r2, #8
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e007      	b.n	8004254 <main+0x12c>
 8004244:	4b3d      	ldr	r3, [pc, #244]	; (800433c <main+0x214>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b3c      	ldr	r3, [pc, #240]	; (800433c <main+0x214>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0204 	bic.w	r2, r2, #4
 8004252:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8004254:	2201      	movs	r2, #1
 8004256:	2101      	movs	r1, #1
 8004258:	4849      	ldr	r0, [pc, #292]	; (8004380 <main+0x258>)
 800425a:	f005 fcf5 	bl	8009c48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800425e:	2201      	movs	r2, #1
 8004260:	2102      	movs	r1, #2
 8004262:	4848      	ldr	r0, [pc, #288]	; (8004384 <main+0x25c>)
 8004264:	f005 fcf0 	bl	8009c48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004268:	2200      	movs	r2, #0
 800426a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800426e:	4844      	ldr	r0, [pc, #272]	; (8004380 <main+0x258>)
 8004270:	f005 fcea 	bl	8009c48 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8004274:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80043a8 <main+0x280>
 8004278:	4843      	ldr	r0, [pc, #268]	; (8004388 <main+0x260>)
 800427a:	f7fd fd69 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 800427e:	2108      	movs	r1, #8
 8004280:	4841      	ldr	r0, [pc, #260]	; (8004388 <main+0x260>)
 8004282:	f7fe f801 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8004286:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800438c <main+0x264>
 800428a:	483f      	ldr	r0, [pc, #252]	; (8004388 <main+0x260>)
 800428c:	f7fd ffd8 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8004290:	483d      	ldr	r0, [pc, #244]	; (8004388 <main+0x260>)
 8004292:	f7fd fd4c 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8004296:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80043a8 <main+0x280>
 800429a:	483d      	ldr	r0, [pc, #244]	; (8004390 <main+0x268>)
 800429c:	f7fd fd58 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 80042a0:	2110      	movs	r1, #16
 80042a2:	483b      	ldr	r0, [pc, #236]	; (8004390 <main+0x268>)
 80042a4:	f7fd fff0 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80042a8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80042ac:	4838      	ldr	r0, [pc, #224]	; (8004390 <main+0x268>)
 80042ae:	f7fd ffc7 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80042b2:	4837      	ldr	r0, [pc, #220]	; (8004390 <main+0x268>)
 80042b4:	f7fd fd3b 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80042b8:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80043a8 <main+0x280>
 80042bc:	4835      	ldr	r0, [pc, #212]	; (8004394 <main+0x26c>)
 80042be:	f7fd fd47 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80042c2:	2110      	movs	r1, #16
 80042c4:	4833      	ldr	r0, [pc, #204]	; (8004394 <main+0x26c>)
 80042c6:	f7fd ffdf 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80042ca:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80042ce:	4831      	ldr	r0, [pc, #196]	; (8004394 <main+0x26c>)
 80042d0:	f7fd ffb6 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80042d4:	482f      	ldr	r0, [pc, #188]	; (8004394 <main+0x26c>)
 80042d6:	f7fd fd2a 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 80042da:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80043a8 <main+0x280>
 80042de:	482e      	ldr	r0, [pc, #184]	; (8004398 <main+0x270>)
 80042e0:	f7fd fd36 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(1);
 80042e4:	2101      	movs	r1, #1
 80042e6:	482c      	ldr	r0, [pc, #176]	; (8004398 <main+0x270>)
 80042e8:	f7fd ffce 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 80042ec:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80042f0:	4829      	ldr	r0, [pc, #164]	; (8004398 <main+0x270>)
 80042f2:	f7fd ffa5 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 80042f6:	4828      	ldr	r0, [pc, #160]	; (8004398 <main+0x270>)
 80042f8:	f7fd fd19 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(120);
 80042fc:	2178      	movs	r1, #120	; 0x78
 80042fe:	4827      	ldr	r0, [pc, #156]	; (800439c <main+0x274>)
 8004300:	f7fd fc5f 	bl	8001bc2 <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(50);
 8004304:	2132      	movs	r1, #50	; 0x32
 8004306:	4825      	ldr	r0, [pc, #148]	; (800439c <main+0x274>)
 8004308:	f7fd fc4a 	bl	8001ba0 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 800430c:	4823      	ldr	r0, [pc, #140]	; (800439c <main+0x274>)
 800430e:	f7fd fa72 	bl	80017f6 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 8004312:	4822      	ldr	r0, [pc, #136]	; (800439c <main+0x274>)
 8004314:	f7fd fc66 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
	while(!Limit_sw_Z_Top)
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <main+0x278>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f083 0301 	eor.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d041      	beq.n	80043ac <main+0x284>
	{
		stepperJ2.StepperSetFrequency(1200.0f);
 8004328:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80043a4 <main+0x27c>
 800432c:	4818      	ldr	r0, [pc, #96]	; (8004390 <main+0x268>)
 800432e:	f7fd fd0f 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	while(!Limit_sw_Z_Top)
 8004332:	e7f1      	b.n	8004318 <main+0x1f0>
 8004334:	24000ae8 	.word	0x24000ae8
 8004338:	24001260 	.word	0x24001260
 800433c:	240011e8 	.word	0x240011e8
 8004340:	40020010 	.word	0x40020010
 8004344:	40020028 	.word	0x40020028
 8004348:	40020040 	.word	0x40020040
 800434c:	40020058 	.word	0x40020058
 8004350:	40020070 	.word	0x40020070
 8004354:	40020088 	.word	0x40020088
 8004358:	400200a0 	.word	0x400200a0
 800435c:	400200b8 	.word	0x400200b8
 8004360:	40020410 	.word	0x40020410
 8004364:	40020428 	.word	0x40020428
 8004368:	40020440 	.word	0x40020440
 800436c:	40020458 	.word	0x40020458
 8004370:	40020470 	.word	0x40020470
 8004374:	40020488 	.word	0x40020488
 8004378:	400204a0 	.word	0x400204a0
 800437c:	400204b8 	.word	0x400204b8
 8004380:	58020400 	.word	0x58020400
 8004384:	58021000 	.word	0x58021000
 8004388:	24000494 	.word	0x24000494
 800438c:	42280000 	.word	0x42280000
 8004390:	240004bc 	.word	0x240004bc
 8004394:	240004e4 	.word	0x240004e4
 8004398:	2400050c 	.word	0x2400050c
 800439c:	24000a8c 	.word	0x24000a8c
 80043a0:	24000aff 	.word	0x24000aff
 80043a4:	44960000 	.word	0x44960000
 80043a8:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 80043ac:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80043a8 <main+0x280>
 80043b0:	4855      	ldr	r0, [pc, #340]	; (8004508 <main+0x3e0>)
 80043b2:	f7fd fccd 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 80043b6:	20c8      	movs	r0, #200	; 0xc8
 80043b8:	f002 f912 	bl	80065e0 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 80043bc:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800450c <main+0x3e4>
 80043c0:	4851      	ldr	r0, [pc, #324]	; (8004508 <main+0x3e0>)
 80043c2:	f7fd fcc5 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 80043c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80043ca:	f002 f909 	bl	80065e0 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 80043ce:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8004510 <main+0x3e8>
 80043d2:	484d      	ldr	r0, [pc, #308]	; (8004508 <main+0x3e0>)
 80043d4:	f7fd fcbc 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 80043d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043dc:	f002 f900 	bl	80065e0 <HAL_Delay>
	gripper.GripperOpen();
 80043e0:	484c      	ldr	r0, [pc, #304]	; (8004514 <main+0x3ec>)
 80043e2:	f7fd fc15 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 80043e6:	4b4c      	ldr	r3, [pc, #304]	; (8004518 <main+0x3f0>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 80043ec:	484b      	ldr	r0, [pc, #300]	; (800451c <main+0x3f4>)
 80043ee:	f7fc f96a 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80043f2:	484a      	ldr	r0, [pc, #296]	; (800451c <main+0x3f4>)
 80043f4:	f7fc f996 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b48      	ldr	r3, [pc, #288]	; (8004520 <main+0x3f8>)
 80043fe:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004400:	4b47      	ldr	r3, [pc, #284]	; (8004520 <main+0x3f8>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d110      	bne.n	800442a <main+0x302>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 8004408:	4844      	ldr	r0, [pc, #272]	; (800451c <main+0x3f4>)
 800440a:	f7fc f9ef 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800440e:	4603      	mov	r3, r0
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004418:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8004500 <main+0x3d8>
 800441c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004420:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004424:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <main+0x3fc>)
 8004426:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ2.AMT21_Read();
 800442a:	483f      	ldr	r0, [pc, #252]	; (8004528 <main+0x400>)
 800442c:	f7fc f94b 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004430:	483d      	ldr	r0, [pc, #244]	; (8004528 <main+0x400>)
 8004432:	f7fc f977 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004436:	4603      	mov	r3, r0
 8004438:	461a      	mov	r2, r3
 800443a:	4b3c      	ldr	r3, [pc, #240]	; (800452c <main+0x404>)
 800443c:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 800443e:	4b3b      	ldr	r3, [pc, #236]	; (800452c <main+0x404>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d115      	bne.n	8004472 <main+0x34a>
		encoderJ2.unwarp();
 8004446:	4838      	ldr	r0, [pc, #224]	; (8004528 <main+0x400>)
 8004448:	f7fc f9f2 	bl	8000830 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 800444c:	4836      	ldr	r0, [pc, #216]	; (8004528 <main+0x400>)
 800444e:	f7fc fa41 	bl	80008d4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;}
 8004452:	4835      	ldr	r0, [pc, #212]	; (8004528 <main+0x400>)
 8004454:	f7fc fa4b 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8004458:	ee07 0a90 	vmov	s15, r0
 800445c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004460:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8004500 <main+0x3d8>
 8004464:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004468:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800446c:	4b30      	ldr	r3, [pc, #192]	; (8004530 <main+0x408>)
 800446e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ3.AMT21_Read();
 8004472:	4830      	ldr	r0, [pc, #192]	; (8004534 <main+0x40c>)
 8004474:	f7fc f927 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004478:	482e      	ldr	r0, [pc, #184]	; (8004534 <main+0x40c>)
 800447a:	f7fc f953 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800447e:	4603      	mov	r3, r0
 8004480:	461a      	mov	r2, r3
 8004482:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <main+0x410>)
 8004484:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8004486:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <main+0x410>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d110      	bne.n	80044b0 <main+0x388>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 800448e:	4829      	ldr	r0, [pc, #164]	; (8004534 <main+0x40c>)
 8004490:	f7fc f9ac 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8004494:	4603      	mov	r3, r0
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800449e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8004500 <main+0x3d8>
 80044a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80044a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <main+0x414>)
 80044ac:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ4.AMT21_Read();
 80044b0:	4823      	ldr	r0, [pc, #140]	; (8004540 <main+0x418>)
 80044b2:	f7fc f908 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80044b6:	4822      	ldr	r0, [pc, #136]	; (8004540 <main+0x418>)
 80044b8:	f7fc f934 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <main+0x41c>)
 80044c2:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <main+0x41c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d110      	bne.n	80044ee <main+0x3c6>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 80044cc:	481c      	ldr	r0, [pc, #112]	; (8004540 <main+0x418>)
 80044ce:	f7fc f98d 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80044d2:	4603      	mov	r3, r0
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80044dc:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8004500 <main+0x3d8>
 80044e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80044e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <main+0x420>)
 80044ea:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 80044ee:	4817      	ldr	r0, [pc, #92]	; (800454c <main+0x424>)
 80044f0:	f008 f8aa 	bl	800c648 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 80044f4:	4816      	ldr	r0, [pc, #88]	; (8004550 <main+0x428>)
 80044f6:	f008 f8a7 	bl	800c648 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
 80044fa:	e7fe      	b.n	80044fa <main+0x3d2>
 80044fc:	f3af 8000 	nop.w
 8004500:	645a1cac 	.word	0x645a1cac
 8004504:	4004df3b 	.word	0x4004df3b
 8004508:	240004bc 	.word	0x240004bc
 800450c:	c4480000 	.word	0xc4480000
 8004510:	00000000 	.word	0x00000000
 8004514:	24000a8c 	.word	0x24000a8c
 8004518:	24000aff 	.word	0x24000aff
 800451c:	24000424 	.word	0x24000424
 8004520:	24000aa8 	.word	0x24000aa8
 8004524:	24000534 	.word	0x24000534
 8004528:	24000440 	.word	0x24000440
 800452c:	24000aa9 	.word	0x24000aa9
 8004530:	24000618 	.word	0x24000618
 8004534:	2400045c 	.word	0x2400045c
 8004538:	24000aaa 	.word	0x24000aaa
 800453c:	240006fc 	.word	0x240006fc
 8004540:	24000478 	.word	0x24000478
 8004544:	24000aab 	.word	0x24000aab
 8004548:	240007e0 	.word	0x240007e0
 800454c:	24000fd0 	.word	0x24000fd0
 8004550:	24000d24 	.word	0x24000d24

08004554 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b09c      	sub	sp, #112	; 0x70
 8004558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800455a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455e:	224c      	movs	r2, #76	; 0x4c
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f00d f85c 	bl	8011620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	2220      	movs	r2, #32
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f00d f856 	bl	8011620 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004574:	2002      	movs	r0, #2
 8004576:	f005 fb9b 	bl	8009cb0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800457a:	2300      	movs	r3, #0
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	4b38      	ldr	r3, [pc, #224]	; (8004660 <_Z18SystemClock_Configv+0x10c>)
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	4a37      	ldr	r2, [pc, #220]	; (8004660 <_Z18SystemClock_Configv+0x10c>)
 8004584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004588:	6193      	str	r3, [r2, #24]
 800458a:	4b35      	ldr	r3, [pc, #212]	; (8004660 <_Z18SystemClock_Configv+0x10c>)
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4b33      	ldr	r3, [pc, #204]	; (8004664 <_Z18SystemClock_Configv+0x110>)
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4a32      	ldr	r2, [pc, #200]	; (8004664 <_Z18SystemClock_Configv+0x110>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045a0:	4b30      	ldr	r3, [pc, #192]	; (8004664 <_Z18SystemClock_Configv+0x110>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80045ac:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <_Z18SystemClock_Configv+0x10c>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d000      	beq.n	80045c6 <_Z18SystemClock_Configv+0x72>
 80045c4:	e7f2      	b.n	80045ac <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80045c6:	2302      	movs	r3, #2
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045d2:	2302      	movs	r3, #2
 80045d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80045d6:	2300      	movs	r3, #0
 80045d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80045da:	2304      	movs	r3, #4
 80045dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80045de:	233c      	movs	r3, #60	; 0x3c
 80045e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80045e2:	2302      	movs	r3, #2
 80045e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80045e6:	2306      	movs	r3, #6
 80045e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80045ea:	2302      	movs	r3, #2
 80045ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80045ee:	230c      	movs	r3, #12
 80045f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045fe:	4618      	mov	r0, r3
 8004600:	f005 fb90 	bl	8009d24 <HAL_RCC_OscConfig>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004614:	f000 f856 	bl	80046c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004618:	233f      	movs	r3, #63	; 0x3f
 800461a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800461c:	2303      	movs	r3, #3
 800461e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004624:	2308      	movs	r3, #8
 8004626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004628:	2340      	movs	r3, #64	; 0x40
 800462a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	2104      	movs	r1, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f005 ff9c 	bl	800a57c <HAL_RCC_ClockConfig>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	bf14      	ite	ne
 800464a:	2301      	movne	r3, #1
 800464c:	2300      	moveq	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004654:	f000 f836 	bl	80046c4 <Error_Handler>
  }
}
 8004658:	bf00      	nop
 800465a:	3770      	adds	r7, #112	; 0x70
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	58024800 	.word	0x58024800
 8004664:	58000400 	.word	0x58000400

08004668 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//
//}
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM_Z_BOTTOM_Pin){	// Limit Switch Bottom Z-axis
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004678:	d102      	bne.n	8004680 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_Z_TOP_Pin){	// Limit Switch Top Z-axis
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004686:	d102      	bne.n	800468e <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_GPIO_EXTI_Callback+0x50>)
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_SERVO_Pin){	// Limit Switch Servo
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d102      	bne.n	800469a <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_GPIO_EXTI_Callback+0x54>)
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_LED_Pin){	// Limit Switch LED on Cabinet
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d102      	bne.n	80046a6 <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_GPIO_EXTI_Callback+0x58>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
	}


}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	24000afe 	.word	0x24000afe
 80046b8:	24000aff 	.word	0x24000aff
 80046bc:	24000b00 	.word	0x24000b00
 80046c0:	24000b01 	.word	0x24000b01

080046c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80046c8:	2200      	movs	r2, #0
 80046ca:	2101      	movs	r1, #1
 80046cc:	4808      	ldr	r0, [pc, #32]	; (80046f0 <Error_Handler+0x2c>)
 80046ce:	f005 fabb 	bl	8009c48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2102      	movs	r1, #2
 80046d6:	4807      	ldr	r0, [pc, #28]	; (80046f4 <Error_Handler+0x30>)
 80046d8:	f005 fab6 	bl	8009c48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <Error_Handler+0x2c>)
 80046e4:	f005 fab0 	bl	8009c48 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046e8:	b672      	cpsid	i
}
 80046ea:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80046ec:	e7fe      	b.n	80046ec <Error_Handler+0x28>
 80046ee:	bf00      	nop
 80046f0:	58020400 	.word	0x58020400
 80046f4:	58021000 	.word	0x58021000

080046f8 <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d152      	bne.n	80047ae <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800470e:	4293      	cmp	r3, r2
 8004710:	d14d      	bne.n	80047ae <_Z41__static_initialization_and_destruction_0ii+0xb6>
AMT21 encoderJ1(&huart4, 0xD4);
 8004712:	22d4      	movs	r2, #212	; 0xd4
 8004714:	4942      	ldr	r1, [pc, #264]	; (8004820 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004716:	4843      	ldr	r0, [pc, #268]	; (8004824 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004718:	f7fb ffb6 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 800471c:	22b4      	movs	r2, #180	; 0xb4
 800471e:	4940      	ldr	r1, [pc, #256]	; (8004820 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004720:	4841      	ldr	r0, [pc, #260]	; (8004828 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004722:	f7fb ffb1 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004726:	22c4      	movs	r2, #196	; 0xc4
 8004728:	493d      	ldr	r1, [pc, #244]	; (8004820 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800472a:	4840      	ldr	r0, [pc, #256]	; (800482c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800472c:	f7fb ffac 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004730:	22a4      	movs	r2, #164	; 0xa4
 8004732:	493b      	ldr	r1, [pc, #236]	; (8004820 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004734:	483e      	ldr	r0, [pc, #248]	; (8004830 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004736:	f7fb ffa7 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 800473a:	2320      	movs	r3, #32
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4b3d      	ldr	r3, [pc, #244]	; (8004834 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004740:	2200      	movs	r2, #0
 8004742:	493d      	ldr	r1, [pc, #244]	; (8004838 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004744:	483d      	ldr	r0, [pc, #244]	; (800483c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004746:	f7fd faa5 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 800474a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004752:	2204      	movs	r2, #4
 8004754:	493b      	ldr	r1, [pc, #236]	; (8004844 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004756:	483c      	ldr	r0, [pc, #240]	; (8004848 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004758:	f7fd fa9c 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800475c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4b37      	ldr	r3, [pc, #220]	; (8004840 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004764:	2204      	movs	r2, #4
 8004766:	4939      	ldr	r1, [pc, #228]	; (800484c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004768:	4839      	ldr	r0, [pc, #228]	; (8004850 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800476a:	f7fd fa93 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 800476e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004776:	2208      	movs	r2, #8
 8004778:	4936      	ldr	r1, [pc, #216]	; (8004854 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800477a:	4837      	ldr	r0, [pc, #220]	; (8004858 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800477c:	f7fd fa8a 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004780:	4836      	ldr	r0, [pc, #216]	; (800485c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004782:	f7fc f8e5 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004786:	4836      	ldr	r0, [pc, #216]	; (8004860 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004788:	f7fc f8e2 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 800478c:	4835      	ldr	r0, [pc, #212]	; (8004864 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800478e:	f7fc f8df 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004792:	4835      	ldr	r0, [pc, #212]	; (8004868 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004794:	f7fc f8dc 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004798:	4834      	ldr	r0, [pc, #208]	; (800486c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800479a:	f7fc f8d9 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 800479e:	4834      	ldr	r0, [pc, #208]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80047a0:	f7fc f8d6 	bl	8000950 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 80047a4:	2208      	movs	r2, #8
 80047a6:	4933      	ldr	r1, [pc, #204]	; (8004874 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80047a8:	4833      	ldr	r0, [pc, #204]	; (8004878 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80047aa:	f7fc ffe9 	bl	8001780 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d131      	bne.n	8004818 <_Z41__static_initialization_and_destruction_0ii+0x120>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d12c      	bne.n	8004818 <_Z41__static_initialization_and_destruction_0ii+0x120>
 80047be:	482e      	ldr	r0, [pc, #184]	; (8004878 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80047c0:	f7fd f80e 	bl	80017e0 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 80047c4:	482a      	ldr	r0, [pc, #168]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80047c6:	f7fc f933 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 80047ca:	4828      	ldr	r0, [pc, #160]	; (800486c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80047cc:	f7fc f930 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 80047d0:	4825      	ldr	r0, [pc, #148]	; (8004868 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80047d2:	f7fc f92d 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 80047d6:	4823      	ldr	r0, [pc, #140]	; (8004864 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80047d8:	f7fc f92a 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 80047dc:	4820      	ldr	r0, [pc, #128]	; (8004860 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80047de:	f7fc f927 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 80047e2:	481e      	ldr	r0, [pc, #120]	; (800485c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80047e4:	f7fc f924 	bl	8000a30 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 80047e8:	481b      	ldr	r0, [pc, #108]	; (8004858 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80047ea:	f7fd fa95 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80047ee:	4818      	ldr	r0, [pc, #96]	; (8004850 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80047f0:	f7fd fa92 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80047f4:	4814      	ldr	r0, [pc, #80]	; (8004848 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80047f6:	f7fd fa8f 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80047fa:	4810      	ldr	r0, [pc, #64]	; (800483c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80047fc:	f7fd fa8c 	bl	8001d18 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004800:	480b      	ldr	r0, [pc, #44]	; (8004830 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004802:	f7fb ff55 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004806:	4809      	ldr	r0, [pc, #36]	; (800482c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004808:	f7fb ff52 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 800480c:	4806      	ldr	r0, [pc, #24]	; (8004828 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800480e:	f7fb ff4f 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004812:	4804      	ldr	r0, [pc, #16]	; (8004824 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004814:	f7fb ff4c 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	24001458 	.word	0x24001458
 8004824:	24000424 	.word	0x24000424
 8004828:	24000440 	.word	0x24000440
 800482c:	2400045c 	.word	0x2400045c
 8004830:	24000478 	.word	0x24000478
 8004834:	58020400 	.word	0x58020400
 8004838:	24000dbc 	.word	0x24000dbc
 800483c:	24000494 	.word	0x24000494
 8004840:	58021000 	.word	0x58021000
 8004844:	24000ea0 	.word	0x24000ea0
 8004848:	240004bc 	.word	0x240004bc
 800484c:	24000cd8 	.word	0x24000cd8
 8004850:	240004e4 	.word	0x240004e4
 8004854:	24000eec 	.word	0x24000eec
 8004858:	2400050c 	.word	0x2400050c
 800485c:	24000534 	.word	0x24000534
 8004860:	24000618 	.word	0x24000618
 8004864:	240006fc 	.word	0x240006fc
 8004868:	240007e0 	.word	0x240007e0
 800486c:	240008c4 	.word	0x240008c4
 8004870:	240009a8 	.word	0x240009a8
 8004874:	24000c8c 	.word	0x24000c8c
 8004878:	24000a8c 	.word	0x24000a8c

0800487c <_GLOBAL__sub_I_TIM_MS>:
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
 8004880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004884:	2001      	movs	r0, #1
 8004886:	f7ff ff37 	bl	80046f8 <_Z41__static_initialization_and_destruction_0ii>
 800488a:	bd80      	pop	{r7, pc}

0800488c <_GLOBAL__sub_D_TIM_MS>:
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
 8004890:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004894:	2000      	movs	r0, #0
 8004896:	f7ff ff2f 	bl	80046f8 <_Z41__static_initialization_and_destruction_0ii>
 800489a:	bd80      	pop	{r7, pc}

0800489c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048a2:	4a28      	ldr	r2, [pc, #160]	; (8004944 <MX_SPI3_Init+0xa8>)
 80048a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80048ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80048ae:	4b24      	ldr	r3, [pc, #144]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80048b4:	4b22      	ldr	r3, [pc, #136]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048b6:	2203      	movs	r2, #3
 80048b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80048cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048dc:	2200      	movs	r2, #0
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e0:	4b17      	ldr	r3, [pc, #92]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <MX_SPI3_Init+0xa4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <MX_SPI3_Init+0xa4>)
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <MX_SPI3_Init+0xa4>)
 8004908:	2200      	movs	r2, #0
 800490a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <MX_SPI3_Init+0xa4>)
 800490e:	2200      	movs	r2, #0
 8004910:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <MX_SPI3_Init+0xa4>)
 8004914:	2200      	movs	r2, #0
 8004916:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004918:	4b09      	ldr	r3, [pc, #36]	; (8004940 <MX_SPI3_Init+0xa4>)
 800491a:	2200      	movs	r2, #0
 800491c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <MX_SPI3_Init+0xa4>)
 8004920:	2200      	movs	r2, #0
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <MX_SPI3_Init+0xa4>)
 8004926:	2200      	movs	r2, #0
 8004928:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800492a:	4805      	ldr	r0, [pc, #20]	; (8004940 <MX_SPI3_Init+0xa4>)
 800492c:	f007 fd14 	bl	800c358 <HAL_SPI_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8004936:	f7ff fec5 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800493a:	bf00      	nop
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	24000c04 	.word	0x24000c04
 8004944:	40003c00 	.word	0x40003c00

08004948 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0b8      	sub	sp, #224	; 0xe0
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004960:	f107 0310 	add.w	r3, r7, #16
 8004964:	22bc      	movs	r2, #188	; 0xbc
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f00c fe59 	bl	8011620 <memset>
  if(spiHandle->Instance==SPI3)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <HAL_SPI_MspInit+0xc0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d142      	bne.n	80049fe <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800497e:	2300      	movs	r3, #0
 8004980:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	4618      	mov	r0, r3
 8004988:	f006 f984 	bl	800ac94 <HAL_RCCEx_PeriphCLKConfig>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004992:	f7ff fe97 	bl	80046c4 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_SPI_MspInit+0xc4>)
 8004998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800499c:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <HAL_SPI_MspInit+0xc4>)
 800499e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049a6:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_SPI_MspInit+0xc4>)
 80049a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_SPI_MspInit+0xc4>)
 80049b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ba:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <HAL_SPI_MspInit+0xc4>)
 80049bc:	f043 0304 	orr.w	r3, r3, #4
 80049c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <HAL_SPI_MspInit+0xc4>)
 80049c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80049d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80049d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049ec:	2306      	movs	r3, #6
 80049ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80049f6:	4619      	mov	r1, r3
 80049f8:	4805      	ldr	r0, [pc, #20]	; (8004a10 <HAL_SPI_MspInit+0xc8>)
 80049fa:	f004 ff75 	bl	80098e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80049fe:	bf00      	nop
 8004a00:	37e0      	adds	r7, #224	; 0xe0
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40003c00 	.word	0x40003c00
 8004a0c:	58024400 	.word	0x58024400
 8004a10:	58020800 	.word	0x58020800

08004a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <HAL_MspInit+0x30>)
 8004a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a20:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <HAL_MspInit+0x30>)
 8004a22:	f043 0302 	orr.w	r3, r3, #2
 8004a26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_MspInit+0x30>)
 8004a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	58024400 	.word	0x58024400

08004a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a4c:	e7fe      	b.n	8004a4c <NMI_Handler+0x4>

08004a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a52:	e7fe      	b.n	8004a52 <HardFault_Handler+0x4>

08004a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a58:	e7fe      	b.n	8004a58 <MemManage_Handler+0x4>

08004a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a5e:	e7fe      	b.n	8004a5e <BusFault_Handler+0x4>

08004a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a64:	e7fe      	b.n	8004a64 <UsageFault_Handler+0x4>

08004a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a66:	b480      	push	{r7}
 8004a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a94:	f001 fd84 	bl	80065a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004a98:	f001 fee1 	bl	800685e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004aa4:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <DMA1_Stream0_IRQHandler+0x10>)
 8004aa6:	f003 fc0d 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	24001368 	.word	0x24001368

08004ab4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <DMA1_Stream1_IRQHandler+0x10>)
 8004aba:	f003 fc03 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	240011e8 	.word	0x240011e8

08004ac8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <DMA1_Stream2_IRQHandler+0x10>)
 8004ace:	f003 fbf9 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	240012f0 	.word	0x240012f0

08004adc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <DMA1_Stream3_IRQHandler+0x10>)
 8004ae2:	f003 fbef 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	24001068 	.word	0x24001068

08004af0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004af4:	4802      	ldr	r0, [pc, #8]	; (8004b00 <DMA1_Stream4_IRQHandler+0x10>)
 8004af6:	f003 fbe5 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	24001578 	.word	0x24001578

08004b04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004b08:	4802      	ldr	r0, [pc, #8]	; (8004b14 <DMA1_Stream5_IRQHandler+0x10>)
 8004b0a:	f003 fbdb 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	240010e0 	.word	0x240010e0

08004b18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004b1c:	4802      	ldr	r0, [pc, #8]	; (8004b28 <DMA1_Stream6_IRQHandler+0x10>)
 8004b1e:	f003 fbd1 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	240013e0 	.word	0x240013e0

08004b2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004b30:	2040      	movs	r0, #64	; 0x40
 8004b32:	f005 f8a2 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8004b36:	2080      	movs	r0, #128	; 0x80
 8004b38:	f005 f89f 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b44:	4802      	ldr	r0, [pc, #8]	; (8004b50 <USART2_IRQHandler+0x10>)
 8004b46:	f009 fa93 	bl	800e070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	240014e8 	.word	0x240014e8

08004b54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004b58:	4802      	ldr	r0, [pc, #8]	; (8004b64 <USART3_IRQHandler+0x10>)
 8004b5a:	f009 fa89 	bl	800e070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	24001260 	.word	0x24001260

08004b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004b6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004b70:	f005 f883 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004b74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004b78:	f005 f87f 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8004b7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b80:	f005 f87b 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004b84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004b88:	f005 f877 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b8c:	bf00      	nop
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004b94:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004b96:	f007 ff6d 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	24000f84 	.word	0x24000f84

08004ba4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004ba8:	4802      	ldr	r0, [pc, #8]	; (8004bb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004baa:	f007 ff63 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	24000e08 	.word	0x24000e08

08004bb8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004bbc:	4802      	ldr	r0, [pc, #8]	; (8004bc8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004bbe:	f007 ff59 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	24000f38 	.word	0x24000f38

08004bcc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004bd0:	4802      	ldr	r0, [pc, #8]	; (8004bdc <TIM5_IRQHandler+0x10>)
 8004bd2:	f007 ff4f 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	24000d70 	.word	0x24000d70

08004be0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004be4:	4802      	ldr	r0, [pc, #8]	; (8004bf0 <UART4_IRQHandler+0x10>)
 8004be6:	f009 fa43 	bl	800e070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	24001458 	.word	0x24001458

08004bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004bf8:	4802      	ldr	r0, [pc, #8]	; (8004c04 <TIM6_DAC_IRQHandler+0x10>)
 8004bfa:	f007 ff3b 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	24000e54 	.word	0x24000e54

08004c08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <TIM7_IRQHandler+0x10>)
 8004c0e:	f007 ff31 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	2400101c 	.word	0x2400101c

08004c1c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <UART7_IRQHandler+0x10>)
 8004c22:	f009 fa25 	bl	800e070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	24001158 	.word	0x24001158

08004c30 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004c34:	4802      	ldr	r0, [pc, #8]	; (8004c40 <TIM16_IRQHandler+0x10>)
 8004c36:	f007 ff1d 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	24000fd0 	.word	0x24000fd0

08004c44 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004c48:	4802      	ldr	r0, [pc, #8]	; (8004c54 <TIM17_IRQHandler+0x10>)
 8004c4a:	f007 ff13 	bl	800ca74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	24000d24 	.word	0x24000d24

08004c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
	return 1;
 8004c5c:	2301      	movs	r3, #1
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <_kill>:

int _kill(int pid, int sig)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c72:	f00c fcab 	bl	80115cc <__errno>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2216      	movs	r2, #22
 8004c7a:	601a      	str	r2, [r3, #0]
	return -1;
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_exit>:

void _exit (int status)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c90:	f04f 31ff 	mov.w	r1, #4294967295
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ffe7 	bl	8004c68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c9a:	e7fe      	b.n	8004c9a <_exit+0x12>

08004c9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e00a      	b.n	8004cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cae:	f3af 8000 	nop.w
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	60ba      	str	r2, [r7, #8]
 8004cba:	b2ca      	uxtb	r2, r1
 8004cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	dbf0      	blt.n	8004cae <_read+0x12>
	}

return len;
 8004ccc:	687b      	ldr	r3, [r7, #4]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e009      	b.n	8004cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	60ba      	str	r2, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	dbf1      	blt.n	8004ce8 <_write+0x12>
	}
	return len;
 8004d04:	687b      	ldr	r3, [r7, #4]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <_close>:

int _close(int file)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
	return -1;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d36:	605a      	str	r2, [r3, #4]
	return 0;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <_isatty>:

int _isatty(int file)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8004d4e:	2301      	movs	r3, #1
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	return 0;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <_sbrk+0x5c>)
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <_sbrk+0x60>)
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <_sbrk+0x64>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <_sbrk+0x64>)
 8004d96:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <_sbrk+0x68>)
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <_sbrk+0x64>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d207      	bcs.n	8004db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004da8:	f00c fc10 	bl	80115cc <__errno>
 8004dac:	4603      	mov	r3, r0
 8004dae:	220c      	movs	r2, #12
 8004db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295
 8004db6:	e009      	b.n	8004dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <_sbrk+0x64>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <_sbrk+0x64>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <_sbrk+0x64>)
 8004dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	24001c08 	.word	0x24001c08
 8004dd8:	00000400 	.word	0x00000400
 8004ddc:	24000bd4 	.word	0x24000bd4
 8004de0:	24001608 	.word	0x24001608

08004de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <SystemInit+0xec>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <SystemInit+0xec>)
 8004df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <SystemInit+0xf0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	2b06      	cmp	r3, #6
 8004e02:	d807      	bhi.n	8004e14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004e04:	4b33      	ldr	r3, [pc, #204]	; (8004ed4 <SystemInit+0xf0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f023 030f 	bic.w	r3, r3, #15
 8004e0c:	4a31      	ldr	r2, [pc, #196]	; (8004ed4 <SystemInit+0xf0>)
 8004e0e:	f043 0307 	orr.w	r3, r3, #7
 8004e12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004e14:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <SystemInit+0xf4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <SystemInit+0xf4>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e20:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <SystemInit+0xf4>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004e26:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <SystemInit+0xf4>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	492b      	ldr	r1, [pc, #172]	; (8004ed8 <SystemInit+0xf4>)
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <SystemInit+0xf8>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004e32:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <SystemInit+0xf0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004e3e:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <SystemInit+0xf0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 030f 	bic.w	r3, r3, #15
 8004e46:	4a23      	ldr	r2, [pc, #140]	; (8004ed4 <SystemInit+0xf0>)
 8004e48:	f043 0307 	orr.w	r3, r3, #7
 8004e4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <SystemInit+0xf4>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004e54:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <SystemInit+0xf4>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <SystemInit+0xf4>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <SystemInit+0xf4>)
 8004e62:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <SystemInit+0xfc>)
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <SystemInit+0xf4>)
 8004e68:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <SystemInit+0x100>)
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <SystemInit+0xf4>)
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <SystemInit+0x104>)
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <SystemInit+0xf4>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <SystemInit+0xf4>)
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <SystemInit+0x104>)
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <SystemInit+0xf4>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <SystemInit+0xf4>)
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <SystemInit+0x104>)
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <SystemInit+0xf4>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <SystemInit+0xf4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <SystemInit+0xf4>)
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <SystemInit+0xf4>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <SystemInit+0x108>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <SystemInit+0x10c>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eae:	d202      	bcs.n	8004eb6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <SystemInit+0x110>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <SystemInit+0x114>)
 8004eb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004ebc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <SystemInit+0xec>)
 8004ec0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ec4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004ec6:	bf00      	nop
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00
 8004ed4:	52002000 	.word	0x52002000
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	eaf6ed7f 	.word	0xeaf6ed7f
 8004ee0:	02020200 	.word	0x02020200
 8004ee4:	01ff0000 	.word	0x01ff0000
 8004ee8:	01010280 	.word	0x01010280
 8004eec:	5c001000 	.word	0x5c001000
 8004ef0:	ffff0000 	.word	0xffff0000
 8004ef4:	51008108 	.word	0x51008108
 8004ef8:	52004000 	.word	0x52004000

08004efc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b09a      	sub	sp, #104	; 0x68
 8004f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	611a      	str	r2, [r3, #16]
 8004f2c:	615a      	str	r2, [r3, #20]
 8004f2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f30:	1d3b      	adds	r3, r7, #4
 8004f32:	222c      	movs	r2, #44	; 0x2c
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f00c fb72 	bl	8011620 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f3c:	4b44      	ldr	r3, [pc, #272]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f3e:	4a45      	ldr	r2, [pc, #276]	; (8005054 <MX_TIM1_Init+0x158>)
 8004f40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8004f42:	4b43      	ldr	r3, [pc, #268]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f44:	22c7      	movs	r2, #199	; 0xc7
 8004f46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f48:	4b41      	ldr	r3, [pc, #260]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8004f4e:	4b40      	ldr	r3, [pc, #256]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f50:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004f54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f56:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f5c:	4b3c      	ldr	r3, [pc, #240]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f62:	4b3b      	ldr	r3, [pc, #236]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f68:	4839      	ldr	r0, [pc, #228]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f6a:	f007 fb16 	bl	800c59a <HAL_TIM_Base_Init>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004f74:	f7ff fba6 	bl	80046c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f82:	4619      	mov	r1, r3
 8004f84:	4832      	ldr	r0, [pc, #200]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f86:	f007 ffa9 	bl	800cedc <HAL_TIM_ConfigClockSource>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004f90:	f7ff fb98 	bl	80046c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004f94:	482e      	ldr	r0, [pc, #184]	; (8005050 <MX_TIM1_Init+0x154>)
 8004f96:	f007 fbfe 	bl	800c796 <HAL_TIM_PWM_Init>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004fa0:	f7ff fb90 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4826      	ldr	r0, [pc, #152]	; (8005050 <MX_TIM1_Init+0x154>)
 8004fb8:	f008 fce4 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004fc2:	f7ff fb7f 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fc6:	2360      	movs	r3, #96	; 0x60
 8004fc8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004fca:	f240 1339 	movw	r3, #313	; 0x139
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004fe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fe8:	2204      	movs	r2, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4818      	ldr	r0, [pc, #96]	; (8005050 <MX_TIM1_Init+0x154>)
 8004fee:	f007 fe61 	bl	800ccb4 <HAL_TIM_PWM_ConfigChannel>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004ff8:	f7ff fb64 	bl	80046c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005000:	2300      	movs	r3, #0
 8005002:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005014:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800501a:	2300      	movs	r3, #0
 800501c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800501e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4807      	ldr	r0, [pc, #28]	; (8005050 <MX_TIM1_Init+0x154>)
 8005032:	f008 fd35 	bl	800daa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800503c:	f7ff fb42 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005040:	4803      	ldr	r0, [pc, #12]	; (8005050 <MX_TIM1_Init+0x154>)
 8005042:	f000 fd0f 	bl	8005a64 <HAL_TIM_MspPostInit>

}
 8005046:	bf00      	nop
 8005048:	3768      	adds	r7, #104	; 0x68
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	24000ea0 	.word	0x24000ea0
 8005054:	40010000 	.word	0x40010000

08005058 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08e      	sub	sp, #56	; 0x38
 800505c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800505e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	609a      	str	r2, [r3, #8]
 800506a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800506c:	f107 031c 	add.w	r3, r7, #28
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005078:	463b      	mov	r3, r7
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	605a      	str	r2, [r3, #4]
 8005080:	609a      	str	r2, [r3, #8]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	615a      	str	r2, [r3, #20]
 8005088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <MX_TIM2_Init+0xec>)
 800508c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005092:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <MX_TIM2_Init+0xec>)
 8005094:	22c7      	movs	r2, #199	; 0xc7
 8005096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005098:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <MX_TIM2_Init+0xec>)
 800509a:	2200      	movs	r2, #0
 800509c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800509e:	4b29      	ldr	r3, [pc, #164]	; (8005144 <MX_TIM2_Init+0xec>)
 80050a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80050a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050a6:	4b27      	ldr	r3, [pc, #156]	; (8005144 <MX_TIM2_Init+0xec>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <MX_TIM2_Init+0xec>)
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80050b2:	4824      	ldr	r0, [pc, #144]	; (8005144 <MX_TIM2_Init+0xec>)
 80050b4:	f007 fa71 	bl	800c59a <HAL_TIM_Base_Init>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80050be:	f7ff fb01 	bl	80046c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80050c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050cc:	4619      	mov	r1, r3
 80050ce:	481d      	ldr	r0, [pc, #116]	; (8005144 <MX_TIM2_Init+0xec>)
 80050d0:	f007 ff04 	bl	800cedc <HAL_TIM_ConfigClockSource>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80050da:	f7ff faf3 	bl	80046c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80050de:	4819      	ldr	r0, [pc, #100]	; (8005144 <MX_TIM2_Init+0xec>)
 80050e0:	f007 fb59 	bl	800c796 <HAL_TIM_PWM_Init>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80050ea:	f7ff faeb 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050f6:	f107 031c 	add.w	r3, r7, #28
 80050fa:	4619      	mov	r1, r3
 80050fc:	4811      	ldr	r0, [pc, #68]	; (8005144 <MX_TIM2_Init+0xec>)
 80050fe:	f008 fc41 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005108:	f7ff fadc 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800510c:	2360      	movs	r3, #96	; 0x60
 800510e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005110:	f240 1339 	movw	r3, #313	; 0x139
 8005114:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005116:	2300      	movs	r3, #0
 8005118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800511e:	463b      	mov	r3, r7
 8005120:	2208      	movs	r2, #8
 8005122:	4619      	mov	r1, r3
 8005124:	4807      	ldr	r0, [pc, #28]	; (8005144 <MX_TIM2_Init+0xec>)
 8005126:	f007 fdc5 	bl	800ccb4 <HAL_TIM_PWM_ConfigChannel>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005130:	f7ff fac8 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005134:	4803      	ldr	r0, [pc, #12]	; (8005144 <MX_TIM2_Init+0xec>)
 8005136:	f000 fc95 	bl	8005a64 <HAL_TIM_MspPostInit>

}
 800513a:	bf00      	nop
 800513c:	3738      	adds	r7, #56	; 0x38
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	24000eec 	.word	0x24000eec

08005148 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08e      	sub	sp, #56	; 0x38
 800514c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800514e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	609a      	str	r2, [r3, #8]
 800515a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800515c:	f107 031c 	add.w	r3, r7, #28
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005168:	463b      	mov	r3, r7
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	609a      	str	r2, [r3, #8]
 8005172:	60da      	str	r2, [r3, #12]
 8005174:	611a      	str	r2, [r3, #16]
 8005176:	615a      	str	r2, [r3, #20]
 8005178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800517a:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <MX_TIM3_Init+0xe8>)
 800517c:	4a2d      	ldr	r2, [pc, #180]	; (8005234 <MX_TIM3_Init+0xec>)
 800517e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <MX_TIM3_Init+0xe8>)
 8005182:	22c7      	movs	r2, #199	; 0xc7
 8005184:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005186:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <MX_TIM3_Init+0xe8>)
 8005188:	2200      	movs	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800518c:	4b28      	ldr	r3, [pc, #160]	; (8005230 <MX_TIM3_Init+0xe8>)
 800518e:	f640 125f 	movw	r2, #2399	; 0x95f
 8005192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005194:	4b26      	ldr	r3, [pc, #152]	; (8005230 <MX_TIM3_Init+0xe8>)
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800519a:	4b25      	ldr	r3, [pc, #148]	; (8005230 <MX_TIM3_Init+0xe8>)
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80051a0:	4823      	ldr	r0, [pc, #140]	; (8005230 <MX_TIM3_Init+0xe8>)
 80051a2:	f007 f9fa 	bl	800c59a <HAL_TIM_Base_Init>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80051ac:	f7ff fa8a 	bl	80046c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80051b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ba:	4619      	mov	r1, r3
 80051bc:	481c      	ldr	r0, [pc, #112]	; (8005230 <MX_TIM3_Init+0xe8>)
 80051be:	f007 fe8d 	bl	800cedc <HAL_TIM_ConfigClockSource>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80051c8:	f7ff fa7c 	bl	80046c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80051cc:	4818      	ldr	r0, [pc, #96]	; (8005230 <MX_TIM3_Init+0xe8>)
 80051ce:	f007 fae2 	bl	800c796 <HAL_TIM_PWM_Init>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80051d8:	f7ff fa74 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051e4:	f107 031c 	add.w	r3, r7, #28
 80051e8:	4619      	mov	r1, r3
 80051ea:	4811      	ldr	r0, [pc, #68]	; (8005230 <MX_TIM3_Init+0xe8>)
 80051ec:	f008 fbca 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80051f6:	f7ff fa65 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051fa:	2360      	movs	r3, #96	; 0x60
 80051fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800520a:	463b      	mov	r3, r7
 800520c:	2200      	movs	r2, #0
 800520e:	4619      	mov	r1, r3
 8005210:	4807      	ldr	r0, [pc, #28]	; (8005230 <MX_TIM3_Init+0xe8>)
 8005212:	f007 fd4f 	bl	800ccb4 <HAL_TIM_PWM_ConfigChannel>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800521c:	f7ff fa52 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005220:	4803      	ldr	r0, [pc, #12]	; (8005230 <MX_TIM3_Init+0xe8>)
 8005222:	f000 fc1f 	bl	8005a64 <HAL_TIM_MspPostInit>

}
 8005226:	bf00      	nop
 8005228:	3738      	adds	r7, #56	; 0x38
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	24000dbc 	.word	0x24000dbc
 8005234:	40000400 	.word	0x40000400

08005238 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800523e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	609a      	str	r2, [r3, #8]
 800524a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800524c:	f107 031c 	add.w	r3, r7, #28
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005258:	463b      	mov	r3, r7
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
 8005260:	609a      	str	r2, [r3, #8]
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	611a      	str	r2, [r3, #16]
 8005266:	615a      	str	r2, [r3, #20]
 8005268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800526a:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <MX_TIM4_Init+0xe8>)
 800526c:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <MX_TIM4_Init+0xec>)
 800526e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005270:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <MX_TIM4_Init+0xe8>)
 8005272:	22ef      	movs	r2, #239	; 0xef
 8005274:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005276:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <MX_TIM4_Init+0xe8>)
 8005278:	2200      	movs	r2, #0
 800527a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800527c:	4b28      	ldr	r3, [pc, #160]	; (8005320 <MX_TIM4_Init+0xe8>)
 800527e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005282:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005284:	4b26      	ldr	r3, [pc, #152]	; (8005320 <MX_TIM4_Init+0xe8>)
 8005286:	2200      	movs	r2, #0
 8005288:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800528a:	4b25      	ldr	r3, [pc, #148]	; (8005320 <MX_TIM4_Init+0xe8>)
 800528c:	2280      	movs	r2, #128	; 0x80
 800528e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005290:	4823      	ldr	r0, [pc, #140]	; (8005320 <MX_TIM4_Init+0xe8>)
 8005292:	f007 f982 	bl	800c59a <HAL_TIM_Base_Init>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800529c:	f7ff fa12 	bl	80046c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80052a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052aa:	4619      	mov	r1, r3
 80052ac:	481c      	ldr	r0, [pc, #112]	; (8005320 <MX_TIM4_Init+0xe8>)
 80052ae:	f007 fe15 	bl	800cedc <HAL_TIM_ConfigClockSource>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80052b8:	f7ff fa04 	bl	80046c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80052bc:	4818      	ldr	r0, [pc, #96]	; (8005320 <MX_TIM4_Init+0xe8>)
 80052be:	f007 fa6a 	bl	800c796 <HAL_TIM_PWM_Init>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80052c8:	f7ff f9fc 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80052d4:	f107 031c 	add.w	r3, r7, #28
 80052d8:	4619      	mov	r1, r3
 80052da:	4811      	ldr	r0, [pc, #68]	; (8005320 <MX_TIM4_Init+0xe8>)
 80052dc:	f008 fb52 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80052e6:	f7ff f9ed 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052ea:	2360      	movs	r3, #96	; 0x60
 80052ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052fa:	463b      	mov	r3, r7
 80052fc:	2208      	movs	r2, #8
 80052fe:	4619      	mov	r1, r3
 8005300:	4807      	ldr	r0, [pc, #28]	; (8005320 <MX_TIM4_Init+0xe8>)
 8005302:	f007 fcd7 	bl	800ccb4 <HAL_TIM_PWM_ConfigChannel>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800530c:	f7ff f9da 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005310:	4803      	ldr	r0, [pc, #12]	; (8005320 <MX_TIM4_Init+0xe8>)
 8005312:	f000 fba7 	bl	8005a64 <HAL_TIM_MspPostInit>

}
 8005316:	bf00      	nop
 8005318:	3738      	adds	r7, #56	; 0x38
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	24000c8c 	.word	0x24000c8c
 8005324:	40000800 	.word	0x40000800

08005328 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005346:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <MX_TIM5_Init+0x94>)
 8005348:	4a1d      	ldr	r2, [pc, #116]	; (80053c0 <MX_TIM5_Init+0x98>)
 800534a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <MX_TIM5_Init+0x94>)
 800534e:	22c7      	movs	r2, #199	; 0xc7
 8005350:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005352:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <MX_TIM5_Init+0x94>)
 8005354:	2200      	movs	r2, #0
 8005356:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005358:	4b18      	ldr	r3, [pc, #96]	; (80053bc <MX_TIM5_Init+0x94>)
 800535a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800535e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <MX_TIM5_Init+0x94>)
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <MX_TIM5_Init+0x94>)
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800536c:	4813      	ldr	r0, [pc, #76]	; (80053bc <MX_TIM5_Init+0x94>)
 800536e:	f007 f914 	bl	800c59a <HAL_TIM_Base_Init>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005378:	f7ff f9a4 	bl	80046c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800537c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005382:	f107 0310 	add.w	r3, r7, #16
 8005386:	4619      	mov	r1, r3
 8005388:	480c      	ldr	r0, [pc, #48]	; (80053bc <MX_TIM5_Init+0x94>)
 800538a:	f007 fda7 	bl	800cedc <HAL_TIM_ConfigClockSource>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005394:	f7ff f996 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005398:	2300      	movs	r3, #0
 800539a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <MX_TIM5_Init+0x94>)
 80053a6:	f008 faed 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80053b0:	f7ff f988 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80053b4:	bf00      	nop
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	24000d70 	.word	0x24000d70
 80053c0:	40000c00 	.word	0x40000c00

080053c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <MX_TIM6_Init+0x64>)
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <MX_TIM6_Init+0x68>)
 80053d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80053da:	4b13      	ldr	r3, [pc, #76]	; (8005428 <MX_TIM6_Init+0x64>)
 80053dc:	22c7      	movs	r2, #199	; 0xc7
 80053de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <MX_TIM6_Init+0x64>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <MX_TIM6_Init+0x64>)
 80053e8:	f241 726f 	movw	r2, #5999	; 0x176f
 80053ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053ee:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <MX_TIM6_Init+0x64>)
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80053f4:	480c      	ldr	r0, [pc, #48]	; (8005428 <MX_TIM6_Init+0x64>)
 80053f6:	f007 f8d0 	bl	800c59a <HAL_TIM_Base_Init>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005400:	f7ff f960 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005404:	2300      	movs	r3, #0
 8005406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800540c:	1d3b      	adds	r3, r7, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4805      	ldr	r0, [pc, #20]	; (8005428 <MX_TIM6_Init+0x64>)
 8005412:	f008 fab7 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800541c:	f7ff f952 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	24000e54 	.word	0x24000e54
 800542c:	40001000 	.word	0x40001000

08005430 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <MX_TIM7_Init+0x64>)
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <MX_TIM7_Init+0x68>)
 8005444:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <MX_TIM7_Init+0x64>)
 8005448:	22c7      	movs	r2, #199	; 0xc7
 800544a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800544c:	4b11      	ldr	r3, [pc, #68]	; (8005494 <MX_TIM7_Init+0x64>)
 800544e:	2200      	movs	r2, #0
 8005450:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <MX_TIM7_Init+0x64>)
 8005454:	f240 42af 	movw	r2, #1199	; 0x4af
 8005458:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800545a:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <MX_TIM7_Init+0x64>)
 800545c:	2280      	movs	r2, #128	; 0x80
 800545e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005460:	480c      	ldr	r0, [pc, #48]	; (8005494 <MX_TIM7_Init+0x64>)
 8005462:	f007 f89a 	bl	800c59a <HAL_TIM_Base_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800546c:	f7ff f92a 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005470:	2300      	movs	r3, #0
 8005472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4805      	ldr	r0, [pc, #20]	; (8005494 <MX_TIM7_Init+0x64>)
 800547e:	f008 fa81 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005488:	f7ff f91c 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	2400101c 	.word	0x2400101c
 8005498:	40001400 	.word	0x40001400

0800549c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054a2:	463b      	mov	r3, r7
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <MX_TIM12_Init+0x70>)
 80054b2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80054b4:	4b14      	ldr	r3, [pc, #80]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054b6:	22c7      	movs	r2, #199	; 0xc7
 80054b8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 80054c0:	4b11      	ldr	r3, [pc, #68]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054c2:	f240 2257 	movw	r2, #599	; 0x257
 80054c6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054c8:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80054d4:	480c      	ldr	r0, [pc, #48]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054d6:	f007 f860 	bl	800c59a <HAL_TIM_Base_Init>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80054e0:	f7ff f8f0 	bl	80046c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054e8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80054ea:	463b      	mov	r3, r7
 80054ec:	4619      	mov	r1, r3
 80054ee:	4806      	ldr	r0, [pc, #24]	; (8005508 <MX_TIM12_Init+0x6c>)
 80054f0:	f007 fcf4 	bl	800cedc <HAL_TIM_ConfigClockSource>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80054fa:	f7ff f8e3 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	24000f84 	.word	0x24000f84
 800550c:	40001800 	.word	0x40001800

08005510 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <MX_TIM13_Init+0x40>)
 8005516:	4a0f      	ldr	r2, [pc, #60]	; (8005554 <MX_TIM13_Init+0x44>)
 8005518:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <MX_TIM13_Init+0x40>)
 800551c:	22c7      	movs	r2, #199	; 0xc7
 800551e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <MX_TIM13_Init+0x40>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <MX_TIM13_Init+0x40>)
 8005528:	f240 2257 	movw	r2, #599	; 0x257
 800552c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800552e:	4b08      	ldr	r3, [pc, #32]	; (8005550 <MX_TIM13_Init+0x40>)
 8005530:	2200      	movs	r2, #0
 8005532:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <MX_TIM13_Init+0x40>)
 8005536:	2280      	movs	r2, #128	; 0x80
 8005538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800553a:	4805      	ldr	r0, [pc, #20]	; (8005550 <MX_TIM13_Init+0x40>)
 800553c:	f007 f82d 	bl	800c59a <HAL_TIM_Base_Init>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005546:	f7ff f8bd 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	24000e08 	.word	0x24000e08
 8005554:	40001c00 	.word	0x40001c00

08005558 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800555c:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <MX_TIM14_Init+0x40>)
 800555e:	4a0f      	ldr	r2, [pc, #60]	; (800559c <MX_TIM14_Init+0x44>)
 8005560:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <MX_TIM14_Init+0x40>)
 8005564:	22c7      	movs	r2, #199	; 0xc7
 8005566:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <MX_TIM14_Init+0x40>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <MX_TIM14_Init+0x40>)
 8005570:	f640 125f 	movw	r2, #2399	; 0x95f
 8005574:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005576:	4b08      	ldr	r3, [pc, #32]	; (8005598 <MX_TIM14_Init+0x40>)
 8005578:	2200      	movs	r2, #0
 800557a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <MX_TIM14_Init+0x40>)
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005582:	4805      	ldr	r0, [pc, #20]	; (8005598 <MX_TIM14_Init+0x40>)
 8005584:	f007 f809 	bl	800c59a <HAL_TIM_Base_Init>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800558e:	f7ff f899 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	24000f38 	.word	0x24000f38
 800559c:	40002000 	.word	0x40002000

080055a0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b09a      	sub	sp, #104	; 0x68
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	609a      	str	r2, [r3, #8]
 80055b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	609a      	str	r2, [r3, #8]
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	611a      	str	r2, [r3, #16]
 80055d0:	615a      	str	r2, [r3, #20]
 80055d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	222c      	movs	r2, #44	; 0x2c
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f00c f820 	bl	8011620 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80055e0:	4b3f      	ldr	r3, [pc, #252]	; (80056e0 <MX_TIM15_Init+0x140>)
 80055e2:	4a40      	ldr	r2, [pc, #256]	; (80056e4 <MX_TIM15_Init+0x144>)
 80055e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <MX_TIM15_Init+0x140>)
 80055e8:	22ef      	movs	r2, #239	; 0xef
 80055ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ec:	4b3c      	ldr	r3, [pc, #240]	; (80056e0 <MX_TIM15_Init+0x140>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80055f2:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <MX_TIM15_Init+0x140>)
 80055f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80055f8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055fa:	4b39      	ldr	r3, [pc, #228]	; (80056e0 <MX_TIM15_Init+0x140>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005600:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <MX_TIM15_Init+0x140>)
 8005602:	2200      	movs	r2, #0
 8005604:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005606:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <MX_TIM15_Init+0x140>)
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800560c:	4834      	ldr	r0, [pc, #208]	; (80056e0 <MX_TIM15_Init+0x140>)
 800560e:	f006 ffc4 	bl	800c59a <HAL_TIM_Base_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005618:	f7ff f854 	bl	80046c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800561c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005620:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005626:	4619      	mov	r1, r3
 8005628:	482d      	ldr	r0, [pc, #180]	; (80056e0 <MX_TIM15_Init+0x140>)
 800562a:	f007 fc57 	bl	800cedc <HAL_TIM_ConfigClockSource>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005634:	f7ff f846 	bl	80046c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005638:	4829      	ldr	r0, [pc, #164]	; (80056e0 <MX_TIM15_Init+0x140>)
 800563a:	f007 f8ac 	bl	800c796 <HAL_TIM_PWM_Init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005644:	f7ff f83e 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005648:	2300      	movs	r3, #0
 800564a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800564c:	2300      	movs	r3, #0
 800564e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005650:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005654:	4619      	mov	r1, r3
 8005656:	4822      	ldr	r0, [pc, #136]	; (80056e0 <MX_TIM15_Init+0x140>)
 8005658:	f008 f994 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005662:	f7ff f82f 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005666:	2360      	movs	r3, #96	; 0x60
 8005668:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800566a:	f240 1339 	movw	r3, #313	; 0x139
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005670:	2300      	movs	r3, #0
 8005672:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005674:	2300      	movs	r3, #0
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005678:	2300      	movs	r3, #0
 800567a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800567c:	2300      	movs	r3, #0
 800567e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005680:	2300      	movs	r3, #0
 8005682:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005688:	2204      	movs	r2, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4814      	ldr	r0, [pc, #80]	; (80056e0 <MX_TIM15_Init+0x140>)
 800568e:	f007 fb11 	bl	800ccb4 <HAL_TIM_PWM_ConfigChannel>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005698:	f7ff f814 	bl	80046c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800569c:	2300      	movs	r3, #0
 800569e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80056b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80056be:	1d3b      	adds	r3, r7, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4807      	ldr	r0, [pc, #28]	; (80056e0 <MX_TIM15_Init+0x140>)
 80056c4:	f008 f9ec 	bl	800daa0 <HAL_TIMEx_ConfigBreakDeadTime>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80056ce:	f7fe fff9 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80056d2:	4803      	ldr	r0, [pc, #12]	; (80056e0 <MX_TIM15_Init+0x140>)
 80056d4:	f000 f9c6 	bl	8005a64 <HAL_TIM_MspPostInit>

}
 80056d8:	bf00      	nop
 80056da:	3768      	adds	r7, #104	; 0x68
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	24000cd8 	.word	0x24000cd8
 80056e4:	40014000 	.word	0x40014000

080056e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <MX_TIM16_Init+0x44>)
 80056ee:	4a10      	ldr	r2, [pc, #64]	; (8005730 <MX_TIM16_Init+0x48>)
 80056f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <MX_TIM16_Init+0x44>)
 80056f4:	22ef      	movs	r2, #239	; 0xef
 80056f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <MX_TIM16_Init+0x44>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <MX_TIM16_Init+0x44>)
 8005700:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005704:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <MX_TIM16_Init+0x44>)
 8005708:	2200      	movs	r2, #0
 800570a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <MX_TIM16_Init+0x44>)
 800570e:	2200      	movs	r2, #0
 8005710:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <MX_TIM16_Init+0x44>)
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005718:	4804      	ldr	r0, [pc, #16]	; (800572c <MX_TIM16_Init+0x44>)
 800571a:	f006 ff3e 	bl	800c59a <HAL_TIM_Base_Init>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005724:	f7fe ffce 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005728:	bf00      	nop
 800572a:	bd80      	pop	{r7, pc}
 800572c:	24000fd0 	.word	0x24000fd0
 8005730:	40014400 	.word	0x40014400

08005734 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <MX_TIM17_Init+0x44>)
 800573a:	4a10      	ldr	r2, [pc, #64]	; (800577c <MX_TIM17_Init+0x48>)
 800573c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <MX_TIM17_Init+0x44>)
 8005740:	22ef      	movs	r2, #239	; 0xef
 8005742:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <MX_TIM17_Init+0x44>)
 8005746:	2200      	movs	r2, #0
 8005748:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 800574a:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <MX_TIM17_Init+0x44>)
 800574c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005750:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <MX_TIM17_Init+0x44>)
 8005754:	2200      	movs	r2, #0
 8005756:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005758:	4b07      	ldr	r3, [pc, #28]	; (8005778 <MX_TIM17_Init+0x44>)
 800575a:	2200      	movs	r2, #0
 800575c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <MX_TIM17_Init+0x44>)
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005764:	4804      	ldr	r0, [pc, #16]	; (8005778 <MX_TIM17_Init+0x44>)
 8005766:	f006 ff18 	bl	800c59a <HAL_TIM_Base_Init>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005770:	f7fe ffa8 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005774:	bf00      	nop
 8005776:	bd80      	pop	{r7, pc}
 8005778:	24000d24 	.word	0x24000d24
 800577c:	40014800 	.word	0x40014800

08005780 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b090      	sub	sp, #64	; 0x40
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4aa8      	ldr	r2, [pc, #672]	; (8005a30 <HAL_TIM_Base_MspInit+0x2b0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10f      	bne.n	80057b2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005792:	4ba8      	ldr	r3, [pc, #672]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005798:	4aa6      	ldr	r2, [pc, #664]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80057a2:	4ba4      	ldr	r3, [pc, #656]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80057a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80057b0:	e13a      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ba:	d10f      	bne.n	80057dc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057bc:	4b9d      	ldr	r3, [pc, #628]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80057be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057c2:	4a9c      	ldr	r2, [pc, #624]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057cc:	4b99      	ldr	r3, [pc, #612]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80057ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80057da:	e125      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a95      	ldr	r2, [pc, #596]	; (8005a38 <HAL_TIM_Base_MspInit+0x2b8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10f      	bne.n	8005806 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057e6:	4b93      	ldr	r3, [pc, #588]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80057e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057ec:	4a91      	ldr	r2, [pc, #580]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80057ee:	f043 0302 	orr.w	r3, r3, #2
 80057f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057f6:	4b8f      	ldr	r3, [pc, #572]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80057f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005804:	e110      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a8c      	ldr	r2, [pc, #560]	; (8005a3c <HAL_TIM_Base_MspInit+0x2bc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10f      	bne.n	8005830 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005810:	4b88      	ldr	r3, [pc, #544]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005816:	4a87      	ldr	r2, [pc, #540]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005818:	f043 0304 	orr.w	r3, r3, #4
 800581c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005820:	4b84      	ldr	r3, [pc, #528]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800582e:	e0fb      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a82      	ldr	r2, [pc, #520]	; (8005a40 <HAL_TIM_Base_MspInit+0x2c0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d117      	bne.n	800586a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800583a:	4b7e      	ldr	r3, [pc, #504]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800583c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005840:	4a7c      	ldr	r2, [pc, #496]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005842:	f043 0308 	orr.w	r3, r3, #8
 8005846:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800584a:	4b7a      	ldr	r3, [pc, #488]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800584c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005858:	2200      	movs	r2, #0
 800585a:	2100      	movs	r1, #0
 800585c:	2032      	movs	r0, #50	; 0x32
 800585e:	f000 ffca 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005862:	2032      	movs	r0, #50	; 0x32
 8005864:	f000 ffe1 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 8005868:	e0de      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a75      	ldr	r2, [pc, #468]	; (8005a44 <HAL_TIM_Base_MspInit+0x2c4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d117      	bne.n	80058a4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005874:	4b6f      	ldr	r3, [pc, #444]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800587a:	4a6e      	ldr	r2, [pc, #440]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800587c:	f043 0310 	orr.w	r3, r3, #16
 8005880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005884:	4b6b      	ldr	r3, [pc, #428]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	2036      	movs	r0, #54	; 0x36
 8005898:	f000 ffad 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800589c:	2036      	movs	r0, #54	; 0x36
 800589e:	f000 ffc4 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 80058a2:	e0c1      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a67      	ldr	r2, [pc, #412]	; (8005a48 <HAL_TIM_Base_MspInit+0x2c8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d117      	bne.n	80058de <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80058ae:	4b61      	ldr	r3, [pc, #388]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80058b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058b4:	4a5f      	ldr	r2, [pc, #380]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80058b6:	f043 0320 	orr.w	r3, r3, #32
 80058ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058be:	4b5d      	ldr	r3, [pc, #372]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80058c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80058cc:	2200      	movs	r2, #0
 80058ce:	2100      	movs	r1, #0
 80058d0:	2037      	movs	r0, #55	; 0x37
 80058d2:	f000 ff90 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80058d6:	2037      	movs	r0, #55	; 0x37
 80058d8:	f000 ffa7 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 80058dc:	e0a4      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a5a      	ldr	r2, [pc, #360]	; (8005a4c <HAL_TIM_Base_MspInit+0x2cc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d117      	bne.n	8005918 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80058e8:	4b52      	ldr	r3, [pc, #328]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80058ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058ee:	4a51      	ldr	r2, [pc, #324]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80058f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058f8:	4b4e      	ldr	r3, [pc, #312]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80058fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	623b      	str	r3, [r7, #32]
 8005904:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	202b      	movs	r0, #43	; 0x2b
 800590c:	f000 ff73 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005910:	202b      	movs	r0, #43	; 0x2b
 8005912:	f000 ff8a 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 8005916:	e087      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a4c      	ldr	r2, [pc, #304]	; (8005a50 <HAL_TIM_Base_MspInit+0x2d0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d117      	bne.n	8005952 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005922:	4b44      	ldr	r3, [pc, #272]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005928:	4a42      	ldr	r2, [pc, #264]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800592a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005932:	4b40      	ldr	r3, [pc, #256]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005940:	2200      	movs	r2, #0
 8005942:	2100      	movs	r1, #0
 8005944:	202c      	movs	r0, #44	; 0x2c
 8005946:	f000 ff56 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800594a:	202c      	movs	r0, #44	; 0x2c
 800594c:	f000 ff6d 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 8005950:	e06a      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a3f      	ldr	r2, [pc, #252]	; (8005a54 <HAL_TIM_Base_MspInit+0x2d4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d117      	bne.n	800598c <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800595c:	4b35      	ldr	r3, [pc, #212]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800595e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005962:	4a34      	ldr	r2, [pc, #208]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005968:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800596c:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800596e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800597a:	2200      	movs	r2, #0
 800597c:	2100      	movs	r1, #0
 800597e:	202d      	movs	r0, #45	; 0x2d
 8005980:	f000 ff39 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005984:	202d      	movs	r0, #45	; 0x2d
 8005986:	f000 ff50 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 800598a:	e04d      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a31      	ldr	r2, [pc, #196]	; (8005a58 <HAL_TIM_Base_MspInit+0x2d8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10f      	bne.n	80059b6 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800599c:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 800599e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059a6:	4b23      	ldr	r3, [pc, #140]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80059a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	697b      	ldr	r3, [r7, #20]
}
 80059b4:	e038      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <HAL_TIM_Base_MspInit+0x2dc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d117      	bne.n	80059f0 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80059c0:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80059c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80059c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059d0:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80059d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80059de:	2200      	movs	r2, #0
 80059e0:	2100      	movs	r1, #0
 80059e2:	2075      	movs	r0, #117	; 0x75
 80059e4:	f000 ff07 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80059e8:	2075      	movs	r0, #117	; 0x75
 80059ea:	f000 ff1e 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 80059ee:	e01b      	b.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1a      	ldr	r2, [pc, #104]	; (8005a60 <HAL_TIM_Base_MspInit+0x2e0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d116      	bne.n	8005a28 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80059fa:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 80059fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a00:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	2076      	movs	r0, #118	; 0x76
 8005a1e:	f000 feea 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005a22:	2076      	movs	r0, #118	; 0x76
 8005a24:	f000 ff01 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 8005a28:	bf00      	nop
 8005a2a:	3740      	adds	r7, #64	; 0x40
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40010000 	.word	0x40010000
 8005a34:	58024400 	.word	0x58024400
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40001000 	.word	0x40001000
 8005a48:	40001400 	.word	0x40001400
 8005a4c:	40001800 	.word	0x40001800
 8005a50:	40001c00 	.word	0x40001c00
 8005a54:	40002000 	.word	0x40002000
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800

08005a64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08c      	sub	sp, #48	; 0x30
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a6c:	f107 031c 	add.w	r3, r7, #28
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a5e      	ldr	r2, [pc, #376]	; (8005bfc <HAL_TIM_MspPostInit+0x198>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d120      	bne.n	8005ac8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a86:	4b5e      	ldr	r3, [pc, #376]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a8c:	4a5c      	ldr	r2, [pc, #368]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005a8e:	f043 0310 	orr.w	r3, r3, #16
 8005a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a96:	4b5a      	ldr	r3, [pc, #360]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8005aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8005aba:	f107 031c 	add.w	r3, r7, #28
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4850      	ldr	r0, [pc, #320]	; (8005c04 <HAL_TIM_MspPostInit+0x1a0>)
 8005ac2:	f003 ff11 	bl	80098e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005ac6:	e094      	b.n	8005bf2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d120      	bne.n	8005b14 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad2:	4b4b      	ldr	r3, [pc, #300]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ad8:	4a49      	ldr	r2, [pc, #292]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005ada:	f043 0302 	orr.w	r3, r3, #2
 8005ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ae2:	4b47      	ldr	r3, [pc, #284]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8005af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af6:	2302      	movs	r3, #2
 8005af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005afe:	2300      	movs	r3, #0
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b02:	2301      	movs	r3, #1
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8005b06:	f107 031c 	add.w	r3, r7, #28
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	483e      	ldr	r0, [pc, #248]	; (8005c08 <HAL_TIM_MspPostInit+0x1a4>)
 8005b0e:	f003 feeb 	bl	80098e8 <HAL_GPIO_Init>
}
 8005b12:	e06e      	b.n	8005bf2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a3c      	ldr	r2, [pc, #240]	; (8005c0c <HAL_TIM_MspPostInit+0x1a8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d11f      	bne.n	8005b5e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b1e:	4b38      	ldr	r3, [pc, #224]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b24:	4a36      	ldr	r2, [pc, #216]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b2e:	4b34      	ldr	r3, [pc, #208]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b40:	2302      	movs	r3, #2
 8005b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	4619      	mov	r1, r3
 8005b56:	482e      	ldr	r0, [pc, #184]	; (8005c10 <HAL_TIM_MspPostInit+0x1ac>)
 8005b58:	f003 fec6 	bl	80098e8 <HAL_GPIO_Init>
}
 8005b5c:	e049      	b.n	8005bf2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2c      	ldr	r2, [pc, #176]	; (8005c14 <HAL_TIM_MspPostInit+0x1b0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d120      	bne.n	8005baa <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b68:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6e:	4a24      	ldr	r2, [pc, #144]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b78:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8005b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b94:	2300      	movs	r3, #0
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8005b9c:	f107 031c 	add.w	r3, r7, #28
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4819      	ldr	r0, [pc, #100]	; (8005c08 <HAL_TIM_MspPostInit+0x1a4>)
 8005ba4:	f003 fea0 	bl	80098e8 <HAL_GPIO_Init>
}
 8005ba8:	e023      	b.n	8005bf2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_TIM_MspPostInit+0x1b4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d11e      	bne.n	8005bf2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005bbc:	f043 0310 	orr.w	r3, r3, #16
 8005bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_TIM_MspPostInit+0x19c>)
 8005bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8005bd2:	2340      	movs	r3, #64	; 0x40
 8005bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bde:	2300      	movs	r3, #0
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005be2:	2304      	movs	r3, #4
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8005be6:	f107 031c 	add.w	r3, r7, #28
 8005bea:	4619      	mov	r1, r3
 8005bec:	4805      	ldr	r0, [pc, #20]	; (8005c04 <HAL_TIM_MspPostInit+0x1a0>)
 8005bee:	f003 fe7b 	bl	80098e8 <HAL_GPIO_Init>
}
 8005bf2:	bf00      	nop
 8005bf4:	3730      	adds	r7, #48	; 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	58024400 	.word	0x58024400
 8005c04:	58021000 	.word	0x58021000
 8005c08:	58020400 	.word	0x58020400
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	58020000 	.word	0x58020000
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40014000 	.word	0x40014000

08005c1c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c22:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <MX_UART4_Init+0xa0>)
 8005c24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8005c26:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c28:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <MX_UART4_Init+0xa4>)
 8005c2a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005c2c:	4b22      	ldr	r3, [pc, #136]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005c32:	4b21      	ldr	r3, [pc, #132]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c40:	220c      	movs	r2, #12
 8005c42:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c44:	4b1c      	ldr	r3, [pc, #112]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c50:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c56:	4b18      	ldr	r3, [pc, #96]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005c5c:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c5e:	2208      	movs	r2, #8
 8005c60:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005c6a:	4813      	ldr	r0, [pc, #76]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c6c:	f007 ffb4 	bl	800dbd8 <HAL_UART_Init>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8005c76:	f7fe fd25 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005c7a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005c7e:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c80:	f00a f845 	bl	800fd0e <HAL_UARTEx_SetTxFifoThreshold>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8005c8a:	f7fe fd1b 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005c8e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005c92:	4809      	ldr	r0, [pc, #36]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005c94:	f00a f879 	bl	800fd8a <HAL_UARTEx_SetRxFifoThreshold>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8005c9e:	f7fe fd11 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8005ca2:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <MX_UART4_Init+0x9c>)
 8005ca4:	f009 ffbf 	bl	800fc26 <HAL_UARTEx_EnableFifoMode>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8005cae:	f7fe fd09 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005cb2:	bf00      	nop
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	24001458 	.word	0x24001458
 8005cbc:	40004c00 	.word	0x40004c00
 8005cc0:	001e8480 	.word	0x001e8480

08005cc4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005cc8:	4b23      	ldr	r3, [pc, #140]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cca:	4a24      	ldr	r2, [pc, #144]	; (8005d5c <MX_UART7_Init+0x98>)
 8005ccc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005cce:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005cd4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005cdc:	4b1e      	ldr	r3, [pc, #120]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <MX_UART7_Init+0x94>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cea:	220c      	movs	r2, #12
 8005cec:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cee:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <MX_UART7_Init+0x94>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d00:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <MX_UART7_Init+0x94>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <MX_UART7_Init+0x94>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005d0c:	4812      	ldr	r0, [pc, #72]	; (8005d58 <MX_UART7_Init+0x94>)
 8005d0e:	f007 ff63 	bl	800dbd8 <HAL_UART_Init>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005d18:	f7fe fcd4 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005d1c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005d20:	480d      	ldr	r0, [pc, #52]	; (8005d58 <MX_UART7_Init+0x94>)
 8005d22:	f009 fff4 	bl	800fd0e <HAL_UARTEx_SetTxFifoThreshold>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8005d2c:	f7fe fcca 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005d30:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005d34:	4808      	ldr	r0, [pc, #32]	; (8005d58 <MX_UART7_Init+0x94>)
 8005d36:	f00a f828 	bl	800fd8a <HAL_UARTEx_SetRxFifoThreshold>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005d40:	f7fe fcc0 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8005d44:	4804      	ldr	r0, [pc, #16]	; (8005d58 <MX_UART7_Init+0x94>)
 8005d46:	f009 ff6e 	bl	800fc26 <HAL_UARTEx_EnableFifoMode>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005d50:	f7fe fcb8 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	24001158 	.word	0x24001158
 8005d5c:	40007800 	.word	0x40007800

08005d60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005d64:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d66:	4a23      	ldr	r2, [pc, #140]	; (8005df4 <MX_USART2_UART_Init+0x94>)
 8005d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d6a:	4b21      	ldr	r3, [pc, #132]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d72:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d86:	220c      	movs	r2, #12
 8005d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d8a:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d90:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d96:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d9c:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005da8:	4811      	ldr	r0, [pc, #68]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005daa:	f007 ff15 	bl	800dbd8 <HAL_UART_Init>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005db4:	f7fe fc86 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005db8:	2100      	movs	r1, #0
 8005dba:	480d      	ldr	r0, [pc, #52]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005dbc:	f009 ffa7 	bl	800fd0e <HAL_UARTEx_SetTxFifoThreshold>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005dc6:	f7fe fc7d 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005dca:	2100      	movs	r1, #0
 8005dcc:	4808      	ldr	r0, [pc, #32]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005dce:	f009 ffdc 	bl	800fd8a <HAL_UARTEx_SetRxFifoThreshold>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005dd8:	f7fe fc74 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005ddc:	4804      	ldr	r0, [pc, #16]	; (8005df0 <MX_USART2_UART_Init+0x90>)
 8005dde:	f009 ff5d 	bl	800fc9c <HAL_UARTEx_DisableFifoMode>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005de8:	f7fe fc6c 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005dec:	bf00      	nop
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	240014e8 	.word	0x240014e8
 8005df4:	40004400 	.word	0x40004400

08005df8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005dfe:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <MX_USART3_UART_Init+0x94>)
 8005e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e02:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e0a:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e1e:	220c      	movs	r2, #12
 8005e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e22:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e28:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e2e:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005e34:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e3a:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e40:	4811      	ldr	r0, [pc, #68]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e42:	f007 fec9 	bl	800dbd8 <HAL_UART_Init>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005e4c:	f7fe fc3a 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e50:	2100      	movs	r1, #0
 8005e52:	480d      	ldr	r0, [pc, #52]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e54:	f009 ff5b 	bl	800fd0e <HAL_UARTEx_SetTxFifoThreshold>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005e5e:	f7fe fc31 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e62:	2100      	movs	r1, #0
 8005e64:	4808      	ldr	r0, [pc, #32]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e66:	f009 ff90 	bl	800fd8a <HAL_UARTEx_SetRxFifoThreshold>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005e70:	f7fe fc28 	bl	80046c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005e74:	4804      	ldr	r0, [pc, #16]	; (8005e88 <MX_USART3_UART_Init+0x90>)
 8005e76:	f009 ff11 	bl	800fc9c <HAL_UARTEx_DisableFifoMode>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005e80:	f7fe fc20 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005e84:	bf00      	nop
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	24001260 	.word	0x24001260
 8005e8c:	40004800 	.word	0x40004800

08005e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b0be      	sub	sp, #248	; 0xf8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eac:	22bc      	movs	r2, #188	; 0xbc
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f00b fbb5 	bl	8011620 <memset>
  if(uartHandle->Instance==UART4)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4aa1      	ldr	r2, [pc, #644]	; (8006140 <HAL_UART_MspInit+0x2b0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	f040 80b7 	bne.w	8006030 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f004 fedf 	bl	800ac94 <HAL_RCCEx_PeriphCLKConfig>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005edc:	f7fe fbf2 	bl	80046c4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ee0:	4b98      	ldr	r3, [pc, #608]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8005ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ee6:	4a97      	ldr	r2, [pc, #604]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8005ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ef0:	4b94      	ldr	r3, [pc, #592]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8005ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005efe:	4b91      	ldr	r3, [pc, #580]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8005f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f04:	4a8f      	ldr	r2, [pc, #572]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8005f06:	f043 0308 	orr.w	r3, r3, #8
 8005f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f0e:	4b8d      	ldr	r3, [pc, #564]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8005f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	623b      	str	r3, [r7, #32]
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f22:	2302      	movs	r3, #2
 8005f24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f34:	2308      	movs	r3, #8
 8005f36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4881      	ldr	r0, [pc, #516]	; (8006148 <HAL_UART_MspInit+0x2b8>)
 8005f42:	f003 fcd1 	bl	80098e8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8005f46:	4b81      	ldr	r3, [pc, #516]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f48:	4a81      	ldr	r2, [pc, #516]	; (8006150 <HAL_UART_MspInit+0x2c0>)
 8005f4a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005f4c:	4b7f      	ldr	r3, [pc, #508]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f4e:	223f      	movs	r2, #63	; 0x3f
 8005f50:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f52:	4b7e      	ldr	r3, [pc, #504]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f58:	4b7c      	ldr	r3, [pc, #496]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f5e:	4b7b      	ldr	r3, [pc, #492]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f64:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f66:	4b79      	ldr	r3, [pc, #484]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f6c:	4b77      	ldr	r3, [pc, #476]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005f72:	4b76      	ldr	r3, [pc, #472]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f78:	4b74      	ldr	r3, [pc, #464]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005f7e:	4b73      	ldr	r3, [pc, #460]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f80:	2204      	movs	r2, #4
 8005f82:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005f84:	4b71      	ldr	r3, [pc, #452]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f86:	2203      	movs	r2, #3
 8005f88:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005f8a:	4b70      	ldr	r3, [pc, #448]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005f90:	4b6e      	ldr	r3, [pc, #440]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005f96:	486d      	ldr	r0, [pc, #436]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005f98:	f000 fe6c 	bl	8006c74 <HAL_DMA_Init>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8005fa2:	f7fe fb8f 	bl	80046c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a68      	ldr	r2, [pc, #416]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005faa:	67da      	str	r2, [r3, #124]	; 0x7c
 8005fac:	4a67      	ldr	r2, [pc, #412]	; (800614c <HAL_UART_MspInit+0x2bc>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005fb2:	4b68      	ldr	r3, [pc, #416]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fb4:	4a68      	ldr	r2, [pc, #416]	; (8006158 <HAL_UART_MspInit+0x2c8>)
 8005fb6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005fb8:	4b66      	ldr	r3, [pc, #408]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fba:	2240      	movs	r2, #64	; 0x40
 8005fbc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fbe:	4b65      	ldr	r3, [pc, #404]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fc4:	4b63      	ldr	r3, [pc, #396]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fca:	4b62      	ldr	r3, [pc, #392]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fd2:	4b60      	ldr	r3, [pc, #384]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fd8:	4b5e      	ldr	r3, [pc, #376]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005fde:	4b5d      	ldr	r3, [pc, #372]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005fe4:	4b5b      	ldr	r3, [pc, #364]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005fea:	4b5a      	ldr	r3, [pc, #360]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005fec:	2204      	movs	r2, #4
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005ff0:	4b58      	ldr	r3, [pc, #352]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005ff6:	4b57      	ldr	r3, [pc, #348]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005ffc:	4b55      	ldr	r3, [pc, #340]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006002:	4854      	ldr	r0, [pc, #336]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8006004:	f000 fe36 	bl	8006c74 <HAL_DMA_Init>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800600e:	f7fe fb59 	bl	80046c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a4f      	ldr	r2, [pc, #316]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 8006016:	679a      	str	r2, [r3, #120]	; 0x78
 8006018:	4a4e      	ldr	r2, [pc, #312]	; (8006154 <HAL_UART_MspInit+0x2c4>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800601e:	2200      	movs	r2, #0
 8006020:	2100      	movs	r1, #0
 8006022:	2034      	movs	r0, #52	; 0x34
 8006024:	f000 fbe7 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006028:	2034      	movs	r0, #52	; 0x34
 800602a:	f000 fbfe 	bl	800682a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800602e:	e1fe      	b.n	800642e <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==UART7)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a49      	ldr	r2, [pc, #292]	; (800615c <HAL_UART_MspInit+0x2cc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	f040 8098 	bne.w	800616c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800603c:	2302      	movs	r3, #2
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800604a:	4618      	mov	r0, r3
 800604c:	f004 fe22 	bl	800ac94 <HAL_RCCEx_PeriphCLKConfig>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006056:	f7fe fb35 	bl	80046c4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800605a:	4b3a      	ldr	r3, [pc, #232]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 800605c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006060:	4a38      	ldr	r2, [pc, #224]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8006062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800606a:	4b36      	ldr	r3, [pc, #216]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 800606c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006078:	4b32      	ldr	r3, [pc, #200]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 800607a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800607e:	4a31      	ldr	r2, [pc, #196]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 8006080:	f043 0310 	orr.w	r3, r3, #16
 8006084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006088:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <HAL_UART_MspInit+0x2b4>)
 800608a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006096:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800609a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800609e:	2302      	movs	r3, #2
 80060a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80060b0:	2307      	movs	r3, #7
 80060b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80060ba:	4619      	mov	r1, r3
 80060bc:	4828      	ldr	r0, [pc, #160]	; (8006160 <HAL_UART_MspInit+0x2d0>)
 80060be:	f003 fc13 	bl	80098e8 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80060c2:	4b28      	ldr	r3, [pc, #160]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060c4:	4a28      	ldr	r2, [pc, #160]	; (8006168 <HAL_UART_MspInit+0x2d8>)
 80060c6:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80060c8:	4b26      	ldr	r3, [pc, #152]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060ca:	2250      	movs	r2, #80	; 0x50
 80060cc:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060ce:	4b25      	ldr	r3, [pc, #148]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060d0:	2240      	movs	r2, #64	; 0x40
 80060d2:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060d4:	4b23      	ldr	r3, [pc, #140]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060da:	4b22      	ldr	r3, [pc, #136]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060e0:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060e2:	4b20      	ldr	r3, [pc, #128]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80060ee:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 80060fc:	2204      	movs	r2, #4
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 8006102:	2203      	movs	r2, #3
 8006104:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 8006108:	2200      	movs	r2, #0
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800610c:	4b15      	ldr	r3, [pc, #84]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006112:	4814      	ldr	r0, [pc, #80]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 8006114:	f000 fdae 	bl	8006c74 <HAL_DMA_Init>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800611e:	f7fe fad1 	bl	80046c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a0f      	ldr	r2, [pc, #60]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 8006126:	679a      	str	r2, [r3, #120]	; 0x78
 8006128:	4a0e      	ldr	r2, [pc, #56]	; (8006164 <HAL_UART_MspInit+0x2d4>)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800612e:	2200      	movs	r2, #0
 8006130:	2100      	movs	r1, #0
 8006132:	2052      	movs	r0, #82	; 0x52
 8006134:	f000 fb5f 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006138:	2052      	movs	r0, #82	; 0x52
 800613a:	f000 fb76 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 800613e:	e176      	b.n	800642e <HAL_UART_MspInit+0x59e>
 8006140:	40004c00 	.word	0x40004c00
 8006144:	58024400 	.word	0x58024400
 8006148:	58020c00 	.word	0x58020c00
 800614c:	24001068 	.word	0x24001068
 8006150:	40020058 	.word	0x40020058
 8006154:	24001578 	.word	0x24001578
 8006158:	40020070 	.word	0x40020070
 800615c:	40007800 	.word	0x40007800
 8006160:	58021000 	.word	0x58021000
 8006164:	24001368 	.word	0x24001368
 8006168:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4ab1      	ldr	r2, [pc, #708]	; (8006438 <HAL_UART_MspInit+0x5a8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	f040 80a5 	bne.w	80062c2 <HAL_UART_MspInit+0x432>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006178:	2302      	movs	r3, #2
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006186:	4618      	mov	r0, r3
 8006188:	f004 fd84 	bl	800ac94 <HAL_RCCEx_PeriphCLKConfig>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006192:	f7fe fa97 	bl	80046c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006196:	4ba9      	ldr	r3, [pc, #676]	; (800643c <HAL_UART_MspInit+0x5ac>)
 8006198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800619c:	4aa7      	ldr	r2, [pc, #668]	; (800643c <HAL_UART_MspInit+0x5ac>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061a6:	4ba5      	ldr	r3, [pc, #660]	; (800643c <HAL_UART_MspInit+0x5ac>)
 80061a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061b4:	4ba1      	ldr	r3, [pc, #644]	; (800643c <HAL_UART_MspInit+0x5ac>)
 80061b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ba:	4aa0      	ldr	r2, [pc, #640]	; (800643c <HAL_UART_MspInit+0x5ac>)
 80061bc:	f043 0308 	orr.w	r3, r3, #8
 80061c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061c4:	4b9d      	ldr	r3, [pc, #628]	; (800643c <HAL_UART_MspInit+0x5ac>)
 80061c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80061d2:	2360      	movs	r3, #96	; 0x60
 80061d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d8:	2302      	movs	r3, #2
 80061da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80061ea:	2307      	movs	r3, #7
 80061ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4892      	ldr	r0, [pc, #584]	; (8006440 <HAL_UART_MspInit+0x5b0>)
 80061f8:	f003 fb76 	bl	80098e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80061fc:	4b91      	ldr	r3, [pc, #580]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 80061fe:	4a92      	ldr	r2, [pc, #584]	; (8006448 <HAL_UART_MspInit+0x5b8>)
 8006200:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006202:	4b90      	ldr	r3, [pc, #576]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 8006204:	222b      	movs	r2, #43	; 0x2b
 8006206:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006208:	4b8e      	ldr	r3, [pc, #568]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800620e:	4b8d      	ldr	r3, [pc, #564]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 8006210:	2200      	movs	r2, #0
 8006212:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006214:	4b8b      	ldr	r3, [pc, #556]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 8006216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800621a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800621c:	4b89      	ldr	r3, [pc, #548]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 800621e:	2200      	movs	r2, #0
 8006220:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006222:	4b88      	ldr	r3, [pc, #544]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 8006224:	2200      	movs	r2, #0
 8006226:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006228:	4b86      	ldr	r3, [pc, #536]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 800622a:	2200      	movs	r2, #0
 800622c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800622e:	4b85      	ldr	r3, [pc, #532]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 8006230:	2200      	movs	r2, #0
 8006232:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006234:	4b83      	ldr	r3, [pc, #524]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 8006236:	2200      	movs	r2, #0
 8006238:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800623a:	4882      	ldr	r0, [pc, #520]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 800623c:	f000 fd1a 	bl	8006c74 <HAL_DMA_Init>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006246:	f7fe fa3d 	bl	80046c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a7d      	ldr	r2, [pc, #500]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 800624e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006250:	4a7c      	ldr	r2, [pc, #496]	; (8006444 <HAL_UART_MspInit+0x5b4>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006256:	4b7d      	ldr	r3, [pc, #500]	; (800644c <HAL_UART_MspInit+0x5bc>)
 8006258:	4a7d      	ldr	r2, [pc, #500]	; (8006450 <HAL_UART_MspInit+0x5c0>)
 800625a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800625c:	4b7b      	ldr	r3, [pc, #492]	; (800644c <HAL_UART_MspInit+0x5bc>)
 800625e:	222c      	movs	r2, #44	; 0x2c
 8006260:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006262:	4b7a      	ldr	r3, [pc, #488]	; (800644c <HAL_UART_MspInit+0x5bc>)
 8006264:	2240      	movs	r2, #64	; 0x40
 8006266:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006268:	4b78      	ldr	r3, [pc, #480]	; (800644c <HAL_UART_MspInit+0x5bc>)
 800626a:	2200      	movs	r2, #0
 800626c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800626e:	4b77      	ldr	r3, [pc, #476]	; (800644c <HAL_UART_MspInit+0x5bc>)
 8006270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006274:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006276:	4b75      	ldr	r3, [pc, #468]	; (800644c <HAL_UART_MspInit+0x5bc>)
 8006278:	2200      	movs	r2, #0
 800627a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800627c:	4b73      	ldr	r3, [pc, #460]	; (800644c <HAL_UART_MspInit+0x5bc>)
 800627e:	2200      	movs	r2, #0
 8006280:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006282:	4b72      	ldr	r3, [pc, #456]	; (800644c <HAL_UART_MspInit+0x5bc>)
 8006284:	2200      	movs	r2, #0
 8006286:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006288:	4b70      	ldr	r3, [pc, #448]	; (800644c <HAL_UART_MspInit+0x5bc>)
 800628a:	2200      	movs	r2, #0
 800628c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800628e:	4b6f      	ldr	r3, [pc, #444]	; (800644c <HAL_UART_MspInit+0x5bc>)
 8006290:	2200      	movs	r2, #0
 8006292:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006294:	486d      	ldr	r0, [pc, #436]	; (800644c <HAL_UART_MspInit+0x5bc>)
 8006296:	f000 fced 	bl	8006c74 <HAL_DMA_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_UART_MspInit+0x414>
      Error_Handler();
 80062a0:	f7fe fa10 	bl	80046c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a69      	ldr	r2, [pc, #420]	; (800644c <HAL_UART_MspInit+0x5bc>)
 80062a8:	679a      	str	r2, [r3, #120]	; 0x78
 80062aa:	4a68      	ldr	r2, [pc, #416]	; (800644c <HAL_UART_MspInit+0x5bc>)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80062b0:	2200      	movs	r2, #0
 80062b2:	2100      	movs	r1, #0
 80062b4:	2026      	movs	r0, #38	; 0x26
 80062b6:	f000 fa9e 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80062ba:	2026      	movs	r0, #38	; 0x26
 80062bc:	f000 fab5 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 80062c0:	e0b5      	b.n	800642e <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==USART3)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a63      	ldr	r2, [pc, #396]	; (8006454 <HAL_UART_MspInit+0x5c4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	f040 80b0 	bne.w	800642e <HAL_UART_MspInit+0x59e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80062ce:	2302      	movs	r3, #2
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062dc:	4618      	mov	r0, r3
 80062de:	f004 fcd9 	bl	800ac94 <HAL_RCCEx_PeriphCLKConfig>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_UART_MspInit+0x45c>
      Error_Handler();
 80062e8:	f7fe f9ec 	bl	80046c4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80062ec:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_UART_MspInit+0x5ac>)
 80062ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062f2:	4a52      	ldr	r2, [pc, #328]	; (800643c <HAL_UART_MspInit+0x5ac>)
 80062f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062fc:	4b4f      	ldr	r3, [pc, #316]	; (800643c <HAL_UART_MspInit+0x5ac>)
 80062fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800630a:	4b4c      	ldr	r3, [pc, #304]	; (800643c <HAL_UART_MspInit+0x5ac>)
 800630c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006310:	4a4a      	ldr	r2, [pc, #296]	; (800643c <HAL_UART_MspInit+0x5ac>)
 8006312:	f043 0308 	orr.w	r3, r3, #8
 8006316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800631a:	4b48      	ldr	r3, [pc, #288]	; (800643c <HAL_UART_MspInit+0x5ac>)
 800631c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006328:	f44f 7340 	mov.w	r3, #768	; 0x300
 800632c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006330:	2302      	movs	r3, #2
 8006332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006336:	2300      	movs	r3, #0
 8006338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006342:	2307      	movs	r3, #7
 8006344:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006348:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800634c:	4619      	mov	r1, r3
 800634e:	483c      	ldr	r0, [pc, #240]	; (8006440 <HAL_UART_MspInit+0x5b0>)
 8006350:	f003 faca 	bl	80098e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006354:	4b40      	ldr	r3, [pc, #256]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006356:	4a41      	ldr	r2, [pc, #260]	; (800645c <HAL_UART_MspInit+0x5cc>)
 8006358:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800635a:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 800635c:	222d      	movs	r2, #45	; 0x2d
 800635e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006360:	4b3d      	ldr	r3, [pc, #244]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006362:	2200      	movs	r2, #0
 8006364:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006366:	4b3c      	ldr	r3, [pc, #240]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006368:	2200      	movs	r2, #0
 800636a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800636c:	4b3a      	ldr	r3, [pc, #232]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 800636e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006372:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006374:	4b38      	ldr	r3, [pc, #224]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006376:	2200      	movs	r2, #0
 8006378:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800637a:	4b37      	ldr	r3, [pc, #220]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 800637c:	2200      	movs	r2, #0
 800637e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006380:	4b35      	ldr	r3, [pc, #212]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006386:	4b34      	ldr	r3, [pc, #208]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006388:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800638c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800638e:	4b32      	ldr	r3, [pc, #200]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006390:	2200      	movs	r2, #0
 8006392:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006394:	4830      	ldr	r0, [pc, #192]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 8006396:	f000 fc6d 	bl	8006c74 <HAL_DMA_Init>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_UART_MspInit+0x514>
      Error_Handler();
 80063a0:	f7fe f990 	bl	80046c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 80063a8:	67da      	str	r2, [r3, #124]	; 0x7c
 80063aa:	4a2b      	ldr	r2, [pc, #172]	; (8006458 <HAL_UART_MspInit+0x5c8>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80063b0:	4b2b      	ldr	r3, [pc, #172]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063b2:	4a2c      	ldr	r2, [pc, #176]	; (8006464 <HAL_UART_MspInit+0x5d4>)
 80063b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80063b6:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063b8:	222e      	movs	r2, #46	; 0x2e
 80063ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063bc:	4b28      	ldr	r3, [pc, #160]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063be:	2240      	movs	r2, #64	; 0x40
 80063c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063c2:	4b27      	ldr	r3, [pc, #156]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063c8:	4b25      	ldr	r3, [pc, #148]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063d0:	4b23      	ldr	r3, [pc, #140]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063d6:	4b22      	ldr	r3, [pc, #136]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063d8:	2200      	movs	r2, #0
 80063da:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063de:	2200      	movs	r2, #0
 80063e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80063e2:	4b1f      	ldr	r3, [pc, #124]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063ec:	2204      	movs	r2, #4
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063f2:	2203      	movs	r2, #3
 80063f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80063fc:	4b18      	ldr	r3, [pc, #96]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 80063fe:	2200      	movs	r2, #0
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006402:	4817      	ldr	r0, [pc, #92]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 8006404:	f000 fc36 	bl	8006c74 <HAL_DMA_Init>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_UART_MspInit+0x582>
      Error_Handler();
 800640e:	f7fe f959 	bl	80046c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a12      	ldr	r2, [pc, #72]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 8006416:	679a      	str	r2, [r3, #120]	; 0x78
 8006418:	4a11      	ldr	r2, [pc, #68]	; (8006460 <HAL_UART_MspInit+0x5d0>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800641e:	2200      	movs	r2, #0
 8006420:	2100      	movs	r1, #0
 8006422:	2027      	movs	r0, #39	; 0x27
 8006424:	f000 f9e7 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006428:	2027      	movs	r0, #39	; 0x27
 800642a:	f000 f9fe 	bl	800682a <HAL_NVIC_EnableIRQ>
}
 800642e:	bf00      	nop
 8006430:	37f8      	adds	r7, #248	; 0xf8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40004400 	.word	0x40004400
 800643c:	58024400 	.word	0x58024400
 8006440:	58020c00 	.word	0x58020c00
 8006444:	240010e0 	.word	0x240010e0
 8006448:	40020088 	.word	0x40020088
 800644c:	240013e0 	.word	0x240013e0
 8006450:	400200a0 	.word	0x400200a0
 8006454:	40004800 	.word	0x40004800
 8006458:	240011e8 	.word	0x240011e8
 800645c:	40020028 	.word	0x40020028
 8006460:	240012f0 	.word	0x240012f0
 8006464:	40020040 	.word	0x40020040

08006468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800646c:	f7fe fcba 	bl	8004de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006470:	480c      	ldr	r0, [pc, #48]	; (80064a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006472:	490d      	ldr	r1, [pc, #52]	; (80064a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006474:	4a0d      	ldr	r2, [pc, #52]	; (80064ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006478:	e002      	b.n	8006480 <LoopCopyDataInit>

0800647a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800647a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800647c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800647e:	3304      	adds	r3, #4

08006480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006484:	d3f9      	bcc.n	800647a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006486:	4a0a      	ldr	r2, [pc, #40]	; (80064b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006488:	4c0a      	ldr	r4, [pc, #40]	; (80064b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800648a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800648c:	e001      	b.n	8006492 <LoopFillZerobss>

0800648e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800648e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006490:	3204      	adds	r2, #4

08006492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006494:	d3fb      	bcc.n	800648e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006496:	f00b f89f 	bl	80115d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800649a:	f7fd fe45 	bl	8004128 <main>
  bx  lr
 800649e:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 80064a0:	24001c08 	.word	0x24001c08
  ldr r0, =_sdata
 80064a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80064a8:	24000408 	.word	0x24000408
  ldr r2, =_sidata
 80064ac:	08015f0c 	.word	0x08015f0c
  ldr r2, =_sbss
 80064b0:	24000408 	.word	0x24000408
  ldr r4, =_ebss
 80064b4:	24001604 	.word	0x24001604

080064b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064b8:	e7fe      	b.n	80064b8 <ADC3_IRQHandler>
	...

080064bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064c2:	2003      	movs	r0, #3
 80064c4:	f000 f98c 	bl	80067e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064c8:	f004 fa0e 	bl	800a8e8 <HAL_RCC_GetSysClockFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b15      	ldr	r3, [pc, #84]	; (8006524 <HAL_Init+0x68>)
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	4913      	ldr	r1, [pc, #76]	; (8006528 <HAL_Init+0x6c>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	fa22 f303 	lsr.w	r3, r2, r3
 80064e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064e6:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <HAL_Init+0x68>)
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	4a0e      	ldr	r2, [pc, #56]	; (8006528 <HAL_Init+0x6c>)
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
 80064fc:	4a0b      	ldr	r2, [pc, #44]	; (800652c <HAL_Init+0x70>)
 80064fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006500:	4a0b      	ldr	r2, [pc, #44]	; (8006530 <HAL_Init+0x74>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006506:	2000      	movs	r0, #0
 8006508:	f000 f814 	bl	8006534 <HAL_InitTick>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e002      	b.n	800651c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006516:	f7fe fa7d 	bl	8004a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	58024400 	.word	0x58024400
 8006528:	08014004 	.word	0x08014004
 800652c:	2400022c 	.word	0x2400022c
 8006530:	24000228 	.word	0x24000228

08006534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <HAL_InitTick+0x60>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e021      	b.n	800658c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006548:	4b13      	ldr	r3, [pc, #76]	; (8006598 <HAL_InitTick+0x64>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4b11      	ldr	r3, [pc, #68]	; (8006594 <HAL_InitTick+0x60>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	4619      	mov	r1, r3
 8006552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006556:	fbb3 f3f1 	udiv	r3, r3, r1
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	4618      	mov	r0, r3
 8006560:	f000 f971 	bl	8006846 <HAL_SYSTICK_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e00e      	b.n	800658c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b0f      	cmp	r3, #15
 8006572:	d80a      	bhi.n	800658a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006574:	2200      	movs	r2, #0
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	f000 f93b 	bl	80067f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006580:	4a06      	ldr	r2, [pc, #24]	; (800659c <HAL_InitTick+0x68>)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e000      	b.n	800658c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	24000234 	.word	0x24000234
 8006598:	24000228 	.word	0x24000228
 800659c:	24000230 	.word	0x24000230

080065a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_IncTick+0x20>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <HAL_IncTick+0x24>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4413      	add	r3, r2
 80065b0:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <HAL_IncTick+0x24>)
 80065b2:	6013      	str	r3, [r2, #0]
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	24000234 	.word	0x24000234
 80065c4:	240015f0 	.word	0x240015f0

080065c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return uwTick;
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <HAL_GetTick+0x14>)
 80065ce:	681b      	ldr	r3, [r3, #0]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	240015f0 	.word	0x240015f0

080065e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065e8:	f7ff ffee 	bl	80065c8 <HAL_GetTick>
 80065ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d005      	beq.n	8006606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <HAL_Delay+0x44>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006606:	bf00      	nop
 8006608:	f7ff ffde 	bl	80065c8 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	429a      	cmp	r2, r3
 8006616:	d8f7      	bhi.n	8006608 <HAL_Delay+0x28>
  {
  }
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	24000234 	.word	0x24000234

08006628 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <HAL_GetREVID+0x14>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	0c1b      	lsrs	r3, r3, #16
}
 8006632:	4618      	mov	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	5c001000 	.word	0x5c001000

08006640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <__NVIC_SetPriorityGrouping+0x40>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800665c:	4013      	ands	r3, r2
 800665e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <__NVIC_SetPriorityGrouping+0x44>)
 800666a:	4313      	orrs	r3, r2
 800666c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800666e:	4a04      	ldr	r2, [pc, #16]	; (8006680 <__NVIC_SetPriorityGrouping+0x40>)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	60d3      	str	r3, [r2, #12]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	e000ed00 	.word	0xe000ed00
 8006684:	05fa0000 	.word	0x05fa0000

08006688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800668c:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <__NVIC_GetPriorityGrouping+0x18>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	0a1b      	lsrs	r3, r3, #8
 8006692:	f003 0307 	and.w	r3, r3, #7
}
 8006696:	4618      	mov	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	e000ed00 	.word	0xe000ed00

080066a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	db0b      	blt.n	80066ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	f003 021f 	and.w	r2, r3, #31
 80066bc:	4907      	ldr	r1, [pc, #28]	; (80066dc <__NVIC_EnableIRQ+0x38>)
 80066be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2001      	movs	r0, #1
 80066c6:	fa00 f202 	lsl.w	r2, r0, r2
 80066ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	e000e100 	.word	0xe000e100

080066e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db0a      	blt.n	800670a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	490c      	ldr	r1, [pc, #48]	; (800672c <__NVIC_SetPriority+0x4c>)
 80066fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066fe:	0112      	lsls	r2, r2, #4
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	440b      	add	r3, r1
 8006704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006708:	e00a      	b.n	8006720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4908      	ldr	r1, [pc, #32]	; (8006730 <__NVIC_SetPriority+0x50>)
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	3b04      	subs	r3, #4
 8006718:	0112      	lsls	r2, r2, #4
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	440b      	add	r3, r1
 800671e:	761a      	strb	r2, [r3, #24]
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	e000e100 	.word	0xe000e100
 8006730:	e000ed00 	.word	0xe000ed00

08006734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	; 0x24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f1c3 0307 	rsb	r3, r3, #7
 800674e:	2b04      	cmp	r3, #4
 8006750:	bf28      	it	cs
 8006752:	2304      	movcs	r3, #4
 8006754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3304      	adds	r3, #4
 800675a:	2b06      	cmp	r3, #6
 800675c:	d902      	bls.n	8006764 <NVIC_EncodePriority+0x30>
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3b03      	subs	r3, #3
 8006762:	e000      	b.n	8006766 <NVIC_EncodePriority+0x32>
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43da      	mvns	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	401a      	ands	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800677c:	f04f 31ff 	mov.w	r1, #4294967295
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	43d9      	mvns	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800678c:	4313      	orrs	r3, r2
         );
}
 800678e:	4618      	mov	r0, r3
 8006790:	3724      	adds	r7, #36	; 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ac:	d301      	bcc.n	80067b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067ae:	2301      	movs	r3, #1
 80067b0:	e00f      	b.n	80067d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067b2:	4a0a      	ldr	r2, [pc, #40]	; (80067dc <SysTick_Config+0x40>)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067ba:	210f      	movs	r1, #15
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	f7ff ff8e 	bl	80066e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <SysTick_Config+0x40>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067ca:	4b04      	ldr	r3, [pc, #16]	; (80067dc <SysTick_Config+0x40>)
 80067cc:	2207      	movs	r2, #7
 80067ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	e000e010 	.word	0xe000e010

080067e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff29 	bl	8006640 <__NVIC_SetPriorityGrouping>
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	4603      	mov	r3, r0
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006804:	f7ff ff40 	bl	8006688 <__NVIC_GetPriorityGrouping>
 8006808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	6978      	ldr	r0, [r7, #20]
 8006810:	f7ff ff90 	bl	8006734 <NVIC_EncodePriority>
 8006814:	4602      	mov	r2, r0
 8006816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ff5f 	bl	80066e0 <__NVIC_SetPriority>
}
 8006822:	bf00      	nop
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	4603      	mov	r3, r0
 8006832:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff ff33 	bl	80066a4 <__NVIC_EnableIRQ>
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ffa4 	bl	800679c <SysTick_Config>
 8006854:	4603      	mov	r3, r0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006862:	f000 f802 	bl	800686a <HAL_SYSTICK_Callback>
}
 8006866:	bf00      	nop
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800686a:	b480      	push	{r7}
 800686c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e054      	b.n	8006934 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7f5b      	ldrb	r3, [r3, #29]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fb fd76 	bl	800238c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10c      	bne.n	80068c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a22      	ldr	r2, [pc, #136]	; (800693c <HAL_CRC_Init+0xc4>)
 80068b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0218 	bic.w	r2, r2, #24
 80068c4:	609a      	str	r2, [r3, #8]
 80068c6:	e00c      	b.n	80068e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6899      	ldr	r1, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f948 	bl	8006b68 <HAL_CRCEx_Polynomial_Set>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e028      	b.n	8006934 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	795b      	ldrb	r3, [r3, #5]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f04f 32ff 	mov.w	r2, #4294967295
 80068f2:	611a      	str	r2, [r3, #16]
 80068f4:	e004      	b.n	8006900 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6912      	ldr	r2, [r2, #16]
 80068fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	04c11db7 	.word	0x04c11db7

08006940 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2202      	movs	r2, #2
 8006954:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0201 	orr.w	r2, r2, #1
 8006964:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	2b03      	cmp	r3, #3
 800696c:	d006      	beq.n	800697c <HAL_CRC_Calculate+0x3c>
 800696e:	2b03      	cmp	r3, #3
 8006970:	d829      	bhi.n	80069c6 <HAL_CRC_Calculate+0x86>
 8006972:	2b01      	cmp	r3, #1
 8006974:	d019      	beq.n	80069aa <HAL_CRC_Calculate+0x6a>
 8006976:	2b02      	cmp	r3, #2
 8006978:	d01e      	beq.n	80069b8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800697a:	e024      	b.n	80069c6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e00a      	b.n	8006998 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	441a      	add	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6812      	ldr	r2, [r2, #0]
 8006990:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	3301      	adds	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	429a      	cmp	r2, r3
 800699e:	d3f0      	bcc.n	8006982 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	613b      	str	r3, [r7, #16]
      break;
 80069a8:	e00e      	b.n	80069c8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f812 	bl	80069d8 <CRC_Handle_8>
 80069b4:	6138      	str	r0, [r7, #16]
      break;
 80069b6:	e007      	b.n	80069c8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f899 	bl	8006af4 <CRC_Handle_16>
 80069c2:	6138      	str	r0, [r7, #16]
      break;
 80069c4:	e000      	b.n	80069c8 <HAL_CRC_Calculate+0x88>
      break;
 80069c6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80069ce:	693b      	ldr	r3, [r7, #16]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80069d8:	b480      	push	{r7}
 80069da:	b089      	sub	sp, #36	; 0x24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	e023      	b.n	8006a32 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	3301      	adds	r3, #1
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	440b      	add	r3, r1
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006a04:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	440b      	add	r3, r1
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006a14:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	3303      	adds	r3, #3
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	440b      	add	r3, r1
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006a28:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	089b      	lsrs	r3, r3, #2
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d3d6      	bcc.n	80069ea <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d04d      	beq.n	8006ae2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d107      	bne.n	8006a60 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	4413      	add	r3, r2
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d116      	bne.n	8006a98 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	b21a      	sxth	r2, r3
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	440b      	add	r3, r1
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b21b      	sxth	r3, r3
 8006a86:	4313      	orrs	r3, r2
 8006a88:	b21b      	sxth	r3, r3
 8006a8a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	8b7a      	ldrh	r2, [r7, #26]
 8006a96:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d11f      	bne.n	8006ae2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	b21a      	sxth	r2, r3
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	440b      	add	r3, r1
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b21b      	sxth	r3, r3
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b21b      	sxth	r3, r3
 8006ac2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	8b7a      	ldrh	r2, [r7, #26]
 8006ace:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	4413      	add	r3, r2
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3724      	adds	r7, #36	; 0x24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e013      	b.n	8006b2e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	041a      	lsls	r2, r3, #16
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	3302      	adds	r3, #2
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	440b      	add	r3, r1
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d3e6      	bcc.n	8006b06 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4413      	add	r3, r2
 8006b50:	881a      	ldrh	r2, [r3, #0]
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b78:	231f      	movs	r3, #31
 8006b7a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b7c:	bf00      	nop
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1e5a      	subs	r2, r3, #1
 8006b82:	613a      	str	r2, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <HAL_CRCEx_Polynomial_Set+0x34>
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0f0      	beq.n	8006b7e <HAL_CRCEx_Polynomial_Set+0x16>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b18      	cmp	r3, #24
 8006ba0:	d846      	bhi.n	8006c30 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006ba2:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006c37 	.word	0x08006c37
 8006bac:	08006c31 	.word	0x08006c31
 8006bb0:	08006c31 	.word	0x08006c31
 8006bb4:	08006c31 	.word	0x08006c31
 8006bb8:	08006c31 	.word	0x08006c31
 8006bbc:	08006c31 	.word	0x08006c31
 8006bc0:	08006c31 	.word	0x08006c31
 8006bc4:	08006c31 	.word	0x08006c31
 8006bc8:	08006c25 	.word	0x08006c25
 8006bcc:	08006c31 	.word	0x08006c31
 8006bd0:	08006c31 	.word	0x08006c31
 8006bd4:	08006c31 	.word	0x08006c31
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006c31 	.word	0x08006c31
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006c19 	.word	0x08006c19
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c31 	.word	0x08006c31
 8006bf8:	08006c31 	.word	0x08006c31
 8006bfc:	08006c31 	.word	0x08006c31
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	08006c0d 	.word	0x08006c0d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b06      	cmp	r3, #6
 8006c10:	d913      	bls.n	8006c3a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c16:	e010      	b.n	8006c3a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b07      	cmp	r3, #7
 8006c1c:	d90f      	bls.n	8006c3e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c22:	e00c      	b.n	8006c3e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	d90b      	bls.n	8006c42 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c2e:	e008      	b.n	8006c42 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	75fb      	strb	r3, [r7, #23]
      break;
 8006c34:	e006      	b.n	8006c44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c36:	bf00      	nop
 8006c38:	e004      	b.n	8006c44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e002      	b.n	8006c44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c42:	bf00      	nop
  }
  if (status == HAL_OK)
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10d      	bne.n	8006c66 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f023 0118 	bic.w	r1, r3, #24
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006c7c:	f7ff fca4 	bl	80065c8 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e316      	b.n	80072ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a66      	ldr	r2, [pc, #408]	; (8006e2c <HAL_DMA_Init+0x1b8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d04a      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a65      	ldr	r2, [pc, #404]	; (8006e30 <HAL_DMA_Init+0x1bc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d045      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a63      	ldr	r2, [pc, #396]	; (8006e34 <HAL_DMA_Init+0x1c0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d040      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a62      	ldr	r2, [pc, #392]	; (8006e38 <HAL_DMA_Init+0x1c4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d03b      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a60      	ldr	r2, [pc, #384]	; (8006e3c <HAL_DMA_Init+0x1c8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d036      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a5f      	ldr	r2, [pc, #380]	; (8006e40 <HAL_DMA_Init+0x1cc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d031      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a5d      	ldr	r2, [pc, #372]	; (8006e44 <HAL_DMA_Init+0x1d0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d02c      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a5c      	ldr	r2, [pc, #368]	; (8006e48 <HAL_DMA_Init+0x1d4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d027      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a5a      	ldr	r2, [pc, #360]	; (8006e4c <HAL_DMA_Init+0x1d8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d022      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a59      	ldr	r2, [pc, #356]	; (8006e50 <HAL_DMA_Init+0x1dc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d01d      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a57      	ldr	r2, [pc, #348]	; (8006e54 <HAL_DMA_Init+0x1e0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d018      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a56      	ldr	r2, [pc, #344]	; (8006e58 <HAL_DMA_Init+0x1e4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d013      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a54      	ldr	r2, [pc, #336]	; (8006e5c <HAL_DMA_Init+0x1e8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00e      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a53      	ldr	r2, [pc, #332]	; (8006e60 <HAL_DMA_Init+0x1ec>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d009      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a51      	ldr	r2, [pc, #324]	; (8006e64 <HAL_DMA_Init+0x1f0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <HAL_DMA_Init+0xb8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a50      	ldr	r2, [pc, #320]	; (8006e68 <HAL_DMA_Init+0x1f4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d101      	bne.n	8006d30 <HAL_DMA_Init+0xbc>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <HAL_DMA_Init+0xbe>
 8006d30:	2300      	movs	r3, #0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 813b 	beq.w	8006fae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a37      	ldr	r2, [pc, #220]	; (8006e2c <HAL_DMA_Init+0x1b8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d04a      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a36      	ldr	r2, [pc, #216]	; (8006e30 <HAL_DMA_Init+0x1bc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d045      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a34      	ldr	r2, [pc, #208]	; (8006e34 <HAL_DMA_Init+0x1c0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d040      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a33      	ldr	r2, [pc, #204]	; (8006e38 <HAL_DMA_Init+0x1c4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d03b      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a31      	ldr	r2, [pc, #196]	; (8006e3c <HAL_DMA_Init+0x1c8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d036      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a30      	ldr	r2, [pc, #192]	; (8006e40 <HAL_DMA_Init+0x1cc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d031      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a2e      	ldr	r2, [pc, #184]	; (8006e44 <HAL_DMA_Init+0x1d0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d02c      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <HAL_DMA_Init+0x1d4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d027      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a2b      	ldr	r2, [pc, #172]	; (8006e4c <HAL_DMA_Init+0x1d8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d022      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <HAL_DMA_Init+0x1dc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d01d      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a28      	ldr	r2, [pc, #160]	; (8006e54 <HAL_DMA_Init+0x1e0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d018      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a27      	ldr	r2, [pc, #156]	; (8006e58 <HAL_DMA_Init+0x1e4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a25      	ldr	r2, [pc, #148]	; (8006e5c <HAL_DMA_Init+0x1e8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00e      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a24      	ldr	r2, [pc, #144]	; (8006e60 <HAL_DMA_Init+0x1ec>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a22      	ldr	r2, [pc, #136]	; (8006e64 <HAL_DMA_Init+0x1f0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <HAL_DMA_Init+0x174>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a21      	ldr	r2, [pc, #132]	; (8006e68 <HAL_DMA_Init+0x1f4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d108      	bne.n	8006dfa <HAL_DMA_Init+0x186>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0201 	bic.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	e007      	b.n	8006e0a <HAL_DMA_Init+0x196>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e0a:	e02f      	b.n	8006e6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e0c:	f7ff fbdc 	bl	80065c8 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d928      	bls.n	8006e6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e246      	b.n	80072ba <HAL_DMA_Init+0x646>
 8006e2c:	40020010 	.word	0x40020010
 8006e30:	40020028 	.word	0x40020028
 8006e34:	40020040 	.word	0x40020040
 8006e38:	40020058 	.word	0x40020058
 8006e3c:	40020070 	.word	0x40020070
 8006e40:	40020088 	.word	0x40020088
 8006e44:	400200a0 	.word	0x400200a0
 8006e48:	400200b8 	.word	0x400200b8
 8006e4c:	40020410 	.word	0x40020410
 8006e50:	40020428 	.word	0x40020428
 8006e54:	40020440 	.word	0x40020440
 8006e58:	40020458 	.word	0x40020458
 8006e5c:	40020470 	.word	0x40020470
 8006e60:	40020488 	.word	0x40020488
 8006e64:	400204a0 	.word	0x400204a0
 8006e68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1c8      	bne.n	8006e0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4b83      	ldr	r3, [pc, #524]	; (8007094 <HAL_DMA_Init+0x420>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006e92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eaa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d107      	bne.n	8006ed0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006ed0:	4b71      	ldr	r3, [pc, #452]	; (8007098 <HAL_DMA_Init+0x424>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	4b71      	ldr	r3, [pc, #452]	; (800709c <HAL_DMA_Init+0x428>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006edc:	d328      	bcc.n	8006f30 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b28      	cmp	r3, #40	; 0x28
 8006ee4:	d903      	bls.n	8006eee <HAL_DMA_Init+0x27a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b2e      	cmp	r3, #46	; 0x2e
 8006eec:	d917      	bls.n	8006f1e <HAL_DMA_Init+0x2aa>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef4:	d903      	bls.n	8006efe <HAL_DMA_Init+0x28a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b42      	cmp	r3, #66	; 0x42
 8006efc:	d90f      	bls.n	8006f1e <HAL_DMA_Init+0x2aa>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b46      	cmp	r3, #70	; 0x46
 8006f04:	d903      	bls.n	8006f0e <HAL_DMA_Init+0x29a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2b48      	cmp	r3, #72	; 0x48
 8006f0c:	d907      	bls.n	8006f1e <HAL_DMA_Init+0x2aa>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b4e      	cmp	r3, #78	; 0x4e
 8006f14:	d905      	bls.n	8006f22 <HAL_DMA_Init+0x2ae>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b52      	cmp	r3, #82	; 0x52
 8006f1c:	d801      	bhi.n	8006f22 <HAL_DMA_Init+0x2ae>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <HAL_DMA_Init+0x2b0>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f2e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 0307 	bic.w	r3, r3, #7
 8006f46:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d117      	bne.n	8006f8a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f002 fb31 	bl	80095d4 <DMA_CheckFifoParam>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2240      	movs	r2, #64	; 0x40
 8006f7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e197      	b.n	80072ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 fa6c 	bl	8009470 <DMA_CalcBaseAndBitshift>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	223f      	movs	r2, #63	; 0x3f
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
 8006fac:	e0cd      	b.n	800714a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a3b      	ldr	r2, [pc, #236]	; (80070a0 <HAL_DMA_Init+0x42c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <HAL_DMA_Init+0x38a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a39      	ldr	r2, [pc, #228]	; (80070a4 <HAL_DMA_Init+0x430>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <HAL_DMA_Init+0x38a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a38      	ldr	r2, [pc, #224]	; (80070a8 <HAL_DMA_Init+0x434>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_DMA_Init+0x38a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a36      	ldr	r2, [pc, #216]	; (80070ac <HAL_DMA_Init+0x438>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <HAL_DMA_Init+0x38a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <HAL_DMA_Init+0x43c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_DMA_Init+0x38a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a33      	ldr	r2, [pc, #204]	; (80070b4 <HAL_DMA_Init+0x440>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_DMA_Init+0x38a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a32      	ldr	r2, [pc, #200]	; (80070b8 <HAL_DMA_Init+0x444>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_DMA_Init+0x38a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a30      	ldr	r2, [pc, #192]	; (80070bc <HAL_DMA_Init+0x448>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <HAL_DMA_Init+0x38e>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <HAL_DMA_Init+0x390>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8097 	beq.w	8007138 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a24      	ldr	r2, [pc, #144]	; (80070a0 <HAL_DMA_Init+0x42c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d021      	beq.n	8007058 <HAL_DMA_Init+0x3e4>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a22      	ldr	r2, [pc, #136]	; (80070a4 <HAL_DMA_Init+0x430>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01c      	beq.n	8007058 <HAL_DMA_Init+0x3e4>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <HAL_DMA_Init+0x434>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d017      	beq.n	8007058 <HAL_DMA_Init+0x3e4>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <HAL_DMA_Init+0x438>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d012      	beq.n	8007058 <HAL_DMA_Init+0x3e4>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <HAL_DMA_Init+0x43c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00d      	beq.n	8007058 <HAL_DMA_Init+0x3e4>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <HAL_DMA_Init+0x440>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d008      	beq.n	8007058 <HAL_DMA_Init+0x3e4>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <HAL_DMA_Init+0x444>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <HAL_DMA_Init+0x3e4>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a19      	ldr	r2, [pc, #100]	; (80070bc <HAL_DMA_Init+0x448>)
 8007056:	4293      	cmp	r3, r2
 8007058:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <HAL_DMA_Init+0x44c>)
 8007076:	4013      	ands	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d020      	beq.n	80070c4 <HAL_DMA_Init+0x450>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d102      	bne.n	8007090 <HAL_DMA_Init+0x41c>
 800708a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800708e:	e01a      	b.n	80070c6 <HAL_DMA_Init+0x452>
 8007090:	2300      	movs	r3, #0
 8007092:	e018      	b.n	80070c6 <HAL_DMA_Init+0x452>
 8007094:	fe10803f 	.word	0xfe10803f
 8007098:	5c001000 	.word	0x5c001000
 800709c:	ffff0000 	.word	0xffff0000
 80070a0:	58025408 	.word	0x58025408
 80070a4:	5802541c 	.word	0x5802541c
 80070a8:	58025430 	.word	0x58025430
 80070ac:	58025444 	.word	0x58025444
 80070b0:	58025458 	.word	0x58025458
 80070b4:	5802546c 	.word	0x5802546c
 80070b8:	58025480 	.word	0x58025480
 80070bc:	58025494 	.word	0x58025494
 80070c0:	fffe000f 	.word	0xfffe000f
 80070c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68d2      	ldr	r2, [r2, #12]
 80070ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80070cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80070d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80070dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80070e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80070ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80070f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	4b6e      	ldr	r3, [pc, #440]	; (80072c4 <HAL_DMA_Init+0x650>)
 800710c:	4413      	add	r3, r2
 800710e:	4a6e      	ldr	r2, [pc, #440]	; (80072c8 <HAL_DMA_Init+0x654>)
 8007110:	fba2 2303 	umull	r2, r3, r2, r3
 8007114:	091b      	lsrs	r3, r3, #4
 8007116:	009a      	lsls	r2, r3, #2
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f002 f9a7 	bl	8009470 <DMA_CalcBaseAndBitshift>
 8007122:	4603      	mov	r3, r0
 8007124:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	2201      	movs	r2, #1
 8007130:	409a      	lsls	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	605a      	str	r2, [r3, #4]
 8007136:	e008      	b.n	800714a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2240      	movs	r2, #64	; 0x40
 800713c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2203      	movs	r2, #3
 8007142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e0b7      	b.n	80072ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a5f      	ldr	r2, [pc, #380]	; (80072cc <HAL_DMA_Init+0x658>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d072      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a5d      	ldr	r2, [pc, #372]	; (80072d0 <HAL_DMA_Init+0x65c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d06d      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a5c      	ldr	r2, [pc, #368]	; (80072d4 <HAL_DMA_Init+0x660>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d068      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a5a      	ldr	r2, [pc, #360]	; (80072d8 <HAL_DMA_Init+0x664>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d063      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a59      	ldr	r2, [pc, #356]	; (80072dc <HAL_DMA_Init+0x668>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d05e      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a57      	ldr	r2, [pc, #348]	; (80072e0 <HAL_DMA_Init+0x66c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d059      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a56      	ldr	r2, [pc, #344]	; (80072e4 <HAL_DMA_Init+0x670>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d054      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a54      	ldr	r2, [pc, #336]	; (80072e8 <HAL_DMA_Init+0x674>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d04f      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a53      	ldr	r2, [pc, #332]	; (80072ec <HAL_DMA_Init+0x678>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d04a      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a51      	ldr	r2, [pc, #324]	; (80072f0 <HAL_DMA_Init+0x67c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d045      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a50      	ldr	r2, [pc, #320]	; (80072f4 <HAL_DMA_Init+0x680>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d040      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a4e      	ldr	r2, [pc, #312]	; (80072f8 <HAL_DMA_Init+0x684>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d03b      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a4d      	ldr	r2, [pc, #308]	; (80072fc <HAL_DMA_Init+0x688>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d036      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a4b      	ldr	r2, [pc, #300]	; (8007300 <HAL_DMA_Init+0x68c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d031      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a4a      	ldr	r2, [pc, #296]	; (8007304 <HAL_DMA_Init+0x690>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d02c      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a48      	ldr	r2, [pc, #288]	; (8007308 <HAL_DMA_Init+0x694>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d027      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a47      	ldr	r2, [pc, #284]	; (800730c <HAL_DMA_Init+0x698>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d022      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a45      	ldr	r2, [pc, #276]	; (8007310 <HAL_DMA_Init+0x69c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d01d      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a44      	ldr	r2, [pc, #272]	; (8007314 <HAL_DMA_Init+0x6a0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d018      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a42      	ldr	r2, [pc, #264]	; (8007318 <HAL_DMA_Init+0x6a4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a41      	ldr	r2, [pc, #260]	; (800731c <HAL_DMA_Init+0x6a8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a3f      	ldr	r2, [pc, #252]	; (8007320 <HAL_DMA_Init+0x6ac>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3e      	ldr	r2, [pc, #248]	; (8007324 <HAL_DMA_Init+0x6b0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_DMA_Init+0x5c6>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a3c      	ldr	r2, [pc, #240]	; (8007328 <HAL_DMA_Init+0x6b4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <HAL_DMA_Init+0x5ca>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <HAL_DMA_Init+0x5cc>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d032      	beq.n	80072aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f002 fa41 	bl	80096cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d102      	bne.n	8007258 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800726c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d010      	beq.n	8007298 <HAL_DMA_Init+0x624>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b08      	cmp	r3, #8
 800727c:	d80c      	bhi.n	8007298 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f002 fabe 	bl	8009800 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	e008      	b.n	80072aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	a7fdabf8 	.word	0xa7fdabf8
 80072c8:	cccccccd 	.word	0xcccccccd
 80072cc:	40020010 	.word	0x40020010
 80072d0:	40020028 	.word	0x40020028
 80072d4:	40020040 	.word	0x40020040
 80072d8:	40020058 	.word	0x40020058
 80072dc:	40020070 	.word	0x40020070
 80072e0:	40020088 	.word	0x40020088
 80072e4:	400200a0 	.word	0x400200a0
 80072e8:	400200b8 	.word	0x400200b8
 80072ec:	40020410 	.word	0x40020410
 80072f0:	40020428 	.word	0x40020428
 80072f4:	40020440 	.word	0x40020440
 80072f8:	40020458 	.word	0x40020458
 80072fc:	40020470 	.word	0x40020470
 8007300:	40020488 	.word	0x40020488
 8007304:	400204a0 	.word	0x400204a0
 8007308:	400204b8 	.word	0x400204b8
 800730c:	58025408 	.word	0x58025408
 8007310:	5802541c 	.word	0x5802541c
 8007314:	58025430 	.word	0x58025430
 8007318:	58025444 	.word	0x58025444
 800731c:	58025458 	.word	0x58025458
 8007320:	5802546c 	.word	0x5802546c
 8007324:	58025480 	.word	0x58025480
 8007328:	58025494 	.word	0x58025494

0800732c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e226      	b.n	8007796 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_DMA_Start_IT+0x2a>
 8007352:	2302      	movs	r3, #2
 8007354:	e21f      	b.n	8007796 <HAL_DMA_Start_IT+0x46a>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	f040 820a 	bne.w	8007780 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a68      	ldr	r2, [pc, #416]	; (8007520 <HAL_DMA_Start_IT+0x1f4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d04a      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a66      	ldr	r2, [pc, #408]	; (8007524 <HAL_DMA_Start_IT+0x1f8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d045      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a65      	ldr	r2, [pc, #404]	; (8007528 <HAL_DMA_Start_IT+0x1fc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d040      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a63      	ldr	r2, [pc, #396]	; (800752c <HAL_DMA_Start_IT+0x200>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d03b      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a62      	ldr	r2, [pc, #392]	; (8007530 <HAL_DMA_Start_IT+0x204>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d036      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a60      	ldr	r2, [pc, #384]	; (8007534 <HAL_DMA_Start_IT+0x208>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d031      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a5f      	ldr	r2, [pc, #380]	; (8007538 <HAL_DMA_Start_IT+0x20c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d02c      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a5d      	ldr	r2, [pc, #372]	; (800753c <HAL_DMA_Start_IT+0x210>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d027      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a5c      	ldr	r2, [pc, #368]	; (8007540 <HAL_DMA_Start_IT+0x214>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a5a      	ldr	r2, [pc, #360]	; (8007544 <HAL_DMA_Start_IT+0x218>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01d      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a59      	ldr	r2, [pc, #356]	; (8007548 <HAL_DMA_Start_IT+0x21c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d018      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a57      	ldr	r2, [pc, #348]	; (800754c <HAL_DMA_Start_IT+0x220>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a56      	ldr	r2, [pc, #344]	; (8007550 <HAL_DMA_Start_IT+0x224>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a54      	ldr	r2, [pc, #336]	; (8007554 <HAL_DMA_Start_IT+0x228>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a53      	ldr	r2, [pc, #332]	; (8007558 <HAL_DMA_Start_IT+0x22c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_DMA_Start_IT+0xee>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a51      	ldr	r2, [pc, #324]	; (800755c <HAL_DMA_Start_IT+0x230>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d108      	bne.n	800742c <HAL_DMA_Start_IT+0x100>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e007      	b.n	800743c <HAL_DMA_Start_IT+0x110>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f001 fe68 	bl	8009118 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a34      	ldr	r2, [pc, #208]	; (8007520 <HAL_DMA_Start_IT+0x1f4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04a      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a33      	ldr	r2, [pc, #204]	; (8007524 <HAL_DMA_Start_IT+0x1f8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d045      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a31      	ldr	r2, [pc, #196]	; (8007528 <HAL_DMA_Start_IT+0x1fc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d040      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a30      	ldr	r2, [pc, #192]	; (800752c <HAL_DMA_Start_IT+0x200>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d03b      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a2e      	ldr	r2, [pc, #184]	; (8007530 <HAL_DMA_Start_IT+0x204>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a2d      	ldr	r2, [pc, #180]	; (8007534 <HAL_DMA_Start_IT+0x208>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d031      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a2b      	ldr	r2, [pc, #172]	; (8007538 <HAL_DMA_Start_IT+0x20c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02c      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2a      	ldr	r2, [pc, #168]	; (800753c <HAL_DMA_Start_IT+0x210>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a28      	ldr	r2, [pc, #160]	; (8007540 <HAL_DMA_Start_IT+0x214>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a27      	ldr	r2, [pc, #156]	; (8007544 <HAL_DMA_Start_IT+0x218>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a25      	ldr	r2, [pc, #148]	; (8007548 <HAL_DMA_Start_IT+0x21c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a24      	ldr	r2, [pc, #144]	; (800754c <HAL_DMA_Start_IT+0x220>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a22      	ldr	r2, [pc, #136]	; (8007550 <HAL_DMA_Start_IT+0x224>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a21      	ldr	r2, [pc, #132]	; (8007554 <HAL_DMA_Start_IT+0x228>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <HAL_DMA_Start_IT+0x22c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_DMA_Start_IT+0x1bc>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1e      	ldr	r2, [pc, #120]	; (800755c <HAL_DMA_Start_IT+0x230>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d101      	bne.n	80074ec <HAL_DMA_Start_IT+0x1c0>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e000      	b.n	80074ee <HAL_DMA_Start_IT+0x1c2>
 80074ec:	2300      	movs	r3, #0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d036      	beq.n	8007560 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f023 021e 	bic.w	r2, r3, #30
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0216 	orr.w	r2, r2, #22
 8007504:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	d03e      	beq.n	800758c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0208 	orr.w	r2, r2, #8
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e035      	b.n	800758c <HAL_DMA_Start_IT+0x260>
 8007520:	40020010 	.word	0x40020010
 8007524:	40020028 	.word	0x40020028
 8007528:	40020040 	.word	0x40020040
 800752c:	40020058 	.word	0x40020058
 8007530:	40020070 	.word	0x40020070
 8007534:	40020088 	.word	0x40020088
 8007538:	400200a0 	.word	0x400200a0
 800753c:	400200b8 	.word	0x400200b8
 8007540:	40020410 	.word	0x40020410
 8007544:	40020428 	.word	0x40020428
 8007548:	40020440 	.word	0x40020440
 800754c:	40020458 	.word	0x40020458
 8007550:	40020470 	.word	0x40020470
 8007554:	40020488 	.word	0x40020488
 8007558:	400204a0 	.word	0x400204a0
 800755c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f023 020e 	bic.w	r2, r3, #14
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 020a 	orr.w	r2, r2, #10
 8007572:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0204 	orr.w	r2, r2, #4
 800758a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a83      	ldr	r2, [pc, #524]	; (80077a0 <HAL_DMA_Start_IT+0x474>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d072      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a82      	ldr	r2, [pc, #520]	; (80077a4 <HAL_DMA_Start_IT+0x478>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d06d      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a80      	ldr	r2, [pc, #512]	; (80077a8 <HAL_DMA_Start_IT+0x47c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d068      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7f      	ldr	r2, [pc, #508]	; (80077ac <HAL_DMA_Start_IT+0x480>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d063      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a7d      	ldr	r2, [pc, #500]	; (80077b0 <HAL_DMA_Start_IT+0x484>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d05e      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a7c      	ldr	r2, [pc, #496]	; (80077b4 <HAL_DMA_Start_IT+0x488>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d059      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a7a      	ldr	r2, [pc, #488]	; (80077b8 <HAL_DMA_Start_IT+0x48c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d054      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a79      	ldr	r2, [pc, #484]	; (80077bc <HAL_DMA_Start_IT+0x490>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d04f      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a77      	ldr	r2, [pc, #476]	; (80077c0 <HAL_DMA_Start_IT+0x494>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d04a      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a76      	ldr	r2, [pc, #472]	; (80077c4 <HAL_DMA_Start_IT+0x498>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d045      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a74      	ldr	r2, [pc, #464]	; (80077c8 <HAL_DMA_Start_IT+0x49c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d040      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a73      	ldr	r2, [pc, #460]	; (80077cc <HAL_DMA_Start_IT+0x4a0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d03b      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a71      	ldr	r2, [pc, #452]	; (80077d0 <HAL_DMA_Start_IT+0x4a4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d036      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a70      	ldr	r2, [pc, #448]	; (80077d4 <HAL_DMA_Start_IT+0x4a8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d031      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a6e      	ldr	r2, [pc, #440]	; (80077d8 <HAL_DMA_Start_IT+0x4ac>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d02c      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a6d      	ldr	r2, [pc, #436]	; (80077dc <HAL_DMA_Start_IT+0x4b0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d027      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a6b      	ldr	r2, [pc, #428]	; (80077e0 <HAL_DMA_Start_IT+0x4b4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d022      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a6a      	ldr	r2, [pc, #424]	; (80077e4 <HAL_DMA_Start_IT+0x4b8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d01d      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a68      	ldr	r2, [pc, #416]	; (80077e8 <HAL_DMA_Start_IT+0x4bc>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d018      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a67      	ldr	r2, [pc, #412]	; (80077ec <HAL_DMA_Start_IT+0x4c0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d013      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a65      	ldr	r2, [pc, #404]	; (80077f0 <HAL_DMA_Start_IT+0x4c4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00e      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a64      	ldr	r2, [pc, #400]	; (80077f4 <HAL_DMA_Start_IT+0x4c8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d009      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a62      	ldr	r2, [pc, #392]	; (80077f8 <HAL_DMA_Start_IT+0x4cc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d004      	beq.n	800767c <HAL_DMA_Start_IT+0x350>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a61      	ldr	r2, [pc, #388]	; (80077fc <HAL_DMA_Start_IT+0x4d0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d101      	bne.n	8007680 <HAL_DMA_Start_IT+0x354>
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <HAL_DMA_Start_IT+0x356>
 8007680:	2300      	movs	r3, #0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01a      	beq.n	80076bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a37      	ldr	r2, [pc, #220]	; (80077a0 <HAL_DMA_Start_IT+0x474>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d04a      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a36      	ldr	r2, [pc, #216]	; (80077a4 <HAL_DMA_Start_IT+0x478>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d045      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a34      	ldr	r2, [pc, #208]	; (80077a8 <HAL_DMA_Start_IT+0x47c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d040      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a33      	ldr	r2, [pc, #204]	; (80077ac <HAL_DMA_Start_IT+0x480>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d03b      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a31      	ldr	r2, [pc, #196]	; (80077b0 <HAL_DMA_Start_IT+0x484>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d036      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a30      	ldr	r2, [pc, #192]	; (80077b4 <HAL_DMA_Start_IT+0x488>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d031      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a2e      	ldr	r2, [pc, #184]	; (80077b8 <HAL_DMA_Start_IT+0x48c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d02c      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2d      	ldr	r2, [pc, #180]	; (80077bc <HAL_DMA_Start_IT+0x490>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d027      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a2b      	ldr	r2, [pc, #172]	; (80077c0 <HAL_DMA_Start_IT+0x494>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d022      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a2a      	ldr	r2, [pc, #168]	; (80077c4 <HAL_DMA_Start_IT+0x498>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d01d      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a28      	ldr	r2, [pc, #160]	; (80077c8 <HAL_DMA_Start_IT+0x49c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d018      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a27      	ldr	r2, [pc, #156]	; (80077cc <HAL_DMA_Start_IT+0x4a0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d013      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <HAL_DMA_Start_IT+0x4a4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00e      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a24      	ldr	r2, [pc, #144]	; (80077d4 <HAL_DMA_Start_IT+0x4a8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d009      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a22      	ldr	r2, [pc, #136]	; (80077d8 <HAL_DMA_Start_IT+0x4ac>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d004      	beq.n	800775c <HAL_DMA_Start_IT+0x430>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <HAL_DMA_Start_IT+0x4b0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d108      	bne.n	800776e <HAL_DMA_Start_IT+0x442>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	e012      	b.n	8007794 <HAL_DMA_Start_IT+0x468>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0201 	orr.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	e009      	b.n	8007794 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40020010 	.word	0x40020010
 80077a4:	40020028 	.word	0x40020028
 80077a8:	40020040 	.word	0x40020040
 80077ac:	40020058 	.word	0x40020058
 80077b0:	40020070 	.word	0x40020070
 80077b4:	40020088 	.word	0x40020088
 80077b8:	400200a0 	.word	0x400200a0
 80077bc:	400200b8 	.word	0x400200b8
 80077c0:	40020410 	.word	0x40020410
 80077c4:	40020428 	.word	0x40020428
 80077c8:	40020440 	.word	0x40020440
 80077cc:	40020458 	.word	0x40020458
 80077d0:	40020470 	.word	0x40020470
 80077d4:	40020488 	.word	0x40020488
 80077d8:	400204a0 	.word	0x400204a0
 80077dc:	400204b8 	.word	0x400204b8
 80077e0:	58025408 	.word	0x58025408
 80077e4:	5802541c 	.word	0x5802541c
 80077e8:	58025430 	.word	0x58025430
 80077ec:	58025444 	.word	0x58025444
 80077f0:	58025458 	.word	0x58025458
 80077f4:	5802546c 	.word	0x5802546c
 80077f8:	58025480 	.word	0x58025480
 80077fc:	58025494 	.word	0x58025494

08007800 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007808:	f7fe fede 	bl	80065c8 <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e2dc      	b.n	8007dd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d008      	beq.n	8007836 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e2cd      	b.n	8007dd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a76      	ldr	r2, [pc, #472]	; (8007a14 <HAL_DMA_Abort+0x214>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d04a      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a74      	ldr	r2, [pc, #464]	; (8007a18 <HAL_DMA_Abort+0x218>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d045      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a73      	ldr	r2, [pc, #460]	; (8007a1c <HAL_DMA_Abort+0x21c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d040      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a71      	ldr	r2, [pc, #452]	; (8007a20 <HAL_DMA_Abort+0x220>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d03b      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a70      	ldr	r2, [pc, #448]	; (8007a24 <HAL_DMA_Abort+0x224>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d036      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6e      	ldr	r2, [pc, #440]	; (8007a28 <HAL_DMA_Abort+0x228>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6d      	ldr	r2, [pc, #436]	; (8007a2c <HAL_DMA_Abort+0x22c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d02c      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a6b      	ldr	r2, [pc, #428]	; (8007a30 <HAL_DMA_Abort+0x230>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d027      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a6a      	ldr	r2, [pc, #424]	; (8007a34 <HAL_DMA_Abort+0x234>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d022      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a68      	ldr	r2, [pc, #416]	; (8007a38 <HAL_DMA_Abort+0x238>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01d      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a67      	ldr	r2, [pc, #412]	; (8007a3c <HAL_DMA_Abort+0x23c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a65      	ldr	r2, [pc, #404]	; (8007a40 <HAL_DMA_Abort+0x240>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a64      	ldr	r2, [pc, #400]	; (8007a44 <HAL_DMA_Abort+0x244>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a62      	ldr	r2, [pc, #392]	; (8007a48 <HAL_DMA_Abort+0x248>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a61      	ldr	r2, [pc, #388]	; (8007a4c <HAL_DMA_Abort+0x24c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_DMA_Abort+0xd6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a5f      	ldr	r2, [pc, #380]	; (8007a50 <HAL_DMA_Abort+0x250>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <HAL_DMA_Abort+0xda>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <HAL_DMA_Abort+0xdc>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d013      	beq.n	8007908 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 021e 	bic.w	r2, r2, #30
 80078ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695a      	ldr	r2, [r3, #20]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e00a      	b.n	800791e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 020e 	bic.w	r2, r2, #14
 8007916:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a3c      	ldr	r2, [pc, #240]	; (8007a14 <HAL_DMA_Abort+0x214>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d072      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a3a      	ldr	r2, [pc, #232]	; (8007a18 <HAL_DMA_Abort+0x218>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d06d      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a39      	ldr	r2, [pc, #228]	; (8007a1c <HAL_DMA_Abort+0x21c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d068      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a37      	ldr	r2, [pc, #220]	; (8007a20 <HAL_DMA_Abort+0x220>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d063      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a36      	ldr	r2, [pc, #216]	; (8007a24 <HAL_DMA_Abort+0x224>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d05e      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a34      	ldr	r2, [pc, #208]	; (8007a28 <HAL_DMA_Abort+0x228>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d059      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a33      	ldr	r2, [pc, #204]	; (8007a2c <HAL_DMA_Abort+0x22c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d054      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a31      	ldr	r2, [pc, #196]	; (8007a30 <HAL_DMA_Abort+0x230>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d04f      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a30      	ldr	r2, [pc, #192]	; (8007a34 <HAL_DMA_Abort+0x234>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d04a      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a2e      	ldr	r2, [pc, #184]	; (8007a38 <HAL_DMA_Abort+0x238>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d045      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2d      	ldr	r2, [pc, #180]	; (8007a3c <HAL_DMA_Abort+0x23c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d040      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a2b      	ldr	r2, [pc, #172]	; (8007a40 <HAL_DMA_Abort+0x240>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d03b      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a2a      	ldr	r2, [pc, #168]	; (8007a44 <HAL_DMA_Abort+0x244>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d036      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a28      	ldr	r2, [pc, #160]	; (8007a48 <HAL_DMA_Abort+0x248>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d031      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a27      	ldr	r2, [pc, #156]	; (8007a4c <HAL_DMA_Abort+0x24c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d02c      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a25      	ldr	r2, [pc, #148]	; (8007a50 <HAL_DMA_Abort+0x250>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d027      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a24      	ldr	r2, [pc, #144]	; (8007a54 <HAL_DMA_Abort+0x254>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d022      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <HAL_DMA_Abort+0x258>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d01d      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <HAL_DMA_Abort+0x25c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d018      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <HAL_DMA_Abort+0x260>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d013      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <HAL_DMA_Abort+0x264>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_DMA_Abort+0x268>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d009      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_DMA_Abort+0x26c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_DMA_Abort+0x20e>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a19      	ldr	r2, [pc, #100]	; (8007a70 <HAL_DMA_Abort+0x270>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d132      	bne.n	8007a74 <HAL_DMA_Abort+0x274>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e031      	b.n	8007a76 <HAL_DMA_Abort+0x276>
 8007a12:	bf00      	nop
 8007a14:	40020010 	.word	0x40020010
 8007a18:	40020028 	.word	0x40020028
 8007a1c:	40020040 	.word	0x40020040
 8007a20:	40020058 	.word	0x40020058
 8007a24:	40020070 	.word	0x40020070
 8007a28:	40020088 	.word	0x40020088
 8007a2c:	400200a0 	.word	0x400200a0
 8007a30:	400200b8 	.word	0x400200b8
 8007a34:	40020410 	.word	0x40020410
 8007a38:	40020428 	.word	0x40020428
 8007a3c:	40020440 	.word	0x40020440
 8007a40:	40020458 	.word	0x40020458
 8007a44:	40020470 	.word	0x40020470
 8007a48:	40020488 	.word	0x40020488
 8007a4c:	400204a0 	.word	0x400204a0
 8007a50:	400204b8 	.word	0x400204b8
 8007a54:	58025408 	.word	0x58025408
 8007a58:	5802541c 	.word	0x5802541c
 8007a5c:	58025430 	.word	0x58025430
 8007a60:	58025444 	.word	0x58025444
 8007a64:	58025458 	.word	0x58025458
 8007a68:	5802546c 	.word	0x5802546c
 8007a6c:	58025480 	.word	0x58025480
 8007a70:	58025494 	.word	0x58025494
 8007a74:	2300      	movs	r3, #0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a6d      	ldr	r2, [pc, #436]	; (8007c44 <HAL_DMA_Abort+0x444>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d04a      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a6b      	ldr	r2, [pc, #428]	; (8007c48 <HAL_DMA_Abort+0x448>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d045      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a6a      	ldr	r2, [pc, #424]	; (8007c4c <HAL_DMA_Abort+0x44c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d040      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a68      	ldr	r2, [pc, #416]	; (8007c50 <HAL_DMA_Abort+0x450>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d03b      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a67      	ldr	r2, [pc, #412]	; (8007c54 <HAL_DMA_Abort+0x454>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d036      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a65      	ldr	r2, [pc, #404]	; (8007c58 <HAL_DMA_Abort+0x458>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d031      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a64      	ldr	r2, [pc, #400]	; (8007c5c <HAL_DMA_Abort+0x45c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02c      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a62      	ldr	r2, [pc, #392]	; (8007c60 <HAL_DMA_Abort+0x460>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d027      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a61      	ldr	r2, [pc, #388]	; (8007c64 <HAL_DMA_Abort+0x464>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a5f      	ldr	r2, [pc, #380]	; (8007c68 <HAL_DMA_Abort+0x468>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a5e      	ldr	r2, [pc, #376]	; (8007c6c <HAL_DMA_Abort+0x46c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a5c      	ldr	r2, [pc, #368]	; (8007c70 <HAL_DMA_Abort+0x470>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a5b      	ldr	r2, [pc, #364]	; (8007c74 <HAL_DMA_Abort+0x474>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a59      	ldr	r2, [pc, #356]	; (8007c78 <HAL_DMA_Abort+0x478>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a58      	ldr	r2, [pc, #352]	; (8007c7c <HAL_DMA_Abort+0x47c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_DMA_Abort+0x32a>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a56      	ldr	r2, [pc, #344]	; (8007c80 <HAL_DMA_Abort+0x480>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d108      	bne.n	8007b3c <HAL_DMA_Abort+0x33c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e007      	b.n	8007b4c <HAL_DMA_Abort+0x34c>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007b4c:	e013      	b.n	8007b76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b4e:	f7fe fd3b 	bl	80065c8 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d90c      	bls.n	8007b76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2203      	movs	r2, #3
 8007b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e12d      	b.n	8007dd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2f      	ldr	r2, [pc, #188]	; (8007c44 <HAL_DMA_Abort+0x444>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d04a      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <HAL_DMA_Abort+0x448>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d045      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2c      	ldr	r2, [pc, #176]	; (8007c4c <HAL_DMA_Abort+0x44c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d040      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2a      	ldr	r2, [pc, #168]	; (8007c50 <HAL_DMA_Abort+0x450>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d03b      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a29      	ldr	r2, [pc, #164]	; (8007c54 <HAL_DMA_Abort+0x454>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d036      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a27      	ldr	r2, [pc, #156]	; (8007c58 <HAL_DMA_Abort+0x458>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d031      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a26      	ldr	r2, [pc, #152]	; (8007c5c <HAL_DMA_Abort+0x45c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d02c      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a24      	ldr	r2, [pc, #144]	; (8007c60 <HAL_DMA_Abort+0x460>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d027      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a23      	ldr	r2, [pc, #140]	; (8007c64 <HAL_DMA_Abort+0x464>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d022      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a21      	ldr	r2, [pc, #132]	; (8007c68 <HAL_DMA_Abort+0x468>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01d      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a20      	ldr	r2, [pc, #128]	; (8007c6c <HAL_DMA_Abort+0x46c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d018      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1e      	ldr	r2, [pc, #120]	; (8007c70 <HAL_DMA_Abort+0x470>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1d      	ldr	r2, [pc, #116]	; (8007c74 <HAL_DMA_Abort+0x474>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00e      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1b      	ldr	r2, [pc, #108]	; (8007c78 <HAL_DMA_Abort+0x478>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d009      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a1a      	ldr	r2, [pc, #104]	; (8007c7c <HAL_DMA_Abort+0x47c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_DMA_Abort+0x422>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a18      	ldr	r2, [pc, #96]	; (8007c80 <HAL_DMA_Abort+0x480>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d101      	bne.n	8007c26 <HAL_DMA_Abort+0x426>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <HAL_DMA_Abort+0x428>
 8007c26:	2300      	movs	r3, #0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d02b      	beq.n	8007c84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	223f      	movs	r2, #63	; 0x3f
 8007c3c:	409a      	lsls	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	609a      	str	r2, [r3, #8]
 8007c42:	e02a      	b.n	8007c9a <HAL_DMA_Abort+0x49a>
 8007c44:	40020010 	.word	0x40020010
 8007c48:	40020028 	.word	0x40020028
 8007c4c:	40020040 	.word	0x40020040
 8007c50:	40020058 	.word	0x40020058
 8007c54:	40020070 	.word	0x40020070
 8007c58:	40020088 	.word	0x40020088
 8007c5c:	400200a0 	.word	0x400200a0
 8007c60:	400200b8 	.word	0x400200b8
 8007c64:	40020410 	.word	0x40020410
 8007c68:	40020428 	.word	0x40020428
 8007c6c:	40020440 	.word	0x40020440
 8007c70:	40020458 	.word	0x40020458
 8007c74:	40020470 	.word	0x40020470
 8007c78:	40020488 	.word	0x40020488
 8007c7c:	400204a0 	.word	0x400204a0
 8007c80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8e:	f003 031f 	and.w	r3, r3, #31
 8007c92:	2201      	movs	r2, #1
 8007c94:	409a      	lsls	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a4f      	ldr	r2, [pc, #316]	; (8007ddc <HAL_DMA_Abort+0x5dc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d072      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a4d      	ldr	r2, [pc, #308]	; (8007de0 <HAL_DMA_Abort+0x5e0>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d06d      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a4c      	ldr	r2, [pc, #304]	; (8007de4 <HAL_DMA_Abort+0x5e4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d068      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a4a      	ldr	r2, [pc, #296]	; (8007de8 <HAL_DMA_Abort+0x5e8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d063      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a49      	ldr	r2, [pc, #292]	; (8007dec <HAL_DMA_Abort+0x5ec>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d05e      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a47      	ldr	r2, [pc, #284]	; (8007df0 <HAL_DMA_Abort+0x5f0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d059      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a46      	ldr	r2, [pc, #280]	; (8007df4 <HAL_DMA_Abort+0x5f4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d054      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a44      	ldr	r2, [pc, #272]	; (8007df8 <HAL_DMA_Abort+0x5f8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d04f      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a43      	ldr	r2, [pc, #268]	; (8007dfc <HAL_DMA_Abort+0x5fc>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d04a      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a41      	ldr	r2, [pc, #260]	; (8007e00 <HAL_DMA_Abort+0x600>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d045      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a40      	ldr	r2, [pc, #256]	; (8007e04 <HAL_DMA_Abort+0x604>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d040      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a3e      	ldr	r2, [pc, #248]	; (8007e08 <HAL_DMA_Abort+0x608>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d03b      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a3d      	ldr	r2, [pc, #244]	; (8007e0c <HAL_DMA_Abort+0x60c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d036      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a3b      	ldr	r2, [pc, #236]	; (8007e10 <HAL_DMA_Abort+0x610>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d031      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a3a      	ldr	r2, [pc, #232]	; (8007e14 <HAL_DMA_Abort+0x614>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d02c      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a38      	ldr	r2, [pc, #224]	; (8007e18 <HAL_DMA_Abort+0x618>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d027      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a37      	ldr	r2, [pc, #220]	; (8007e1c <HAL_DMA_Abort+0x61c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d022      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a35      	ldr	r2, [pc, #212]	; (8007e20 <HAL_DMA_Abort+0x620>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01d      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a34      	ldr	r2, [pc, #208]	; (8007e24 <HAL_DMA_Abort+0x624>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d018      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a32      	ldr	r2, [pc, #200]	; (8007e28 <HAL_DMA_Abort+0x628>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a31      	ldr	r2, [pc, #196]	; (8007e2c <HAL_DMA_Abort+0x62c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a2f      	ldr	r2, [pc, #188]	; (8007e30 <HAL_DMA_Abort+0x630>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a2e      	ldr	r2, [pc, #184]	; (8007e34 <HAL_DMA_Abort+0x634>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_DMA_Abort+0x58a>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a2c      	ldr	r2, [pc, #176]	; (8007e38 <HAL_DMA_Abort+0x638>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d101      	bne.n	8007d8e <HAL_DMA_Abort+0x58e>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <HAL_DMA_Abort+0x590>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d015      	beq.n	8007dc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00c      	beq.n	8007dc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007db4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	40020010 	.word	0x40020010
 8007de0:	40020028 	.word	0x40020028
 8007de4:	40020040 	.word	0x40020040
 8007de8:	40020058 	.word	0x40020058
 8007dec:	40020070 	.word	0x40020070
 8007df0:	40020088 	.word	0x40020088
 8007df4:	400200a0 	.word	0x400200a0
 8007df8:	400200b8 	.word	0x400200b8
 8007dfc:	40020410 	.word	0x40020410
 8007e00:	40020428 	.word	0x40020428
 8007e04:	40020440 	.word	0x40020440
 8007e08:	40020458 	.word	0x40020458
 8007e0c:	40020470 	.word	0x40020470
 8007e10:	40020488 	.word	0x40020488
 8007e14:	400204a0 	.word	0x400204a0
 8007e18:	400204b8 	.word	0x400204b8
 8007e1c:	58025408 	.word	0x58025408
 8007e20:	5802541c 	.word	0x5802541c
 8007e24:	58025430 	.word	0x58025430
 8007e28:	58025444 	.word	0x58025444
 8007e2c:	58025458 	.word	0x58025458
 8007e30:	5802546c 	.word	0x5802546c
 8007e34:	58025480 	.word	0x58025480
 8007e38:	58025494 	.word	0x58025494

08007e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e205      	b.n	800825a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d004      	beq.n	8007e64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2280      	movs	r2, #128	; 0x80
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e1fa      	b.n	800825a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a8c      	ldr	r2, [pc, #560]	; (800809c <HAL_DMA_Abort_IT+0x260>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d04a      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a8b      	ldr	r2, [pc, #556]	; (80080a0 <HAL_DMA_Abort_IT+0x264>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d045      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a89      	ldr	r2, [pc, #548]	; (80080a4 <HAL_DMA_Abort_IT+0x268>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d040      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a88      	ldr	r2, [pc, #544]	; (80080a8 <HAL_DMA_Abort_IT+0x26c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d03b      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a86      	ldr	r2, [pc, #536]	; (80080ac <HAL_DMA_Abort_IT+0x270>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d036      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a85      	ldr	r2, [pc, #532]	; (80080b0 <HAL_DMA_Abort_IT+0x274>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d031      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a83      	ldr	r2, [pc, #524]	; (80080b4 <HAL_DMA_Abort_IT+0x278>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d02c      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a82      	ldr	r2, [pc, #520]	; (80080b8 <HAL_DMA_Abort_IT+0x27c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d027      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a80      	ldr	r2, [pc, #512]	; (80080bc <HAL_DMA_Abort_IT+0x280>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d022      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a7f      	ldr	r2, [pc, #508]	; (80080c0 <HAL_DMA_Abort_IT+0x284>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d01d      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a7d      	ldr	r2, [pc, #500]	; (80080c4 <HAL_DMA_Abort_IT+0x288>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d018      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a7c      	ldr	r2, [pc, #496]	; (80080c8 <HAL_DMA_Abort_IT+0x28c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a7a      	ldr	r2, [pc, #488]	; (80080cc <HAL_DMA_Abort_IT+0x290>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00e      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a79      	ldr	r2, [pc, #484]	; (80080d0 <HAL_DMA_Abort_IT+0x294>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d009      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a77      	ldr	r2, [pc, #476]	; (80080d4 <HAL_DMA_Abort_IT+0x298>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d004      	beq.n	8007f04 <HAL_DMA_Abort_IT+0xc8>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a76      	ldr	r2, [pc, #472]	; (80080d8 <HAL_DMA_Abort_IT+0x29c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d101      	bne.n	8007f08 <HAL_DMA_Abort_IT+0xcc>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <HAL_DMA_Abort_IT+0xce>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d065      	beq.n	8007fda <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2204      	movs	r2, #4
 8007f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a60      	ldr	r2, [pc, #384]	; (800809c <HAL_DMA_Abort_IT+0x260>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d04a      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a5e      	ldr	r2, [pc, #376]	; (80080a0 <HAL_DMA_Abort_IT+0x264>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d045      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a5d      	ldr	r2, [pc, #372]	; (80080a4 <HAL_DMA_Abort_IT+0x268>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d040      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a5b      	ldr	r2, [pc, #364]	; (80080a8 <HAL_DMA_Abort_IT+0x26c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d03b      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5a      	ldr	r2, [pc, #360]	; (80080ac <HAL_DMA_Abort_IT+0x270>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d036      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a58      	ldr	r2, [pc, #352]	; (80080b0 <HAL_DMA_Abort_IT+0x274>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d031      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a57      	ldr	r2, [pc, #348]	; (80080b4 <HAL_DMA_Abort_IT+0x278>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d02c      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a55      	ldr	r2, [pc, #340]	; (80080b8 <HAL_DMA_Abort_IT+0x27c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d027      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a54      	ldr	r2, [pc, #336]	; (80080bc <HAL_DMA_Abort_IT+0x280>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d022      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a52      	ldr	r2, [pc, #328]	; (80080c0 <HAL_DMA_Abort_IT+0x284>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d01d      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a51      	ldr	r2, [pc, #324]	; (80080c4 <HAL_DMA_Abort_IT+0x288>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d018      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a4f      	ldr	r2, [pc, #316]	; (80080c8 <HAL_DMA_Abort_IT+0x28c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d013      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a4e      	ldr	r2, [pc, #312]	; (80080cc <HAL_DMA_Abort_IT+0x290>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00e      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a4c      	ldr	r2, [pc, #304]	; (80080d0 <HAL_DMA_Abort_IT+0x294>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d009      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a4b      	ldr	r2, [pc, #300]	; (80080d4 <HAL_DMA_Abort_IT+0x298>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d004      	beq.n	8007fb6 <HAL_DMA_Abort_IT+0x17a>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a49      	ldr	r2, [pc, #292]	; (80080d8 <HAL_DMA_Abort_IT+0x29c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d108      	bne.n	8007fc8 <HAL_DMA_Abort_IT+0x18c>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0201 	bic.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e147      	b.n	8008258 <HAL_DMA_Abort_IT+0x41c>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0201 	bic.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e13e      	b.n	8008258 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 020e 	bic.w	r2, r2, #14
 8007fe8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a2b      	ldr	r2, [pc, #172]	; (800809c <HAL_DMA_Abort_IT+0x260>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d04a      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a29      	ldr	r2, [pc, #164]	; (80080a0 <HAL_DMA_Abort_IT+0x264>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d045      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a28      	ldr	r2, [pc, #160]	; (80080a4 <HAL_DMA_Abort_IT+0x268>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d040      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a26      	ldr	r2, [pc, #152]	; (80080a8 <HAL_DMA_Abort_IT+0x26c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d03b      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a25      	ldr	r2, [pc, #148]	; (80080ac <HAL_DMA_Abort_IT+0x270>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d036      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <HAL_DMA_Abort_IT+0x274>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d031      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a22      	ldr	r2, [pc, #136]	; (80080b4 <HAL_DMA_Abort_IT+0x278>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d02c      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <HAL_DMA_Abort_IT+0x27c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d027      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a1f      	ldr	r2, [pc, #124]	; (80080bc <HAL_DMA_Abort_IT+0x280>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d022      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <HAL_DMA_Abort_IT+0x284>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d01d      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a1c      	ldr	r2, [pc, #112]	; (80080c4 <HAL_DMA_Abort_IT+0x288>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d018      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a1a      	ldr	r2, [pc, #104]	; (80080c8 <HAL_DMA_Abort_IT+0x28c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d013      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a19      	ldr	r2, [pc, #100]	; (80080cc <HAL_DMA_Abort_IT+0x290>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00e      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <HAL_DMA_Abort_IT+0x294>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d009      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <HAL_DMA_Abort_IT+0x298>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d004      	beq.n	800808a <HAL_DMA_Abort_IT+0x24e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <HAL_DMA_Abort_IT+0x29c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d128      	bne.n	80080dc <HAL_DMA_Abort_IT+0x2a0>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e027      	b.n	80080ec <HAL_DMA_Abort_IT+0x2b0>
 800809c:	40020010 	.word	0x40020010
 80080a0:	40020028 	.word	0x40020028
 80080a4:	40020040 	.word	0x40020040
 80080a8:	40020058 	.word	0x40020058
 80080ac:	40020070 	.word	0x40020070
 80080b0:	40020088 	.word	0x40020088
 80080b4:	400200a0 	.word	0x400200a0
 80080b8:	400200b8 	.word	0x400200b8
 80080bc:	40020410 	.word	0x40020410
 80080c0:	40020428 	.word	0x40020428
 80080c4:	40020440 	.word	0x40020440
 80080c8:	40020458 	.word	0x40020458
 80080cc:	40020470 	.word	0x40020470
 80080d0:	40020488 	.word	0x40020488
 80080d4:	400204a0 	.word	0x400204a0
 80080d8:	400204b8 	.word	0x400204b8
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0201 	bic.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a5c      	ldr	r2, [pc, #368]	; (8008264 <HAL_DMA_Abort_IT+0x428>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d072      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a5b      	ldr	r2, [pc, #364]	; (8008268 <HAL_DMA_Abort_IT+0x42c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d06d      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a59      	ldr	r2, [pc, #356]	; (800826c <HAL_DMA_Abort_IT+0x430>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d068      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a58      	ldr	r2, [pc, #352]	; (8008270 <HAL_DMA_Abort_IT+0x434>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d063      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a56      	ldr	r2, [pc, #344]	; (8008274 <HAL_DMA_Abort_IT+0x438>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d05e      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a55      	ldr	r2, [pc, #340]	; (8008278 <HAL_DMA_Abort_IT+0x43c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d059      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a53      	ldr	r2, [pc, #332]	; (800827c <HAL_DMA_Abort_IT+0x440>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d054      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a52      	ldr	r2, [pc, #328]	; (8008280 <HAL_DMA_Abort_IT+0x444>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d04f      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a50      	ldr	r2, [pc, #320]	; (8008284 <HAL_DMA_Abort_IT+0x448>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d04a      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a4f      	ldr	r2, [pc, #316]	; (8008288 <HAL_DMA_Abort_IT+0x44c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d045      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a4d      	ldr	r2, [pc, #308]	; (800828c <HAL_DMA_Abort_IT+0x450>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d040      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a4c      	ldr	r2, [pc, #304]	; (8008290 <HAL_DMA_Abort_IT+0x454>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d03b      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a4a      	ldr	r2, [pc, #296]	; (8008294 <HAL_DMA_Abort_IT+0x458>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d036      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a49      	ldr	r2, [pc, #292]	; (8008298 <HAL_DMA_Abort_IT+0x45c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d031      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a47      	ldr	r2, [pc, #284]	; (800829c <HAL_DMA_Abort_IT+0x460>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d02c      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a46      	ldr	r2, [pc, #280]	; (80082a0 <HAL_DMA_Abort_IT+0x464>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d027      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a44      	ldr	r2, [pc, #272]	; (80082a4 <HAL_DMA_Abort_IT+0x468>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d022      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a43      	ldr	r2, [pc, #268]	; (80082a8 <HAL_DMA_Abort_IT+0x46c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d01d      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a41      	ldr	r2, [pc, #260]	; (80082ac <HAL_DMA_Abort_IT+0x470>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d018      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a40      	ldr	r2, [pc, #256]	; (80082b0 <HAL_DMA_Abort_IT+0x474>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d013      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a3e      	ldr	r2, [pc, #248]	; (80082b4 <HAL_DMA_Abort_IT+0x478>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00e      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a3d      	ldr	r2, [pc, #244]	; (80082b8 <HAL_DMA_Abort_IT+0x47c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d009      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3b      	ldr	r2, [pc, #236]	; (80082bc <HAL_DMA_Abort_IT+0x480>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d004      	beq.n	80081dc <HAL_DMA_Abort_IT+0x3a0>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a3a      	ldr	r2, [pc, #232]	; (80082c0 <HAL_DMA_Abort_IT+0x484>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d101      	bne.n	80081e0 <HAL_DMA_Abort_IT+0x3a4>
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <HAL_DMA_Abort_IT+0x3a6>
 80081e0:	2300      	movs	r3, #0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d028      	beq.n	8008238 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	2201      	movs	r2, #1
 8008206:	409a      	lsls	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008214:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00c      	beq.n	8008238 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800822c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008236:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40020010 	.word	0x40020010
 8008268:	40020028 	.word	0x40020028
 800826c:	40020040 	.word	0x40020040
 8008270:	40020058 	.word	0x40020058
 8008274:	40020070 	.word	0x40020070
 8008278:	40020088 	.word	0x40020088
 800827c:	400200a0 	.word	0x400200a0
 8008280:	400200b8 	.word	0x400200b8
 8008284:	40020410 	.word	0x40020410
 8008288:	40020428 	.word	0x40020428
 800828c:	40020440 	.word	0x40020440
 8008290:	40020458 	.word	0x40020458
 8008294:	40020470 	.word	0x40020470
 8008298:	40020488 	.word	0x40020488
 800829c:	400204a0 	.word	0x400204a0
 80082a0:	400204b8 	.word	0x400204b8
 80082a4:	58025408 	.word	0x58025408
 80082a8:	5802541c 	.word	0x5802541c
 80082ac:	58025430 	.word	0x58025430
 80082b0:	58025444 	.word	0x58025444
 80082b4:	58025458 	.word	0x58025458
 80082b8:	5802546c 	.word	0x5802546c
 80082bc:	58025480 	.word	0x58025480
 80082c0:	58025494 	.word	0x58025494

080082c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08a      	sub	sp, #40	; 0x28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80082d0:	4b67      	ldr	r3, [pc, #412]	; (8008470 <HAL_DMA_IRQHandler+0x1ac>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a67      	ldr	r2, [pc, #412]	; (8008474 <HAL_DMA_IRQHandler+0x1b0>)
 80082d6:	fba2 2303 	umull	r2, r3, r2, r3
 80082da:	0a9b      	lsrs	r3, r3, #10
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a5f      	ldr	r2, [pc, #380]	; (8008478 <HAL_DMA_IRQHandler+0x1b4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d04a      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a5d      	ldr	r2, [pc, #372]	; (800847c <HAL_DMA_IRQHandler+0x1b8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d045      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a5c      	ldr	r2, [pc, #368]	; (8008480 <HAL_DMA_IRQHandler+0x1bc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d040      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a5a      	ldr	r2, [pc, #360]	; (8008484 <HAL_DMA_IRQHandler+0x1c0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d03b      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a59      	ldr	r2, [pc, #356]	; (8008488 <HAL_DMA_IRQHandler+0x1c4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d036      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a57      	ldr	r2, [pc, #348]	; (800848c <HAL_DMA_IRQHandler+0x1c8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d031      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a56      	ldr	r2, [pc, #344]	; (8008490 <HAL_DMA_IRQHandler+0x1cc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d02c      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a54      	ldr	r2, [pc, #336]	; (8008494 <HAL_DMA_IRQHandler+0x1d0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d027      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a53      	ldr	r2, [pc, #332]	; (8008498 <HAL_DMA_IRQHandler+0x1d4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d022      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a51      	ldr	r2, [pc, #324]	; (800849c <HAL_DMA_IRQHandler+0x1d8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d01d      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a50      	ldr	r2, [pc, #320]	; (80084a0 <HAL_DMA_IRQHandler+0x1dc>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d018      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a4e      	ldr	r2, [pc, #312]	; (80084a4 <HAL_DMA_IRQHandler+0x1e0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d013      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a4d      	ldr	r2, [pc, #308]	; (80084a8 <HAL_DMA_IRQHandler+0x1e4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00e      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a4b      	ldr	r2, [pc, #300]	; (80084ac <HAL_DMA_IRQHandler+0x1e8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d009      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a4a      	ldr	r2, [pc, #296]	; (80084b0 <HAL_DMA_IRQHandler+0x1ec>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d004      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a48      	ldr	r2, [pc, #288]	; (80084b4 <HAL_DMA_IRQHandler+0x1f0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d101      	bne.n	800839a <HAL_DMA_IRQHandler+0xd6>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <HAL_DMA_IRQHandler+0xd8>
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 842b 	beq.w	8008bf8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	2208      	movs	r2, #8
 80083ac:	409a      	lsls	r2, r3
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80a2 	beq.w	80084fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a2e      	ldr	r2, [pc, #184]	; (8008478 <HAL_DMA_IRQHandler+0x1b4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d04a      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a2d      	ldr	r2, [pc, #180]	; (800847c <HAL_DMA_IRQHandler+0x1b8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d045      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a2b      	ldr	r2, [pc, #172]	; (8008480 <HAL_DMA_IRQHandler+0x1bc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d040      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2a      	ldr	r2, [pc, #168]	; (8008484 <HAL_DMA_IRQHandler+0x1c0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d03b      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a28      	ldr	r2, [pc, #160]	; (8008488 <HAL_DMA_IRQHandler+0x1c4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d036      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a27      	ldr	r2, [pc, #156]	; (800848c <HAL_DMA_IRQHandler+0x1c8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d031      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a25      	ldr	r2, [pc, #148]	; (8008490 <HAL_DMA_IRQHandler+0x1cc>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d02c      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a24      	ldr	r2, [pc, #144]	; (8008494 <HAL_DMA_IRQHandler+0x1d0>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d027      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a22      	ldr	r2, [pc, #136]	; (8008498 <HAL_DMA_IRQHandler+0x1d4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d022      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a21      	ldr	r2, [pc, #132]	; (800849c <HAL_DMA_IRQHandler+0x1d8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d01d      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <HAL_DMA_IRQHandler+0x1dc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d018      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <HAL_DMA_IRQHandler+0x1e0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d013      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1c      	ldr	r2, [pc, #112]	; (80084a8 <HAL_DMA_IRQHandler+0x1e4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00e      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1b      	ldr	r2, [pc, #108]	; (80084ac <HAL_DMA_IRQHandler+0x1e8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d009      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a19      	ldr	r2, [pc, #100]	; (80084b0 <HAL_DMA_IRQHandler+0x1ec>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a18      	ldr	r2, [pc, #96]	; (80084b4 <HAL_DMA_IRQHandler+0x1f0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d12f      	bne.n	80084b8 <HAL_DMA_IRQHandler+0x1f4>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	bf14      	ite	ne
 8008466:	2301      	movne	r3, #1
 8008468:	2300      	moveq	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	e02e      	b.n	80084cc <HAL_DMA_IRQHandler+0x208>
 800846e:	bf00      	nop
 8008470:	24000228 	.word	0x24000228
 8008474:	1b4e81b5 	.word	0x1b4e81b5
 8008478:	40020010 	.word	0x40020010
 800847c:	40020028 	.word	0x40020028
 8008480:	40020040 	.word	0x40020040
 8008484:	40020058 	.word	0x40020058
 8008488:	40020070 	.word	0x40020070
 800848c:	40020088 	.word	0x40020088
 8008490:	400200a0 	.word	0x400200a0
 8008494:	400200b8 	.word	0x400200b8
 8008498:	40020410 	.word	0x40020410
 800849c:	40020428 	.word	0x40020428
 80084a0:	40020440 	.word	0x40020440
 80084a4:	40020458 	.word	0x40020458
 80084a8:	40020470 	.word	0x40020470
 80084ac:	40020488 	.word	0x40020488
 80084b0:	400204a0 	.word	0x400204a0
 80084b4:	400204b8 	.word	0x400204b8
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bf14      	ite	ne
 80084c6:	2301      	movne	r3, #1
 80084c8:	2300      	moveq	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d015      	beq.n	80084fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0204 	bic.w	r2, r2, #4
 80084de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	2208      	movs	r2, #8
 80084ea:	409a      	lsls	r2, r3
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	f043 0201 	orr.w	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	fa22 f303 	lsr.w	r3, r2, r3
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d06e      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a69      	ldr	r2, [pc, #420]	; (80086bc <HAL_DMA_IRQHandler+0x3f8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d04a      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a67      	ldr	r2, [pc, #412]	; (80086c0 <HAL_DMA_IRQHandler+0x3fc>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d045      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a66      	ldr	r2, [pc, #408]	; (80086c4 <HAL_DMA_IRQHandler+0x400>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d040      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a64      	ldr	r2, [pc, #400]	; (80086c8 <HAL_DMA_IRQHandler+0x404>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d03b      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a63      	ldr	r2, [pc, #396]	; (80086cc <HAL_DMA_IRQHandler+0x408>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d036      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a61      	ldr	r2, [pc, #388]	; (80086d0 <HAL_DMA_IRQHandler+0x40c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d031      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a60      	ldr	r2, [pc, #384]	; (80086d4 <HAL_DMA_IRQHandler+0x410>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d02c      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a5e      	ldr	r2, [pc, #376]	; (80086d8 <HAL_DMA_IRQHandler+0x414>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d027      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a5d      	ldr	r2, [pc, #372]	; (80086dc <HAL_DMA_IRQHandler+0x418>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d022      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a5b      	ldr	r2, [pc, #364]	; (80086e0 <HAL_DMA_IRQHandler+0x41c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01d      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a5a      	ldr	r2, [pc, #360]	; (80086e4 <HAL_DMA_IRQHandler+0x420>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d018      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a58      	ldr	r2, [pc, #352]	; (80086e8 <HAL_DMA_IRQHandler+0x424>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a57      	ldr	r2, [pc, #348]	; (80086ec <HAL_DMA_IRQHandler+0x428>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00e      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a55      	ldr	r2, [pc, #340]	; (80086f0 <HAL_DMA_IRQHandler+0x42c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d009      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a54      	ldr	r2, [pc, #336]	; (80086f4 <HAL_DMA_IRQHandler+0x430>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d004      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a52      	ldr	r2, [pc, #328]	; (80086f8 <HAL_DMA_IRQHandler+0x434>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d10a      	bne.n	80085c8 <HAL_DMA_IRQHandler+0x304>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	e003      	b.n	80085d0 <HAL_DMA_IRQHandler+0x30c>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2300      	movs	r3, #0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00d      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2201      	movs	r2, #1
 80085de:	409a      	lsls	r2, r3
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e8:	f043 0202 	orr.w	r2, r3, #2
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	2204      	movs	r2, #4
 80085fa:	409a      	lsls	r2, r3
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	4013      	ands	r3, r2
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 808f 	beq.w	8008724 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a2c      	ldr	r2, [pc, #176]	; (80086bc <HAL_DMA_IRQHandler+0x3f8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d04a      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a2a      	ldr	r2, [pc, #168]	; (80086c0 <HAL_DMA_IRQHandler+0x3fc>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d045      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a29      	ldr	r2, [pc, #164]	; (80086c4 <HAL_DMA_IRQHandler+0x400>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d040      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a27      	ldr	r2, [pc, #156]	; (80086c8 <HAL_DMA_IRQHandler+0x404>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d03b      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a26      	ldr	r2, [pc, #152]	; (80086cc <HAL_DMA_IRQHandler+0x408>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d036      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a24      	ldr	r2, [pc, #144]	; (80086d0 <HAL_DMA_IRQHandler+0x40c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d031      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a23      	ldr	r2, [pc, #140]	; (80086d4 <HAL_DMA_IRQHandler+0x410>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d02c      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a21      	ldr	r2, [pc, #132]	; (80086d8 <HAL_DMA_IRQHandler+0x414>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d027      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a20      	ldr	r2, [pc, #128]	; (80086dc <HAL_DMA_IRQHandler+0x418>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d022      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1e      	ldr	r2, [pc, #120]	; (80086e0 <HAL_DMA_IRQHandler+0x41c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d01d      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <HAL_DMA_IRQHandler+0x420>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d018      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1b      	ldr	r2, [pc, #108]	; (80086e8 <HAL_DMA_IRQHandler+0x424>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d013      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1a      	ldr	r2, [pc, #104]	; (80086ec <HAL_DMA_IRQHandler+0x428>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d00e      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <HAL_DMA_IRQHandler+0x42c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d009      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a17      	ldr	r2, [pc, #92]	; (80086f4 <HAL_DMA_IRQHandler+0x430>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d004      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a15      	ldr	r2, [pc, #84]	; (80086f8 <HAL_DMA_IRQHandler+0x434>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d12a      	bne.n	80086fc <HAL_DMA_IRQHandler+0x438>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bf14      	ite	ne
 80086b4:	2301      	movne	r3, #1
 80086b6:	2300      	moveq	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	e023      	b.n	8008704 <HAL_DMA_IRQHandler+0x440>
 80086bc:	40020010 	.word	0x40020010
 80086c0:	40020028 	.word	0x40020028
 80086c4:	40020040 	.word	0x40020040
 80086c8:	40020058 	.word	0x40020058
 80086cc:	40020070 	.word	0x40020070
 80086d0:	40020088 	.word	0x40020088
 80086d4:	400200a0 	.word	0x400200a0
 80086d8:	400200b8 	.word	0x400200b8
 80086dc:	40020410 	.word	0x40020410
 80086e0:	40020428 	.word	0x40020428
 80086e4:	40020440 	.word	0x40020440
 80086e8:	40020458 	.word	0x40020458
 80086ec:	40020470 	.word	0x40020470
 80086f0:	40020488 	.word	0x40020488
 80086f4:	400204a0 	.word	0x400204a0
 80086f8:	400204b8 	.word	0x400204b8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00d      	beq.n	8008724 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	2204      	movs	r2, #4
 8008712:	409a      	lsls	r2, r3
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871c:	f043 0204 	orr.w	r2, r3, #4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2210      	movs	r2, #16
 800872e:	409a      	lsls	r2, r3
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	4013      	ands	r3, r2
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a6 	beq.w	8008886 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a85      	ldr	r2, [pc, #532]	; (8008954 <HAL_DMA_IRQHandler+0x690>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d04a      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a83      	ldr	r2, [pc, #524]	; (8008958 <HAL_DMA_IRQHandler+0x694>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d045      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a82      	ldr	r2, [pc, #520]	; (800895c <HAL_DMA_IRQHandler+0x698>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d040      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a80      	ldr	r2, [pc, #512]	; (8008960 <HAL_DMA_IRQHandler+0x69c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d03b      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a7f      	ldr	r2, [pc, #508]	; (8008964 <HAL_DMA_IRQHandler+0x6a0>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d036      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a7d      	ldr	r2, [pc, #500]	; (8008968 <HAL_DMA_IRQHandler+0x6a4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d031      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a7c      	ldr	r2, [pc, #496]	; (800896c <HAL_DMA_IRQHandler+0x6a8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d02c      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a7a      	ldr	r2, [pc, #488]	; (8008970 <HAL_DMA_IRQHandler+0x6ac>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d027      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a79      	ldr	r2, [pc, #484]	; (8008974 <HAL_DMA_IRQHandler+0x6b0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d022      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a77      	ldr	r2, [pc, #476]	; (8008978 <HAL_DMA_IRQHandler+0x6b4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d01d      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a76      	ldr	r2, [pc, #472]	; (800897c <HAL_DMA_IRQHandler+0x6b8>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d018      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a74      	ldr	r2, [pc, #464]	; (8008980 <HAL_DMA_IRQHandler+0x6bc>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a73      	ldr	r2, [pc, #460]	; (8008984 <HAL_DMA_IRQHandler+0x6c0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00e      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a71      	ldr	r2, [pc, #452]	; (8008988 <HAL_DMA_IRQHandler+0x6c4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d009      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a70      	ldr	r2, [pc, #448]	; (800898c <HAL_DMA_IRQHandler+0x6c8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a6e      	ldr	r2, [pc, #440]	; (8008990 <HAL_DMA_IRQHandler+0x6cc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d10a      	bne.n	80087f0 <HAL_DMA_IRQHandler+0x52c>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	e009      	b.n	8008804 <HAL_DMA_IRQHandler+0x540>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d03e      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	2210      	movs	r2, #16
 8008812:	409a      	lsls	r2, r3
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d018      	beq.n	8008858 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d108      	bne.n	8008846 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d024      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
 8008844:	e01f      	b.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01b      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
 8008856:	e016      	b.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0208 	bic.w	r2, r2, #8
 8008874:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	2220      	movs	r2, #32
 8008890:	409a      	lsls	r2, r3
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	4013      	ands	r3, r2
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 8110 	beq.w	8008abc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a2c      	ldr	r2, [pc, #176]	; (8008954 <HAL_DMA_IRQHandler+0x690>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d04a      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a2b      	ldr	r2, [pc, #172]	; (8008958 <HAL_DMA_IRQHandler+0x694>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d045      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a29      	ldr	r2, [pc, #164]	; (800895c <HAL_DMA_IRQHandler+0x698>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d040      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a28      	ldr	r2, [pc, #160]	; (8008960 <HAL_DMA_IRQHandler+0x69c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d03b      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a26      	ldr	r2, [pc, #152]	; (8008964 <HAL_DMA_IRQHandler+0x6a0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d036      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a25      	ldr	r2, [pc, #148]	; (8008968 <HAL_DMA_IRQHandler+0x6a4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d031      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a23      	ldr	r2, [pc, #140]	; (800896c <HAL_DMA_IRQHandler+0x6a8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d02c      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a22      	ldr	r2, [pc, #136]	; (8008970 <HAL_DMA_IRQHandler+0x6ac>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d027      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a20      	ldr	r2, [pc, #128]	; (8008974 <HAL_DMA_IRQHandler+0x6b0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d022      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a1f      	ldr	r2, [pc, #124]	; (8008978 <HAL_DMA_IRQHandler+0x6b4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d01d      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a1d      	ldr	r2, [pc, #116]	; (800897c <HAL_DMA_IRQHandler+0x6b8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d018      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a1c      	ldr	r2, [pc, #112]	; (8008980 <HAL_DMA_IRQHandler+0x6bc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d013      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a1a      	ldr	r2, [pc, #104]	; (8008984 <HAL_DMA_IRQHandler+0x6c0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00e      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a19      	ldr	r2, [pc, #100]	; (8008988 <HAL_DMA_IRQHandler+0x6c4>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d009      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a17      	ldr	r2, [pc, #92]	; (800898c <HAL_DMA_IRQHandler+0x6c8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d004      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a16      	ldr	r2, [pc, #88]	; (8008990 <HAL_DMA_IRQHandler+0x6cc>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d12b      	bne.n	8008994 <HAL_DMA_IRQHandler+0x6d0>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0310 	and.w	r3, r3, #16
 8008946:	2b00      	cmp	r3, #0
 8008948:	bf14      	ite	ne
 800894a:	2301      	movne	r3, #1
 800894c:	2300      	moveq	r3, #0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	e02a      	b.n	80089a8 <HAL_DMA_IRQHandler+0x6e4>
 8008952:	bf00      	nop
 8008954:	40020010 	.word	0x40020010
 8008958:	40020028 	.word	0x40020028
 800895c:	40020040 	.word	0x40020040
 8008960:	40020058 	.word	0x40020058
 8008964:	40020070 	.word	0x40020070
 8008968:	40020088 	.word	0x40020088
 800896c:	400200a0 	.word	0x400200a0
 8008970:	400200b8 	.word	0x400200b8
 8008974:	40020410 	.word	0x40020410
 8008978:	40020428 	.word	0x40020428
 800897c:	40020440 	.word	0x40020440
 8008980:	40020458 	.word	0x40020458
 8008984:	40020470 	.word	0x40020470
 8008988:	40020488 	.word	0x40020488
 800898c:	400204a0 	.word	0x400204a0
 8008990:	400204b8 	.word	0x400204b8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf14      	ite	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	2300      	moveq	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8087 	beq.w	8008abc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	2220      	movs	r2, #32
 80089b8:	409a      	lsls	r2, r3
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d139      	bne.n	8008a3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 0216 	bic.w	r2, r2, #22
 80089d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695a      	ldr	r2, [r3, #20]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <HAL_DMA_IRQHandler+0x736>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0208 	bic.w	r2, r2, #8
 8008a08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	223f      	movs	r2, #63	; 0x3f
 8008a14:	409a      	lsls	r2, r3
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 834a 	beq.w	80090c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
          }
          return;
 8008a3c:	e344      	b.n	80090c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d018      	beq.n	8008a7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d108      	bne.n	8008a6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d02c      	beq.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
 8008a6a:	e027      	b.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d023      	beq.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4798      	blx	r3
 8008a7c:	e01e      	b.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10f      	bne.n	8008aac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0210 	bic.w	r2, r2, #16
 8008a9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8306 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8088 	beq.w	8008be4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a7a      	ldr	r2, [pc, #488]	; (8008ccc <HAL_DMA_IRQHandler+0xa08>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d04a      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a79      	ldr	r2, [pc, #484]	; (8008cd0 <HAL_DMA_IRQHandler+0xa0c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d045      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a77      	ldr	r2, [pc, #476]	; (8008cd4 <HAL_DMA_IRQHandler+0xa10>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d040      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a76      	ldr	r2, [pc, #472]	; (8008cd8 <HAL_DMA_IRQHandler+0xa14>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d03b      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a74      	ldr	r2, [pc, #464]	; (8008cdc <HAL_DMA_IRQHandler+0xa18>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d036      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a73      	ldr	r2, [pc, #460]	; (8008ce0 <HAL_DMA_IRQHandler+0xa1c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d031      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a71      	ldr	r2, [pc, #452]	; (8008ce4 <HAL_DMA_IRQHandler+0xa20>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d02c      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a70      	ldr	r2, [pc, #448]	; (8008ce8 <HAL_DMA_IRQHandler+0xa24>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d027      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a6e      	ldr	r2, [pc, #440]	; (8008cec <HAL_DMA_IRQHandler+0xa28>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d022      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a6d      	ldr	r2, [pc, #436]	; (8008cf0 <HAL_DMA_IRQHandler+0xa2c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d01d      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a6b      	ldr	r2, [pc, #428]	; (8008cf4 <HAL_DMA_IRQHandler+0xa30>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d018      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a6a      	ldr	r2, [pc, #424]	; (8008cf8 <HAL_DMA_IRQHandler+0xa34>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d013      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a68      	ldr	r2, [pc, #416]	; (8008cfc <HAL_DMA_IRQHandler+0xa38>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00e      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a67      	ldr	r2, [pc, #412]	; (8008d00 <HAL_DMA_IRQHandler+0xa3c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d009      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a65      	ldr	r2, [pc, #404]	; (8008d04 <HAL_DMA_IRQHandler+0xa40>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a64      	ldr	r2, [pc, #400]	; (8008d08 <HAL_DMA_IRQHandler+0xa44>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d108      	bne.n	8008b8e <HAL_DMA_IRQHandler+0x8ca>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0201 	bic.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	e007      	b.n	8008b9e <HAL_DMA_IRQHandler+0x8da>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0201 	bic.w	r2, r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d307      	bcc.n	8008bba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f2      	bne.n	8008b9e <HAL_DMA_IRQHandler+0x8da>
 8008bb8:	e000      	b.n	8008bbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008bba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008bd2:	e003      	b.n	8008bdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8272 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	4798      	blx	r3
 8008bf6:	e26c      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a43      	ldr	r2, [pc, #268]	; (8008d0c <HAL_DMA_IRQHandler+0xa48>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d022      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a42      	ldr	r2, [pc, #264]	; (8008d10 <HAL_DMA_IRQHandler+0xa4c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d01d      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a40      	ldr	r2, [pc, #256]	; (8008d14 <HAL_DMA_IRQHandler+0xa50>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d018      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	; (8008d18 <HAL_DMA_IRQHandler+0xa54>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d013      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a3d      	ldr	r2, [pc, #244]	; (8008d1c <HAL_DMA_IRQHandler+0xa58>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00e      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3c      	ldr	r2, [pc, #240]	; (8008d20 <HAL_DMA_IRQHandler+0xa5c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d009      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a3a      	ldr	r2, [pc, #232]	; (8008d24 <HAL_DMA_IRQHandler+0xa60>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d004      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a39      	ldr	r2, [pc, #228]	; (8008d28 <HAL_DMA_IRQHandler+0xa64>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d101      	bne.n	8008c4c <HAL_DMA_IRQHandler+0x988>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e000      	b.n	8008c4e <HAL_DMA_IRQHandler+0x98a>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 823f 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	2204      	movs	r2, #4
 8008c66:	409a      	lsls	r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80cd 	beq.w	8008e0c <HAL_DMA_IRQHandler+0xb48>
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 80c7 	beq.w	8008e0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c82:	f003 031f 	and.w	r3, r3, #31
 8008c86:	2204      	movs	r2, #4
 8008c88:	409a      	lsls	r2, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d049      	beq.n	8008d2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8210 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cb4:	e20a      	b.n	80090cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 8206 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cc8:	e200      	b.n	80090cc <HAL_DMA_IRQHandler+0xe08>
 8008cca:	bf00      	nop
 8008ccc:	40020010 	.word	0x40020010
 8008cd0:	40020028 	.word	0x40020028
 8008cd4:	40020040 	.word	0x40020040
 8008cd8:	40020058 	.word	0x40020058
 8008cdc:	40020070 	.word	0x40020070
 8008ce0:	40020088 	.word	0x40020088
 8008ce4:	400200a0 	.word	0x400200a0
 8008ce8:	400200b8 	.word	0x400200b8
 8008cec:	40020410 	.word	0x40020410
 8008cf0:	40020428 	.word	0x40020428
 8008cf4:	40020440 	.word	0x40020440
 8008cf8:	40020458 	.word	0x40020458
 8008cfc:	40020470 	.word	0x40020470
 8008d00:	40020488 	.word	0x40020488
 8008d04:	400204a0 	.word	0x400204a0
 8008d08:	400204b8 	.word	0x400204b8
 8008d0c:	58025408 	.word	0x58025408
 8008d10:	5802541c 	.word	0x5802541c
 8008d14:	58025430 	.word	0x58025430
 8008d18:	58025444 	.word	0x58025444
 8008d1c:	58025458 	.word	0x58025458
 8008d20:	5802546c 	.word	0x5802546c
 8008d24:	58025480 	.word	0x58025480
 8008d28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d160      	bne.n	8008df8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a8c      	ldr	r2, [pc, #560]	; (8008f6c <HAL_DMA_IRQHandler+0xca8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d04a      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a8a      	ldr	r2, [pc, #552]	; (8008f70 <HAL_DMA_IRQHandler+0xcac>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d045      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a89      	ldr	r2, [pc, #548]	; (8008f74 <HAL_DMA_IRQHandler+0xcb0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d040      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a87      	ldr	r2, [pc, #540]	; (8008f78 <HAL_DMA_IRQHandler+0xcb4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d03b      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a86      	ldr	r2, [pc, #536]	; (8008f7c <HAL_DMA_IRQHandler+0xcb8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d036      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a84      	ldr	r2, [pc, #528]	; (8008f80 <HAL_DMA_IRQHandler+0xcbc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d031      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a83      	ldr	r2, [pc, #524]	; (8008f84 <HAL_DMA_IRQHandler+0xcc0>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d02c      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a81      	ldr	r2, [pc, #516]	; (8008f88 <HAL_DMA_IRQHandler+0xcc4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d027      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a80      	ldr	r2, [pc, #512]	; (8008f8c <HAL_DMA_IRQHandler+0xcc8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d022      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a7e      	ldr	r2, [pc, #504]	; (8008f90 <HAL_DMA_IRQHandler+0xccc>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01d      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a7d      	ldr	r2, [pc, #500]	; (8008f94 <HAL_DMA_IRQHandler+0xcd0>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d018      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a7b      	ldr	r2, [pc, #492]	; (8008f98 <HAL_DMA_IRQHandler+0xcd4>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d013      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a7a      	ldr	r2, [pc, #488]	; (8008f9c <HAL_DMA_IRQHandler+0xcd8>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00e      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a78      	ldr	r2, [pc, #480]	; (8008fa0 <HAL_DMA_IRQHandler+0xcdc>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d009      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a77      	ldr	r2, [pc, #476]	; (8008fa4 <HAL_DMA_IRQHandler+0xce0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d004      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a75      	ldr	r2, [pc, #468]	; (8008fa8 <HAL_DMA_IRQHandler+0xce4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d108      	bne.n	8008de8 <HAL_DMA_IRQHandler+0xb24>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0208 	bic.w	r2, r2, #8
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e007      	b.n	8008df8 <HAL_DMA_IRQHandler+0xb34>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0204 	bic.w	r2, r2, #4
 8008df6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8165 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e0a:	e15f      	b.n	80090cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e10:	f003 031f 	and.w	r3, r3, #31
 8008e14:	2202      	movs	r2, #2
 8008e16:	409a      	lsls	r2, r3
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80c5 	beq.w	8008fac <HAL_DMA_IRQHandler+0xce8>
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 80bf 	beq.w	8008fac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	2202      	movs	r2, #2
 8008e38:	409a      	lsls	r2, r3
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d018      	beq.n	8008e7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 813a 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e64:	e134      	b.n	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 8130 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e78:	e12a      	b.n	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d168      	bne.n	8008f56 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a38      	ldr	r2, [pc, #224]	; (8008f6c <HAL_DMA_IRQHandler+0xca8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d04a      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a37      	ldr	r2, [pc, #220]	; (8008f70 <HAL_DMA_IRQHandler+0xcac>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d045      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a35      	ldr	r2, [pc, #212]	; (8008f74 <HAL_DMA_IRQHandler+0xcb0>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d040      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a34      	ldr	r2, [pc, #208]	; (8008f78 <HAL_DMA_IRQHandler+0xcb4>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d03b      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a32      	ldr	r2, [pc, #200]	; (8008f7c <HAL_DMA_IRQHandler+0xcb8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d036      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a31      	ldr	r2, [pc, #196]	; (8008f80 <HAL_DMA_IRQHandler+0xcbc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d031      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a2f      	ldr	r2, [pc, #188]	; (8008f84 <HAL_DMA_IRQHandler+0xcc0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d02c      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a2e      	ldr	r2, [pc, #184]	; (8008f88 <HAL_DMA_IRQHandler+0xcc4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d027      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a2c      	ldr	r2, [pc, #176]	; (8008f8c <HAL_DMA_IRQHandler+0xcc8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d022      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a2b      	ldr	r2, [pc, #172]	; (8008f90 <HAL_DMA_IRQHandler+0xccc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d01d      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a29      	ldr	r2, [pc, #164]	; (8008f94 <HAL_DMA_IRQHandler+0xcd0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d018      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a28      	ldr	r2, [pc, #160]	; (8008f98 <HAL_DMA_IRQHandler+0xcd4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d013      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a26      	ldr	r2, [pc, #152]	; (8008f9c <HAL_DMA_IRQHandler+0xcd8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00e      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <HAL_DMA_IRQHandler+0xcdc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d009      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a23      	ldr	r2, [pc, #140]	; (8008fa4 <HAL_DMA_IRQHandler+0xce0>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d004      	beq.n	8008f24 <HAL_DMA_IRQHandler+0xc60>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a22      	ldr	r2, [pc, #136]	; (8008fa8 <HAL_DMA_IRQHandler+0xce4>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d108      	bne.n	8008f36 <HAL_DMA_IRQHandler+0xc72>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0214 	bic.w	r2, r2, #20
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	e007      	b.n	8008f46 <HAL_DMA_IRQHandler+0xc82>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 020a 	bic.w	r2, r2, #10
 8008f44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80b8 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f68:	e0b2      	b.n	80090d0 <HAL_DMA_IRQHandler+0xe0c>
 8008f6a:	bf00      	nop
 8008f6c:	40020010 	.word	0x40020010
 8008f70:	40020028 	.word	0x40020028
 8008f74:	40020040 	.word	0x40020040
 8008f78:	40020058 	.word	0x40020058
 8008f7c:	40020070 	.word	0x40020070
 8008f80:	40020088 	.word	0x40020088
 8008f84:	400200a0 	.word	0x400200a0
 8008f88:	400200b8 	.word	0x400200b8
 8008f8c:	40020410 	.word	0x40020410
 8008f90:	40020428 	.word	0x40020428
 8008f94:	40020440 	.word	0x40020440
 8008f98:	40020458 	.word	0x40020458
 8008f9c:	40020470 	.word	0x40020470
 8008fa0:	40020488 	.word	0x40020488
 8008fa4:	400204a0 	.word	0x400204a0
 8008fa8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	409a      	lsls	r2, r3
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8088 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8082 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a41      	ldr	r2, [pc, #260]	; (80090d8 <HAL_DMA_IRQHandler+0xe14>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d04a      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a3f      	ldr	r2, [pc, #252]	; (80090dc <HAL_DMA_IRQHandler+0xe18>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d045      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a3e      	ldr	r2, [pc, #248]	; (80090e0 <HAL_DMA_IRQHandler+0xe1c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d040      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a3c      	ldr	r2, [pc, #240]	; (80090e4 <HAL_DMA_IRQHandler+0xe20>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d03b      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a3b      	ldr	r2, [pc, #236]	; (80090e8 <HAL_DMA_IRQHandler+0xe24>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d036      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a39      	ldr	r2, [pc, #228]	; (80090ec <HAL_DMA_IRQHandler+0xe28>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d031      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a38      	ldr	r2, [pc, #224]	; (80090f0 <HAL_DMA_IRQHandler+0xe2c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d02c      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a36      	ldr	r2, [pc, #216]	; (80090f4 <HAL_DMA_IRQHandler+0xe30>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d027      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a35      	ldr	r2, [pc, #212]	; (80090f8 <HAL_DMA_IRQHandler+0xe34>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d022      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a33      	ldr	r2, [pc, #204]	; (80090fc <HAL_DMA_IRQHandler+0xe38>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01d      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a32      	ldr	r2, [pc, #200]	; (8009100 <HAL_DMA_IRQHandler+0xe3c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d018      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a30      	ldr	r2, [pc, #192]	; (8009104 <HAL_DMA_IRQHandler+0xe40>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d013      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a2f      	ldr	r2, [pc, #188]	; (8009108 <HAL_DMA_IRQHandler+0xe44>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00e      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a2d      	ldr	r2, [pc, #180]	; (800910c <HAL_DMA_IRQHandler+0xe48>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d009      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a2c      	ldr	r2, [pc, #176]	; (8009110 <HAL_DMA_IRQHandler+0xe4c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d004      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a2a      	ldr	r2, [pc, #168]	; (8009114 <HAL_DMA_IRQHandler+0xe50>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d108      	bne.n	8009080 <HAL_DMA_IRQHandler+0xdbc>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f022 021c 	bic.w	r2, r2, #28
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e007      	b.n	8009090 <HAL_DMA_IRQHandler+0xdcc>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 020e 	bic.w	r2, r2, #14
 800908e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009094:	f003 031f 	and.w	r3, r3, #31
 8009098:	2201      	movs	r2, #1
 800909a:	409a      	lsls	r2, r3
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
 80090c6:	e004      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80090c8:	bf00      	nop
 80090ca:	e002      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090cc:	bf00      	nop
 80090ce:	e000      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80090d2:	3728      	adds	r7, #40	; 0x28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40020010 	.word	0x40020010
 80090dc:	40020028 	.word	0x40020028
 80090e0:	40020040 	.word	0x40020040
 80090e4:	40020058 	.word	0x40020058
 80090e8:	40020070 	.word	0x40020070
 80090ec:	40020088 	.word	0x40020088
 80090f0:	400200a0 	.word	0x400200a0
 80090f4:	400200b8 	.word	0x400200b8
 80090f8:	40020410 	.word	0x40020410
 80090fc:	40020428 	.word	0x40020428
 8009100:	40020440 	.word	0x40020440
 8009104:	40020458 	.word	0x40020458
 8009108:	40020470 	.word	0x40020470
 800910c:	40020488 	.word	0x40020488
 8009110:	400204a0 	.word	0x400204a0
 8009114:	400204b8 	.word	0x400204b8

08009118 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009130:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a84      	ldr	r2, [pc, #528]	; (8009348 <DMA_SetConfig+0x230>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d072      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a82      	ldr	r2, [pc, #520]	; (800934c <DMA_SetConfig+0x234>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d06d      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a81      	ldr	r2, [pc, #516]	; (8009350 <DMA_SetConfig+0x238>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d068      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a7f      	ldr	r2, [pc, #508]	; (8009354 <DMA_SetConfig+0x23c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d063      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a7e      	ldr	r2, [pc, #504]	; (8009358 <DMA_SetConfig+0x240>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d05e      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a7c      	ldr	r2, [pc, #496]	; (800935c <DMA_SetConfig+0x244>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d059      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a7b      	ldr	r2, [pc, #492]	; (8009360 <DMA_SetConfig+0x248>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d054      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a79      	ldr	r2, [pc, #484]	; (8009364 <DMA_SetConfig+0x24c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d04f      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a78      	ldr	r2, [pc, #480]	; (8009368 <DMA_SetConfig+0x250>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d04a      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a76      	ldr	r2, [pc, #472]	; (800936c <DMA_SetConfig+0x254>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d045      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a75      	ldr	r2, [pc, #468]	; (8009370 <DMA_SetConfig+0x258>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d040      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a73      	ldr	r2, [pc, #460]	; (8009374 <DMA_SetConfig+0x25c>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d03b      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a72      	ldr	r2, [pc, #456]	; (8009378 <DMA_SetConfig+0x260>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d036      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a70      	ldr	r2, [pc, #448]	; (800937c <DMA_SetConfig+0x264>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d031      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a6f      	ldr	r2, [pc, #444]	; (8009380 <DMA_SetConfig+0x268>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d02c      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a6d      	ldr	r2, [pc, #436]	; (8009384 <DMA_SetConfig+0x26c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d027      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a6c      	ldr	r2, [pc, #432]	; (8009388 <DMA_SetConfig+0x270>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d022      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a6a      	ldr	r2, [pc, #424]	; (800938c <DMA_SetConfig+0x274>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d01d      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a69      	ldr	r2, [pc, #420]	; (8009390 <DMA_SetConfig+0x278>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d018      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a67      	ldr	r2, [pc, #412]	; (8009394 <DMA_SetConfig+0x27c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d013      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a66      	ldr	r2, [pc, #408]	; (8009398 <DMA_SetConfig+0x280>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d00e      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a64      	ldr	r2, [pc, #400]	; (800939c <DMA_SetConfig+0x284>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d009      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a63      	ldr	r2, [pc, #396]	; (80093a0 <DMA_SetConfig+0x288>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d004      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a61      	ldr	r2, [pc, #388]	; (80093a4 <DMA_SetConfig+0x28c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d101      	bne.n	8009226 <DMA_SetConfig+0x10e>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <DMA_SetConfig+0x110>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00d      	beq.n	8009248 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009234:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009246:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a3e      	ldr	r2, [pc, #248]	; (8009348 <DMA_SetConfig+0x230>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d04a      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a3d      	ldr	r2, [pc, #244]	; (800934c <DMA_SetConfig+0x234>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d045      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a3b      	ldr	r2, [pc, #236]	; (8009350 <DMA_SetConfig+0x238>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d040      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3a      	ldr	r2, [pc, #232]	; (8009354 <DMA_SetConfig+0x23c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d03b      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a38      	ldr	r2, [pc, #224]	; (8009358 <DMA_SetConfig+0x240>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d036      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a37      	ldr	r2, [pc, #220]	; (800935c <DMA_SetConfig+0x244>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d031      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a35      	ldr	r2, [pc, #212]	; (8009360 <DMA_SetConfig+0x248>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d02c      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a34      	ldr	r2, [pc, #208]	; (8009364 <DMA_SetConfig+0x24c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d027      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a32      	ldr	r2, [pc, #200]	; (8009368 <DMA_SetConfig+0x250>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d022      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a31      	ldr	r2, [pc, #196]	; (800936c <DMA_SetConfig+0x254>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d01d      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a2f      	ldr	r2, [pc, #188]	; (8009370 <DMA_SetConfig+0x258>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d018      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a2e      	ldr	r2, [pc, #184]	; (8009374 <DMA_SetConfig+0x25c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d013      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a2c      	ldr	r2, [pc, #176]	; (8009378 <DMA_SetConfig+0x260>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d00e      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a2b      	ldr	r2, [pc, #172]	; (800937c <DMA_SetConfig+0x264>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d009      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a29      	ldr	r2, [pc, #164]	; (8009380 <DMA_SetConfig+0x268>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d004      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a28      	ldr	r2, [pc, #160]	; (8009384 <DMA_SetConfig+0x26c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d101      	bne.n	80092ec <DMA_SetConfig+0x1d4>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <DMA_SetConfig+0x1d6>
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d05a      	beq.n	80093a8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f6:	f003 031f 	and.w	r3, r3, #31
 80092fa:	223f      	movs	r2, #63	; 0x3f
 80092fc:	409a      	lsls	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009310:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b40      	cmp	r3, #64	; 0x40
 8009320:	d108      	bne.n	8009334 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009332:	e087      	b.n	8009444 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	60da      	str	r2, [r3, #12]
}
 8009344:	e07e      	b.n	8009444 <DMA_SetConfig+0x32c>
 8009346:	bf00      	nop
 8009348:	40020010 	.word	0x40020010
 800934c:	40020028 	.word	0x40020028
 8009350:	40020040 	.word	0x40020040
 8009354:	40020058 	.word	0x40020058
 8009358:	40020070 	.word	0x40020070
 800935c:	40020088 	.word	0x40020088
 8009360:	400200a0 	.word	0x400200a0
 8009364:	400200b8 	.word	0x400200b8
 8009368:	40020410 	.word	0x40020410
 800936c:	40020428 	.word	0x40020428
 8009370:	40020440 	.word	0x40020440
 8009374:	40020458 	.word	0x40020458
 8009378:	40020470 	.word	0x40020470
 800937c:	40020488 	.word	0x40020488
 8009380:	400204a0 	.word	0x400204a0
 8009384:	400204b8 	.word	0x400204b8
 8009388:	58025408 	.word	0x58025408
 800938c:	5802541c 	.word	0x5802541c
 8009390:	58025430 	.word	0x58025430
 8009394:	58025444 	.word	0x58025444
 8009398:	58025458 	.word	0x58025458
 800939c:	5802546c 	.word	0x5802546c
 80093a0:	58025480 	.word	0x58025480
 80093a4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a28      	ldr	r2, [pc, #160]	; (8009450 <DMA_SetConfig+0x338>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d022      	beq.n	80093f8 <DMA_SetConfig+0x2e0>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a27      	ldr	r2, [pc, #156]	; (8009454 <DMA_SetConfig+0x33c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d01d      	beq.n	80093f8 <DMA_SetConfig+0x2e0>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a25      	ldr	r2, [pc, #148]	; (8009458 <DMA_SetConfig+0x340>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d018      	beq.n	80093f8 <DMA_SetConfig+0x2e0>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a24      	ldr	r2, [pc, #144]	; (800945c <DMA_SetConfig+0x344>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d013      	beq.n	80093f8 <DMA_SetConfig+0x2e0>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a22      	ldr	r2, [pc, #136]	; (8009460 <DMA_SetConfig+0x348>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00e      	beq.n	80093f8 <DMA_SetConfig+0x2e0>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a21      	ldr	r2, [pc, #132]	; (8009464 <DMA_SetConfig+0x34c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d009      	beq.n	80093f8 <DMA_SetConfig+0x2e0>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a1f      	ldr	r2, [pc, #124]	; (8009468 <DMA_SetConfig+0x350>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d004      	beq.n	80093f8 <DMA_SetConfig+0x2e0>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a1e      	ldr	r2, [pc, #120]	; (800946c <DMA_SetConfig+0x354>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d101      	bne.n	80093fc <DMA_SetConfig+0x2e4>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <DMA_SetConfig+0x2e6>
 80093fc:	2300      	movs	r3, #0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d020      	beq.n	8009444 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009406:	f003 031f 	and.w	r3, r3, #31
 800940a:	2201      	movs	r2, #1
 800940c:	409a      	lsls	r2, r3
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	2b40      	cmp	r3, #64	; 0x40
 8009420:	d108      	bne.n	8009434 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	60da      	str	r2, [r3, #12]
}
 8009432:	e007      	b.n	8009444 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	60da      	str	r2, [r3, #12]
}
 8009444:	bf00      	nop
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	58025408 	.word	0x58025408
 8009454:	5802541c 	.word	0x5802541c
 8009458:	58025430 	.word	0x58025430
 800945c:	58025444 	.word	0x58025444
 8009460:	58025458 	.word	0x58025458
 8009464:	5802546c 	.word	0x5802546c
 8009468:	58025480 	.word	0x58025480
 800946c:	58025494 	.word	0x58025494

08009470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a42      	ldr	r2, [pc, #264]	; (8009588 <DMA_CalcBaseAndBitshift+0x118>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d04a      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a41      	ldr	r2, [pc, #260]	; (800958c <DMA_CalcBaseAndBitshift+0x11c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d045      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a3f      	ldr	r2, [pc, #252]	; (8009590 <DMA_CalcBaseAndBitshift+0x120>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d040      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a3e      	ldr	r2, [pc, #248]	; (8009594 <DMA_CalcBaseAndBitshift+0x124>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d03b      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a3c      	ldr	r2, [pc, #240]	; (8009598 <DMA_CalcBaseAndBitshift+0x128>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d036      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a3b      	ldr	r2, [pc, #236]	; (800959c <DMA_CalcBaseAndBitshift+0x12c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d031      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a39      	ldr	r2, [pc, #228]	; (80095a0 <DMA_CalcBaseAndBitshift+0x130>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d02c      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a38      	ldr	r2, [pc, #224]	; (80095a4 <DMA_CalcBaseAndBitshift+0x134>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d027      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a36      	ldr	r2, [pc, #216]	; (80095a8 <DMA_CalcBaseAndBitshift+0x138>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d022      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a35      	ldr	r2, [pc, #212]	; (80095ac <DMA_CalcBaseAndBitshift+0x13c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d01d      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a33      	ldr	r2, [pc, #204]	; (80095b0 <DMA_CalcBaseAndBitshift+0x140>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d018      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a32      	ldr	r2, [pc, #200]	; (80095b4 <DMA_CalcBaseAndBitshift+0x144>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d013      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a30      	ldr	r2, [pc, #192]	; (80095b8 <DMA_CalcBaseAndBitshift+0x148>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00e      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a2f      	ldr	r2, [pc, #188]	; (80095bc <DMA_CalcBaseAndBitshift+0x14c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d009      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a2d      	ldr	r2, [pc, #180]	; (80095c0 <DMA_CalcBaseAndBitshift+0x150>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d004      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a2c      	ldr	r2, [pc, #176]	; (80095c4 <DMA_CalcBaseAndBitshift+0x154>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d101      	bne.n	800951c <DMA_CalcBaseAndBitshift+0xac>
 8009518:	2301      	movs	r3, #1
 800951a:	e000      	b.n	800951e <DMA_CalcBaseAndBitshift+0xae>
 800951c:	2300      	movs	r3, #0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d024      	beq.n	800956c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	3b10      	subs	r3, #16
 800952a:	4a27      	ldr	r2, [pc, #156]	; (80095c8 <DMA_CalcBaseAndBitshift+0x158>)
 800952c:	fba2 2303 	umull	r2, r3, r2, r3
 8009530:	091b      	lsrs	r3, r3, #4
 8009532:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	4a24      	ldr	r2, [pc, #144]	; (80095cc <DMA_CalcBaseAndBitshift+0x15c>)
 800953c:	5cd3      	ldrb	r3, [r2, r3]
 800953e:	461a      	mov	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b03      	cmp	r3, #3
 8009548:	d908      	bls.n	800955c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	4b1f      	ldr	r3, [pc, #124]	; (80095d0 <DMA_CalcBaseAndBitshift+0x160>)
 8009552:	4013      	ands	r3, r2
 8009554:	1d1a      	adds	r2, r3, #4
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	659a      	str	r2, [r3, #88]	; 0x58
 800955a:	e00d      	b.n	8009578 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	4b1b      	ldr	r3, [pc, #108]	; (80095d0 <DMA_CalcBaseAndBitshift+0x160>)
 8009564:	4013      	ands	r3, r2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6593      	str	r3, [r2, #88]	; 0x58
 800956a:	e005      	b.n	8009578 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	40020010 	.word	0x40020010
 800958c:	40020028 	.word	0x40020028
 8009590:	40020040 	.word	0x40020040
 8009594:	40020058 	.word	0x40020058
 8009598:	40020070 	.word	0x40020070
 800959c:	40020088 	.word	0x40020088
 80095a0:	400200a0 	.word	0x400200a0
 80095a4:	400200b8 	.word	0x400200b8
 80095a8:	40020410 	.word	0x40020410
 80095ac:	40020428 	.word	0x40020428
 80095b0:	40020440 	.word	0x40020440
 80095b4:	40020458 	.word	0x40020458
 80095b8:	40020470 	.word	0x40020470
 80095bc:	40020488 	.word	0x40020488
 80095c0:	400204a0 	.word	0x400204a0
 80095c4:	400204b8 	.word	0x400204b8
 80095c8:	aaaaaaab 	.word	0xaaaaaaab
 80095cc:	08014014 	.word	0x08014014
 80095d0:	fffffc00 	.word	0xfffffc00

080095d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d120      	bne.n	800962a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d858      	bhi.n	80096a2 <DMA_CheckFifoParam+0xce>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <DMA_CheckFifoParam+0x24>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	08009609 	.word	0x08009609
 80095fc:	0800961b 	.word	0x0800961b
 8009600:	08009609 	.word	0x08009609
 8009604:	080096a3 	.word	0x080096a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d048      	beq.n	80096a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009618:	e045      	b.n	80096a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009622:	d142      	bne.n	80096aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009628:	e03f      	b.n	80096aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009632:	d123      	bne.n	800967c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	2b03      	cmp	r3, #3
 800963a:	d838      	bhi.n	80096ae <DMA_CheckFifoParam+0xda>
 800963c:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <DMA_CheckFifoParam+0x70>)
 800963e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009642:	bf00      	nop
 8009644:	08009655 	.word	0x08009655
 8009648:	0800965b 	.word	0x0800965b
 800964c:	08009655 	.word	0x08009655
 8009650:	0800966d 	.word	0x0800966d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	73fb      	strb	r3, [r7, #15]
        break;
 8009658:	e030      	b.n	80096bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d025      	beq.n	80096b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800966a:	e022      	b.n	80096b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009674:	d11f      	bne.n	80096b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800967a:	e01c      	b.n	80096b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009680:	2b02      	cmp	r3, #2
 8009682:	d902      	bls.n	800968a <DMA_CheckFifoParam+0xb6>
 8009684:	2b03      	cmp	r3, #3
 8009686:	d003      	beq.n	8009690 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009688:	e018      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	73fb      	strb	r3, [r7, #15]
        break;
 800968e:	e015      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00e      	beq.n	80096ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	73fb      	strb	r3, [r7, #15]
    break;
 80096a0:	e00b      	b.n	80096ba <DMA_CheckFifoParam+0xe6>
        break;
 80096a2:	bf00      	nop
 80096a4:	e00a      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096a6:	bf00      	nop
 80096a8:	e008      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096aa:	bf00      	nop
 80096ac:	e006      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096ae:	bf00      	nop
 80096b0:	e004      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096b2:	bf00      	nop
 80096b4:	e002      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096b6:	bf00      	nop
 80096b8:	e000      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
    break;
 80096ba:	bf00      	nop
    }
  }

  return status;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop

080096cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a38      	ldr	r2, [pc, #224]	; (80097c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d022      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a36      	ldr	r2, [pc, #216]	; (80097c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01d      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a35      	ldr	r2, [pc, #212]	; (80097c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d018      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a33      	ldr	r2, [pc, #204]	; (80097cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d013      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a32      	ldr	r2, [pc, #200]	; (80097d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00e      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a30      	ldr	r2, [pc, #192]	; (80097d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d009      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a2f      	ldr	r2, [pc, #188]	; (80097d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d004      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a2d      	ldr	r2, [pc, #180]	; (80097dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d101      	bne.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01a      	beq.n	800976a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	3b08      	subs	r3, #8
 800973c:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800973e:	fba2 2303 	umull	r2, r3, r2, r3
 8009742:	091b      	lsrs	r3, r3, #4
 8009744:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a24      	ldr	r2, [pc, #144]	; (80097e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009758:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	2201      	movs	r2, #1
 8009762:	409a      	lsls	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009768:	e024      	b.n	80097b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	3b10      	subs	r3, #16
 8009772:	4a1e      	ldr	r2, [pc, #120]	; (80097ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009774:	fba2 2303 	umull	r2, r3, r2, r3
 8009778:	091b      	lsrs	r3, r3, #4
 800977a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4a1c      	ldr	r2, [pc, #112]	; (80097f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d806      	bhi.n	8009792 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	4a1b      	ldr	r2, [pc, #108]	; (80097f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d902      	bls.n	8009792 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3308      	adds	r3, #8
 8009790:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4b18      	ldr	r3, [pc, #96]	; (80097f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a16      	ldr	r2, [pc, #88]	; (80097fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80097a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	2201      	movs	r2, #1
 80097ae:	409a      	lsls	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	58025408 	.word	0x58025408
 80097c4:	5802541c 	.word	0x5802541c
 80097c8:	58025430 	.word	0x58025430
 80097cc:	58025444 	.word	0x58025444
 80097d0:	58025458 	.word	0x58025458
 80097d4:	5802546c 	.word	0x5802546c
 80097d8:	58025480 	.word	0x58025480
 80097dc:	58025494 	.word	0x58025494
 80097e0:	cccccccd 	.word	0xcccccccd
 80097e4:	16009600 	.word	0x16009600
 80097e8:	58025880 	.word	0x58025880
 80097ec:	aaaaaaab 	.word	0xaaaaaaab
 80097f0:	400204b8 	.word	0x400204b8
 80097f4:	4002040f 	.word	0x4002040f
 80097f8:	10008200 	.word	0x10008200
 80097fc:	40020880 	.word	0x40020880

08009800 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d04a      	beq.n	80098ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b08      	cmp	r3, #8
 800981a:	d847      	bhi.n	80098ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a25      	ldr	r2, [pc, #148]	; (80098b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d022      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a24      	ldr	r2, [pc, #144]	; (80098bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d01d      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a22      	ldr	r2, [pc, #136]	; (80098c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d018      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a21      	ldr	r2, [pc, #132]	; (80098c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d013      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a1f      	ldr	r2, [pc, #124]	; (80098c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00e      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d009      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a1c      	ldr	r2, [pc, #112]	; (80098d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d004      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a1b      	ldr	r2, [pc, #108]	; (80098d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d101      	bne.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009870:	2300      	movs	r3, #0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4b17      	ldr	r3, [pc, #92]	; (80098d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	461a      	mov	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a15      	ldr	r2, [pc, #84]	; (80098dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009888:	671a      	str	r2, [r3, #112]	; 0x70
 800988a:	e009      	b.n	80098a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	461a      	mov	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a11      	ldr	r2, [pc, #68]	; (80098e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800989e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	2201      	movs	r2, #1
 80098a6:	409a      	lsls	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	58025408 	.word	0x58025408
 80098bc:	5802541c 	.word	0x5802541c
 80098c0:	58025430 	.word	0x58025430
 80098c4:	58025444 	.word	0x58025444
 80098c8:	58025458 	.word	0x58025458
 80098cc:	5802546c 	.word	0x5802546c
 80098d0:	58025480 	.word	0x58025480
 80098d4:	58025494 	.word	0x58025494
 80098d8:	1600963f 	.word	0x1600963f
 80098dc:	58025940 	.word	0x58025940
 80098e0:	1000823f 	.word	0x1000823f
 80098e4:	40020940 	.word	0x40020940

080098e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b089      	sub	sp, #36	; 0x24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80098f6:	4b89      	ldr	r3, [pc, #548]	; (8009b1c <HAL_GPIO_Init+0x234>)
 80098f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80098fa:	e194      	b.n	8009c26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	2101      	movs	r1, #1
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	4013      	ands	r3, r2
 800990a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 8186 	beq.w	8009c20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	2b01      	cmp	r3, #1
 800991e:	d005      	beq.n	800992c <HAL_GPIO_Init+0x44>
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f003 0303 	and.w	r3, r3, #3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d130      	bne.n	800998e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	2203      	movs	r2, #3
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	43db      	mvns	r3, r3
 800993e:	69ba      	ldr	r2, [r7, #24]
 8009940:	4013      	ands	r3, r2
 8009942:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	69ba      	ldr	r2, [r7, #24]
 8009952:	4313      	orrs	r3, r2
 8009954:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009962:	2201      	movs	r2, #1
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	fa02 f303 	lsl.w	r3, r2, r3
 800996a:	43db      	mvns	r3, r3
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	4013      	ands	r3, r2
 8009970:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	091b      	lsrs	r3, r3, #4
 8009978:	f003 0201 	and.w	r2, r3, #1
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	fa02 f303 	lsl.w	r3, r2, r3
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	4313      	orrs	r3, r2
 8009986:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f003 0303 	and.w	r3, r3, #3
 8009996:	2b03      	cmp	r3, #3
 8009998:	d017      	beq.n	80099ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	2203      	movs	r2, #3
 80099a6:	fa02 f303 	lsl.w	r3, r2, r3
 80099aa:	43db      	mvns	r3, r3
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	4013      	ands	r3, r2
 80099b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	689a      	ldr	r2, [r3, #8]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	fa02 f303 	lsl.w	r3, r2, r3
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d123      	bne.n	8009a1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	08da      	lsrs	r2, r3, #3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3208      	adds	r2, #8
 80099de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	220f      	movs	r2, #15
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	43db      	mvns	r3, r3
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	4013      	ands	r3, r2
 80099f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	08da      	lsrs	r2, r3, #3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3208      	adds	r2, #8
 8009a18:	69b9      	ldr	r1, [r7, #24]
 8009a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	2203      	movs	r2, #3
 8009a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2e:	43db      	mvns	r3, r3
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	4013      	ands	r3, r2
 8009a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f003 0203 	and.w	r2, r3, #3
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	fa02 f303 	lsl.w	r3, r2, r3
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 80e0 	beq.w	8009c20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a60:	4b2f      	ldr	r3, [pc, #188]	; (8009b20 <HAL_GPIO_Init+0x238>)
 8009a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a66:	4a2e      	ldr	r2, [pc, #184]	; (8009b20 <HAL_GPIO_Init+0x238>)
 8009a68:	f043 0302 	orr.w	r3, r3, #2
 8009a6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009a70:	4b2b      	ldr	r3, [pc, #172]	; (8009b20 <HAL_GPIO_Init+0x238>)
 8009a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a7e:	4a29      	ldr	r2, [pc, #164]	; (8009b24 <HAL_GPIO_Init+0x23c>)
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	089b      	lsrs	r3, r3, #2
 8009a84:	3302      	adds	r3, #2
 8009a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	220f      	movs	r2, #15
 8009a96:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9a:	43db      	mvns	r3, r3
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a20      	ldr	r2, [pc, #128]	; (8009b28 <HAL_GPIO_Init+0x240>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d052      	beq.n	8009b50 <HAL_GPIO_Init+0x268>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a1f      	ldr	r2, [pc, #124]	; (8009b2c <HAL_GPIO_Init+0x244>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d031      	beq.n	8009b16 <HAL_GPIO_Init+0x22e>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a1e      	ldr	r2, [pc, #120]	; (8009b30 <HAL_GPIO_Init+0x248>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d02b      	beq.n	8009b12 <HAL_GPIO_Init+0x22a>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <HAL_GPIO_Init+0x24c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d025      	beq.n	8009b0e <HAL_GPIO_Init+0x226>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a1c      	ldr	r2, [pc, #112]	; (8009b38 <HAL_GPIO_Init+0x250>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d01f      	beq.n	8009b0a <HAL_GPIO_Init+0x222>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a1b      	ldr	r2, [pc, #108]	; (8009b3c <HAL_GPIO_Init+0x254>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d019      	beq.n	8009b06 <HAL_GPIO_Init+0x21e>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a1a      	ldr	r2, [pc, #104]	; (8009b40 <HAL_GPIO_Init+0x258>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d013      	beq.n	8009b02 <HAL_GPIO_Init+0x21a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a19      	ldr	r2, [pc, #100]	; (8009b44 <HAL_GPIO_Init+0x25c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00d      	beq.n	8009afe <HAL_GPIO_Init+0x216>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a18      	ldr	r2, [pc, #96]	; (8009b48 <HAL_GPIO_Init+0x260>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d007      	beq.n	8009afa <HAL_GPIO_Init+0x212>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a17      	ldr	r2, [pc, #92]	; (8009b4c <HAL_GPIO_Init+0x264>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d101      	bne.n	8009af6 <HAL_GPIO_Init+0x20e>
 8009af2:	2309      	movs	r3, #9
 8009af4:	e02d      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009af6:	230a      	movs	r3, #10
 8009af8:	e02b      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009afa:	2308      	movs	r3, #8
 8009afc:	e029      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009afe:	2307      	movs	r3, #7
 8009b00:	e027      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009b02:	2306      	movs	r3, #6
 8009b04:	e025      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009b06:	2305      	movs	r3, #5
 8009b08:	e023      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009b0a:	2304      	movs	r3, #4
 8009b0c:	e021      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e01f      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e01d      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e01b      	b.n	8009b52 <HAL_GPIO_Init+0x26a>
 8009b1a:	bf00      	nop
 8009b1c:	58000080 	.word	0x58000080
 8009b20:	58024400 	.word	0x58024400
 8009b24:	58000400 	.word	0x58000400
 8009b28:	58020000 	.word	0x58020000
 8009b2c:	58020400 	.word	0x58020400
 8009b30:	58020800 	.word	0x58020800
 8009b34:	58020c00 	.word	0x58020c00
 8009b38:	58021000 	.word	0x58021000
 8009b3c:	58021400 	.word	0x58021400
 8009b40:	58021800 	.word	0x58021800
 8009b44:	58021c00 	.word	0x58021c00
 8009b48:	58022000 	.word	0x58022000
 8009b4c:	58022400 	.word	0x58022400
 8009b50:	2300      	movs	r3, #0
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	f002 0203 	and.w	r2, r2, #3
 8009b58:	0092      	lsls	r2, r2, #2
 8009b5a:	4093      	lsls	r3, r2
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b62:	4938      	ldr	r1, [pc, #224]	; (8009c44 <HAL_GPIO_Init+0x35c>)
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	089b      	lsrs	r3, r3, #2
 8009b68:	3302      	adds	r3, #2
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	43db      	mvns	r3, r3
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009b8e:	69ba      	ldr	r2, [r7, #24]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	4013      	ands	r3, r2
 8009bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009be8:	69ba      	ldr	r2, [r7, #24]
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	43db      	mvns	r3, r3
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	4013      	ands	r3, r2
 8009c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	3301      	adds	r3, #1
 8009c24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f47f ae63 	bne.w	80098fc <HAL_GPIO_Init+0x14>
  }
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	3724      	adds	r7, #36	; 0x24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	58000400 	.word	0x58000400

08009c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	807b      	strh	r3, [r7, #2]
 8009c54:	4613      	mov	r3, r2
 8009c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c58:	787b      	ldrb	r3, [r7, #1]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c5e:	887a      	ldrh	r2, [r7, #2]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009c64:	e003      	b.n	8009c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009c66:	887b      	ldrh	r3, [r7, #2]
 8009c68:	041a      	lsls	r2, r3, #16
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	619a      	str	r2, [r3, #24]
}
 8009c6e:	bf00      	nop
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	4603      	mov	r3, r0
 8009c82:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d008      	beq.n	8009ca6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fa fce1 	bl	8004668 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009cb8:	4b19      	ldr	r3, [pc, #100]	; (8009d20 <HAL_PWREx_ConfigSupply+0x70>)
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d00a      	beq.n	8009cda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009cc4:	4b16      	ldr	r3, [pc, #88]	; (8009d20 <HAL_PWREx_ConfigSupply+0x70>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d001      	beq.n	8009cd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e01f      	b.n	8009d16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e01d      	b.n	8009d16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009cda:	4b11      	ldr	r3, [pc, #68]	; (8009d20 <HAL_PWREx_ConfigSupply+0x70>)
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f023 0207 	bic.w	r2, r3, #7
 8009ce2:	490f      	ldr	r1, [pc, #60]	; (8009d20 <HAL_PWREx_ConfigSupply+0x70>)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009cea:	f7fc fc6d 	bl	80065c8 <HAL_GetTick>
 8009cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cf0:	e009      	b.n	8009d06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009cf2:	f7fc fc69 	bl	80065c8 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d00:	d901      	bls.n	8009d06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e007      	b.n	8009d16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d06:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <HAL_PWREx_ConfigSupply+0x70>)
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d12:	d1ee      	bne.n	8009cf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	58024800 	.word	0x58024800

08009d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08c      	sub	sp, #48	; 0x30
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f000 bc1c 	b.w	800a570 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8087 	beq.w	8009e54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d46:	4b9e      	ldr	r3, [pc, #632]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d50:	4b9b      	ldr	r3, [pc, #620]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	2b10      	cmp	r3, #16
 8009d5a:	d007      	beq.n	8009d6c <HAL_RCC_OscConfig+0x48>
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	2b18      	cmp	r3, #24
 8009d60:	d110      	bne.n	8009d84 <HAL_RCC_OscConfig+0x60>
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	f003 0303 	and.w	r3, r3, #3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d10b      	bne.n	8009d84 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d6c:	4b94      	ldr	r3, [pc, #592]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d06c      	beq.n	8009e52 <HAL_RCC_OscConfig+0x12e>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d168      	bne.n	8009e52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e3f5      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d8c:	d106      	bne.n	8009d9c <HAL_RCC_OscConfig+0x78>
 8009d8e:	4b8c      	ldr	r3, [pc, #560]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a8b      	ldr	r2, [pc, #556]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	e02e      	b.n	8009dfa <HAL_RCC_OscConfig+0xd6>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10c      	bne.n	8009dbe <HAL_RCC_OscConfig+0x9a>
 8009da4:	4b86      	ldr	r3, [pc, #536]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a85      	ldr	r2, [pc, #532]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	4b83      	ldr	r3, [pc, #524]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a82      	ldr	r2, [pc, #520]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	e01d      	b.n	8009dfa <HAL_RCC_OscConfig+0xd6>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dc6:	d10c      	bne.n	8009de2 <HAL_RCC_OscConfig+0xbe>
 8009dc8:	4b7d      	ldr	r3, [pc, #500]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a7c      	ldr	r2, [pc, #496]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dd2:	6013      	str	r3, [r2, #0]
 8009dd4:	4b7a      	ldr	r3, [pc, #488]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a79      	ldr	r2, [pc, #484]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	e00b      	b.n	8009dfa <HAL_RCC_OscConfig+0xd6>
 8009de2:	4b77      	ldr	r3, [pc, #476]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a76      	ldr	r2, [pc, #472]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	4b74      	ldr	r3, [pc, #464]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a73      	ldr	r2, [pc, #460]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009df8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d013      	beq.n	8009e2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e02:	f7fc fbe1 	bl	80065c8 <HAL_GetTick>
 8009e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e08:	e008      	b.n	8009e1c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e0a:	f7fc fbdd 	bl	80065c8 <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	2b64      	cmp	r3, #100	; 0x64
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e3a9      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e1c:	4b68      	ldr	r3, [pc, #416]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d0f0      	beq.n	8009e0a <HAL_RCC_OscConfig+0xe6>
 8009e28:	e014      	b.n	8009e54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2a:	f7fc fbcd 	bl	80065c8 <HAL_GetTick>
 8009e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e30:	e008      	b.n	8009e44 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e32:	f7fc fbc9 	bl	80065c8 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	2b64      	cmp	r3, #100	; 0x64
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e395      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e44:	4b5e      	ldr	r3, [pc, #376]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1f0      	bne.n	8009e32 <HAL_RCC_OscConfig+0x10e>
 8009e50:	e000      	b.n	8009e54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80ca 	beq.w	8009ff6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e62:	4b57      	ldr	r3, [pc, #348]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e6c:	4b54      	ldr	r3, [pc, #336]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d007      	beq.n	8009e88 <HAL_RCC_OscConfig+0x164>
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b18      	cmp	r3, #24
 8009e7c:	d156      	bne.n	8009f2c <HAL_RCC_OscConfig+0x208>
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d151      	bne.n	8009f2c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e88:	4b4d      	ldr	r3, [pc, #308]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x17c>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e367      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ea0:	4b47      	ldr	r3, [pc, #284]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f023 0219 	bic.w	r2, r3, #25
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	4944      	ldr	r1, [pc, #272]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009eb2:	f7fc fb89 	bl	80065c8 <HAL_GetTick>
 8009eb6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009eb8:	e008      	b.n	8009ecc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009eba:	f7fc fb85 	bl	80065c8 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e351      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ecc:	4b3c      	ldr	r3, [pc, #240]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0f0      	beq.n	8009eba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed8:	f7fc fba6 	bl	8006628 <HAL_GetREVID>
 8009edc:	4603      	mov	r3, r0
 8009ede:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d817      	bhi.n	8009f16 <HAL_RCC_OscConfig+0x1f2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	2b40      	cmp	r3, #64	; 0x40
 8009eec:	d108      	bne.n	8009f00 <HAL_RCC_OscConfig+0x1dc>
 8009eee:	4b34      	ldr	r3, [pc, #208]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ef6:	4a32      	ldr	r2, [pc, #200]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009efc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009efe:	e07a      	b.n	8009ff6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f00:	4b2f      	ldr	r3, [pc, #188]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	031b      	lsls	r3, r3, #12
 8009f0e:	492c      	ldr	r1, [pc, #176]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f14:	e06f      	b.n	8009ff6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f16:	4b2a      	ldr	r3, [pc, #168]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	061b      	lsls	r3, r3, #24
 8009f24:	4926      	ldr	r1, [pc, #152]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f2a:	e064      	b.n	8009ff6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d047      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f34:	4b22      	ldr	r3, [pc, #136]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f023 0219 	bic.w	r2, r3, #25
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	491f      	ldr	r1, [pc, #124]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f46:	f7fc fb3f 	bl	80065c8 <HAL_GetTick>
 8009f4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f4c:	e008      	b.n	8009f60 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f4e:	f7fc fb3b 	bl	80065c8 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d901      	bls.n	8009f60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e307      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f60:	4b17      	ldr	r3, [pc, #92]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0f0      	beq.n	8009f4e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f6c:	f7fc fb5c 	bl	8006628 <HAL_GetREVID>
 8009f70:	4603      	mov	r3, r0
 8009f72:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d817      	bhi.n	8009faa <HAL_RCC_OscConfig+0x286>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	2b40      	cmp	r3, #64	; 0x40
 8009f80:	d108      	bne.n	8009f94 <HAL_RCC_OscConfig+0x270>
 8009f82:	4b0f      	ldr	r3, [pc, #60]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f8a:	4a0d      	ldr	r2, [pc, #52]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f90:	6053      	str	r3, [r2, #4]
 8009f92:	e030      	b.n	8009ff6 <HAL_RCC_OscConfig+0x2d2>
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	031b      	lsls	r3, r3, #12
 8009fa2:	4907      	ldr	r1, [pc, #28]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	604b      	str	r3, [r1, #4]
 8009fa8:	e025      	b.n	8009ff6 <HAL_RCC_OscConfig+0x2d2>
 8009faa:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	061b      	lsls	r3, r3, #24
 8009fb8:	4901      	ldr	r1, [pc, #4]	; (8009fc0 <HAL_RCC_OscConfig+0x29c>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	604b      	str	r3, [r1, #4]
 8009fbe:	e01a      	b.n	8009ff6 <HAL_RCC_OscConfig+0x2d2>
 8009fc0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fc4:	4b9e      	ldr	r3, [pc, #632]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a9d      	ldr	r2, [pc, #628]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 8009fca:	f023 0301 	bic.w	r3, r3, #1
 8009fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd0:	f7fc fafa 	bl	80065c8 <HAL_GetTick>
 8009fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fd8:	f7fc faf6 	bl	80065c8 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e2c2      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fea:	4b95      	ldr	r3, [pc, #596]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0304 	and.w	r3, r3, #4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1f0      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0310 	and.w	r3, r3, #16
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 80a9 	beq.w	800a156 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a004:	4b8e      	ldr	r3, [pc, #568]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a00c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a00e:	4b8c      	ldr	r3, [pc, #560]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a012:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	2b08      	cmp	r3, #8
 800a018:	d007      	beq.n	800a02a <HAL_RCC_OscConfig+0x306>
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	2b18      	cmp	r3, #24
 800a01e:	d13a      	bne.n	800a096 <HAL_RCC_OscConfig+0x372>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f003 0303 	and.w	r3, r3, #3
 800a026:	2b01      	cmp	r3, #1
 800a028:	d135      	bne.n	800a096 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a02a:	4b85      	ldr	r3, [pc, #532]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a032:	2b00      	cmp	r3, #0
 800a034:	d005      	beq.n	800a042 <HAL_RCC_OscConfig+0x31e>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	2b80      	cmp	r3, #128	; 0x80
 800a03c:	d001      	beq.n	800a042 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e296      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a042:	f7fc faf1 	bl	8006628 <HAL_GetREVID>
 800a046:	4603      	mov	r3, r0
 800a048:	f241 0203 	movw	r2, #4099	; 0x1003
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d817      	bhi.n	800a080 <HAL_RCC_OscConfig+0x35c>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	2b20      	cmp	r3, #32
 800a056:	d108      	bne.n	800a06a <HAL_RCC_OscConfig+0x346>
 800a058:	4b79      	ldr	r3, [pc, #484]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a060:	4a77      	ldr	r2, [pc, #476]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a066:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a068:	e075      	b.n	800a156 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a06a:	4b75      	ldr	r3, [pc, #468]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	069b      	lsls	r3, r3, #26
 800a078:	4971      	ldr	r1, [pc, #452]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a07e:	e06a      	b.n	800a156 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a080:	4b6f      	ldr	r3, [pc, #444]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	496c      	ldr	r1, [pc, #432]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a090:	4313      	orrs	r3, r2
 800a092:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a094:	e05f      	b.n	800a156 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d042      	beq.n	800a124 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a09e:	4b68      	ldr	r3, [pc, #416]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a67      	ldr	r2, [pc, #412]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0aa:	f7fc fa8d 	bl	80065c8 <HAL_GetTick>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0b0:	e008      	b.n	800a0c4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a0b2:	f7fc fa89 	bl	80065c8 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d901      	bls.n	800a0c4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e255      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0c4:	4b5e      	ldr	r3, [pc, #376]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0f0      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0d0:	f7fc faaa 	bl	8006628 <HAL_GetREVID>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d817      	bhi.n	800a10e <HAL_RCC_OscConfig+0x3ea>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	2b20      	cmp	r3, #32
 800a0e4:	d108      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x3d4>
 800a0e6:	4b56      	ldr	r3, [pc, #344]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a0ee:	4a54      	ldr	r2, [pc, #336]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a0f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0f4:	6053      	str	r3, [r2, #4]
 800a0f6:	e02e      	b.n	800a156 <HAL_RCC_OscConfig+0x432>
 800a0f8:	4b51      	ldr	r3, [pc, #324]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	069b      	lsls	r3, r3, #26
 800a106:	494e      	ldr	r1, [pc, #312]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	604b      	str	r3, [r1, #4]
 800a10c:	e023      	b.n	800a156 <HAL_RCC_OscConfig+0x432>
 800a10e:	4b4c      	ldr	r3, [pc, #304]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	061b      	lsls	r3, r3, #24
 800a11c:	4948      	ldr	r1, [pc, #288]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	60cb      	str	r3, [r1, #12]
 800a122:	e018      	b.n	800a156 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a124:	4b46      	ldr	r3, [pc, #280]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a45      	ldr	r2, [pc, #276]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a12a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a12e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a130:	f7fc fa4a 	bl	80065c8 <HAL_GetTick>
 800a134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a136:	e008      	b.n	800a14a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a138:	f7fc fa46 	bl	80065c8 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	2b02      	cmp	r3, #2
 800a144:	d901      	bls.n	800a14a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e212      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a14a:	4b3d      	ldr	r3, [pc, #244]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1f0      	bne.n	800a138 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0308 	and.w	r3, r3, #8
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d036      	beq.n	800a1d0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d019      	beq.n	800a19e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a16a:	4b35      	ldr	r3, [pc, #212]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a16e:	4a34      	ldr	r2, [pc, #208]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a170:	f043 0301 	orr.w	r3, r3, #1
 800a174:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a176:	f7fc fa27 	bl	80065c8 <HAL_GetTick>
 800a17a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a17c:	e008      	b.n	800a190 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a17e:	f7fc fa23 	bl	80065c8 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d901      	bls.n	800a190 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e1ef      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a190:	4b2b      	ldr	r3, [pc, #172]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a194:	f003 0302 	and.w	r3, r3, #2
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0f0      	beq.n	800a17e <HAL_RCC_OscConfig+0x45a>
 800a19c:	e018      	b.n	800a1d0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a19e:	4b28      	ldr	r3, [pc, #160]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a2:	4a27      	ldr	r2, [pc, #156]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1aa:	f7fc fa0d 	bl	80065c8 <HAL_GetTick>
 800a1ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a1b0:	e008      	b.n	800a1c4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1b2:	f7fc fa09 	bl	80065c8 <HAL_GetTick>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d901      	bls.n	800a1c4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e1d5      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a1c4:	4b1e      	ldr	r3, [pc, #120]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1f0      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0320 	and.w	r3, r3, #32
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d039      	beq.n	800a250 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d019      	beq.n	800a218 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1e4:	4b16      	ldr	r3, [pc, #88]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a15      	ldr	r2, [pc, #84]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a1ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1f0:	f7fc f9ea 	bl	80065c8 <HAL_GetTick>
 800a1f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1f6:	e008      	b.n	800a20a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a1f8:	f7fc f9e6 	bl	80065c8 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e1b2      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a20a:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d0f0      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x4d4>
 800a216:	e01b      	b.n	800a250 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a218:	4b09      	ldr	r3, [pc, #36]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a08      	ldr	r2, [pc, #32]	; (800a240 <HAL_RCC_OscConfig+0x51c>)
 800a21e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a222:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a224:	f7fc f9d0 	bl	80065c8 <HAL_GetTick>
 800a228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a22a:	e00b      	b.n	800a244 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a22c:	f7fc f9cc 	bl	80065c8 <HAL_GetTick>
 800a230:	4602      	mov	r2, r0
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	2b02      	cmp	r3, #2
 800a238:	d904      	bls.n	800a244 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e198      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
 800a23e:	bf00      	nop
 800a240:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a244:	4ba3      	ldr	r3, [pc, #652]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1ed      	bne.n	800a22c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 8081 	beq.w	800a360 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a25e:	4b9e      	ldr	r3, [pc, #632]	; (800a4d8 <HAL_RCC_OscConfig+0x7b4>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a9d      	ldr	r2, [pc, #628]	; (800a4d8 <HAL_RCC_OscConfig+0x7b4>)
 800a264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a26a:	f7fc f9ad 	bl	80065c8 <HAL_GetTick>
 800a26e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a270:	e008      	b.n	800a284 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a272:	f7fc f9a9 	bl	80065c8 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b64      	cmp	r3, #100	; 0x64
 800a27e:	d901      	bls.n	800a284 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e175      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a284:	4b94      	ldr	r3, [pc, #592]	; (800a4d8 <HAL_RCC_OscConfig+0x7b4>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0f0      	beq.n	800a272 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d106      	bne.n	800a2a6 <HAL_RCC_OscConfig+0x582>
 800a298:	4b8e      	ldr	r3, [pc, #568]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29c:	4a8d      	ldr	r2, [pc, #564]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a29e:	f043 0301 	orr.w	r3, r3, #1
 800a2a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a2a4:	e02d      	b.n	800a302 <HAL_RCC_OscConfig+0x5de>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10c      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x5a4>
 800a2ae:	4b89      	ldr	r3, [pc, #548]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b2:	4a88      	ldr	r2, [pc, #544]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2b4:	f023 0301 	bic.w	r3, r3, #1
 800a2b8:	6713      	str	r3, [r2, #112]	; 0x70
 800a2ba:	4b86      	ldr	r3, [pc, #536]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2be:	4a85      	ldr	r2, [pc, #532]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2c0:	f023 0304 	bic.w	r3, r3, #4
 800a2c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a2c6:	e01c      	b.n	800a302 <HAL_RCC_OscConfig+0x5de>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b05      	cmp	r3, #5
 800a2ce:	d10c      	bne.n	800a2ea <HAL_RCC_OscConfig+0x5c6>
 800a2d0:	4b80      	ldr	r3, [pc, #512]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d4:	4a7f      	ldr	r2, [pc, #508]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2d6:	f043 0304 	orr.w	r3, r3, #4
 800a2da:	6713      	str	r3, [r2, #112]	; 0x70
 800a2dc:	4b7d      	ldr	r3, [pc, #500]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e0:	4a7c      	ldr	r2, [pc, #496]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2e2:	f043 0301 	orr.w	r3, r3, #1
 800a2e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a2e8:	e00b      	b.n	800a302 <HAL_RCC_OscConfig+0x5de>
 800a2ea:	4b7a      	ldr	r3, [pc, #488]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ee:	4a79      	ldr	r2, [pc, #484]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a2f6:	4b77      	ldr	r3, [pc, #476]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fa:	4a76      	ldr	r2, [pc, #472]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a2fc:	f023 0304 	bic.w	r3, r3, #4
 800a300:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d015      	beq.n	800a336 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a30a:	f7fc f95d 	bl	80065c8 <HAL_GetTick>
 800a30e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a310:	e00a      	b.n	800a328 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a312:	f7fc f959 	bl	80065c8 <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a320:	4293      	cmp	r3, r2
 800a322:	d901      	bls.n	800a328 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e123      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a328:	4b6a      	ldr	r3, [pc, #424]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d0ee      	beq.n	800a312 <HAL_RCC_OscConfig+0x5ee>
 800a334:	e014      	b.n	800a360 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a336:	f7fc f947 	bl	80065c8 <HAL_GetTick>
 800a33a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a33c:	e00a      	b.n	800a354 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a33e:	f7fc f943 	bl	80065c8 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	f241 3288 	movw	r2, #5000	; 0x1388
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d901      	bls.n	800a354 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e10d      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a354:	4b5f      	ldr	r3, [pc, #380]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1ee      	bne.n	800a33e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8102 	beq.w	800a56e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a36a:	4b5a      	ldr	r3, [pc, #360]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a372:	2b18      	cmp	r3, #24
 800a374:	f000 80bd 	beq.w	800a4f2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	f040 8095 	bne.w	800a4ac <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a382:	4b54      	ldr	r3, [pc, #336]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a53      	ldr	r2, [pc, #332]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a38c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a38e:	f7fc f91b 	bl	80065c8 <HAL_GetTick>
 800a392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a394:	e008      	b.n	800a3a8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a396:	f7fc f917 	bl	80065c8 <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d901      	bls.n	800a3a8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e0e3      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3a8:	4b4a      	ldr	r3, [pc, #296]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f0      	bne.n	800a396 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3b4:	4b47      	ldr	r3, [pc, #284]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a3b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3b8:	4b48      	ldr	r3, [pc, #288]	; (800a4dc <HAL_RCC_OscConfig+0x7b8>)
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a3c4:	0112      	lsls	r2, r2, #4
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	4942      	ldr	r1, [pc, #264]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	628b      	str	r3, [r1, #40]	; 0x28
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	025b      	lsls	r3, r3, #9
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	041b      	lsls	r3, r3, #16
 800a3ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	061b      	lsls	r3, r3, #24
 800a3fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3fe:	4935      	ldr	r1, [pc, #212]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a400:	4313      	orrs	r3, r2
 800a402:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a404:	4b33      	ldr	r3, [pc, #204]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a32      	ldr	r2, [pc, #200]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a40a:	f023 0301 	bic.w	r3, r3, #1
 800a40e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a410:	4b30      	ldr	r3, [pc, #192]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a414:	4b32      	ldr	r3, [pc, #200]	; (800a4e0 <HAL_RCC_OscConfig+0x7bc>)
 800a416:	4013      	ands	r3, r2
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a41c:	00d2      	lsls	r2, r2, #3
 800a41e:	492d      	ldr	r1, [pc, #180]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a420:	4313      	orrs	r3, r2
 800a422:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a424:	4b2b      	ldr	r3, [pc, #172]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	f023 020c 	bic.w	r2, r3, #12
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a430:	4928      	ldr	r1, [pc, #160]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a432:	4313      	orrs	r3, r2
 800a434:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a436:	4b27      	ldr	r3, [pc, #156]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43a:	f023 0202 	bic.w	r2, r3, #2
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a442:	4924      	ldr	r1, [pc, #144]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a444:	4313      	orrs	r3, r2
 800a446:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a448:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	4a21      	ldr	r2, [pc, #132]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a44e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a454:	4b1f      	ldr	r3, [pc, #124]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	4a1e      	ldr	r2, [pc, #120]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a45a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a45e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a460:	4b1c      	ldr	r3, [pc, #112]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	4a1b      	ldr	r2, [pc, #108]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a46a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a46c:	4b19      	ldr	r3, [pc, #100]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	4a18      	ldr	r2, [pc, #96]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a478:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a15      	ldr	r2, [pc, #84]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a47e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a484:	f7fc f8a0 	bl	80065c8 <HAL_GetTick>
 800a488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a48a:	e008      	b.n	800a49e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a48c:	f7fc f89c 	bl	80065c8 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b02      	cmp	r3, #2
 800a498:	d901      	bls.n	800a49e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e068      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a49e:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f0      	beq.n	800a48c <HAL_RCC_OscConfig+0x768>
 800a4aa:	e060      	b.n	800a56e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ac:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <HAL_RCC_OscConfig+0x7b0>)
 800a4b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b8:	f7fc f886 	bl	80065c8 <HAL_GetTick>
 800a4bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4be:	e011      	b.n	800a4e4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4c0:	f7fc f882 	bl	80065c8 <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d90a      	bls.n	800a4e4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e04e      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
 800a4d2:	bf00      	nop
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	58024800 	.word	0x58024800
 800a4dc:	fffffc0c 	.word	0xfffffc0c
 800a4e0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4e4:	4b24      	ldr	r3, [pc, #144]	; (800a578 <HAL_RCC_OscConfig+0x854>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e7      	bne.n	800a4c0 <HAL_RCC_OscConfig+0x79c>
 800a4f0:	e03d      	b.n	800a56e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a4f2:	4b21      	ldr	r3, [pc, #132]	; (800a578 <HAL_RCC_OscConfig+0x854>)
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a4f8:	4b1f      	ldr	r3, [pc, #124]	; (800a578 <HAL_RCC_OscConfig+0x854>)
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a502:	2b01      	cmp	r3, #1
 800a504:	d031      	beq.n	800a56a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f003 0203 	and.w	r2, r3, #3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a510:	429a      	cmp	r2, r3
 800a512:	d12a      	bne.n	800a56a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	091b      	lsrs	r3, r3, #4
 800a518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a520:	429a      	cmp	r2, r3
 800a522:	d122      	bne.n	800a56a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a530:	429a      	cmp	r2, r3
 800a532:	d11a      	bne.n	800a56a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	0a5b      	lsrs	r3, r3, #9
 800a538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a540:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a542:	429a      	cmp	r2, r3
 800a544:	d111      	bne.n	800a56a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	0c1b      	lsrs	r3, r3, #16
 800a54a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a552:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a554:	429a      	cmp	r2, r3
 800a556:	d108      	bne.n	800a56a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	0e1b      	lsrs	r3, r3, #24
 800a55c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a564:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a566:	429a      	cmp	r2, r3
 800a568:	d001      	beq.n	800a56e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e000      	b.n	800a570 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3730      	adds	r7, #48	; 0x30
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	58024400 	.word	0x58024400

0800a57c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e19c      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a590:	4b8a      	ldr	r3, [pc, #552]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d910      	bls.n	800a5c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a59e:	4b87      	ldr	r3, [pc, #540]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f023 020f 	bic.w	r2, r3, #15
 800a5a6:	4985      	ldr	r1, [pc, #532]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ae:	4b83      	ldr	r3, [pc, #524]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d001      	beq.n	800a5c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e184      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d010      	beq.n	800a5ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	691a      	ldr	r2, [r3, #16]
 800a5d0:	4b7b      	ldr	r3, [pc, #492]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d908      	bls.n	800a5ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5dc:	4b78      	ldr	r3, [pc, #480]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	4975      	ldr	r1, [pc, #468]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0308 	and.w	r3, r3, #8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d010      	beq.n	800a61c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	695a      	ldr	r2, [r3, #20]
 800a5fe:	4b70      	ldr	r3, [pc, #448]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a606:	429a      	cmp	r2, r3
 800a608:	d908      	bls.n	800a61c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a60a:	4b6d      	ldr	r3, [pc, #436]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	496a      	ldr	r1, [pc, #424]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0310 	and.w	r3, r3, #16
 800a624:	2b00      	cmp	r3, #0
 800a626:	d010      	beq.n	800a64a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	699a      	ldr	r2, [r3, #24]
 800a62c:	4b64      	ldr	r3, [pc, #400]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a634:	429a      	cmp	r2, r3
 800a636:	d908      	bls.n	800a64a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a638:	4b61      	ldr	r3, [pc, #388]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	495e      	ldr	r1, [pc, #376]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a646:	4313      	orrs	r3, r2
 800a648:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d010      	beq.n	800a678 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	69da      	ldr	r2, [r3, #28]
 800a65a:	4b59      	ldr	r3, [pc, #356]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a662:	429a      	cmp	r2, r3
 800a664:	d908      	bls.n	800a678 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a666:	4b56      	ldr	r3, [pc, #344]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	4953      	ldr	r1, [pc, #332]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a674:	4313      	orrs	r3, r2
 800a676:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d010      	beq.n	800a6a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	4b4d      	ldr	r3, [pc, #308]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	429a      	cmp	r2, r3
 800a692:	d908      	bls.n	800a6a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a694:	4b4a      	ldr	r3, [pc, #296]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	f023 020f 	bic.w	r2, r3, #15
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	4947      	ldr	r1, [pc, #284]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d055      	beq.n	800a75e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a6b2:	4b43      	ldr	r3, [pc, #268]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	4940      	ldr	r1, [pc, #256]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d107      	bne.n	800a6dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6cc:	4b3c      	ldr	r3, [pc, #240]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d121      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0f6      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6e4:	4b36      	ldr	r3, [pc, #216]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d115      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e0ea      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d107      	bne.n	800a70c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6fc:	4b30      	ldr	r3, [pc, #192]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e0de      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a70c:	4b2c      	ldr	r3, [pc, #176]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e0d6      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a71c:	4b28      	ldr	r3, [pc, #160]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	f023 0207 	bic.w	r2, r3, #7
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	4925      	ldr	r1, [pc, #148]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a72e:	f7fb ff4b 	bl	80065c8 <HAL_GetTick>
 800a732:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a734:	e00a      	b.n	800a74c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a736:	f7fb ff47 	bl	80065c8 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	f241 3288 	movw	r2, #5000	; 0x1388
 800a744:	4293      	cmp	r3, r2
 800a746:	d901      	bls.n	800a74c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e0be      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a74c:	4b1c      	ldr	r3, [pc, #112]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d1eb      	bne.n	800a736 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d010      	beq.n	800a78c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	4b14      	ldr	r3, [pc, #80]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	429a      	cmp	r2, r3
 800a778:	d208      	bcs.n	800a78c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	f023 020f 	bic.w	r2, r3, #15
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	490e      	ldr	r1, [pc, #56]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a78c:	4b0b      	ldr	r3, [pc, #44]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d214      	bcs.n	800a7c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a79a:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f023 020f 	bic.w	r2, r3, #15
 800a7a2:	4906      	ldr	r1, [pc, #24]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d005      	beq.n	800a7c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e086      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
 800a7bc:	52002000 	.word	0x52002000
 800a7c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d010      	beq.n	800a7f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	4b3f      	ldr	r3, [pc, #252]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d208      	bcs.n	800a7f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7e0:	4b3c      	ldr	r3, [pc, #240]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	4939      	ldr	r1, [pc, #228]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d010      	beq.n	800a820 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695a      	ldr	r2, [r3, #20]
 800a802:	4b34      	ldr	r3, [pc, #208]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d208      	bcs.n	800a820 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a80e:	4b31      	ldr	r3, [pc, #196]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	492e      	ldr	r1, [pc, #184]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0310 	and.w	r3, r3, #16
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d010      	beq.n	800a84e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	699a      	ldr	r2, [r3, #24]
 800a830:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a838:	429a      	cmp	r2, r3
 800a83a:	d208      	bcs.n	800a84e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a83c:	4b25      	ldr	r3, [pc, #148]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	4922      	ldr	r1, [pc, #136]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d010      	beq.n	800a87c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	69da      	ldr	r2, [r3, #28]
 800a85e:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a866:	429a      	cmp	r2, r3
 800a868:	d208      	bcs.n	800a87c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a86a:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	4917      	ldr	r1, [pc, #92]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a87c:	f000 f834 	bl	800a8e8 <HAL_RCC_GetSysClockFreq>
 800a880:	4602      	mov	r2, r0
 800a882:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	0a1b      	lsrs	r3, r3, #8
 800a888:	f003 030f 	and.w	r3, r3, #15
 800a88c:	4912      	ldr	r1, [pc, #72]	; (800a8d8 <HAL_RCC_ClockConfig+0x35c>)
 800a88e:	5ccb      	ldrb	r3, [r1, r3]
 800a890:	f003 031f 	and.w	r3, r3, #31
 800a894:	fa22 f303 	lsr.w	r3, r2, r3
 800a898:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a89a:	4b0e      	ldr	r3, [pc, #56]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f003 030f 	and.w	r3, r3, #15
 800a8a2:	4a0d      	ldr	r2, [pc, #52]	; (800a8d8 <HAL_RCC_ClockConfig+0x35c>)
 800a8a4:	5cd3      	ldrb	r3, [r2, r3]
 800a8a6:	f003 031f 	and.w	r3, r3, #31
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <HAL_RCC_ClockConfig+0x360>)
 800a8b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8b4:	4a0a      	ldr	r2, [pc, #40]	; (800a8e0 <HAL_RCC_ClockConfig+0x364>)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a8ba:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <HAL_RCC_ClockConfig+0x368>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fb fe38 	bl	8006534 <HAL_InitTick>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	08014004 	.word	0x08014004
 800a8dc:	2400022c 	.word	0x2400022c
 800a8e0:	24000228 	.word	0x24000228
 800a8e4:	24000230 	.word	0x24000230

0800a8e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b089      	sub	sp, #36	; 0x24
 800a8ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8ee:	4bb3      	ldr	r3, [pc, #716]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8f6:	2b18      	cmp	r3, #24
 800a8f8:	f200 8155 	bhi.w	800aba6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a8fc:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a902:	bf00      	nop
 800a904:	0800a969 	.word	0x0800a969
 800a908:	0800aba7 	.word	0x0800aba7
 800a90c:	0800aba7 	.word	0x0800aba7
 800a910:	0800aba7 	.word	0x0800aba7
 800a914:	0800aba7 	.word	0x0800aba7
 800a918:	0800aba7 	.word	0x0800aba7
 800a91c:	0800aba7 	.word	0x0800aba7
 800a920:	0800aba7 	.word	0x0800aba7
 800a924:	0800a98f 	.word	0x0800a98f
 800a928:	0800aba7 	.word	0x0800aba7
 800a92c:	0800aba7 	.word	0x0800aba7
 800a930:	0800aba7 	.word	0x0800aba7
 800a934:	0800aba7 	.word	0x0800aba7
 800a938:	0800aba7 	.word	0x0800aba7
 800a93c:	0800aba7 	.word	0x0800aba7
 800a940:	0800aba7 	.word	0x0800aba7
 800a944:	0800a995 	.word	0x0800a995
 800a948:	0800aba7 	.word	0x0800aba7
 800a94c:	0800aba7 	.word	0x0800aba7
 800a950:	0800aba7 	.word	0x0800aba7
 800a954:	0800aba7 	.word	0x0800aba7
 800a958:	0800aba7 	.word	0x0800aba7
 800a95c:	0800aba7 	.word	0x0800aba7
 800a960:	0800aba7 	.word	0x0800aba7
 800a964:	0800a99b 	.word	0x0800a99b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a968:	4b94      	ldr	r3, [pc, #592]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0320 	and.w	r3, r3, #32
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a974:	4b91      	ldr	r3, [pc, #580]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	08db      	lsrs	r3, r3, #3
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	4a90      	ldr	r2, [pc, #576]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a980:	fa22 f303 	lsr.w	r3, r2, r3
 800a984:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a986:	e111      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a988:	4b8d      	ldr	r3, [pc, #564]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a98a:	61bb      	str	r3, [r7, #24]
    break;
 800a98c:	e10e      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a98e:	4b8d      	ldr	r3, [pc, #564]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a990:	61bb      	str	r3, [r7, #24]
    break;
 800a992:	e10b      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a994:	4b8c      	ldr	r3, [pc, #560]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a996:	61bb      	str	r3, [r7, #24]
    break;
 800a998:	e108      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a99a:	4b88      	ldr	r3, [pc, #544]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	f003 0303 	and.w	r3, r3, #3
 800a9a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a9a4:	4b85      	ldr	r3, [pc, #532]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	091b      	lsrs	r3, r3, #4
 800a9aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a9b0:	4b82      	ldr	r3, [pc, #520]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a9ba:	4b80      	ldr	r3, [pc, #512]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9be:	08db      	lsrs	r3, r3, #3
 800a9c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80e1 	beq.w	800aba0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	f000 8083 	beq.w	800aaec <HAL_RCC_GetSysClockFreq+0x204>
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	f200 80a1 	bhi.w	800ab30 <HAL_RCC_GetSysClockFreq+0x248>
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <HAL_RCC_GetSysClockFreq+0x114>
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d056      	beq.n	800aaa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9fa:	e099      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9fc:	4b6f      	ldr	r3, [pc, #444]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d02d      	beq.n	800aa64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa08:	4b6c      	ldr	r3, [pc, #432]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	08db      	lsrs	r3, r3, #3
 800aa0e:	f003 0303 	and.w	r3, r3, #3
 800aa12:	4a6b      	ldr	r2, [pc, #428]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
 800aa18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	ee07 3a90 	vmov	s15, r3
 800aa20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa32:	4b62      	ldr	r3, [pc, #392]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa42:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa46:	eddf 5a61 	vldr	s11, [pc, #388]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800aa62:	e087      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800abd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa76:	4b51      	ldr	r3, [pc, #324]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa86:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaa6:	e065      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaba:	4b40      	ldr	r3, [pc, #256]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaca:	ed97 6a02 	vldr	s12, [r7, #8]
 800aace:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaea:	e043      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafe:	4b2f      	ldr	r3, [pc, #188]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab2e:	e021      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab42:	4b1e      	ldr	r3, [pc, #120]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ab74:	4b11      	ldr	r3, [pc, #68]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	0a5b      	lsrs	r3, r3, #9
 800ab7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7e:	3301      	adds	r3, #1
 800ab80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	ee07 3a90 	vmov	s15, r3
 800ab88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab98:	ee17 3a90 	vmov	r3, s15
 800ab9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ab9e:	e005      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61bb      	str	r3, [r7, #24]
    break;
 800aba4:	e002      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800aba6:	4b07      	ldr	r3, [pc, #28]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aba8:	61bb      	str	r3, [r7, #24]
    break;
 800abaa:	bf00      	nop
  }

  return sysclockfreq;
 800abac:	69bb      	ldr	r3, [r7, #24]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3724      	adds	r7, #36	; 0x24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	58024400 	.word	0x58024400
 800abc0:	03d09000 	.word	0x03d09000
 800abc4:	003d0900 	.word	0x003d0900
 800abc8:	02dc6c00 	.word	0x02dc6c00
 800abcc:	46000000 	.word	0x46000000
 800abd0:	4c742400 	.word	0x4c742400
 800abd4:	4a742400 	.word	0x4a742400
 800abd8:	4c371b00 	.word	0x4c371b00

0800abdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abe2:	f7ff fe81 	bl	800a8e8 <HAL_RCC_GetSysClockFreq>
 800abe6:	4602      	mov	r2, r0
 800abe8:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <HAL_RCC_GetHCLKFreq+0x50>)
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	0a1b      	lsrs	r3, r3, #8
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	490f      	ldr	r1, [pc, #60]	; (800ac30 <HAL_RCC_GetHCLKFreq+0x54>)
 800abf4:	5ccb      	ldrb	r3, [r1, r3]
 800abf6:	f003 031f 	and.w	r3, r3, #31
 800abfa:	fa22 f303 	lsr.w	r3, r2, r3
 800abfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <HAL_RCC_GetHCLKFreq+0x50>)
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	f003 030f 	and.w	r3, r3, #15
 800ac08:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac0a:	5cd3      	ldrb	r3, [r2, r3]
 800ac0c:	f003 031f 	and.w	r3, r3, #31
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	fa22 f303 	lsr.w	r3, r2, r3
 800ac16:	4a07      	ldr	r2, [pc, #28]	; (800ac34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac1a:	4a07      	ldr	r2, [pc, #28]	; (800ac38 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ac20:	4b04      	ldr	r3, [pc, #16]	; (800ac34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac22:	681b      	ldr	r3, [r3, #0]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	58024400 	.word	0x58024400
 800ac30:	08014004 	.word	0x08014004
 800ac34:	2400022c 	.word	0x2400022c
 800ac38:	24000228 	.word	0x24000228

0800ac3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac40:	f7ff ffcc 	bl	800abdc <HAL_RCC_GetHCLKFreq>
 800ac44:	4602      	mov	r2, r0
 800ac46:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	091b      	lsrs	r3, r3, #4
 800ac4c:	f003 0307 	and.w	r3, r3, #7
 800ac50:	4904      	ldr	r1, [pc, #16]	; (800ac64 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac52:	5ccb      	ldrb	r3, [r1, r3]
 800ac54:	f003 031f 	and.w	r3, r3, #31
 800ac58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	58024400 	.word	0x58024400
 800ac64:	08014004 	.word	0x08014004

0800ac68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac6c:	f7ff ffb6 	bl	800abdc <HAL_RCC_GetHCLKFreq>
 800ac70:	4602      	mov	r2, r0
 800ac72:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	4904      	ldr	r1, [pc, #16]	; (800ac90 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac7e:	5ccb      	ldrb	r3, [r1, r3]
 800ac80:	f003 031f 	and.w	r3, r3, #31
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	58024400 	.word	0x58024400
 800ac90:	08014004 	.word	0x08014004

0800ac94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aca0:	2300      	movs	r3, #0
 800aca2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d03f      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acb8:	d02a      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800acba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acbe:	d824      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800acc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acc4:	d018      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800acc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acca:	d81e      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800acd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acd4:	d007      	beq.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800acd6:	e018      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acd8:	4bab      	ldr	r3, [pc, #684]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	4aaa      	ldr	r2, [pc, #680]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ace2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ace4:	e015      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	2102      	movs	r1, #2
 800acec:	4618      	mov	r0, r3
 800acee:	f001 f9cf 	bl	800c090 <RCCEx_PLL2_Config>
 800acf2:	4603      	mov	r3, r0
 800acf4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800acf6:	e00c      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3324      	adds	r3, #36	; 0x24
 800acfc:	2102      	movs	r1, #2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f001 fa78 	bl	800c1f4 <RCCEx_PLL3_Config>
 800ad04:	4603      	mov	r3, r0
 800ad06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad08:	e003      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad0e:	e000      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ad10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad18:	4b9b      	ldr	r3, [pc, #620]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad24:	4998      	ldr	r1, [pc, #608]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	650b      	str	r3, [r1, #80]	; 0x50
 800ad2a:	e001      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d03d      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d826      	bhi.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ad44:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ad46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4a:	bf00      	nop
 800ad4c:	0800ad61 	.word	0x0800ad61
 800ad50:	0800ad6f 	.word	0x0800ad6f
 800ad54:	0800ad81 	.word	0x0800ad81
 800ad58:	0800ad99 	.word	0x0800ad99
 800ad5c:	0800ad99 	.word	0x0800ad99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad60:	4b89      	ldr	r3, [pc, #548]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	4a88      	ldr	r2, [pc, #544]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad6c:	e015      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3304      	adds	r3, #4
 800ad72:	2100      	movs	r1, #0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f001 f98b 	bl	800c090 <RCCEx_PLL2_Config>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad7e:	e00c      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3324      	adds	r3, #36	; 0x24
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 fa34 	bl	800c1f4 <RCCEx_PLL3_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad90:	e003      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	75fb      	strb	r3, [r7, #23]
      break;
 800ad96:	e000      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ad98:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d109      	bne.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ada0:	4b79      	ldr	r3, [pc, #484]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ada2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada4:	f023 0207 	bic.w	r2, r3, #7
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adac:	4976      	ldr	r1, [pc, #472]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	650b      	str	r3, [r1, #80]	; 0x50
 800adb2:	e001      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d042      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adcc:	d02b      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800adce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add2:	d825      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800add4:	2bc0      	cmp	r3, #192	; 0xc0
 800add6:	d028      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800add8:	2bc0      	cmp	r3, #192	; 0xc0
 800adda:	d821      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800addc:	2b80      	cmp	r3, #128	; 0x80
 800adde:	d016      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ade0:	2b80      	cmp	r3, #128	; 0x80
 800ade2:	d81d      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	d007      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800adec:	e018      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adee:	4b66      	ldr	r3, [pc, #408]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf2:	4a65      	ldr	r2, [pc, #404]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800adfa:	e017      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3304      	adds	r3, #4
 800ae00:	2100      	movs	r1, #0
 800ae02:	4618      	mov	r0, r3
 800ae04:	f001 f944 	bl	800c090 <RCCEx_PLL2_Config>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ae0c:	e00e      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	3324      	adds	r3, #36	; 0x24
 800ae12:	2100      	movs	r1, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 f9ed 	bl	800c1f4 <RCCEx_PLL3_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ae1e:	e005      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	75fb      	strb	r3, [r7, #23]
      break;
 800ae24:	e002      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ae26:	bf00      	nop
 800ae28:	e000      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ae2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d109      	bne.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ae32:	4b55      	ldr	r3, [pc, #340]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3e:	4952      	ldr	r1, [pc, #328]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae40:	4313      	orrs	r3, r2
 800ae42:	650b      	str	r3, [r1, #80]	; 0x50
 800ae44:	e001      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d049      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae60:	d030      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ae62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae66:	d82a      	bhi.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae6c:	d02c      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ae6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae72:	d824      	bhi.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae78:	d018      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ae7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae7e:	d81e      	bhi.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ae84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae88:	d007      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae8a:	e018      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae8c:	4b3e      	ldr	r3, [pc, #248]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae90:	4a3d      	ldr	r2, [pc, #244]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae98:	e017      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4618      	mov	r0, r3
 800aea2:	f001 f8f5 	bl	800c090 <RCCEx_PLL2_Config>
 800aea6:	4603      	mov	r3, r0
 800aea8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aeaa:	e00e      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3324      	adds	r3, #36	; 0x24
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 f99e 	bl	800c1f4 <RCCEx_PLL3_Config>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aebc:	e005      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	75fb      	strb	r3, [r7, #23]
      break;
 800aec2:	e002      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aec4:	bf00      	nop
 800aec6:	e000      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aed0:	4b2d      	ldr	r3, [pc, #180]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aede:	492a      	ldr	r1, [pc, #168]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	658b      	str	r3, [r1, #88]	; 0x58
 800aee4:	e001      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d04c      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aefc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af00:	d030      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800af02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af06:	d82a      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800af08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af0c:	d02c      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800af0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af12:	d824      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800af14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af18:	d018      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800af1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af1e:	d81e      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d003      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800af24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af28:	d007      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800af2a:	e018      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af2c:	4b16      	ldr	r3, [pc, #88]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	4a15      	ldr	r2, [pc, #84]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af38:	e017      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3304      	adds	r3, #4
 800af3e:	2100      	movs	r1, #0
 800af40:	4618      	mov	r0, r3
 800af42:	f001 f8a5 	bl	800c090 <RCCEx_PLL2_Config>
 800af46:	4603      	mov	r3, r0
 800af48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af4a:	e00e      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3324      	adds	r3, #36	; 0x24
 800af50:	2100      	movs	r1, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f001 f94e 	bl	800c1f4 <RCCEx_PLL3_Config>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af5c:	e005      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	75fb      	strb	r3, [r7, #23]
      break;
 800af62:	e002      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800af64:	bf00      	nop
 800af66:	e000      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800af68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10d      	bne.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af7e:	4902      	ldr	r1, [pc, #8]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af80:	4313      	orrs	r3, r2
 800af82:	658b      	str	r3, [r1, #88]	; 0x58
 800af84:	e004      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800af86:	bf00      	nop
 800af88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
 800af8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d032      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa0:	2b30      	cmp	r3, #48	; 0x30
 800afa2:	d01c      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800afa4:	2b30      	cmp	r3, #48	; 0x30
 800afa6:	d817      	bhi.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800afa8:	2b20      	cmp	r3, #32
 800afaa:	d00c      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800afac:	2b20      	cmp	r3, #32
 800afae:	d813      	bhi.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d016      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800afb4:	2b10      	cmp	r3, #16
 800afb6:	d10f      	bne.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afb8:	4baf      	ldr	r3, [pc, #700]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	4aae      	ldr	r2, [pc, #696]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800afc4:	e00e      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3304      	adds	r3, #4
 800afca:	2102      	movs	r1, #2
 800afcc:	4618      	mov	r0, r3
 800afce:	f001 f85f 	bl	800c090 <RCCEx_PLL2_Config>
 800afd2:	4603      	mov	r3, r0
 800afd4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800afd6:	e005      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	75fb      	strb	r3, [r7, #23]
      break;
 800afdc:	e002      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800afde:	bf00      	nop
 800afe0:	e000      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800afe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d109      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800afea:	4ba3      	ldr	r3, [pc, #652]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aff6:	49a0      	ldr	r1, [pc, #640]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aff8:	4313      	orrs	r3, r2
 800affa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800affc:	e001      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d047      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b016:	d030      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b01c:	d82a      	bhi.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b01e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b022:	d02c      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b028:	d824      	bhi.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b02a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b02e:	d018      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b034:	d81e      	bhi.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b03e:	d007      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b040:	e018      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b042:	4b8d      	ldr	r3, [pc, #564]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	4a8c      	ldr	r2, [pc, #560]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b04c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b04e:	e017      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3304      	adds	r3, #4
 800b054:	2100      	movs	r1, #0
 800b056:	4618      	mov	r0, r3
 800b058:	f001 f81a 	bl	800c090 <RCCEx_PLL2_Config>
 800b05c:	4603      	mov	r3, r0
 800b05e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b060:	e00e      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3324      	adds	r3, #36	; 0x24
 800b066:	2100      	movs	r1, #0
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 f8c3 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b06e:	4603      	mov	r3, r0
 800b070:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b072:	e005      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	75fb      	strb	r3, [r7, #23]
      break;
 800b078:	e002      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b07a:	bf00      	nop
 800b07c:	e000      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b07e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d109      	bne.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b086:	4b7c      	ldr	r3, [pc, #496]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b092:	4979      	ldr	r1, [pc, #484]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b094:	4313      	orrs	r3, r2
 800b096:	650b      	str	r3, [r1, #80]	; 0x50
 800b098:	e001      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d049      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0b2:	d02e      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b0b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0b8:	d828      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b0ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0be:	d02a      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b0c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0c4:	d822      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b0c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0ca:	d026      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b0cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0d0:	d81c      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b0d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0d6:	d010      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b0d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0dc:	d816      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d01d      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b0e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e6:	d111      	bne.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	2101      	movs	r1, #1
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 ffce 	bl	800c090 <RCCEx_PLL2_Config>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b0f8:	e012      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3324      	adds	r3, #36	; 0x24
 800b0fe:	2101      	movs	r1, #1
 800b100:	4618      	mov	r0, r3
 800b102:	f001 f877 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b106:	4603      	mov	r3, r0
 800b108:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b10a:	e009      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	75fb      	strb	r3, [r7, #23]
      break;
 800b110:	e006      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b112:	bf00      	nop
 800b114:	e004      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b116:	bf00      	nop
 800b118:	e002      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b11a:	bf00      	nop
 800b11c:	e000      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b11e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b120:	7dfb      	ldrb	r3, [r7, #23]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d109      	bne.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b126:	4b54      	ldr	r3, [pc, #336]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b12a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b132:	4951      	ldr	r1, [pc, #324]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b134:	4313      	orrs	r3, r2
 800b136:	650b      	str	r3, [r1, #80]	; 0x50
 800b138:	e001      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13a:	7dfb      	ldrb	r3, [r7, #23]
 800b13c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b146:	2b00      	cmp	r3, #0
 800b148:	d04b      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b154:	d02e      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b15a:	d828      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b15c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b160:	d02a      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b166:	d822      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b168:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b16c:	d026      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b16e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b172:	d81c      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b178:	d010      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b17a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b17e:	d816      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b180:	2b00      	cmp	r3, #0
 800b182:	d01d      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b188:	d111      	bne.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3304      	adds	r3, #4
 800b18e:	2101      	movs	r1, #1
 800b190:	4618      	mov	r0, r3
 800b192:	f000 ff7d 	bl	800c090 <RCCEx_PLL2_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b19a:	e012      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3324      	adds	r3, #36	; 0x24
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f001 f826 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b1ac:	e009      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b1b2:	e006      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b1b4:	bf00      	nop
 800b1b6:	e004      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b1b8:	bf00      	nop
 800b1ba:	e002      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b1bc:	bf00      	nop
 800b1be:	e000      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b1c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b1c8:	4b2b      	ldr	r3, [pc, #172]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1d6:	4928      	ldr	r1, [pc, #160]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	658b      	str	r3, [r1, #88]	; 0x58
 800b1dc:	e001      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1de:	7dfb      	ldrb	r3, [r7, #23]
 800b1e0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d02f      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1f6:	d00e      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b1f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1fc:	d814      	bhi.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d015      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b206:	d10f      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b208:	4b1b      	ldr	r3, [pc, #108]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20c:	4a1a      	ldr	r2, [pc, #104]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b20e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b214:	e00c      	b.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3304      	adds	r3, #4
 800b21a:	2101      	movs	r1, #1
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 ff37 	bl	800c090 <RCCEx_PLL2_Config>
 800b222:	4603      	mov	r3, r0
 800b224:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b226:	e003      	b.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	75fb      	strb	r3, [r7, #23]
      break;
 800b22c:	e000      	b.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b22e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b230:	7dfb      	ldrb	r3, [r7, #23]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d109      	bne.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b236:	4b10      	ldr	r3, [pc, #64]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b242:	490d      	ldr	r1, [pc, #52]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b244:	4313      	orrs	r3, r2
 800b246:	650b      	str	r3, [r1, #80]	; 0x50
 800b248:	e001      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
 800b24c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d033      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d81c      	bhi.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b262:	a201      	add	r2, pc, #4	; (adr r2, 800b268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b268:	0800b2a3 	.word	0x0800b2a3
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b28b 	.word	0x0800b28b
 800b274:	0800b2a3 	.word	0x0800b2a3
 800b278:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b27c:	4bb8      	ldr	r3, [pc, #736]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	4ab7      	ldr	r2, [pc, #732]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b288:	e00c      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3304      	adds	r3, #4
 800b28e:	2102      	movs	r1, #2
 800b290:	4618      	mov	r0, r3
 800b292:	f000 fefd 	bl	800c090 <RCCEx_PLL2_Config>
 800b296:	4603      	mov	r3, r0
 800b298:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b29a:	e003      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a0:	e000      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b2a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b2aa:	4bad      	ldr	r3, [pc, #692]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ae:	f023 0203 	bic.w	r2, r3, #3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b6:	49aa      	ldr	r1, [pc, #680]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b2bc:	e001      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 8086 	beq.w	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2d0:	4ba4      	ldr	r3, [pc, #656]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4aa3      	ldr	r2, [pc, #652]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b2d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2dc:	f7fb f974 	bl	80065c8 <HAL_GetTick>
 800b2e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2e2:	e009      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2e4:	f7fb f970 	bl	80065c8 <HAL_GetTick>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	2b64      	cmp	r3, #100	; 0x64
 800b2f0:	d902      	bls.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	75fb      	strb	r3, [r7, #23]
        break;
 800b2f6:	e005      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2f8:	4b9a      	ldr	r3, [pc, #616]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b300:	2b00      	cmp	r3, #0
 800b302:	d0ef      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d166      	bne.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b30a:	4b95      	ldr	r3, [pc, #596]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b30c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b314:	4053      	eors	r3, r2
 800b316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d013      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b31e:	4b90      	ldr	r3, [pc, #576]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b326:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b328:	4b8d      	ldr	r3, [pc, #564]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32c:	4a8c      	ldr	r2, [pc, #560]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b32e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b332:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b334:	4b8a      	ldr	r3, [pc, #552]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b338:	4a89      	ldr	r2, [pc, #548]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b33a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b33e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b340:	4a87      	ldr	r2, [pc, #540]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b34c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b350:	d115      	bne.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b352:	f7fb f939 	bl	80065c8 <HAL_GetTick>
 800b356:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b358:	e00b      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b35a:	f7fb f935 	bl	80065c8 <HAL_GetTick>
 800b35e:	4602      	mov	r2, r0
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	f241 3288 	movw	r2, #5000	; 0x1388
 800b368:	4293      	cmp	r3, r2
 800b36a:	d902      	bls.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b36c:	2303      	movs	r3, #3
 800b36e:	75fb      	strb	r3, [r7, #23]
            break;
 800b370:	e005      	b.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b372:	4b7b      	ldr	r3, [pc, #492]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b376:	f003 0302 	and.w	r3, r3, #2
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0ed      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d126      	bne.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b38a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b38e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b392:	d10d      	bne.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b394:	4b72      	ldr	r3, [pc, #456]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3a2:	0919      	lsrs	r1, r3, #4
 800b3a4:	4b70      	ldr	r3, [pc, #448]	; (800b568 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b3a6:	400b      	ands	r3, r1
 800b3a8:	496d      	ldr	r1, [pc, #436]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	610b      	str	r3, [r1, #16]
 800b3ae:	e005      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b3b0:	4b6b      	ldr	r3, [pc, #428]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	4a6a      	ldr	r2, [pc, #424]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3ba:	6113      	str	r3, [r2, #16]
 800b3bc:	4b68      	ldr	r3, [pc, #416]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3ca:	4965      	ldr	r1, [pc, #404]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	670b      	str	r3, [r1, #112]	; 0x70
 800b3d0:	e004      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	75bb      	strb	r3, [r7, #22]
 800b3d6:	e001      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
 800b3da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d07e      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ec:	2b28      	cmp	r3, #40	; 0x28
 800b3ee:	d867      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b3f0:	a201      	add	r2, pc, #4	; (adr r2, 800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f6:	bf00      	nop
 800b3f8:	0800b4c7 	.word	0x0800b4c7
 800b3fc:	0800b4c1 	.word	0x0800b4c1
 800b400:	0800b4c1 	.word	0x0800b4c1
 800b404:	0800b4c1 	.word	0x0800b4c1
 800b408:	0800b4c1 	.word	0x0800b4c1
 800b40c:	0800b4c1 	.word	0x0800b4c1
 800b410:	0800b4c1 	.word	0x0800b4c1
 800b414:	0800b4c1 	.word	0x0800b4c1
 800b418:	0800b49d 	.word	0x0800b49d
 800b41c:	0800b4c1 	.word	0x0800b4c1
 800b420:	0800b4c1 	.word	0x0800b4c1
 800b424:	0800b4c1 	.word	0x0800b4c1
 800b428:	0800b4c1 	.word	0x0800b4c1
 800b42c:	0800b4c1 	.word	0x0800b4c1
 800b430:	0800b4c1 	.word	0x0800b4c1
 800b434:	0800b4c1 	.word	0x0800b4c1
 800b438:	0800b4af 	.word	0x0800b4af
 800b43c:	0800b4c1 	.word	0x0800b4c1
 800b440:	0800b4c1 	.word	0x0800b4c1
 800b444:	0800b4c1 	.word	0x0800b4c1
 800b448:	0800b4c1 	.word	0x0800b4c1
 800b44c:	0800b4c1 	.word	0x0800b4c1
 800b450:	0800b4c1 	.word	0x0800b4c1
 800b454:	0800b4c1 	.word	0x0800b4c1
 800b458:	0800b4c7 	.word	0x0800b4c7
 800b45c:	0800b4c1 	.word	0x0800b4c1
 800b460:	0800b4c1 	.word	0x0800b4c1
 800b464:	0800b4c1 	.word	0x0800b4c1
 800b468:	0800b4c1 	.word	0x0800b4c1
 800b46c:	0800b4c1 	.word	0x0800b4c1
 800b470:	0800b4c1 	.word	0x0800b4c1
 800b474:	0800b4c1 	.word	0x0800b4c1
 800b478:	0800b4c7 	.word	0x0800b4c7
 800b47c:	0800b4c1 	.word	0x0800b4c1
 800b480:	0800b4c1 	.word	0x0800b4c1
 800b484:	0800b4c1 	.word	0x0800b4c1
 800b488:	0800b4c1 	.word	0x0800b4c1
 800b48c:	0800b4c1 	.word	0x0800b4c1
 800b490:	0800b4c1 	.word	0x0800b4c1
 800b494:	0800b4c1 	.word	0x0800b4c1
 800b498:	0800b4c7 	.word	0x0800b4c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 fdf4 	bl	800c090 <RCCEx_PLL2_Config>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b4ac:	e00c      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3324      	adds	r3, #36	; 0x24
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fe9d 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b4be:	e003      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c4:	e000      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b4c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4c8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d109      	bne.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b4ce:	4b24      	ldr	r3, [pc, #144]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4da:	4921      	ldr	r1, [pc, #132]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	654b      	str	r3, [r1, #84]	; 0x54
 800b4e0:	e001      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d03e      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4f6:	2b05      	cmp	r3, #5
 800b4f8:	d820      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b4fa:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b500:	0800b543 	.word	0x0800b543
 800b504:	0800b519 	.word	0x0800b519
 800b508:	0800b52b 	.word	0x0800b52b
 800b50c:	0800b543 	.word	0x0800b543
 800b510:	0800b543 	.word	0x0800b543
 800b514:	0800b543 	.word	0x0800b543
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3304      	adds	r3, #4
 800b51c:	2101      	movs	r1, #1
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fdb6 	bl	800c090 <RCCEx_PLL2_Config>
 800b524:	4603      	mov	r3, r0
 800b526:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b528:	e00c      	b.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3324      	adds	r3, #36	; 0x24
 800b52e:	2101      	movs	r1, #1
 800b530:	4618      	mov	r0, r3
 800b532:	f000 fe5f 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b53a:	e003      	b.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	75fb      	strb	r3, [r7, #23]
      break;
 800b540:	e000      	b.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b542:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b544:	7dfb      	ldrb	r3, [r7, #23]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d110      	bne.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b54a:	4b05      	ldr	r3, [pc, #20]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54e:	f023 0207 	bic.w	r2, r3, #7
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b556:	4902      	ldr	r1, [pc, #8]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b558:	4313      	orrs	r3, r2
 800b55a:	654b      	str	r3, [r1, #84]	; 0x54
 800b55c:	e008      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b55e:	bf00      	nop
 800b560:	58024400 	.word	0x58024400
 800b564:	58024800 	.word	0x58024800
 800b568:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d039      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b582:	2b05      	cmp	r3, #5
 800b584:	d820      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b586:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58c:	0800b5cf 	.word	0x0800b5cf
 800b590:	0800b5a5 	.word	0x0800b5a5
 800b594:	0800b5b7 	.word	0x0800b5b7
 800b598:	0800b5cf 	.word	0x0800b5cf
 800b59c:	0800b5cf 	.word	0x0800b5cf
 800b5a0:	0800b5cf 	.word	0x0800b5cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 fd70 	bl	800c090 <RCCEx_PLL2_Config>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b5b4:	e00c      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3324      	adds	r3, #36	; 0x24
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 fe19 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b5c6:	e003      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b5cc:	e000      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b5ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10a      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5d6:	4bb7      	ldr	r3, [pc, #732]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5da:	f023 0207 	bic.w	r2, r3, #7
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e4:	49b3      	ldr	r1, [pc, #716]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	658b      	str	r3, [r1, #88]	; 0x58
 800b5ea:	e001      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0320 	and.w	r3, r3, #32
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d04b      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b606:	d02e      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b60c:	d828      	bhi.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b612:	d02a      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b618:	d822      	bhi.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b61a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b61e:	d026      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b624:	d81c      	bhi.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b62a:	d010      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b62c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b630:	d816      	bhi.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d01d      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b63a:	d111      	bne.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3304      	adds	r3, #4
 800b640:	2100      	movs	r1, #0
 800b642:	4618      	mov	r0, r3
 800b644:	f000 fd24 	bl	800c090 <RCCEx_PLL2_Config>
 800b648:	4603      	mov	r3, r0
 800b64a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b64c:	e012      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3324      	adds	r3, #36	; 0x24
 800b652:	2102      	movs	r1, #2
 800b654:	4618      	mov	r0, r3
 800b656:	f000 fdcd 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b65a:	4603      	mov	r3, r0
 800b65c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b65e:	e009      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	75fb      	strb	r3, [r7, #23]
      break;
 800b664:	e006      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b666:	bf00      	nop
 800b668:	e004      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b66a:	bf00      	nop
 800b66c:	e002      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b66e:	bf00      	nop
 800b670:	e000      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b672:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b674:	7dfb      	ldrb	r3, [r7, #23]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10a      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b67a:	4b8e      	ldr	r3, [pc, #568]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b67e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b688:	498a      	ldr	r1, [pc, #552]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	654b      	str	r3, [r1, #84]	; 0x54
 800b68e:	e001      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d04b      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6aa:	d02e      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b6ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6b0:	d828      	bhi.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b6:	d02a      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b6b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6bc:	d822      	bhi.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b6be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6c2:	d026      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b6c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6c8:	d81c      	bhi.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b6ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6ce:	d010      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b6d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d4:	d816      	bhi.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d01d      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b6da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6de:	d111      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 fcd2 	bl	800c090 <RCCEx_PLL2_Config>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b6f0:	e012      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	3324      	adds	r3, #36	; 0x24
 800b6f6:	2102      	movs	r1, #2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fd7b 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b6fe:	4603      	mov	r3, r0
 800b700:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b702:	e009      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	75fb      	strb	r3, [r7, #23]
      break;
 800b708:	e006      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b70a:	bf00      	nop
 800b70c:	e004      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b70e:	bf00      	nop
 800b710:	e002      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b712:	bf00      	nop
 800b714:	e000      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b716:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b71e:	4b65      	ldr	r3, [pc, #404]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b722:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b72c:	4961      	ldr	r1, [pc, #388]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b72e:	4313      	orrs	r3, r2
 800b730:	658b      	str	r3, [r1, #88]	; 0x58
 800b732:	e001      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b734:	7dfb      	ldrb	r3, [r7, #23]
 800b736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b740:	2b00      	cmp	r3, #0
 800b742:	d04b      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b74a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b74e:	d02e      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b750:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b754:	d828      	bhi.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b75a:	d02a      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b75c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b760:	d822      	bhi.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b762:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b766:	d026      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b768:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b76c:	d81c      	bhi.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b76e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b772:	d010      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b778:	d816      	bhi.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01d      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b77e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b782:	d111      	bne.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3304      	adds	r3, #4
 800b788:	2100      	movs	r1, #0
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fc80 	bl	800c090 <RCCEx_PLL2_Config>
 800b790:	4603      	mov	r3, r0
 800b792:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b794:	e012      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3324      	adds	r3, #36	; 0x24
 800b79a:	2102      	movs	r1, #2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 fd29 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b7a6:	e009      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ac:	e006      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b7ae:	bf00      	nop
 800b7b0:	e004      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b7b2:	bf00      	nop
 800b7b4:	e002      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b7b6:	bf00      	nop
 800b7b8:	e000      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b7ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10a      	bne.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7c2:	4b3c      	ldr	r3, [pc, #240]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7d0:	4938      	ldr	r1, [pc, #224]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	658b      	str	r3, [r1, #88]	; 0x58
 800b7d6:	e001      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0308 	and.w	r3, r3, #8
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d01a      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f2:	d10a      	bne.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3324      	adds	r3, #36	; 0x24
 800b7f8:	2102      	movs	r1, #2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 fcfa 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b80a:	4b2a      	ldr	r3, [pc, #168]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b80e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b818:	4926      	ldr	r1, [pc, #152]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0310 	and.w	r3, r3, #16
 800b826:	2b00      	cmp	r3, #0
 800b828:	d01a      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b834:	d10a      	bne.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3324      	adds	r3, #36	; 0x24
 800b83a:	2102      	movs	r1, #2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 fcd9 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b84c:	4b19      	ldr	r3, [pc, #100]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b85a:	4916      	ldr	r1, [pc, #88]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b85c:	4313      	orrs	r3, r2
 800b85e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d036      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b876:	d01f      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b87c:	d817      	bhi.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b886:	d009      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b888:	e011      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	3304      	adds	r3, #4
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fbfd 	bl	800c090 <RCCEx_PLL2_Config>
 800b896:	4603      	mov	r3, r0
 800b898:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b89a:	e00e      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	3324      	adds	r3, #36	; 0x24
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fca6 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b8ac:	e005      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8b2:	e002      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b8b4:	58024400 	.word	0x58024400
      break;
 800b8b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8c0:	4b93      	ldr	r3, [pc, #588]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b8ce:	4990      	ldr	r1, [pc, #576]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	658b      	str	r3, [r1, #88]	; 0x58
 800b8d4:	e001      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d033      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8f0:	d01c      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b8f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8f6:	d816      	bhi.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b8f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8fc:	d003      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b8fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b902:	d007      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b904:	e00f      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b906:	4b82      	ldr	r3, [pc, #520]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90a:	4a81      	ldr	r2, [pc, #516]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b90c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b912:	e00c      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3324      	adds	r3, #36	; 0x24
 800b918:	2101      	movs	r1, #1
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 fc6a 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b920:	4603      	mov	r3, r0
 800b922:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b924:	e003      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	75fb      	strb	r3, [r7, #23]
      break;
 800b92a:	e000      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b92c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b934:	4b76      	ldr	r3, [pc, #472]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b942:	4973      	ldr	r1, [pc, #460]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b944:	4313      	orrs	r3, r2
 800b946:	654b      	str	r3, [r1, #84]	; 0x54
 800b948:	e001      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d029      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b966:	d007      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b968:	e00f      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b96a:	4b69      	ldr	r3, [pc, #420]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96e:	4a68      	ldr	r2, [pc, #416]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b976:	e00b      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3304      	adds	r3, #4
 800b97c:	2102      	movs	r1, #2
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 fb86 	bl	800c090 <RCCEx_PLL2_Config>
 800b984:	4603      	mov	r3, r0
 800b986:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b988:	e002      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	75fb      	strb	r3, [r7, #23]
      break;
 800b98e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b990:	7dfb      	ldrb	r3, [r7, #23]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d109      	bne.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b996:	4b5e      	ldr	r3, [pc, #376]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b99a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9a2:	495b      	ldr	r1, [pc, #364]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b9a8:	e001      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3324      	adds	r3, #36	; 0x24
 800b9be:	2102      	movs	r1, #2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 fc17 	bl	800c1f4 <RCCEx_PLL3_Config>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d030      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9e4:	d017      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b9e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9ea:	d811      	bhi.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f0:	d013      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b9f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f6:	d80b      	bhi.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d010      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba00:	d106      	bne.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba02:	4b43      	ldr	r3, [pc, #268]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	4a42      	ldr	r2, [pc, #264]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ba0e:	e007      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	75fb      	strb	r3, [r7, #23]
      break;
 800ba14:	e004      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ba16:	bf00      	nop
 800ba18:	e002      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ba1a:	bf00      	nop
 800ba1c:	e000      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ba1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d109      	bne.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba26:	4b3a      	ldr	r3, [pc, #232]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba32:	4937      	ldr	r1, [pc, #220]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba34:	4313      	orrs	r3, r2
 800ba36:	654b      	str	r3, [r1, #84]	; 0x54
 800ba38:	e001      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d008      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba4a:	4b31      	ldr	r3, [pc, #196]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba56:	492e      	ldr	r1, [pc, #184]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ba68:	4b29      	ldr	r3, [pc, #164]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba76:	4926      	ldr	r1, [pc, #152]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d008      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba88:	4b21      	ldr	r3, [pc, #132]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba94:	491e      	ldr	r1, [pc, #120]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00d      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800baa6:	4b1a      	ldr	r3, [pc, #104]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	4a19      	ldr	r2, [pc, #100]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800baac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bab0:	6113      	str	r3, [r2, #16]
 800bab2:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bab4:	691a      	ldr	r2, [r3, #16]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800babc:	4914      	ldr	r1, [pc, #80]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	da08      	bge.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800baca:	4b11      	ldr	r3, [pc, #68]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bace:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad6:	490e      	ldr	r1, [pc, #56]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bad8:	4313      	orrs	r3, r2
 800bada:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d009      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bae8:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800baea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf6:	4906      	ldr	r1, [pc, #24]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bafc:	7dbb      	ldrb	r3, [r7, #22]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e000      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	58024400 	.word	0x58024400

0800bb14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb18:	f7ff f860 	bl	800abdc <HAL_RCC_GetHCLKFreq>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	4b06      	ldr	r3, [pc, #24]	; (800bb38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	091b      	lsrs	r3, r3, #4
 800bb24:	f003 0307 	and.w	r3, r3, #7
 800bb28:	4904      	ldr	r1, [pc, #16]	; (800bb3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb2a:	5ccb      	ldrb	r3, [r1, r3]
 800bb2c:	f003 031f 	and.w	r3, r3, #31
 800bb30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	58024400 	.word	0x58024400
 800bb3c:	08014004 	.word	0x08014004

0800bb40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b089      	sub	sp, #36	; 0x24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb48:	4ba1      	ldr	r3, [pc, #644]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4c:	f003 0303 	and.w	r3, r3, #3
 800bb50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bb52:	4b9f      	ldr	r3, [pc, #636]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb56:	0b1b      	lsrs	r3, r3, #12
 800bb58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb5e:	4b9c      	ldr	r3, [pc, #624]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	091b      	lsrs	r3, r3, #4
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bb6a:	4b99      	ldr	r3, [pc, #612]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb6e:	08db      	lsrs	r3, r3, #3
 800bb70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	fb02 f303 	mul.w	r3, r2, r3
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 8111 	beq.w	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	f000 8083 	beq.w	800bc9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	f200 80a1 	bhi.w	800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d056      	beq.n	800bc58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbaa:	e099      	b.n	800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbac:	4b88      	ldr	r3, [pc, #544]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0320 	and.w	r3, r3, #32
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d02d      	beq.n	800bc14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbb8:	4b85      	ldr	r3, [pc, #532]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	08db      	lsrs	r3, r3, #3
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	4a84      	ldr	r2, [pc, #528]	; (800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bbc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbc8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	ee07 3a90 	vmov	s15, r3
 800bbd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe2:	4b7b      	ldr	r3, [pc, #492]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbea:	ee07 3a90 	vmov	s15, r3
 800bbee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc12:	e087      	b.n	800bd24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	ee07 3a90 	vmov	s15, r3
 800bc1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc26:	4b6a      	ldr	r3, [pc, #424]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc56:	e065      	b.n	800bd24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bde0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6a:	4b59      	ldr	r3, [pc, #356]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc9a:	e043      	b.n	800bd24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bde4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcae:	4b48      	ldr	r3, [pc, #288]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcde:	e021      	b.n	800bd24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bde0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf2:	4b37      	ldr	r3, [pc, #220]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd02:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bd24:	4b2a      	ldr	r3, [pc, #168]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd28:	0a5b      	lsrs	r3, r3, #9
 800bd2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd4a:	ee17 2a90 	vmov	r2, s15
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bd52:	4b1f      	ldr	r3, [pc, #124]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd56:	0c1b      	lsrs	r3, r3, #16
 800bd58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd5c:	ee07 3a90 	vmov	s15, r3
 800bd60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd78:	ee17 2a90 	vmov	r2, s15
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bd80:	4b13      	ldr	r3, [pc, #76]	; (800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd84:	0e1b      	lsrs	r3, r3, #24
 800bd86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bda2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bda6:	ee17 2a90 	vmov	r2, s15
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bdae:	e008      	b.n	800bdc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	609a      	str	r2, [r3, #8]
}
 800bdc2:	bf00      	nop
 800bdc4:	3724      	adds	r7, #36	; 0x24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400
 800bdd4:	03d09000 	.word	0x03d09000
 800bdd8:	46000000 	.word	0x46000000
 800bddc:	4c742400 	.word	0x4c742400
 800bde0:	4a742400 	.word	0x4a742400
 800bde4:	4c371b00 	.word	0x4c371b00

0800bde8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b089      	sub	sp, #36	; 0x24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdf0:	4ba1      	ldr	r3, [pc, #644]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf4:	f003 0303 	and.w	r3, r3, #3
 800bdf8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bdfa:	4b9f      	ldr	r3, [pc, #636]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfe:	0d1b      	lsrs	r3, r3, #20
 800be00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be06:	4b9c      	ldr	r3, [pc, #624]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	f003 0301 	and.w	r3, r3, #1
 800be10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800be12:	4b99      	ldr	r3, [pc, #612]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be16:	08db      	lsrs	r3, r3, #3
 800be18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	fb02 f303 	mul.w	r3, r2, r3
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 8111 	beq.w	800c058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2b02      	cmp	r3, #2
 800be3a:	f000 8083 	beq.w	800bf44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	2b02      	cmp	r3, #2
 800be42:	f200 80a1 	bhi.w	800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d056      	beq.n	800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be52:	e099      	b.n	800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be54:	4b88      	ldr	r3, [pc, #544]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 0320 	and.w	r3, r3, #32
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d02d      	beq.n	800bebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be60:	4b85      	ldr	r3, [pc, #532]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	08db      	lsrs	r3, r3, #3
 800be66:	f003 0303 	and.w	r3, r3, #3
 800be6a:	4a84      	ldr	r2, [pc, #528]	; (800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be6c:	fa22 f303 	lsr.w	r3, r2, r3
 800be70:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	ee07 3a90 	vmov	s15, r3
 800be78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8a:	4b7b      	ldr	r3, [pc, #492]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800beba:	e087      	b.n	800bfcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800beca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bece:	4b6a      	ldr	r3, [pc, #424]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bede:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800befe:	e065      	b.n	800bfcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf12:	4b59      	ldr	r3, [pc, #356]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf26:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf42:	e043      	b.n	800bfcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c08c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf56:	4b48      	ldr	r3, [pc, #288]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf86:	e021      	b.n	800bfcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf9a:	4b37      	ldr	r3, [pc, #220]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bfcc:	4b2a      	ldr	r3, [pc, #168]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	0a5b      	lsrs	r3, r3, #9
 800bfd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff2:	ee17 2a90 	vmov	r2, s15
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bffa:	4b1f      	ldr	r3, [pc, #124]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffe:	0c1b      	lsrs	r3, r3, #16
 800c000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c004:	ee07 3a90 	vmov	s15, r3
 800c008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c010:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c014:	edd7 6a07 	vldr	s13, [r7, #28]
 800c018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c020:	ee17 2a90 	vmov	r2, s15
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c028:	4b13      	ldr	r3, [pc, #76]	; (800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02c:	0e1b      	lsrs	r3, r3, #24
 800c02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c03e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c042:	edd7 6a07 	vldr	s13, [r7, #28]
 800c046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c04e:	ee17 2a90 	vmov	r2, s15
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c056:	e008      	b.n	800c06a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	609a      	str	r2, [r3, #8]
}
 800c06a:	bf00      	nop
 800c06c:	3724      	adds	r7, #36	; 0x24
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	58024400 	.word	0x58024400
 800c07c:	03d09000 	.word	0x03d09000
 800c080:	46000000 	.word	0x46000000
 800c084:	4c742400 	.word	0x4c742400
 800c088:	4a742400 	.word	0x4a742400
 800c08c:	4c371b00 	.word	0x4c371b00

0800c090 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c09e:	4b53      	ldr	r3, [pc, #332]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a2:	f003 0303 	and.w	r3, r3, #3
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d101      	bne.n	800c0ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e099      	b.n	800c1e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c0ae:	4b4f      	ldr	r3, [pc, #316]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a4e      	ldr	r2, [pc, #312]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ba:	f7fa fa85 	bl	80065c8 <HAL_GetTick>
 800c0be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0c0:	e008      	b.n	800c0d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c0c2:	f7fa fa81 	bl	80065c8 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d901      	bls.n	800c0d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e086      	b.n	800c1e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0d4:	4b45      	ldr	r3, [pc, #276]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1f0      	bne.n	800c0c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c0e0:	4b42      	ldr	r3, [pc, #264]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	031b      	lsls	r3, r3, #12
 800c0ee:	493f      	ldr	r1, [pc, #252]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	628b      	str	r3, [r1, #40]	; 0x28
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	3b01      	subs	r3, #1
 800c104:	025b      	lsls	r3, r3, #9
 800c106:	b29b      	uxth	r3, r3
 800c108:	431a      	orrs	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	3b01      	subs	r3, #1
 800c110:	041b      	lsls	r3, r3, #16
 800c112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c116:	431a      	orrs	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	061b      	lsls	r3, r3, #24
 800c120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c124:	4931      	ldr	r1, [pc, #196]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c126:	4313      	orrs	r3, r2
 800c128:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c12a:	4b30      	ldr	r3, [pc, #192]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	492d      	ldr	r1, [pc, #180]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c13c:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c140:	f023 0220 	bic.w	r2, r3, #32
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	4928      	ldr	r1, [pc, #160]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c14e:	4b27      	ldr	r3, [pc, #156]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c152:	4a26      	ldr	r2, [pc, #152]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c154:	f023 0310 	bic.w	r3, r3, #16
 800c158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c15a:	4b24      	ldr	r3, [pc, #144]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c15c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c15e:	4b24      	ldr	r3, [pc, #144]	; (800c1f0 <RCCEx_PLL2_Config+0x160>)
 800c160:	4013      	ands	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	69d2      	ldr	r2, [r2, #28]
 800c166:	00d2      	lsls	r2, r2, #3
 800c168:	4920      	ldr	r1, [pc, #128]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c16a:	4313      	orrs	r3, r2
 800c16c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c16e:	4b1f      	ldr	r3, [pc, #124]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	4a1e      	ldr	r2, [pc, #120]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c174:	f043 0310 	orr.w	r3, r3, #16
 800c178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d106      	bne.n	800c18e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c180:	4b1a      	ldr	r3, [pc, #104]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c184:	4a19      	ldr	r2, [pc, #100]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c18a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c18c:	e00f      	b.n	800c1ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d106      	bne.n	800c1a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c194:	4b15      	ldr	r3, [pc, #84]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c198:	4a14      	ldr	r2, [pc, #80]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c19e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1a0:	e005      	b.n	800c1ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c1a2:	4b12      	ldr	r3, [pc, #72]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a6:	4a11      	ldr	r2, [pc, #68]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a0e      	ldr	r2, [pc, #56]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1ba:	f7fa fa05 	bl	80065c8 <HAL_GetTick>
 800c1be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1c0:	e008      	b.n	800c1d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1c2:	f7fa fa01 	bl	80065c8 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d901      	bls.n	800c1d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e006      	b.n	800c1e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1d4:	4b05      	ldr	r3, [pc, #20]	; (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0f0      	beq.n	800c1c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	58024400 	.word	0x58024400
 800c1f0:	ffff0007 	.word	0xffff0007

0800c1f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c202:	4b53      	ldr	r3, [pc, #332]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d101      	bne.n	800c212 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e099      	b.n	800c346 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c212:	4b4f      	ldr	r3, [pc, #316]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a4e      	ldr	r2, [pc, #312]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c21e:	f7fa f9d3 	bl	80065c8 <HAL_GetTick>
 800c222:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c224:	e008      	b.n	800c238 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c226:	f7fa f9cf 	bl	80065c8 <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d901      	bls.n	800c238 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e086      	b.n	800c346 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c238:	4b45      	ldr	r3, [pc, #276]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1f0      	bne.n	800c226 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c244:	4b42      	ldr	r3, [pc, #264]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c248:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	051b      	lsls	r3, r3, #20
 800c252:	493f      	ldr	r1, [pc, #252]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c254:	4313      	orrs	r3, r2
 800c256:	628b      	str	r3, [r1, #40]	; 0x28
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	3b01      	subs	r3, #1
 800c268:	025b      	lsls	r3, r3, #9
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	431a      	orrs	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	3b01      	subs	r3, #1
 800c274:	041b      	lsls	r3, r3, #16
 800c276:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c27a:	431a      	orrs	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	3b01      	subs	r3, #1
 800c282:	061b      	lsls	r3, r3, #24
 800c284:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c288:	4931      	ldr	r1, [pc, #196]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c28e:	4b30      	ldr	r3, [pc, #192]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	492d      	ldr	r1, [pc, #180]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c29c:	4313      	orrs	r3, r2
 800c29e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2a0:	4b2b      	ldr	r3, [pc, #172]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	4928      	ldr	r1, [pc, #160]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2b2:	4b27      	ldr	r3, [pc, #156]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b6:	4a26      	ldr	r2, [pc, #152]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c2be:	4b24      	ldr	r3, [pc, #144]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2c2:	4b24      	ldr	r3, [pc, #144]	; (800c354 <RCCEx_PLL3_Config+0x160>)
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	69d2      	ldr	r2, [r2, #28]
 800c2ca:	00d2      	lsls	r2, r2, #3
 800c2cc:	4920      	ldr	r1, [pc, #128]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c2d2:	4b1f      	ldr	r3, [pc, #124]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d6:	4a1e      	ldr	r2, [pc, #120]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c2e4:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e8:	4a19      	ldr	r2, [pc, #100]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c2ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2f0:	e00f      	b.n	800c312 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d106      	bne.n	800c306 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c2f8:	4b15      	ldr	r3, [pc, #84]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	4a14      	ldr	r2, [pc, #80]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c302:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c304:	e005      	b.n	800c312 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c306:	4b12      	ldr	r3, [pc, #72]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30a:	4a11      	ldr	r2, [pc, #68]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c30c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c310:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c312:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a0e      	ldr	r2, [pc, #56]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c31e:	f7fa f953 	bl	80065c8 <HAL_GetTick>
 800c322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c324:	e008      	b.n	800c338 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c326:	f7fa f94f 	bl	80065c8 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	2b02      	cmp	r3, #2
 800c332:	d901      	bls.n	800c338 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e006      	b.n	800c346 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0f0      	beq.n	800c326 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c344:	7bfb      	ldrb	r3, [r7, #15]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	58024400 	.word	0x58024400
 800c354:	ffff0007 	.word	0xffff0007

0800c358 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e0f1      	b.n	800c54e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a78      	ldr	r2, [pc, #480]	; (800c558 <HAL_SPI_Init+0x200>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d00f      	beq.n	800c39a <HAL_SPI_Init+0x42>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a77      	ldr	r2, [pc, #476]	; (800c55c <HAL_SPI_Init+0x204>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d00a      	beq.n	800c39a <HAL_SPI_Init+0x42>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a75      	ldr	r2, [pc, #468]	; (800c560 <HAL_SPI_Init+0x208>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d005      	beq.n	800c39a <HAL_SPI_Init+0x42>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	2b0f      	cmp	r3, #15
 800c394:	d901      	bls.n	800c39a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e0d9      	b.n	800c54e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f8e2 	bl	800c564 <SPI_GetPacketSize>
 800c3a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a6c      	ldr	r2, [pc, #432]	; (800c558 <HAL_SPI_Init+0x200>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d00c      	beq.n	800c3c6 <HAL_SPI_Init+0x6e>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a6a      	ldr	r2, [pc, #424]	; (800c55c <HAL_SPI_Init+0x204>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d007      	beq.n	800c3c6 <HAL_SPI_Init+0x6e>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a69      	ldr	r2, [pc, #420]	; (800c560 <HAL_SPI_Init+0x208>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d002      	beq.n	800c3c6 <HAL_SPI_Init+0x6e>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2b08      	cmp	r3, #8
 800c3c4:	d811      	bhi.n	800c3ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3ca:	4a63      	ldr	r2, [pc, #396]	; (800c558 <HAL_SPI_Init+0x200>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d009      	beq.n	800c3e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a61      	ldr	r2, [pc, #388]	; (800c55c <HAL_SPI_Init+0x204>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d004      	beq.n	800c3e4 <HAL_SPI_Init+0x8c>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a60      	ldr	r2, [pc, #384]	; (800c560 <HAL_SPI_Init+0x208>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d104      	bne.n	800c3ee <HAL_SPI_Init+0x96>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b10      	cmp	r3, #16
 800c3e8:	d901      	bls.n	800c3ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e0af      	b.n	800c54e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7f8 faa0 	bl	8004948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2202      	movs	r2, #2
 800c40c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f022 0201 	bic.w	r2, r2, #1
 800c41e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c42a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c434:	d119      	bne.n	800c46a <HAL_SPI_Init+0x112>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c43e:	d103      	bne.n	800c448 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c444:	2b00      	cmp	r3, #0
 800c446:	d008      	beq.n	800c45a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10c      	bne.n	800c46a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c458:	d107      	bne.n	800c46a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c468:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	69da      	ldr	r2, [r3, #28]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c472:	431a      	orrs	r2, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	431a      	orrs	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47c:	ea42 0103 	orr.w	r1, r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68da      	ldr	r2, [r3, #12]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	430a      	orrs	r2, r1
 800c48a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	431a      	orrs	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	431a      	orrs	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	431a      	orrs	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	695b      	ldr	r3, [r3, #20]
 800c4ac:	431a      	orrs	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4be:	431a      	orrs	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4ca:	ea42 0103 	orr.w	r1, r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d113      	bne.n	800c50a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c508:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0201 	bic.w	r2, r2, #1
 800c518:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	40013000 	.word	0x40013000
 800c55c:	40003800 	.word	0x40003800
 800c560:	40003c00 	.word	0x40003c00

0800c564 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c570:	095b      	lsrs	r3, r3, #5
 800c572:	3301      	adds	r3, #1
 800c574:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	3301      	adds	r3, #1
 800c57c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	3307      	adds	r3, #7
 800c582:	08db      	lsrs	r3, r3, #3
 800c584:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d101      	bne.n	800c5ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e049      	b.n	800c640 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7f9 f8dd 	bl	8005780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f000 fd9f 	bl	800d11c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d001      	beq.n	800c660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e054      	b.n	800c70a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2202      	movs	r2, #2
 800c664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f042 0201 	orr.w	r2, r2, #1
 800c676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a26      	ldr	r2, [pc, #152]	; (800c718 <HAL_TIM_Base_Start_IT+0xd0>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d022      	beq.n	800c6c8 <HAL_TIM_Base_Start_IT+0x80>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c68a:	d01d      	beq.n	800c6c8 <HAL_TIM_Base_Start_IT+0x80>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a22      	ldr	r2, [pc, #136]	; (800c71c <HAL_TIM_Base_Start_IT+0xd4>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d018      	beq.n	800c6c8 <HAL_TIM_Base_Start_IT+0x80>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a21      	ldr	r2, [pc, #132]	; (800c720 <HAL_TIM_Base_Start_IT+0xd8>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d013      	beq.n	800c6c8 <HAL_TIM_Base_Start_IT+0x80>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a1f      	ldr	r2, [pc, #124]	; (800c724 <HAL_TIM_Base_Start_IT+0xdc>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d00e      	beq.n	800c6c8 <HAL_TIM_Base_Start_IT+0x80>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a1e      	ldr	r2, [pc, #120]	; (800c728 <HAL_TIM_Base_Start_IT+0xe0>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d009      	beq.n	800c6c8 <HAL_TIM_Base_Start_IT+0x80>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a1c      	ldr	r2, [pc, #112]	; (800c72c <HAL_TIM_Base_Start_IT+0xe4>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d004      	beq.n	800c6c8 <HAL_TIM_Base_Start_IT+0x80>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a1b      	ldr	r2, [pc, #108]	; (800c730 <HAL_TIM_Base_Start_IT+0xe8>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d115      	bne.n	800c6f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	689a      	ldr	r2, [r3, #8]
 800c6ce:	4b19      	ldr	r3, [pc, #100]	; (800c734 <HAL_TIM_Base_Start_IT+0xec>)
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b06      	cmp	r3, #6
 800c6d8:	d015      	beq.n	800c706 <HAL_TIM_Base_Start_IT+0xbe>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6e0:	d011      	beq.n	800c706 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f042 0201 	orr.w	r2, r2, #1
 800c6f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6f2:	e008      	b.n	800c706 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f042 0201 	orr.w	r2, r2, #1
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	e000      	b.n	800c708 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	40010000 	.word	0x40010000
 800c71c:	40000400 	.word	0x40000400
 800c720:	40000800 	.word	0x40000800
 800c724:	40000c00 	.word	0x40000c00
 800c728:	40010400 	.word	0x40010400
 800c72c:	40001800 	.word	0x40001800
 800c730:	40014000 	.word	0x40014000
 800c734:	00010007 	.word	0x00010007

0800c738 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68da      	ldr	r2, [r3, #12]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f022 0201 	bic.w	r2, r2, #1
 800c74e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6a1a      	ldr	r2, [r3, #32]
 800c756:	f241 1311 	movw	r3, #4369	; 0x1111
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10f      	bne.n	800c780 <HAL_TIM_Base_Stop_IT+0x48>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6a1a      	ldr	r2, [r3, #32]
 800c766:	f240 4344 	movw	r3, #1092	; 0x444
 800c76a:	4013      	ands	r3, r2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d107      	bne.n	800c780 <HAL_TIM_Base_Stop_IT+0x48>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f022 0201 	bic.w	r2, r2, #1
 800c77e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b082      	sub	sp, #8
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	e049      	b.n	800c83c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d106      	bne.n	800c7c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f841 	bl	800c844 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	f000 fca1 	bl	800d11c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d109      	bne.n	800c87c <HAL_TIM_PWM_Start+0x24>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b01      	cmp	r3, #1
 800c872:	bf14      	ite	ne
 800c874:	2301      	movne	r3, #1
 800c876:	2300      	moveq	r3, #0
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	e03c      	b.n	800c8f6 <HAL_TIM_PWM_Start+0x9e>
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b04      	cmp	r3, #4
 800c880:	d109      	bne.n	800c896 <HAL_TIM_PWM_Start+0x3e>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	bf14      	ite	ne
 800c88e:	2301      	movne	r3, #1
 800c890:	2300      	moveq	r3, #0
 800c892:	b2db      	uxtb	r3, r3
 800c894:	e02f      	b.n	800c8f6 <HAL_TIM_PWM_Start+0x9e>
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	2b08      	cmp	r3, #8
 800c89a:	d109      	bne.n	800c8b0 <HAL_TIM_PWM_Start+0x58>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	bf14      	ite	ne
 800c8a8:	2301      	movne	r3, #1
 800c8aa:	2300      	moveq	r3, #0
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	e022      	b.n	800c8f6 <HAL_TIM_PWM_Start+0x9e>
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2b0c      	cmp	r3, #12
 800c8b4:	d109      	bne.n	800c8ca <HAL_TIM_PWM_Start+0x72>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	bf14      	ite	ne
 800c8c2:	2301      	movne	r3, #1
 800c8c4:	2300      	moveq	r3, #0
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	e015      	b.n	800c8f6 <HAL_TIM_PWM_Start+0x9e>
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2b10      	cmp	r3, #16
 800c8ce:	d109      	bne.n	800c8e4 <HAL_TIM_PWM_Start+0x8c>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	bf14      	ite	ne
 800c8dc:	2301      	movne	r3, #1
 800c8de:	2300      	moveq	r3, #0
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	e008      	b.n	800c8f6 <HAL_TIM_PWM_Start+0x9e>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	bf14      	ite	ne
 800c8f0:	2301      	movne	r3, #1
 800c8f2:	2300      	moveq	r3, #0
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e0a1      	b.n	800ca42 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d104      	bne.n	800c90e <HAL_TIM_PWM_Start+0xb6>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2202      	movs	r2, #2
 800c908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c90c:	e023      	b.n	800c956 <HAL_TIM_PWM_Start+0xfe>
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b04      	cmp	r3, #4
 800c912:	d104      	bne.n	800c91e <HAL_TIM_PWM_Start+0xc6>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2202      	movs	r2, #2
 800c918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c91c:	e01b      	b.n	800c956 <HAL_TIM_PWM_Start+0xfe>
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b08      	cmp	r3, #8
 800c922:	d104      	bne.n	800c92e <HAL_TIM_PWM_Start+0xd6>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2202      	movs	r2, #2
 800c928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c92c:	e013      	b.n	800c956 <HAL_TIM_PWM_Start+0xfe>
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b0c      	cmp	r3, #12
 800c932:	d104      	bne.n	800c93e <HAL_TIM_PWM_Start+0xe6>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c93c:	e00b      	b.n	800c956 <HAL_TIM_PWM_Start+0xfe>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b10      	cmp	r3, #16
 800c942:	d104      	bne.n	800c94e <HAL_TIM_PWM_Start+0xf6>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2202      	movs	r2, #2
 800c948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c94c:	e003      	b.n	800c956 <HAL_TIM_PWM_Start+0xfe>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2202      	movs	r2, #2
 800c952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2201      	movs	r2, #1
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 ffea 	bl	800d938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a38      	ldr	r2, [pc, #224]	; (800ca4c <HAL_TIM_PWM_Start+0x1f4>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d013      	beq.n	800c996 <HAL_TIM_PWM_Start+0x13e>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a37      	ldr	r2, [pc, #220]	; (800ca50 <HAL_TIM_PWM_Start+0x1f8>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d00e      	beq.n	800c996 <HAL_TIM_PWM_Start+0x13e>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a35      	ldr	r2, [pc, #212]	; (800ca54 <HAL_TIM_PWM_Start+0x1fc>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d009      	beq.n	800c996 <HAL_TIM_PWM_Start+0x13e>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a34      	ldr	r2, [pc, #208]	; (800ca58 <HAL_TIM_PWM_Start+0x200>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d004      	beq.n	800c996 <HAL_TIM_PWM_Start+0x13e>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a32      	ldr	r2, [pc, #200]	; (800ca5c <HAL_TIM_PWM_Start+0x204>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d101      	bne.n	800c99a <HAL_TIM_PWM_Start+0x142>
 800c996:	2301      	movs	r3, #1
 800c998:	e000      	b.n	800c99c <HAL_TIM_PWM_Start+0x144>
 800c99a:	2300      	movs	r3, #0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a25      	ldr	r2, [pc, #148]	; (800ca4c <HAL_TIM_PWM_Start+0x1f4>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d022      	beq.n	800ca00 <HAL_TIM_PWM_Start+0x1a8>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c2:	d01d      	beq.n	800ca00 <HAL_TIM_PWM_Start+0x1a8>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a25      	ldr	r2, [pc, #148]	; (800ca60 <HAL_TIM_PWM_Start+0x208>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d018      	beq.n	800ca00 <HAL_TIM_PWM_Start+0x1a8>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a24      	ldr	r2, [pc, #144]	; (800ca64 <HAL_TIM_PWM_Start+0x20c>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d013      	beq.n	800ca00 <HAL_TIM_PWM_Start+0x1a8>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a22      	ldr	r2, [pc, #136]	; (800ca68 <HAL_TIM_PWM_Start+0x210>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00e      	beq.n	800ca00 <HAL_TIM_PWM_Start+0x1a8>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a1a      	ldr	r2, [pc, #104]	; (800ca50 <HAL_TIM_PWM_Start+0x1f8>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d009      	beq.n	800ca00 <HAL_TIM_PWM_Start+0x1a8>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a1e      	ldr	r2, [pc, #120]	; (800ca6c <HAL_TIM_PWM_Start+0x214>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d004      	beq.n	800ca00 <HAL_TIM_PWM_Start+0x1a8>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a16      	ldr	r2, [pc, #88]	; (800ca54 <HAL_TIM_PWM_Start+0x1fc>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d115      	bne.n	800ca2c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689a      	ldr	r2, [r3, #8]
 800ca06:	4b1a      	ldr	r3, [pc, #104]	; (800ca70 <HAL_TIM_PWM_Start+0x218>)
 800ca08:	4013      	ands	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b06      	cmp	r3, #6
 800ca10:	d015      	beq.n	800ca3e <HAL_TIM_PWM_Start+0x1e6>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca18:	d011      	beq.n	800ca3e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f042 0201 	orr.w	r2, r2, #1
 800ca28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca2a:	e008      	b.n	800ca3e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f042 0201 	orr.w	r2, r2, #1
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	e000      	b.n	800ca40 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	40010000 	.word	0x40010000
 800ca50:	40010400 	.word	0x40010400
 800ca54:	40014000 	.word	0x40014000
 800ca58:	40014400 	.word	0x40014400
 800ca5c:	40014800 	.word	0x40014800
 800ca60:	40000400 	.word	0x40000400
 800ca64:	40000800 	.word	0x40000800
 800ca68:	40000c00 	.word	0x40000c00
 800ca6c:	40001800 	.word	0x40001800
 800ca70:	00010007 	.word	0x00010007

0800ca74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	f003 0302 	and.w	r3, r3, #2
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d122      	bne.n	800cad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	f003 0302 	and.w	r3, r3, #2
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d11b      	bne.n	800cad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f06f 0202 	mvn.w	r2, #2
 800caa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	f003 0303 	and.w	r3, r3, #3
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d003      	beq.n	800cabe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fb12 	bl	800d0e0 <HAL_TIM_IC_CaptureCallback>
 800cabc:	e005      	b.n	800caca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fb04 	bl	800d0cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fb15 	bl	800d0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	f003 0304 	and.w	r3, r3, #4
 800cada:	2b04      	cmp	r3, #4
 800cadc:	d122      	bne.n	800cb24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b04      	cmp	r3, #4
 800caea:	d11b      	bne.n	800cb24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f06f 0204 	mvn.w	r2, #4
 800caf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2202      	movs	r2, #2
 800cafa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d003      	beq.n	800cb12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fae8 	bl	800d0e0 <HAL_TIM_IC_CaptureCallback>
 800cb10:	e005      	b.n	800cb1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fada 	bl	800d0cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 faeb 	bl	800d0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	f003 0308 	and.w	r3, r3, #8
 800cb2e:	2b08      	cmp	r3, #8
 800cb30:	d122      	bne.n	800cb78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	f003 0308 	and.w	r3, r3, #8
 800cb3c:	2b08      	cmp	r3, #8
 800cb3e:	d11b      	bne.n	800cb78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f06f 0208 	mvn.w	r2, #8
 800cb48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2204      	movs	r2, #4
 800cb4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	69db      	ldr	r3, [r3, #28]
 800cb56:	f003 0303 	and.w	r3, r3, #3
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d003      	beq.n	800cb66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fabe 	bl	800d0e0 <HAL_TIM_IC_CaptureCallback>
 800cb64:	e005      	b.n	800cb72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fab0 	bl	800d0cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fac1 	bl	800d0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	f003 0310 	and.w	r3, r3, #16
 800cb82:	2b10      	cmp	r3, #16
 800cb84:	d122      	bne.n	800cbcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	f003 0310 	and.w	r3, r3, #16
 800cb90:	2b10      	cmp	r3, #16
 800cb92:	d11b      	bne.n	800cbcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f06f 0210 	mvn.w	r2, #16
 800cb9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2208      	movs	r2, #8
 800cba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	69db      	ldr	r3, [r3, #28]
 800cbaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d003      	beq.n	800cbba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fa94 	bl	800d0e0 <HAL_TIM_IC_CaptureCallback>
 800cbb8:	e005      	b.n	800cbc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fa86 	bl	800d0cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fa97 	bl	800d0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	f003 0301 	and.w	r3, r3, #1
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d10e      	bne.n	800cbf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d107      	bne.n	800cbf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f06f 0201 	mvn.w	r2, #1
 800cbf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7f6 fc0c 	bl	8003410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc02:	2b80      	cmp	r3, #128	; 0x80
 800cc04:	d10e      	bne.n	800cc24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc10:	2b80      	cmp	r3, #128	; 0x80
 800cc12:	d107      	bne.n	800cc24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 ffc6 	bl	800dbb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc32:	d10e      	bne.n	800cc52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc3e:	2b80      	cmp	r3, #128	; 0x80
 800cc40:	d107      	bne.n	800cc52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cc4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 ffb9 	bl	800dbc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc5c:	2b40      	cmp	r3, #64	; 0x40
 800cc5e:	d10e      	bne.n	800cc7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6a:	2b40      	cmp	r3, #64	; 0x40
 800cc6c:	d107      	bne.n	800cc7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fa45 	bl	800d108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	f003 0320 	and.w	r3, r3, #32
 800cc88:	2b20      	cmp	r3, #32
 800cc8a:	d10e      	bne.n	800ccaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	f003 0320 	and.w	r3, r3, #32
 800cc96:	2b20      	cmp	r3, #32
 800cc98:	d107      	bne.n	800ccaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f06f 0220 	mvn.w	r2, #32
 800cca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 ff79 	bl	800db9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ccaa:	bf00      	nop
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
	...

0800ccb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d101      	bne.n	800ccd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ccce:	2302      	movs	r3, #2
 800ccd0:	e0ff      	b.n	800ced2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b14      	cmp	r3, #20
 800ccde:	f200 80f0 	bhi.w	800cec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cce2:	a201      	add	r2, pc, #4	; (adr r2, 800cce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce8:	0800cd3d 	.word	0x0800cd3d
 800ccec:	0800cec3 	.word	0x0800cec3
 800ccf0:	0800cec3 	.word	0x0800cec3
 800ccf4:	0800cec3 	.word	0x0800cec3
 800ccf8:	0800cd7d 	.word	0x0800cd7d
 800ccfc:	0800cec3 	.word	0x0800cec3
 800cd00:	0800cec3 	.word	0x0800cec3
 800cd04:	0800cec3 	.word	0x0800cec3
 800cd08:	0800cdbf 	.word	0x0800cdbf
 800cd0c:	0800cec3 	.word	0x0800cec3
 800cd10:	0800cec3 	.word	0x0800cec3
 800cd14:	0800cec3 	.word	0x0800cec3
 800cd18:	0800cdff 	.word	0x0800cdff
 800cd1c:	0800cec3 	.word	0x0800cec3
 800cd20:	0800cec3 	.word	0x0800cec3
 800cd24:	0800cec3 	.word	0x0800cec3
 800cd28:	0800ce41 	.word	0x0800ce41
 800cd2c:	0800cec3 	.word	0x0800cec3
 800cd30:	0800cec3 	.word	0x0800cec3
 800cd34:	0800cec3 	.word	0x0800cec3
 800cd38:	0800ce81 	.word	0x0800ce81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68b9      	ldr	r1, [r7, #8]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 fa84 	bl	800d250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	699a      	ldr	r2, [r3, #24]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f042 0208 	orr.w	r2, r2, #8
 800cd56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699a      	ldr	r2, [r3, #24]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f022 0204 	bic.w	r2, r2, #4
 800cd66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6999      	ldr	r1, [r3, #24]
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	691a      	ldr	r2, [r3, #16]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	619a      	str	r2, [r3, #24]
      break;
 800cd7a:	e0a5      	b.n	800cec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68b9      	ldr	r1, [r7, #8]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 faf4 	bl	800d370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	699a      	ldr	r2, [r3, #24]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	699a      	ldr	r2, [r3, #24]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6999      	ldr	r1, [r3, #24]
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	021a      	lsls	r2, r3, #8
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	430a      	orrs	r2, r1
 800cdba:	619a      	str	r2, [r3, #24]
      break;
 800cdbc:	e084      	b.n	800cec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68b9      	ldr	r1, [r7, #8]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 fb5d 	bl	800d484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	69da      	ldr	r2, [r3, #28]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f042 0208 	orr.w	r2, r2, #8
 800cdd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	69da      	ldr	r2, [r3, #28]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f022 0204 	bic.w	r2, r2, #4
 800cde8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	69d9      	ldr	r1, [r3, #28]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	691a      	ldr	r2, [r3, #16]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	61da      	str	r2, [r3, #28]
      break;
 800cdfc:	e064      	b.n	800cec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fbc5 	bl	800d594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	69da      	ldr	r2, [r3, #28]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	69da      	ldr	r2, [r3, #28]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	69d9      	ldr	r1, [r3, #28]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	021a      	lsls	r2, r3, #8
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	61da      	str	r2, [r3, #28]
      break;
 800ce3e:	e043      	b.n	800cec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68b9      	ldr	r1, [r7, #8]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 fc0e 	bl	800d668 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f042 0208 	orr.w	r2, r2, #8
 800ce5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f022 0204 	bic.w	r2, r2, #4
 800ce6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	691a      	ldr	r2, [r3, #16]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ce7e:	e023      	b.n	800cec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68b9      	ldr	r1, [r7, #8]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 fc52 	bl	800d730 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	021a      	lsls	r2, r3, #8
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	430a      	orrs	r2, r1
 800cebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cec0:	e002      	b.n	800cec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	75fb      	strb	r3, [r7, #23]
      break;
 800cec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop

0800cedc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d101      	bne.n	800cef8 <HAL_TIM_ConfigClockSource+0x1c>
 800cef4:	2302      	movs	r3, #2
 800cef6:	e0dc      	b.n	800d0b2 <HAL_TIM_ConfigClockSource+0x1d6>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2202      	movs	r2, #2
 800cf04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	4b6a      	ldr	r3, [pc, #424]	; (800d0bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800cf14:	4013      	ands	r3, r2
 800cf16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a64      	ldr	r2, [pc, #400]	; (800d0c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	f000 80a9 	beq.w	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf34:	4a62      	ldr	r2, [pc, #392]	; (800d0c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	f200 80ae 	bhi.w	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf3c:	4a61      	ldr	r2, [pc, #388]	; (800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	f000 80a1 	beq.w	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf44:	4a5f      	ldr	r2, [pc, #380]	; (800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	f200 80a6 	bhi.w	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf4c:	4a5e      	ldr	r2, [pc, #376]	; (800d0c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	f000 8099 	beq.w	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf54:	4a5c      	ldr	r2, [pc, #368]	; (800d0c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	f200 809e 	bhi.w	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf60:	f000 8091 	beq.w	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf68:	f200 8096 	bhi.w	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf70:	f000 8089 	beq.w	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf78:	f200 808e 	bhi.w	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf80:	d03e      	beq.n	800d000 <HAL_TIM_ConfigClockSource+0x124>
 800cf82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf86:	f200 8087 	bhi.w	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf8e:	f000 8086 	beq.w	800d09e <HAL_TIM_ConfigClockSource+0x1c2>
 800cf92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf96:	d87f      	bhi.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf98:	2b70      	cmp	r3, #112	; 0x70
 800cf9a:	d01a      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0xf6>
 800cf9c:	2b70      	cmp	r3, #112	; 0x70
 800cf9e:	d87b      	bhi.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cfa0:	2b60      	cmp	r3, #96	; 0x60
 800cfa2:	d050      	beq.n	800d046 <HAL_TIM_ConfigClockSource+0x16a>
 800cfa4:	2b60      	cmp	r3, #96	; 0x60
 800cfa6:	d877      	bhi.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cfa8:	2b50      	cmp	r3, #80	; 0x50
 800cfaa:	d03c      	beq.n	800d026 <HAL_TIM_ConfigClockSource+0x14a>
 800cfac:	2b50      	cmp	r3, #80	; 0x50
 800cfae:	d873      	bhi.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cfb0:	2b40      	cmp	r3, #64	; 0x40
 800cfb2:	d058      	beq.n	800d066 <HAL_TIM_ConfigClockSource+0x18a>
 800cfb4:	2b40      	cmp	r3, #64	; 0x40
 800cfb6:	d86f      	bhi.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cfb8:	2b30      	cmp	r3, #48	; 0x30
 800cfba:	d064      	beq.n	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cfbc:	2b30      	cmp	r3, #48	; 0x30
 800cfbe:	d86b      	bhi.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cfc0:	2b20      	cmp	r3, #32
 800cfc2:	d060      	beq.n	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cfc4:	2b20      	cmp	r3, #32
 800cfc6:	d867      	bhi.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d05c      	beq.n	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cfcc:	2b10      	cmp	r3, #16
 800cfce:	d05a      	beq.n	800d086 <HAL_TIM_ConfigClockSource+0x1aa>
 800cfd0:	e062      	b.n	800d098 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6818      	ldr	r0, [r3, #0]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	6899      	ldr	r1, [r3, #8]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f000 fc89 	bl	800d8f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	609a      	str	r2, [r3, #8]
      break;
 800cffe:	e04f      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6818      	ldr	r0, [r3, #0]
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	6899      	ldr	r1, [r3, #8]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	685a      	ldr	r2, [r3, #4]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f000 fc72 	bl	800d8f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	689a      	ldr	r2, [r3, #8]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d022:	609a      	str	r2, [r3, #8]
      break;
 800d024:	e03c      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6818      	ldr	r0, [r3, #0]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	6859      	ldr	r1, [r3, #4]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	461a      	mov	r2, r3
 800d034:	f000 fbe2 	bl	800d7fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2150      	movs	r1, #80	; 0x50
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 fc3c 	bl	800d8bc <TIM_ITRx_SetConfig>
      break;
 800d044:	e02c      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	6859      	ldr	r1, [r3, #4]
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	461a      	mov	r2, r3
 800d054:	f000 fc01 	bl	800d85a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2160      	movs	r1, #96	; 0x60
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 fc2c 	bl	800d8bc <TIM_ITRx_SetConfig>
      break;
 800d064:	e01c      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	6859      	ldr	r1, [r3, #4]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	461a      	mov	r2, r3
 800d074:	f000 fbc2 	bl	800d7fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2140      	movs	r1, #64	; 0x40
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 fc1c 	bl	800d8bc <TIM_ITRx_SetConfig>
      break;
 800d084:	e00c      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4619      	mov	r1, r3
 800d090:	4610      	mov	r0, r2
 800d092:	f000 fc13 	bl	800d8bc <TIM_ITRx_SetConfig>
      break;
 800d096:	e003      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	73fb      	strb	r3, [r7, #15]
      break;
 800d09c:	e000      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d09e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	ffceff88 	.word	0xffceff88
 800d0c0:	00100040 	.word	0x00100040
 800d0c4:	00100030 	.word	0x00100030
 800d0c8:	00100020 	.word	0x00100020

0800d0cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d0d4:	bf00      	nop
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	4a40      	ldr	r2, [pc, #256]	; (800d230 <TIM_Base_SetConfig+0x114>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d013      	beq.n	800d15c <TIM_Base_SetConfig+0x40>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d13a:	d00f      	beq.n	800d15c <TIM_Base_SetConfig+0x40>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a3d      	ldr	r2, [pc, #244]	; (800d234 <TIM_Base_SetConfig+0x118>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d00b      	beq.n	800d15c <TIM_Base_SetConfig+0x40>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4a3c      	ldr	r2, [pc, #240]	; (800d238 <TIM_Base_SetConfig+0x11c>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d007      	beq.n	800d15c <TIM_Base_SetConfig+0x40>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a3b      	ldr	r2, [pc, #236]	; (800d23c <TIM_Base_SetConfig+0x120>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d003      	beq.n	800d15c <TIM_Base_SetConfig+0x40>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a3a      	ldr	r2, [pc, #232]	; (800d240 <TIM_Base_SetConfig+0x124>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d108      	bne.n	800d16e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4a2f      	ldr	r2, [pc, #188]	; (800d230 <TIM_Base_SetConfig+0x114>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d01f      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d17c:	d01b      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4a2c      	ldr	r2, [pc, #176]	; (800d234 <TIM_Base_SetConfig+0x118>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d017      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4a2b      	ldr	r2, [pc, #172]	; (800d238 <TIM_Base_SetConfig+0x11c>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d013      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	4a2a      	ldr	r2, [pc, #168]	; (800d23c <TIM_Base_SetConfig+0x120>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d00f      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a29      	ldr	r2, [pc, #164]	; (800d240 <TIM_Base_SetConfig+0x124>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d00b      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a28      	ldr	r2, [pc, #160]	; (800d244 <TIM_Base_SetConfig+0x128>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d007      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a27      	ldr	r2, [pc, #156]	; (800d248 <TIM_Base_SetConfig+0x12c>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d003      	beq.n	800d1b6 <TIM_Base_SetConfig+0x9a>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a26      	ldr	r2, [pc, #152]	; (800d24c <TIM_Base_SetConfig+0x130>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d108      	bne.n	800d1c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a10      	ldr	r2, [pc, #64]	; (800d230 <TIM_Base_SetConfig+0x114>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d00f      	beq.n	800d214 <TIM_Base_SetConfig+0xf8>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a12      	ldr	r2, [pc, #72]	; (800d240 <TIM_Base_SetConfig+0x124>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d00b      	beq.n	800d214 <TIM_Base_SetConfig+0xf8>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a11      	ldr	r2, [pc, #68]	; (800d244 <TIM_Base_SetConfig+0x128>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d007      	beq.n	800d214 <TIM_Base_SetConfig+0xf8>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a10      	ldr	r2, [pc, #64]	; (800d248 <TIM_Base_SetConfig+0x12c>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d003      	beq.n	800d214 <TIM_Base_SetConfig+0xf8>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a0f      	ldr	r2, [pc, #60]	; (800d24c <TIM_Base_SetConfig+0x130>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d103      	bne.n	800d21c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	691a      	ldr	r2, [r3, #16]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	615a      	str	r2, [r3, #20]
}
 800d222:	bf00      	nop
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	40010000 	.word	0x40010000
 800d234:	40000400 	.word	0x40000400
 800d238:	40000800 	.word	0x40000800
 800d23c:	40000c00 	.word	0x40000c00
 800d240:	40010400 	.word	0x40010400
 800d244:	40014000 	.word	0x40014000
 800d248:	40014400 	.word	0x40014400
 800d24c:	40014800 	.word	0x40014800

0800d250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d250:	b480      	push	{r7}
 800d252:	b087      	sub	sp, #28
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	f023 0201 	bic.w	r2, r3, #1
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	699b      	ldr	r3, [r3, #24]
 800d276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4b37      	ldr	r3, [pc, #220]	; (800d358 <TIM_OC1_SetConfig+0x108>)
 800d27c:	4013      	ands	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f023 0303 	bic.w	r3, r3, #3
 800d286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	4313      	orrs	r3, r2
 800d290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f023 0302 	bic.w	r3, r3, #2
 800d298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a2d      	ldr	r2, [pc, #180]	; (800d35c <TIM_OC1_SetConfig+0x10c>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d00f      	beq.n	800d2cc <TIM_OC1_SetConfig+0x7c>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a2c      	ldr	r2, [pc, #176]	; (800d360 <TIM_OC1_SetConfig+0x110>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d00b      	beq.n	800d2cc <TIM_OC1_SetConfig+0x7c>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a2b      	ldr	r2, [pc, #172]	; (800d364 <TIM_OC1_SetConfig+0x114>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d007      	beq.n	800d2cc <TIM_OC1_SetConfig+0x7c>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a2a      	ldr	r2, [pc, #168]	; (800d368 <TIM_OC1_SetConfig+0x118>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d003      	beq.n	800d2cc <TIM_OC1_SetConfig+0x7c>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a29      	ldr	r2, [pc, #164]	; (800d36c <TIM_OC1_SetConfig+0x11c>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d10c      	bne.n	800d2e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	f023 0308 	bic.w	r3, r3, #8
 800d2d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	697a      	ldr	r2, [r7, #20]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f023 0304 	bic.w	r3, r3, #4
 800d2e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a1c      	ldr	r2, [pc, #112]	; (800d35c <TIM_OC1_SetConfig+0x10c>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d00f      	beq.n	800d30e <TIM_OC1_SetConfig+0xbe>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a1b      	ldr	r2, [pc, #108]	; (800d360 <TIM_OC1_SetConfig+0x110>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d00b      	beq.n	800d30e <TIM_OC1_SetConfig+0xbe>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a1a      	ldr	r2, [pc, #104]	; (800d364 <TIM_OC1_SetConfig+0x114>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d007      	beq.n	800d30e <TIM_OC1_SetConfig+0xbe>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a19      	ldr	r2, [pc, #100]	; (800d368 <TIM_OC1_SetConfig+0x118>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d003      	beq.n	800d30e <TIM_OC1_SetConfig+0xbe>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a18      	ldr	r2, [pc, #96]	; (800d36c <TIM_OC1_SetConfig+0x11c>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d111      	bne.n	800d332 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d31c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	4313      	orrs	r3, r2
 800d326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	693a      	ldr	r2, [r7, #16]
 800d32e:	4313      	orrs	r3, r2
 800d330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	697a      	ldr	r2, [r7, #20]
 800d34a:	621a      	str	r2, [r3, #32]
}
 800d34c:	bf00      	nop
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	fffeff8f 	.word	0xfffeff8f
 800d35c:	40010000 	.word	0x40010000
 800d360:	40010400 	.word	0x40010400
 800d364:	40014000 	.word	0x40014000
 800d368:	40014400 	.word	0x40014400
 800d36c:	40014800 	.word	0x40014800

0800d370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d370:	b480      	push	{r7}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	f023 0210 	bic.w	r2, r3, #16
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	699b      	ldr	r3, [r3, #24]
 800d396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	4b34      	ldr	r3, [pc, #208]	; (800d46c <TIM_OC2_SetConfig+0xfc>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	021b      	lsls	r3, r3, #8
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f023 0320 	bic.w	r3, r3, #32
 800d3ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	011b      	lsls	r3, r3, #4
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a29      	ldr	r2, [pc, #164]	; (800d470 <TIM_OC2_SetConfig+0x100>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d003      	beq.n	800d3d8 <TIM_OC2_SetConfig+0x68>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4a28      	ldr	r2, [pc, #160]	; (800d474 <TIM_OC2_SetConfig+0x104>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d10d      	bne.n	800d3f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	011b      	lsls	r3, r3, #4
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4a1e      	ldr	r2, [pc, #120]	; (800d470 <TIM_OC2_SetConfig+0x100>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d00f      	beq.n	800d41c <TIM_OC2_SetConfig+0xac>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a1d      	ldr	r2, [pc, #116]	; (800d474 <TIM_OC2_SetConfig+0x104>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d00b      	beq.n	800d41c <TIM_OC2_SetConfig+0xac>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a1c      	ldr	r2, [pc, #112]	; (800d478 <TIM_OC2_SetConfig+0x108>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d007      	beq.n	800d41c <TIM_OC2_SetConfig+0xac>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a1b      	ldr	r2, [pc, #108]	; (800d47c <TIM_OC2_SetConfig+0x10c>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d003      	beq.n	800d41c <TIM_OC2_SetConfig+0xac>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a1a      	ldr	r2, [pc, #104]	; (800d480 <TIM_OC2_SetConfig+0x110>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d113      	bne.n	800d444 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d42a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	4313      	orrs	r3, r2
 800d436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	4313      	orrs	r3, r2
 800d442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	685a      	ldr	r2, [r3, #4]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	621a      	str	r2, [r3, #32]
}
 800d45e:	bf00      	nop
 800d460:	371c      	adds	r7, #28
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	feff8fff 	.word	0xfeff8fff
 800d470:	40010000 	.word	0x40010000
 800d474:	40010400 	.word	0x40010400
 800d478:	40014000 	.word	0x40014000
 800d47c:	40014400 	.word	0x40014400
 800d480:	40014800 	.word	0x40014800

0800d484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d484:	b480      	push	{r7}
 800d486:	b087      	sub	sp, #28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4b33      	ldr	r3, [pc, #204]	; (800d57c <TIM_OC3_SetConfig+0xf8>)
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f023 0303 	bic.w	r3, r3, #3
 800d4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	021b      	lsls	r3, r3, #8
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a28      	ldr	r2, [pc, #160]	; (800d580 <TIM_OC3_SetConfig+0xfc>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d003      	beq.n	800d4ea <TIM_OC3_SetConfig+0x66>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a27      	ldr	r2, [pc, #156]	; (800d584 <TIM_OC3_SetConfig+0x100>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d10d      	bne.n	800d506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a1d      	ldr	r2, [pc, #116]	; (800d580 <TIM_OC3_SetConfig+0xfc>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d00f      	beq.n	800d52e <TIM_OC3_SetConfig+0xaa>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a1c      	ldr	r2, [pc, #112]	; (800d584 <TIM_OC3_SetConfig+0x100>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d00b      	beq.n	800d52e <TIM_OC3_SetConfig+0xaa>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4a1b      	ldr	r2, [pc, #108]	; (800d588 <TIM_OC3_SetConfig+0x104>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d007      	beq.n	800d52e <TIM_OC3_SetConfig+0xaa>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a1a      	ldr	r2, [pc, #104]	; (800d58c <TIM_OC3_SetConfig+0x108>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d003      	beq.n	800d52e <TIM_OC3_SetConfig+0xaa>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a19      	ldr	r2, [pc, #100]	; (800d590 <TIM_OC3_SetConfig+0x10c>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d113      	bne.n	800d556 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d53c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	011b      	lsls	r3, r3, #4
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	4313      	orrs	r3, r2
 800d548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	011b      	lsls	r3, r3, #4
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	4313      	orrs	r3, r2
 800d554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	685a      	ldr	r2, [r3, #4]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	697a      	ldr	r2, [r7, #20]
 800d56e:	621a      	str	r2, [r3, #32]
}
 800d570:	bf00      	nop
 800d572:	371c      	adds	r7, #28
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	fffeff8f 	.word	0xfffeff8f
 800d580:	40010000 	.word	0x40010000
 800d584:	40010400 	.word	0x40010400
 800d588:	40014000 	.word	0x40014000
 800d58c:	40014400 	.word	0x40014400
 800d590:	40014800 	.word	0x40014800

0800d594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d594:	b480      	push	{r7}
 800d596:	b087      	sub	sp, #28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	69db      	ldr	r3, [r3, #28]
 800d5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	4b24      	ldr	r3, [pc, #144]	; (800d650 <TIM_OC4_SetConfig+0xbc>)
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	021b      	lsls	r3, r3, #8
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d5de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	031b      	lsls	r3, r3, #12
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a19      	ldr	r2, [pc, #100]	; (800d654 <TIM_OC4_SetConfig+0xc0>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d00f      	beq.n	800d614 <TIM_OC4_SetConfig+0x80>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	4a18      	ldr	r2, [pc, #96]	; (800d658 <TIM_OC4_SetConfig+0xc4>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d00b      	beq.n	800d614 <TIM_OC4_SetConfig+0x80>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a17      	ldr	r2, [pc, #92]	; (800d65c <TIM_OC4_SetConfig+0xc8>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d007      	beq.n	800d614 <TIM_OC4_SetConfig+0x80>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a16      	ldr	r2, [pc, #88]	; (800d660 <TIM_OC4_SetConfig+0xcc>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d003      	beq.n	800d614 <TIM_OC4_SetConfig+0x80>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a15      	ldr	r2, [pc, #84]	; (800d664 <TIM_OC4_SetConfig+0xd0>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d109      	bne.n	800d628 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d61a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	695b      	ldr	r3, [r3, #20]
 800d620:	019b      	lsls	r3, r3, #6
 800d622:	697a      	ldr	r2, [r7, #20]
 800d624:	4313      	orrs	r3, r2
 800d626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	685a      	ldr	r2, [r3, #4]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	693a      	ldr	r2, [r7, #16]
 800d640:	621a      	str	r2, [r3, #32]
}
 800d642:	bf00      	nop
 800d644:	371c      	adds	r7, #28
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	feff8fff 	.word	0xfeff8fff
 800d654:	40010000 	.word	0x40010000
 800d658:	40010400 	.word	0x40010400
 800d65c:	40014000 	.word	0x40014000
 800d660:	40014400 	.word	0x40014400
 800d664:	40014800 	.word	0x40014800

0800d668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d668:	b480      	push	{r7}
 800d66a:	b087      	sub	sp, #28
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	4b21      	ldr	r3, [pc, #132]	; (800d718 <TIM_OC5_SetConfig+0xb0>)
 800d694:	4013      	ands	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d6a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	041b      	lsls	r3, r3, #16
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a18      	ldr	r2, [pc, #96]	; (800d71c <TIM_OC5_SetConfig+0xb4>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d00f      	beq.n	800d6de <TIM_OC5_SetConfig+0x76>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4a17      	ldr	r2, [pc, #92]	; (800d720 <TIM_OC5_SetConfig+0xb8>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d00b      	beq.n	800d6de <TIM_OC5_SetConfig+0x76>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a16      	ldr	r2, [pc, #88]	; (800d724 <TIM_OC5_SetConfig+0xbc>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d007      	beq.n	800d6de <TIM_OC5_SetConfig+0x76>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a15      	ldr	r2, [pc, #84]	; (800d728 <TIM_OC5_SetConfig+0xc0>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d003      	beq.n	800d6de <TIM_OC5_SetConfig+0x76>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4a14      	ldr	r2, [pc, #80]	; (800d72c <TIM_OC5_SetConfig+0xc4>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d109      	bne.n	800d6f2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	021b      	lsls	r3, r3, #8
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	697a      	ldr	r2, [r7, #20]
 800d6f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	685a      	ldr	r2, [r3, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	621a      	str	r2, [r3, #32]
}
 800d70c:	bf00      	nop
 800d70e:	371c      	adds	r7, #28
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	fffeff8f 	.word	0xfffeff8f
 800d71c:	40010000 	.word	0x40010000
 800d720:	40010400 	.word	0x40010400
 800d724:	40014000 	.word	0x40014000
 800d728:	40014400 	.word	0x40014400
 800d72c:	40014800 	.word	0x40014800

0800d730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d730:	b480      	push	{r7}
 800d732:	b087      	sub	sp, #28
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a1b      	ldr	r3, [r3, #32]
 800d73e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	4b22      	ldr	r3, [pc, #136]	; (800d7e4 <TIM_OC6_SetConfig+0xb4>)
 800d75c:	4013      	ands	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	021b      	lsls	r3, r3, #8
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	4313      	orrs	r3, r2
 800d76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	051b      	lsls	r3, r3, #20
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a19      	ldr	r2, [pc, #100]	; (800d7e8 <TIM_OC6_SetConfig+0xb8>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d00f      	beq.n	800d7a8 <TIM_OC6_SetConfig+0x78>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4a18      	ldr	r2, [pc, #96]	; (800d7ec <TIM_OC6_SetConfig+0xbc>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d00b      	beq.n	800d7a8 <TIM_OC6_SetConfig+0x78>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a17      	ldr	r2, [pc, #92]	; (800d7f0 <TIM_OC6_SetConfig+0xc0>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d007      	beq.n	800d7a8 <TIM_OC6_SetConfig+0x78>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a16      	ldr	r2, [pc, #88]	; (800d7f4 <TIM_OC6_SetConfig+0xc4>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d003      	beq.n	800d7a8 <TIM_OC6_SetConfig+0x78>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a15      	ldr	r2, [pc, #84]	; (800d7f8 <TIM_OC6_SetConfig+0xc8>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d109      	bne.n	800d7bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	029b      	lsls	r3, r3, #10
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	621a      	str	r2, [r3, #32]
}
 800d7d6:	bf00      	nop
 800d7d8:	371c      	adds	r7, #28
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	feff8fff 	.word	0xfeff8fff
 800d7e8:	40010000 	.word	0x40010000
 800d7ec:	40010400 	.word	0x40010400
 800d7f0:	40014000 	.word	0x40014000
 800d7f4:	40014400 	.word	0x40014400
 800d7f8:	40014800 	.word	0x40014800

0800d7fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b087      	sub	sp, #28
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6a1b      	ldr	r3, [r3, #32]
 800d80c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	f023 0201 	bic.w	r2, r3, #1
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	011b      	lsls	r3, r3, #4
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	4313      	orrs	r3, r2
 800d830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f023 030a 	bic.w	r3, r3, #10
 800d838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	4313      	orrs	r3, r2
 800d840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	621a      	str	r2, [r3, #32]
}
 800d84e:	bf00      	nop
 800d850:	371c      	adds	r7, #28
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b087      	sub	sp, #28
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	f023 0210 	bic.w	r2, r3, #16
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	699b      	ldr	r3, [r3, #24]
 800d876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6a1b      	ldr	r3, [r3, #32]
 800d87c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	031b      	lsls	r3, r3, #12
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	011b      	lsls	r3, r3, #4
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	621a      	str	r2, [r3, #32]
}
 800d8ae:	bf00      	nop
 800d8b0:	371c      	adds	r7, #28
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
	...

0800d8bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <TIM_ITRx_SetConfig+0x38>)
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	f043 0307 	orr.w	r3, r3, #7
 800d8de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	609a      	str	r2, [r3, #8]
}
 800d8e6:	bf00      	nop
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	ffcfff8f 	.word	0xffcfff8f

0800d8f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b087      	sub	sp, #28
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	021a      	lsls	r2, r3, #8
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	431a      	orrs	r2, r3
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	4313      	orrs	r3, r2
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	4313      	orrs	r3, r2
 800d924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	697a      	ldr	r2, [r7, #20]
 800d92a:	609a      	str	r2, [r3, #8]
}
 800d92c:	bf00      	nop
 800d92e:	371c      	adds	r7, #28
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d938:	b480      	push	{r7}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	f003 031f 	and.w	r3, r3, #31
 800d94a:	2201      	movs	r2, #1
 800d94c:	fa02 f303 	lsl.w	r3, r2, r3
 800d950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6a1a      	ldr	r2, [r3, #32]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	43db      	mvns	r3, r3
 800d95a:	401a      	ands	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6a1a      	ldr	r2, [r3, #32]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	f003 031f 	and.w	r3, r3, #31
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	fa01 f303 	lsl.w	r3, r1, r3
 800d970:	431a      	orrs	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	621a      	str	r2, [r3, #32]
}
 800d976:	bf00      	nop
 800d978:	371c      	adds	r7, #28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
	...

0800d984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d994:	2b01      	cmp	r3, #1
 800d996:	d101      	bne.n	800d99c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d998:	2302      	movs	r3, #2
 800d99a:	e06d      	b.n	800da78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a30      	ldr	r2, [pc, #192]	; (800da84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d004      	beq.n	800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a2f      	ldr	r2, [pc, #188]	; (800da88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d108      	bne.n	800d9e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d9d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a20      	ldr	r2, [pc, #128]	; (800da84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d022      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da0e:	d01d      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a1d      	ldr	r2, [pc, #116]	; (800da8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d018      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a1c      	ldr	r2, [pc, #112]	; (800da90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d013      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a1a      	ldr	r2, [pc, #104]	; (800da94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d00e      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a15      	ldr	r2, [pc, #84]	; (800da88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d009      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a16      	ldr	r2, [pc, #88]	; (800da98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d004      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a15      	ldr	r2, [pc, #84]	; (800da9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d10c      	bne.n	800da66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3714      	adds	r7, #20
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	40010000 	.word	0x40010000
 800da88:	40010400 	.word	0x40010400
 800da8c:	40000400 	.word	0x40000400
 800da90:	40000800 	.word	0x40000800
 800da94:	40000c00 	.word	0x40000c00
 800da98:	40001800 	.word	0x40001800
 800da9c:	40014000 	.word	0x40014000

0800daa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800daaa:	2300      	movs	r3, #0
 800daac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d101      	bne.n	800dabc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dab8:	2302      	movs	r3, #2
 800daba:	e065      	b.n	800db88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	4313      	orrs	r3, r2
 800dad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	4313      	orrs	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	4313      	orrs	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	4313      	orrs	r3, r2
 800db08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	4313      	orrs	r3, r2
 800db16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db22:	4313      	orrs	r3, r2
 800db24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	041b      	lsls	r3, r3, #16
 800db32:	4313      	orrs	r3, r2
 800db34:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a16      	ldr	r2, [pc, #88]	; (800db94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d004      	beq.n	800db4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a14      	ldr	r2, [pc, #80]	; (800db98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d115      	bne.n	800db76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db54:	051b      	lsls	r3, r3, #20
 800db56:	4313      	orrs	r3, r2
 800db58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	69db      	ldr	r3, [r3, #28]
 800db64:	4313      	orrs	r3, r2
 800db66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	6a1b      	ldr	r3, [r3, #32]
 800db72:	4313      	orrs	r3, r2
 800db74:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	40010000 	.word	0x40010000
 800db98:	40010400 	.word	0x40010400

0800db9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e042      	b.n	800dc70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7f8 f947 	bl	8005e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2224      	movs	r2, #36	; 0x24
 800dc06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f022 0201 	bic.w	r2, r2, #1
 800dc18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 fdf8 	bl	800e810 <UART_SetConfig>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d101      	bne.n	800dc2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	e022      	b.n	800dc70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d002      	beq.n	800dc38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f001 fb4c 	bl	800f2d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685a      	ldr	r2, [r3, #4]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	689a      	ldr	r2, [r3, #8]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f042 0201 	orr.w	r2, r2, #1
 800dc66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f001 fbd3 	bl	800f414 <UART_CheckIdleState>
 800dc6e:	4603      	mov	r3, r0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b08a      	sub	sp, #40	; 0x28
 800dc7c:	af02      	add	r7, sp, #8
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	603b      	str	r3, [r7, #0]
 800dc84:	4613      	mov	r3, r2
 800dc86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc8e:	2b20      	cmp	r3, #32
 800dc90:	f040 8083 	bne.w	800dd9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d002      	beq.n	800dca0 <HAL_UART_Transmit+0x28>
 800dc9a:	88fb      	ldrh	r3, [r7, #6]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e07b      	b.n	800dd9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d101      	bne.n	800dcb2 <HAL_UART_Transmit+0x3a>
 800dcae:	2302      	movs	r3, #2
 800dcb0:	e074      	b.n	800dd9c <HAL_UART_Transmit+0x124>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2221      	movs	r2, #33	; 0x21
 800dcc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dcca:	f7f8 fc7d 	bl	80065c8 <HAL_GetTick>
 800dcce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	88fa      	ldrh	r2, [r7, #6]
 800dcd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	88fa      	ldrh	r2, [r7, #6]
 800dcdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dce8:	d108      	bne.n	800dcfc <HAL_UART_Transmit+0x84>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d104      	bne.n	800dcfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	61bb      	str	r3, [r7, #24]
 800dcfa:	e003      	b.n	800dd04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dd00:	2300      	movs	r3, #0
 800dd02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dd0c:	e02c      	b.n	800dd68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2200      	movs	r2, #0
 800dd16:	2180      	movs	r1, #128	; 0x80
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f001 fbc6 	bl	800f4aa <UART_WaitOnFlagUntilTimeout>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dd24:	2303      	movs	r3, #3
 800dd26:	e039      	b.n	800dd9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10b      	bne.n	800dd46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	881b      	ldrh	r3, [r3, #0]
 800dd32:	461a      	mov	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	3302      	adds	r3, #2
 800dd42:	61bb      	str	r3, [r7, #24]
 800dd44:	e007      	b.n	800dd56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	781a      	ldrb	r2, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	3301      	adds	r3, #1
 800dd54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1cc      	bne.n	800dd0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	2140      	movs	r1, #64	; 0x40
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f001 fb93 	bl	800f4aa <UART_WaitOnFlagUntilTimeout>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dd8a:	2303      	movs	r3, #3
 800dd8c:	e006      	b.n	800dd9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2220      	movs	r2, #32
 800dd92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	e000      	b.n	800dd9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800dd9a:	2302      	movs	r3, #2
  }
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3720      	adds	r7, #32
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08a      	sub	sp, #40	; 0x28
 800dda8:	af02      	add	r7, sp, #8
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	603b      	str	r3, [r7, #0]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddba:	2b20      	cmp	r3, #32
 800ddbc:	f040 80c0 	bne.w	800df40 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d002      	beq.n	800ddcc <HAL_UART_Receive+0x28>
 800ddc6:	88fb      	ldrh	r3, [r7, #6]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d101      	bne.n	800ddd0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e0b8      	b.n	800df42 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d101      	bne.n	800ddde <HAL_UART_Receive+0x3a>
 800ddda:	2302      	movs	r3, #2
 800dddc:	e0b1      	b.n	800df42 <HAL_UART_Receive+0x19e>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2201      	movs	r2, #1
 800dde2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2222      	movs	r2, #34	; 0x22
 800ddf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ddfc:	f7f8 fbe4 	bl	80065c8 <HAL_GetTick>
 800de00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	88fa      	ldrh	r2, [r7, #6]
 800de06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	88fa      	ldrh	r2, [r7, #6]
 800de0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de1a:	d10e      	bne.n	800de3a <HAL_UART_Receive+0x96>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d105      	bne.n	800de30 <HAL_UART_Receive+0x8c>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f240 12ff 	movw	r2, #511	; 0x1ff
 800de2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de2e:	e02d      	b.n	800de8c <HAL_UART_Receive+0xe8>
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	22ff      	movs	r2, #255	; 0xff
 800de34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de38:	e028      	b.n	800de8c <HAL_UART_Receive+0xe8>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10d      	bne.n	800de5e <HAL_UART_Receive+0xba>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d104      	bne.n	800de54 <HAL_UART_Receive+0xb0>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	22ff      	movs	r2, #255	; 0xff
 800de4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de52:	e01b      	b.n	800de8c <HAL_UART_Receive+0xe8>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	227f      	movs	r2, #127	; 0x7f
 800de58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de5c:	e016      	b.n	800de8c <HAL_UART_Receive+0xe8>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de66:	d10d      	bne.n	800de84 <HAL_UART_Receive+0xe0>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d104      	bne.n	800de7a <HAL_UART_Receive+0xd6>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	227f      	movs	r2, #127	; 0x7f
 800de74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de78:	e008      	b.n	800de8c <HAL_UART_Receive+0xe8>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	223f      	movs	r2, #63	; 0x3f
 800de7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de82:	e003      	b.n	800de8c <HAL_UART_Receive+0xe8>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de9c:	d108      	bne.n	800deb0 <HAL_UART_Receive+0x10c>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d104      	bne.n	800deb0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	61bb      	str	r3, [r7, #24]
 800deae:	e003      	b.n	800deb8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800deb4:	2300      	movs	r3, #0
 800deb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800dec0:	e032      	b.n	800df28 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2200      	movs	r2, #0
 800deca:	2120      	movs	r1, #32
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f001 faec 	bl	800f4aa <UART_WaitOnFlagUntilTimeout>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ded8:	2303      	movs	r3, #3
 800deda:	e032      	b.n	800df42 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d10c      	bne.n	800defc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee8:	b29a      	uxth	r2, r3
 800deea:	8a7b      	ldrh	r3, [r7, #18]
 800deec:	4013      	ands	r3, r2
 800deee:	b29a      	uxth	r2, r3
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	3302      	adds	r3, #2
 800def8:	61bb      	str	r3, [r7, #24]
 800defa:	e00c      	b.n	800df16 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df02:	b2da      	uxtb	r2, r3
 800df04:	8a7b      	ldrh	r3, [r7, #18]
 800df06:	b2db      	uxtb	r3, r3
 800df08:	4013      	ands	r3, r2
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	3301      	adds	r3, #1
 800df14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	3b01      	subs	r3, #1
 800df20:	b29a      	uxth	r2, r3
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df2e:	b29b      	uxth	r3, r3
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1c6      	bne.n	800dec2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2220      	movs	r2, #32
 800df38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	e000      	b.n	800df42 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800df40:	2302      	movs	r3, #2
  }
}
 800df42:	4618      	mov	r0, r3
 800df44:	3720      	adds	r7, #32
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	; 0x28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df60:	2b20      	cmp	r3, #32
 800df62:	d17a      	bne.n	800e05a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <HAL_UART_Transmit_DMA+0x24>
 800df6a:	88fb      	ldrh	r3, [r7, #6]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	e073      	b.n	800e05c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d101      	bne.n	800df82 <HAL_UART_Transmit_DMA+0x36>
 800df7e:	2302      	movs	r3, #2
 800df80:	e06c      	b.n	800e05c <HAL_UART_Transmit_DMA+0x110>
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	88fa      	ldrh	r2, [r7, #6]
 800df94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	88fa      	ldrh	r2, [r7, #6]
 800df9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2221      	movs	r2, #33	; 0x21
 800dfac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d02c      	beq.n	800e012 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfbc:	4a29      	ldr	r2, [pc, #164]	; (800e064 <HAL_UART_Transmit_DMA+0x118>)
 800dfbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfc4:	4a28      	ldr	r2, [pc, #160]	; (800e068 <HAL_UART_Transmit_DMA+0x11c>)
 800dfc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfcc:	4a27      	ldr	r2, [pc, #156]	; (800e06c <HAL_UART_Transmit_DMA+0x120>)
 800dfce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	3328      	adds	r3, #40	; 0x28
 800dfe8:	461a      	mov	r2, r3
 800dfea:	88fb      	ldrh	r3, [r7, #6]
 800dfec:	f7f9 f99e 	bl	800732c <HAL_DMA_Start_IT>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00d      	beq.n	800e012 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2210      	movs	r2, #16
 800dffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2220      	movs	r2, #32
 800e00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e024      	b.n	800e05c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2240      	movs	r2, #64	; 0x40
 800e018:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	3308      	adds	r3, #8
 800e028:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	e853 3f00 	ldrex	r3, [r3]
 800e030:	613b      	str	r3, [r7, #16]
   return(result);
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e038:	627b      	str	r3, [r7, #36]	; 0x24
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	3308      	adds	r3, #8
 800e040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e042:	623a      	str	r2, [r7, #32]
 800e044:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e046:	69f9      	ldr	r1, [r7, #28]
 800e048:	6a3a      	ldr	r2, [r7, #32]
 800e04a:	e841 2300 	strex	r3, r2, [r1]
 800e04e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1e5      	bne.n	800e022 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e056:	2300      	movs	r3, #0
 800e058:	e000      	b.n	800e05c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e05a:	2302      	movs	r3, #2
  }
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3728      	adds	r7, #40	; 0x28
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	0800f8dd 	.word	0x0800f8dd
 800e068:	0800f973 	.word	0x0800f973
 800e06c:	0800fae9 	.word	0x0800fae9

0800e070 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b0ba      	sub	sp, #232	; 0xe8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	69db      	ldr	r3, [r3, #28]
 800e07e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e096:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e09a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e09e:	4013      	ands	r3, r2
 800e0a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e0a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d11b      	bne.n	800e0e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0b0:	f003 0320 	and.w	r3, r3, #32
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d015      	beq.n	800e0e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0bc:	f003 0320 	and.w	r3, r3, #32
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d105      	bne.n	800e0d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d009      	beq.n	800e0e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 835a 	beq.w	800e78e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	4798      	blx	r3
      }
      return;
 800e0e2:	e354      	b.n	800e78e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e0e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 811f 	beq.w	800e32c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e0ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e0f2:	4b8b      	ldr	r3, [pc, #556]	; (800e320 <HAL_UART_IRQHandler+0x2b0>)
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d106      	bne.n	800e108 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e0fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e0fe:	4b89      	ldr	r3, [pc, #548]	; (800e324 <HAL_UART_IRQHandler+0x2b4>)
 800e100:	4013      	ands	r3, r2
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 8112 	beq.w	800e32c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e10c:	f003 0301 	and.w	r3, r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	d011      	beq.n	800e138 <HAL_UART_IRQHandler+0xc8>
 800e114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2201      	movs	r2, #1
 800e126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e12e:	f043 0201 	orr.w	r2, r3, #1
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e13c:	f003 0302 	and.w	r3, r3, #2
 800e140:	2b00      	cmp	r3, #0
 800e142:	d011      	beq.n	800e168 <HAL_UART_IRQHandler+0xf8>
 800e144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e148:	f003 0301 	and.w	r3, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00b      	beq.n	800e168 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2202      	movs	r2, #2
 800e156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e15e:	f043 0204 	orr.w	r2, r3, #4
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	d011      	beq.n	800e198 <HAL_UART_IRQHandler+0x128>
 800e174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e178:	f003 0301 	and.w	r3, r3, #1
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00b      	beq.n	800e198 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2204      	movs	r2, #4
 800e186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e18e:	f043 0202 	orr.w	r2, r3, #2
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e19c:	f003 0308 	and.w	r3, r3, #8
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d017      	beq.n	800e1d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1a8:	f003 0320 	and.w	r3, r3, #32
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d105      	bne.n	800e1bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e1b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e1b4:	4b5a      	ldr	r3, [pc, #360]	; (800e320 <HAL_UART_IRQHandler+0x2b0>)
 800e1b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00b      	beq.n	800e1d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1ca:	f043 0208 	orr.w	r2, r3, #8
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d012      	beq.n	800e206 <HAL_UART_IRQHandler+0x196>
 800e1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00c      	beq.n	800e206 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1fc:	f043 0220 	orr.w	r2, r3, #32
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 82c0 	beq.w	800e792 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e216:	f003 0320 	and.w	r3, r3, #32
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d013      	beq.n	800e246 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e222:	f003 0320 	and.w	r3, r3, #32
 800e226:	2b00      	cmp	r3, #0
 800e228:	d105      	bne.n	800e236 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e22e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e232:	2b00      	cmp	r3, #0
 800e234:	d007      	beq.n	800e246 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d003      	beq.n	800e246 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e24c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e25a:	2b40      	cmp	r3, #64	; 0x40
 800e25c:	d005      	beq.n	800e26a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e262:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e266:	2b00      	cmp	r3, #0
 800e268:	d04f      	beq.n	800e30a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f001 fad0 	bl	800f810 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e27a:	2b40      	cmp	r3, #64	; 0x40
 800e27c:	d141      	bne.n	800e302 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3308      	adds	r3, #8
 800e284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e28c:	e853 3f00 	ldrex	r3, [r3]
 800e290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e29c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e2aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e2b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e2ba:	e841 2300 	strex	r3, r2, [r1]
 800e2be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e2c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1d9      	bne.n	800e27e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d013      	beq.n	800e2fa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d6:	4a14      	ldr	r2, [pc, #80]	; (800e328 <HAL_UART_IRQHandler+0x2b8>)
 800e2d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7f9 fdac 	bl	8007e3c <HAL_DMA_Abort_IT>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d017      	beq.n	800e31a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2f8:	e00f      	b.n	800e31a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fa7e 	bl	800e7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e300:	e00b      	b.n	800e31a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fa7a 	bl	800e7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e308:	e007      	b.n	800e31a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa76 	bl	800e7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e318:	e23b      	b.n	800e792 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e31a:	bf00      	nop
    return;
 800e31c:	e239      	b.n	800e792 <HAL_UART_IRQHandler+0x722>
 800e31e:	bf00      	nop
 800e320:	10000001 	.word	0x10000001
 800e324:	04000120 	.word	0x04000120
 800e328:	0800fb69 	.word	0x0800fb69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e330:	2b01      	cmp	r3, #1
 800e332:	f040 81ce 	bne.w	800e6d2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e33a:	f003 0310 	and.w	r3, r3, #16
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 81c7 	beq.w	800e6d2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e348:	f003 0310 	and.w	r3, r3, #16
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 81c0 	beq.w	800e6d2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2210      	movs	r2, #16
 800e358:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e364:	2b40      	cmp	r3, #64	; 0x40
 800e366:	f040 813b 	bne.w	800e5e0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a8b      	ldr	r2, [pc, #556]	; (800e5a0 <HAL_UART_IRQHandler+0x530>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d059      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a89      	ldr	r2, [pc, #548]	; (800e5a4 <HAL_UART_IRQHandler+0x534>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d053      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a87      	ldr	r2, [pc, #540]	; (800e5a8 <HAL_UART_IRQHandler+0x538>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d04d      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a85      	ldr	r2, [pc, #532]	; (800e5ac <HAL_UART_IRQHandler+0x53c>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d047      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a83      	ldr	r2, [pc, #524]	; (800e5b0 <HAL_UART_IRQHandler+0x540>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d041      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a81      	ldr	r2, [pc, #516]	; (800e5b4 <HAL_UART_IRQHandler+0x544>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d03b      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a7f      	ldr	r2, [pc, #508]	; (800e5b8 <HAL_UART_IRQHandler+0x548>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d035      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a7d      	ldr	r2, [pc, #500]	; (800e5bc <HAL_UART_IRQHandler+0x54c>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d02f      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a7b      	ldr	r2, [pc, #492]	; (800e5c0 <HAL_UART_IRQHandler+0x550>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d029      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a79      	ldr	r2, [pc, #484]	; (800e5c4 <HAL_UART_IRQHandler+0x554>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d023      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a77      	ldr	r2, [pc, #476]	; (800e5c8 <HAL_UART_IRQHandler+0x558>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d01d      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4a75      	ldr	r2, [pc, #468]	; (800e5cc <HAL_UART_IRQHandler+0x55c>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d017      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a73      	ldr	r2, [pc, #460]	; (800e5d0 <HAL_UART_IRQHandler+0x560>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d011      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a71      	ldr	r2, [pc, #452]	; (800e5d4 <HAL_UART_IRQHandler+0x564>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d00b      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a6f      	ldr	r2, [pc, #444]	; (800e5d8 <HAL_UART_IRQHandler+0x568>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d005      	beq.n	800e42a <HAL_UART_IRQHandler+0x3ba>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a6d      	ldr	r2, [pc, #436]	; (800e5dc <HAL_UART_IRQHandler+0x56c>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d105      	bne.n	800e436 <HAL_UART_IRQHandler+0x3c6>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	b29b      	uxth	r3, r3
 800e434:	e004      	b.n	800e440 <HAL_UART_IRQHandler+0x3d0>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f000 81a4 	beq.w	800e796 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e454:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e458:	429a      	cmp	r2, r3
 800e45a:	f080 819c 	bcs.w	800e796 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e472:	f000 8086 	beq.w	800e582 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e482:	e853 3f00 	ldrex	r3, [r3]
 800e486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e48a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4b0:	e841 2300 	strex	r3, r2, [r1]
 800e4b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1da      	bne.n	800e476 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4ca:	e853 3f00 	ldrex	r3, [r3]
 800e4ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e4d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4d2:	f023 0301 	bic.w	r3, r3, #1
 800e4d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	3308      	adds	r3, #8
 800e4e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e4e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e4e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e4ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e4f0:	e841 2300 	strex	r3, r2, [r1]
 800e4f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e4f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1e1      	bne.n	800e4c0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	3308      	adds	r3, #8
 800e502:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e506:	e853 3f00 	ldrex	r3, [r3]
 800e50a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e50c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e50e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3308      	adds	r3, #8
 800e51c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e520:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e522:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e524:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e526:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e528:	e841 2300 	strex	r3, r2, [r1]
 800e52c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e52e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1e3      	bne.n	800e4fc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2220      	movs	r2, #32
 800e538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e54a:	e853 3f00 	ldrex	r3, [r3]
 800e54e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e552:	f023 0310 	bic.w	r3, r3, #16
 800e556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	461a      	mov	r2, r3
 800e560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e564:	65bb      	str	r3, [r7, #88]	; 0x58
 800e566:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e56a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e56c:	e841 2300 	strex	r3, r2, [r1]
 800e570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1e4      	bne.n	800e542 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7f9 f93f 	bl	8007800 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e58e:	b29b      	uxth	r3, r3
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	b29b      	uxth	r3, r3
 800e594:	4619      	mov	r1, r3
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7f4 fcf0 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e59c:	e0fb      	b.n	800e796 <HAL_UART_IRQHandler+0x726>
 800e59e:	bf00      	nop
 800e5a0:	40020010 	.word	0x40020010
 800e5a4:	40020028 	.word	0x40020028
 800e5a8:	40020040 	.word	0x40020040
 800e5ac:	40020058 	.word	0x40020058
 800e5b0:	40020070 	.word	0x40020070
 800e5b4:	40020088 	.word	0x40020088
 800e5b8:	400200a0 	.word	0x400200a0
 800e5bc:	400200b8 	.word	0x400200b8
 800e5c0:	40020410 	.word	0x40020410
 800e5c4:	40020428 	.word	0x40020428
 800e5c8:	40020440 	.word	0x40020440
 800e5cc:	40020458 	.word	0x40020458
 800e5d0:	40020470 	.word	0x40020470
 800e5d4:	40020488 	.word	0x40020488
 800e5d8:	400204a0 	.word	0x400204a0
 800e5dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	1ad3      	subs	r3, r2, r3
 800e5f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f000 80cc 	beq.w	800e79a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 80c7 	beq.w	800e79a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e614:	e853 3f00 	ldrex	r3, [r3]
 800e618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	461a      	mov	r2, r3
 800e62a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e62e:	647b      	str	r3, [r7, #68]	; 0x44
 800e630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e636:	e841 2300 	strex	r3, r2, [r1]
 800e63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1e4      	bne.n	800e60c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3308      	adds	r3, #8
 800e648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	e853 3f00 	ldrex	r3, [r3]
 800e650:	623b      	str	r3, [r7, #32]
   return(result);
 800e652:	6a3a      	ldr	r2, [r7, #32]
 800e654:	4b54      	ldr	r3, [pc, #336]	; (800e7a8 <HAL_UART_IRQHandler+0x738>)
 800e656:	4013      	ands	r3, r2
 800e658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	3308      	adds	r3, #8
 800e662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e666:	633a      	str	r2, [r7, #48]	; 0x30
 800e668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e3      	bne.n	800e642 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2220      	movs	r2, #32
 800e67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	e853 3f00 	ldrex	r3, [r3]
 800e69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f023 0310 	bic.w	r3, r3, #16
 800e6a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6b0:	61fb      	str	r3, [r7, #28]
 800e6b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b4:	69b9      	ldr	r1, [r7, #24]
 800e6b6:	69fa      	ldr	r2, [r7, #28]
 800e6b8:	e841 2300 	strex	r3, r2, [r1]
 800e6bc:	617b      	str	r3, [r7, #20]
   return(result);
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1e4      	bne.n	800e68e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7f4 fc56 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6d0:	e063      	b.n	800e79a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00e      	beq.n	800e6fc <HAL_UART_IRQHandler+0x68c>
 800e6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d008      	beq.n	800e6fc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f001 fa78 	bl	800fbea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6fa:	e051      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e704:	2b00      	cmp	r3, #0
 800e706:	d014      	beq.n	800e732 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e710:	2b00      	cmp	r3, #0
 800e712:	d105      	bne.n	800e720 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d008      	beq.n	800e732 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e724:	2b00      	cmp	r3, #0
 800e726:	d03a      	beq.n	800e79e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	4798      	blx	r3
    }
    return;
 800e730:	e035      	b.n	800e79e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d009      	beq.n	800e752 <HAL_UART_IRQHandler+0x6e2>
 800e73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f001 fa22 	bl	800fb94 <UART_EndTransmit_IT>
    return;
 800e750:	e026      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <HAL_UART_IRQHandler+0x702>
 800e75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f001 fa51 	bl	800fc12 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e770:	e016      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d010      	beq.n	800e7a0 <HAL_UART_IRQHandler+0x730>
 800e77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e782:	2b00      	cmp	r3, #0
 800e784:	da0c      	bge.n	800e7a0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f001 fa39 	bl	800fbfe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e78c:	e008      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
      return;
 800e78e:	bf00      	nop
 800e790:	e006      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
    return;
 800e792:	bf00      	nop
 800e794:	e004      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
      return;
 800e796:	bf00      	nop
 800e798:	e002      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
      return;
 800e79a:	bf00      	nop
 800e79c:	e000      	b.n	800e7a0 <HAL_UART_IRQHandler+0x730>
    return;
 800e79e:	bf00      	nop
  }
}
 800e7a0:	37e8      	adds	r7, #232	; 0xe8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	effffffe 	.word	0xeffffffe

0800e7ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e7c8:	bf00      	nop
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e810:	b5b0      	push	{r4, r5, r7, lr}
 800e812:	b08e      	sub	sp, #56	; 0x38
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e818:	2300      	movs	r3, #0
 800e81a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	689a      	ldr	r2, [r3, #8]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	431a      	orrs	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	695b      	ldr	r3, [r3, #20]
 800e82c:	431a      	orrs	r2, r3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	69db      	ldr	r3, [r3, #28]
 800e832:	4313      	orrs	r3, r2
 800e834:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	4bbf      	ldr	r3, [pc, #764]	; (800eb3c <UART_SetConfig+0x32c>)
 800e83e:	4013      	ands	r3, r2
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	6812      	ldr	r2, [r2, #0]
 800e844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e846:	430b      	orrs	r3, r1
 800e848:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	68da      	ldr	r2, [r3, #12]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	430a      	orrs	r2, r1
 800e85e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4ab5      	ldr	r2, [pc, #724]	; (800eb40 <UART_SetConfig+0x330>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d004      	beq.n	800e87a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6a1b      	ldr	r3, [r3, #32]
 800e874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e876:	4313      	orrs	r3, r2
 800e878:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	4bb0      	ldr	r3, [pc, #704]	; (800eb44 <UART_SetConfig+0x334>)
 800e882:	4013      	ands	r3, r2
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	6812      	ldr	r2, [r2, #0]
 800e888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e88a:	430b      	orrs	r3, r1
 800e88c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e894:	f023 010f 	bic.w	r1, r3, #15
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	430a      	orrs	r2, r1
 800e8a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4aa7      	ldr	r2, [pc, #668]	; (800eb48 <UART_SetConfig+0x338>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d176      	bne.n	800e99c <UART_SetConfig+0x18c>
 800e8ae:	4ba7      	ldr	r3, [pc, #668]	; (800eb4c <UART_SetConfig+0x33c>)
 800e8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8b6:	2b28      	cmp	r3, #40	; 0x28
 800e8b8:	d86c      	bhi.n	800e994 <UART_SetConfig+0x184>
 800e8ba:	a201      	add	r2, pc, #4	; (adr r2, 800e8c0 <UART_SetConfig+0xb0>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e965 	.word	0x0800e965
 800e8c4:	0800e995 	.word	0x0800e995
 800e8c8:	0800e995 	.word	0x0800e995
 800e8cc:	0800e995 	.word	0x0800e995
 800e8d0:	0800e995 	.word	0x0800e995
 800e8d4:	0800e995 	.word	0x0800e995
 800e8d8:	0800e995 	.word	0x0800e995
 800e8dc:	0800e995 	.word	0x0800e995
 800e8e0:	0800e96d 	.word	0x0800e96d
 800e8e4:	0800e995 	.word	0x0800e995
 800e8e8:	0800e995 	.word	0x0800e995
 800e8ec:	0800e995 	.word	0x0800e995
 800e8f0:	0800e995 	.word	0x0800e995
 800e8f4:	0800e995 	.word	0x0800e995
 800e8f8:	0800e995 	.word	0x0800e995
 800e8fc:	0800e995 	.word	0x0800e995
 800e900:	0800e975 	.word	0x0800e975
 800e904:	0800e995 	.word	0x0800e995
 800e908:	0800e995 	.word	0x0800e995
 800e90c:	0800e995 	.word	0x0800e995
 800e910:	0800e995 	.word	0x0800e995
 800e914:	0800e995 	.word	0x0800e995
 800e918:	0800e995 	.word	0x0800e995
 800e91c:	0800e995 	.word	0x0800e995
 800e920:	0800e97d 	.word	0x0800e97d
 800e924:	0800e995 	.word	0x0800e995
 800e928:	0800e995 	.word	0x0800e995
 800e92c:	0800e995 	.word	0x0800e995
 800e930:	0800e995 	.word	0x0800e995
 800e934:	0800e995 	.word	0x0800e995
 800e938:	0800e995 	.word	0x0800e995
 800e93c:	0800e995 	.word	0x0800e995
 800e940:	0800e985 	.word	0x0800e985
 800e944:	0800e995 	.word	0x0800e995
 800e948:	0800e995 	.word	0x0800e995
 800e94c:	0800e995 	.word	0x0800e995
 800e950:	0800e995 	.word	0x0800e995
 800e954:	0800e995 	.word	0x0800e995
 800e958:	0800e995 	.word	0x0800e995
 800e95c:	0800e995 	.word	0x0800e995
 800e960:	0800e98d 	.word	0x0800e98d
 800e964:	2301      	movs	r3, #1
 800e966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e96a:	e222      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e96c:	2304      	movs	r3, #4
 800e96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e972:	e21e      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e974:	2308      	movs	r3, #8
 800e976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e97a:	e21a      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e97c:	2310      	movs	r3, #16
 800e97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e982:	e216      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e984:	2320      	movs	r3, #32
 800e986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e98a:	e212      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e98c:	2340      	movs	r3, #64	; 0x40
 800e98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e992:	e20e      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e994:	2380      	movs	r3, #128	; 0x80
 800e996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e99a:	e20a      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a6b      	ldr	r2, [pc, #428]	; (800eb50 <UART_SetConfig+0x340>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d130      	bne.n	800ea08 <UART_SetConfig+0x1f8>
 800e9a6:	4b69      	ldr	r3, [pc, #420]	; (800eb4c <UART_SetConfig+0x33c>)
 800e9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9aa:	f003 0307 	and.w	r3, r3, #7
 800e9ae:	2b05      	cmp	r3, #5
 800e9b0:	d826      	bhi.n	800ea00 <UART_SetConfig+0x1f0>
 800e9b2:	a201      	add	r2, pc, #4	; (adr r2, 800e9b8 <UART_SetConfig+0x1a8>)
 800e9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b8:	0800e9d1 	.word	0x0800e9d1
 800e9bc:	0800e9d9 	.word	0x0800e9d9
 800e9c0:	0800e9e1 	.word	0x0800e9e1
 800e9c4:	0800e9e9 	.word	0x0800e9e9
 800e9c8:	0800e9f1 	.word	0x0800e9f1
 800e9cc:	0800e9f9 	.word	0x0800e9f9
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9d6:	e1ec      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e9d8:	2304      	movs	r3, #4
 800e9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9de:	e1e8      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e9e0:	2308      	movs	r3, #8
 800e9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9e6:	e1e4      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e9e8:	2310      	movs	r3, #16
 800e9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ee:	e1e0      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e9f0:	2320      	movs	r3, #32
 800e9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9f6:	e1dc      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800e9f8:	2340      	movs	r3, #64	; 0x40
 800e9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9fe:	e1d8      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea00:	2380      	movs	r3, #128	; 0x80
 800ea02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea06:	e1d4      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a51      	ldr	r2, [pc, #324]	; (800eb54 <UART_SetConfig+0x344>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d130      	bne.n	800ea74 <UART_SetConfig+0x264>
 800ea12:	4b4e      	ldr	r3, [pc, #312]	; (800eb4c <UART_SetConfig+0x33c>)
 800ea14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	2b05      	cmp	r3, #5
 800ea1c:	d826      	bhi.n	800ea6c <UART_SetConfig+0x25c>
 800ea1e:	a201      	add	r2, pc, #4	; (adr r2, 800ea24 <UART_SetConfig+0x214>)
 800ea20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea24:	0800ea3d 	.word	0x0800ea3d
 800ea28:	0800ea45 	.word	0x0800ea45
 800ea2c:	0800ea4d 	.word	0x0800ea4d
 800ea30:	0800ea55 	.word	0x0800ea55
 800ea34:	0800ea5d 	.word	0x0800ea5d
 800ea38:	0800ea65 	.word	0x0800ea65
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea42:	e1b6      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea44:	2304      	movs	r3, #4
 800ea46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea4a:	e1b2      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea4c:	2308      	movs	r3, #8
 800ea4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea52:	e1ae      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea54:	2310      	movs	r3, #16
 800ea56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea5a:	e1aa      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea5c:	2320      	movs	r3, #32
 800ea5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea62:	e1a6      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea64:	2340      	movs	r3, #64	; 0x40
 800ea66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea6a:	e1a2      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea6c:	2380      	movs	r3, #128	; 0x80
 800ea6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea72:	e19e      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a37      	ldr	r2, [pc, #220]	; (800eb58 <UART_SetConfig+0x348>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d130      	bne.n	800eae0 <UART_SetConfig+0x2d0>
 800ea7e:	4b33      	ldr	r3, [pc, #204]	; (800eb4c <UART_SetConfig+0x33c>)
 800ea80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea82:	f003 0307 	and.w	r3, r3, #7
 800ea86:	2b05      	cmp	r3, #5
 800ea88:	d826      	bhi.n	800ead8 <UART_SetConfig+0x2c8>
 800ea8a:	a201      	add	r2, pc, #4	; (adr r2, 800ea90 <UART_SetConfig+0x280>)
 800ea8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea90:	0800eaa9 	.word	0x0800eaa9
 800ea94:	0800eab1 	.word	0x0800eab1
 800ea98:	0800eab9 	.word	0x0800eab9
 800ea9c:	0800eac1 	.word	0x0800eac1
 800eaa0:	0800eac9 	.word	0x0800eac9
 800eaa4:	0800ead1 	.word	0x0800ead1
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaae:	e180      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eab0:	2304      	movs	r3, #4
 800eab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eab6:	e17c      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eab8:	2308      	movs	r3, #8
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eabe:	e178      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eac0:	2310      	movs	r3, #16
 800eac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eac6:	e174      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eac8:	2320      	movs	r3, #32
 800eaca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eace:	e170      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ead0:	2340      	movs	r3, #64	; 0x40
 800ead2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ead6:	e16c      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ead8:	2380      	movs	r3, #128	; 0x80
 800eada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eade:	e168      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a1d      	ldr	r2, [pc, #116]	; (800eb5c <UART_SetConfig+0x34c>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d142      	bne.n	800eb70 <UART_SetConfig+0x360>
 800eaea:	4b18      	ldr	r3, [pc, #96]	; (800eb4c <UART_SetConfig+0x33c>)
 800eaec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaee:	f003 0307 	and.w	r3, r3, #7
 800eaf2:	2b05      	cmp	r3, #5
 800eaf4:	d838      	bhi.n	800eb68 <UART_SetConfig+0x358>
 800eaf6:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <UART_SetConfig+0x2ec>)
 800eaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafc:	0800eb15 	.word	0x0800eb15
 800eb00:	0800eb1d 	.word	0x0800eb1d
 800eb04:	0800eb25 	.word	0x0800eb25
 800eb08:	0800eb2d 	.word	0x0800eb2d
 800eb0c:	0800eb35 	.word	0x0800eb35
 800eb10:	0800eb61 	.word	0x0800eb61
 800eb14:	2300      	movs	r3, #0
 800eb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb1a:	e14a      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eb1c:	2304      	movs	r3, #4
 800eb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb22:	e146      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eb24:	2308      	movs	r3, #8
 800eb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2a:	e142      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eb2c:	2310      	movs	r3, #16
 800eb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb32:	e13e      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eb34:	2320      	movs	r3, #32
 800eb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3a:	e13a      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eb3c:	cfff69f3 	.word	0xcfff69f3
 800eb40:	58000c00 	.word	0x58000c00
 800eb44:	11fff4ff 	.word	0x11fff4ff
 800eb48:	40011000 	.word	0x40011000
 800eb4c:	58024400 	.word	0x58024400
 800eb50:	40004400 	.word	0x40004400
 800eb54:	40004800 	.word	0x40004800
 800eb58:	40004c00 	.word	0x40004c00
 800eb5c:	40005000 	.word	0x40005000
 800eb60:	2340      	movs	r3, #64	; 0x40
 800eb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb66:	e124      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eb68:	2380      	movs	r3, #128	; 0x80
 800eb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6e:	e120      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4acc      	ldr	r2, [pc, #816]	; (800eea8 <UART_SetConfig+0x698>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d176      	bne.n	800ec68 <UART_SetConfig+0x458>
 800eb7a:	4bcc      	ldr	r3, [pc, #816]	; (800eeac <UART_SetConfig+0x69c>)
 800eb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb82:	2b28      	cmp	r3, #40	; 0x28
 800eb84:	d86c      	bhi.n	800ec60 <UART_SetConfig+0x450>
 800eb86:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <UART_SetConfig+0x37c>)
 800eb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8c:	0800ec31 	.word	0x0800ec31
 800eb90:	0800ec61 	.word	0x0800ec61
 800eb94:	0800ec61 	.word	0x0800ec61
 800eb98:	0800ec61 	.word	0x0800ec61
 800eb9c:	0800ec61 	.word	0x0800ec61
 800eba0:	0800ec61 	.word	0x0800ec61
 800eba4:	0800ec61 	.word	0x0800ec61
 800eba8:	0800ec61 	.word	0x0800ec61
 800ebac:	0800ec39 	.word	0x0800ec39
 800ebb0:	0800ec61 	.word	0x0800ec61
 800ebb4:	0800ec61 	.word	0x0800ec61
 800ebb8:	0800ec61 	.word	0x0800ec61
 800ebbc:	0800ec61 	.word	0x0800ec61
 800ebc0:	0800ec61 	.word	0x0800ec61
 800ebc4:	0800ec61 	.word	0x0800ec61
 800ebc8:	0800ec61 	.word	0x0800ec61
 800ebcc:	0800ec41 	.word	0x0800ec41
 800ebd0:	0800ec61 	.word	0x0800ec61
 800ebd4:	0800ec61 	.word	0x0800ec61
 800ebd8:	0800ec61 	.word	0x0800ec61
 800ebdc:	0800ec61 	.word	0x0800ec61
 800ebe0:	0800ec61 	.word	0x0800ec61
 800ebe4:	0800ec61 	.word	0x0800ec61
 800ebe8:	0800ec61 	.word	0x0800ec61
 800ebec:	0800ec49 	.word	0x0800ec49
 800ebf0:	0800ec61 	.word	0x0800ec61
 800ebf4:	0800ec61 	.word	0x0800ec61
 800ebf8:	0800ec61 	.word	0x0800ec61
 800ebfc:	0800ec61 	.word	0x0800ec61
 800ec00:	0800ec61 	.word	0x0800ec61
 800ec04:	0800ec61 	.word	0x0800ec61
 800ec08:	0800ec61 	.word	0x0800ec61
 800ec0c:	0800ec51 	.word	0x0800ec51
 800ec10:	0800ec61 	.word	0x0800ec61
 800ec14:	0800ec61 	.word	0x0800ec61
 800ec18:	0800ec61 	.word	0x0800ec61
 800ec1c:	0800ec61 	.word	0x0800ec61
 800ec20:	0800ec61 	.word	0x0800ec61
 800ec24:	0800ec61 	.word	0x0800ec61
 800ec28:	0800ec61 	.word	0x0800ec61
 800ec2c:	0800ec59 	.word	0x0800ec59
 800ec30:	2301      	movs	r3, #1
 800ec32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec36:	e0bc      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ec38:	2304      	movs	r3, #4
 800ec3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec3e:	e0b8      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ec40:	2308      	movs	r3, #8
 800ec42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec46:	e0b4      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ec48:	2310      	movs	r3, #16
 800ec4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec4e:	e0b0      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ec50:	2320      	movs	r3, #32
 800ec52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec56:	e0ac      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ec58:	2340      	movs	r3, #64	; 0x40
 800ec5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec5e:	e0a8      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ec60:	2380      	movs	r3, #128	; 0x80
 800ec62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec66:	e0a4      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a90      	ldr	r2, [pc, #576]	; (800eeb0 <UART_SetConfig+0x6a0>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d130      	bne.n	800ecd4 <UART_SetConfig+0x4c4>
 800ec72:	4b8e      	ldr	r3, [pc, #568]	; (800eeac <UART_SetConfig+0x69c>)
 800ec74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec76:	f003 0307 	and.w	r3, r3, #7
 800ec7a:	2b05      	cmp	r3, #5
 800ec7c:	d826      	bhi.n	800eccc <UART_SetConfig+0x4bc>
 800ec7e:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <UART_SetConfig+0x474>)
 800ec80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec84:	0800ec9d 	.word	0x0800ec9d
 800ec88:	0800eca5 	.word	0x0800eca5
 800ec8c:	0800ecad 	.word	0x0800ecad
 800ec90:	0800ecb5 	.word	0x0800ecb5
 800ec94:	0800ecbd 	.word	0x0800ecbd
 800ec98:	0800ecc5 	.word	0x0800ecc5
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eca2:	e086      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eca4:	2304      	movs	r3, #4
 800eca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecaa:	e082      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ecac:	2308      	movs	r3, #8
 800ecae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecb2:	e07e      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ecb4:	2310      	movs	r3, #16
 800ecb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecba:	e07a      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ecbc:	2320      	movs	r3, #32
 800ecbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecc2:	e076      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ecc4:	2340      	movs	r3, #64	; 0x40
 800ecc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecca:	e072      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eccc:	2380      	movs	r3, #128	; 0x80
 800ecce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecd2:	e06e      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a76      	ldr	r2, [pc, #472]	; (800eeb4 <UART_SetConfig+0x6a4>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d130      	bne.n	800ed40 <UART_SetConfig+0x530>
 800ecde:	4b73      	ldr	r3, [pc, #460]	; (800eeac <UART_SetConfig+0x69c>)
 800ece0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece2:	f003 0307 	and.w	r3, r3, #7
 800ece6:	2b05      	cmp	r3, #5
 800ece8:	d826      	bhi.n	800ed38 <UART_SetConfig+0x528>
 800ecea:	a201      	add	r2, pc, #4	; (adr r2, 800ecf0 <UART_SetConfig+0x4e0>)
 800ecec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf0:	0800ed09 	.word	0x0800ed09
 800ecf4:	0800ed11 	.word	0x0800ed11
 800ecf8:	0800ed19 	.word	0x0800ed19
 800ecfc:	0800ed21 	.word	0x0800ed21
 800ed00:	0800ed29 	.word	0x0800ed29
 800ed04:	0800ed31 	.word	0x0800ed31
 800ed08:	2300      	movs	r3, #0
 800ed0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed0e:	e050      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed10:	2304      	movs	r3, #4
 800ed12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed16:	e04c      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed18:	2308      	movs	r3, #8
 800ed1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed1e:	e048      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed20:	2310      	movs	r3, #16
 800ed22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed26:	e044      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed28:	2320      	movs	r3, #32
 800ed2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed2e:	e040      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed30:	2340      	movs	r3, #64	; 0x40
 800ed32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed36:	e03c      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed38:	2380      	movs	r3, #128	; 0x80
 800ed3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed3e:	e038      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a5c      	ldr	r2, [pc, #368]	; (800eeb8 <UART_SetConfig+0x6a8>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d130      	bne.n	800edac <UART_SetConfig+0x59c>
 800ed4a:	4b58      	ldr	r3, [pc, #352]	; (800eeac <UART_SetConfig+0x69c>)
 800ed4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed4e:	f003 0307 	and.w	r3, r3, #7
 800ed52:	2b05      	cmp	r3, #5
 800ed54:	d826      	bhi.n	800eda4 <UART_SetConfig+0x594>
 800ed56:	a201      	add	r2, pc, #4	; (adr r2, 800ed5c <UART_SetConfig+0x54c>)
 800ed58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5c:	0800ed75 	.word	0x0800ed75
 800ed60:	0800ed7d 	.word	0x0800ed7d
 800ed64:	0800ed85 	.word	0x0800ed85
 800ed68:	0800ed8d 	.word	0x0800ed8d
 800ed6c:	0800ed95 	.word	0x0800ed95
 800ed70:	0800ed9d 	.word	0x0800ed9d
 800ed74:	2302      	movs	r3, #2
 800ed76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed7a:	e01a      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed7c:	2304      	movs	r3, #4
 800ed7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed82:	e016      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed84:	2308      	movs	r3, #8
 800ed86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8a:	e012      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed8c:	2310      	movs	r3, #16
 800ed8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed92:	e00e      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed94:	2320      	movs	r3, #32
 800ed96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed9a:	e00a      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800ed9c:	2340      	movs	r3, #64	; 0x40
 800ed9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eda2:	e006      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800eda4:	2380      	movs	r3, #128	; 0x80
 800eda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edaa:	e002      	b.n	800edb2 <UART_SetConfig+0x5a2>
 800edac:	2380      	movs	r3, #128	; 0x80
 800edae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4a40      	ldr	r2, [pc, #256]	; (800eeb8 <UART_SetConfig+0x6a8>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	f040 80ef 	bne.w	800ef9c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800edbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edc2:	2b20      	cmp	r3, #32
 800edc4:	dc46      	bgt.n	800ee54 <UART_SetConfig+0x644>
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	f2c0 8081 	blt.w	800eece <UART_SetConfig+0x6be>
 800edcc:	3b02      	subs	r3, #2
 800edce:	2b1e      	cmp	r3, #30
 800edd0:	d87d      	bhi.n	800eece <UART_SetConfig+0x6be>
 800edd2:	a201      	add	r2, pc, #4	; (adr r2, 800edd8 <UART_SetConfig+0x5c8>)
 800edd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd8:	0800ee5b 	.word	0x0800ee5b
 800eddc:	0800eecf 	.word	0x0800eecf
 800ede0:	0800ee63 	.word	0x0800ee63
 800ede4:	0800eecf 	.word	0x0800eecf
 800ede8:	0800eecf 	.word	0x0800eecf
 800edec:	0800eecf 	.word	0x0800eecf
 800edf0:	0800ee73 	.word	0x0800ee73
 800edf4:	0800eecf 	.word	0x0800eecf
 800edf8:	0800eecf 	.word	0x0800eecf
 800edfc:	0800eecf 	.word	0x0800eecf
 800ee00:	0800eecf 	.word	0x0800eecf
 800ee04:	0800eecf 	.word	0x0800eecf
 800ee08:	0800eecf 	.word	0x0800eecf
 800ee0c:	0800eecf 	.word	0x0800eecf
 800ee10:	0800ee83 	.word	0x0800ee83
 800ee14:	0800eecf 	.word	0x0800eecf
 800ee18:	0800eecf 	.word	0x0800eecf
 800ee1c:	0800eecf 	.word	0x0800eecf
 800ee20:	0800eecf 	.word	0x0800eecf
 800ee24:	0800eecf 	.word	0x0800eecf
 800ee28:	0800eecf 	.word	0x0800eecf
 800ee2c:	0800eecf 	.word	0x0800eecf
 800ee30:	0800eecf 	.word	0x0800eecf
 800ee34:	0800eecf 	.word	0x0800eecf
 800ee38:	0800eecf 	.word	0x0800eecf
 800ee3c:	0800eecf 	.word	0x0800eecf
 800ee40:	0800eecf 	.word	0x0800eecf
 800ee44:	0800eecf 	.word	0x0800eecf
 800ee48:	0800eecf 	.word	0x0800eecf
 800ee4c:	0800eecf 	.word	0x0800eecf
 800ee50:	0800eec1 	.word	0x0800eec1
 800ee54:	2b40      	cmp	r3, #64	; 0x40
 800ee56:	d036      	beq.n	800eec6 <UART_SetConfig+0x6b6>
 800ee58:	e039      	b.n	800eece <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee5a:	f7fc fe5b 	bl	800bb14 <HAL_RCCEx_GetD3PCLK1Freq>
 800ee5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ee60:	e03b      	b.n	800eeda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee62:	f107 0314 	add.w	r3, r7, #20
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fc fe6a 	bl	800bb40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee70:	e033      	b.n	800eeda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee72:	f107 0308 	add.w	r3, r7, #8
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fc ffb6 	bl	800bde8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee80:	e02b      	b.n	800eeda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee82:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <UART_SetConfig+0x69c>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f003 0320 	and.w	r3, r3, #32
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d009      	beq.n	800eea2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee8e:	4b07      	ldr	r3, [pc, #28]	; (800eeac <UART_SetConfig+0x69c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	08db      	lsrs	r3, r3, #3
 800ee94:	f003 0303 	and.w	r3, r3, #3
 800ee98:	4a08      	ldr	r2, [pc, #32]	; (800eebc <UART_SetConfig+0x6ac>)
 800ee9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eea0:	e01b      	b.n	800eeda <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800eea2:	4b06      	ldr	r3, [pc, #24]	; (800eebc <UART_SetConfig+0x6ac>)
 800eea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eea6:	e018      	b.n	800eeda <UART_SetConfig+0x6ca>
 800eea8:	40011400 	.word	0x40011400
 800eeac:	58024400 	.word	0x58024400
 800eeb0:	40007800 	.word	0x40007800
 800eeb4:	40007c00 	.word	0x40007c00
 800eeb8:	58000c00 	.word	0x58000c00
 800eebc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eec0:	4bc4      	ldr	r3, [pc, #784]	; (800f1d4 <UART_SetConfig+0x9c4>)
 800eec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eec4:	e009      	b.n	800eeda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eeca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eecc:	e005      	b.n	800eeda <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800eece:	2300      	movs	r3, #0
 800eed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800eed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f000 81da 	beq.w	800f296 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee6:	4abc      	ldr	r2, [pc, #752]	; (800f1d8 <UART_SetConfig+0x9c8>)
 800eee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeec:	461a      	mov	r2, r3
 800eeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eef4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	685a      	ldr	r2, [r3, #4]
 800eefa:	4613      	mov	r3, r2
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	4413      	add	r3, r2
 800ef00:	6a3a      	ldr	r2, [r7, #32]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d305      	bcc.n	800ef12 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef0c:	6a3a      	ldr	r2, [r7, #32]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d903      	bls.n	800ef1a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ef12:	2301      	movs	r3, #1
 800ef14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ef18:	e1bd      	b.n	800f296 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f04f 0100 	mov.w	r1, #0
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef26:	4aac      	ldr	r2, [pc, #688]	; (800f1d8 <UART_SetConfig+0x9c8>)
 800ef28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	f04f 0300 	mov.w	r3, #0
 800ef32:	f7f1 fa2d 	bl	8000390 <__aeabi_uldivmod>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	4610      	mov	r0, r2
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	f04f 0200 	mov.w	r2, #0
 800ef42:	f04f 0300 	mov.w	r3, #0
 800ef46:	020b      	lsls	r3, r1, #8
 800ef48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef4c:	0202      	lsls	r2, r0, #8
 800ef4e:	6879      	ldr	r1, [r7, #4]
 800ef50:	6849      	ldr	r1, [r1, #4]
 800ef52:	0849      	lsrs	r1, r1, #1
 800ef54:	4608      	mov	r0, r1
 800ef56:	f04f 0100 	mov.w	r1, #0
 800ef5a:	1814      	adds	r4, r2, r0
 800ef5c:	eb43 0501 	adc.w	r5, r3, r1
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	461a      	mov	r2, r3
 800ef66:	f04f 0300 	mov.w	r3, #0
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	f7f1 fa0f 	bl	8000390 <__aeabi_uldivmod>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	4613      	mov	r3, r2
 800ef78:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef80:	d308      	bcc.n	800ef94 <UART_SetConfig+0x784>
 800ef82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef88:	d204      	bcs.n	800ef94 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef90:	60da      	str	r2, [r3, #12]
 800ef92:	e180      	b.n	800f296 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ef9a:	e17c      	b.n	800f296 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	69db      	ldr	r3, [r3, #28]
 800efa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efa4:	f040 80be 	bne.w	800f124 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800efa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800efac:	2b20      	cmp	r3, #32
 800efae:	dc49      	bgt.n	800f044 <UART_SetConfig+0x834>
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	db7c      	blt.n	800f0ae <UART_SetConfig+0x89e>
 800efb4:	2b20      	cmp	r3, #32
 800efb6:	d87a      	bhi.n	800f0ae <UART_SetConfig+0x89e>
 800efb8:	a201      	add	r2, pc, #4	; (adr r2, 800efc0 <UART_SetConfig+0x7b0>)
 800efba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbe:	bf00      	nop
 800efc0:	0800f04b 	.word	0x0800f04b
 800efc4:	0800f053 	.word	0x0800f053
 800efc8:	0800f0af 	.word	0x0800f0af
 800efcc:	0800f0af 	.word	0x0800f0af
 800efd0:	0800f05b 	.word	0x0800f05b
 800efd4:	0800f0af 	.word	0x0800f0af
 800efd8:	0800f0af 	.word	0x0800f0af
 800efdc:	0800f0af 	.word	0x0800f0af
 800efe0:	0800f06b 	.word	0x0800f06b
 800efe4:	0800f0af 	.word	0x0800f0af
 800efe8:	0800f0af 	.word	0x0800f0af
 800efec:	0800f0af 	.word	0x0800f0af
 800eff0:	0800f0af 	.word	0x0800f0af
 800eff4:	0800f0af 	.word	0x0800f0af
 800eff8:	0800f0af 	.word	0x0800f0af
 800effc:	0800f0af 	.word	0x0800f0af
 800f000:	0800f07b 	.word	0x0800f07b
 800f004:	0800f0af 	.word	0x0800f0af
 800f008:	0800f0af 	.word	0x0800f0af
 800f00c:	0800f0af 	.word	0x0800f0af
 800f010:	0800f0af 	.word	0x0800f0af
 800f014:	0800f0af 	.word	0x0800f0af
 800f018:	0800f0af 	.word	0x0800f0af
 800f01c:	0800f0af 	.word	0x0800f0af
 800f020:	0800f0af 	.word	0x0800f0af
 800f024:	0800f0af 	.word	0x0800f0af
 800f028:	0800f0af 	.word	0x0800f0af
 800f02c:	0800f0af 	.word	0x0800f0af
 800f030:	0800f0af 	.word	0x0800f0af
 800f034:	0800f0af 	.word	0x0800f0af
 800f038:	0800f0af 	.word	0x0800f0af
 800f03c:	0800f0af 	.word	0x0800f0af
 800f040:	0800f0a1 	.word	0x0800f0a1
 800f044:	2b40      	cmp	r3, #64	; 0x40
 800f046:	d02e      	beq.n	800f0a6 <UART_SetConfig+0x896>
 800f048:	e031      	b.n	800f0ae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f04a:	f7fb fdf7 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 800f04e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f050:	e033      	b.n	800f0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f052:	f7fb fe09 	bl	800ac68 <HAL_RCC_GetPCLK2Freq>
 800f056:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f058:	e02f      	b.n	800f0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f05a:	f107 0314 	add.w	r3, r7, #20
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fc fd6e 	bl	800bb40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f068:	e027      	b.n	800f0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f06a:	f107 0308 	add.w	r3, r7, #8
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fc feba 	bl	800bde8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f078:	e01f      	b.n	800f0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f07a:	4b58      	ldr	r3, [pc, #352]	; (800f1dc <UART_SetConfig+0x9cc>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f003 0320 	and.w	r3, r3, #32
 800f082:	2b00      	cmp	r3, #0
 800f084:	d009      	beq.n	800f09a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f086:	4b55      	ldr	r3, [pc, #340]	; (800f1dc <UART_SetConfig+0x9cc>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	08db      	lsrs	r3, r3, #3
 800f08c:	f003 0303 	and.w	r3, r3, #3
 800f090:	4a53      	ldr	r2, [pc, #332]	; (800f1e0 <UART_SetConfig+0x9d0>)
 800f092:	fa22 f303 	lsr.w	r3, r2, r3
 800f096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f098:	e00f      	b.n	800f0ba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f09a:	4b51      	ldr	r3, [pc, #324]	; (800f1e0 <UART_SetConfig+0x9d0>)
 800f09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f09e:	e00c      	b.n	800f0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0a0:	4b4c      	ldr	r3, [pc, #304]	; (800f1d4 <UART_SetConfig+0x9c4>)
 800f0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0a4:	e009      	b.n	800f0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0ac:	e005      	b.n	800f0ba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f0b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f000 80ea 	beq.w	800f296 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c6:	4a44      	ldr	r2, [pc, #272]	; (800f1d8 <UART_SetConfig+0x9c8>)
 800f0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0d4:	005a      	lsls	r2, r3, #1
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	085b      	lsrs	r3, r3, #1
 800f0dc:	441a      	add	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ea:	2b0f      	cmp	r3, #15
 800f0ec:	d916      	bls.n	800f11c <UART_SetConfig+0x90c>
 800f0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0f4:	d212      	bcs.n	800f11c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	f023 030f 	bic.w	r3, r3, #15
 800f0fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	085b      	lsrs	r3, r3, #1
 800f104:	b29b      	uxth	r3, r3
 800f106:	f003 0307 	and.w	r3, r3, #7
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f10e:	4313      	orrs	r3, r2
 800f110:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f118:	60da      	str	r2, [r3, #12]
 800f11a:	e0bc      	b.n	800f296 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f122:	e0b8      	b.n	800f296 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f128:	2b20      	cmp	r3, #32
 800f12a:	dc4b      	bgt.n	800f1c4 <UART_SetConfig+0x9b4>
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f2c0 8087 	blt.w	800f240 <UART_SetConfig+0xa30>
 800f132:	2b20      	cmp	r3, #32
 800f134:	f200 8084 	bhi.w	800f240 <UART_SetConfig+0xa30>
 800f138:	a201      	add	r2, pc, #4	; (adr r2, 800f140 <UART_SetConfig+0x930>)
 800f13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f13e:	bf00      	nop
 800f140:	0800f1cb 	.word	0x0800f1cb
 800f144:	0800f1e5 	.word	0x0800f1e5
 800f148:	0800f241 	.word	0x0800f241
 800f14c:	0800f241 	.word	0x0800f241
 800f150:	0800f1ed 	.word	0x0800f1ed
 800f154:	0800f241 	.word	0x0800f241
 800f158:	0800f241 	.word	0x0800f241
 800f15c:	0800f241 	.word	0x0800f241
 800f160:	0800f1fd 	.word	0x0800f1fd
 800f164:	0800f241 	.word	0x0800f241
 800f168:	0800f241 	.word	0x0800f241
 800f16c:	0800f241 	.word	0x0800f241
 800f170:	0800f241 	.word	0x0800f241
 800f174:	0800f241 	.word	0x0800f241
 800f178:	0800f241 	.word	0x0800f241
 800f17c:	0800f241 	.word	0x0800f241
 800f180:	0800f20d 	.word	0x0800f20d
 800f184:	0800f241 	.word	0x0800f241
 800f188:	0800f241 	.word	0x0800f241
 800f18c:	0800f241 	.word	0x0800f241
 800f190:	0800f241 	.word	0x0800f241
 800f194:	0800f241 	.word	0x0800f241
 800f198:	0800f241 	.word	0x0800f241
 800f19c:	0800f241 	.word	0x0800f241
 800f1a0:	0800f241 	.word	0x0800f241
 800f1a4:	0800f241 	.word	0x0800f241
 800f1a8:	0800f241 	.word	0x0800f241
 800f1ac:	0800f241 	.word	0x0800f241
 800f1b0:	0800f241 	.word	0x0800f241
 800f1b4:	0800f241 	.word	0x0800f241
 800f1b8:	0800f241 	.word	0x0800f241
 800f1bc:	0800f241 	.word	0x0800f241
 800f1c0:	0800f233 	.word	0x0800f233
 800f1c4:	2b40      	cmp	r3, #64	; 0x40
 800f1c6:	d037      	beq.n	800f238 <UART_SetConfig+0xa28>
 800f1c8:	e03a      	b.n	800f240 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1ca:	f7fb fd37 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 800f1ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f1d0:	e03c      	b.n	800f24c <UART_SetConfig+0xa3c>
 800f1d2:	bf00      	nop
 800f1d4:	003d0900 	.word	0x003d0900
 800f1d8:	0801401c 	.word	0x0801401c
 800f1dc:	58024400 	.word	0x58024400
 800f1e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1e4:	f7fb fd40 	bl	800ac68 <HAL_RCC_GetPCLK2Freq>
 800f1e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f1ea:	e02f      	b.n	800f24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1ec:	f107 0314 	add.w	r3, r7, #20
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fc fca5 	bl	800bb40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1fa:	e027      	b.n	800f24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1fc:	f107 0308 	add.w	r3, r7, #8
 800f200:	4618      	mov	r0, r3
 800f202:	f7fc fdf1 	bl	800bde8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f20a:	e01f      	b.n	800f24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f20c:	4b2c      	ldr	r3, [pc, #176]	; (800f2c0 <UART_SetConfig+0xab0>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f003 0320 	and.w	r3, r3, #32
 800f214:	2b00      	cmp	r3, #0
 800f216:	d009      	beq.n	800f22c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f218:	4b29      	ldr	r3, [pc, #164]	; (800f2c0 <UART_SetConfig+0xab0>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	08db      	lsrs	r3, r3, #3
 800f21e:	f003 0303 	and.w	r3, r3, #3
 800f222:	4a28      	ldr	r2, [pc, #160]	; (800f2c4 <UART_SetConfig+0xab4>)
 800f224:	fa22 f303 	lsr.w	r3, r2, r3
 800f228:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f22a:	e00f      	b.n	800f24c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f22c:	4b25      	ldr	r3, [pc, #148]	; (800f2c4 <UART_SetConfig+0xab4>)
 800f22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f230:	e00c      	b.n	800f24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f232:	4b25      	ldr	r3, [pc, #148]	; (800f2c8 <UART_SetConfig+0xab8>)
 800f234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f236:	e009      	b.n	800f24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f23e:	e005      	b.n	800f24c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f240:	2300      	movs	r3, #0
 800f242:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f24a:	bf00      	nop
    }

    if (pclk != 0U)
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d021      	beq.n	800f296 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	4a1d      	ldr	r2, [pc, #116]	; (800f2cc <UART_SetConfig+0xabc>)
 800f258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f25c:	461a      	mov	r2, r3
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	fbb3 f2f2 	udiv	r2, r3, r2
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	085b      	lsrs	r3, r3, #1
 800f26a:	441a      	add	r2, r3
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	fbb2 f3f3 	udiv	r3, r2, r3
 800f274:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f278:	2b0f      	cmp	r3, #15
 800f27a:	d909      	bls.n	800f290 <UART_SetConfig+0xa80>
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f282:	d205      	bcs.n	800f290 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	b29a      	uxth	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	60da      	str	r2, [r3, #12]
 800f28e:	e002      	b.n	800f296 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f290:	2301      	movs	r3, #1
 800f292:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2201      	movs	r2, #1
 800f29a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f2b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3738      	adds	r7, #56	; 0x38
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bdb0      	pop	{r4, r5, r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	58024400 	.word	0x58024400
 800f2c4:	03d09000 	.word	0x03d09000
 800f2c8:	003d0900 	.word	0x003d0900
 800f2cc:	0801401c 	.word	0x0801401c

0800f2d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2dc:	f003 0301 	and.w	r3, r3, #1
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00a      	beq.n	800f2fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	430a      	orrs	r2, r1
 800f2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	d00a      	beq.n	800f31c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	430a      	orrs	r2, r1
 800f31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00a      	beq.n	800f33e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	430a      	orrs	r2, r1
 800f33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f342:	f003 0308 	and.w	r3, r3, #8
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00a      	beq.n	800f360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	430a      	orrs	r2, r1
 800f35e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f364:	f003 0310 	and.w	r3, r3, #16
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d00a      	beq.n	800f382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	430a      	orrs	r2, r1
 800f380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f386:	f003 0320 	and.w	r3, r3, #32
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00a      	beq.n	800f3a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	430a      	orrs	r2, r1
 800f3a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d01a      	beq.n	800f3e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	430a      	orrs	r2, r1
 800f3c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3ce:	d10a      	bne.n	800f3e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	430a      	orrs	r2, r1
 800f3e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00a      	beq.n	800f408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	430a      	orrs	r2, r1
 800f406:	605a      	str	r2, [r3, #4]
  }
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af02      	add	r7, sp, #8
 800f41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f424:	f7f7 f8d0 	bl	80065c8 <HAL_GetTick>
 800f428:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f003 0308 	and.w	r3, r3, #8
 800f434:	2b08      	cmp	r3, #8
 800f436:	d10e      	bne.n	800f456 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f000 f82f 	bl	800f4aa <UART_WaitOnFlagUntilTimeout>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d001      	beq.n	800f456 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f452:	2303      	movs	r3, #3
 800f454:	e025      	b.n	800f4a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f003 0304 	and.w	r3, r3, #4
 800f460:	2b04      	cmp	r3, #4
 800f462:	d10e      	bne.n	800f482 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f819 	bl	800f4aa <UART_WaitOnFlagUntilTimeout>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d001      	beq.n	800f482 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f47e:	2303      	movs	r3, #3
 800f480:	e00f      	b.n	800f4a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2220      	movs	r2, #32
 800f486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2220      	movs	r2, #32
 800f48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}

0800f4aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b09c      	sub	sp, #112	; 0x70
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	60f8      	str	r0, [r7, #12]
 800f4b2:	60b9      	str	r1, [r7, #8]
 800f4b4:	603b      	str	r3, [r7, #0]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4ba:	e0a9      	b.n	800f610 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c2:	f000 80a5 	beq.w	800f610 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4c6:	f7f7 f87f 	bl	80065c8 <HAL_GetTick>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d302      	bcc.n	800f4dc <UART_WaitOnFlagUntilTimeout+0x32>
 800f4d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d140      	bne.n	800f55e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e4:	e853 3f00 	ldrex	r3, [r3]
 800f4e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4f0:	667b      	str	r3, [r7, #100]	; 0x64
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f500:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f502:	e841 2300 	strex	r3, r2, [r1]
 800f506:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1e6      	bne.n	800f4dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	3308      	adds	r3, #8
 800f514:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f518:	e853 3f00 	ldrex	r3, [r3]
 800f51c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f520:	f023 0301 	bic.w	r3, r3, #1
 800f524:	663b      	str	r3, [r7, #96]	; 0x60
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	3308      	adds	r3, #8
 800f52c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f52e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f530:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f536:	e841 2300 	strex	r3, r2, [r1]
 800f53a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1e5      	bne.n	800f50e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2220      	movs	r2, #32
 800f546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2220      	movs	r2, #32
 800f54e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f55a:	2303      	movs	r3, #3
 800f55c:	e069      	b.n	800f632 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f003 0304 	and.w	r3, r3, #4
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d051      	beq.n	800f610 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	69db      	ldr	r3, [r3, #28]
 800f572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f57a:	d149      	bne.n	800f610 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f584:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	e853 3f00 	ldrex	r3, [r3]
 800f592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f59a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f5a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5ac:	e841 2300 	strex	r3, r2, [r1]
 800f5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1e6      	bne.n	800f586 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	3308      	adds	r3, #8
 800f5be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	e853 3f00 	ldrex	r3, [r3]
 800f5c6:	613b      	str	r3, [r7, #16]
   return(result);
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	f023 0301 	bic.w	r3, r3, #1
 800f5ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	3308      	adds	r3, #8
 800f5d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f5d8:	623a      	str	r2, [r7, #32]
 800f5da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5dc:	69f9      	ldr	r1, [r7, #28]
 800f5de:	6a3a      	ldr	r2, [r7, #32]
 800f5e0:	e841 2300 	strex	r3, r2, [r1]
 800f5e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1e5      	bne.n	800f5b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2220      	movs	r2, #32
 800f5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2220      	movs	r2, #32
 800f600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2200      	movs	r2, #0
 800f608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f60c:	2303      	movs	r3, #3
 800f60e:	e010      	b.n	800f632 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	69da      	ldr	r2, [r3, #28]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	4013      	ands	r3, r2
 800f61a:	68ba      	ldr	r2, [r7, #8]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	bf0c      	ite	eq
 800f620:	2301      	moveq	r3, #1
 800f622:	2300      	movne	r3, #0
 800f624:	b2db      	uxtb	r3, r3
 800f626:	461a      	mov	r2, r3
 800f628:	79fb      	ldrb	r3, [r7, #7]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	f43f af46 	beq.w	800f4bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3770      	adds	r7, #112	; 0x70
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
	...

0800f63c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b096      	sub	sp, #88	; 0x58
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	4613      	mov	r3, r2
 800f648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	88fa      	ldrh	r2, [r7, #6]
 800f654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2200      	movs	r2, #0
 800f65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2222      	movs	r2, #34	; 0x22
 800f664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d02c      	beq.n	800f6ca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f674:	4a42      	ldr	r2, [pc, #264]	; (800f780 <UART_Start_Receive_DMA+0x144>)
 800f676:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f67c:	4a41      	ldr	r2, [pc, #260]	; (800f784 <UART_Start_Receive_DMA+0x148>)
 800f67e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f684:	4a40      	ldr	r2, [pc, #256]	; (800f788 <UART_Start_Receive_DMA+0x14c>)
 800f686:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f68c:	2200      	movs	r2, #0
 800f68e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3324      	adds	r3, #36	; 0x24
 800f69a:	4619      	mov	r1, r3
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	88fb      	ldrh	r3, [r7, #6]
 800f6a4:	f7f7 fe42 	bl	800732c <HAL_DMA_Start_IT>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00d      	beq.n	800f6ca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2210      	movs	r2, #16
 800f6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2220      	movs	r2, #32
 800f6c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e055      	b.n	800f776 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	691b      	ldr	r3, [r3, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d018      	beq.n	800f70c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e2:	e853 3f00 	ldrex	r3, [r3]
 800f6e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6ee:	657b      	str	r3, [r7, #84]	; 0x54
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f700:	e841 2300 	strex	r3, r2, [r1]
 800f704:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1e6      	bne.n	800f6da <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	3308      	adds	r3, #8
 800f712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	e853 3f00 	ldrex	r3, [r3]
 800f71a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	f043 0301 	orr.w	r3, r3, #1
 800f722:	653b      	str	r3, [r7, #80]	; 0x50
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	3308      	adds	r3, #8
 800f72a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f72c:	637a      	str	r2, [r7, #52]	; 0x34
 800f72e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f734:	e841 2300 	strex	r3, r2, [r1]
 800f738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d1e5      	bne.n	800f70c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	3308      	adds	r3, #8
 800f746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	e853 3f00 	ldrex	r3, [r3]
 800f74e:	613b      	str	r3, [r7, #16]
   return(result);
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f756:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	3308      	adds	r3, #8
 800f75e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f760:	623a      	str	r2, [r7, #32]
 800f762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f764:	69f9      	ldr	r1, [r7, #28]
 800f766:	6a3a      	ldr	r2, [r7, #32]
 800f768:	e841 2300 	strex	r3, r2, [r1]
 800f76c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1e5      	bne.n	800f740 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3758      	adds	r7, #88	; 0x58
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	0800f98f 	.word	0x0800f98f
 800f784:	0800fab1 	.word	0x0800fab1
 800f788:	0800fae9 	.word	0x0800fae9

0800f78c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b08f      	sub	sp, #60	; 0x3c
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	e853 3f00 	ldrex	r3, [r3]
 800f7a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7ba:	e841 2300 	strex	r3, r2, [r1]
 800f7be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1e6      	bne.n	800f794 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	3308      	adds	r3, #8
 800f7cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	e853 3f00 	ldrex	r3, [r3]
 800f7d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f7dc:	633b      	str	r3, [r7, #48]	; 0x30
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	3308      	adds	r3, #8
 800f7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7e6:	61ba      	str	r2, [r7, #24]
 800f7e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ea:	6979      	ldr	r1, [r7, #20]
 800f7ec:	69ba      	ldr	r2, [r7, #24]
 800f7ee:	e841 2300 	strex	r3, r2, [r1]
 800f7f2:	613b      	str	r3, [r7, #16]
   return(result);
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1e5      	bne.n	800f7c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2220      	movs	r2, #32
 800f7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f802:	bf00      	nop
 800f804:	373c      	adds	r7, #60	; 0x3c
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
	...

0800f810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f810:	b480      	push	{r7}
 800f812:	b095      	sub	sp, #84	; 0x54
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f820:	e853 3f00 	ldrex	r3, [r3]
 800f824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f82c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	461a      	mov	r2, r3
 800f834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f836:	643b      	str	r3, [r7, #64]	; 0x40
 800f838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f83e:	e841 2300 	strex	r3, r2, [r1]
 800f842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1e6      	bne.n	800f818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f852:	6a3b      	ldr	r3, [r7, #32]
 800f854:	e853 3f00 	ldrex	r3, [r3]
 800f858:	61fb      	str	r3, [r7, #28]
   return(result);
 800f85a:	69fa      	ldr	r2, [r7, #28]
 800f85c:	4b1e      	ldr	r3, [pc, #120]	; (800f8d8 <UART_EndRxTransfer+0xc8>)
 800f85e:	4013      	ands	r3, r2
 800f860:	64bb      	str	r3, [r7, #72]	; 0x48
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3308      	adds	r3, #8
 800f868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f86a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f86c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f872:	e841 2300 	strex	r3, r2, [r1]
 800f876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1e5      	bne.n	800f84a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f882:	2b01      	cmp	r3, #1
 800f884:	d118      	bne.n	800f8b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	e853 3f00 	ldrex	r3, [r3]
 800f892:	60bb      	str	r3, [r7, #8]
   return(result);
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	f023 0310 	bic.w	r3, r3, #16
 800f89a:	647b      	str	r3, [r7, #68]	; 0x44
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8a4:	61bb      	str	r3, [r7, #24]
 800f8a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a8:	6979      	ldr	r1, [r7, #20]
 800f8aa:	69ba      	ldr	r2, [r7, #24]
 800f8ac:	e841 2300 	strex	r3, r2, [r1]
 800f8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1e6      	bne.n	800f886 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2220      	movs	r2, #32
 800f8bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f8cc:	bf00      	nop
 800f8ce:	3754      	adds	r7, #84	; 0x54
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr
 800f8d8:	effffffe 	.word	0xeffffffe

0800f8dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b090      	sub	sp, #64	; 0x40
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	69db      	ldr	r3, [r3, #28]
 800f8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8f2:	d037      	beq.n	800f964 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3308      	adds	r3, #8
 800f902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f906:	e853 3f00 	ldrex	r3, [r3]
 800f90a:	623b      	str	r3, [r7, #32]
   return(result);
 800f90c:	6a3b      	ldr	r3, [r7, #32]
 800f90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f912:	63bb      	str	r3, [r7, #56]	; 0x38
 800f914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	3308      	adds	r3, #8
 800f91a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f91c:	633a      	str	r2, [r7, #48]	; 0x30
 800f91e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f924:	e841 2300 	strex	r3, r2, [r1]
 800f928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1e5      	bne.n	800f8fc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	e853 3f00 	ldrex	r3, [r3]
 800f93c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f944:	637b      	str	r3, [r7, #52]	; 0x34
 800f946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	461a      	mov	r2, r3
 800f94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f94e:	61fb      	str	r3, [r7, #28]
 800f950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f952:	69b9      	ldr	r1, [r7, #24]
 800f954:	69fa      	ldr	r2, [r7, #28]
 800f956:	e841 2300 	strex	r3, r2, [r1]
 800f95a:	617b      	str	r3, [r7, #20]
   return(result);
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1e6      	bne.n	800f930 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f962:	e002      	b.n	800f96a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800f964:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f966:	f7fe ff21 	bl	800e7ac <HAL_UART_TxCpltCallback>
}
 800f96a:	bf00      	nop
 800f96c:	3740      	adds	r7, #64	; 0x40
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}

0800f972 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b084      	sub	sp, #16
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f97e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7fe ff1d 	bl	800e7c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f986:	bf00      	nop
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b09c      	sub	sp, #112	; 0x70
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a4:	d071      	beq.n	800fa8a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9b6:	e853 3f00 	ldrex	r3, [r3]
 800f9ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f9bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f9cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f9d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9d4:	e841 2300 	strex	r3, r2, [r1]
 800f9d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1e6      	bne.n	800f9ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ea:	e853 3f00 	ldrex	r3, [r3]
 800f9ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f2:	f023 0301 	bic.w	r3, r3, #1
 800f9f6:	667b      	str	r3, [r7, #100]	; 0x64
 800f9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	3308      	adds	r3, #8
 800f9fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa00:	647a      	str	r2, [r7, #68]	; 0x44
 800fa02:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa08:	e841 2300 	strex	r3, r2, [r1]
 800fa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d1e5      	bne.n	800f9e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3308      	adds	r3, #8
 800fa1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1e:	e853 3f00 	ldrex	r3, [r3]
 800fa22:	623b      	str	r3, [r7, #32]
   return(result);
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa2a:	663b      	str	r3, [r7, #96]	; 0x60
 800fa2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	3308      	adds	r3, #8
 800fa32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa34:	633a      	str	r2, [r7, #48]	; 0x30
 800fa36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa3c:	e841 2300 	strex	r3, r2, [r1]
 800fa40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d1e5      	bne.n	800fa14 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fa48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa4a:	2220      	movs	r2, #32
 800fa4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d118      	bne.n	800fa8a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	e853 3f00 	ldrex	r3, [r3]
 800fa64:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f023 0310 	bic.w	r3, r3, #16
 800fa6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa76:	61fb      	str	r3, [r7, #28]
 800fa78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7a:	69b9      	ldr	r1, [r7, #24]
 800fa7c:	69fa      	ldr	r2, [r7, #28]
 800fa7e:	e841 2300 	strex	r3, r2, [r1]
 800fa82:	617b      	str	r3, [r7, #20]
   return(result);
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1e6      	bne.n	800fa58 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d107      	bne.n	800faa2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa98:	4619      	mov	r1, r3
 800fa9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa9c:	f7f3 fa6e 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800faa0:	e002      	b.n	800faa8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800faa2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800faa4:	f7fe fe96 	bl	800e7d4 <HAL_UART_RxCpltCallback>
}
 800faa8:	bf00      	nop
 800faaa:	3770      	adds	r7, #112	; 0x70
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fabc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	d109      	bne.n	800fada <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800facc:	085b      	lsrs	r3, r3, #1
 800face:	b29b      	uxth	r3, r3
 800fad0:	4619      	mov	r1, r3
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f7f3 fa52 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fad8:	e002      	b.n	800fae0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f7fe fe84 	bl	800e7e8 <HAL_UART_RxHalfCpltCallback>
}
 800fae0:	bf00      	nop
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faf4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fafc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb04:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb10:	2b80      	cmp	r3, #128	; 0x80
 800fb12:	d109      	bne.n	800fb28 <UART_DMAError+0x40>
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	2b21      	cmp	r3, #33	; 0x21
 800fb18:	d106      	bne.n	800fb28 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fb22:	6978      	ldr	r0, [r7, #20]
 800fb24:	f7ff fe32 	bl	800f78c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb32:	2b40      	cmp	r3, #64	; 0x40
 800fb34:	d109      	bne.n	800fb4a <UART_DMAError+0x62>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2b22      	cmp	r3, #34	; 0x22
 800fb3a:	d106      	bne.n	800fb4a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fb44:	6978      	ldr	r0, [r7, #20]
 800fb46:	f7ff fe63 	bl	800f810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb50:	f043 0210 	orr.w	r2, r3, #16
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb5a:	6978      	ldr	r0, [r7, #20]
 800fb5c:	f7fe fe4e 	bl	800e7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb60:	bf00      	nop
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7fe fe38 	bl	800e7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb8c:	bf00      	nop
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b088      	sub	sp, #32
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	e853 3f00 	ldrex	r3, [r3]
 800fba8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbb0:	61fb      	str	r3, [r7, #28]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	61bb      	str	r3, [r7, #24]
 800fbbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbbe:	6979      	ldr	r1, [r7, #20]
 800fbc0:	69ba      	ldr	r2, [r7, #24]
 800fbc2:	e841 2300 	strex	r3, r2, [r1]
 800fbc6:	613b      	str	r3, [r7, #16]
   return(result);
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1e6      	bne.n	800fb9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2220      	movs	r2, #32
 800fbd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7fe fde5 	bl	800e7ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fbe2:	bf00      	nop
 800fbe4:	3720      	adds	r7, #32
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}

0800fbea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fbea:	b480      	push	{r7}
 800fbec:	b083      	sub	sp, #12
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fbf2:	bf00      	nop
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b083      	sub	sp, #12
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fc06:	bf00      	nop
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b083      	sub	sp, #12
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fc1a:	bf00      	nop
 800fc1c:	370c      	adds	r7, #12
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr

0800fc26 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b084      	sub	sp, #16
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d101      	bne.n	800fc3c <HAL_UARTEx_EnableFifoMode+0x16>
 800fc38:	2302      	movs	r3, #2
 800fc3a:	e02b      	b.n	800fc94 <HAL_UARTEx_EnableFifoMode+0x6e>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2224      	movs	r2, #36	; 0x24
 800fc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f022 0201 	bic.w	r2, r2, #1
 800fc62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800fc72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f91f 	bl	800fec0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2220      	movs	r2, #32
 800fc86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d101      	bne.n	800fcb2 <HAL_UARTEx_DisableFifoMode+0x16>
 800fcae:	2302      	movs	r3, #2
 800fcb0:	e027      	b.n	800fd02 <HAL_UARTEx_DisableFifoMode+0x66>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2224      	movs	r2, #36	; 0x24
 800fcbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	681a      	ldr	r2, [r3, #0]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f022 0201 	bic.w	r2, r2, #1
 800fcd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2200      	movs	r2, #0
 800fce6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2220      	movs	r2, #32
 800fcf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr

0800fd0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d101      	bne.n	800fd26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd22:	2302      	movs	r3, #2
 800fd24:	e02d      	b.n	800fd82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2224      	movs	r2, #36	; 0x24
 800fd32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f022 0201 	bic.w	r2, r2, #1
 800fd4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	430a      	orrs	r2, r1
 800fd60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 f8ac 	bl	800fec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68fa      	ldr	r2, [r7, #12]
 800fd6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2220      	movs	r2, #32
 800fd74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
 800fd92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d101      	bne.n	800fda2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fd9e:	2302      	movs	r3, #2
 800fda0:	e02d      	b.n	800fdfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2201      	movs	r2, #1
 800fda6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2224      	movs	r2, #36	; 0x24
 800fdae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f022 0201 	bic.w	r2, r2, #1
 800fdc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	430a      	orrs	r2, r1
 800fddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 f86e 	bl	800fec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2220      	movs	r2, #32
 800fdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b08c      	sub	sp, #48	; 0x30
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	60f8      	str	r0, [r7, #12]
 800fe0e:	60b9      	str	r1, [r7, #8]
 800fe10:	4613      	mov	r3, r2
 800fe12:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe1a:	2b20      	cmp	r3, #32
 800fe1c:	d14a      	bne.n	800feb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800fe24:	88fb      	ldrh	r3, [r7, #6]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d101      	bne.n	800fe2e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e043      	b.n	800feb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d101      	bne.n	800fe3c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800fe38:	2302      	movs	r3, #2
 800fe3a:	e03c      	b.n	800feb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2201      	movs	r2, #1
 800fe48:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fe4a:	88fb      	ldrh	r3, [r7, #6]
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	68b9      	ldr	r1, [r7, #8]
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f7ff fbf3 	bl	800f63c <UART_Start_Receive_DMA>
 800fe56:	4603      	mov	r3, r0
 800fe58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fe5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d124      	bne.n	800feae <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d11d      	bne.n	800fea8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2210      	movs	r2, #16
 800fe72:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	e853 3f00 	ldrex	r3, [r3]
 800fe80:	617b      	str	r3, [r7, #20]
   return(result);
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f043 0310 	orr.w	r3, r3, #16
 800fe88:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	627b      	str	r3, [r7, #36]	; 0x24
 800fe94:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe96:	6a39      	ldr	r1, [r7, #32]
 800fe98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe9a:	e841 2300 	strex	r3, r2, [r1]
 800fe9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1e6      	bne.n	800fe74 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800fea6:	e002      	b.n	800feae <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800fea8:	2301      	movs	r3, #1
 800feaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800feae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800feb2:	e000      	b.n	800feb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800feb4:	2302      	movs	r3, #2
  }
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3730      	adds	r7, #48	; 0x30
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
	...

0800fec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d108      	bne.n	800fee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2201      	movs	r2, #1
 800fedc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fee0:	e031      	b.n	800ff46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fee2:	2310      	movs	r3, #16
 800fee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fee6:	2310      	movs	r3, #16
 800fee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	0e5b      	lsrs	r3, r3, #25
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	f003 0307 	and.w	r3, r3, #7
 800fef8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	0f5b      	lsrs	r3, r3, #29
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	f003 0307 	and.w	r3, r3, #7
 800ff08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
 800ff0c:	7b3a      	ldrb	r2, [r7, #12]
 800ff0e:	4911      	ldr	r1, [pc, #68]	; (800ff54 <UARTEx_SetNbDataToProcess+0x94>)
 800ff10:	5c8a      	ldrb	r2, [r1, r2]
 800ff12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff16:	7b3a      	ldrb	r2, [r7, #12]
 800ff18:	490f      	ldr	r1, [pc, #60]	; (800ff58 <UARTEx_SetNbDataToProcess+0x98>)
 800ff1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	7b7a      	ldrb	r2, [r7, #13]
 800ff2c:	4909      	ldr	r1, [pc, #36]	; (800ff54 <UARTEx_SetNbDataToProcess+0x94>)
 800ff2e:	5c8a      	ldrb	r2, [r1, r2]
 800ff30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff34:	7b7a      	ldrb	r2, [r7, #13]
 800ff36:	4908      	ldr	r1, [pc, #32]	; (800ff58 <UARTEx_SetNbDataToProcess+0x98>)
 800ff38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff46:	bf00      	nop
 800ff48:	3714      	adds	r7, #20
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	08014034 	.word	0x08014034
 800ff58:	0801403c 	.word	0x0801403c

0800ff5c <checkint>:
 800ff5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff60:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800ff64:	429a      	cmp	r2, r3
 800ff66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff68:	dd2b      	ble.n	800ffc2 <checkint+0x66>
 800ff6a:	f240 4333 	movw	r3, #1075	; 0x433
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	dc25      	bgt.n	800ffbe <checkint+0x62>
 800ff72:	1a9b      	subs	r3, r3, r2
 800ff74:	f1a3 0620 	sub.w	r6, r3, #32
 800ff78:	f04f 32ff 	mov.w	r2, #4294967295
 800ff7c:	fa02 f606 	lsl.w	r6, r2, r6
 800ff80:	fa02 f403 	lsl.w	r4, r2, r3
 800ff84:	f1c3 0520 	rsb	r5, r3, #32
 800ff88:	4334      	orrs	r4, r6
 800ff8a:	fa22 f505 	lsr.w	r5, r2, r5
 800ff8e:	432c      	orrs	r4, r5
 800ff90:	409a      	lsls	r2, r3
 800ff92:	ea20 0602 	bic.w	r6, r0, r2
 800ff96:	ea21 0704 	bic.w	r7, r1, r4
 800ff9a:	ea56 0207 	orrs.w	r2, r6, r7
 800ff9e:	f1a3 0420 	sub.w	r4, r3, #32
 800ffa2:	f1c3 0220 	rsb	r2, r3, #32
 800ffa6:	d10c      	bne.n	800ffc2 <checkint+0x66>
 800ffa8:	40d8      	lsrs	r0, r3
 800ffaa:	fa01 f302 	lsl.w	r3, r1, r2
 800ffae:	4318      	orrs	r0, r3
 800ffb0:	40e1      	lsrs	r1, r4
 800ffb2:	4308      	orrs	r0, r1
 800ffb4:	f000 0301 	and.w	r3, r0, #1
 800ffb8:	f1c3 0002 	rsb	r0, r3, #2
 800ffbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffbe:	2002      	movs	r0, #2
 800ffc0:	e7fc      	b.n	800ffbc <checkint+0x60>
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	e7fa      	b.n	800ffbc <checkint+0x60>
	...

0800ffc8 <pow>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	ed2d 8b0a 	vpush	{d8-d12}
 800ffd0:	b09b      	sub	sp, #108	; 0x6c
 800ffd2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ffd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ffda:	ed8d 1b00 	vstr	d1, [sp]
 800ffde:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800ffe2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ffe6:	f109 30ff 	add.w	r0, r9, #4294967295
 800ffea:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800ffee:	4288      	cmp	r0, r1
 800fff0:	46cc      	mov	ip, r9
 800fff2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800fff6:	d806      	bhi.n	8010006 <pow+0x3e>
 800fff8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800fffc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8010000:	297f      	cmp	r1, #127	; 0x7f
 8010002:	f240 81ab 	bls.w	801035c <pow+0x394>
 8010006:	19b1      	adds	r1, r6, r6
 8010008:	9104      	str	r1, [sp, #16]
 801000a:	eb47 0107 	adc.w	r1, r7, r7
 801000e:	9105      	str	r1, [sp, #20]
 8010010:	9904      	ldr	r1, [sp, #16]
 8010012:	f111 31ff 	adds.w	r1, r1, #4294967295
 8010016:	460a      	mov	r2, r1
 8010018:	9905      	ldr	r1, [sp, #20]
 801001a:	f141 31ff 	adc.w	r1, r1, #4294967295
 801001e:	460b      	mov	r3, r1
 8010020:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8010024:	f06f 0001 	mvn.w	r0, #1
 8010028:	4299      	cmp	r1, r3
 801002a:	bf08      	it	eq
 801002c:	4290      	cmpeq	r0, r2
 801002e:	d260      	bcs.n	80100f2 <pow+0x12a>
 8010030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010034:	4313      	orrs	r3, r2
 8010036:	d11a      	bne.n	801006e <pow+0xa6>
 8010038:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 801003c:	1923      	adds	r3, r4, r4
 801003e:	930c      	str	r3, [sp, #48]	; 0x30
 8010040:	eb42 0302 	adc.w	r3, r2, r2
 8010044:	930d      	str	r3, [sp, #52]	; 0x34
 8010046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801004a:	4bcf      	ldr	r3, [pc, #828]	; (8010388 <pow+0x3c0>)
 801004c:	2200      	movs	r2, #0
 801004e:	428b      	cmp	r3, r1
 8010050:	bf08      	it	eq
 8010052:	4282      	cmpeq	r2, r0
 8010054:	f080 8265 	bcs.w	8010522 <pow+0x55a>
 8010058:	ed9d 7b02 	vldr	d7, [sp, #8]
 801005c:	ed9d 6b00 	vldr	d6, [sp]
 8010060:	ee37 0b06 	vadd.f64	d0, d7, d6
 8010064:	b01b      	add	sp, #108	; 0x6c
 8010066:	ecbd 8b0a 	vpop	{d8-d12}
 801006a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006e:	49c7      	ldr	r1, [pc, #796]	; (801038c <pow+0x3c4>)
 8010070:	2000      	movs	r0, #0
 8010072:	428d      	cmp	r5, r1
 8010074:	bf08      	it	eq
 8010076:	4284      	cmpeq	r4, r0
 8010078:	d10b      	bne.n	8010092 <pow+0xca>
 801007a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801007e:	19b3      	adds	r3, r6, r6
 8010080:	930e      	str	r3, [sp, #56]	; 0x38
 8010082:	eb42 0302 	adc.w	r3, r2, r2
 8010086:	930f      	str	r3, [sp, #60]	; 0x3c
 8010088:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801008c:	4bbe      	ldr	r3, [pc, #760]	; (8010388 <pow+0x3c0>)
 801008e:	2200      	movs	r2, #0
 8010090:	e7dd      	b.n	801004e <pow+0x86>
 8010092:	1921      	adds	r1, r4, r4
 8010094:	9106      	str	r1, [sp, #24]
 8010096:	eb45 0105 	adc.w	r1, r5, r5
 801009a:	9107      	str	r1, [sp, #28]
 801009c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80100a0:	49bb      	ldr	r1, [pc, #748]	; (8010390 <pow+0x3c8>)
 80100a2:	2000      	movs	r0, #0
 80100a4:	42a1      	cmp	r1, r4
 80100a6:	bf08      	it	eq
 80100a8:	4298      	cmpeq	r0, r3
 80100aa:	d3d5      	bcc.n	8010058 <pow+0x90>
 80100ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80100b0:	428c      	cmp	r4, r1
 80100b2:	bf08      	it	eq
 80100b4:	4283      	cmpeq	r3, r0
 80100b6:	d1cf      	bne.n	8010058 <pow+0x90>
 80100b8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80100bc:	49b5      	ldr	r1, [pc, #724]	; (8010394 <pow+0x3cc>)
 80100be:	2000      	movs	r0, #0
 80100c0:	428c      	cmp	r4, r1
 80100c2:	bf08      	it	eq
 80100c4:	4283      	cmpeq	r3, r0
 80100c6:	f000 822c 	beq.w	8010522 <pow+0x55a>
 80100ca:	49b3      	ldr	r1, [pc, #716]	; (8010398 <pow+0x3d0>)
 80100cc:	f04f 30ff 	mov.w	r0, #4294967295
 80100d0:	42a1      	cmp	r1, r4
 80100d2:	bf08      	it	eq
 80100d4:	4298      	cmpeq	r0, r3
 80100d6:	ea6f 0307 	mvn.w	r3, r7
 80100da:	bf34      	ite	cc
 80100dc:	2201      	movcc	r2, #1
 80100de:	2200      	movcs	r2, #0
 80100e0:	0fdb      	lsrs	r3, r3, #31
 80100e2:	429a      	cmp	r2, r3
 80100e4:	f040 821a 	bne.w	801051c <pow+0x554>
 80100e8:	ed9d 7b00 	vldr	d7, [sp]
 80100ec:	ee27 0b07 	vmul.f64	d0, d7, d7
 80100f0:	e7b8      	b.n	8010064 <pow+0x9c>
 80100f2:	1923      	adds	r3, r4, r4
 80100f4:	9308      	str	r3, [sp, #32]
 80100f6:	eb45 0305 	adc.w	r3, r5, r5
 80100fa:	9309      	str	r3, [sp, #36]	; 0x24
 80100fc:	9b08      	ldr	r3, [sp, #32]
 80100fe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8010102:	9310      	str	r3, [sp, #64]	; 0x40
 8010104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010106:	f143 33ff 	adc.w	r3, r3, #4294967295
 801010a:	9311      	str	r3, [sp, #68]	; 0x44
 801010c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010110:	4299      	cmp	r1, r3
 8010112:	bf08      	it	eq
 8010114:	4290      	cmpeq	r0, r2
 8010116:	d22d      	bcs.n	8010174 <pow+0x1ac>
 8010118:	ed9d 7b02 	vldr	d7, [sp, #8]
 801011c:	2c00      	cmp	r4, #0
 801011e:	f175 0300 	sbcs.w	r3, r5, #0
 8010122:	ee27 0b07 	vmul.f64	d0, d7, d7
 8010126:	da16      	bge.n	8010156 <pow+0x18e>
 8010128:	4630      	mov	r0, r6
 801012a:	4639      	mov	r1, r7
 801012c:	f7ff ff16 	bl	800ff5c <checkint>
 8010130:	2801      	cmp	r0, #1
 8010132:	d110      	bne.n	8010156 <pow+0x18e>
 8010134:	eeb1 0b40 	vneg.f64	d0, d0
 8010138:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801013c:	4323      	orrs	r3, r4
 801013e:	d10c      	bne.n	801015a <pow+0x192>
 8010140:	2e00      	cmp	r6, #0
 8010142:	f177 0300 	sbcs.w	r3, r7, #0
 8010146:	da8d      	bge.n	8010064 <pow+0x9c>
 8010148:	b01b      	add	sp, #108	; 0x6c
 801014a:	ecbd 8b0a 	vpop	{d8-d12}
 801014e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010152:	f001 b809 	b.w	8011168 <__math_divzero>
 8010156:	2000      	movs	r0, #0
 8010158:	e7ee      	b.n	8010138 <pow+0x170>
 801015a:	2e00      	cmp	r6, #0
 801015c:	f177 0300 	sbcs.w	r3, r7, #0
 8010160:	da80      	bge.n	8010064 <pow+0x9c>
 8010162:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010166:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801016a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801016e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8010172:	e777      	b.n	8010064 <pow+0x9c>
 8010174:	2c00      	cmp	r4, #0
 8010176:	f175 0300 	sbcs.w	r3, r5, #0
 801017a:	da35      	bge.n	80101e8 <pow+0x220>
 801017c:	4630      	mov	r0, r6
 801017e:	4639      	mov	r1, r7
 8010180:	f7ff feec 	bl	800ff5c <checkint>
 8010184:	b940      	cbnz	r0, 8010198 <pow+0x1d0>
 8010186:	ed9d 0b02 	vldr	d0, [sp, #8]
 801018a:	b01b      	add	sp, #108	; 0x6c
 801018c:	ecbd 8b0a 	vpop	{d8-d12}
 8010190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	f001 b800 	b.w	8011198 <__math_invalid>
 8010198:	2801      	cmp	r0, #1
 801019a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801019e:	bf14      	ite	ne
 80101a0:	2000      	movne	r0, #0
 80101a2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80101a6:	461d      	mov	r5, r3
 80101a8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 80101ac:	f3c8 030a 	ubfx	r3, r8, #0, #11
 80101b0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 80101b4:	2a7f      	cmp	r2, #127	; 0x7f
 80101b6:	d933      	bls.n	8010220 <pow+0x258>
 80101b8:	4974      	ldr	r1, [pc, #464]	; (801038c <pow+0x3c4>)
 80101ba:	2000      	movs	r0, #0
 80101bc:	428d      	cmp	r5, r1
 80101be:	bf08      	it	eq
 80101c0:	4284      	cmpeq	r4, r0
 80101c2:	f000 81ae 	beq.w	8010522 <pow+0x55a>
 80101c6:	f240 32bd 	movw	r2, #957	; 0x3bd
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d80e      	bhi.n	80101ec <pow+0x224>
 80101ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80101d2:	ed9d 7b00 	vldr	d7, [sp]
 80101d6:	42a9      	cmp	r1, r5
 80101d8:	bf08      	it	eq
 80101da:	42a0      	cmpeq	r0, r4
 80101dc:	bf34      	ite	cc
 80101de:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 80101e2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 80101e6:	e73d      	b.n	8010064 <pow+0x9c>
 80101e8:	2000      	movs	r0, #0
 80101ea:	e7df      	b.n	80101ac <pow+0x1e4>
 80101ec:	42a9      	cmp	r1, r5
 80101ee:	bf08      	it	eq
 80101f0:	42a0      	cmpeq	r0, r4
 80101f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80101f6:	bf2c      	ite	cs
 80101f8:	2301      	movcs	r3, #1
 80101fa:	2300      	movcc	r3, #0
 80101fc:	4590      	cmp	r8, r2
 80101fe:	bf8c      	ite	hi
 8010200:	f04f 0800 	movhi.w	r8, #0
 8010204:	f04f 0801 	movls.w	r8, #1
 8010208:	4543      	cmp	r3, r8
 801020a:	f04f 0000 	mov.w	r0, #0
 801020e:	f000 80af 	beq.w	8010370 <pow+0x3a8>
 8010212:	b01b      	add	sp, #108	; 0x6c
 8010214:	ecbd 8b0a 	vpop	{d8-d12}
 8010218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	f000 bf9c 	b.w	8011158 <__math_oflow>
 8010220:	f1bc 0f00 	cmp.w	ip, #0
 8010224:	d10e      	bne.n	8010244 <pow+0x27c>
 8010226:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010380 <pow+0x3b8>
 801022a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801022e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010232:	ec57 6b17 	vmov	r6, r7, d7
 8010236:	4b59      	ldr	r3, [pc, #356]	; (801039c <pow+0x3d4>)
 8010238:	2100      	movs	r1, #0
 801023a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801023e:	1874      	adds	r4, r6, r1
 8010240:	eb42 0503 	adc.w	r5, r2, r3
 8010244:	2300      	movs	r3, #0
 8010246:	18e3      	adds	r3, r4, r3
 8010248:	4b55      	ldr	r3, [pc, #340]	; (80103a0 <pow+0x3d8>)
 801024a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801024e:	eb45 0303 	adc.w	r3, r5, r3
 8010252:	1519      	asrs	r1, r3, #20
 8010254:	ee03 1a10 	vmov	s6, r1
 8010258:	0d1e      	lsrs	r6, r3, #20
 801025a:	2100      	movs	r1, #0
 801025c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010260:	0536      	lsls	r6, r6, #20
 8010262:	1a63      	subs	r3, r4, r1
 8010264:	9312      	str	r3, [sp, #72]	; 0x48
 8010266:	eb65 0306 	sbc.w	r3, r5, r6
 801026a:	9313      	str	r3, [sp, #76]	; 0x4c
 801026c:	4b4d      	ldr	r3, [pc, #308]	; (80103a4 <pow+0x3dc>)
 801026e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8010272:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010276:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 801027a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801027e:	ed93 7b00 	vldr	d7, [r3]
 8010282:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8010286:	ed93 4b02 	vldr	d4, [r3, #8]
 801028a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801028e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8010292:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8010296:	ee36 9b05 	vadd.f64	d9, d6, d5
 801029a:	ee35 5b49 	vsub.f64	d5, d5, d9
 801029e:	eea3 7b04 	vfma.f64	d7, d3, d4
 80102a2:	ed93 4b04 	vldr	d4, [r3, #16]
 80102a6:	ee35 5b06 	vadd.f64	d5, d5, d6
 80102aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 80102ae:	ee26 4b04 	vmul.f64	d4, d6, d4
 80102b2:	ed93 3b08 	vldr	d3, [r3, #32]
 80102b6:	ee26 0b04 	vmul.f64	d0, d6, d4
 80102ba:	eeb0 8b40 	vmov.f64	d8, d0
 80102be:	ee94 8b06 	vfnms.f64	d8, d4, d6
 80102c2:	ed93 4b06 	vldr	d4, [r3, #24]
 80102c6:	ee26 ab00 	vmul.f64	d10, d6, d0
 80102ca:	ee39 1b00 	vadd.f64	d1, d9, d0
 80102ce:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 80102d2:	eea6 4b03 	vfma.f64	d4, d6, d3
 80102d6:	ee39 9b41 	vsub.f64	d9, d9, d1
 80102da:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 80102de:	ee37 8b08 	vadd.f64	d8, d7, d8
 80102e2:	ee39 9b00 	vadd.f64	d9, d9, d0
 80102e6:	eea6 3b02 	vfma.f64	d3, d6, d2
 80102ea:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80102ee:	ee38 9b09 	vadd.f64	d9, d8, d9
 80102f2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 80102f6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 80102fa:	ed9d 6b00 	vldr	d6, [sp]
 80102fe:	eea0 3b02 	vfma.f64	d3, d0, d2
 8010302:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010306:	eeaa 9b04 	vfma.f64	d9, d10, d4
 801030a:	ee31 7b09 	vadd.f64	d7, d1, d9
 801030e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010312:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010316:	eeb0 3b46 	vmov.f64	d3, d6
 801031a:	ee31 1b47 	vsub.f64	d1, d1, d7
 801031e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010322:	ee31 9b09 	vadd.f64	d9, d1, d9
 8010326:	ed9d 6b00 	vldr	d6, [sp]
 801032a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 801032e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8010332:	193c      	adds	r4, r7, r4
 8010334:	2c3e      	cmp	r4, #62	; 0x3e
 8010336:	ee96 3b07 	vfnms.f64	d3, d6, d7
 801033a:	eea6 3b09 	vfma.f64	d3, d6, d9
 801033e:	d934      	bls.n	80103aa <pow+0x3e2>
 8010340:	428c      	cmp	r4, r1
 8010342:	da0d      	bge.n	8010360 <pow+0x398>
 8010344:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010348:	ed9d 7b02 	vldr	d7, [sp, #8]
 801034c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010350:	2800      	cmp	r0, #0
 8010352:	f43f ae87 	beq.w	8010064 <pow+0x9c>
 8010356:	eeb1 0b40 	vneg.f64	d0, d0
 801035a:	e683      	b.n	8010064 <pow+0x9c>
 801035c:	2000      	movs	r0, #0
 801035e:	e771      	b.n	8010244 <pow+0x27c>
 8010360:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8010364:	d920      	bls.n	80103a8 <pow+0x3e0>
 8010366:	2a00      	cmp	r2, #0
 8010368:	f173 0300 	sbcs.w	r3, r3, #0
 801036c:	f6bf af51 	bge.w	8010212 <pow+0x24a>
 8010370:	b01b      	add	sp, #108	; 0x6c
 8010372:	ecbd 8b0a 	vpop	{d8-d12}
 8010376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801037a:	f000 bee5 	b.w	8011148 <__math_uflow>
 801037e:	bf00      	nop
 8010380:	00000000 	.word	0x00000000
 8010384:	43300000 	.word	0x43300000
 8010388:	fff00000 	.word	0xfff00000
 801038c:	3ff00000 	.word	0x3ff00000
 8010390:	ffe00000 	.word	0xffe00000
 8010394:	7fe00000 	.word	0x7fe00000
 8010398:	7fdfffff 	.word	0x7fdfffff
 801039c:	fcc00000 	.word	0xfcc00000
 80103a0:	c0196aab 	.word	0xc0196aab
 80103a4:	08014048 	.word	0x08014048
 80103a8:	460f      	mov	r7, r1
 80103aa:	4e65      	ldr	r6, [pc, #404]	; (8010540 <pow+0x578>)
 80103ac:	ed9d 4b02 	vldr	d4, [sp, #8]
 80103b0:	ed96 6b02 	vldr	d6, [r6, #8]
 80103b4:	ed96 7b00 	vldr	d7, [r6]
 80103b8:	eeb0 5b46 	vmov.f64	d5, d6
 80103bc:	eea4 5b07 	vfma.f64	d5, d4, d7
 80103c0:	ed8d 5b00 	vstr	d5, [sp]
 80103c4:	ee35 6b46 	vsub.f64	d6, d5, d6
 80103c8:	eeb0 5b44 	vmov.f64	d5, d4
 80103cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103d0:	ed96 7b04 	vldr	d7, [r6, #16]
 80103d4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 80103d8:	eea6 5b07 	vfma.f64	d5, d6, d7
 80103dc:	eeb0 7b45 	vmov.f64	d7, d5
 80103e0:	ed96 5b06 	vldr	d5, [r6, #24]
 80103e4:	1849      	adds	r1, r1, r1
 80103e6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 80103ea:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 80103ee:	eea6 7b05 	vfma.f64	d7, d6, d5
 80103f2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 80103f6:	ee33 3b07 	vadd.f64	d3, d3, d7
 80103fa:	ee23 6b03 	vmul.f64	d6, d3, d3
 80103fe:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8010402:	ed96 5b08 	vldr	d5, [r6, #32]
 8010406:	ee33 7b07 	vadd.f64	d7, d3, d7
 801040a:	1814      	adds	r4, r2, r0
 801040c:	0365      	lsls	r5, r4, #13
 801040e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8010412:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010416:	eea6 7b05 	vfma.f64	d7, d6, d5
 801041a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 801041e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010422:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8010426:	2000      	movs	r0, #0
 8010428:	eb10 0a04 	adds.w	sl, r0, r4
 801042c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010430:	eb45 0b0c 	adc.w	fp, r5, ip
 8010434:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010438:	2f00      	cmp	r7, #0
 801043a:	d16a      	bne.n	8010512 <pow+0x54a>
 801043c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8010440:	4639      	mov	r1, r7
 8010442:	ea50 0301 	orrs.w	r3, r0, r1
 8010446:	f04f 0300 	mov.w	r3, #0
 801044a:	d115      	bne.n	8010478 <pow+0x4b0>
 801044c:	eb1a 0303 	adds.w	r3, sl, r3
 8010450:	ee0b 3a10 	vmov	s22, r3
 8010454:	4b3b      	ldr	r3, [pc, #236]	; (8010544 <pow+0x57c>)
 8010456:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8010528 <pow+0x560>
 801045a:	eb4b 0303 	adc.w	r3, fp, r3
 801045e:	ee0b 3a90 	vmov	s23, r3
 8010462:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8010466:	ee2b 0b00 	vmul.f64	d0, d11, d0
 801046a:	b01b      	add	sp, #108	; 0x6c
 801046c:	ecbd 8b0a 	vpop	{d8-d12}
 8010470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	f000 bea8 	b.w	80111c8 <__math_check_oflow>
 8010478:	eb1a 0303 	adds.w	r3, sl, r3
 801047c:	930a      	str	r3, [sp, #40]	; 0x28
 801047e:	4b32      	ldr	r3, [pc, #200]	; (8010548 <pow+0x580>)
 8010480:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010484:	eb4b 0303 	adc.w	r3, fp, r3
 8010488:	930b      	str	r3, [sp, #44]	; 0x2c
 801048a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801048e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010492:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010496:	eeb0 3bc7 	vabs.f64	d3, d7
 801049a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801049e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8010530 <pow+0x568>
 80104a6:	d52b      	bpl.n	8010500 <pow+0x538>
 80104a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80104ac:	ee35 5b47 	vsub.f64	d5, d5, d7
 80104b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80104b8:	ee35 6b06 	vadd.f64	d6, d5, d6
 80104bc:	bf48      	it	mi
 80104be:	eeb0 4b43 	vmovmi.f64	d4, d3
 80104c2:	ee37 3b04 	vadd.f64	d3, d7, d4
 80104c6:	ee34 5b43 	vsub.f64	d5, d4, d3
 80104ca:	ee35 7b07 	vadd.f64	d7, d5, d7
 80104ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80104d2:	ee37 7b03 	vadd.f64	d7, d7, d3
 80104d6:	ee37 7b44 	vsub.f64	d7, d7, d4
 80104da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e2:	d105      	bne.n	80104f0 <pow+0x528>
 80104e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104e6:	463a      	mov	r2, r7
 80104e8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80104ec:	ec43 2b17 	vmov	d7, r2, r3
 80104f0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 80104f4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 80104f8:	ee26 6b00 	vmul.f64	d6, d6, d0
 80104fc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8010500:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010504:	b01b      	add	sp, #108	; 0x6c
 8010506:	ecbd 8b0a 	vpop	{d8-d12}
 801050a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050e:	f000 be52 	b.w	80111b6 <__math_check_uflow>
 8010512:	ec4b ab10 	vmov	d0, sl, fp
 8010516:	eea7 0b00 	vfma.f64	d0, d7, d0
 801051a:	e5a3      	b.n	8010064 <pow+0x9c>
 801051c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8010538 <pow+0x570>
 8010520:	e5a0      	b.n	8010064 <pow+0x9c>
 8010522:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010526:	e59d      	b.n	8010064 <pow+0x9c>
 8010528:	00000000 	.word	0x00000000
 801052c:	7f000000 	.word	0x7f000000
 8010530:	00000000 	.word	0x00000000
 8010534:	00100000 	.word	0x00100000
	...
 8010540:	08015230 	.word	0x08015230
 8010544:	c0f00000 	.word	0xc0f00000
 8010548:	3fe00000 	.word	0x3fe00000
 801054c:	00000000 	.word	0x00000000

08010550 <cos>:
 8010550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010552:	eeb0 7b40 	vmov.f64	d7, d0
 8010556:	ee17 3a90 	vmov	r3, s15
 801055a:	4a1f      	ldr	r2, [pc, #124]	; (80105d8 <cos+0x88>)
 801055c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010560:	4293      	cmp	r3, r2
 8010562:	dc04      	bgt.n	801056e <cos+0x1e>
 8010564:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80105d0 <cos+0x80>
 8010568:	f000 fa8e 	bl	8010a88 <__kernel_cos>
 801056c:	e004      	b.n	8010578 <cos+0x28>
 801056e:	4a1b      	ldr	r2, [pc, #108]	; (80105dc <cos+0x8c>)
 8010570:	4293      	cmp	r3, r2
 8010572:	dd04      	ble.n	801057e <cos+0x2e>
 8010574:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010578:	b005      	add	sp, #20
 801057a:	f85d fb04 	ldr.w	pc, [sp], #4
 801057e:	4668      	mov	r0, sp
 8010580:	f000 f89e 	bl	80106c0 <__ieee754_rem_pio2>
 8010584:	f000 0003 	and.w	r0, r0, #3
 8010588:	2801      	cmp	r0, #1
 801058a:	d007      	beq.n	801059c <cos+0x4c>
 801058c:	2802      	cmp	r0, #2
 801058e:	d00e      	beq.n	80105ae <cos+0x5e>
 8010590:	b9a0      	cbnz	r0, 80105bc <cos+0x6c>
 8010592:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010596:	ed9d 0b00 	vldr	d0, [sp]
 801059a:	e7e5      	b.n	8010568 <cos+0x18>
 801059c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105a0:	ed9d 0b00 	vldr	d0, [sp]
 80105a4:	f000 fd5c 	bl	8011060 <__kernel_sin>
 80105a8:	eeb1 0b40 	vneg.f64	d0, d0
 80105ac:	e7e4      	b.n	8010578 <cos+0x28>
 80105ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105b2:	ed9d 0b00 	vldr	d0, [sp]
 80105b6:	f000 fa67 	bl	8010a88 <__kernel_cos>
 80105ba:	e7f5      	b.n	80105a8 <cos+0x58>
 80105bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105c0:	ed9d 0b00 	vldr	d0, [sp]
 80105c4:	2001      	movs	r0, #1
 80105c6:	f000 fd4b 	bl	8011060 <__kernel_sin>
 80105ca:	e7d5      	b.n	8010578 <cos+0x28>
 80105cc:	f3af 8000 	nop.w
	...
 80105d8:	3fe921fb 	.word	0x3fe921fb
 80105dc:	7fefffff 	.word	0x7fefffff

080105e0 <sin>:
 80105e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105e2:	eeb0 7b40 	vmov.f64	d7, d0
 80105e6:	ee17 3a90 	vmov	r3, s15
 80105ea:	4a1f      	ldr	r2, [pc, #124]	; (8010668 <sin+0x88>)
 80105ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80105f0:	4293      	cmp	r3, r2
 80105f2:	dc05      	bgt.n	8010600 <sin+0x20>
 80105f4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010660 <sin+0x80>
 80105f8:	2000      	movs	r0, #0
 80105fa:	f000 fd31 	bl	8011060 <__kernel_sin>
 80105fe:	e004      	b.n	801060a <sin+0x2a>
 8010600:	4a1a      	ldr	r2, [pc, #104]	; (801066c <sin+0x8c>)
 8010602:	4293      	cmp	r3, r2
 8010604:	dd04      	ble.n	8010610 <sin+0x30>
 8010606:	ee30 0b40 	vsub.f64	d0, d0, d0
 801060a:	b005      	add	sp, #20
 801060c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010610:	4668      	mov	r0, sp
 8010612:	f000 f855 	bl	80106c0 <__ieee754_rem_pio2>
 8010616:	f000 0003 	and.w	r0, r0, #3
 801061a:	2801      	cmp	r0, #1
 801061c:	d008      	beq.n	8010630 <sin+0x50>
 801061e:	2802      	cmp	r0, #2
 8010620:	d00d      	beq.n	801063e <sin+0x5e>
 8010622:	b9b0      	cbnz	r0, 8010652 <sin+0x72>
 8010624:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010628:	ed9d 0b00 	vldr	d0, [sp]
 801062c:	2001      	movs	r0, #1
 801062e:	e7e4      	b.n	80105fa <sin+0x1a>
 8010630:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010634:	ed9d 0b00 	vldr	d0, [sp]
 8010638:	f000 fa26 	bl	8010a88 <__kernel_cos>
 801063c:	e7e5      	b.n	801060a <sin+0x2a>
 801063e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010642:	ed9d 0b00 	vldr	d0, [sp]
 8010646:	2001      	movs	r0, #1
 8010648:	f000 fd0a 	bl	8011060 <__kernel_sin>
 801064c:	eeb1 0b40 	vneg.f64	d0, d0
 8010650:	e7db      	b.n	801060a <sin+0x2a>
 8010652:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010656:	ed9d 0b00 	vldr	d0, [sp]
 801065a:	f000 fa15 	bl	8010a88 <__kernel_cos>
 801065e:	e7f5      	b.n	801064c <sin+0x6c>
	...
 8010668:	3fe921fb 	.word	0x3fe921fb
 801066c:	7fefffff 	.word	0x7fefffff

08010670 <atan2f>:
 8010670:	f000 b966 	b.w	8010940 <__ieee754_atan2f>

08010674 <sqrtf>:
 8010674:	b508      	push	{r3, lr}
 8010676:	ed2d 8b02 	vpush	{d8}
 801067a:	eeb0 8a40 	vmov.f32	s16, s0
 801067e:	f000 f9fd 	bl	8010a7c <__ieee754_sqrtf>
 8010682:	4b0d      	ldr	r3, [pc, #52]	; (80106b8 <sqrtf+0x44>)
 8010684:	f993 3000 	ldrsb.w	r3, [r3]
 8010688:	3301      	adds	r3, #1
 801068a:	d011      	beq.n	80106b0 <sqrtf+0x3c>
 801068c:	eeb4 8a48 	vcmp.f32	s16, s16
 8010690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010694:	d60c      	bvs.n	80106b0 <sqrtf+0x3c>
 8010696:	eddf 8a09 	vldr	s17, [pc, #36]	; 80106bc <sqrtf+0x48>
 801069a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801069e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a2:	d505      	bpl.n	80106b0 <sqrtf+0x3c>
 80106a4:	f000 ff92 	bl	80115cc <__errno>
 80106a8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80106ac:	2321      	movs	r3, #33	; 0x21
 80106ae:	6003      	str	r3, [r0, #0]
 80106b0:	ecbd 8b02 	vpop	{d8}
 80106b4:	bd08      	pop	{r3, pc}
 80106b6:	bf00      	nop
 80106b8:	24000235 	.word	0x24000235
 80106bc:	00000000 	.word	0x00000000

080106c0 <__ieee754_rem_pio2>:
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	eeb0 7b40 	vmov.f64	d7, d0
 80106c6:	ee17 5a90 	vmov	r5, s15
 80106ca:	4b97      	ldr	r3, [pc, #604]	; (8010928 <__ieee754_rem_pio2+0x268>)
 80106cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80106d0:	429e      	cmp	r6, r3
 80106d2:	b088      	sub	sp, #32
 80106d4:	4604      	mov	r4, r0
 80106d6:	dc07      	bgt.n	80106e8 <__ieee754_rem_pio2+0x28>
 80106d8:	2200      	movs	r2, #0
 80106da:	2300      	movs	r3, #0
 80106dc:	ed84 0b00 	vstr	d0, [r4]
 80106e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80106e4:	2000      	movs	r0, #0
 80106e6:	e01b      	b.n	8010720 <__ieee754_rem_pio2+0x60>
 80106e8:	4b90      	ldr	r3, [pc, #576]	; (801092c <__ieee754_rem_pio2+0x26c>)
 80106ea:	429e      	cmp	r6, r3
 80106ec:	dc3b      	bgt.n	8010766 <__ieee754_rem_pio2+0xa6>
 80106ee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80106f2:	2d00      	cmp	r5, #0
 80106f4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80108e8 <__ieee754_rem_pio2+0x228>
 80106f8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80106fc:	dd19      	ble.n	8010732 <__ieee754_rem_pio2+0x72>
 80106fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010702:	429e      	cmp	r6, r3
 8010704:	d00e      	beq.n	8010724 <__ieee754_rem_pio2+0x64>
 8010706:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80108f0 <__ieee754_rem_pio2+0x230>
 801070a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801070e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010712:	ed84 5b00 	vstr	d5, [r4]
 8010716:	ee37 7b46 	vsub.f64	d7, d7, d6
 801071a:	ed84 7b02 	vstr	d7, [r4, #8]
 801071e:	2001      	movs	r0, #1
 8010720:	b008      	add	sp, #32
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80108f8 <__ieee754_rem_pio2+0x238>
 8010728:	ee37 7b46 	vsub.f64	d7, d7, d6
 801072c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010900 <__ieee754_rem_pio2+0x240>
 8010730:	e7eb      	b.n	801070a <__ieee754_rem_pio2+0x4a>
 8010732:	429e      	cmp	r6, r3
 8010734:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010738:	d00e      	beq.n	8010758 <__ieee754_rem_pio2+0x98>
 801073a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80108f0 <__ieee754_rem_pio2+0x230>
 801073e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010742:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010746:	ed84 5b00 	vstr	d5, [r4]
 801074a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801074e:	f04f 30ff 	mov.w	r0, #4294967295
 8010752:	ed84 7b02 	vstr	d7, [r4, #8]
 8010756:	e7e3      	b.n	8010720 <__ieee754_rem_pio2+0x60>
 8010758:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80108f8 <__ieee754_rem_pio2+0x238>
 801075c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010760:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010900 <__ieee754_rem_pio2+0x240>
 8010764:	e7eb      	b.n	801073e <__ieee754_rem_pio2+0x7e>
 8010766:	4b72      	ldr	r3, [pc, #456]	; (8010930 <__ieee754_rem_pio2+0x270>)
 8010768:	429e      	cmp	r6, r3
 801076a:	dc6e      	bgt.n	801084a <__ieee754_rem_pio2+0x18a>
 801076c:	f000 fd40 	bl	80111f0 <fabs>
 8010770:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010774:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8010908 <__ieee754_rem_pio2+0x248>
 8010778:	eea0 7b06 	vfma.f64	d7, d0, d6
 801077c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010780:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010784:	ee17 0a90 	vmov	r0, s15
 8010788:	eeb1 4b45 	vneg.f64	d4, d5
 801078c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80108e8 <__ieee754_rem_pio2+0x228>
 8010790:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010794:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80108f0 <__ieee754_rem_pio2+0x230>
 8010798:	281f      	cmp	r0, #31
 801079a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801079e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80107a2:	dc08      	bgt.n	80107b6 <__ieee754_rem_pio2+0xf6>
 80107a4:	4b63      	ldr	r3, [pc, #396]	; (8010934 <__ieee754_rem_pio2+0x274>)
 80107a6:	1e42      	subs	r2, r0, #1
 80107a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ac:	42b3      	cmp	r3, r6
 80107ae:	d002      	beq.n	80107b6 <__ieee754_rem_pio2+0xf6>
 80107b0:	ed84 6b00 	vstr	d6, [r4]
 80107b4:	e024      	b.n	8010800 <__ieee754_rem_pio2+0x140>
 80107b6:	ee16 3a90 	vmov	r3, s13
 80107ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80107be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80107c2:	2b10      	cmp	r3, #16
 80107c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80107c8:	ddf2      	ble.n	80107b0 <__ieee754_rem_pio2+0xf0>
 80107ca:	eeb0 6b40 	vmov.f64	d6, d0
 80107ce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80108f8 <__ieee754_rem_pio2+0x238>
 80107d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80107d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80107da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80107de:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8010900 <__ieee754_rem_pio2+0x240>
 80107e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80107e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80107ea:	ee13 3a90 	vmov	r3, s7
 80107ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	2b31      	cmp	r3, #49	; 0x31
 80107f6:	dc17      	bgt.n	8010828 <__ieee754_rem_pio2+0x168>
 80107f8:	eeb0 0b46 	vmov.f64	d0, d6
 80107fc:	ed84 3b00 	vstr	d3, [r4]
 8010800:	ed94 6b00 	vldr	d6, [r4]
 8010804:	2d00      	cmp	r5, #0
 8010806:	ee30 0b46 	vsub.f64	d0, d0, d6
 801080a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801080e:	ed84 7b02 	vstr	d7, [r4, #8]
 8010812:	da85      	bge.n	8010720 <__ieee754_rem_pio2+0x60>
 8010814:	eeb1 6b46 	vneg.f64	d6, d6
 8010818:	ed84 6b00 	vstr	d6, [r4]
 801081c:	eeb1 7b47 	vneg.f64	d7, d7
 8010820:	4240      	negs	r0, r0
 8010822:	ed84 7b02 	vstr	d7, [r4, #8]
 8010826:	e77b      	b.n	8010720 <__ieee754_rem_pio2+0x60>
 8010828:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8010910 <__ieee754_rem_pio2+0x250>
 801082c:	eeb0 0b46 	vmov.f64	d0, d6
 8010830:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010834:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010838:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8010918 <__ieee754_rem_pio2+0x258>
 801083c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010840:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010844:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010848:	e7b2      	b.n	80107b0 <__ieee754_rem_pio2+0xf0>
 801084a:	4b3b      	ldr	r3, [pc, #236]	; (8010938 <__ieee754_rem_pio2+0x278>)
 801084c:	429e      	cmp	r6, r3
 801084e:	dd06      	ble.n	801085e <__ieee754_rem_pio2+0x19e>
 8010850:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010854:	ed80 7b02 	vstr	d7, [r0, #8]
 8010858:	ed80 7b00 	vstr	d7, [r0]
 801085c:	e742      	b.n	80106e4 <__ieee754_rem_pio2+0x24>
 801085e:	1532      	asrs	r2, r6, #20
 8010860:	ee10 0a10 	vmov	r0, s0
 8010864:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010868:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801086c:	ec41 0b17 	vmov	d7, r0, r1
 8010870:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010874:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8010920 <__ieee754_rem_pio2+0x260>
 8010878:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801087c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010880:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010884:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010888:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801088c:	a902      	add	r1, sp, #8
 801088e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010892:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010896:	ed8d 6b04 	vstr	d6, [sp, #16]
 801089a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801089e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108a2:	2603      	movs	r6, #3
 80108a4:	4608      	mov	r0, r1
 80108a6:	ed91 7b04 	vldr	d7, [r1, #16]
 80108aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b2:	4633      	mov	r3, r6
 80108b4:	f1a1 0108 	sub.w	r1, r1, #8
 80108b8:	f106 36ff 	add.w	r6, r6, #4294967295
 80108bc:	d0f3      	beq.n	80108a6 <__ieee754_rem_pio2+0x1e6>
 80108be:	491f      	ldr	r1, [pc, #124]	; (801093c <__ieee754_rem_pio2+0x27c>)
 80108c0:	9101      	str	r1, [sp, #4]
 80108c2:	2102      	movs	r1, #2
 80108c4:	9100      	str	r1, [sp, #0]
 80108c6:	4621      	mov	r1, r4
 80108c8:	f000 f94a 	bl	8010b60 <__kernel_rem_pio2>
 80108cc:	2d00      	cmp	r5, #0
 80108ce:	f6bf af27 	bge.w	8010720 <__ieee754_rem_pio2+0x60>
 80108d2:	ed94 7b00 	vldr	d7, [r4]
 80108d6:	eeb1 7b47 	vneg.f64	d7, d7
 80108da:	ed84 7b00 	vstr	d7, [r4]
 80108de:	ed94 7b02 	vldr	d7, [r4, #8]
 80108e2:	e79b      	b.n	801081c <__ieee754_rem_pio2+0x15c>
 80108e4:	f3af 8000 	nop.w
 80108e8:	54400000 	.word	0x54400000
 80108ec:	3ff921fb 	.word	0x3ff921fb
 80108f0:	1a626331 	.word	0x1a626331
 80108f4:	3dd0b461 	.word	0x3dd0b461
 80108f8:	1a600000 	.word	0x1a600000
 80108fc:	3dd0b461 	.word	0x3dd0b461
 8010900:	2e037073 	.word	0x2e037073
 8010904:	3ba3198a 	.word	0x3ba3198a
 8010908:	6dc9c883 	.word	0x6dc9c883
 801090c:	3fe45f30 	.word	0x3fe45f30
 8010910:	2e000000 	.word	0x2e000000
 8010914:	3ba3198a 	.word	0x3ba3198a
 8010918:	252049c1 	.word	0x252049c1
 801091c:	397b839a 	.word	0x397b839a
 8010920:	00000000 	.word	0x00000000
 8010924:	41700000 	.word	0x41700000
 8010928:	3fe921fb 	.word	0x3fe921fb
 801092c:	4002d97b 	.word	0x4002d97b
 8010930:	413921fb 	.word	0x413921fb
 8010934:	08015090 	.word	0x08015090
 8010938:	7fefffff 	.word	0x7fefffff
 801093c:	08015110 	.word	0x08015110

08010940 <__ieee754_atan2f>:
 8010940:	ee10 2a90 	vmov	r2, s1
 8010944:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010948:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801094c:	b510      	push	{r4, lr}
 801094e:	eef0 7a40 	vmov.f32	s15, s0
 8010952:	dc06      	bgt.n	8010962 <__ieee754_atan2f+0x22>
 8010954:	ee10 0a10 	vmov	r0, s0
 8010958:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801095c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010960:	dd04      	ble.n	801096c <__ieee754_atan2f+0x2c>
 8010962:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010966:	eeb0 0a67 	vmov.f32	s0, s15
 801096a:	bd10      	pop	{r4, pc}
 801096c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010970:	d103      	bne.n	801097a <__ieee754_atan2f+0x3a>
 8010972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010976:	f000 bd4d 	b.w	8011414 <atanf>
 801097a:	1794      	asrs	r4, r2, #30
 801097c:	f004 0402 	and.w	r4, r4, #2
 8010980:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010984:	b93b      	cbnz	r3, 8010996 <__ieee754_atan2f+0x56>
 8010986:	2c02      	cmp	r4, #2
 8010988:	d05c      	beq.n	8010a44 <__ieee754_atan2f+0x104>
 801098a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010a58 <__ieee754_atan2f+0x118>
 801098e:	2c03      	cmp	r4, #3
 8010990:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8010994:	e7e7      	b.n	8010966 <__ieee754_atan2f+0x26>
 8010996:	b939      	cbnz	r1, 80109a8 <__ieee754_atan2f+0x68>
 8010998:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010a5c <__ieee754_atan2f+0x11c>
 801099c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8010a60 <__ieee754_atan2f+0x120>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	fe67 7a80 	vselge.f32	s15, s15, s0
 80109a6:	e7de      	b.n	8010966 <__ieee754_atan2f+0x26>
 80109a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80109ac:	d110      	bne.n	80109d0 <__ieee754_atan2f+0x90>
 80109ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80109b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80109b6:	d107      	bne.n	80109c8 <__ieee754_atan2f+0x88>
 80109b8:	2c02      	cmp	r4, #2
 80109ba:	d846      	bhi.n	8010a4a <__ieee754_atan2f+0x10a>
 80109bc:	4b29      	ldr	r3, [pc, #164]	; (8010a64 <__ieee754_atan2f+0x124>)
 80109be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80109c2:	edd4 7a00 	vldr	s15, [r4]
 80109c6:	e7ce      	b.n	8010966 <__ieee754_atan2f+0x26>
 80109c8:	2c02      	cmp	r4, #2
 80109ca:	d841      	bhi.n	8010a50 <__ieee754_atan2f+0x110>
 80109cc:	4b26      	ldr	r3, [pc, #152]	; (8010a68 <__ieee754_atan2f+0x128>)
 80109ce:	e7f6      	b.n	80109be <__ieee754_atan2f+0x7e>
 80109d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80109d4:	d0e0      	beq.n	8010998 <__ieee754_atan2f+0x58>
 80109d6:	1a5b      	subs	r3, r3, r1
 80109d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80109dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80109e0:	da1a      	bge.n	8010a18 <__ieee754_atan2f+0xd8>
 80109e2:	2a00      	cmp	r2, #0
 80109e4:	da01      	bge.n	80109ea <__ieee754_atan2f+0xaa>
 80109e6:	313c      	adds	r1, #60	; 0x3c
 80109e8:	db19      	blt.n	8010a1e <__ieee754_atan2f+0xde>
 80109ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80109ee:	f000 fde5 	bl	80115bc <fabsf>
 80109f2:	f000 fd0f 	bl	8011414 <atanf>
 80109f6:	eef0 7a40 	vmov.f32	s15, s0
 80109fa:	2c01      	cmp	r4, #1
 80109fc:	d012      	beq.n	8010a24 <__ieee754_atan2f+0xe4>
 80109fe:	2c02      	cmp	r4, #2
 8010a00:	d017      	beq.n	8010a32 <__ieee754_atan2f+0xf2>
 8010a02:	2c00      	cmp	r4, #0
 8010a04:	d0af      	beq.n	8010966 <__ieee754_atan2f+0x26>
 8010a06:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010a6c <__ieee754_atan2f+0x12c>
 8010a0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010a0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010a70 <__ieee754_atan2f+0x130>
 8010a12:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010a16:	e7a6      	b.n	8010966 <__ieee754_atan2f+0x26>
 8010a18:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010a5c <__ieee754_atan2f+0x11c>
 8010a1c:	e7ed      	b.n	80109fa <__ieee754_atan2f+0xba>
 8010a1e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010a74 <__ieee754_atan2f+0x134>
 8010a22:	e7ea      	b.n	80109fa <__ieee754_atan2f+0xba>
 8010a24:	ee17 3a90 	vmov	r3, s15
 8010a28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a2c:	ee07 3a90 	vmov	s15, r3
 8010a30:	e799      	b.n	8010966 <__ieee754_atan2f+0x26>
 8010a32:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010a6c <__ieee754_atan2f+0x12c>
 8010a36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010a3a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010a70 <__ieee754_atan2f+0x130>
 8010a3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010a42:	e790      	b.n	8010966 <__ieee754_atan2f+0x26>
 8010a44:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010a70 <__ieee754_atan2f+0x130>
 8010a48:	e78d      	b.n	8010966 <__ieee754_atan2f+0x26>
 8010a4a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010a78 <__ieee754_atan2f+0x138>
 8010a4e:	e78a      	b.n	8010966 <__ieee754_atan2f+0x26>
 8010a50:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010a74 <__ieee754_atan2f+0x134>
 8010a54:	e787      	b.n	8010966 <__ieee754_atan2f+0x26>
 8010a56:	bf00      	nop
 8010a58:	c0490fdb 	.word	0xc0490fdb
 8010a5c:	3fc90fdb 	.word	0x3fc90fdb
 8010a60:	bfc90fdb 	.word	0xbfc90fdb
 8010a64:	08015218 	.word	0x08015218
 8010a68:	08015224 	.word	0x08015224
 8010a6c:	33bbbd2e 	.word	0x33bbbd2e
 8010a70:	40490fdb 	.word	0x40490fdb
 8010a74:	00000000 	.word	0x00000000
 8010a78:	3f490fdb 	.word	0x3f490fdb

08010a7c <__ieee754_sqrtf>:
 8010a7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010a80:	4770      	bx	lr
 8010a82:	0000      	movs	r0, r0
 8010a84:	0000      	movs	r0, r0
	...

08010a88 <__kernel_cos>:
 8010a88:	ee10 1a90 	vmov	r1, s1
 8010a8c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010a90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010a94:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010a98:	da05      	bge.n	8010aa6 <__kernel_cos+0x1e>
 8010a9a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010a9e:	ee17 3a90 	vmov	r3, s15
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d03d      	beq.n	8010b22 <__kernel_cos+0x9a>
 8010aa6:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010aaa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010b28 <__kernel_cos+0xa0>
 8010aae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010b30 <__kernel_cos+0xa8>
 8010ab2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010ab6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010b38 <__kernel_cos+0xb0>
 8010aba:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010abe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010b40 <__kernel_cos+0xb8>
 8010ac2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010ac6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010b48 <__kernel_cos+0xc0>
 8010aca:	4b23      	ldr	r3, [pc, #140]	; (8010b58 <__kernel_cos+0xd0>)
 8010acc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010ad0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010b50 <__kernel_cos+0xc8>
 8010ad4:	4299      	cmp	r1, r3
 8010ad6:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010ada:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010ade:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010ae2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010ae6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010aea:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010aee:	dc04      	bgt.n	8010afa <__kernel_cos+0x72>
 8010af0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010af4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010af8:	4770      	bx	lr
 8010afa:	4b18      	ldr	r3, [pc, #96]	; (8010b5c <__kernel_cos+0xd4>)
 8010afc:	4299      	cmp	r1, r3
 8010afe:	dc0d      	bgt.n	8010b1c <__kernel_cos+0x94>
 8010b00:	2200      	movs	r2, #0
 8010b02:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010b06:	ec43 2b15 	vmov	d5, r2, r3
 8010b0a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010b0e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010b12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b16:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010b1a:	4770      	bx	lr
 8010b1c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010b20:	e7f3      	b.n	8010b0a <__kernel_cos+0x82>
 8010b22:	eeb0 0b44 	vmov.f64	d0, d4
 8010b26:	4770      	bx	lr
 8010b28:	be8838d4 	.word	0xbe8838d4
 8010b2c:	bda8fae9 	.word	0xbda8fae9
 8010b30:	bdb4b1c4 	.word	0xbdb4b1c4
 8010b34:	3e21ee9e 	.word	0x3e21ee9e
 8010b38:	809c52ad 	.word	0x809c52ad
 8010b3c:	be927e4f 	.word	0xbe927e4f
 8010b40:	19cb1590 	.word	0x19cb1590
 8010b44:	3efa01a0 	.word	0x3efa01a0
 8010b48:	16c15177 	.word	0x16c15177
 8010b4c:	bf56c16c 	.word	0xbf56c16c
 8010b50:	5555554c 	.word	0x5555554c
 8010b54:	3fa55555 	.word	0x3fa55555
 8010b58:	3fd33332 	.word	0x3fd33332
 8010b5c:	3fe90000 	.word	0x3fe90000

08010b60 <__kernel_rem_pio2>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	ed2d 8b06 	vpush	{d8-d10}
 8010b68:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8010b6c:	469b      	mov	fp, r3
 8010b6e:	460f      	mov	r7, r1
 8010b70:	4bcf      	ldr	r3, [pc, #828]	; (8010eb0 <__kernel_rem_pio2+0x350>)
 8010b72:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8010b74:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010b78:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8010b7c:	9000      	str	r0, [sp, #0]
 8010b7e:	f112 0f14 	cmn.w	r2, #20
 8010b82:	bfa8      	it	ge
 8010b84:	2318      	movge	r3, #24
 8010b86:	f10b 31ff 	add.w	r1, fp, #4294967295
 8010b8a:	bfb8      	it	lt
 8010b8c:	2300      	movlt	r3, #0
 8010b8e:	f06f 0417 	mvn.w	r4, #23
 8010b92:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010e98 <__kernel_rem_pio2+0x338>
 8010b96:	bfa4      	itt	ge
 8010b98:	f1a2 0a03 	subge.w	sl, r2, #3
 8010b9c:	fb9a f3f3 	sdivge	r3, sl, r3
 8010ba0:	fb03 4404 	mla	r4, r3, r4, r4
 8010ba4:	1a5d      	subs	r5, r3, r1
 8010ba6:	4414      	add	r4, r2
 8010ba8:	eb09 0601 	add.w	r6, r9, r1
 8010bac:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010bb0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	42b2      	cmp	r2, r6
 8010bb8:	dd12      	ble.n	8010be0 <__kernel_rem_pio2+0x80>
 8010bba:	aa18      	add	r2, sp, #96	; 0x60
 8010bbc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010bc0:	460e      	mov	r6, r1
 8010bc2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010bc6:	f1cb 0a01 	rsb	sl, fp, #1
 8010bca:	eb0a 0006 	add.w	r0, sl, r6
 8010bce:	4581      	cmp	r9, r0
 8010bd0:	db25      	blt.n	8010c1e <__kernel_rem_pio2+0xbe>
 8010bd2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010e98 <__kernel_rem_pio2+0x338>
 8010bd6:	f8dd e000 	ldr.w	lr, [sp]
 8010bda:	4615      	mov	r5, r2
 8010bdc:	2000      	movs	r0, #0
 8010bde:	e015      	b.n	8010c0c <__kernel_rem_pio2+0xac>
 8010be0:	42d5      	cmn	r5, r2
 8010be2:	d409      	bmi.n	8010bf8 <__kernel_rem_pio2+0x98>
 8010be4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010be8:	ee07 0a90 	vmov	s15, r0
 8010bec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010bf0:	eca8 7b02 	vstmia	r8!, {d7}
 8010bf4:	3201      	adds	r2, #1
 8010bf6:	e7de      	b.n	8010bb6 <__kernel_rem_pio2+0x56>
 8010bf8:	eeb0 7b46 	vmov.f64	d7, d6
 8010bfc:	e7f8      	b.n	8010bf0 <__kernel_rem_pio2+0x90>
 8010bfe:	ecbe 5b02 	vldmia	lr!, {d5}
 8010c02:	ed95 6b00 	vldr	d6, [r5]
 8010c06:	3001      	adds	r0, #1
 8010c08:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010c0c:	4288      	cmp	r0, r1
 8010c0e:	f1a5 0508 	sub.w	r5, r5, #8
 8010c12:	ddf4      	ble.n	8010bfe <__kernel_rem_pio2+0x9e>
 8010c14:	eca8 7b02 	vstmia	r8!, {d7}
 8010c18:	3208      	adds	r2, #8
 8010c1a:	3601      	adds	r6, #1
 8010c1c:	e7d5      	b.n	8010bca <__kernel_rem_pio2+0x6a>
 8010c1e:	aa04      	add	r2, sp, #16
 8010c20:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010ea0 <__kernel_rem_pio2+0x340>
 8010c24:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010ea8 <__kernel_rem_pio2+0x348>
 8010c28:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010c2c:	9201      	str	r2, [sp, #4]
 8010c2e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8010c32:	464e      	mov	r6, r9
 8010c34:	ab90      	add	r3, sp, #576	; 0x240
 8010c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010c3a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010c3e:	ab04      	add	r3, sp, #16
 8010c40:	4618      	mov	r0, r3
 8010c42:	4632      	mov	r2, r6
 8010c44:	2a00      	cmp	r2, #0
 8010c46:	dc4e      	bgt.n	8010ce6 <__kernel_rem_pio2+0x186>
 8010c48:	4620      	mov	r0, r4
 8010c4a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8010c4e:	f000 fb4f 	bl	80112f0 <scalbn>
 8010c52:	eeb0 8b40 	vmov.f64	d8, d0
 8010c56:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010c5a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010c5e:	f000 fad3 	bl	8011208 <floor>
 8010c62:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010c66:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010c6a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010c6e:	2c00      	cmp	r4, #0
 8010c70:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010c74:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010c78:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010c7c:	ee17 8a90 	vmov	r8, s15
 8010c80:	dd46      	ble.n	8010d10 <__kernel_rem_pio2+0x1b0>
 8010c82:	1e70      	subs	r0, r6, #1
 8010c84:	aa04      	add	r2, sp, #16
 8010c86:	f1c4 0c18 	rsb	ip, r4, #24
 8010c8a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010c8e:	fa45 f20c 	asr.w	r2, r5, ip
 8010c92:	4490      	add	r8, r2
 8010c94:	fa02 f20c 	lsl.w	r2, r2, ip
 8010c98:	1aad      	subs	r5, r5, r2
 8010c9a:	aa04      	add	r2, sp, #16
 8010c9c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010ca0:	f1c4 0217 	rsb	r2, r4, #23
 8010ca4:	4115      	asrs	r5, r2
 8010ca6:	2d00      	cmp	r5, #0
 8010ca8:	dd41      	ble.n	8010d2e <__kernel_rem_pio2+0x1ce>
 8010caa:	f04f 0c00 	mov.w	ip, #0
 8010cae:	f108 0801 	add.w	r8, r8, #1
 8010cb2:	4660      	mov	r0, ip
 8010cb4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010cb8:	4566      	cmp	r6, ip
 8010cba:	dc69      	bgt.n	8010d90 <__kernel_rem_pio2+0x230>
 8010cbc:	2c00      	cmp	r4, #0
 8010cbe:	dd03      	ble.n	8010cc8 <__kernel_rem_pio2+0x168>
 8010cc0:	2c01      	cmp	r4, #1
 8010cc2:	d076      	beq.n	8010db2 <__kernel_rem_pio2+0x252>
 8010cc4:	2c02      	cmp	r4, #2
 8010cc6:	d07f      	beq.n	8010dc8 <__kernel_rem_pio2+0x268>
 8010cc8:	2d02      	cmp	r5, #2
 8010cca:	d130      	bne.n	8010d2e <__kernel_rem_pio2+0x1ce>
 8010ccc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010cd0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010cd4:	b358      	cbz	r0, 8010d2e <__kernel_rem_pio2+0x1ce>
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	9102      	str	r1, [sp, #8]
 8010cda:	f000 fb09 	bl	80112f0 <scalbn>
 8010cde:	9902      	ldr	r1, [sp, #8]
 8010ce0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010ce4:	e023      	b.n	8010d2e <__kernel_rem_pio2+0x1ce>
 8010ce6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010cea:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010cee:	3a01      	subs	r2, #1
 8010cf0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010cf4:	ad68      	add	r5, sp, #416	; 0x1a0
 8010cf6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010cfa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010cfe:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010d02:	eca0 0a01 	vstmia	r0!, {s0}
 8010d06:	ed95 0b00 	vldr	d0, [r5]
 8010d0a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010d0e:	e799      	b.n	8010c44 <__kernel_rem_pio2+0xe4>
 8010d10:	d105      	bne.n	8010d1e <__kernel_rem_pio2+0x1be>
 8010d12:	1e72      	subs	r2, r6, #1
 8010d14:	a804      	add	r0, sp, #16
 8010d16:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010d1a:	15ed      	asrs	r5, r5, #23
 8010d1c:	e7c3      	b.n	8010ca6 <__kernel_rem_pio2+0x146>
 8010d1e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010d22:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2a:	da2f      	bge.n	8010d8c <__kernel_rem_pio2+0x22c>
 8010d2c:	2500      	movs	r5, #0
 8010d2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d36:	f040 8087 	bne.w	8010e48 <__kernel_rem_pio2+0x2e8>
 8010d3a:	1e73      	subs	r3, r6, #1
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f04f 0c00 	mov.w	ip, #0
 8010d42:	4548      	cmp	r0, r9
 8010d44:	da47      	bge.n	8010dd6 <__kernel_rem_pio2+0x276>
 8010d46:	f1bc 0f00 	cmp.w	ip, #0
 8010d4a:	d070      	beq.n	8010e2e <__kernel_rem_pio2+0x2ce>
 8010d4c:	aa04      	add	r2, sp, #16
 8010d4e:	3c18      	subs	r4, #24
 8010d50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010d54:	2a00      	cmp	r2, #0
 8010d56:	d075      	beq.n	8010e44 <__kernel_rem_pio2+0x2e4>
 8010d58:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	9300      	str	r3, [sp, #0]
 8010d60:	f000 fac6 	bl	80112f0 <scalbn>
 8010d64:	9b00      	ldr	r3, [sp, #0]
 8010d66:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010ea0 <__kernel_rem_pio2+0x340>
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	2a00      	cmp	r2, #0
 8010d6e:	f280 80ac 	bge.w	8010eca <__kernel_rem_pio2+0x36a>
 8010d72:	4619      	mov	r1, r3
 8010d74:	2000      	movs	r0, #0
 8010d76:	2900      	cmp	r1, #0
 8010d78:	f2c0 80cd 	blt.w	8010f16 <__kernel_rem_pio2+0x3b6>
 8010d7c:	aa68      	add	r2, sp, #416	; 0x1a0
 8010d7e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010d82:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010e98 <__kernel_rem_pio2+0x338>
 8010d86:	4e4b      	ldr	r6, [pc, #300]	; (8010eb4 <__kernel_rem_pio2+0x354>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	e0b8      	b.n	8010efe <__kernel_rem_pio2+0x39e>
 8010d8c:	2502      	movs	r5, #2
 8010d8e:	e78c      	b.n	8010caa <__kernel_rem_pio2+0x14a>
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	b948      	cbnz	r0, 8010da8 <__kernel_rem_pio2+0x248>
 8010d94:	b11a      	cbz	r2, 8010d9e <__kernel_rem_pio2+0x23e>
 8010d96:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010d9a:	601a      	str	r2, [r3, #0]
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	f10c 0c01 	add.w	ip, ip, #1
 8010da2:	3304      	adds	r3, #4
 8010da4:	4610      	mov	r0, r2
 8010da6:	e787      	b.n	8010cb8 <__kernel_rem_pio2+0x158>
 8010da8:	ebae 0202 	sub.w	r2, lr, r2
 8010dac:	601a      	str	r2, [r3, #0]
 8010dae:	4602      	mov	r2, r0
 8010db0:	e7f5      	b.n	8010d9e <__kernel_rem_pio2+0x23e>
 8010db2:	1e72      	subs	r2, r6, #1
 8010db4:	ab04      	add	r3, sp, #16
 8010db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010dbe:	f10d 0c10 	add.w	ip, sp, #16
 8010dc2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010dc6:	e77f      	b.n	8010cc8 <__kernel_rem_pio2+0x168>
 8010dc8:	1e72      	subs	r2, r6, #1
 8010dca:	ab04      	add	r3, sp, #16
 8010dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010dd4:	e7f3      	b.n	8010dbe <__kernel_rem_pio2+0x25e>
 8010dd6:	aa04      	add	r2, sp, #16
 8010dd8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010ddc:	3801      	subs	r0, #1
 8010dde:	ea4c 0c02 	orr.w	ip, ip, r2
 8010de2:	e7ae      	b.n	8010d42 <__kernel_rem_pio2+0x1e2>
 8010de4:	3001      	adds	r0, #1
 8010de6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	d0fa      	beq.n	8010de4 <__kernel_rem_pio2+0x284>
 8010dee:	eb06 020b 	add.w	r2, r6, fp
 8010df2:	ad18      	add	r5, sp, #96	; 0x60
 8010df4:	1c73      	adds	r3, r6, #1
 8010df6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010dfa:	4406      	add	r6, r0
 8010dfc:	429e      	cmp	r6, r3
 8010dfe:	f6ff af19 	blt.w	8010c34 <__kernel_rem_pio2+0xd4>
 8010e02:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010e06:	9d00      	ldr	r5, [sp, #0]
 8010e08:	ee07 0a90 	vmov	s15, r0
 8010e0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010e10:	2000      	movs	r0, #0
 8010e12:	eca2 7b02 	vstmia	r2!, {d7}
 8010e16:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010e98 <__kernel_rem_pio2+0x338>
 8010e1a:	4694      	mov	ip, r2
 8010e1c:	4288      	cmp	r0, r1
 8010e1e:	dd09      	ble.n	8010e34 <__kernel_rem_pio2+0x2d4>
 8010e20:	a868      	add	r0, sp, #416	; 0x1a0
 8010e22:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010e26:	ed80 7b00 	vstr	d7, [r0]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	e7e6      	b.n	8010dfc <__kernel_rem_pio2+0x29c>
 8010e2e:	9b01      	ldr	r3, [sp, #4]
 8010e30:	2001      	movs	r0, #1
 8010e32:	e7d8      	b.n	8010de6 <__kernel_rem_pio2+0x286>
 8010e34:	ecb5 5b02 	vldmia	r5!, {d5}
 8010e38:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010e42:	e7eb      	b.n	8010e1c <__kernel_rem_pio2+0x2bc>
 8010e44:	3b01      	subs	r3, #1
 8010e46:	e781      	b.n	8010d4c <__kernel_rem_pio2+0x1ec>
 8010e48:	4260      	negs	r0, r4
 8010e4a:	eeb0 0b48 	vmov.f64	d0, d8
 8010e4e:	f000 fa4f 	bl	80112f0 <scalbn>
 8010e52:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010ea8 <__kernel_rem_pio2+0x348>
 8010e56:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5e:	db2b      	blt.n	8010eb8 <__kernel_rem_pio2+0x358>
 8010e60:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010ea0 <__kernel_rem_pio2+0x340>
 8010e64:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010e68:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010e6c:	aa04      	add	r2, sp, #16
 8010e6e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010e72:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010e76:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010e7a:	a904      	add	r1, sp, #16
 8010e7c:	ee10 3a10 	vmov	r3, s0
 8010e80:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010e84:	ee17 2a10 	vmov	r2, s14
 8010e88:	1c73      	adds	r3, r6, #1
 8010e8a:	3418      	adds	r4, #24
 8010e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010e90:	e762      	b.n	8010d58 <__kernel_rem_pio2+0x1f8>
 8010e92:	bf00      	nop
 8010e94:	f3af 8000 	nop.w
	...
 8010ea4:	3e700000 	.word	0x3e700000
 8010ea8:	00000000 	.word	0x00000000
 8010eac:	41700000 	.word	0x41700000
 8010eb0:	08015ae0 	.word	0x08015ae0
 8010eb4:	08015aa0 	.word	0x08015aa0
 8010eb8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010ebc:	aa04      	add	r2, sp, #16
 8010ebe:	ee10 3a10 	vmov	r3, s0
 8010ec2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010ec6:	4633      	mov	r3, r6
 8010ec8:	e746      	b.n	8010d58 <__kernel_rem_pio2+0x1f8>
 8010eca:	a804      	add	r0, sp, #16
 8010ecc:	a968      	add	r1, sp, #416	; 0x1a0
 8010ece:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010ed2:	9000      	str	r0, [sp, #0]
 8010ed4:	ee07 0a90 	vmov	s15, r0
 8010ed8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010edc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ee0:	3a01      	subs	r2, #1
 8010ee2:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010ee6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010eea:	ed81 7b00 	vstr	d7, [r1]
 8010eee:	e73d      	b.n	8010d6c <__kernel_rem_pio2+0x20c>
 8010ef0:	ecb6 5b02 	vldmia	r6!, {d5}
 8010ef4:	ecb4 6b02 	vldmia	r4!, {d6}
 8010ef8:	3201      	adds	r2, #1
 8010efa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010efe:	454a      	cmp	r2, r9
 8010f00:	dc01      	bgt.n	8010f06 <__kernel_rem_pio2+0x3a6>
 8010f02:	4290      	cmp	r0, r2
 8010f04:	daf4      	bge.n	8010ef0 <__kernel_rem_pio2+0x390>
 8010f06:	aa40      	add	r2, sp, #256	; 0x100
 8010f08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010f0c:	ed82 7b00 	vstr	d7, [r2]
 8010f10:	3901      	subs	r1, #1
 8010f12:	3001      	adds	r0, #1
 8010f14:	e72f      	b.n	8010d76 <__kernel_rem_pio2+0x216>
 8010f16:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010f18:	2a02      	cmp	r2, #2
 8010f1a:	dc0a      	bgt.n	8010f32 <__kernel_rem_pio2+0x3d2>
 8010f1c:	2a00      	cmp	r2, #0
 8010f1e:	dc5a      	bgt.n	8010fd6 <__kernel_rem_pio2+0x476>
 8010f20:	d039      	beq.n	8010f96 <__kernel_rem_pio2+0x436>
 8010f22:	f008 0007 	and.w	r0, r8, #7
 8010f26:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010f2a:	ecbd 8b06 	vpop	{d8-d10}
 8010f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f32:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010f34:	2a03      	cmp	r2, #3
 8010f36:	d1f4      	bne.n	8010f22 <__kernel_rem_pio2+0x3c2>
 8010f38:	aa40      	add	r2, sp, #256	; 0x100
 8010f3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010f3e:	4611      	mov	r1, r2
 8010f40:	4618      	mov	r0, r3
 8010f42:	2800      	cmp	r0, #0
 8010f44:	f1a1 0108 	sub.w	r1, r1, #8
 8010f48:	dc52      	bgt.n	8010ff0 <__kernel_rem_pio2+0x490>
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	2901      	cmp	r1, #1
 8010f4e:	f1a2 0208 	sub.w	r2, r2, #8
 8010f52:	dc5d      	bgt.n	8011010 <__kernel_rem_pio2+0x4b0>
 8010f54:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8011058 <__kernel_rem_pio2+0x4f8>
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	dc69      	bgt.n	8011030 <__kernel_rem_pio2+0x4d0>
 8010f5c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8010f60:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8010f64:	2d00      	cmp	r5, #0
 8010f66:	d16c      	bne.n	8011042 <__kernel_rem_pio2+0x4e2>
 8010f68:	ed87 5b00 	vstr	d5, [r7]
 8010f6c:	ed87 6b02 	vstr	d6, [r7, #8]
 8010f70:	ed87 7b04 	vstr	d7, [r7, #16]
 8010f74:	e7d5      	b.n	8010f22 <__kernel_rem_pio2+0x3c2>
 8010f76:	aa40      	add	r2, sp, #256	; 0x100
 8010f78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010f7c:	ed92 6b00 	vldr	d6, [r2]
 8010f80:	3b01      	subs	r3, #1
 8010f82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	daf5      	bge.n	8010f76 <__kernel_rem_pio2+0x416>
 8010f8a:	b10d      	cbz	r5, 8010f90 <__kernel_rem_pio2+0x430>
 8010f8c:	eeb1 7b47 	vneg.f64	d7, d7
 8010f90:	ed87 7b00 	vstr	d7, [r7]
 8010f94:	e7c5      	b.n	8010f22 <__kernel_rem_pio2+0x3c2>
 8010f96:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011058 <__kernel_rem_pio2+0x4f8>
 8010f9a:	e7f4      	b.n	8010f86 <__kernel_rem_pio2+0x426>
 8010f9c:	a940      	add	r1, sp, #256	; 0x100
 8010f9e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010fa2:	ed91 7b00 	vldr	d7, [r1]
 8010fa6:	3a01      	subs	r2, #1
 8010fa8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010fac:	2a00      	cmp	r2, #0
 8010fae:	daf5      	bge.n	8010f9c <__kernel_rem_pio2+0x43c>
 8010fb0:	b1ad      	cbz	r5, 8010fde <__kernel_rem_pio2+0x47e>
 8010fb2:	eeb1 7b46 	vneg.f64	d7, d6
 8010fb6:	ed87 7b00 	vstr	d7, [r7]
 8010fba:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010fbe:	a942      	add	r1, sp, #264	; 0x108
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	da0c      	bge.n	8010fe4 <__kernel_rem_pio2+0x484>
 8010fca:	b10d      	cbz	r5, 8010fd0 <__kernel_rem_pio2+0x470>
 8010fcc:	eeb1 7b47 	vneg.f64	d7, d7
 8010fd0:	ed87 7b02 	vstr	d7, [r7, #8]
 8010fd4:	e7a5      	b.n	8010f22 <__kernel_rem_pio2+0x3c2>
 8010fd6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011058 <__kernel_rem_pio2+0x4f8>
 8010fda:	461a      	mov	r2, r3
 8010fdc:	e7e6      	b.n	8010fac <__kernel_rem_pio2+0x44c>
 8010fde:	eeb0 7b46 	vmov.f64	d7, d6
 8010fe2:	e7e8      	b.n	8010fb6 <__kernel_rem_pio2+0x456>
 8010fe4:	ecb1 6b02 	vldmia	r1!, {d6}
 8010fe8:	3201      	adds	r2, #1
 8010fea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010fee:	e7ea      	b.n	8010fc6 <__kernel_rem_pio2+0x466>
 8010ff0:	ed91 7b00 	vldr	d7, [r1]
 8010ff4:	ed91 5b02 	vldr	d5, [r1, #8]
 8010ff8:	3801      	subs	r0, #1
 8010ffa:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010ffe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011002:	ed81 6b00 	vstr	d6, [r1]
 8011006:	ee37 7b05 	vadd.f64	d7, d7, d5
 801100a:	ed81 7b02 	vstr	d7, [r1, #8]
 801100e:	e798      	b.n	8010f42 <__kernel_rem_pio2+0x3e2>
 8011010:	ed92 7b00 	vldr	d7, [r2]
 8011014:	ed92 5b02 	vldr	d5, [r2, #8]
 8011018:	3901      	subs	r1, #1
 801101a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801101e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011022:	ed82 6b00 	vstr	d6, [r2]
 8011026:	ee37 7b05 	vadd.f64	d7, d7, d5
 801102a:	ed82 7b02 	vstr	d7, [r2, #8]
 801102e:	e78d      	b.n	8010f4c <__kernel_rem_pio2+0x3ec>
 8011030:	aa40      	add	r2, sp, #256	; 0x100
 8011032:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011036:	ed92 6b00 	vldr	d6, [r2]
 801103a:	3b01      	subs	r3, #1
 801103c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011040:	e78a      	b.n	8010f58 <__kernel_rem_pio2+0x3f8>
 8011042:	eeb1 5b45 	vneg.f64	d5, d5
 8011046:	eeb1 6b46 	vneg.f64	d6, d6
 801104a:	ed87 5b00 	vstr	d5, [r7]
 801104e:	eeb1 7b47 	vneg.f64	d7, d7
 8011052:	ed87 6b02 	vstr	d6, [r7, #8]
 8011056:	e78b      	b.n	8010f70 <__kernel_rem_pio2+0x410>
	...

08011060 <__kernel_sin>:
 8011060:	ee10 3a90 	vmov	r3, s1
 8011064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011068:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801106c:	da04      	bge.n	8011078 <__kernel_sin+0x18>
 801106e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011072:	ee17 3a90 	vmov	r3, s15
 8011076:	b35b      	cbz	r3, 80110d0 <__kernel_sin+0x70>
 8011078:	ee20 6b00 	vmul.f64	d6, d0, d0
 801107c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011080:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80110d8 <__kernel_sin+0x78>
 8011084:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80110e0 <__kernel_sin+0x80>
 8011088:	eea6 4b07 	vfma.f64	d4, d6, d7
 801108c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80110e8 <__kernel_sin+0x88>
 8011090:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011094:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80110f0 <__kernel_sin+0x90>
 8011098:	eea7 4b06 	vfma.f64	d4, d7, d6
 801109c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80110f8 <__kernel_sin+0x98>
 80110a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80110a4:	b930      	cbnz	r0, 80110b4 <__kernel_sin+0x54>
 80110a6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011100 <__kernel_sin+0xa0>
 80110aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80110ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 80110b2:	4770      	bx	lr
 80110b4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80110b8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80110bc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80110c0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80110c4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011108 <__kernel_sin+0xa8>
 80110c8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80110cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop
 80110d4:	f3af 8000 	nop.w
 80110d8:	5acfd57c 	.word	0x5acfd57c
 80110dc:	3de5d93a 	.word	0x3de5d93a
 80110e0:	8a2b9ceb 	.word	0x8a2b9ceb
 80110e4:	be5ae5e6 	.word	0xbe5ae5e6
 80110e8:	57b1fe7d 	.word	0x57b1fe7d
 80110ec:	3ec71de3 	.word	0x3ec71de3
 80110f0:	19c161d5 	.word	0x19c161d5
 80110f4:	bf2a01a0 	.word	0xbf2a01a0
 80110f8:	1110f8a6 	.word	0x1110f8a6
 80110fc:	3f811111 	.word	0x3f811111
 8011100:	55555549 	.word	0x55555549
 8011104:	bfc55555 	.word	0xbfc55555
 8011108:	55555549 	.word	0x55555549
 801110c:	3fc55555 	.word	0x3fc55555

08011110 <with_errno>:
 8011110:	b513      	push	{r0, r1, r4, lr}
 8011112:	4604      	mov	r4, r0
 8011114:	ed8d 0b00 	vstr	d0, [sp]
 8011118:	f000 fa58 	bl	80115cc <__errno>
 801111c:	ed9d 0b00 	vldr	d0, [sp]
 8011120:	6004      	str	r4, [r0, #0]
 8011122:	b002      	add	sp, #8
 8011124:	bd10      	pop	{r4, pc}

08011126 <xflow>:
 8011126:	b082      	sub	sp, #8
 8011128:	b158      	cbz	r0, 8011142 <xflow+0x1c>
 801112a:	eeb1 7b40 	vneg.f64	d7, d0
 801112e:	ed8d 7b00 	vstr	d7, [sp]
 8011132:	ed9d 7b00 	vldr	d7, [sp]
 8011136:	2022      	movs	r0, #34	; 0x22
 8011138:	ee20 0b07 	vmul.f64	d0, d0, d7
 801113c:	b002      	add	sp, #8
 801113e:	f7ff bfe7 	b.w	8011110 <with_errno>
 8011142:	eeb0 7b40 	vmov.f64	d7, d0
 8011146:	e7f2      	b.n	801112e <xflow+0x8>

08011148 <__math_uflow>:
 8011148:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011150 <__math_uflow+0x8>
 801114c:	f7ff bfeb 	b.w	8011126 <xflow>
 8011150:	00000000 	.word	0x00000000
 8011154:	10000000 	.word	0x10000000

08011158 <__math_oflow>:
 8011158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011160 <__math_oflow+0x8>
 801115c:	f7ff bfe3 	b.w	8011126 <xflow>
 8011160:	00000000 	.word	0x00000000
 8011164:	70000000 	.word	0x70000000

08011168 <__math_divzero>:
 8011168:	b082      	sub	sp, #8
 801116a:	2800      	cmp	r0, #0
 801116c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011170:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011174:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011178:	ed8d 7b00 	vstr	d7, [sp]
 801117c:	ed9d 0b00 	vldr	d0, [sp]
 8011180:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011190 <__math_divzero+0x28>
 8011184:	2022      	movs	r0, #34	; 0x22
 8011186:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801118a:	b002      	add	sp, #8
 801118c:	f7ff bfc0 	b.w	8011110 <with_errno>
	...

08011198 <__math_invalid>:
 8011198:	eeb0 7b40 	vmov.f64	d7, d0
 801119c:	eeb4 7b47 	vcmp.f64	d7, d7
 80111a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80111a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80111ac:	d602      	bvs.n	80111b4 <__math_invalid+0x1c>
 80111ae:	2021      	movs	r0, #33	; 0x21
 80111b0:	f7ff bfae 	b.w	8011110 <with_errno>
 80111b4:	4770      	bx	lr

080111b6 <__math_check_uflow>:
 80111b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80111ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111be:	d102      	bne.n	80111c6 <__math_check_uflow+0x10>
 80111c0:	2022      	movs	r0, #34	; 0x22
 80111c2:	f7ff bfa5 	b.w	8011110 <with_errno>
 80111c6:	4770      	bx	lr

080111c8 <__math_check_oflow>:
 80111c8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80111e8 <__math_check_oflow+0x20>
 80111cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80111d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80111d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d8:	dd02      	ble.n	80111e0 <__math_check_oflow+0x18>
 80111da:	2022      	movs	r0, #34	; 0x22
 80111dc:	f7ff bf98 	b.w	8011110 <with_errno>
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	f3af 8000 	nop.w
 80111e8:	ffffffff 	.word	0xffffffff
 80111ec:	7fefffff 	.word	0x7fefffff

080111f0 <fabs>:
 80111f0:	ec51 0b10 	vmov	r0, r1, d0
 80111f4:	ee10 2a10 	vmov	r2, s0
 80111f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111fc:	ec43 2b10 	vmov	d0, r2, r3
 8011200:	4770      	bx	lr
 8011202:	0000      	movs	r0, r0
 8011204:	0000      	movs	r0, r0
	...

08011208 <floor>:
 8011208:	ee10 1a90 	vmov	r1, s1
 801120c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011210:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011214:	2b13      	cmp	r3, #19
 8011216:	b530      	push	{r4, r5, lr}
 8011218:	ee10 0a10 	vmov	r0, s0
 801121c:	ee10 5a10 	vmov	r5, s0
 8011220:	dc31      	bgt.n	8011286 <floor+0x7e>
 8011222:	2b00      	cmp	r3, #0
 8011224:	da15      	bge.n	8011252 <floor+0x4a>
 8011226:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80112e0 <floor+0xd8>
 801122a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801122e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011236:	dd07      	ble.n	8011248 <floor+0x40>
 8011238:	2900      	cmp	r1, #0
 801123a:	da4e      	bge.n	80112da <floor+0xd2>
 801123c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011240:	4318      	orrs	r0, r3
 8011242:	d001      	beq.n	8011248 <floor+0x40>
 8011244:	4928      	ldr	r1, [pc, #160]	; (80112e8 <floor+0xe0>)
 8011246:	2000      	movs	r0, #0
 8011248:	460b      	mov	r3, r1
 801124a:	4602      	mov	r2, r0
 801124c:	ec43 2b10 	vmov	d0, r2, r3
 8011250:	e020      	b.n	8011294 <floor+0x8c>
 8011252:	4a26      	ldr	r2, [pc, #152]	; (80112ec <floor+0xe4>)
 8011254:	411a      	asrs	r2, r3
 8011256:	ea01 0402 	and.w	r4, r1, r2
 801125a:	4304      	orrs	r4, r0
 801125c:	d01a      	beq.n	8011294 <floor+0x8c>
 801125e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80112e0 <floor+0xd8>
 8011262:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011266:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126e:	ddeb      	ble.n	8011248 <floor+0x40>
 8011270:	2900      	cmp	r1, #0
 8011272:	bfbe      	ittt	lt
 8011274:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011278:	fa40 f303 	asrlt.w	r3, r0, r3
 801127c:	18c9      	addlt	r1, r1, r3
 801127e:	ea21 0102 	bic.w	r1, r1, r2
 8011282:	2000      	movs	r0, #0
 8011284:	e7e0      	b.n	8011248 <floor+0x40>
 8011286:	2b33      	cmp	r3, #51	; 0x33
 8011288:	dd05      	ble.n	8011296 <floor+0x8e>
 801128a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801128e:	d101      	bne.n	8011294 <floor+0x8c>
 8011290:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011294:	bd30      	pop	{r4, r5, pc}
 8011296:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801129a:	f04f 32ff 	mov.w	r2, #4294967295
 801129e:	40e2      	lsrs	r2, r4
 80112a0:	4202      	tst	r2, r0
 80112a2:	d0f7      	beq.n	8011294 <floor+0x8c>
 80112a4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80112e0 <floor+0xd8>
 80112a8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80112ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80112b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b4:	ddc8      	ble.n	8011248 <floor+0x40>
 80112b6:	2900      	cmp	r1, #0
 80112b8:	da02      	bge.n	80112c0 <floor+0xb8>
 80112ba:	2b14      	cmp	r3, #20
 80112bc:	d103      	bne.n	80112c6 <floor+0xbe>
 80112be:	3101      	adds	r1, #1
 80112c0:	ea20 0002 	bic.w	r0, r0, r2
 80112c4:	e7c0      	b.n	8011248 <floor+0x40>
 80112c6:	2401      	movs	r4, #1
 80112c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80112cc:	fa04 f303 	lsl.w	r3, r4, r3
 80112d0:	4418      	add	r0, r3
 80112d2:	42a8      	cmp	r0, r5
 80112d4:	bf38      	it	cc
 80112d6:	1909      	addcc	r1, r1, r4
 80112d8:	e7f2      	b.n	80112c0 <floor+0xb8>
 80112da:	2000      	movs	r0, #0
 80112dc:	4601      	mov	r1, r0
 80112de:	e7b3      	b.n	8011248 <floor+0x40>
 80112e0:	8800759c 	.word	0x8800759c
 80112e4:	7e37e43c 	.word	0x7e37e43c
 80112e8:	bff00000 	.word	0xbff00000
 80112ec:	000fffff 	.word	0x000fffff

080112f0 <scalbn>:
 80112f0:	b082      	sub	sp, #8
 80112f2:	ed8d 0b00 	vstr	d0, [sp]
 80112f6:	9b01      	ldr	r3, [sp, #4]
 80112f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80112fc:	b9a2      	cbnz	r2, 8011328 <scalbn+0x38>
 80112fe:	9a00      	ldr	r2, [sp, #0]
 8011300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011304:	4313      	orrs	r3, r2
 8011306:	d03a      	beq.n	801137e <scalbn+0x8e>
 8011308:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80113e0 <scalbn+0xf0>
 801130c:	4b40      	ldr	r3, [pc, #256]	; (8011410 <scalbn+0x120>)
 801130e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011312:	4298      	cmp	r0, r3
 8011314:	ed8d 7b00 	vstr	d7, [sp]
 8011318:	da11      	bge.n	801133e <scalbn+0x4e>
 801131a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80113e8 <scalbn+0xf8>
 801131e:	ed9d 6b00 	vldr	d6, [sp]
 8011322:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011326:	e007      	b.n	8011338 <scalbn+0x48>
 8011328:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801132c:	428a      	cmp	r2, r1
 801132e:	d10a      	bne.n	8011346 <scalbn+0x56>
 8011330:	ed9d 7b00 	vldr	d7, [sp]
 8011334:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011338:	ed8d 7b00 	vstr	d7, [sp]
 801133c:	e01f      	b.n	801137e <scalbn+0x8e>
 801133e:	9b01      	ldr	r3, [sp, #4]
 8011340:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011344:	3a36      	subs	r2, #54	; 0x36
 8011346:	4402      	add	r2, r0
 8011348:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801134c:	428a      	cmp	r2, r1
 801134e:	dd0a      	ble.n	8011366 <scalbn+0x76>
 8011350:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80113f0 <scalbn+0x100>
 8011354:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80113f8 <scalbn+0x108>
 8011358:	eeb0 6b47 	vmov.f64	d6, d7
 801135c:	9b01      	ldr	r3, [sp, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011364:	e7dd      	b.n	8011322 <scalbn+0x32>
 8011366:	2a00      	cmp	r2, #0
 8011368:	dd0d      	ble.n	8011386 <scalbn+0x96>
 801136a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801136e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011372:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011376:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801137a:	e9cd 0100 	strd	r0, r1, [sp]
 801137e:	ed9d 0b00 	vldr	d0, [sp]
 8011382:	b002      	add	sp, #8
 8011384:	4770      	bx	lr
 8011386:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801138a:	da18      	bge.n	80113be <scalbn+0xce>
 801138c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011390:	4298      	cmp	r0, r3
 8011392:	9b01      	ldr	r3, [sp, #4]
 8011394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011398:	dd09      	ble.n	80113ae <scalbn+0xbe>
 801139a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80113f0 <scalbn+0x100>
 801139e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80113f8 <scalbn+0x108>
 80113a2:	eeb0 6b47 	vmov.f64	d6, d7
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80113ac:	e7b9      	b.n	8011322 <scalbn+0x32>
 80113ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80113e8 <scalbn+0xf8>
 80113b2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011400 <scalbn+0x110>
 80113b6:	eeb0 6b47 	vmov.f64	d6, d7
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	e7f4      	b.n	80113a8 <scalbn+0xb8>
 80113be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80113c6:	3236      	adds	r2, #54	; 0x36
 80113c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113cc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80113d0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011408 <scalbn+0x118>
 80113d4:	ec41 0b17 	vmov	d7, r0, r1
 80113d8:	e7a3      	b.n	8011322 <scalbn+0x32>
 80113da:	bf00      	nop
 80113dc:	f3af 8000 	nop.w
 80113e0:	00000000 	.word	0x00000000
 80113e4:	43500000 	.word	0x43500000
 80113e8:	c2f8f359 	.word	0xc2f8f359
 80113ec:	01a56e1f 	.word	0x01a56e1f
 80113f0:	8800759c 	.word	0x8800759c
 80113f4:	7e37e43c 	.word	0x7e37e43c
 80113f8:	8800759c 	.word	0x8800759c
 80113fc:	fe37e43c 	.word	0xfe37e43c
 8011400:	c2f8f359 	.word	0xc2f8f359
 8011404:	81a56e1f 	.word	0x81a56e1f
 8011408:	00000000 	.word	0x00000000
 801140c:	3c900000 	.word	0x3c900000
 8011410:	ffff3cb0 	.word	0xffff3cb0

08011414 <atanf>:
 8011414:	b538      	push	{r3, r4, r5, lr}
 8011416:	ee10 5a10 	vmov	r5, s0
 801141a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801141e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011422:	eef0 7a40 	vmov.f32	s15, s0
 8011426:	db0f      	blt.n	8011448 <atanf+0x34>
 8011428:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801142c:	dd04      	ble.n	8011438 <atanf+0x24>
 801142e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011432:	eeb0 0a67 	vmov.f32	s0, s15
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011570 <atanf+0x15c>
 801143c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8011574 <atanf+0x160>
 8011440:	2d00      	cmp	r5, #0
 8011442:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8011446:	e7f4      	b.n	8011432 <atanf+0x1e>
 8011448:	4b4b      	ldr	r3, [pc, #300]	; (8011578 <atanf+0x164>)
 801144a:	429c      	cmp	r4, r3
 801144c:	dc10      	bgt.n	8011470 <atanf+0x5c>
 801144e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011452:	da0a      	bge.n	801146a <atanf+0x56>
 8011454:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801157c <atanf+0x168>
 8011458:	ee30 7a07 	vadd.f32	s14, s0, s14
 801145c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011460:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011468:	dce3      	bgt.n	8011432 <atanf+0x1e>
 801146a:	f04f 33ff 	mov.w	r3, #4294967295
 801146e:	e013      	b.n	8011498 <atanf+0x84>
 8011470:	f000 f8a4 	bl	80115bc <fabsf>
 8011474:	4b42      	ldr	r3, [pc, #264]	; (8011580 <atanf+0x16c>)
 8011476:	429c      	cmp	r4, r3
 8011478:	dc4f      	bgt.n	801151a <atanf+0x106>
 801147a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801147e:	429c      	cmp	r4, r3
 8011480:	dc41      	bgt.n	8011506 <atanf+0xf2>
 8011482:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011486:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801148a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801148e:	2300      	movs	r3, #0
 8011490:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011494:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011498:	1c5a      	adds	r2, r3, #1
 801149a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801149e:	eddf 5a39 	vldr	s11, [pc, #228]	; 8011584 <atanf+0x170>
 80114a2:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8011588 <atanf+0x174>
 80114a6:	ed9f 5a39 	vldr	s10, [pc, #228]	; 801158c <atanf+0x178>
 80114aa:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8011590 <atanf+0x17c>
 80114ae:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80114b2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80114b6:	eddf 5a37 	vldr	s11, [pc, #220]	; 8011594 <atanf+0x180>
 80114ba:	eee6 5a07 	vfma.f32	s11, s12, s14
 80114be:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8011598 <atanf+0x184>
 80114c2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80114c6:	eddf 5a35 	vldr	s11, [pc, #212]	; 801159c <atanf+0x188>
 80114ca:	eee6 5a07 	vfma.f32	s11, s12, s14
 80114ce:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80115a0 <atanf+0x18c>
 80114d2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80114d6:	eddf 5a33 	vldr	s11, [pc, #204]	; 80115a4 <atanf+0x190>
 80114da:	eee7 5a05 	vfma.f32	s11, s14, s10
 80114de:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80115a8 <atanf+0x194>
 80114e2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80114e6:	eddf 5a31 	vldr	s11, [pc, #196]	; 80115ac <atanf+0x198>
 80114ea:	eee5 5a07 	vfma.f32	s11, s10, s14
 80114ee:	eea5 0a87 	vfma.f32	s0, s11, s14
 80114f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80114f6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80114fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80114fe:	d121      	bne.n	8011544 <atanf+0x130>
 8011500:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011504:	e795      	b.n	8011432 <atanf+0x1e>
 8011506:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801150a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801150e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011512:	2301      	movs	r3, #1
 8011514:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011518:	e7be      	b.n	8011498 <atanf+0x84>
 801151a:	4b25      	ldr	r3, [pc, #148]	; (80115b0 <atanf+0x19c>)
 801151c:	429c      	cmp	r4, r3
 801151e:	dc0b      	bgt.n	8011538 <atanf+0x124>
 8011520:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011528:	eea0 7a27 	vfma.f32	s14, s0, s15
 801152c:	2302      	movs	r3, #2
 801152e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011536:	e7af      	b.n	8011498 <atanf+0x84>
 8011538:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801153c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011540:	2303      	movs	r3, #3
 8011542:	e7a9      	b.n	8011498 <atanf+0x84>
 8011544:	4a1b      	ldr	r2, [pc, #108]	; (80115b4 <atanf+0x1a0>)
 8011546:	491c      	ldr	r1, [pc, #112]	; (80115b8 <atanf+0x1a4>)
 8011548:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801154c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011550:	ed93 7a00 	vldr	s14, [r3]
 8011554:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011558:	2d00      	cmp	r5, #0
 801155a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801155e:	ed92 0a00 	vldr	s0, [r2]
 8011562:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011566:	bfb8      	it	lt
 8011568:	eef1 7a67 	vneglt.f32	s15, s15
 801156c:	e761      	b.n	8011432 <atanf+0x1e>
 801156e:	bf00      	nop
 8011570:	3fc90fdb 	.word	0x3fc90fdb
 8011574:	bfc90fdb 	.word	0xbfc90fdb
 8011578:	3edfffff 	.word	0x3edfffff
 801157c:	7149f2ca 	.word	0x7149f2ca
 8011580:	3f97ffff 	.word	0x3f97ffff
 8011584:	3c8569d7 	.word	0x3c8569d7
 8011588:	3d4bda59 	.word	0x3d4bda59
 801158c:	bd15a221 	.word	0xbd15a221
 8011590:	be4ccccd 	.word	0xbe4ccccd
 8011594:	3d886b35 	.word	0x3d886b35
 8011598:	3dba2e6e 	.word	0x3dba2e6e
 801159c:	3e124925 	.word	0x3e124925
 80115a0:	3eaaaaab 	.word	0x3eaaaaab
 80115a4:	bd6ef16b 	.word	0xbd6ef16b
 80115a8:	bd9d8795 	.word	0xbd9d8795
 80115ac:	bde38e38 	.word	0xbde38e38
 80115b0:	401bffff 	.word	0x401bffff
 80115b4:	08015af0 	.word	0x08015af0
 80115b8:	08015b00 	.word	0x08015b00

080115bc <fabsf>:
 80115bc:	ee10 3a10 	vmov	r3, s0
 80115c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80115c4:	ee00 3a10 	vmov	s0, r3
 80115c8:	4770      	bx	lr
	...

080115cc <__errno>:
 80115cc:	4b01      	ldr	r3, [pc, #4]	; (80115d4 <__errno+0x8>)
 80115ce:	6818      	ldr	r0, [r3, #0]
 80115d0:	4770      	bx	lr
 80115d2:	bf00      	nop
 80115d4:	24000238 	.word	0x24000238

080115d8 <__libc_init_array>:
 80115d8:	b570      	push	{r4, r5, r6, lr}
 80115da:	4d0d      	ldr	r5, [pc, #52]	; (8011610 <__libc_init_array+0x38>)
 80115dc:	4c0d      	ldr	r4, [pc, #52]	; (8011614 <__libc_init_array+0x3c>)
 80115de:	1b64      	subs	r4, r4, r5
 80115e0:	10a4      	asrs	r4, r4, #2
 80115e2:	2600      	movs	r6, #0
 80115e4:	42a6      	cmp	r6, r4
 80115e6:	d109      	bne.n	80115fc <__libc_init_array+0x24>
 80115e8:	4d0b      	ldr	r5, [pc, #44]	; (8011618 <__libc_init_array+0x40>)
 80115ea:	4c0c      	ldr	r4, [pc, #48]	; (801161c <__libc_init_array+0x44>)
 80115ec:	f002 fcd4 	bl	8013f98 <_init>
 80115f0:	1b64      	subs	r4, r4, r5
 80115f2:	10a4      	asrs	r4, r4, #2
 80115f4:	2600      	movs	r6, #0
 80115f6:	42a6      	cmp	r6, r4
 80115f8:	d105      	bne.n	8011606 <__libc_init_array+0x2e>
 80115fa:	bd70      	pop	{r4, r5, r6, pc}
 80115fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011600:	4798      	blx	r3
 8011602:	3601      	adds	r6, #1
 8011604:	e7ee      	b.n	80115e4 <__libc_init_array+0xc>
 8011606:	f855 3b04 	ldr.w	r3, [r5], #4
 801160a:	4798      	blx	r3
 801160c:	3601      	adds	r6, #1
 801160e:	e7f2      	b.n	80115f6 <__libc_init_array+0x1e>
 8011610:	08015efc 	.word	0x08015efc
 8011614:	08015efc 	.word	0x08015efc
 8011618:	08015efc 	.word	0x08015efc
 801161c:	08015f04 	.word	0x08015f04

08011620 <memset>:
 8011620:	4402      	add	r2, r0
 8011622:	4603      	mov	r3, r0
 8011624:	4293      	cmp	r3, r2
 8011626:	d100      	bne.n	801162a <memset+0xa>
 8011628:	4770      	bx	lr
 801162a:	f803 1b01 	strb.w	r1, [r3], #1
 801162e:	e7f9      	b.n	8011624 <memset+0x4>

08011630 <__cvt>:
 8011630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011632:	ed2d 8b02 	vpush	{d8}
 8011636:	eeb0 8b40 	vmov.f64	d8, d0
 801163a:	b085      	sub	sp, #20
 801163c:	4617      	mov	r7, r2
 801163e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011640:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011642:	ee18 2a90 	vmov	r2, s17
 8011646:	f025 0520 	bic.w	r5, r5, #32
 801164a:	2a00      	cmp	r2, #0
 801164c:	bfb6      	itet	lt
 801164e:	222d      	movlt	r2, #45	; 0x2d
 8011650:	2200      	movge	r2, #0
 8011652:	eeb1 8b40 	vneglt.f64	d8, d0
 8011656:	2d46      	cmp	r5, #70	; 0x46
 8011658:	460c      	mov	r4, r1
 801165a:	701a      	strb	r2, [r3, #0]
 801165c:	d004      	beq.n	8011668 <__cvt+0x38>
 801165e:	2d45      	cmp	r5, #69	; 0x45
 8011660:	d100      	bne.n	8011664 <__cvt+0x34>
 8011662:	3401      	adds	r4, #1
 8011664:	2102      	movs	r1, #2
 8011666:	e000      	b.n	801166a <__cvt+0x3a>
 8011668:	2103      	movs	r1, #3
 801166a:	ab03      	add	r3, sp, #12
 801166c:	9301      	str	r3, [sp, #4]
 801166e:	ab02      	add	r3, sp, #8
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	4622      	mov	r2, r4
 8011674:	4633      	mov	r3, r6
 8011676:	eeb0 0b48 	vmov.f64	d0, d8
 801167a:	f000 fddd 	bl	8012238 <_dtoa_r>
 801167e:	2d47      	cmp	r5, #71	; 0x47
 8011680:	d109      	bne.n	8011696 <__cvt+0x66>
 8011682:	07fb      	lsls	r3, r7, #31
 8011684:	d407      	bmi.n	8011696 <__cvt+0x66>
 8011686:	9b03      	ldr	r3, [sp, #12]
 8011688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801168a:	1a1b      	subs	r3, r3, r0
 801168c:	6013      	str	r3, [r2, #0]
 801168e:	b005      	add	sp, #20
 8011690:	ecbd 8b02 	vpop	{d8}
 8011694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011696:	2d46      	cmp	r5, #70	; 0x46
 8011698:	eb00 0204 	add.w	r2, r0, r4
 801169c:	d10c      	bne.n	80116b8 <__cvt+0x88>
 801169e:	7803      	ldrb	r3, [r0, #0]
 80116a0:	2b30      	cmp	r3, #48	; 0x30
 80116a2:	d107      	bne.n	80116b4 <__cvt+0x84>
 80116a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80116a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ac:	bf1c      	itt	ne
 80116ae:	f1c4 0401 	rsbne	r4, r4, #1
 80116b2:	6034      	strne	r4, [r6, #0]
 80116b4:	6833      	ldr	r3, [r6, #0]
 80116b6:	441a      	add	r2, r3
 80116b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80116bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c0:	bf08      	it	eq
 80116c2:	9203      	streq	r2, [sp, #12]
 80116c4:	2130      	movs	r1, #48	; 0x30
 80116c6:	9b03      	ldr	r3, [sp, #12]
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d2dc      	bcs.n	8011686 <__cvt+0x56>
 80116cc:	1c5c      	adds	r4, r3, #1
 80116ce:	9403      	str	r4, [sp, #12]
 80116d0:	7019      	strb	r1, [r3, #0]
 80116d2:	e7f8      	b.n	80116c6 <__cvt+0x96>

080116d4 <__exponent>:
 80116d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116d6:	4603      	mov	r3, r0
 80116d8:	2900      	cmp	r1, #0
 80116da:	bfb8      	it	lt
 80116dc:	4249      	neglt	r1, r1
 80116de:	f803 2b02 	strb.w	r2, [r3], #2
 80116e2:	bfb4      	ite	lt
 80116e4:	222d      	movlt	r2, #45	; 0x2d
 80116e6:	222b      	movge	r2, #43	; 0x2b
 80116e8:	2909      	cmp	r1, #9
 80116ea:	7042      	strb	r2, [r0, #1]
 80116ec:	dd2a      	ble.n	8011744 <__exponent+0x70>
 80116ee:	f10d 0407 	add.w	r4, sp, #7
 80116f2:	46a4      	mov	ip, r4
 80116f4:	270a      	movs	r7, #10
 80116f6:	46a6      	mov	lr, r4
 80116f8:	460a      	mov	r2, r1
 80116fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80116fe:	fb07 1516 	mls	r5, r7, r6, r1
 8011702:	3530      	adds	r5, #48	; 0x30
 8011704:	2a63      	cmp	r2, #99	; 0x63
 8011706:	f104 34ff 	add.w	r4, r4, #4294967295
 801170a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801170e:	4631      	mov	r1, r6
 8011710:	dcf1      	bgt.n	80116f6 <__exponent+0x22>
 8011712:	3130      	adds	r1, #48	; 0x30
 8011714:	f1ae 0502 	sub.w	r5, lr, #2
 8011718:	f804 1c01 	strb.w	r1, [r4, #-1]
 801171c:	1c44      	adds	r4, r0, #1
 801171e:	4629      	mov	r1, r5
 8011720:	4561      	cmp	r1, ip
 8011722:	d30a      	bcc.n	801173a <__exponent+0x66>
 8011724:	f10d 0209 	add.w	r2, sp, #9
 8011728:	eba2 020e 	sub.w	r2, r2, lr
 801172c:	4565      	cmp	r5, ip
 801172e:	bf88      	it	hi
 8011730:	2200      	movhi	r2, #0
 8011732:	4413      	add	r3, r2
 8011734:	1a18      	subs	r0, r3, r0
 8011736:	b003      	add	sp, #12
 8011738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801173a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801173e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011742:	e7ed      	b.n	8011720 <__exponent+0x4c>
 8011744:	2330      	movs	r3, #48	; 0x30
 8011746:	3130      	adds	r1, #48	; 0x30
 8011748:	7083      	strb	r3, [r0, #2]
 801174a:	70c1      	strb	r1, [r0, #3]
 801174c:	1d03      	adds	r3, r0, #4
 801174e:	e7f1      	b.n	8011734 <__exponent+0x60>

08011750 <_printf_float>:
 8011750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011754:	b08b      	sub	sp, #44	; 0x2c
 8011756:	460c      	mov	r4, r1
 8011758:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801175c:	4616      	mov	r6, r2
 801175e:	461f      	mov	r7, r3
 8011760:	4605      	mov	r5, r0
 8011762:	f001 fca3 	bl	80130ac <_localeconv_r>
 8011766:	f8d0 b000 	ldr.w	fp, [r0]
 801176a:	4658      	mov	r0, fp
 801176c:	f7ee fdb8 	bl	80002e0 <strlen>
 8011770:	2300      	movs	r3, #0
 8011772:	9308      	str	r3, [sp, #32]
 8011774:	f8d8 3000 	ldr.w	r3, [r8]
 8011778:	f894 9018 	ldrb.w	r9, [r4, #24]
 801177c:	6822      	ldr	r2, [r4, #0]
 801177e:	3307      	adds	r3, #7
 8011780:	f023 0307 	bic.w	r3, r3, #7
 8011784:	f103 0108 	add.w	r1, r3, #8
 8011788:	f8c8 1000 	str.w	r1, [r8]
 801178c:	4682      	mov	sl, r0
 801178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011792:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011796:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80119f8 <_printf_float+0x2a8>
 801179a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801179e:	eeb0 6bc0 	vabs.f64	d6, d0
 80117a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80117a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117aa:	dd24      	ble.n	80117f6 <_printf_float+0xa6>
 80117ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80117b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117b4:	d502      	bpl.n	80117bc <_printf_float+0x6c>
 80117b6:	232d      	movs	r3, #45	; 0x2d
 80117b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117bc:	4b90      	ldr	r3, [pc, #576]	; (8011a00 <_printf_float+0x2b0>)
 80117be:	4891      	ldr	r0, [pc, #580]	; (8011a04 <_printf_float+0x2b4>)
 80117c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80117c4:	bf94      	ite	ls
 80117c6:	4698      	movls	r8, r3
 80117c8:	4680      	movhi	r8, r0
 80117ca:	2303      	movs	r3, #3
 80117cc:	6123      	str	r3, [r4, #16]
 80117ce:	f022 0204 	bic.w	r2, r2, #4
 80117d2:	2300      	movs	r3, #0
 80117d4:	6022      	str	r2, [r4, #0]
 80117d6:	9304      	str	r3, [sp, #16]
 80117d8:	9700      	str	r7, [sp, #0]
 80117da:	4633      	mov	r3, r6
 80117dc:	aa09      	add	r2, sp, #36	; 0x24
 80117de:	4621      	mov	r1, r4
 80117e0:	4628      	mov	r0, r5
 80117e2:	f000 f9d3 	bl	8011b8c <_printf_common>
 80117e6:	3001      	adds	r0, #1
 80117e8:	f040 808a 	bne.w	8011900 <_printf_float+0x1b0>
 80117ec:	f04f 30ff 	mov.w	r0, #4294967295
 80117f0:	b00b      	add	sp, #44	; 0x2c
 80117f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80117fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117fe:	d709      	bvc.n	8011814 <_printf_float+0xc4>
 8011800:	ee10 3a90 	vmov	r3, s1
 8011804:	2b00      	cmp	r3, #0
 8011806:	bfbc      	itt	lt
 8011808:	232d      	movlt	r3, #45	; 0x2d
 801180a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801180e:	487e      	ldr	r0, [pc, #504]	; (8011a08 <_printf_float+0x2b8>)
 8011810:	4b7e      	ldr	r3, [pc, #504]	; (8011a0c <_printf_float+0x2bc>)
 8011812:	e7d5      	b.n	80117c0 <_printf_float+0x70>
 8011814:	6863      	ldr	r3, [r4, #4]
 8011816:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801181a:	9104      	str	r1, [sp, #16]
 801181c:	1c59      	adds	r1, r3, #1
 801181e:	d13c      	bne.n	801189a <_printf_float+0x14a>
 8011820:	2306      	movs	r3, #6
 8011822:	6063      	str	r3, [r4, #4]
 8011824:	2300      	movs	r3, #0
 8011826:	9303      	str	r3, [sp, #12]
 8011828:	ab08      	add	r3, sp, #32
 801182a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801182e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011832:	ab07      	add	r3, sp, #28
 8011834:	6861      	ldr	r1, [r4, #4]
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	6022      	str	r2, [r4, #0]
 801183a:	f10d 031b 	add.w	r3, sp, #27
 801183e:	4628      	mov	r0, r5
 8011840:	f7ff fef6 	bl	8011630 <__cvt>
 8011844:	9b04      	ldr	r3, [sp, #16]
 8011846:	9907      	ldr	r1, [sp, #28]
 8011848:	2b47      	cmp	r3, #71	; 0x47
 801184a:	4680      	mov	r8, r0
 801184c:	d108      	bne.n	8011860 <_printf_float+0x110>
 801184e:	1cc8      	adds	r0, r1, #3
 8011850:	db02      	blt.n	8011858 <_printf_float+0x108>
 8011852:	6863      	ldr	r3, [r4, #4]
 8011854:	4299      	cmp	r1, r3
 8011856:	dd41      	ble.n	80118dc <_printf_float+0x18c>
 8011858:	f1a9 0902 	sub.w	r9, r9, #2
 801185c:	fa5f f989 	uxtb.w	r9, r9
 8011860:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011864:	d820      	bhi.n	80118a8 <_printf_float+0x158>
 8011866:	3901      	subs	r1, #1
 8011868:	464a      	mov	r2, r9
 801186a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801186e:	9107      	str	r1, [sp, #28]
 8011870:	f7ff ff30 	bl	80116d4 <__exponent>
 8011874:	9a08      	ldr	r2, [sp, #32]
 8011876:	9004      	str	r0, [sp, #16]
 8011878:	1813      	adds	r3, r2, r0
 801187a:	2a01      	cmp	r2, #1
 801187c:	6123      	str	r3, [r4, #16]
 801187e:	dc02      	bgt.n	8011886 <_printf_float+0x136>
 8011880:	6822      	ldr	r2, [r4, #0]
 8011882:	07d2      	lsls	r2, r2, #31
 8011884:	d501      	bpl.n	801188a <_printf_float+0x13a>
 8011886:	3301      	adds	r3, #1
 8011888:	6123      	str	r3, [r4, #16]
 801188a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d0a2      	beq.n	80117d8 <_printf_float+0x88>
 8011892:	232d      	movs	r3, #45	; 0x2d
 8011894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011898:	e79e      	b.n	80117d8 <_printf_float+0x88>
 801189a:	9904      	ldr	r1, [sp, #16]
 801189c:	2947      	cmp	r1, #71	; 0x47
 801189e:	d1c1      	bne.n	8011824 <_printf_float+0xd4>
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d1bf      	bne.n	8011824 <_printf_float+0xd4>
 80118a4:	2301      	movs	r3, #1
 80118a6:	e7bc      	b.n	8011822 <_printf_float+0xd2>
 80118a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80118ac:	d118      	bne.n	80118e0 <_printf_float+0x190>
 80118ae:	2900      	cmp	r1, #0
 80118b0:	6863      	ldr	r3, [r4, #4]
 80118b2:	dd0b      	ble.n	80118cc <_printf_float+0x17c>
 80118b4:	6121      	str	r1, [r4, #16]
 80118b6:	b913      	cbnz	r3, 80118be <_printf_float+0x16e>
 80118b8:	6822      	ldr	r2, [r4, #0]
 80118ba:	07d0      	lsls	r0, r2, #31
 80118bc:	d502      	bpl.n	80118c4 <_printf_float+0x174>
 80118be:	3301      	adds	r3, #1
 80118c0:	440b      	add	r3, r1
 80118c2:	6123      	str	r3, [r4, #16]
 80118c4:	2300      	movs	r3, #0
 80118c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80118c8:	9304      	str	r3, [sp, #16]
 80118ca:	e7de      	b.n	801188a <_printf_float+0x13a>
 80118cc:	b913      	cbnz	r3, 80118d4 <_printf_float+0x184>
 80118ce:	6822      	ldr	r2, [r4, #0]
 80118d0:	07d2      	lsls	r2, r2, #31
 80118d2:	d501      	bpl.n	80118d8 <_printf_float+0x188>
 80118d4:	3302      	adds	r3, #2
 80118d6:	e7f4      	b.n	80118c2 <_printf_float+0x172>
 80118d8:	2301      	movs	r3, #1
 80118da:	e7f2      	b.n	80118c2 <_printf_float+0x172>
 80118dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80118e0:	9b08      	ldr	r3, [sp, #32]
 80118e2:	4299      	cmp	r1, r3
 80118e4:	db05      	blt.n	80118f2 <_printf_float+0x1a2>
 80118e6:	6823      	ldr	r3, [r4, #0]
 80118e8:	6121      	str	r1, [r4, #16]
 80118ea:	07d8      	lsls	r0, r3, #31
 80118ec:	d5ea      	bpl.n	80118c4 <_printf_float+0x174>
 80118ee:	1c4b      	adds	r3, r1, #1
 80118f0:	e7e7      	b.n	80118c2 <_printf_float+0x172>
 80118f2:	2900      	cmp	r1, #0
 80118f4:	bfd4      	ite	le
 80118f6:	f1c1 0202 	rsble	r2, r1, #2
 80118fa:	2201      	movgt	r2, #1
 80118fc:	4413      	add	r3, r2
 80118fe:	e7e0      	b.n	80118c2 <_printf_float+0x172>
 8011900:	6823      	ldr	r3, [r4, #0]
 8011902:	055a      	lsls	r2, r3, #21
 8011904:	d407      	bmi.n	8011916 <_printf_float+0x1c6>
 8011906:	6923      	ldr	r3, [r4, #16]
 8011908:	4642      	mov	r2, r8
 801190a:	4631      	mov	r1, r6
 801190c:	4628      	mov	r0, r5
 801190e:	47b8      	blx	r7
 8011910:	3001      	adds	r0, #1
 8011912:	d12a      	bne.n	801196a <_printf_float+0x21a>
 8011914:	e76a      	b.n	80117ec <_printf_float+0x9c>
 8011916:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801191a:	f240 80e2 	bls.w	8011ae2 <_printf_float+0x392>
 801191e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011922:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192a:	d133      	bne.n	8011994 <_printf_float+0x244>
 801192c:	4a38      	ldr	r2, [pc, #224]	; (8011a10 <_printf_float+0x2c0>)
 801192e:	2301      	movs	r3, #1
 8011930:	4631      	mov	r1, r6
 8011932:	4628      	mov	r0, r5
 8011934:	47b8      	blx	r7
 8011936:	3001      	adds	r0, #1
 8011938:	f43f af58 	beq.w	80117ec <_printf_float+0x9c>
 801193c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011940:	429a      	cmp	r2, r3
 8011942:	db02      	blt.n	801194a <_printf_float+0x1fa>
 8011944:	6823      	ldr	r3, [r4, #0]
 8011946:	07d8      	lsls	r0, r3, #31
 8011948:	d50f      	bpl.n	801196a <_printf_float+0x21a>
 801194a:	4653      	mov	r3, sl
 801194c:	465a      	mov	r2, fp
 801194e:	4631      	mov	r1, r6
 8011950:	4628      	mov	r0, r5
 8011952:	47b8      	blx	r7
 8011954:	3001      	adds	r0, #1
 8011956:	f43f af49 	beq.w	80117ec <_printf_float+0x9c>
 801195a:	f04f 0800 	mov.w	r8, #0
 801195e:	f104 091a 	add.w	r9, r4, #26
 8011962:	9b08      	ldr	r3, [sp, #32]
 8011964:	3b01      	subs	r3, #1
 8011966:	4543      	cmp	r3, r8
 8011968:	dc09      	bgt.n	801197e <_printf_float+0x22e>
 801196a:	6823      	ldr	r3, [r4, #0]
 801196c:	079b      	lsls	r3, r3, #30
 801196e:	f100 8108 	bmi.w	8011b82 <_printf_float+0x432>
 8011972:	68e0      	ldr	r0, [r4, #12]
 8011974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011976:	4298      	cmp	r0, r3
 8011978:	bfb8      	it	lt
 801197a:	4618      	movlt	r0, r3
 801197c:	e738      	b.n	80117f0 <_printf_float+0xa0>
 801197e:	2301      	movs	r3, #1
 8011980:	464a      	mov	r2, r9
 8011982:	4631      	mov	r1, r6
 8011984:	4628      	mov	r0, r5
 8011986:	47b8      	blx	r7
 8011988:	3001      	adds	r0, #1
 801198a:	f43f af2f 	beq.w	80117ec <_printf_float+0x9c>
 801198e:	f108 0801 	add.w	r8, r8, #1
 8011992:	e7e6      	b.n	8011962 <_printf_float+0x212>
 8011994:	9b07      	ldr	r3, [sp, #28]
 8011996:	2b00      	cmp	r3, #0
 8011998:	dc3c      	bgt.n	8011a14 <_printf_float+0x2c4>
 801199a:	4a1d      	ldr	r2, [pc, #116]	; (8011a10 <_printf_float+0x2c0>)
 801199c:	2301      	movs	r3, #1
 801199e:	4631      	mov	r1, r6
 80119a0:	4628      	mov	r0, r5
 80119a2:	47b8      	blx	r7
 80119a4:	3001      	adds	r0, #1
 80119a6:	f43f af21 	beq.w	80117ec <_printf_float+0x9c>
 80119aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80119ae:	4313      	orrs	r3, r2
 80119b0:	d102      	bne.n	80119b8 <_printf_float+0x268>
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	07d9      	lsls	r1, r3, #31
 80119b6:	d5d8      	bpl.n	801196a <_printf_float+0x21a>
 80119b8:	4653      	mov	r3, sl
 80119ba:	465a      	mov	r2, fp
 80119bc:	4631      	mov	r1, r6
 80119be:	4628      	mov	r0, r5
 80119c0:	47b8      	blx	r7
 80119c2:	3001      	adds	r0, #1
 80119c4:	f43f af12 	beq.w	80117ec <_printf_float+0x9c>
 80119c8:	f04f 0900 	mov.w	r9, #0
 80119cc:	f104 0a1a 	add.w	sl, r4, #26
 80119d0:	9b07      	ldr	r3, [sp, #28]
 80119d2:	425b      	negs	r3, r3
 80119d4:	454b      	cmp	r3, r9
 80119d6:	dc01      	bgt.n	80119dc <_printf_float+0x28c>
 80119d8:	9b08      	ldr	r3, [sp, #32]
 80119da:	e795      	b.n	8011908 <_printf_float+0x1b8>
 80119dc:	2301      	movs	r3, #1
 80119de:	4652      	mov	r2, sl
 80119e0:	4631      	mov	r1, r6
 80119e2:	4628      	mov	r0, r5
 80119e4:	47b8      	blx	r7
 80119e6:	3001      	adds	r0, #1
 80119e8:	f43f af00 	beq.w	80117ec <_printf_float+0x9c>
 80119ec:	f109 0901 	add.w	r9, r9, #1
 80119f0:	e7ee      	b.n	80119d0 <_printf_float+0x280>
 80119f2:	bf00      	nop
 80119f4:	f3af 8000 	nop.w
 80119f8:	ffffffff 	.word	0xffffffff
 80119fc:	7fefffff 	.word	0x7fefffff
 8011a00:	08015b14 	.word	0x08015b14
 8011a04:	08015b18 	.word	0x08015b18
 8011a08:	08015b20 	.word	0x08015b20
 8011a0c:	08015b1c 	.word	0x08015b1c
 8011a10:	08015b24 	.word	0x08015b24
 8011a14:	9a08      	ldr	r2, [sp, #32]
 8011a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	bfa8      	it	ge
 8011a1c:	461a      	movge	r2, r3
 8011a1e:	2a00      	cmp	r2, #0
 8011a20:	4691      	mov	r9, r2
 8011a22:	dc38      	bgt.n	8011a96 <_printf_float+0x346>
 8011a24:	2300      	movs	r3, #0
 8011a26:	9305      	str	r3, [sp, #20]
 8011a28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a2c:	f104 021a 	add.w	r2, r4, #26
 8011a30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a32:	9905      	ldr	r1, [sp, #20]
 8011a34:	9304      	str	r3, [sp, #16]
 8011a36:	eba3 0309 	sub.w	r3, r3, r9
 8011a3a:	428b      	cmp	r3, r1
 8011a3c:	dc33      	bgt.n	8011aa6 <_printf_float+0x356>
 8011a3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	db3c      	blt.n	8011ac0 <_printf_float+0x370>
 8011a46:	6823      	ldr	r3, [r4, #0]
 8011a48:	07da      	lsls	r2, r3, #31
 8011a4a:	d439      	bmi.n	8011ac0 <_printf_float+0x370>
 8011a4c:	9a08      	ldr	r2, [sp, #32]
 8011a4e:	9b04      	ldr	r3, [sp, #16]
 8011a50:	9907      	ldr	r1, [sp, #28]
 8011a52:	1ad3      	subs	r3, r2, r3
 8011a54:	eba2 0901 	sub.w	r9, r2, r1
 8011a58:	4599      	cmp	r9, r3
 8011a5a:	bfa8      	it	ge
 8011a5c:	4699      	movge	r9, r3
 8011a5e:	f1b9 0f00 	cmp.w	r9, #0
 8011a62:	dc35      	bgt.n	8011ad0 <_printf_float+0x380>
 8011a64:	f04f 0800 	mov.w	r8, #0
 8011a68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a6c:	f104 0a1a 	add.w	sl, r4, #26
 8011a70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011a74:	1a9b      	subs	r3, r3, r2
 8011a76:	eba3 0309 	sub.w	r3, r3, r9
 8011a7a:	4543      	cmp	r3, r8
 8011a7c:	f77f af75 	ble.w	801196a <_printf_float+0x21a>
 8011a80:	2301      	movs	r3, #1
 8011a82:	4652      	mov	r2, sl
 8011a84:	4631      	mov	r1, r6
 8011a86:	4628      	mov	r0, r5
 8011a88:	47b8      	blx	r7
 8011a8a:	3001      	adds	r0, #1
 8011a8c:	f43f aeae 	beq.w	80117ec <_printf_float+0x9c>
 8011a90:	f108 0801 	add.w	r8, r8, #1
 8011a94:	e7ec      	b.n	8011a70 <_printf_float+0x320>
 8011a96:	4613      	mov	r3, r2
 8011a98:	4631      	mov	r1, r6
 8011a9a:	4642      	mov	r2, r8
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	47b8      	blx	r7
 8011aa0:	3001      	adds	r0, #1
 8011aa2:	d1bf      	bne.n	8011a24 <_printf_float+0x2d4>
 8011aa4:	e6a2      	b.n	80117ec <_printf_float+0x9c>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	4631      	mov	r1, r6
 8011aaa:	4628      	mov	r0, r5
 8011aac:	9204      	str	r2, [sp, #16]
 8011aae:	47b8      	blx	r7
 8011ab0:	3001      	adds	r0, #1
 8011ab2:	f43f ae9b 	beq.w	80117ec <_printf_float+0x9c>
 8011ab6:	9b05      	ldr	r3, [sp, #20]
 8011ab8:	9a04      	ldr	r2, [sp, #16]
 8011aba:	3301      	adds	r3, #1
 8011abc:	9305      	str	r3, [sp, #20]
 8011abe:	e7b7      	b.n	8011a30 <_printf_float+0x2e0>
 8011ac0:	4653      	mov	r3, sl
 8011ac2:	465a      	mov	r2, fp
 8011ac4:	4631      	mov	r1, r6
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	47b8      	blx	r7
 8011aca:	3001      	adds	r0, #1
 8011acc:	d1be      	bne.n	8011a4c <_printf_float+0x2fc>
 8011ace:	e68d      	b.n	80117ec <_printf_float+0x9c>
 8011ad0:	9a04      	ldr	r2, [sp, #16]
 8011ad2:	464b      	mov	r3, r9
 8011ad4:	4442      	add	r2, r8
 8011ad6:	4631      	mov	r1, r6
 8011ad8:	4628      	mov	r0, r5
 8011ada:	47b8      	blx	r7
 8011adc:	3001      	adds	r0, #1
 8011ade:	d1c1      	bne.n	8011a64 <_printf_float+0x314>
 8011ae0:	e684      	b.n	80117ec <_printf_float+0x9c>
 8011ae2:	9a08      	ldr	r2, [sp, #32]
 8011ae4:	2a01      	cmp	r2, #1
 8011ae6:	dc01      	bgt.n	8011aec <_printf_float+0x39c>
 8011ae8:	07db      	lsls	r3, r3, #31
 8011aea:	d537      	bpl.n	8011b5c <_printf_float+0x40c>
 8011aec:	2301      	movs	r3, #1
 8011aee:	4642      	mov	r2, r8
 8011af0:	4631      	mov	r1, r6
 8011af2:	4628      	mov	r0, r5
 8011af4:	47b8      	blx	r7
 8011af6:	3001      	adds	r0, #1
 8011af8:	f43f ae78 	beq.w	80117ec <_printf_float+0x9c>
 8011afc:	4653      	mov	r3, sl
 8011afe:	465a      	mov	r2, fp
 8011b00:	4631      	mov	r1, r6
 8011b02:	4628      	mov	r0, r5
 8011b04:	47b8      	blx	r7
 8011b06:	3001      	adds	r0, #1
 8011b08:	f43f ae70 	beq.w	80117ec <_printf_float+0x9c>
 8011b0c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011b10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b18:	d01b      	beq.n	8011b52 <_printf_float+0x402>
 8011b1a:	9b08      	ldr	r3, [sp, #32]
 8011b1c:	f108 0201 	add.w	r2, r8, #1
 8011b20:	3b01      	subs	r3, #1
 8011b22:	4631      	mov	r1, r6
 8011b24:	4628      	mov	r0, r5
 8011b26:	47b8      	blx	r7
 8011b28:	3001      	adds	r0, #1
 8011b2a:	d10e      	bne.n	8011b4a <_printf_float+0x3fa>
 8011b2c:	e65e      	b.n	80117ec <_printf_float+0x9c>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	464a      	mov	r2, r9
 8011b32:	4631      	mov	r1, r6
 8011b34:	4628      	mov	r0, r5
 8011b36:	47b8      	blx	r7
 8011b38:	3001      	adds	r0, #1
 8011b3a:	f43f ae57 	beq.w	80117ec <_printf_float+0x9c>
 8011b3e:	f108 0801 	add.w	r8, r8, #1
 8011b42:	9b08      	ldr	r3, [sp, #32]
 8011b44:	3b01      	subs	r3, #1
 8011b46:	4543      	cmp	r3, r8
 8011b48:	dcf1      	bgt.n	8011b2e <_printf_float+0x3de>
 8011b4a:	9b04      	ldr	r3, [sp, #16]
 8011b4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011b50:	e6db      	b.n	801190a <_printf_float+0x1ba>
 8011b52:	f04f 0800 	mov.w	r8, #0
 8011b56:	f104 091a 	add.w	r9, r4, #26
 8011b5a:	e7f2      	b.n	8011b42 <_printf_float+0x3f2>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	4642      	mov	r2, r8
 8011b60:	e7df      	b.n	8011b22 <_printf_float+0x3d2>
 8011b62:	2301      	movs	r3, #1
 8011b64:	464a      	mov	r2, r9
 8011b66:	4631      	mov	r1, r6
 8011b68:	4628      	mov	r0, r5
 8011b6a:	47b8      	blx	r7
 8011b6c:	3001      	adds	r0, #1
 8011b6e:	f43f ae3d 	beq.w	80117ec <_printf_float+0x9c>
 8011b72:	f108 0801 	add.w	r8, r8, #1
 8011b76:	68e3      	ldr	r3, [r4, #12]
 8011b78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b7a:	1a5b      	subs	r3, r3, r1
 8011b7c:	4543      	cmp	r3, r8
 8011b7e:	dcf0      	bgt.n	8011b62 <_printf_float+0x412>
 8011b80:	e6f7      	b.n	8011972 <_printf_float+0x222>
 8011b82:	f04f 0800 	mov.w	r8, #0
 8011b86:	f104 0919 	add.w	r9, r4, #25
 8011b8a:	e7f4      	b.n	8011b76 <_printf_float+0x426>

08011b8c <_printf_common>:
 8011b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b90:	4616      	mov	r6, r2
 8011b92:	4699      	mov	r9, r3
 8011b94:	688a      	ldr	r2, [r1, #8]
 8011b96:	690b      	ldr	r3, [r1, #16]
 8011b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	bfb8      	it	lt
 8011ba0:	4613      	movlt	r3, r2
 8011ba2:	6033      	str	r3, [r6, #0]
 8011ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ba8:	4607      	mov	r7, r0
 8011baa:	460c      	mov	r4, r1
 8011bac:	b10a      	cbz	r2, 8011bb2 <_printf_common+0x26>
 8011bae:	3301      	adds	r3, #1
 8011bb0:	6033      	str	r3, [r6, #0]
 8011bb2:	6823      	ldr	r3, [r4, #0]
 8011bb4:	0699      	lsls	r1, r3, #26
 8011bb6:	bf42      	ittt	mi
 8011bb8:	6833      	ldrmi	r3, [r6, #0]
 8011bba:	3302      	addmi	r3, #2
 8011bbc:	6033      	strmi	r3, [r6, #0]
 8011bbe:	6825      	ldr	r5, [r4, #0]
 8011bc0:	f015 0506 	ands.w	r5, r5, #6
 8011bc4:	d106      	bne.n	8011bd4 <_printf_common+0x48>
 8011bc6:	f104 0a19 	add.w	sl, r4, #25
 8011bca:	68e3      	ldr	r3, [r4, #12]
 8011bcc:	6832      	ldr	r2, [r6, #0]
 8011bce:	1a9b      	subs	r3, r3, r2
 8011bd0:	42ab      	cmp	r3, r5
 8011bd2:	dc26      	bgt.n	8011c22 <_printf_common+0x96>
 8011bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011bd8:	1e13      	subs	r3, r2, #0
 8011bda:	6822      	ldr	r2, [r4, #0]
 8011bdc:	bf18      	it	ne
 8011bde:	2301      	movne	r3, #1
 8011be0:	0692      	lsls	r2, r2, #26
 8011be2:	d42b      	bmi.n	8011c3c <_printf_common+0xb0>
 8011be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011be8:	4649      	mov	r1, r9
 8011bea:	4638      	mov	r0, r7
 8011bec:	47c0      	blx	r8
 8011bee:	3001      	adds	r0, #1
 8011bf0:	d01e      	beq.n	8011c30 <_printf_common+0xa4>
 8011bf2:	6823      	ldr	r3, [r4, #0]
 8011bf4:	68e5      	ldr	r5, [r4, #12]
 8011bf6:	6832      	ldr	r2, [r6, #0]
 8011bf8:	f003 0306 	and.w	r3, r3, #6
 8011bfc:	2b04      	cmp	r3, #4
 8011bfe:	bf08      	it	eq
 8011c00:	1aad      	subeq	r5, r5, r2
 8011c02:	68a3      	ldr	r3, [r4, #8]
 8011c04:	6922      	ldr	r2, [r4, #16]
 8011c06:	bf0c      	ite	eq
 8011c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c0c:	2500      	movne	r5, #0
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	bfc4      	itt	gt
 8011c12:	1a9b      	subgt	r3, r3, r2
 8011c14:	18ed      	addgt	r5, r5, r3
 8011c16:	2600      	movs	r6, #0
 8011c18:	341a      	adds	r4, #26
 8011c1a:	42b5      	cmp	r5, r6
 8011c1c:	d11a      	bne.n	8011c54 <_printf_common+0xc8>
 8011c1e:	2000      	movs	r0, #0
 8011c20:	e008      	b.n	8011c34 <_printf_common+0xa8>
 8011c22:	2301      	movs	r3, #1
 8011c24:	4652      	mov	r2, sl
 8011c26:	4649      	mov	r1, r9
 8011c28:	4638      	mov	r0, r7
 8011c2a:	47c0      	blx	r8
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	d103      	bne.n	8011c38 <_printf_common+0xac>
 8011c30:	f04f 30ff 	mov.w	r0, #4294967295
 8011c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c38:	3501      	adds	r5, #1
 8011c3a:	e7c6      	b.n	8011bca <_printf_common+0x3e>
 8011c3c:	18e1      	adds	r1, r4, r3
 8011c3e:	1c5a      	adds	r2, r3, #1
 8011c40:	2030      	movs	r0, #48	; 0x30
 8011c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c46:	4422      	add	r2, r4
 8011c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c50:	3302      	adds	r3, #2
 8011c52:	e7c7      	b.n	8011be4 <_printf_common+0x58>
 8011c54:	2301      	movs	r3, #1
 8011c56:	4622      	mov	r2, r4
 8011c58:	4649      	mov	r1, r9
 8011c5a:	4638      	mov	r0, r7
 8011c5c:	47c0      	blx	r8
 8011c5e:	3001      	adds	r0, #1
 8011c60:	d0e6      	beq.n	8011c30 <_printf_common+0xa4>
 8011c62:	3601      	adds	r6, #1
 8011c64:	e7d9      	b.n	8011c1a <_printf_common+0x8e>
	...

08011c68 <_printf_i>:
 8011c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c6c:	460c      	mov	r4, r1
 8011c6e:	4691      	mov	r9, r2
 8011c70:	7e27      	ldrb	r7, [r4, #24]
 8011c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011c74:	2f78      	cmp	r7, #120	; 0x78
 8011c76:	4680      	mov	r8, r0
 8011c78:	469a      	mov	sl, r3
 8011c7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c7e:	d807      	bhi.n	8011c90 <_printf_i+0x28>
 8011c80:	2f62      	cmp	r7, #98	; 0x62
 8011c82:	d80a      	bhi.n	8011c9a <_printf_i+0x32>
 8011c84:	2f00      	cmp	r7, #0
 8011c86:	f000 80d8 	beq.w	8011e3a <_printf_i+0x1d2>
 8011c8a:	2f58      	cmp	r7, #88	; 0x58
 8011c8c:	f000 80a3 	beq.w	8011dd6 <_printf_i+0x16e>
 8011c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c98:	e03a      	b.n	8011d10 <_printf_i+0xa8>
 8011c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c9e:	2b15      	cmp	r3, #21
 8011ca0:	d8f6      	bhi.n	8011c90 <_printf_i+0x28>
 8011ca2:	a001      	add	r0, pc, #4	; (adr r0, 8011ca8 <_printf_i+0x40>)
 8011ca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011ca8:	08011d01 	.word	0x08011d01
 8011cac:	08011d15 	.word	0x08011d15
 8011cb0:	08011c91 	.word	0x08011c91
 8011cb4:	08011c91 	.word	0x08011c91
 8011cb8:	08011c91 	.word	0x08011c91
 8011cbc:	08011c91 	.word	0x08011c91
 8011cc0:	08011d15 	.word	0x08011d15
 8011cc4:	08011c91 	.word	0x08011c91
 8011cc8:	08011c91 	.word	0x08011c91
 8011ccc:	08011c91 	.word	0x08011c91
 8011cd0:	08011c91 	.word	0x08011c91
 8011cd4:	08011e21 	.word	0x08011e21
 8011cd8:	08011d45 	.word	0x08011d45
 8011cdc:	08011e03 	.word	0x08011e03
 8011ce0:	08011c91 	.word	0x08011c91
 8011ce4:	08011c91 	.word	0x08011c91
 8011ce8:	08011e43 	.word	0x08011e43
 8011cec:	08011c91 	.word	0x08011c91
 8011cf0:	08011d45 	.word	0x08011d45
 8011cf4:	08011c91 	.word	0x08011c91
 8011cf8:	08011c91 	.word	0x08011c91
 8011cfc:	08011e0b 	.word	0x08011e0b
 8011d00:	680b      	ldr	r3, [r1, #0]
 8011d02:	1d1a      	adds	r2, r3, #4
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	600a      	str	r2, [r1, #0]
 8011d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d10:	2301      	movs	r3, #1
 8011d12:	e0a3      	b.n	8011e5c <_printf_i+0x1f4>
 8011d14:	6825      	ldr	r5, [r4, #0]
 8011d16:	6808      	ldr	r0, [r1, #0]
 8011d18:	062e      	lsls	r6, r5, #24
 8011d1a:	f100 0304 	add.w	r3, r0, #4
 8011d1e:	d50a      	bpl.n	8011d36 <_printf_i+0xce>
 8011d20:	6805      	ldr	r5, [r0, #0]
 8011d22:	600b      	str	r3, [r1, #0]
 8011d24:	2d00      	cmp	r5, #0
 8011d26:	da03      	bge.n	8011d30 <_printf_i+0xc8>
 8011d28:	232d      	movs	r3, #45	; 0x2d
 8011d2a:	426d      	negs	r5, r5
 8011d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d30:	485e      	ldr	r0, [pc, #376]	; (8011eac <_printf_i+0x244>)
 8011d32:	230a      	movs	r3, #10
 8011d34:	e019      	b.n	8011d6a <_printf_i+0x102>
 8011d36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011d3a:	6805      	ldr	r5, [r0, #0]
 8011d3c:	600b      	str	r3, [r1, #0]
 8011d3e:	bf18      	it	ne
 8011d40:	b22d      	sxthne	r5, r5
 8011d42:	e7ef      	b.n	8011d24 <_printf_i+0xbc>
 8011d44:	680b      	ldr	r3, [r1, #0]
 8011d46:	6825      	ldr	r5, [r4, #0]
 8011d48:	1d18      	adds	r0, r3, #4
 8011d4a:	6008      	str	r0, [r1, #0]
 8011d4c:	0628      	lsls	r0, r5, #24
 8011d4e:	d501      	bpl.n	8011d54 <_printf_i+0xec>
 8011d50:	681d      	ldr	r5, [r3, #0]
 8011d52:	e002      	b.n	8011d5a <_printf_i+0xf2>
 8011d54:	0669      	lsls	r1, r5, #25
 8011d56:	d5fb      	bpl.n	8011d50 <_printf_i+0xe8>
 8011d58:	881d      	ldrh	r5, [r3, #0]
 8011d5a:	4854      	ldr	r0, [pc, #336]	; (8011eac <_printf_i+0x244>)
 8011d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8011d5e:	bf0c      	ite	eq
 8011d60:	2308      	moveq	r3, #8
 8011d62:	230a      	movne	r3, #10
 8011d64:	2100      	movs	r1, #0
 8011d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d6a:	6866      	ldr	r6, [r4, #4]
 8011d6c:	60a6      	str	r6, [r4, #8]
 8011d6e:	2e00      	cmp	r6, #0
 8011d70:	bfa2      	ittt	ge
 8011d72:	6821      	ldrge	r1, [r4, #0]
 8011d74:	f021 0104 	bicge.w	r1, r1, #4
 8011d78:	6021      	strge	r1, [r4, #0]
 8011d7a:	b90d      	cbnz	r5, 8011d80 <_printf_i+0x118>
 8011d7c:	2e00      	cmp	r6, #0
 8011d7e:	d04d      	beq.n	8011e1c <_printf_i+0x1b4>
 8011d80:	4616      	mov	r6, r2
 8011d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8011d86:	fb03 5711 	mls	r7, r3, r1, r5
 8011d8a:	5dc7      	ldrb	r7, [r0, r7]
 8011d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d90:	462f      	mov	r7, r5
 8011d92:	42bb      	cmp	r3, r7
 8011d94:	460d      	mov	r5, r1
 8011d96:	d9f4      	bls.n	8011d82 <_printf_i+0x11a>
 8011d98:	2b08      	cmp	r3, #8
 8011d9a:	d10b      	bne.n	8011db4 <_printf_i+0x14c>
 8011d9c:	6823      	ldr	r3, [r4, #0]
 8011d9e:	07df      	lsls	r7, r3, #31
 8011da0:	d508      	bpl.n	8011db4 <_printf_i+0x14c>
 8011da2:	6923      	ldr	r3, [r4, #16]
 8011da4:	6861      	ldr	r1, [r4, #4]
 8011da6:	4299      	cmp	r1, r3
 8011da8:	bfde      	ittt	le
 8011daa:	2330      	movle	r3, #48	; 0x30
 8011dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011db0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011db4:	1b92      	subs	r2, r2, r6
 8011db6:	6122      	str	r2, [r4, #16]
 8011db8:	f8cd a000 	str.w	sl, [sp]
 8011dbc:	464b      	mov	r3, r9
 8011dbe:	aa03      	add	r2, sp, #12
 8011dc0:	4621      	mov	r1, r4
 8011dc2:	4640      	mov	r0, r8
 8011dc4:	f7ff fee2 	bl	8011b8c <_printf_common>
 8011dc8:	3001      	adds	r0, #1
 8011dca:	d14c      	bne.n	8011e66 <_printf_i+0x1fe>
 8011dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd0:	b004      	add	sp, #16
 8011dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dd6:	4835      	ldr	r0, [pc, #212]	; (8011eac <_printf_i+0x244>)
 8011dd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	680e      	ldr	r6, [r1, #0]
 8011de0:	061f      	lsls	r7, r3, #24
 8011de2:	f856 5b04 	ldr.w	r5, [r6], #4
 8011de6:	600e      	str	r6, [r1, #0]
 8011de8:	d514      	bpl.n	8011e14 <_printf_i+0x1ac>
 8011dea:	07d9      	lsls	r1, r3, #31
 8011dec:	bf44      	itt	mi
 8011dee:	f043 0320 	orrmi.w	r3, r3, #32
 8011df2:	6023      	strmi	r3, [r4, #0]
 8011df4:	b91d      	cbnz	r5, 8011dfe <_printf_i+0x196>
 8011df6:	6823      	ldr	r3, [r4, #0]
 8011df8:	f023 0320 	bic.w	r3, r3, #32
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	2310      	movs	r3, #16
 8011e00:	e7b0      	b.n	8011d64 <_printf_i+0xfc>
 8011e02:	6823      	ldr	r3, [r4, #0]
 8011e04:	f043 0320 	orr.w	r3, r3, #32
 8011e08:	6023      	str	r3, [r4, #0]
 8011e0a:	2378      	movs	r3, #120	; 0x78
 8011e0c:	4828      	ldr	r0, [pc, #160]	; (8011eb0 <_printf_i+0x248>)
 8011e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e12:	e7e3      	b.n	8011ddc <_printf_i+0x174>
 8011e14:	065e      	lsls	r6, r3, #25
 8011e16:	bf48      	it	mi
 8011e18:	b2ad      	uxthmi	r5, r5
 8011e1a:	e7e6      	b.n	8011dea <_printf_i+0x182>
 8011e1c:	4616      	mov	r6, r2
 8011e1e:	e7bb      	b.n	8011d98 <_printf_i+0x130>
 8011e20:	680b      	ldr	r3, [r1, #0]
 8011e22:	6826      	ldr	r6, [r4, #0]
 8011e24:	6960      	ldr	r0, [r4, #20]
 8011e26:	1d1d      	adds	r5, r3, #4
 8011e28:	600d      	str	r5, [r1, #0]
 8011e2a:	0635      	lsls	r5, r6, #24
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	d501      	bpl.n	8011e34 <_printf_i+0x1cc>
 8011e30:	6018      	str	r0, [r3, #0]
 8011e32:	e002      	b.n	8011e3a <_printf_i+0x1d2>
 8011e34:	0671      	lsls	r1, r6, #25
 8011e36:	d5fb      	bpl.n	8011e30 <_printf_i+0x1c8>
 8011e38:	8018      	strh	r0, [r3, #0]
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	6123      	str	r3, [r4, #16]
 8011e3e:	4616      	mov	r6, r2
 8011e40:	e7ba      	b.n	8011db8 <_printf_i+0x150>
 8011e42:	680b      	ldr	r3, [r1, #0]
 8011e44:	1d1a      	adds	r2, r3, #4
 8011e46:	600a      	str	r2, [r1, #0]
 8011e48:	681e      	ldr	r6, [r3, #0]
 8011e4a:	6862      	ldr	r2, [r4, #4]
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f7ee fa4e 	bl	80002f0 <memchr>
 8011e54:	b108      	cbz	r0, 8011e5a <_printf_i+0x1f2>
 8011e56:	1b80      	subs	r0, r0, r6
 8011e58:	6060      	str	r0, [r4, #4]
 8011e5a:	6863      	ldr	r3, [r4, #4]
 8011e5c:	6123      	str	r3, [r4, #16]
 8011e5e:	2300      	movs	r3, #0
 8011e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e64:	e7a8      	b.n	8011db8 <_printf_i+0x150>
 8011e66:	6923      	ldr	r3, [r4, #16]
 8011e68:	4632      	mov	r2, r6
 8011e6a:	4649      	mov	r1, r9
 8011e6c:	4640      	mov	r0, r8
 8011e6e:	47d0      	blx	sl
 8011e70:	3001      	adds	r0, #1
 8011e72:	d0ab      	beq.n	8011dcc <_printf_i+0x164>
 8011e74:	6823      	ldr	r3, [r4, #0]
 8011e76:	079b      	lsls	r3, r3, #30
 8011e78:	d413      	bmi.n	8011ea2 <_printf_i+0x23a>
 8011e7a:	68e0      	ldr	r0, [r4, #12]
 8011e7c:	9b03      	ldr	r3, [sp, #12]
 8011e7e:	4298      	cmp	r0, r3
 8011e80:	bfb8      	it	lt
 8011e82:	4618      	movlt	r0, r3
 8011e84:	e7a4      	b.n	8011dd0 <_printf_i+0x168>
 8011e86:	2301      	movs	r3, #1
 8011e88:	4632      	mov	r2, r6
 8011e8a:	4649      	mov	r1, r9
 8011e8c:	4640      	mov	r0, r8
 8011e8e:	47d0      	blx	sl
 8011e90:	3001      	adds	r0, #1
 8011e92:	d09b      	beq.n	8011dcc <_printf_i+0x164>
 8011e94:	3501      	adds	r5, #1
 8011e96:	68e3      	ldr	r3, [r4, #12]
 8011e98:	9903      	ldr	r1, [sp, #12]
 8011e9a:	1a5b      	subs	r3, r3, r1
 8011e9c:	42ab      	cmp	r3, r5
 8011e9e:	dcf2      	bgt.n	8011e86 <_printf_i+0x21e>
 8011ea0:	e7eb      	b.n	8011e7a <_printf_i+0x212>
 8011ea2:	2500      	movs	r5, #0
 8011ea4:	f104 0619 	add.w	r6, r4, #25
 8011ea8:	e7f5      	b.n	8011e96 <_printf_i+0x22e>
 8011eaa:	bf00      	nop
 8011eac:	08015b26 	.word	0x08015b26
 8011eb0:	08015b37 	.word	0x08015b37

08011eb4 <_puts_r>:
 8011eb4:	b570      	push	{r4, r5, r6, lr}
 8011eb6:	460e      	mov	r6, r1
 8011eb8:	4605      	mov	r5, r0
 8011eba:	b118      	cbz	r0, 8011ec4 <_puts_r+0x10>
 8011ebc:	6983      	ldr	r3, [r0, #24]
 8011ebe:	b90b      	cbnz	r3, 8011ec4 <_puts_r+0x10>
 8011ec0:	f001 f856 	bl	8012f70 <__sinit>
 8011ec4:	69ab      	ldr	r3, [r5, #24]
 8011ec6:	68ac      	ldr	r4, [r5, #8]
 8011ec8:	b913      	cbnz	r3, 8011ed0 <_puts_r+0x1c>
 8011eca:	4628      	mov	r0, r5
 8011ecc:	f001 f850 	bl	8012f70 <__sinit>
 8011ed0:	4b2c      	ldr	r3, [pc, #176]	; (8011f84 <_puts_r+0xd0>)
 8011ed2:	429c      	cmp	r4, r3
 8011ed4:	d120      	bne.n	8011f18 <_puts_r+0x64>
 8011ed6:	686c      	ldr	r4, [r5, #4]
 8011ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011eda:	07db      	lsls	r3, r3, #31
 8011edc:	d405      	bmi.n	8011eea <_puts_r+0x36>
 8011ede:	89a3      	ldrh	r3, [r4, #12]
 8011ee0:	0598      	lsls	r0, r3, #22
 8011ee2:	d402      	bmi.n	8011eea <_puts_r+0x36>
 8011ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ee6:	f001 f8e6 	bl	80130b6 <__retarget_lock_acquire_recursive>
 8011eea:	89a3      	ldrh	r3, [r4, #12]
 8011eec:	0719      	lsls	r1, r3, #28
 8011eee:	d51d      	bpl.n	8011f2c <_puts_r+0x78>
 8011ef0:	6923      	ldr	r3, [r4, #16]
 8011ef2:	b1db      	cbz	r3, 8011f2c <_puts_r+0x78>
 8011ef4:	3e01      	subs	r6, #1
 8011ef6:	68a3      	ldr	r3, [r4, #8]
 8011ef8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011efc:	3b01      	subs	r3, #1
 8011efe:	60a3      	str	r3, [r4, #8]
 8011f00:	bb39      	cbnz	r1, 8011f52 <_puts_r+0x9e>
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	da38      	bge.n	8011f78 <_puts_r+0xc4>
 8011f06:	4622      	mov	r2, r4
 8011f08:	210a      	movs	r1, #10
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	f000 f848 	bl	8011fa0 <__swbuf_r>
 8011f10:	3001      	adds	r0, #1
 8011f12:	d011      	beq.n	8011f38 <_puts_r+0x84>
 8011f14:	250a      	movs	r5, #10
 8011f16:	e011      	b.n	8011f3c <_puts_r+0x88>
 8011f18:	4b1b      	ldr	r3, [pc, #108]	; (8011f88 <_puts_r+0xd4>)
 8011f1a:	429c      	cmp	r4, r3
 8011f1c:	d101      	bne.n	8011f22 <_puts_r+0x6e>
 8011f1e:	68ac      	ldr	r4, [r5, #8]
 8011f20:	e7da      	b.n	8011ed8 <_puts_r+0x24>
 8011f22:	4b1a      	ldr	r3, [pc, #104]	; (8011f8c <_puts_r+0xd8>)
 8011f24:	429c      	cmp	r4, r3
 8011f26:	bf08      	it	eq
 8011f28:	68ec      	ldreq	r4, [r5, #12]
 8011f2a:	e7d5      	b.n	8011ed8 <_puts_r+0x24>
 8011f2c:	4621      	mov	r1, r4
 8011f2e:	4628      	mov	r0, r5
 8011f30:	f000 f888 	bl	8012044 <__swsetup_r>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d0dd      	beq.n	8011ef4 <_puts_r+0x40>
 8011f38:	f04f 35ff 	mov.w	r5, #4294967295
 8011f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f3e:	07da      	lsls	r2, r3, #31
 8011f40:	d405      	bmi.n	8011f4e <_puts_r+0x9a>
 8011f42:	89a3      	ldrh	r3, [r4, #12]
 8011f44:	059b      	lsls	r3, r3, #22
 8011f46:	d402      	bmi.n	8011f4e <_puts_r+0x9a>
 8011f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f4a:	f001 f8b5 	bl	80130b8 <__retarget_lock_release_recursive>
 8011f4e:	4628      	mov	r0, r5
 8011f50:	bd70      	pop	{r4, r5, r6, pc}
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	da04      	bge.n	8011f60 <_puts_r+0xac>
 8011f56:	69a2      	ldr	r2, [r4, #24]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	dc06      	bgt.n	8011f6a <_puts_r+0xb6>
 8011f5c:	290a      	cmp	r1, #10
 8011f5e:	d004      	beq.n	8011f6a <_puts_r+0xb6>
 8011f60:	6823      	ldr	r3, [r4, #0]
 8011f62:	1c5a      	adds	r2, r3, #1
 8011f64:	6022      	str	r2, [r4, #0]
 8011f66:	7019      	strb	r1, [r3, #0]
 8011f68:	e7c5      	b.n	8011ef6 <_puts_r+0x42>
 8011f6a:	4622      	mov	r2, r4
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f000 f817 	bl	8011fa0 <__swbuf_r>
 8011f72:	3001      	adds	r0, #1
 8011f74:	d1bf      	bne.n	8011ef6 <_puts_r+0x42>
 8011f76:	e7df      	b.n	8011f38 <_puts_r+0x84>
 8011f78:	6823      	ldr	r3, [r4, #0]
 8011f7a:	250a      	movs	r5, #10
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	6022      	str	r2, [r4, #0]
 8011f80:	701d      	strb	r5, [r3, #0]
 8011f82:	e7db      	b.n	8011f3c <_puts_r+0x88>
 8011f84:	08015bfc 	.word	0x08015bfc
 8011f88:	08015c1c 	.word	0x08015c1c
 8011f8c:	08015bdc 	.word	0x08015bdc

08011f90 <puts>:
 8011f90:	4b02      	ldr	r3, [pc, #8]	; (8011f9c <puts+0xc>)
 8011f92:	4601      	mov	r1, r0
 8011f94:	6818      	ldr	r0, [r3, #0]
 8011f96:	f7ff bf8d 	b.w	8011eb4 <_puts_r>
 8011f9a:	bf00      	nop
 8011f9c:	24000238 	.word	0x24000238

08011fa0 <__swbuf_r>:
 8011fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa2:	460e      	mov	r6, r1
 8011fa4:	4614      	mov	r4, r2
 8011fa6:	4605      	mov	r5, r0
 8011fa8:	b118      	cbz	r0, 8011fb2 <__swbuf_r+0x12>
 8011faa:	6983      	ldr	r3, [r0, #24]
 8011fac:	b90b      	cbnz	r3, 8011fb2 <__swbuf_r+0x12>
 8011fae:	f000 ffdf 	bl	8012f70 <__sinit>
 8011fb2:	4b21      	ldr	r3, [pc, #132]	; (8012038 <__swbuf_r+0x98>)
 8011fb4:	429c      	cmp	r4, r3
 8011fb6:	d12b      	bne.n	8012010 <__swbuf_r+0x70>
 8011fb8:	686c      	ldr	r4, [r5, #4]
 8011fba:	69a3      	ldr	r3, [r4, #24]
 8011fbc:	60a3      	str	r3, [r4, #8]
 8011fbe:	89a3      	ldrh	r3, [r4, #12]
 8011fc0:	071a      	lsls	r2, r3, #28
 8011fc2:	d52f      	bpl.n	8012024 <__swbuf_r+0x84>
 8011fc4:	6923      	ldr	r3, [r4, #16]
 8011fc6:	b36b      	cbz	r3, 8012024 <__swbuf_r+0x84>
 8011fc8:	6923      	ldr	r3, [r4, #16]
 8011fca:	6820      	ldr	r0, [r4, #0]
 8011fcc:	1ac0      	subs	r0, r0, r3
 8011fce:	6963      	ldr	r3, [r4, #20]
 8011fd0:	b2f6      	uxtb	r6, r6
 8011fd2:	4283      	cmp	r3, r0
 8011fd4:	4637      	mov	r7, r6
 8011fd6:	dc04      	bgt.n	8011fe2 <__swbuf_r+0x42>
 8011fd8:	4621      	mov	r1, r4
 8011fda:	4628      	mov	r0, r5
 8011fdc:	f000 ff34 	bl	8012e48 <_fflush_r>
 8011fe0:	bb30      	cbnz	r0, 8012030 <__swbuf_r+0x90>
 8011fe2:	68a3      	ldr	r3, [r4, #8]
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	60a3      	str	r3, [r4, #8]
 8011fe8:	6823      	ldr	r3, [r4, #0]
 8011fea:	1c5a      	adds	r2, r3, #1
 8011fec:	6022      	str	r2, [r4, #0]
 8011fee:	701e      	strb	r6, [r3, #0]
 8011ff0:	6963      	ldr	r3, [r4, #20]
 8011ff2:	3001      	adds	r0, #1
 8011ff4:	4283      	cmp	r3, r0
 8011ff6:	d004      	beq.n	8012002 <__swbuf_r+0x62>
 8011ff8:	89a3      	ldrh	r3, [r4, #12]
 8011ffa:	07db      	lsls	r3, r3, #31
 8011ffc:	d506      	bpl.n	801200c <__swbuf_r+0x6c>
 8011ffe:	2e0a      	cmp	r6, #10
 8012000:	d104      	bne.n	801200c <__swbuf_r+0x6c>
 8012002:	4621      	mov	r1, r4
 8012004:	4628      	mov	r0, r5
 8012006:	f000 ff1f 	bl	8012e48 <_fflush_r>
 801200a:	b988      	cbnz	r0, 8012030 <__swbuf_r+0x90>
 801200c:	4638      	mov	r0, r7
 801200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012010:	4b0a      	ldr	r3, [pc, #40]	; (801203c <__swbuf_r+0x9c>)
 8012012:	429c      	cmp	r4, r3
 8012014:	d101      	bne.n	801201a <__swbuf_r+0x7a>
 8012016:	68ac      	ldr	r4, [r5, #8]
 8012018:	e7cf      	b.n	8011fba <__swbuf_r+0x1a>
 801201a:	4b09      	ldr	r3, [pc, #36]	; (8012040 <__swbuf_r+0xa0>)
 801201c:	429c      	cmp	r4, r3
 801201e:	bf08      	it	eq
 8012020:	68ec      	ldreq	r4, [r5, #12]
 8012022:	e7ca      	b.n	8011fba <__swbuf_r+0x1a>
 8012024:	4621      	mov	r1, r4
 8012026:	4628      	mov	r0, r5
 8012028:	f000 f80c 	bl	8012044 <__swsetup_r>
 801202c:	2800      	cmp	r0, #0
 801202e:	d0cb      	beq.n	8011fc8 <__swbuf_r+0x28>
 8012030:	f04f 37ff 	mov.w	r7, #4294967295
 8012034:	e7ea      	b.n	801200c <__swbuf_r+0x6c>
 8012036:	bf00      	nop
 8012038:	08015bfc 	.word	0x08015bfc
 801203c:	08015c1c 	.word	0x08015c1c
 8012040:	08015bdc 	.word	0x08015bdc

08012044 <__swsetup_r>:
 8012044:	4b32      	ldr	r3, [pc, #200]	; (8012110 <__swsetup_r+0xcc>)
 8012046:	b570      	push	{r4, r5, r6, lr}
 8012048:	681d      	ldr	r5, [r3, #0]
 801204a:	4606      	mov	r6, r0
 801204c:	460c      	mov	r4, r1
 801204e:	b125      	cbz	r5, 801205a <__swsetup_r+0x16>
 8012050:	69ab      	ldr	r3, [r5, #24]
 8012052:	b913      	cbnz	r3, 801205a <__swsetup_r+0x16>
 8012054:	4628      	mov	r0, r5
 8012056:	f000 ff8b 	bl	8012f70 <__sinit>
 801205a:	4b2e      	ldr	r3, [pc, #184]	; (8012114 <__swsetup_r+0xd0>)
 801205c:	429c      	cmp	r4, r3
 801205e:	d10f      	bne.n	8012080 <__swsetup_r+0x3c>
 8012060:	686c      	ldr	r4, [r5, #4]
 8012062:	89a3      	ldrh	r3, [r4, #12]
 8012064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012068:	0719      	lsls	r1, r3, #28
 801206a:	d42c      	bmi.n	80120c6 <__swsetup_r+0x82>
 801206c:	06dd      	lsls	r5, r3, #27
 801206e:	d411      	bmi.n	8012094 <__swsetup_r+0x50>
 8012070:	2309      	movs	r3, #9
 8012072:	6033      	str	r3, [r6, #0]
 8012074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012078:	81a3      	strh	r3, [r4, #12]
 801207a:	f04f 30ff 	mov.w	r0, #4294967295
 801207e:	e03e      	b.n	80120fe <__swsetup_r+0xba>
 8012080:	4b25      	ldr	r3, [pc, #148]	; (8012118 <__swsetup_r+0xd4>)
 8012082:	429c      	cmp	r4, r3
 8012084:	d101      	bne.n	801208a <__swsetup_r+0x46>
 8012086:	68ac      	ldr	r4, [r5, #8]
 8012088:	e7eb      	b.n	8012062 <__swsetup_r+0x1e>
 801208a:	4b24      	ldr	r3, [pc, #144]	; (801211c <__swsetup_r+0xd8>)
 801208c:	429c      	cmp	r4, r3
 801208e:	bf08      	it	eq
 8012090:	68ec      	ldreq	r4, [r5, #12]
 8012092:	e7e6      	b.n	8012062 <__swsetup_r+0x1e>
 8012094:	0758      	lsls	r0, r3, #29
 8012096:	d512      	bpl.n	80120be <__swsetup_r+0x7a>
 8012098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801209a:	b141      	cbz	r1, 80120ae <__swsetup_r+0x6a>
 801209c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120a0:	4299      	cmp	r1, r3
 80120a2:	d002      	beq.n	80120aa <__swsetup_r+0x66>
 80120a4:	4630      	mov	r0, r6
 80120a6:	f001 fc11 	bl	80138cc <_free_r>
 80120aa:	2300      	movs	r3, #0
 80120ac:	6363      	str	r3, [r4, #52]	; 0x34
 80120ae:	89a3      	ldrh	r3, [r4, #12]
 80120b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80120b4:	81a3      	strh	r3, [r4, #12]
 80120b6:	2300      	movs	r3, #0
 80120b8:	6063      	str	r3, [r4, #4]
 80120ba:	6923      	ldr	r3, [r4, #16]
 80120bc:	6023      	str	r3, [r4, #0]
 80120be:	89a3      	ldrh	r3, [r4, #12]
 80120c0:	f043 0308 	orr.w	r3, r3, #8
 80120c4:	81a3      	strh	r3, [r4, #12]
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	b94b      	cbnz	r3, 80120de <__swsetup_r+0x9a>
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120d4:	d003      	beq.n	80120de <__swsetup_r+0x9a>
 80120d6:	4621      	mov	r1, r4
 80120d8:	4630      	mov	r0, r6
 80120da:	f001 f813 	bl	8013104 <__smakebuf_r>
 80120de:	89a0      	ldrh	r0, [r4, #12]
 80120e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120e4:	f010 0301 	ands.w	r3, r0, #1
 80120e8:	d00a      	beq.n	8012100 <__swsetup_r+0xbc>
 80120ea:	2300      	movs	r3, #0
 80120ec:	60a3      	str	r3, [r4, #8]
 80120ee:	6963      	ldr	r3, [r4, #20]
 80120f0:	425b      	negs	r3, r3
 80120f2:	61a3      	str	r3, [r4, #24]
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	b943      	cbnz	r3, 801210a <__swsetup_r+0xc6>
 80120f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120fc:	d1ba      	bne.n	8012074 <__swsetup_r+0x30>
 80120fe:	bd70      	pop	{r4, r5, r6, pc}
 8012100:	0781      	lsls	r1, r0, #30
 8012102:	bf58      	it	pl
 8012104:	6963      	ldrpl	r3, [r4, #20]
 8012106:	60a3      	str	r3, [r4, #8]
 8012108:	e7f4      	b.n	80120f4 <__swsetup_r+0xb0>
 801210a:	2000      	movs	r0, #0
 801210c:	e7f7      	b.n	80120fe <__swsetup_r+0xba>
 801210e:	bf00      	nop
 8012110:	24000238 	.word	0x24000238
 8012114:	08015bfc 	.word	0x08015bfc
 8012118:	08015c1c 	.word	0x08015c1c
 801211c:	08015bdc 	.word	0x08015bdc

08012120 <quorem>:
 8012120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012124:	6903      	ldr	r3, [r0, #16]
 8012126:	690c      	ldr	r4, [r1, #16]
 8012128:	42a3      	cmp	r3, r4
 801212a:	4607      	mov	r7, r0
 801212c:	f2c0 8081 	blt.w	8012232 <quorem+0x112>
 8012130:	3c01      	subs	r4, #1
 8012132:	f101 0814 	add.w	r8, r1, #20
 8012136:	f100 0514 	add.w	r5, r0, #20
 801213a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801213e:	9301      	str	r3, [sp, #4]
 8012140:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012148:	3301      	adds	r3, #1
 801214a:	429a      	cmp	r2, r3
 801214c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012154:	fbb2 f6f3 	udiv	r6, r2, r3
 8012158:	d331      	bcc.n	80121be <quorem+0x9e>
 801215a:	f04f 0e00 	mov.w	lr, #0
 801215e:	4640      	mov	r0, r8
 8012160:	46ac      	mov	ip, r5
 8012162:	46f2      	mov	sl, lr
 8012164:	f850 2b04 	ldr.w	r2, [r0], #4
 8012168:	b293      	uxth	r3, r2
 801216a:	fb06 e303 	mla	r3, r6, r3, lr
 801216e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012172:	b29b      	uxth	r3, r3
 8012174:	ebaa 0303 	sub.w	r3, sl, r3
 8012178:	0c12      	lsrs	r2, r2, #16
 801217a:	f8dc a000 	ldr.w	sl, [ip]
 801217e:	fb06 e202 	mla	r2, r6, r2, lr
 8012182:	fa13 f38a 	uxtah	r3, r3, sl
 8012186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801218a:	fa1f fa82 	uxth.w	sl, r2
 801218e:	f8dc 2000 	ldr.w	r2, [ip]
 8012192:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012196:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801219a:	b29b      	uxth	r3, r3
 801219c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121a0:	4581      	cmp	r9, r0
 80121a2:	f84c 3b04 	str.w	r3, [ip], #4
 80121a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80121aa:	d2db      	bcs.n	8012164 <quorem+0x44>
 80121ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80121b0:	b92b      	cbnz	r3, 80121be <quorem+0x9e>
 80121b2:	9b01      	ldr	r3, [sp, #4]
 80121b4:	3b04      	subs	r3, #4
 80121b6:	429d      	cmp	r5, r3
 80121b8:	461a      	mov	r2, r3
 80121ba:	d32e      	bcc.n	801221a <quorem+0xfa>
 80121bc:	613c      	str	r4, [r7, #16]
 80121be:	4638      	mov	r0, r7
 80121c0:	f001 fa74 	bl	80136ac <__mcmp>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	db24      	blt.n	8012212 <quorem+0xf2>
 80121c8:	3601      	adds	r6, #1
 80121ca:	4628      	mov	r0, r5
 80121cc:	f04f 0c00 	mov.w	ip, #0
 80121d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80121d4:	f8d0 e000 	ldr.w	lr, [r0]
 80121d8:	b293      	uxth	r3, r2
 80121da:	ebac 0303 	sub.w	r3, ip, r3
 80121de:	0c12      	lsrs	r2, r2, #16
 80121e0:	fa13 f38e 	uxtah	r3, r3, lr
 80121e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80121e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121f2:	45c1      	cmp	r9, r8
 80121f4:	f840 3b04 	str.w	r3, [r0], #4
 80121f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80121fc:	d2e8      	bcs.n	80121d0 <quorem+0xb0>
 80121fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012206:	b922      	cbnz	r2, 8012212 <quorem+0xf2>
 8012208:	3b04      	subs	r3, #4
 801220a:	429d      	cmp	r5, r3
 801220c:	461a      	mov	r2, r3
 801220e:	d30a      	bcc.n	8012226 <quorem+0x106>
 8012210:	613c      	str	r4, [r7, #16]
 8012212:	4630      	mov	r0, r6
 8012214:	b003      	add	sp, #12
 8012216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221a:	6812      	ldr	r2, [r2, #0]
 801221c:	3b04      	subs	r3, #4
 801221e:	2a00      	cmp	r2, #0
 8012220:	d1cc      	bne.n	80121bc <quorem+0x9c>
 8012222:	3c01      	subs	r4, #1
 8012224:	e7c7      	b.n	80121b6 <quorem+0x96>
 8012226:	6812      	ldr	r2, [r2, #0]
 8012228:	3b04      	subs	r3, #4
 801222a:	2a00      	cmp	r2, #0
 801222c:	d1f0      	bne.n	8012210 <quorem+0xf0>
 801222e:	3c01      	subs	r4, #1
 8012230:	e7eb      	b.n	801220a <quorem+0xea>
 8012232:	2000      	movs	r0, #0
 8012234:	e7ee      	b.n	8012214 <quorem+0xf4>
	...

08012238 <_dtoa_r>:
 8012238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223c:	ec59 8b10 	vmov	r8, r9, d0
 8012240:	b095      	sub	sp, #84	; 0x54
 8012242:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012244:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8012246:	9107      	str	r1, [sp, #28]
 8012248:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801224c:	4606      	mov	r6, r0
 801224e:	9209      	str	r2, [sp, #36]	; 0x24
 8012250:	9310      	str	r3, [sp, #64]	; 0x40
 8012252:	b975      	cbnz	r5, 8012272 <_dtoa_r+0x3a>
 8012254:	2010      	movs	r0, #16
 8012256:	f000 ff95 	bl	8013184 <malloc>
 801225a:	4602      	mov	r2, r0
 801225c:	6270      	str	r0, [r6, #36]	; 0x24
 801225e:	b920      	cbnz	r0, 801226a <_dtoa_r+0x32>
 8012260:	4bab      	ldr	r3, [pc, #684]	; (8012510 <_dtoa_r+0x2d8>)
 8012262:	21ea      	movs	r1, #234	; 0xea
 8012264:	48ab      	ldr	r0, [pc, #684]	; (8012514 <_dtoa_r+0x2dc>)
 8012266:	f001 fc41 	bl	8013aec <__assert_func>
 801226a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801226e:	6005      	str	r5, [r0, #0]
 8012270:	60c5      	str	r5, [r0, #12]
 8012272:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012274:	6819      	ldr	r1, [r3, #0]
 8012276:	b151      	cbz	r1, 801228e <_dtoa_r+0x56>
 8012278:	685a      	ldr	r2, [r3, #4]
 801227a:	604a      	str	r2, [r1, #4]
 801227c:	2301      	movs	r3, #1
 801227e:	4093      	lsls	r3, r2
 8012280:	608b      	str	r3, [r1, #8]
 8012282:	4630      	mov	r0, r6
 8012284:	f000 ffd4 	bl	8013230 <_Bfree>
 8012288:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801228a:	2200      	movs	r2, #0
 801228c:	601a      	str	r2, [r3, #0]
 801228e:	f1b9 0300 	subs.w	r3, r9, #0
 8012292:	bfbb      	ittet	lt
 8012294:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012298:	9303      	strlt	r3, [sp, #12]
 801229a:	2300      	movge	r3, #0
 801229c:	2201      	movlt	r2, #1
 801229e:	bfac      	ite	ge
 80122a0:	6023      	strge	r3, [r4, #0]
 80122a2:	6022      	strlt	r2, [r4, #0]
 80122a4:	4b9c      	ldr	r3, [pc, #624]	; (8012518 <_dtoa_r+0x2e0>)
 80122a6:	9c03      	ldr	r4, [sp, #12]
 80122a8:	43a3      	bics	r3, r4
 80122aa:	d11a      	bne.n	80122e2 <_dtoa_r+0xaa>
 80122ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80122ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80122b2:	6013      	str	r3, [r2, #0]
 80122b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80122b8:	ea53 0308 	orrs.w	r3, r3, r8
 80122bc:	f000 8512 	beq.w	8012ce4 <_dtoa_r+0xaac>
 80122c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122c2:	b953      	cbnz	r3, 80122da <_dtoa_r+0xa2>
 80122c4:	4b95      	ldr	r3, [pc, #596]	; (801251c <_dtoa_r+0x2e4>)
 80122c6:	e01f      	b.n	8012308 <_dtoa_r+0xd0>
 80122c8:	4b95      	ldr	r3, [pc, #596]	; (8012520 <_dtoa_r+0x2e8>)
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	3308      	adds	r3, #8
 80122ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80122d0:	6013      	str	r3, [r2, #0]
 80122d2:	9800      	ldr	r0, [sp, #0]
 80122d4:	b015      	add	sp, #84	; 0x54
 80122d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122da:	4b90      	ldr	r3, [pc, #576]	; (801251c <_dtoa_r+0x2e4>)
 80122dc:	9300      	str	r3, [sp, #0]
 80122de:	3303      	adds	r3, #3
 80122e0:	e7f5      	b.n	80122ce <_dtoa_r+0x96>
 80122e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80122ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80122f2:	d10b      	bne.n	801230c <_dtoa_r+0xd4>
 80122f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80122f6:	2301      	movs	r3, #1
 80122f8:	6013      	str	r3, [r2, #0]
 80122fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 84ee 	beq.w	8012cde <_dtoa_r+0xaa6>
 8012302:	4888      	ldr	r0, [pc, #544]	; (8012524 <_dtoa_r+0x2ec>)
 8012304:	6018      	str	r0, [r3, #0]
 8012306:	1e43      	subs	r3, r0, #1
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	e7e2      	b.n	80122d2 <_dtoa_r+0x9a>
 801230c:	a913      	add	r1, sp, #76	; 0x4c
 801230e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012312:	aa12      	add	r2, sp, #72	; 0x48
 8012314:	4630      	mov	r0, r6
 8012316:	f001 fa6d 	bl	80137f4 <__d2b>
 801231a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801231e:	4605      	mov	r5, r0
 8012320:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012322:	2900      	cmp	r1, #0
 8012324:	d047      	beq.n	80123b6 <_dtoa_r+0x17e>
 8012326:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012328:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801232c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012330:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012334:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012338:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801233c:	2400      	movs	r4, #0
 801233e:	ec43 2b16 	vmov	d6, r2, r3
 8012342:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012346:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80124f8 <_dtoa_r+0x2c0>
 801234a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801234e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8012500 <_dtoa_r+0x2c8>
 8012352:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012356:	eeb0 7b46 	vmov.f64	d7, d6
 801235a:	ee06 1a90 	vmov	s13, r1
 801235e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012362:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012508 <_dtoa_r+0x2d0>
 8012366:	eea5 7b06 	vfma.f64	d7, d5, d6
 801236a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801236e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012376:	ee16 ba90 	vmov	fp, s13
 801237a:	9411      	str	r4, [sp, #68]	; 0x44
 801237c:	d508      	bpl.n	8012390 <_dtoa_r+0x158>
 801237e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012382:	eeb4 6b47 	vcmp.f64	d6, d7
 8012386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238a:	bf18      	it	ne
 801238c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012390:	f1bb 0f16 	cmp.w	fp, #22
 8012394:	d832      	bhi.n	80123fc <_dtoa_r+0x1c4>
 8012396:	4b64      	ldr	r3, [pc, #400]	; (8012528 <_dtoa_r+0x2f0>)
 8012398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801239c:	ed93 7b00 	vldr	d7, [r3]
 80123a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80123a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ac:	d501      	bpl.n	80123b2 <_dtoa_r+0x17a>
 80123ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123b2:	2300      	movs	r3, #0
 80123b4:	e023      	b.n	80123fe <_dtoa_r+0x1c6>
 80123b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80123b8:	4401      	add	r1, r0
 80123ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80123be:	2b20      	cmp	r3, #32
 80123c0:	bfc3      	ittte	gt
 80123c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80123c6:	fa04 f303 	lslgt.w	r3, r4, r3
 80123ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80123ce:	f1c3 0320 	rsble	r3, r3, #32
 80123d2:	bfc6      	itte	gt
 80123d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80123d8:	ea43 0308 	orrgt.w	r3, r3, r8
 80123dc:	fa08 f303 	lslle.w	r3, r8, r3
 80123e0:	ee07 3a90 	vmov	s15, r3
 80123e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80123e8:	3901      	subs	r1, #1
 80123ea:	ed8d 7b00 	vstr	d7, [sp]
 80123ee:	9c01      	ldr	r4, [sp, #4]
 80123f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80123f8:	2401      	movs	r4, #1
 80123fa:	e7a0      	b.n	801233e <_dtoa_r+0x106>
 80123fc:	2301      	movs	r3, #1
 80123fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8012400:	1a43      	subs	r3, r0, r1
 8012402:	1e5a      	subs	r2, r3, #1
 8012404:	bf45      	ittet	mi
 8012406:	f1c3 0301 	rsbmi	r3, r3, #1
 801240a:	9305      	strmi	r3, [sp, #20]
 801240c:	2300      	movpl	r3, #0
 801240e:	2300      	movmi	r3, #0
 8012410:	9206      	str	r2, [sp, #24]
 8012412:	bf54      	ite	pl
 8012414:	9305      	strpl	r3, [sp, #20]
 8012416:	9306      	strmi	r3, [sp, #24]
 8012418:	f1bb 0f00 	cmp.w	fp, #0
 801241c:	db18      	blt.n	8012450 <_dtoa_r+0x218>
 801241e:	9b06      	ldr	r3, [sp, #24]
 8012420:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012424:	445b      	add	r3, fp
 8012426:	9306      	str	r3, [sp, #24]
 8012428:	2300      	movs	r3, #0
 801242a:	9a07      	ldr	r2, [sp, #28]
 801242c:	2a09      	cmp	r2, #9
 801242e:	d849      	bhi.n	80124c4 <_dtoa_r+0x28c>
 8012430:	2a05      	cmp	r2, #5
 8012432:	bfc4      	itt	gt
 8012434:	3a04      	subgt	r2, #4
 8012436:	9207      	strgt	r2, [sp, #28]
 8012438:	9a07      	ldr	r2, [sp, #28]
 801243a:	f1a2 0202 	sub.w	r2, r2, #2
 801243e:	bfcc      	ite	gt
 8012440:	2400      	movgt	r4, #0
 8012442:	2401      	movle	r4, #1
 8012444:	2a03      	cmp	r2, #3
 8012446:	d848      	bhi.n	80124da <_dtoa_r+0x2a2>
 8012448:	e8df f002 	tbb	[pc, r2]
 801244c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012450:	9b05      	ldr	r3, [sp, #20]
 8012452:	2200      	movs	r2, #0
 8012454:	eba3 030b 	sub.w	r3, r3, fp
 8012458:	9305      	str	r3, [sp, #20]
 801245a:	920e      	str	r2, [sp, #56]	; 0x38
 801245c:	f1cb 0300 	rsb	r3, fp, #0
 8012460:	e7e3      	b.n	801242a <_dtoa_r+0x1f2>
 8012462:	2200      	movs	r2, #0
 8012464:	9208      	str	r2, [sp, #32]
 8012466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012468:	2a00      	cmp	r2, #0
 801246a:	dc39      	bgt.n	80124e0 <_dtoa_r+0x2a8>
 801246c:	f04f 0a01 	mov.w	sl, #1
 8012470:	46d1      	mov	r9, sl
 8012472:	4652      	mov	r2, sl
 8012474:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012478:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801247a:	2100      	movs	r1, #0
 801247c:	6079      	str	r1, [r7, #4]
 801247e:	2004      	movs	r0, #4
 8012480:	f100 0c14 	add.w	ip, r0, #20
 8012484:	4594      	cmp	ip, r2
 8012486:	6879      	ldr	r1, [r7, #4]
 8012488:	d92f      	bls.n	80124ea <_dtoa_r+0x2b2>
 801248a:	4630      	mov	r0, r6
 801248c:	930c      	str	r3, [sp, #48]	; 0x30
 801248e:	f000 fe8f 	bl	80131b0 <_Balloc>
 8012492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012494:	9000      	str	r0, [sp, #0]
 8012496:	4602      	mov	r2, r0
 8012498:	2800      	cmp	r0, #0
 801249a:	d149      	bne.n	8012530 <_dtoa_r+0x2f8>
 801249c:	4b23      	ldr	r3, [pc, #140]	; (801252c <_dtoa_r+0x2f4>)
 801249e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80124a2:	e6df      	b.n	8012264 <_dtoa_r+0x2c>
 80124a4:	2201      	movs	r2, #1
 80124a6:	e7dd      	b.n	8012464 <_dtoa_r+0x22c>
 80124a8:	2200      	movs	r2, #0
 80124aa:	9208      	str	r2, [sp, #32]
 80124ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124ae:	eb0b 0a02 	add.w	sl, fp, r2
 80124b2:	f10a 0901 	add.w	r9, sl, #1
 80124b6:	464a      	mov	r2, r9
 80124b8:	2a01      	cmp	r2, #1
 80124ba:	bfb8      	it	lt
 80124bc:	2201      	movlt	r2, #1
 80124be:	e7db      	b.n	8012478 <_dtoa_r+0x240>
 80124c0:	2201      	movs	r2, #1
 80124c2:	e7f2      	b.n	80124aa <_dtoa_r+0x272>
 80124c4:	2401      	movs	r4, #1
 80124c6:	2200      	movs	r2, #0
 80124c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80124cc:	f04f 3aff 	mov.w	sl, #4294967295
 80124d0:	2100      	movs	r1, #0
 80124d2:	46d1      	mov	r9, sl
 80124d4:	2212      	movs	r2, #18
 80124d6:	9109      	str	r1, [sp, #36]	; 0x24
 80124d8:	e7ce      	b.n	8012478 <_dtoa_r+0x240>
 80124da:	2201      	movs	r2, #1
 80124dc:	9208      	str	r2, [sp, #32]
 80124de:	e7f5      	b.n	80124cc <_dtoa_r+0x294>
 80124e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80124e4:	46d1      	mov	r9, sl
 80124e6:	4652      	mov	r2, sl
 80124e8:	e7c6      	b.n	8012478 <_dtoa_r+0x240>
 80124ea:	3101      	adds	r1, #1
 80124ec:	6079      	str	r1, [r7, #4]
 80124ee:	0040      	lsls	r0, r0, #1
 80124f0:	e7c6      	b.n	8012480 <_dtoa_r+0x248>
 80124f2:	bf00      	nop
 80124f4:	f3af 8000 	nop.w
 80124f8:	636f4361 	.word	0x636f4361
 80124fc:	3fd287a7 	.word	0x3fd287a7
 8012500:	8b60c8b3 	.word	0x8b60c8b3
 8012504:	3fc68a28 	.word	0x3fc68a28
 8012508:	509f79fb 	.word	0x509f79fb
 801250c:	3fd34413 	.word	0x3fd34413
 8012510:	08015b55 	.word	0x08015b55
 8012514:	08015b6c 	.word	0x08015b6c
 8012518:	7ff00000 	.word	0x7ff00000
 801251c:	08015b51 	.word	0x08015b51
 8012520:	08015b48 	.word	0x08015b48
 8012524:	08015b25 	.word	0x08015b25
 8012528:	08015cc8 	.word	0x08015cc8
 801252c:	08015bcb 	.word	0x08015bcb
 8012530:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012532:	9900      	ldr	r1, [sp, #0]
 8012534:	6011      	str	r1, [r2, #0]
 8012536:	f1b9 0f0e 	cmp.w	r9, #14
 801253a:	d872      	bhi.n	8012622 <_dtoa_r+0x3ea>
 801253c:	2c00      	cmp	r4, #0
 801253e:	d070      	beq.n	8012622 <_dtoa_r+0x3ea>
 8012540:	f1bb 0f00 	cmp.w	fp, #0
 8012544:	f340 80a6 	ble.w	8012694 <_dtoa_r+0x45c>
 8012548:	49ca      	ldr	r1, [pc, #808]	; (8012874 <_dtoa_r+0x63c>)
 801254a:	f00b 020f 	and.w	r2, fp, #15
 801254e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012552:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012556:	ed92 7b00 	vldr	d7, [r2]
 801255a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801255e:	f000 808d 	beq.w	801267c <_dtoa_r+0x444>
 8012562:	4ac5      	ldr	r2, [pc, #788]	; (8012878 <_dtoa_r+0x640>)
 8012564:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012568:	ed92 6b08 	vldr	d6, [r2, #32]
 801256c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012570:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012574:	f001 010f 	and.w	r1, r1, #15
 8012578:	2203      	movs	r2, #3
 801257a:	48bf      	ldr	r0, [pc, #764]	; (8012878 <_dtoa_r+0x640>)
 801257c:	2900      	cmp	r1, #0
 801257e:	d17f      	bne.n	8012680 <_dtoa_r+0x448>
 8012580:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012584:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012588:	ed8d 7b02 	vstr	d7, [sp, #8]
 801258c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801258e:	2900      	cmp	r1, #0
 8012590:	f000 80b2 	beq.w	80126f8 <_dtoa_r+0x4c0>
 8012594:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012598:	ed9d 7b02 	vldr	d7, [sp, #8]
 801259c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a4:	f140 80a8 	bpl.w	80126f8 <_dtoa_r+0x4c0>
 80125a8:	f1b9 0f00 	cmp.w	r9, #0
 80125ac:	f000 80a4 	beq.w	80126f8 <_dtoa_r+0x4c0>
 80125b0:	f1ba 0f00 	cmp.w	sl, #0
 80125b4:	dd31      	ble.n	801261a <_dtoa_r+0x3e2>
 80125b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80125ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80125be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80125c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80125c6:	3201      	adds	r2, #1
 80125c8:	4650      	mov	r0, sl
 80125ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80125ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80125d2:	ee07 2a90 	vmov	s15, r2
 80125d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80125da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80125de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80125e2:	9c03      	ldr	r4, [sp, #12]
 80125e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80125e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80125ec:	2800      	cmp	r0, #0
 80125ee:	f040 8086 	bne.w	80126fe <_dtoa_r+0x4c6>
 80125f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80125f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80125fa:	ec42 1b17 	vmov	d7, r1, r2
 80125fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012606:	f300 8272 	bgt.w	8012aee <_dtoa_r+0x8b6>
 801260a:	eeb1 7b47 	vneg.f64	d7, d7
 801260e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012616:	f100 8267 	bmi.w	8012ae8 <_dtoa_r+0x8b0>
 801261a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801261e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012622:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012624:	2a00      	cmp	r2, #0
 8012626:	f2c0 8129 	blt.w	801287c <_dtoa_r+0x644>
 801262a:	f1bb 0f0e 	cmp.w	fp, #14
 801262e:	f300 8125 	bgt.w	801287c <_dtoa_r+0x644>
 8012632:	4b90      	ldr	r3, [pc, #576]	; (8012874 <_dtoa_r+0x63c>)
 8012634:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012638:	ed93 6b00 	vldr	d6, [r3]
 801263c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801263e:	2b00      	cmp	r3, #0
 8012640:	f280 80c3 	bge.w	80127ca <_dtoa_r+0x592>
 8012644:	f1b9 0f00 	cmp.w	r9, #0
 8012648:	f300 80bf 	bgt.w	80127ca <_dtoa_r+0x592>
 801264c:	f040 824c 	bne.w	8012ae8 <_dtoa_r+0x8b0>
 8012650:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012654:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012658:	ed9d 7b02 	vldr	d7, [sp, #8]
 801265c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012664:	464c      	mov	r4, r9
 8012666:	464f      	mov	r7, r9
 8012668:	f280 8222 	bge.w	8012ab0 <_dtoa_r+0x878>
 801266c:	f8dd 8000 	ldr.w	r8, [sp]
 8012670:	2331      	movs	r3, #49	; 0x31
 8012672:	f808 3b01 	strb.w	r3, [r8], #1
 8012676:	f10b 0b01 	add.w	fp, fp, #1
 801267a:	e21e      	b.n	8012aba <_dtoa_r+0x882>
 801267c:	2202      	movs	r2, #2
 801267e:	e77c      	b.n	801257a <_dtoa_r+0x342>
 8012680:	07cc      	lsls	r4, r1, #31
 8012682:	d504      	bpl.n	801268e <_dtoa_r+0x456>
 8012684:	ed90 6b00 	vldr	d6, [r0]
 8012688:	3201      	adds	r2, #1
 801268a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801268e:	1049      	asrs	r1, r1, #1
 8012690:	3008      	adds	r0, #8
 8012692:	e773      	b.n	801257c <_dtoa_r+0x344>
 8012694:	d02e      	beq.n	80126f4 <_dtoa_r+0x4bc>
 8012696:	f1cb 0100 	rsb	r1, fp, #0
 801269a:	4a76      	ldr	r2, [pc, #472]	; (8012874 <_dtoa_r+0x63c>)
 801269c:	f001 000f 	and.w	r0, r1, #15
 80126a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80126a4:	ed92 7b00 	vldr	d7, [r2]
 80126a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80126ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80126b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80126b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80126b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80126bc:	486e      	ldr	r0, [pc, #440]	; (8012878 <_dtoa_r+0x640>)
 80126be:	1109      	asrs	r1, r1, #4
 80126c0:	2400      	movs	r4, #0
 80126c2:	2202      	movs	r2, #2
 80126c4:	b939      	cbnz	r1, 80126d6 <_dtoa_r+0x49e>
 80126c6:	2c00      	cmp	r4, #0
 80126c8:	f43f af60 	beq.w	801258c <_dtoa_r+0x354>
 80126cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80126d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126d4:	e75a      	b.n	801258c <_dtoa_r+0x354>
 80126d6:	07cf      	lsls	r7, r1, #31
 80126d8:	d509      	bpl.n	80126ee <_dtoa_r+0x4b6>
 80126da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80126de:	ed90 7b00 	vldr	d7, [r0]
 80126e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80126e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80126ea:	3201      	adds	r2, #1
 80126ec:	2401      	movs	r4, #1
 80126ee:	1049      	asrs	r1, r1, #1
 80126f0:	3008      	adds	r0, #8
 80126f2:	e7e7      	b.n	80126c4 <_dtoa_r+0x48c>
 80126f4:	2202      	movs	r2, #2
 80126f6:	e749      	b.n	801258c <_dtoa_r+0x354>
 80126f8:	465f      	mov	r7, fp
 80126fa:	4648      	mov	r0, r9
 80126fc:	e765      	b.n	80125ca <_dtoa_r+0x392>
 80126fe:	ec42 1b17 	vmov	d7, r1, r2
 8012702:	4a5c      	ldr	r2, [pc, #368]	; (8012874 <_dtoa_r+0x63c>)
 8012704:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012708:	ed12 4b02 	vldr	d4, [r2, #-8]
 801270c:	9a00      	ldr	r2, [sp, #0]
 801270e:	1814      	adds	r4, r2, r0
 8012710:	9a08      	ldr	r2, [sp, #32]
 8012712:	b352      	cbz	r2, 801276a <_dtoa_r+0x532>
 8012714:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012718:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801271c:	f8dd 8000 	ldr.w	r8, [sp]
 8012720:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012724:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012728:	ee35 7b47 	vsub.f64	d7, d5, d7
 801272c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012730:	ee14 2a90 	vmov	r2, s9
 8012734:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012738:	3230      	adds	r2, #48	; 0x30
 801273a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801273e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012746:	f808 2b01 	strb.w	r2, [r8], #1
 801274a:	d439      	bmi.n	80127c0 <_dtoa_r+0x588>
 801274c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012750:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012758:	d472      	bmi.n	8012840 <_dtoa_r+0x608>
 801275a:	45a0      	cmp	r8, r4
 801275c:	f43f af5d 	beq.w	801261a <_dtoa_r+0x3e2>
 8012760:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012764:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012768:	e7e0      	b.n	801272c <_dtoa_r+0x4f4>
 801276a:	f8dd 8000 	ldr.w	r8, [sp]
 801276e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012772:	4621      	mov	r1, r4
 8012774:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012778:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801277c:	ee14 2a90 	vmov	r2, s9
 8012780:	3230      	adds	r2, #48	; 0x30
 8012782:	f808 2b01 	strb.w	r2, [r8], #1
 8012786:	45a0      	cmp	r8, r4
 8012788:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801278c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012790:	d118      	bne.n	80127c4 <_dtoa_r+0x58c>
 8012792:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012796:	ee37 4b05 	vadd.f64	d4, d7, d5
 801279a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a2:	dc4d      	bgt.n	8012840 <_dtoa_r+0x608>
 80127a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80127a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b0:	f57f af33 	bpl.w	801261a <_dtoa_r+0x3e2>
 80127b4:	4688      	mov	r8, r1
 80127b6:	3901      	subs	r1, #1
 80127b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80127bc:	2b30      	cmp	r3, #48	; 0x30
 80127be:	d0f9      	beq.n	80127b4 <_dtoa_r+0x57c>
 80127c0:	46bb      	mov	fp, r7
 80127c2:	e02a      	b.n	801281a <_dtoa_r+0x5e2>
 80127c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80127c8:	e7d6      	b.n	8012778 <_dtoa_r+0x540>
 80127ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80127d2:	f8dd 8000 	ldr.w	r8, [sp]
 80127d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80127da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80127de:	ee15 3a10 	vmov	r3, s10
 80127e2:	3330      	adds	r3, #48	; 0x30
 80127e4:	f808 3b01 	strb.w	r3, [r8], #1
 80127e8:	9b00      	ldr	r3, [sp, #0]
 80127ea:	eba8 0303 	sub.w	r3, r8, r3
 80127ee:	4599      	cmp	r9, r3
 80127f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80127f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80127f8:	d133      	bne.n	8012862 <_dtoa_r+0x62a>
 80127fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80127fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012806:	dc1a      	bgt.n	801283e <_dtoa_r+0x606>
 8012808:	eeb4 7b46 	vcmp.f64	d7, d6
 801280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012810:	d103      	bne.n	801281a <_dtoa_r+0x5e2>
 8012812:	ee15 3a10 	vmov	r3, s10
 8012816:	07d9      	lsls	r1, r3, #31
 8012818:	d411      	bmi.n	801283e <_dtoa_r+0x606>
 801281a:	4629      	mov	r1, r5
 801281c:	4630      	mov	r0, r6
 801281e:	f000 fd07 	bl	8013230 <_Bfree>
 8012822:	2300      	movs	r3, #0
 8012824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012826:	f888 3000 	strb.w	r3, [r8]
 801282a:	f10b 0301 	add.w	r3, fp, #1
 801282e:	6013      	str	r3, [r2, #0]
 8012830:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012832:	2b00      	cmp	r3, #0
 8012834:	f43f ad4d 	beq.w	80122d2 <_dtoa_r+0x9a>
 8012838:	f8c3 8000 	str.w	r8, [r3]
 801283c:	e549      	b.n	80122d2 <_dtoa_r+0x9a>
 801283e:	465f      	mov	r7, fp
 8012840:	4643      	mov	r3, r8
 8012842:	4698      	mov	r8, r3
 8012844:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012848:	2a39      	cmp	r2, #57	; 0x39
 801284a:	d106      	bne.n	801285a <_dtoa_r+0x622>
 801284c:	9a00      	ldr	r2, [sp, #0]
 801284e:	429a      	cmp	r2, r3
 8012850:	d1f7      	bne.n	8012842 <_dtoa_r+0x60a>
 8012852:	9900      	ldr	r1, [sp, #0]
 8012854:	2230      	movs	r2, #48	; 0x30
 8012856:	3701      	adds	r7, #1
 8012858:	700a      	strb	r2, [r1, #0]
 801285a:	781a      	ldrb	r2, [r3, #0]
 801285c:	3201      	adds	r2, #1
 801285e:	701a      	strb	r2, [r3, #0]
 8012860:	e7ae      	b.n	80127c0 <_dtoa_r+0x588>
 8012862:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012866:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286e:	d1b2      	bne.n	80127d6 <_dtoa_r+0x59e>
 8012870:	e7d3      	b.n	801281a <_dtoa_r+0x5e2>
 8012872:	bf00      	nop
 8012874:	08015cc8 	.word	0x08015cc8
 8012878:	08015ca0 	.word	0x08015ca0
 801287c:	9908      	ldr	r1, [sp, #32]
 801287e:	2900      	cmp	r1, #0
 8012880:	f000 80d1 	beq.w	8012a26 <_dtoa_r+0x7ee>
 8012884:	9907      	ldr	r1, [sp, #28]
 8012886:	2901      	cmp	r1, #1
 8012888:	f300 80b4 	bgt.w	80129f4 <_dtoa_r+0x7bc>
 801288c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801288e:	2900      	cmp	r1, #0
 8012890:	f000 80ac 	beq.w	80129ec <_dtoa_r+0x7b4>
 8012894:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012898:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801289c:	461c      	mov	r4, r3
 801289e:	930a      	str	r3, [sp, #40]	; 0x28
 80128a0:	9b05      	ldr	r3, [sp, #20]
 80128a2:	4413      	add	r3, r2
 80128a4:	9305      	str	r3, [sp, #20]
 80128a6:	9b06      	ldr	r3, [sp, #24]
 80128a8:	2101      	movs	r1, #1
 80128aa:	4413      	add	r3, r2
 80128ac:	4630      	mov	r0, r6
 80128ae:	9306      	str	r3, [sp, #24]
 80128b0:	f000 fd7a 	bl	80133a8 <__i2b>
 80128b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b6:	4607      	mov	r7, r0
 80128b8:	f1b8 0f00 	cmp.w	r8, #0
 80128bc:	dd0d      	ble.n	80128da <_dtoa_r+0x6a2>
 80128be:	9a06      	ldr	r2, [sp, #24]
 80128c0:	2a00      	cmp	r2, #0
 80128c2:	dd0a      	ble.n	80128da <_dtoa_r+0x6a2>
 80128c4:	4542      	cmp	r2, r8
 80128c6:	9905      	ldr	r1, [sp, #20]
 80128c8:	bfa8      	it	ge
 80128ca:	4642      	movge	r2, r8
 80128cc:	1a89      	subs	r1, r1, r2
 80128ce:	9105      	str	r1, [sp, #20]
 80128d0:	9906      	ldr	r1, [sp, #24]
 80128d2:	eba8 0802 	sub.w	r8, r8, r2
 80128d6:	1a8a      	subs	r2, r1, r2
 80128d8:	9206      	str	r2, [sp, #24]
 80128da:	b303      	cbz	r3, 801291e <_dtoa_r+0x6e6>
 80128dc:	9a08      	ldr	r2, [sp, #32]
 80128de:	2a00      	cmp	r2, #0
 80128e0:	f000 80a6 	beq.w	8012a30 <_dtoa_r+0x7f8>
 80128e4:	2c00      	cmp	r4, #0
 80128e6:	dd13      	ble.n	8012910 <_dtoa_r+0x6d8>
 80128e8:	4639      	mov	r1, r7
 80128ea:	4622      	mov	r2, r4
 80128ec:	4630      	mov	r0, r6
 80128ee:	930c      	str	r3, [sp, #48]	; 0x30
 80128f0:	f000 fe16 	bl	8013520 <__pow5mult>
 80128f4:	462a      	mov	r2, r5
 80128f6:	4601      	mov	r1, r0
 80128f8:	4607      	mov	r7, r0
 80128fa:	4630      	mov	r0, r6
 80128fc:	f000 fd6a 	bl	80133d4 <__multiply>
 8012900:	4629      	mov	r1, r5
 8012902:	900a      	str	r0, [sp, #40]	; 0x28
 8012904:	4630      	mov	r0, r6
 8012906:	f000 fc93 	bl	8013230 <_Bfree>
 801290a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801290c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801290e:	4615      	mov	r5, r2
 8012910:	1b1a      	subs	r2, r3, r4
 8012912:	d004      	beq.n	801291e <_dtoa_r+0x6e6>
 8012914:	4629      	mov	r1, r5
 8012916:	4630      	mov	r0, r6
 8012918:	f000 fe02 	bl	8013520 <__pow5mult>
 801291c:	4605      	mov	r5, r0
 801291e:	2101      	movs	r1, #1
 8012920:	4630      	mov	r0, r6
 8012922:	f000 fd41 	bl	80133a8 <__i2b>
 8012926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012928:	2b00      	cmp	r3, #0
 801292a:	4604      	mov	r4, r0
 801292c:	f340 8082 	ble.w	8012a34 <_dtoa_r+0x7fc>
 8012930:	461a      	mov	r2, r3
 8012932:	4601      	mov	r1, r0
 8012934:	4630      	mov	r0, r6
 8012936:	f000 fdf3 	bl	8013520 <__pow5mult>
 801293a:	9b07      	ldr	r3, [sp, #28]
 801293c:	2b01      	cmp	r3, #1
 801293e:	4604      	mov	r4, r0
 8012940:	dd7b      	ble.n	8012a3a <_dtoa_r+0x802>
 8012942:	2300      	movs	r3, #0
 8012944:	930a      	str	r3, [sp, #40]	; 0x28
 8012946:	6922      	ldr	r2, [r4, #16]
 8012948:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801294c:	6910      	ldr	r0, [r2, #16]
 801294e:	f000 fcdb 	bl	8013308 <__hi0bits>
 8012952:	f1c0 0020 	rsb	r0, r0, #32
 8012956:	9b06      	ldr	r3, [sp, #24]
 8012958:	4418      	add	r0, r3
 801295a:	f010 001f 	ands.w	r0, r0, #31
 801295e:	f000 808d 	beq.w	8012a7c <_dtoa_r+0x844>
 8012962:	f1c0 0220 	rsb	r2, r0, #32
 8012966:	2a04      	cmp	r2, #4
 8012968:	f340 8086 	ble.w	8012a78 <_dtoa_r+0x840>
 801296c:	f1c0 001c 	rsb	r0, r0, #28
 8012970:	9b05      	ldr	r3, [sp, #20]
 8012972:	4403      	add	r3, r0
 8012974:	9305      	str	r3, [sp, #20]
 8012976:	9b06      	ldr	r3, [sp, #24]
 8012978:	4403      	add	r3, r0
 801297a:	4480      	add	r8, r0
 801297c:	9306      	str	r3, [sp, #24]
 801297e:	9b05      	ldr	r3, [sp, #20]
 8012980:	2b00      	cmp	r3, #0
 8012982:	dd05      	ble.n	8012990 <_dtoa_r+0x758>
 8012984:	4629      	mov	r1, r5
 8012986:	461a      	mov	r2, r3
 8012988:	4630      	mov	r0, r6
 801298a:	f000 fe23 	bl	80135d4 <__lshift>
 801298e:	4605      	mov	r5, r0
 8012990:	9b06      	ldr	r3, [sp, #24]
 8012992:	2b00      	cmp	r3, #0
 8012994:	dd05      	ble.n	80129a2 <_dtoa_r+0x76a>
 8012996:	4621      	mov	r1, r4
 8012998:	461a      	mov	r2, r3
 801299a:	4630      	mov	r0, r6
 801299c:	f000 fe1a 	bl	80135d4 <__lshift>
 80129a0:	4604      	mov	r4, r0
 80129a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d06b      	beq.n	8012a80 <_dtoa_r+0x848>
 80129a8:	4621      	mov	r1, r4
 80129aa:	4628      	mov	r0, r5
 80129ac:	f000 fe7e 	bl	80136ac <__mcmp>
 80129b0:	2800      	cmp	r0, #0
 80129b2:	da65      	bge.n	8012a80 <_dtoa_r+0x848>
 80129b4:	2300      	movs	r3, #0
 80129b6:	4629      	mov	r1, r5
 80129b8:	220a      	movs	r2, #10
 80129ba:	4630      	mov	r0, r6
 80129bc:	f000 fc5a 	bl	8013274 <__multadd>
 80129c0:	9b08      	ldr	r3, [sp, #32]
 80129c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129c6:	4605      	mov	r5, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	f000 8192 	beq.w	8012cf2 <_dtoa_r+0xaba>
 80129ce:	4639      	mov	r1, r7
 80129d0:	2300      	movs	r3, #0
 80129d2:	220a      	movs	r2, #10
 80129d4:	4630      	mov	r0, r6
 80129d6:	f000 fc4d 	bl	8013274 <__multadd>
 80129da:	f1ba 0f00 	cmp.w	sl, #0
 80129de:	4607      	mov	r7, r0
 80129e0:	f300 808e 	bgt.w	8012b00 <_dtoa_r+0x8c8>
 80129e4:	9b07      	ldr	r3, [sp, #28]
 80129e6:	2b02      	cmp	r3, #2
 80129e8:	dc51      	bgt.n	8012a8e <_dtoa_r+0x856>
 80129ea:	e089      	b.n	8012b00 <_dtoa_r+0x8c8>
 80129ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80129ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80129f2:	e751      	b.n	8012898 <_dtoa_r+0x660>
 80129f4:	f109 34ff 	add.w	r4, r9, #4294967295
 80129f8:	42a3      	cmp	r3, r4
 80129fa:	bfbf      	itttt	lt
 80129fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80129fe:	1ae3      	sublt	r3, r4, r3
 8012a00:	18d2      	addlt	r2, r2, r3
 8012a02:	4613      	movlt	r3, r2
 8012a04:	bfb7      	itett	lt
 8012a06:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012a08:	1b1c      	subge	r4, r3, r4
 8012a0a:	4623      	movlt	r3, r4
 8012a0c:	2400      	movlt	r4, #0
 8012a0e:	f1b9 0f00 	cmp.w	r9, #0
 8012a12:	bfb5      	itete	lt
 8012a14:	9a05      	ldrlt	r2, [sp, #20]
 8012a16:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012a1a:	eba2 0809 	sublt.w	r8, r2, r9
 8012a1e:	464a      	movge	r2, r9
 8012a20:	bfb8      	it	lt
 8012a22:	2200      	movlt	r2, #0
 8012a24:	e73b      	b.n	801289e <_dtoa_r+0x666>
 8012a26:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a2a:	9f08      	ldr	r7, [sp, #32]
 8012a2c:	461c      	mov	r4, r3
 8012a2e:	e743      	b.n	80128b8 <_dtoa_r+0x680>
 8012a30:	461a      	mov	r2, r3
 8012a32:	e76f      	b.n	8012914 <_dtoa_r+0x6dc>
 8012a34:	9b07      	ldr	r3, [sp, #28]
 8012a36:	2b01      	cmp	r3, #1
 8012a38:	dc18      	bgt.n	8012a6c <_dtoa_r+0x834>
 8012a3a:	9b02      	ldr	r3, [sp, #8]
 8012a3c:	b9b3      	cbnz	r3, 8012a6c <_dtoa_r+0x834>
 8012a3e:	9b03      	ldr	r3, [sp, #12]
 8012a40:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012a44:	b9a2      	cbnz	r2, 8012a70 <_dtoa_r+0x838>
 8012a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012a4a:	0d12      	lsrs	r2, r2, #20
 8012a4c:	0512      	lsls	r2, r2, #20
 8012a4e:	b18a      	cbz	r2, 8012a74 <_dtoa_r+0x83c>
 8012a50:	9b05      	ldr	r3, [sp, #20]
 8012a52:	3301      	adds	r3, #1
 8012a54:	9305      	str	r3, [sp, #20]
 8012a56:	9b06      	ldr	r3, [sp, #24]
 8012a58:	3301      	adds	r3, #1
 8012a5a:	9306      	str	r3, [sp, #24]
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8012a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f47f af6f 	bne.w	8012946 <_dtoa_r+0x70e>
 8012a68:	2001      	movs	r0, #1
 8012a6a:	e774      	b.n	8012956 <_dtoa_r+0x71e>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	e7f6      	b.n	8012a5e <_dtoa_r+0x826>
 8012a70:	9b02      	ldr	r3, [sp, #8]
 8012a72:	e7f4      	b.n	8012a5e <_dtoa_r+0x826>
 8012a74:	920a      	str	r2, [sp, #40]	; 0x28
 8012a76:	e7f3      	b.n	8012a60 <_dtoa_r+0x828>
 8012a78:	d081      	beq.n	801297e <_dtoa_r+0x746>
 8012a7a:	4610      	mov	r0, r2
 8012a7c:	301c      	adds	r0, #28
 8012a7e:	e777      	b.n	8012970 <_dtoa_r+0x738>
 8012a80:	f1b9 0f00 	cmp.w	r9, #0
 8012a84:	dc37      	bgt.n	8012af6 <_dtoa_r+0x8be>
 8012a86:	9b07      	ldr	r3, [sp, #28]
 8012a88:	2b02      	cmp	r3, #2
 8012a8a:	dd34      	ble.n	8012af6 <_dtoa_r+0x8be>
 8012a8c:	46ca      	mov	sl, r9
 8012a8e:	f1ba 0f00 	cmp.w	sl, #0
 8012a92:	d10d      	bne.n	8012ab0 <_dtoa_r+0x878>
 8012a94:	4621      	mov	r1, r4
 8012a96:	4653      	mov	r3, sl
 8012a98:	2205      	movs	r2, #5
 8012a9a:	4630      	mov	r0, r6
 8012a9c:	f000 fbea 	bl	8013274 <__multadd>
 8012aa0:	4601      	mov	r1, r0
 8012aa2:	4604      	mov	r4, r0
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	f000 fe01 	bl	80136ac <__mcmp>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	f73f adde 	bgt.w	801266c <_dtoa_r+0x434>
 8012ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ab2:	f8dd 8000 	ldr.w	r8, [sp]
 8012ab6:	ea6f 0b03 	mvn.w	fp, r3
 8012aba:	f04f 0900 	mov.w	r9, #0
 8012abe:	4621      	mov	r1, r4
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	f000 fbb5 	bl	8013230 <_Bfree>
 8012ac6:	2f00      	cmp	r7, #0
 8012ac8:	f43f aea7 	beq.w	801281a <_dtoa_r+0x5e2>
 8012acc:	f1b9 0f00 	cmp.w	r9, #0
 8012ad0:	d005      	beq.n	8012ade <_dtoa_r+0x8a6>
 8012ad2:	45b9      	cmp	r9, r7
 8012ad4:	d003      	beq.n	8012ade <_dtoa_r+0x8a6>
 8012ad6:	4649      	mov	r1, r9
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f000 fba9 	bl	8013230 <_Bfree>
 8012ade:	4639      	mov	r1, r7
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	f000 fba5 	bl	8013230 <_Bfree>
 8012ae6:	e698      	b.n	801281a <_dtoa_r+0x5e2>
 8012ae8:	2400      	movs	r4, #0
 8012aea:	4627      	mov	r7, r4
 8012aec:	e7e0      	b.n	8012ab0 <_dtoa_r+0x878>
 8012aee:	46bb      	mov	fp, r7
 8012af0:	4604      	mov	r4, r0
 8012af2:	4607      	mov	r7, r0
 8012af4:	e5ba      	b.n	801266c <_dtoa_r+0x434>
 8012af6:	9b08      	ldr	r3, [sp, #32]
 8012af8:	46ca      	mov	sl, r9
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f000 8100 	beq.w	8012d00 <_dtoa_r+0xac8>
 8012b00:	f1b8 0f00 	cmp.w	r8, #0
 8012b04:	dd05      	ble.n	8012b12 <_dtoa_r+0x8da>
 8012b06:	4639      	mov	r1, r7
 8012b08:	4642      	mov	r2, r8
 8012b0a:	4630      	mov	r0, r6
 8012b0c:	f000 fd62 	bl	80135d4 <__lshift>
 8012b10:	4607      	mov	r7, r0
 8012b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d05d      	beq.n	8012bd4 <_dtoa_r+0x99c>
 8012b18:	6879      	ldr	r1, [r7, #4]
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f000 fb48 	bl	80131b0 <_Balloc>
 8012b20:	4680      	mov	r8, r0
 8012b22:	b928      	cbnz	r0, 8012b30 <_dtoa_r+0x8f8>
 8012b24:	4b82      	ldr	r3, [pc, #520]	; (8012d30 <_dtoa_r+0xaf8>)
 8012b26:	4602      	mov	r2, r0
 8012b28:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012b2c:	f7ff bb9a 	b.w	8012264 <_dtoa_r+0x2c>
 8012b30:	693a      	ldr	r2, [r7, #16]
 8012b32:	3202      	adds	r2, #2
 8012b34:	0092      	lsls	r2, r2, #2
 8012b36:	f107 010c 	add.w	r1, r7, #12
 8012b3a:	300c      	adds	r0, #12
 8012b3c:	f000 fb2a 	bl	8013194 <memcpy>
 8012b40:	2201      	movs	r2, #1
 8012b42:	4641      	mov	r1, r8
 8012b44:	4630      	mov	r0, r6
 8012b46:	f000 fd45 	bl	80135d4 <__lshift>
 8012b4a:	9b00      	ldr	r3, [sp, #0]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	9305      	str	r3, [sp, #20]
 8012b50:	9b00      	ldr	r3, [sp, #0]
 8012b52:	4453      	add	r3, sl
 8012b54:	9309      	str	r3, [sp, #36]	; 0x24
 8012b56:	9b02      	ldr	r3, [sp, #8]
 8012b58:	f003 0301 	and.w	r3, r3, #1
 8012b5c:	46b9      	mov	r9, r7
 8012b5e:	9308      	str	r3, [sp, #32]
 8012b60:	4607      	mov	r7, r0
 8012b62:	9b05      	ldr	r3, [sp, #20]
 8012b64:	4621      	mov	r1, r4
 8012b66:	3b01      	subs	r3, #1
 8012b68:	4628      	mov	r0, r5
 8012b6a:	9302      	str	r3, [sp, #8]
 8012b6c:	f7ff fad8 	bl	8012120 <quorem>
 8012b70:	4603      	mov	r3, r0
 8012b72:	3330      	adds	r3, #48	; 0x30
 8012b74:	9006      	str	r0, [sp, #24]
 8012b76:	4649      	mov	r1, r9
 8012b78:	4628      	mov	r0, r5
 8012b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b7c:	f000 fd96 	bl	80136ac <__mcmp>
 8012b80:	463a      	mov	r2, r7
 8012b82:	4682      	mov	sl, r0
 8012b84:	4621      	mov	r1, r4
 8012b86:	4630      	mov	r0, r6
 8012b88:	f000 fdac 	bl	80136e4 <__mdiff>
 8012b8c:	68c2      	ldr	r2, [r0, #12]
 8012b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b90:	4680      	mov	r8, r0
 8012b92:	bb0a      	cbnz	r2, 8012bd8 <_dtoa_r+0x9a0>
 8012b94:	4601      	mov	r1, r0
 8012b96:	4628      	mov	r0, r5
 8012b98:	f000 fd88 	bl	80136ac <__mcmp>
 8012b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	4641      	mov	r1, r8
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	920e      	str	r2, [sp, #56]	; 0x38
 8012ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8012ba8:	f000 fb42 	bl	8013230 <_Bfree>
 8012bac:	9b07      	ldr	r3, [sp, #28]
 8012bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012bb4:	ea43 0102 	orr.w	r1, r3, r2
 8012bb8:	9b08      	ldr	r3, [sp, #32]
 8012bba:	430b      	orrs	r3, r1
 8012bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bbe:	d10d      	bne.n	8012bdc <_dtoa_r+0x9a4>
 8012bc0:	2b39      	cmp	r3, #57	; 0x39
 8012bc2:	d029      	beq.n	8012c18 <_dtoa_r+0x9e0>
 8012bc4:	f1ba 0f00 	cmp.w	sl, #0
 8012bc8:	dd01      	ble.n	8012bce <_dtoa_r+0x996>
 8012bca:	9b06      	ldr	r3, [sp, #24]
 8012bcc:	3331      	adds	r3, #49	; 0x31
 8012bce:	9a02      	ldr	r2, [sp, #8]
 8012bd0:	7013      	strb	r3, [r2, #0]
 8012bd2:	e774      	b.n	8012abe <_dtoa_r+0x886>
 8012bd4:	4638      	mov	r0, r7
 8012bd6:	e7b8      	b.n	8012b4a <_dtoa_r+0x912>
 8012bd8:	2201      	movs	r2, #1
 8012bda:	e7e1      	b.n	8012ba0 <_dtoa_r+0x968>
 8012bdc:	f1ba 0f00 	cmp.w	sl, #0
 8012be0:	db06      	blt.n	8012bf0 <_dtoa_r+0x9b8>
 8012be2:	9907      	ldr	r1, [sp, #28]
 8012be4:	ea41 0a0a 	orr.w	sl, r1, sl
 8012be8:	9908      	ldr	r1, [sp, #32]
 8012bea:	ea5a 0101 	orrs.w	r1, sl, r1
 8012bee:	d120      	bne.n	8012c32 <_dtoa_r+0x9fa>
 8012bf0:	2a00      	cmp	r2, #0
 8012bf2:	ddec      	ble.n	8012bce <_dtoa_r+0x996>
 8012bf4:	4629      	mov	r1, r5
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	9305      	str	r3, [sp, #20]
 8012bfc:	f000 fcea 	bl	80135d4 <__lshift>
 8012c00:	4621      	mov	r1, r4
 8012c02:	4605      	mov	r5, r0
 8012c04:	f000 fd52 	bl	80136ac <__mcmp>
 8012c08:	2800      	cmp	r0, #0
 8012c0a:	9b05      	ldr	r3, [sp, #20]
 8012c0c:	dc02      	bgt.n	8012c14 <_dtoa_r+0x9dc>
 8012c0e:	d1de      	bne.n	8012bce <_dtoa_r+0x996>
 8012c10:	07da      	lsls	r2, r3, #31
 8012c12:	d5dc      	bpl.n	8012bce <_dtoa_r+0x996>
 8012c14:	2b39      	cmp	r3, #57	; 0x39
 8012c16:	d1d8      	bne.n	8012bca <_dtoa_r+0x992>
 8012c18:	9a02      	ldr	r2, [sp, #8]
 8012c1a:	2339      	movs	r3, #57	; 0x39
 8012c1c:	7013      	strb	r3, [r2, #0]
 8012c1e:	4643      	mov	r3, r8
 8012c20:	4698      	mov	r8, r3
 8012c22:	3b01      	subs	r3, #1
 8012c24:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012c28:	2a39      	cmp	r2, #57	; 0x39
 8012c2a:	d051      	beq.n	8012cd0 <_dtoa_r+0xa98>
 8012c2c:	3201      	adds	r2, #1
 8012c2e:	701a      	strb	r2, [r3, #0]
 8012c30:	e745      	b.n	8012abe <_dtoa_r+0x886>
 8012c32:	2a00      	cmp	r2, #0
 8012c34:	dd03      	ble.n	8012c3e <_dtoa_r+0xa06>
 8012c36:	2b39      	cmp	r3, #57	; 0x39
 8012c38:	d0ee      	beq.n	8012c18 <_dtoa_r+0x9e0>
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	e7c7      	b.n	8012bce <_dtoa_r+0x996>
 8012c3e:	9a05      	ldr	r2, [sp, #20]
 8012c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c42:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012c46:	428a      	cmp	r2, r1
 8012c48:	d02b      	beq.n	8012ca2 <_dtoa_r+0xa6a>
 8012c4a:	4629      	mov	r1, r5
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	220a      	movs	r2, #10
 8012c50:	4630      	mov	r0, r6
 8012c52:	f000 fb0f 	bl	8013274 <__multadd>
 8012c56:	45b9      	cmp	r9, r7
 8012c58:	4605      	mov	r5, r0
 8012c5a:	f04f 0300 	mov.w	r3, #0
 8012c5e:	f04f 020a 	mov.w	r2, #10
 8012c62:	4649      	mov	r1, r9
 8012c64:	4630      	mov	r0, r6
 8012c66:	d107      	bne.n	8012c78 <_dtoa_r+0xa40>
 8012c68:	f000 fb04 	bl	8013274 <__multadd>
 8012c6c:	4681      	mov	r9, r0
 8012c6e:	4607      	mov	r7, r0
 8012c70:	9b05      	ldr	r3, [sp, #20]
 8012c72:	3301      	adds	r3, #1
 8012c74:	9305      	str	r3, [sp, #20]
 8012c76:	e774      	b.n	8012b62 <_dtoa_r+0x92a>
 8012c78:	f000 fafc 	bl	8013274 <__multadd>
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	4681      	mov	r9, r0
 8012c80:	2300      	movs	r3, #0
 8012c82:	220a      	movs	r2, #10
 8012c84:	4630      	mov	r0, r6
 8012c86:	f000 faf5 	bl	8013274 <__multadd>
 8012c8a:	4607      	mov	r7, r0
 8012c8c:	e7f0      	b.n	8012c70 <_dtoa_r+0xa38>
 8012c8e:	f1ba 0f00 	cmp.w	sl, #0
 8012c92:	9a00      	ldr	r2, [sp, #0]
 8012c94:	bfcc      	ite	gt
 8012c96:	46d0      	movgt	r8, sl
 8012c98:	f04f 0801 	movle.w	r8, #1
 8012c9c:	4490      	add	r8, r2
 8012c9e:	f04f 0900 	mov.w	r9, #0
 8012ca2:	4629      	mov	r1, r5
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	4630      	mov	r0, r6
 8012ca8:	9302      	str	r3, [sp, #8]
 8012caa:	f000 fc93 	bl	80135d4 <__lshift>
 8012cae:	4621      	mov	r1, r4
 8012cb0:	4605      	mov	r5, r0
 8012cb2:	f000 fcfb 	bl	80136ac <__mcmp>
 8012cb6:	2800      	cmp	r0, #0
 8012cb8:	dcb1      	bgt.n	8012c1e <_dtoa_r+0x9e6>
 8012cba:	d102      	bne.n	8012cc2 <_dtoa_r+0xa8a>
 8012cbc:	9b02      	ldr	r3, [sp, #8]
 8012cbe:	07db      	lsls	r3, r3, #31
 8012cc0:	d4ad      	bmi.n	8012c1e <_dtoa_r+0x9e6>
 8012cc2:	4643      	mov	r3, r8
 8012cc4:	4698      	mov	r8, r3
 8012cc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cca:	2a30      	cmp	r2, #48	; 0x30
 8012ccc:	d0fa      	beq.n	8012cc4 <_dtoa_r+0xa8c>
 8012cce:	e6f6      	b.n	8012abe <_dtoa_r+0x886>
 8012cd0:	9a00      	ldr	r2, [sp, #0]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d1a4      	bne.n	8012c20 <_dtoa_r+0x9e8>
 8012cd6:	f10b 0b01 	add.w	fp, fp, #1
 8012cda:	2331      	movs	r3, #49	; 0x31
 8012cdc:	e778      	b.n	8012bd0 <_dtoa_r+0x998>
 8012cde:	4b15      	ldr	r3, [pc, #84]	; (8012d34 <_dtoa_r+0xafc>)
 8012ce0:	f7ff bb12 	b.w	8012308 <_dtoa_r+0xd0>
 8012ce4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	f47f aaee 	bne.w	80122c8 <_dtoa_r+0x90>
 8012cec:	4b12      	ldr	r3, [pc, #72]	; (8012d38 <_dtoa_r+0xb00>)
 8012cee:	f7ff bb0b 	b.w	8012308 <_dtoa_r+0xd0>
 8012cf2:	f1ba 0f00 	cmp.w	sl, #0
 8012cf6:	dc03      	bgt.n	8012d00 <_dtoa_r+0xac8>
 8012cf8:	9b07      	ldr	r3, [sp, #28]
 8012cfa:	2b02      	cmp	r3, #2
 8012cfc:	f73f aec7 	bgt.w	8012a8e <_dtoa_r+0x856>
 8012d00:	f8dd 8000 	ldr.w	r8, [sp]
 8012d04:	4621      	mov	r1, r4
 8012d06:	4628      	mov	r0, r5
 8012d08:	f7ff fa0a 	bl	8012120 <quorem>
 8012d0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012d10:	f808 3b01 	strb.w	r3, [r8], #1
 8012d14:	9a00      	ldr	r2, [sp, #0]
 8012d16:	eba8 0202 	sub.w	r2, r8, r2
 8012d1a:	4592      	cmp	sl, r2
 8012d1c:	ddb7      	ble.n	8012c8e <_dtoa_r+0xa56>
 8012d1e:	4629      	mov	r1, r5
 8012d20:	2300      	movs	r3, #0
 8012d22:	220a      	movs	r2, #10
 8012d24:	4630      	mov	r0, r6
 8012d26:	f000 faa5 	bl	8013274 <__multadd>
 8012d2a:	4605      	mov	r5, r0
 8012d2c:	e7ea      	b.n	8012d04 <_dtoa_r+0xacc>
 8012d2e:	bf00      	nop
 8012d30:	08015bcb 	.word	0x08015bcb
 8012d34:	08015b24 	.word	0x08015b24
 8012d38:	08015b48 	.word	0x08015b48

08012d3c <__sflush_r>:
 8012d3c:	898a      	ldrh	r2, [r1, #12]
 8012d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d42:	4605      	mov	r5, r0
 8012d44:	0710      	lsls	r0, r2, #28
 8012d46:	460c      	mov	r4, r1
 8012d48:	d458      	bmi.n	8012dfc <__sflush_r+0xc0>
 8012d4a:	684b      	ldr	r3, [r1, #4]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	dc05      	bgt.n	8012d5c <__sflush_r+0x20>
 8012d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	dc02      	bgt.n	8012d5c <__sflush_r+0x20>
 8012d56:	2000      	movs	r0, #0
 8012d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d5e:	2e00      	cmp	r6, #0
 8012d60:	d0f9      	beq.n	8012d56 <__sflush_r+0x1a>
 8012d62:	2300      	movs	r3, #0
 8012d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d68:	682f      	ldr	r7, [r5, #0]
 8012d6a:	602b      	str	r3, [r5, #0]
 8012d6c:	d032      	beq.n	8012dd4 <__sflush_r+0x98>
 8012d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d70:	89a3      	ldrh	r3, [r4, #12]
 8012d72:	075a      	lsls	r2, r3, #29
 8012d74:	d505      	bpl.n	8012d82 <__sflush_r+0x46>
 8012d76:	6863      	ldr	r3, [r4, #4]
 8012d78:	1ac0      	subs	r0, r0, r3
 8012d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d7c:	b10b      	cbz	r3, 8012d82 <__sflush_r+0x46>
 8012d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d80:	1ac0      	subs	r0, r0, r3
 8012d82:	2300      	movs	r3, #0
 8012d84:	4602      	mov	r2, r0
 8012d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d88:	6a21      	ldr	r1, [r4, #32]
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	47b0      	blx	r6
 8012d8e:	1c43      	adds	r3, r0, #1
 8012d90:	89a3      	ldrh	r3, [r4, #12]
 8012d92:	d106      	bne.n	8012da2 <__sflush_r+0x66>
 8012d94:	6829      	ldr	r1, [r5, #0]
 8012d96:	291d      	cmp	r1, #29
 8012d98:	d82c      	bhi.n	8012df4 <__sflush_r+0xb8>
 8012d9a:	4a2a      	ldr	r2, [pc, #168]	; (8012e44 <__sflush_r+0x108>)
 8012d9c:	40ca      	lsrs	r2, r1
 8012d9e:	07d6      	lsls	r6, r2, #31
 8012da0:	d528      	bpl.n	8012df4 <__sflush_r+0xb8>
 8012da2:	2200      	movs	r2, #0
 8012da4:	6062      	str	r2, [r4, #4]
 8012da6:	04d9      	lsls	r1, r3, #19
 8012da8:	6922      	ldr	r2, [r4, #16]
 8012daa:	6022      	str	r2, [r4, #0]
 8012dac:	d504      	bpl.n	8012db8 <__sflush_r+0x7c>
 8012dae:	1c42      	adds	r2, r0, #1
 8012db0:	d101      	bne.n	8012db6 <__sflush_r+0x7a>
 8012db2:	682b      	ldr	r3, [r5, #0]
 8012db4:	b903      	cbnz	r3, 8012db8 <__sflush_r+0x7c>
 8012db6:	6560      	str	r0, [r4, #84]	; 0x54
 8012db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dba:	602f      	str	r7, [r5, #0]
 8012dbc:	2900      	cmp	r1, #0
 8012dbe:	d0ca      	beq.n	8012d56 <__sflush_r+0x1a>
 8012dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dc4:	4299      	cmp	r1, r3
 8012dc6:	d002      	beq.n	8012dce <__sflush_r+0x92>
 8012dc8:	4628      	mov	r0, r5
 8012dca:	f000 fd7f 	bl	80138cc <_free_r>
 8012dce:	2000      	movs	r0, #0
 8012dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8012dd2:	e7c1      	b.n	8012d58 <__sflush_r+0x1c>
 8012dd4:	6a21      	ldr	r1, [r4, #32]
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	4628      	mov	r0, r5
 8012dda:	47b0      	blx	r6
 8012ddc:	1c41      	adds	r1, r0, #1
 8012dde:	d1c7      	bne.n	8012d70 <__sflush_r+0x34>
 8012de0:	682b      	ldr	r3, [r5, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d0c4      	beq.n	8012d70 <__sflush_r+0x34>
 8012de6:	2b1d      	cmp	r3, #29
 8012de8:	d001      	beq.n	8012dee <__sflush_r+0xb2>
 8012dea:	2b16      	cmp	r3, #22
 8012dec:	d101      	bne.n	8012df2 <__sflush_r+0xb6>
 8012dee:	602f      	str	r7, [r5, #0]
 8012df0:	e7b1      	b.n	8012d56 <__sflush_r+0x1a>
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012df8:	81a3      	strh	r3, [r4, #12]
 8012dfa:	e7ad      	b.n	8012d58 <__sflush_r+0x1c>
 8012dfc:	690f      	ldr	r7, [r1, #16]
 8012dfe:	2f00      	cmp	r7, #0
 8012e00:	d0a9      	beq.n	8012d56 <__sflush_r+0x1a>
 8012e02:	0793      	lsls	r3, r2, #30
 8012e04:	680e      	ldr	r6, [r1, #0]
 8012e06:	bf08      	it	eq
 8012e08:	694b      	ldreq	r3, [r1, #20]
 8012e0a:	600f      	str	r7, [r1, #0]
 8012e0c:	bf18      	it	ne
 8012e0e:	2300      	movne	r3, #0
 8012e10:	eba6 0807 	sub.w	r8, r6, r7
 8012e14:	608b      	str	r3, [r1, #8]
 8012e16:	f1b8 0f00 	cmp.w	r8, #0
 8012e1a:	dd9c      	ble.n	8012d56 <__sflush_r+0x1a>
 8012e1c:	6a21      	ldr	r1, [r4, #32]
 8012e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e20:	4643      	mov	r3, r8
 8012e22:	463a      	mov	r2, r7
 8012e24:	4628      	mov	r0, r5
 8012e26:	47b0      	blx	r6
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	dc06      	bgt.n	8012e3a <__sflush_r+0xfe>
 8012e2c:	89a3      	ldrh	r3, [r4, #12]
 8012e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e32:	81a3      	strh	r3, [r4, #12]
 8012e34:	f04f 30ff 	mov.w	r0, #4294967295
 8012e38:	e78e      	b.n	8012d58 <__sflush_r+0x1c>
 8012e3a:	4407      	add	r7, r0
 8012e3c:	eba8 0800 	sub.w	r8, r8, r0
 8012e40:	e7e9      	b.n	8012e16 <__sflush_r+0xda>
 8012e42:	bf00      	nop
 8012e44:	20400001 	.word	0x20400001

08012e48 <_fflush_r>:
 8012e48:	b538      	push	{r3, r4, r5, lr}
 8012e4a:	690b      	ldr	r3, [r1, #16]
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	460c      	mov	r4, r1
 8012e50:	b913      	cbnz	r3, 8012e58 <_fflush_r+0x10>
 8012e52:	2500      	movs	r5, #0
 8012e54:	4628      	mov	r0, r5
 8012e56:	bd38      	pop	{r3, r4, r5, pc}
 8012e58:	b118      	cbz	r0, 8012e62 <_fflush_r+0x1a>
 8012e5a:	6983      	ldr	r3, [r0, #24]
 8012e5c:	b90b      	cbnz	r3, 8012e62 <_fflush_r+0x1a>
 8012e5e:	f000 f887 	bl	8012f70 <__sinit>
 8012e62:	4b14      	ldr	r3, [pc, #80]	; (8012eb4 <_fflush_r+0x6c>)
 8012e64:	429c      	cmp	r4, r3
 8012e66:	d11b      	bne.n	8012ea0 <_fflush_r+0x58>
 8012e68:	686c      	ldr	r4, [r5, #4]
 8012e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d0ef      	beq.n	8012e52 <_fflush_r+0xa>
 8012e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e74:	07d0      	lsls	r0, r2, #31
 8012e76:	d404      	bmi.n	8012e82 <_fflush_r+0x3a>
 8012e78:	0599      	lsls	r1, r3, #22
 8012e7a:	d402      	bmi.n	8012e82 <_fflush_r+0x3a>
 8012e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e7e:	f000 f91a 	bl	80130b6 <__retarget_lock_acquire_recursive>
 8012e82:	4628      	mov	r0, r5
 8012e84:	4621      	mov	r1, r4
 8012e86:	f7ff ff59 	bl	8012d3c <__sflush_r>
 8012e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e8c:	07da      	lsls	r2, r3, #31
 8012e8e:	4605      	mov	r5, r0
 8012e90:	d4e0      	bmi.n	8012e54 <_fflush_r+0xc>
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	059b      	lsls	r3, r3, #22
 8012e96:	d4dd      	bmi.n	8012e54 <_fflush_r+0xc>
 8012e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e9a:	f000 f90d 	bl	80130b8 <__retarget_lock_release_recursive>
 8012e9e:	e7d9      	b.n	8012e54 <_fflush_r+0xc>
 8012ea0:	4b05      	ldr	r3, [pc, #20]	; (8012eb8 <_fflush_r+0x70>)
 8012ea2:	429c      	cmp	r4, r3
 8012ea4:	d101      	bne.n	8012eaa <_fflush_r+0x62>
 8012ea6:	68ac      	ldr	r4, [r5, #8]
 8012ea8:	e7df      	b.n	8012e6a <_fflush_r+0x22>
 8012eaa:	4b04      	ldr	r3, [pc, #16]	; (8012ebc <_fflush_r+0x74>)
 8012eac:	429c      	cmp	r4, r3
 8012eae:	bf08      	it	eq
 8012eb0:	68ec      	ldreq	r4, [r5, #12]
 8012eb2:	e7da      	b.n	8012e6a <_fflush_r+0x22>
 8012eb4:	08015bfc 	.word	0x08015bfc
 8012eb8:	08015c1c 	.word	0x08015c1c
 8012ebc:	08015bdc 	.word	0x08015bdc

08012ec0 <std>:
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	b510      	push	{r4, lr}
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8012eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ece:	6083      	str	r3, [r0, #8]
 8012ed0:	8181      	strh	r1, [r0, #12]
 8012ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8012ed4:	81c2      	strh	r2, [r0, #14]
 8012ed6:	6183      	str	r3, [r0, #24]
 8012ed8:	4619      	mov	r1, r3
 8012eda:	2208      	movs	r2, #8
 8012edc:	305c      	adds	r0, #92	; 0x5c
 8012ede:	f7fe fb9f 	bl	8011620 <memset>
 8012ee2:	4b05      	ldr	r3, [pc, #20]	; (8012ef8 <std+0x38>)
 8012ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8012ee6:	4b05      	ldr	r3, [pc, #20]	; (8012efc <std+0x3c>)
 8012ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012eea:	4b05      	ldr	r3, [pc, #20]	; (8012f00 <std+0x40>)
 8012eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012eee:	4b05      	ldr	r3, [pc, #20]	; (8012f04 <std+0x44>)
 8012ef0:	6224      	str	r4, [r4, #32]
 8012ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8012ef4:	bd10      	pop	{r4, pc}
 8012ef6:	bf00      	nop
 8012ef8:	08013a41 	.word	0x08013a41
 8012efc:	08013a63 	.word	0x08013a63
 8012f00:	08013a9b 	.word	0x08013a9b
 8012f04:	08013abf 	.word	0x08013abf

08012f08 <_cleanup_r>:
 8012f08:	4901      	ldr	r1, [pc, #4]	; (8012f10 <_cleanup_r+0x8>)
 8012f0a:	f000 b8af 	b.w	801306c <_fwalk_reent>
 8012f0e:	bf00      	nop
 8012f10:	08012e49 	.word	0x08012e49

08012f14 <__sfmoreglue>:
 8012f14:	b570      	push	{r4, r5, r6, lr}
 8012f16:	1e4a      	subs	r2, r1, #1
 8012f18:	2568      	movs	r5, #104	; 0x68
 8012f1a:	4355      	muls	r5, r2
 8012f1c:	460e      	mov	r6, r1
 8012f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f22:	f000 fd23 	bl	801396c <_malloc_r>
 8012f26:	4604      	mov	r4, r0
 8012f28:	b140      	cbz	r0, 8012f3c <__sfmoreglue+0x28>
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8012f30:	300c      	adds	r0, #12
 8012f32:	60a0      	str	r0, [r4, #8]
 8012f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012f38:	f7fe fb72 	bl	8011620 <memset>
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	bd70      	pop	{r4, r5, r6, pc}

08012f40 <__sfp_lock_acquire>:
 8012f40:	4801      	ldr	r0, [pc, #4]	; (8012f48 <__sfp_lock_acquire+0x8>)
 8012f42:	f000 b8b8 	b.w	80130b6 <__retarget_lock_acquire_recursive>
 8012f46:	bf00      	nop
 8012f48:	240015fc 	.word	0x240015fc

08012f4c <__sfp_lock_release>:
 8012f4c:	4801      	ldr	r0, [pc, #4]	; (8012f54 <__sfp_lock_release+0x8>)
 8012f4e:	f000 b8b3 	b.w	80130b8 <__retarget_lock_release_recursive>
 8012f52:	bf00      	nop
 8012f54:	240015fc 	.word	0x240015fc

08012f58 <__sinit_lock_acquire>:
 8012f58:	4801      	ldr	r0, [pc, #4]	; (8012f60 <__sinit_lock_acquire+0x8>)
 8012f5a:	f000 b8ac 	b.w	80130b6 <__retarget_lock_acquire_recursive>
 8012f5e:	bf00      	nop
 8012f60:	240015f7 	.word	0x240015f7

08012f64 <__sinit_lock_release>:
 8012f64:	4801      	ldr	r0, [pc, #4]	; (8012f6c <__sinit_lock_release+0x8>)
 8012f66:	f000 b8a7 	b.w	80130b8 <__retarget_lock_release_recursive>
 8012f6a:	bf00      	nop
 8012f6c:	240015f7 	.word	0x240015f7

08012f70 <__sinit>:
 8012f70:	b510      	push	{r4, lr}
 8012f72:	4604      	mov	r4, r0
 8012f74:	f7ff fff0 	bl	8012f58 <__sinit_lock_acquire>
 8012f78:	69a3      	ldr	r3, [r4, #24]
 8012f7a:	b11b      	cbz	r3, 8012f84 <__sinit+0x14>
 8012f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f80:	f7ff bff0 	b.w	8012f64 <__sinit_lock_release>
 8012f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012f88:	6523      	str	r3, [r4, #80]	; 0x50
 8012f8a:	4b13      	ldr	r3, [pc, #76]	; (8012fd8 <__sinit+0x68>)
 8012f8c:	4a13      	ldr	r2, [pc, #76]	; (8012fdc <__sinit+0x6c>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f92:	42a3      	cmp	r3, r4
 8012f94:	bf04      	itt	eq
 8012f96:	2301      	moveq	r3, #1
 8012f98:	61a3      	streq	r3, [r4, #24]
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	f000 f820 	bl	8012fe0 <__sfp>
 8012fa0:	6060      	str	r0, [r4, #4]
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f000 f81c 	bl	8012fe0 <__sfp>
 8012fa8:	60a0      	str	r0, [r4, #8]
 8012faa:	4620      	mov	r0, r4
 8012fac:	f000 f818 	bl	8012fe0 <__sfp>
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	60e0      	str	r0, [r4, #12]
 8012fb4:	2104      	movs	r1, #4
 8012fb6:	6860      	ldr	r0, [r4, #4]
 8012fb8:	f7ff ff82 	bl	8012ec0 <std>
 8012fbc:	68a0      	ldr	r0, [r4, #8]
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	2109      	movs	r1, #9
 8012fc2:	f7ff ff7d 	bl	8012ec0 <std>
 8012fc6:	68e0      	ldr	r0, [r4, #12]
 8012fc8:	2202      	movs	r2, #2
 8012fca:	2112      	movs	r1, #18
 8012fcc:	f7ff ff78 	bl	8012ec0 <std>
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	61a3      	str	r3, [r4, #24]
 8012fd4:	e7d2      	b.n	8012f7c <__sinit+0xc>
 8012fd6:	bf00      	nop
 8012fd8:	08015b10 	.word	0x08015b10
 8012fdc:	08012f09 	.word	0x08012f09

08012fe0 <__sfp>:
 8012fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fe2:	4607      	mov	r7, r0
 8012fe4:	f7ff ffac 	bl	8012f40 <__sfp_lock_acquire>
 8012fe8:	4b1e      	ldr	r3, [pc, #120]	; (8013064 <__sfp+0x84>)
 8012fea:	681e      	ldr	r6, [r3, #0]
 8012fec:	69b3      	ldr	r3, [r6, #24]
 8012fee:	b913      	cbnz	r3, 8012ff6 <__sfp+0x16>
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	f7ff ffbd 	bl	8012f70 <__sinit>
 8012ff6:	3648      	adds	r6, #72	; 0x48
 8012ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	d503      	bpl.n	8013008 <__sfp+0x28>
 8013000:	6833      	ldr	r3, [r6, #0]
 8013002:	b30b      	cbz	r3, 8013048 <__sfp+0x68>
 8013004:	6836      	ldr	r6, [r6, #0]
 8013006:	e7f7      	b.n	8012ff8 <__sfp+0x18>
 8013008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801300c:	b9d5      	cbnz	r5, 8013044 <__sfp+0x64>
 801300e:	4b16      	ldr	r3, [pc, #88]	; (8013068 <__sfp+0x88>)
 8013010:	60e3      	str	r3, [r4, #12]
 8013012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013016:	6665      	str	r5, [r4, #100]	; 0x64
 8013018:	f000 f84c 	bl	80130b4 <__retarget_lock_init_recursive>
 801301c:	f7ff ff96 	bl	8012f4c <__sfp_lock_release>
 8013020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013028:	6025      	str	r5, [r4, #0]
 801302a:	61a5      	str	r5, [r4, #24]
 801302c:	2208      	movs	r2, #8
 801302e:	4629      	mov	r1, r5
 8013030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013034:	f7fe faf4 	bl	8011620 <memset>
 8013038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801303c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013040:	4620      	mov	r0, r4
 8013042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013044:	3468      	adds	r4, #104	; 0x68
 8013046:	e7d9      	b.n	8012ffc <__sfp+0x1c>
 8013048:	2104      	movs	r1, #4
 801304a:	4638      	mov	r0, r7
 801304c:	f7ff ff62 	bl	8012f14 <__sfmoreglue>
 8013050:	4604      	mov	r4, r0
 8013052:	6030      	str	r0, [r6, #0]
 8013054:	2800      	cmp	r0, #0
 8013056:	d1d5      	bne.n	8013004 <__sfp+0x24>
 8013058:	f7ff ff78 	bl	8012f4c <__sfp_lock_release>
 801305c:	230c      	movs	r3, #12
 801305e:	603b      	str	r3, [r7, #0]
 8013060:	e7ee      	b.n	8013040 <__sfp+0x60>
 8013062:	bf00      	nop
 8013064:	08015b10 	.word	0x08015b10
 8013068:	ffff0001 	.word	0xffff0001

0801306c <_fwalk_reent>:
 801306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013070:	4606      	mov	r6, r0
 8013072:	4688      	mov	r8, r1
 8013074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013078:	2700      	movs	r7, #0
 801307a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801307e:	f1b9 0901 	subs.w	r9, r9, #1
 8013082:	d505      	bpl.n	8013090 <_fwalk_reent+0x24>
 8013084:	6824      	ldr	r4, [r4, #0]
 8013086:	2c00      	cmp	r4, #0
 8013088:	d1f7      	bne.n	801307a <_fwalk_reent+0xe>
 801308a:	4638      	mov	r0, r7
 801308c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013090:	89ab      	ldrh	r3, [r5, #12]
 8013092:	2b01      	cmp	r3, #1
 8013094:	d907      	bls.n	80130a6 <_fwalk_reent+0x3a>
 8013096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801309a:	3301      	adds	r3, #1
 801309c:	d003      	beq.n	80130a6 <_fwalk_reent+0x3a>
 801309e:	4629      	mov	r1, r5
 80130a0:	4630      	mov	r0, r6
 80130a2:	47c0      	blx	r8
 80130a4:	4307      	orrs	r7, r0
 80130a6:	3568      	adds	r5, #104	; 0x68
 80130a8:	e7e9      	b.n	801307e <_fwalk_reent+0x12>
	...

080130ac <_localeconv_r>:
 80130ac:	4800      	ldr	r0, [pc, #0]	; (80130b0 <_localeconv_r+0x4>)
 80130ae:	4770      	bx	lr
 80130b0:	2400038c 	.word	0x2400038c

080130b4 <__retarget_lock_init_recursive>:
 80130b4:	4770      	bx	lr

080130b6 <__retarget_lock_acquire_recursive>:
 80130b6:	4770      	bx	lr

080130b8 <__retarget_lock_release_recursive>:
 80130b8:	4770      	bx	lr

080130ba <__swhatbuf_r>:
 80130ba:	b570      	push	{r4, r5, r6, lr}
 80130bc:	460e      	mov	r6, r1
 80130be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130c2:	2900      	cmp	r1, #0
 80130c4:	b096      	sub	sp, #88	; 0x58
 80130c6:	4614      	mov	r4, r2
 80130c8:	461d      	mov	r5, r3
 80130ca:	da07      	bge.n	80130dc <__swhatbuf_r+0x22>
 80130cc:	2300      	movs	r3, #0
 80130ce:	602b      	str	r3, [r5, #0]
 80130d0:	89b3      	ldrh	r3, [r6, #12]
 80130d2:	061a      	lsls	r2, r3, #24
 80130d4:	d410      	bmi.n	80130f8 <__swhatbuf_r+0x3e>
 80130d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130da:	e00e      	b.n	80130fa <__swhatbuf_r+0x40>
 80130dc:	466a      	mov	r2, sp
 80130de:	f000 fd45 	bl	8013b6c <_fstat_r>
 80130e2:	2800      	cmp	r0, #0
 80130e4:	dbf2      	blt.n	80130cc <__swhatbuf_r+0x12>
 80130e6:	9a01      	ldr	r2, [sp, #4]
 80130e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80130ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80130f0:	425a      	negs	r2, r3
 80130f2:	415a      	adcs	r2, r3
 80130f4:	602a      	str	r2, [r5, #0]
 80130f6:	e7ee      	b.n	80130d6 <__swhatbuf_r+0x1c>
 80130f8:	2340      	movs	r3, #64	; 0x40
 80130fa:	2000      	movs	r0, #0
 80130fc:	6023      	str	r3, [r4, #0]
 80130fe:	b016      	add	sp, #88	; 0x58
 8013100:	bd70      	pop	{r4, r5, r6, pc}
	...

08013104 <__smakebuf_r>:
 8013104:	898b      	ldrh	r3, [r1, #12]
 8013106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013108:	079d      	lsls	r5, r3, #30
 801310a:	4606      	mov	r6, r0
 801310c:	460c      	mov	r4, r1
 801310e:	d507      	bpl.n	8013120 <__smakebuf_r+0x1c>
 8013110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013114:	6023      	str	r3, [r4, #0]
 8013116:	6123      	str	r3, [r4, #16]
 8013118:	2301      	movs	r3, #1
 801311a:	6163      	str	r3, [r4, #20]
 801311c:	b002      	add	sp, #8
 801311e:	bd70      	pop	{r4, r5, r6, pc}
 8013120:	ab01      	add	r3, sp, #4
 8013122:	466a      	mov	r2, sp
 8013124:	f7ff ffc9 	bl	80130ba <__swhatbuf_r>
 8013128:	9900      	ldr	r1, [sp, #0]
 801312a:	4605      	mov	r5, r0
 801312c:	4630      	mov	r0, r6
 801312e:	f000 fc1d 	bl	801396c <_malloc_r>
 8013132:	b948      	cbnz	r0, 8013148 <__smakebuf_r+0x44>
 8013134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013138:	059a      	lsls	r2, r3, #22
 801313a:	d4ef      	bmi.n	801311c <__smakebuf_r+0x18>
 801313c:	f023 0303 	bic.w	r3, r3, #3
 8013140:	f043 0302 	orr.w	r3, r3, #2
 8013144:	81a3      	strh	r3, [r4, #12]
 8013146:	e7e3      	b.n	8013110 <__smakebuf_r+0xc>
 8013148:	4b0d      	ldr	r3, [pc, #52]	; (8013180 <__smakebuf_r+0x7c>)
 801314a:	62b3      	str	r3, [r6, #40]	; 0x28
 801314c:	89a3      	ldrh	r3, [r4, #12]
 801314e:	6020      	str	r0, [r4, #0]
 8013150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013154:	81a3      	strh	r3, [r4, #12]
 8013156:	9b00      	ldr	r3, [sp, #0]
 8013158:	6163      	str	r3, [r4, #20]
 801315a:	9b01      	ldr	r3, [sp, #4]
 801315c:	6120      	str	r0, [r4, #16]
 801315e:	b15b      	cbz	r3, 8013178 <__smakebuf_r+0x74>
 8013160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013164:	4630      	mov	r0, r6
 8013166:	f000 fd13 	bl	8013b90 <_isatty_r>
 801316a:	b128      	cbz	r0, 8013178 <__smakebuf_r+0x74>
 801316c:	89a3      	ldrh	r3, [r4, #12]
 801316e:	f023 0303 	bic.w	r3, r3, #3
 8013172:	f043 0301 	orr.w	r3, r3, #1
 8013176:	81a3      	strh	r3, [r4, #12]
 8013178:	89a0      	ldrh	r0, [r4, #12]
 801317a:	4305      	orrs	r5, r0
 801317c:	81a5      	strh	r5, [r4, #12]
 801317e:	e7cd      	b.n	801311c <__smakebuf_r+0x18>
 8013180:	08012f09 	.word	0x08012f09

08013184 <malloc>:
 8013184:	4b02      	ldr	r3, [pc, #8]	; (8013190 <malloc+0xc>)
 8013186:	4601      	mov	r1, r0
 8013188:	6818      	ldr	r0, [r3, #0]
 801318a:	f000 bbef 	b.w	801396c <_malloc_r>
 801318e:	bf00      	nop
 8013190:	24000238 	.word	0x24000238

08013194 <memcpy>:
 8013194:	440a      	add	r2, r1
 8013196:	4291      	cmp	r1, r2
 8013198:	f100 33ff 	add.w	r3, r0, #4294967295
 801319c:	d100      	bne.n	80131a0 <memcpy+0xc>
 801319e:	4770      	bx	lr
 80131a0:	b510      	push	{r4, lr}
 80131a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131aa:	4291      	cmp	r1, r2
 80131ac:	d1f9      	bne.n	80131a2 <memcpy+0xe>
 80131ae:	bd10      	pop	{r4, pc}

080131b0 <_Balloc>:
 80131b0:	b570      	push	{r4, r5, r6, lr}
 80131b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80131b4:	4604      	mov	r4, r0
 80131b6:	460d      	mov	r5, r1
 80131b8:	b976      	cbnz	r6, 80131d8 <_Balloc+0x28>
 80131ba:	2010      	movs	r0, #16
 80131bc:	f7ff ffe2 	bl	8013184 <malloc>
 80131c0:	4602      	mov	r2, r0
 80131c2:	6260      	str	r0, [r4, #36]	; 0x24
 80131c4:	b920      	cbnz	r0, 80131d0 <_Balloc+0x20>
 80131c6:	4b18      	ldr	r3, [pc, #96]	; (8013228 <_Balloc+0x78>)
 80131c8:	4818      	ldr	r0, [pc, #96]	; (801322c <_Balloc+0x7c>)
 80131ca:	2166      	movs	r1, #102	; 0x66
 80131cc:	f000 fc8e 	bl	8013aec <__assert_func>
 80131d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80131d4:	6006      	str	r6, [r0, #0]
 80131d6:	60c6      	str	r6, [r0, #12]
 80131d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80131da:	68f3      	ldr	r3, [r6, #12]
 80131dc:	b183      	cbz	r3, 8013200 <_Balloc+0x50>
 80131de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80131e6:	b9b8      	cbnz	r0, 8013218 <_Balloc+0x68>
 80131e8:	2101      	movs	r1, #1
 80131ea:	fa01 f605 	lsl.w	r6, r1, r5
 80131ee:	1d72      	adds	r2, r6, #5
 80131f0:	0092      	lsls	r2, r2, #2
 80131f2:	4620      	mov	r0, r4
 80131f4:	f000 fb5a 	bl	80138ac <_calloc_r>
 80131f8:	b160      	cbz	r0, 8013214 <_Balloc+0x64>
 80131fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80131fe:	e00e      	b.n	801321e <_Balloc+0x6e>
 8013200:	2221      	movs	r2, #33	; 0x21
 8013202:	2104      	movs	r1, #4
 8013204:	4620      	mov	r0, r4
 8013206:	f000 fb51 	bl	80138ac <_calloc_r>
 801320a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801320c:	60f0      	str	r0, [r6, #12]
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d1e4      	bne.n	80131de <_Balloc+0x2e>
 8013214:	2000      	movs	r0, #0
 8013216:	bd70      	pop	{r4, r5, r6, pc}
 8013218:	6802      	ldr	r2, [r0, #0]
 801321a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801321e:	2300      	movs	r3, #0
 8013220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013224:	e7f7      	b.n	8013216 <_Balloc+0x66>
 8013226:	bf00      	nop
 8013228:	08015b55 	.word	0x08015b55
 801322c:	08015c3c 	.word	0x08015c3c

08013230 <_Bfree>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013234:	4605      	mov	r5, r0
 8013236:	460c      	mov	r4, r1
 8013238:	b976      	cbnz	r6, 8013258 <_Bfree+0x28>
 801323a:	2010      	movs	r0, #16
 801323c:	f7ff ffa2 	bl	8013184 <malloc>
 8013240:	4602      	mov	r2, r0
 8013242:	6268      	str	r0, [r5, #36]	; 0x24
 8013244:	b920      	cbnz	r0, 8013250 <_Bfree+0x20>
 8013246:	4b09      	ldr	r3, [pc, #36]	; (801326c <_Bfree+0x3c>)
 8013248:	4809      	ldr	r0, [pc, #36]	; (8013270 <_Bfree+0x40>)
 801324a:	218a      	movs	r1, #138	; 0x8a
 801324c:	f000 fc4e 	bl	8013aec <__assert_func>
 8013250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013254:	6006      	str	r6, [r0, #0]
 8013256:	60c6      	str	r6, [r0, #12]
 8013258:	b13c      	cbz	r4, 801326a <_Bfree+0x3a>
 801325a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801325c:	6862      	ldr	r2, [r4, #4]
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013264:	6021      	str	r1, [r4, #0]
 8013266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801326a:	bd70      	pop	{r4, r5, r6, pc}
 801326c:	08015b55 	.word	0x08015b55
 8013270:	08015c3c 	.word	0x08015c3c

08013274 <__multadd>:
 8013274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013278:	690e      	ldr	r6, [r1, #16]
 801327a:	4607      	mov	r7, r0
 801327c:	4698      	mov	r8, r3
 801327e:	460c      	mov	r4, r1
 8013280:	f101 0014 	add.w	r0, r1, #20
 8013284:	2300      	movs	r3, #0
 8013286:	6805      	ldr	r5, [r0, #0]
 8013288:	b2a9      	uxth	r1, r5
 801328a:	fb02 8101 	mla	r1, r2, r1, r8
 801328e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013292:	0c2d      	lsrs	r5, r5, #16
 8013294:	fb02 c505 	mla	r5, r2, r5, ip
 8013298:	b289      	uxth	r1, r1
 801329a:	3301      	adds	r3, #1
 801329c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80132a0:	429e      	cmp	r6, r3
 80132a2:	f840 1b04 	str.w	r1, [r0], #4
 80132a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80132aa:	dcec      	bgt.n	8013286 <__multadd+0x12>
 80132ac:	f1b8 0f00 	cmp.w	r8, #0
 80132b0:	d022      	beq.n	80132f8 <__multadd+0x84>
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	42b3      	cmp	r3, r6
 80132b6:	dc19      	bgt.n	80132ec <__multadd+0x78>
 80132b8:	6861      	ldr	r1, [r4, #4]
 80132ba:	4638      	mov	r0, r7
 80132bc:	3101      	adds	r1, #1
 80132be:	f7ff ff77 	bl	80131b0 <_Balloc>
 80132c2:	4605      	mov	r5, r0
 80132c4:	b928      	cbnz	r0, 80132d2 <__multadd+0x5e>
 80132c6:	4602      	mov	r2, r0
 80132c8:	4b0d      	ldr	r3, [pc, #52]	; (8013300 <__multadd+0x8c>)
 80132ca:	480e      	ldr	r0, [pc, #56]	; (8013304 <__multadd+0x90>)
 80132cc:	21b5      	movs	r1, #181	; 0xb5
 80132ce:	f000 fc0d 	bl	8013aec <__assert_func>
 80132d2:	6922      	ldr	r2, [r4, #16]
 80132d4:	3202      	adds	r2, #2
 80132d6:	f104 010c 	add.w	r1, r4, #12
 80132da:	0092      	lsls	r2, r2, #2
 80132dc:	300c      	adds	r0, #12
 80132de:	f7ff ff59 	bl	8013194 <memcpy>
 80132e2:	4621      	mov	r1, r4
 80132e4:	4638      	mov	r0, r7
 80132e6:	f7ff ffa3 	bl	8013230 <_Bfree>
 80132ea:	462c      	mov	r4, r5
 80132ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80132f0:	3601      	adds	r6, #1
 80132f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80132f6:	6126      	str	r6, [r4, #16]
 80132f8:	4620      	mov	r0, r4
 80132fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132fe:	bf00      	nop
 8013300:	08015bcb 	.word	0x08015bcb
 8013304:	08015c3c 	.word	0x08015c3c

08013308 <__hi0bits>:
 8013308:	0c03      	lsrs	r3, r0, #16
 801330a:	041b      	lsls	r3, r3, #16
 801330c:	b9d3      	cbnz	r3, 8013344 <__hi0bits+0x3c>
 801330e:	0400      	lsls	r0, r0, #16
 8013310:	2310      	movs	r3, #16
 8013312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013316:	bf04      	itt	eq
 8013318:	0200      	lsleq	r0, r0, #8
 801331a:	3308      	addeq	r3, #8
 801331c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013320:	bf04      	itt	eq
 8013322:	0100      	lsleq	r0, r0, #4
 8013324:	3304      	addeq	r3, #4
 8013326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801332a:	bf04      	itt	eq
 801332c:	0080      	lsleq	r0, r0, #2
 801332e:	3302      	addeq	r3, #2
 8013330:	2800      	cmp	r0, #0
 8013332:	db05      	blt.n	8013340 <__hi0bits+0x38>
 8013334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013338:	f103 0301 	add.w	r3, r3, #1
 801333c:	bf08      	it	eq
 801333e:	2320      	moveq	r3, #32
 8013340:	4618      	mov	r0, r3
 8013342:	4770      	bx	lr
 8013344:	2300      	movs	r3, #0
 8013346:	e7e4      	b.n	8013312 <__hi0bits+0xa>

08013348 <__lo0bits>:
 8013348:	6803      	ldr	r3, [r0, #0]
 801334a:	f013 0207 	ands.w	r2, r3, #7
 801334e:	4601      	mov	r1, r0
 8013350:	d00b      	beq.n	801336a <__lo0bits+0x22>
 8013352:	07da      	lsls	r2, r3, #31
 8013354:	d424      	bmi.n	80133a0 <__lo0bits+0x58>
 8013356:	0798      	lsls	r0, r3, #30
 8013358:	bf49      	itett	mi
 801335a:	085b      	lsrmi	r3, r3, #1
 801335c:	089b      	lsrpl	r3, r3, #2
 801335e:	2001      	movmi	r0, #1
 8013360:	600b      	strmi	r3, [r1, #0]
 8013362:	bf5c      	itt	pl
 8013364:	600b      	strpl	r3, [r1, #0]
 8013366:	2002      	movpl	r0, #2
 8013368:	4770      	bx	lr
 801336a:	b298      	uxth	r0, r3
 801336c:	b9b0      	cbnz	r0, 801339c <__lo0bits+0x54>
 801336e:	0c1b      	lsrs	r3, r3, #16
 8013370:	2010      	movs	r0, #16
 8013372:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013376:	bf04      	itt	eq
 8013378:	0a1b      	lsreq	r3, r3, #8
 801337a:	3008      	addeq	r0, #8
 801337c:	071a      	lsls	r2, r3, #28
 801337e:	bf04      	itt	eq
 8013380:	091b      	lsreq	r3, r3, #4
 8013382:	3004      	addeq	r0, #4
 8013384:	079a      	lsls	r2, r3, #30
 8013386:	bf04      	itt	eq
 8013388:	089b      	lsreq	r3, r3, #2
 801338a:	3002      	addeq	r0, #2
 801338c:	07da      	lsls	r2, r3, #31
 801338e:	d403      	bmi.n	8013398 <__lo0bits+0x50>
 8013390:	085b      	lsrs	r3, r3, #1
 8013392:	f100 0001 	add.w	r0, r0, #1
 8013396:	d005      	beq.n	80133a4 <__lo0bits+0x5c>
 8013398:	600b      	str	r3, [r1, #0]
 801339a:	4770      	bx	lr
 801339c:	4610      	mov	r0, r2
 801339e:	e7e8      	b.n	8013372 <__lo0bits+0x2a>
 80133a0:	2000      	movs	r0, #0
 80133a2:	4770      	bx	lr
 80133a4:	2020      	movs	r0, #32
 80133a6:	4770      	bx	lr

080133a8 <__i2b>:
 80133a8:	b510      	push	{r4, lr}
 80133aa:	460c      	mov	r4, r1
 80133ac:	2101      	movs	r1, #1
 80133ae:	f7ff feff 	bl	80131b0 <_Balloc>
 80133b2:	4602      	mov	r2, r0
 80133b4:	b928      	cbnz	r0, 80133c2 <__i2b+0x1a>
 80133b6:	4b05      	ldr	r3, [pc, #20]	; (80133cc <__i2b+0x24>)
 80133b8:	4805      	ldr	r0, [pc, #20]	; (80133d0 <__i2b+0x28>)
 80133ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80133be:	f000 fb95 	bl	8013aec <__assert_func>
 80133c2:	2301      	movs	r3, #1
 80133c4:	6144      	str	r4, [r0, #20]
 80133c6:	6103      	str	r3, [r0, #16]
 80133c8:	bd10      	pop	{r4, pc}
 80133ca:	bf00      	nop
 80133cc:	08015bcb 	.word	0x08015bcb
 80133d0:	08015c3c 	.word	0x08015c3c

080133d4 <__multiply>:
 80133d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d8:	4614      	mov	r4, r2
 80133da:	690a      	ldr	r2, [r1, #16]
 80133dc:	6923      	ldr	r3, [r4, #16]
 80133de:	429a      	cmp	r2, r3
 80133e0:	bfb8      	it	lt
 80133e2:	460b      	movlt	r3, r1
 80133e4:	460d      	mov	r5, r1
 80133e6:	bfbc      	itt	lt
 80133e8:	4625      	movlt	r5, r4
 80133ea:	461c      	movlt	r4, r3
 80133ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80133f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80133f4:	68ab      	ldr	r3, [r5, #8]
 80133f6:	6869      	ldr	r1, [r5, #4]
 80133f8:	eb0a 0709 	add.w	r7, sl, r9
 80133fc:	42bb      	cmp	r3, r7
 80133fe:	b085      	sub	sp, #20
 8013400:	bfb8      	it	lt
 8013402:	3101      	addlt	r1, #1
 8013404:	f7ff fed4 	bl	80131b0 <_Balloc>
 8013408:	b930      	cbnz	r0, 8013418 <__multiply+0x44>
 801340a:	4602      	mov	r2, r0
 801340c:	4b42      	ldr	r3, [pc, #264]	; (8013518 <__multiply+0x144>)
 801340e:	4843      	ldr	r0, [pc, #268]	; (801351c <__multiply+0x148>)
 8013410:	f240 115d 	movw	r1, #349	; 0x15d
 8013414:	f000 fb6a 	bl	8013aec <__assert_func>
 8013418:	f100 0614 	add.w	r6, r0, #20
 801341c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013420:	4633      	mov	r3, r6
 8013422:	2200      	movs	r2, #0
 8013424:	4543      	cmp	r3, r8
 8013426:	d31e      	bcc.n	8013466 <__multiply+0x92>
 8013428:	f105 0c14 	add.w	ip, r5, #20
 801342c:	f104 0314 	add.w	r3, r4, #20
 8013430:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013434:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013438:	9202      	str	r2, [sp, #8]
 801343a:	ebac 0205 	sub.w	r2, ip, r5
 801343e:	3a15      	subs	r2, #21
 8013440:	f022 0203 	bic.w	r2, r2, #3
 8013444:	3204      	adds	r2, #4
 8013446:	f105 0115 	add.w	r1, r5, #21
 801344a:	458c      	cmp	ip, r1
 801344c:	bf38      	it	cc
 801344e:	2204      	movcc	r2, #4
 8013450:	9201      	str	r2, [sp, #4]
 8013452:	9a02      	ldr	r2, [sp, #8]
 8013454:	9303      	str	r3, [sp, #12]
 8013456:	429a      	cmp	r2, r3
 8013458:	d808      	bhi.n	801346c <__multiply+0x98>
 801345a:	2f00      	cmp	r7, #0
 801345c:	dc55      	bgt.n	801350a <__multiply+0x136>
 801345e:	6107      	str	r7, [r0, #16]
 8013460:	b005      	add	sp, #20
 8013462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013466:	f843 2b04 	str.w	r2, [r3], #4
 801346a:	e7db      	b.n	8013424 <__multiply+0x50>
 801346c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013470:	f1ba 0f00 	cmp.w	sl, #0
 8013474:	d020      	beq.n	80134b8 <__multiply+0xe4>
 8013476:	f105 0e14 	add.w	lr, r5, #20
 801347a:	46b1      	mov	r9, r6
 801347c:	2200      	movs	r2, #0
 801347e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013482:	f8d9 b000 	ldr.w	fp, [r9]
 8013486:	b2a1      	uxth	r1, r4
 8013488:	fa1f fb8b 	uxth.w	fp, fp
 801348c:	fb0a b101 	mla	r1, sl, r1, fp
 8013490:	4411      	add	r1, r2
 8013492:	f8d9 2000 	ldr.w	r2, [r9]
 8013496:	0c24      	lsrs	r4, r4, #16
 8013498:	0c12      	lsrs	r2, r2, #16
 801349a:	fb0a 2404 	mla	r4, sl, r4, r2
 801349e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80134a2:	b289      	uxth	r1, r1
 80134a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80134a8:	45f4      	cmp	ip, lr
 80134aa:	f849 1b04 	str.w	r1, [r9], #4
 80134ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80134b2:	d8e4      	bhi.n	801347e <__multiply+0xaa>
 80134b4:	9901      	ldr	r1, [sp, #4]
 80134b6:	5072      	str	r2, [r6, r1]
 80134b8:	9a03      	ldr	r2, [sp, #12]
 80134ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80134be:	3304      	adds	r3, #4
 80134c0:	f1b9 0f00 	cmp.w	r9, #0
 80134c4:	d01f      	beq.n	8013506 <__multiply+0x132>
 80134c6:	6834      	ldr	r4, [r6, #0]
 80134c8:	f105 0114 	add.w	r1, r5, #20
 80134cc:	46b6      	mov	lr, r6
 80134ce:	f04f 0a00 	mov.w	sl, #0
 80134d2:	880a      	ldrh	r2, [r1, #0]
 80134d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80134d8:	fb09 b202 	mla	r2, r9, r2, fp
 80134dc:	4492      	add	sl, r2
 80134de:	b2a4      	uxth	r4, r4
 80134e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80134e4:	f84e 4b04 	str.w	r4, [lr], #4
 80134e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80134ec:	f8be 2000 	ldrh.w	r2, [lr]
 80134f0:	0c24      	lsrs	r4, r4, #16
 80134f2:	fb09 2404 	mla	r4, r9, r4, r2
 80134f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80134fa:	458c      	cmp	ip, r1
 80134fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013500:	d8e7      	bhi.n	80134d2 <__multiply+0xfe>
 8013502:	9a01      	ldr	r2, [sp, #4]
 8013504:	50b4      	str	r4, [r6, r2]
 8013506:	3604      	adds	r6, #4
 8013508:	e7a3      	b.n	8013452 <__multiply+0x7e>
 801350a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1a5      	bne.n	801345e <__multiply+0x8a>
 8013512:	3f01      	subs	r7, #1
 8013514:	e7a1      	b.n	801345a <__multiply+0x86>
 8013516:	bf00      	nop
 8013518:	08015bcb 	.word	0x08015bcb
 801351c:	08015c3c 	.word	0x08015c3c

08013520 <__pow5mult>:
 8013520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013524:	4615      	mov	r5, r2
 8013526:	f012 0203 	ands.w	r2, r2, #3
 801352a:	4606      	mov	r6, r0
 801352c:	460f      	mov	r7, r1
 801352e:	d007      	beq.n	8013540 <__pow5mult+0x20>
 8013530:	4c25      	ldr	r4, [pc, #148]	; (80135c8 <__pow5mult+0xa8>)
 8013532:	3a01      	subs	r2, #1
 8013534:	2300      	movs	r3, #0
 8013536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801353a:	f7ff fe9b 	bl	8013274 <__multadd>
 801353e:	4607      	mov	r7, r0
 8013540:	10ad      	asrs	r5, r5, #2
 8013542:	d03d      	beq.n	80135c0 <__pow5mult+0xa0>
 8013544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013546:	b97c      	cbnz	r4, 8013568 <__pow5mult+0x48>
 8013548:	2010      	movs	r0, #16
 801354a:	f7ff fe1b 	bl	8013184 <malloc>
 801354e:	4602      	mov	r2, r0
 8013550:	6270      	str	r0, [r6, #36]	; 0x24
 8013552:	b928      	cbnz	r0, 8013560 <__pow5mult+0x40>
 8013554:	4b1d      	ldr	r3, [pc, #116]	; (80135cc <__pow5mult+0xac>)
 8013556:	481e      	ldr	r0, [pc, #120]	; (80135d0 <__pow5mult+0xb0>)
 8013558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801355c:	f000 fac6 	bl	8013aec <__assert_func>
 8013560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013564:	6004      	str	r4, [r0, #0]
 8013566:	60c4      	str	r4, [r0, #12]
 8013568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801356c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013570:	b94c      	cbnz	r4, 8013586 <__pow5mult+0x66>
 8013572:	f240 2171 	movw	r1, #625	; 0x271
 8013576:	4630      	mov	r0, r6
 8013578:	f7ff ff16 	bl	80133a8 <__i2b>
 801357c:	2300      	movs	r3, #0
 801357e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013582:	4604      	mov	r4, r0
 8013584:	6003      	str	r3, [r0, #0]
 8013586:	f04f 0900 	mov.w	r9, #0
 801358a:	07eb      	lsls	r3, r5, #31
 801358c:	d50a      	bpl.n	80135a4 <__pow5mult+0x84>
 801358e:	4639      	mov	r1, r7
 8013590:	4622      	mov	r2, r4
 8013592:	4630      	mov	r0, r6
 8013594:	f7ff ff1e 	bl	80133d4 <__multiply>
 8013598:	4639      	mov	r1, r7
 801359a:	4680      	mov	r8, r0
 801359c:	4630      	mov	r0, r6
 801359e:	f7ff fe47 	bl	8013230 <_Bfree>
 80135a2:	4647      	mov	r7, r8
 80135a4:	106d      	asrs	r5, r5, #1
 80135a6:	d00b      	beq.n	80135c0 <__pow5mult+0xa0>
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	b938      	cbnz	r0, 80135bc <__pow5mult+0x9c>
 80135ac:	4622      	mov	r2, r4
 80135ae:	4621      	mov	r1, r4
 80135b0:	4630      	mov	r0, r6
 80135b2:	f7ff ff0f 	bl	80133d4 <__multiply>
 80135b6:	6020      	str	r0, [r4, #0]
 80135b8:	f8c0 9000 	str.w	r9, [r0]
 80135bc:	4604      	mov	r4, r0
 80135be:	e7e4      	b.n	801358a <__pow5mult+0x6a>
 80135c0:	4638      	mov	r0, r7
 80135c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135c6:	bf00      	nop
 80135c8:	08015d90 	.word	0x08015d90
 80135cc:	08015b55 	.word	0x08015b55
 80135d0:	08015c3c 	.word	0x08015c3c

080135d4 <__lshift>:
 80135d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d8:	460c      	mov	r4, r1
 80135da:	6849      	ldr	r1, [r1, #4]
 80135dc:	6923      	ldr	r3, [r4, #16]
 80135de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80135e2:	68a3      	ldr	r3, [r4, #8]
 80135e4:	4607      	mov	r7, r0
 80135e6:	4691      	mov	r9, r2
 80135e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80135ec:	f108 0601 	add.w	r6, r8, #1
 80135f0:	42b3      	cmp	r3, r6
 80135f2:	db0b      	blt.n	801360c <__lshift+0x38>
 80135f4:	4638      	mov	r0, r7
 80135f6:	f7ff fddb 	bl	80131b0 <_Balloc>
 80135fa:	4605      	mov	r5, r0
 80135fc:	b948      	cbnz	r0, 8013612 <__lshift+0x3e>
 80135fe:	4602      	mov	r2, r0
 8013600:	4b28      	ldr	r3, [pc, #160]	; (80136a4 <__lshift+0xd0>)
 8013602:	4829      	ldr	r0, [pc, #164]	; (80136a8 <__lshift+0xd4>)
 8013604:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013608:	f000 fa70 	bl	8013aec <__assert_func>
 801360c:	3101      	adds	r1, #1
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	e7ee      	b.n	80135f0 <__lshift+0x1c>
 8013612:	2300      	movs	r3, #0
 8013614:	f100 0114 	add.w	r1, r0, #20
 8013618:	f100 0210 	add.w	r2, r0, #16
 801361c:	4618      	mov	r0, r3
 801361e:	4553      	cmp	r3, sl
 8013620:	db33      	blt.n	801368a <__lshift+0xb6>
 8013622:	6920      	ldr	r0, [r4, #16]
 8013624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013628:	f104 0314 	add.w	r3, r4, #20
 801362c:	f019 091f 	ands.w	r9, r9, #31
 8013630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013638:	d02b      	beq.n	8013692 <__lshift+0xbe>
 801363a:	f1c9 0e20 	rsb	lr, r9, #32
 801363e:	468a      	mov	sl, r1
 8013640:	2200      	movs	r2, #0
 8013642:	6818      	ldr	r0, [r3, #0]
 8013644:	fa00 f009 	lsl.w	r0, r0, r9
 8013648:	4302      	orrs	r2, r0
 801364a:	f84a 2b04 	str.w	r2, [sl], #4
 801364e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013652:	459c      	cmp	ip, r3
 8013654:	fa22 f20e 	lsr.w	r2, r2, lr
 8013658:	d8f3      	bhi.n	8013642 <__lshift+0x6e>
 801365a:	ebac 0304 	sub.w	r3, ip, r4
 801365e:	3b15      	subs	r3, #21
 8013660:	f023 0303 	bic.w	r3, r3, #3
 8013664:	3304      	adds	r3, #4
 8013666:	f104 0015 	add.w	r0, r4, #21
 801366a:	4584      	cmp	ip, r0
 801366c:	bf38      	it	cc
 801366e:	2304      	movcc	r3, #4
 8013670:	50ca      	str	r2, [r1, r3]
 8013672:	b10a      	cbz	r2, 8013678 <__lshift+0xa4>
 8013674:	f108 0602 	add.w	r6, r8, #2
 8013678:	3e01      	subs	r6, #1
 801367a:	4638      	mov	r0, r7
 801367c:	612e      	str	r6, [r5, #16]
 801367e:	4621      	mov	r1, r4
 8013680:	f7ff fdd6 	bl	8013230 <_Bfree>
 8013684:	4628      	mov	r0, r5
 8013686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801368a:	f842 0f04 	str.w	r0, [r2, #4]!
 801368e:	3301      	adds	r3, #1
 8013690:	e7c5      	b.n	801361e <__lshift+0x4a>
 8013692:	3904      	subs	r1, #4
 8013694:	f853 2b04 	ldr.w	r2, [r3], #4
 8013698:	f841 2f04 	str.w	r2, [r1, #4]!
 801369c:	459c      	cmp	ip, r3
 801369e:	d8f9      	bhi.n	8013694 <__lshift+0xc0>
 80136a0:	e7ea      	b.n	8013678 <__lshift+0xa4>
 80136a2:	bf00      	nop
 80136a4:	08015bcb 	.word	0x08015bcb
 80136a8:	08015c3c 	.word	0x08015c3c

080136ac <__mcmp>:
 80136ac:	b530      	push	{r4, r5, lr}
 80136ae:	6902      	ldr	r2, [r0, #16]
 80136b0:	690c      	ldr	r4, [r1, #16]
 80136b2:	1b12      	subs	r2, r2, r4
 80136b4:	d10e      	bne.n	80136d4 <__mcmp+0x28>
 80136b6:	f100 0314 	add.w	r3, r0, #20
 80136ba:	3114      	adds	r1, #20
 80136bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80136c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80136c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80136c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80136cc:	42a5      	cmp	r5, r4
 80136ce:	d003      	beq.n	80136d8 <__mcmp+0x2c>
 80136d0:	d305      	bcc.n	80136de <__mcmp+0x32>
 80136d2:	2201      	movs	r2, #1
 80136d4:	4610      	mov	r0, r2
 80136d6:	bd30      	pop	{r4, r5, pc}
 80136d8:	4283      	cmp	r3, r0
 80136da:	d3f3      	bcc.n	80136c4 <__mcmp+0x18>
 80136dc:	e7fa      	b.n	80136d4 <__mcmp+0x28>
 80136de:	f04f 32ff 	mov.w	r2, #4294967295
 80136e2:	e7f7      	b.n	80136d4 <__mcmp+0x28>

080136e4 <__mdiff>:
 80136e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e8:	460c      	mov	r4, r1
 80136ea:	4606      	mov	r6, r0
 80136ec:	4611      	mov	r1, r2
 80136ee:	4620      	mov	r0, r4
 80136f0:	4617      	mov	r7, r2
 80136f2:	f7ff ffdb 	bl	80136ac <__mcmp>
 80136f6:	1e05      	subs	r5, r0, #0
 80136f8:	d110      	bne.n	801371c <__mdiff+0x38>
 80136fa:	4629      	mov	r1, r5
 80136fc:	4630      	mov	r0, r6
 80136fe:	f7ff fd57 	bl	80131b0 <_Balloc>
 8013702:	b930      	cbnz	r0, 8013712 <__mdiff+0x2e>
 8013704:	4b39      	ldr	r3, [pc, #228]	; (80137ec <__mdiff+0x108>)
 8013706:	4602      	mov	r2, r0
 8013708:	f240 2132 	movw	r1, #562	; 0x232
 801370c:	4838      	ldr	r0, [pc, #224]	; (80137f0 <__mdiff+0x10c>)
 801370e:	f000 f9ed 	bl	8013aec <__assert_func>
 8013712:	2301      	movs	r3, #1
 8013714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801371c:	bfa4      	itt	ge
 801371e:	463b      	movge	r3, r7
 8013720:	4627      	movge	r7, r4
 8013722:	4630      	mov	r0, r6
 8013724:	6879      	ldr	r1, [r7, #4]
 8013726:	bfa6      	itte	ge
 8013728:	461c      	movge	r4, r3
 801372a:	2500      	movge	r5, #0
 801372c:	2501      	movlt	r5, #1
 801372e:	f7ff fd3f 	bl	80131b0 <_Balloc>
 8013732:	b920      	cbnz	r0, 801373e <__mdiff+0x5a>
 8013734:	4b2d      	ldr	r3, [pc, #180]	; (80137ec <__mdiff+0x108>)
 8013736:	4602      	mov	r2, r0
 8013738:	f44f 7110 	mov.w	r1, #576	; 0x240
 801373c:	e7e6      	b.n	801370c <__mdiff+0x28>
 801373e:	693e      	ldr	r6, [r7, #16]
 8013740:	60c5      	str	r5, [r0, #12]
 8013742:	6925      	ldr	r5, [r4, #16]
 8013744:	f107 0114 	add.w	r1, r7, #20
 8013748:	f104 0914 	add.w	r9, r4, #20
 801374c:	f100 0e14 	add.w	lr, r0, #20
 8013750:	f107 0210 	add.w	r2, r7, #16
 8013754:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013758:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801375c:	46f2      	mov	sl, lr
 801375e:	2700      	movs	r7, #0
 8013760:	f859 3b04 	ldr.w	r3, [r9], #4
 8013764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013768:	fa1f f883 	uxth.w	r8, r3
 801376c:	fa17 f78b 	uxtah	r7, r7, fp
 8013770:	0c1b      	lsrs	r3, r3, #16
 8013772:	eba7 0808 	sub.w	r8, r7, r8
 8013776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801377a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801377e:	fa1f f888 	uxth.w	r8, r8
 8013782:	141f      	asrs	r7, r3, #16
 8013784:	454d      	cmp	r5, r9
 8013786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801378a:	f84a 3b04 	str.w	r3, [sl], #4
 801378e:	d8e7      	bhi.n	8013760 <__mdiff+0x7c>
 8013790:	1b2b      	subs	r3, r5, r4
 8013792:	3b15      	subs	r3, #21
 8013794:	f023 0303 	bic.w	r3, r3, #3
 8013798:	3304      	adds	r3, #4
 801379a:	3415      	adds	r4, #21
 801379c:	42a5      	cmp	r5, r4
 801379e:	bf38      	it	cc
 80137a0:	2304      	movcc	r3, #4
 80137a2:	4419      	add	r1, r3
 80137a4:	4473      	add	r3, lr
 80137a6:	469e      	mov	lr, r3
 80137a8:	460d      	mov	r5, r1
 80137aa:	4565      	cmp	r5, ip
 80137ac:	d30e      	bcc.n	80137cc <__mdiff+0xe8>
 80137ae:	f10c 0203 	add.w	r2, ip, #3
 80137b2:	1a52      	subs	r2, r2, r1
 80137b4:	f022 0203 	bic.w	r2, r2, #3
 80137b8:	3903      	subs	r1, #3
 80137ba:	458c      	cmp	ip, r1
 80137bc:	bf38      	it	cc
 80137be:	2200      	movcc	r2, #0
 80137c0:	441a      	add	r2, r3
 80137c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80137c6:	b17b      	cbz	r3, 80137e8 <__mdiff+0x104>
 80137c8:	6106      	str	r6, [r0, #16]
 80137ca:	e7a5      	b.n	8013718 <__mdiff+0x34>
 80137cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80137d0:	fa17 f488 	uxtah	r4, r7, r8
 80137d4:	1422      	asrs	r2, r4, #16
 80137d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80137da:	b2a4      	uxth	r4, r4
 80137dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80137e0:	f84e 4b04 	str.w	r4, [lr], #4
 80137e4:	1417      	asrs	r7, r2, #16
 80137e6:	e7e0      	b.n	80137aa <__mdiff+0xc6>
 80137e8:	3e01      	subs	r6, #1
 80137ea:	e7ea      	b.n	80137c2 <__mdiff+0xde>
 80137ec:	08015bcb 	.word	0x08015bcb
 80137f0:	08015c3c 	.word	0x08015c3c

080137f4 <__d2b>:
 80137f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80137f8:	4689      	mov	r9, r1
 80137fa:	2101      	movs	r1, #1
 80137fc:	ec57 6b10 	vmov	r6, r7, d0
 8013800:	4690      	mov	r8, r2
 8013802:	f7ff fcd5 	bl	80131b0 <_Balloc>
 8013806:	4604      	mov	r4, r0
 8013808:	b930      	cbnz	r0, 8013818 <__d2b+0x24>
 801380a:	4602      	mov	r2, r0
 801380c:	4b25      	ldr	r3, [pc, #148]	; (80138a4 <__d2b+0xb0>)
 801380e:	4826      	ldr	r0, [pc, #152]	; (80138a8 <__d2b+0xb4>)
 8013810:	f240 310a 	movw	r1, #778	; 0x30a
 8013814:	f000 f96a 	bl	8013aec <__assert_func>
 8013818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801381c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013820:	bb35      	cbnz	r5, 8013870 <__d2b+0x7c>
 8013822:	2e00      	cmp	r6, #0
 8013824:	9301      	str	r3, [sp, #4]
 8013826:	d028      	beq.n	801387a <__d2b+0x86>
 8013828:	4668      	mov	r0, sp
 801382a:	9600      	str	r6, [sp, #0]
 801382c:	f7ff fd8c 	bl	8013348 <__lo0bits>
 8013830:	9900      	ldr	r1, [sp, #0]
 8013832:	b300      	cbz	r0, 8013876 <__d2b+0x82>
 8013834:	9a01      	ldr	r2, [sp, #4]
 8013836:	f1c0 0320 	rsb	r3, r0, #32
 801383a:	fa02 f303 	lsl.w	r3, r2, r3
 801383e:	430b      	orrs	r3, r1
 8013840:	40c2      	lsrs	r2, r0
 8013842:	6163      	str	r3, [r4, #20]
 8013844:	9201      	str	r2, [sp, #4]
 8013846:	9b01      	ldr	r3, [sp, #4]
 8013848:	61a3      	str	r3, [r4, #24]
 801384a:	2b00      	cmp	r3, #0
 801384c:	bf14      	ite	ne
 801384e:	2202      	movne	r2, #2
 8013850:	2201      	moveq	r2, #1
 8013852:	6122      	str	r2, [r4, #16]
 8013854:	b1d5      	cbz	r5, 801388c <__d2b+0x98>
 8013856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801385a:	4405      	add	r5, r0
 801385c:	f8c9 5000 	str.w	r5, [r9]
 8013860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013864:	f8c8 0000 	str.w	r0, [r8]
 8013868:	4620      	mov	r0, r4
 801386a:	b003      	add	sp, #12
 801386c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013874:	e7d5      	b.n	8013822 <__d2b+0x2e>
 8013876:	6161      	str	r1, [r4, #20]
 8013878:	e7e5      	b.n	8013846 <__d2b+0x52>
 801387a:	a801      	add	r0, sp, #4
 801387c:	f7ff fd64 	bl	8013348 <__lo0bits>
 8013880:	9b01      	ldr	r3, [sp, #4]
 8013882:	6163      	str	r3, [r4, #20]
 8013884:	2201      	movs	r2, #1
 8013886:	6122      	str	r2, [r4, #16]
 8013888:	3020      	adds	r0, #32
 801388a:	e7e3      	b.n	8013854 <__d2b+0x60>
 801388c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013894:	f8c9 0000 	str.w	r0, [r9]
 8013898:	6918      	ldr	r0, [r3, #16]
 801389a:	f7ff fd35 	bl	8013308 <__hi0bits>
 801389e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80138a2:	e7df      	b.n	8013864 <__d2b+0x70>
 80138a4:	08015bcb 	.word	0x08015bcb
 80138a8:	08015c3c 	.word	0x08015c3c

080138ac <_calloc_r>:
 80138ac:	b513      	push	{r0, r1, r4, lr}
 80138ae:	434a      	muls	r2, r1
 80138b0:	4611      	mov	r1, r2
 80138b2:	9201      	str	r2, [sp, #4]
 80138b4:	f000 f85a 	bl	801396c <_malloc_r>
 80138b8:	4604      	mov	r4, r0
 80138ba:	b118      	cbz	r0, 80138c4 <_calloc_r+0x18>
 80138bc:	9a01      	ldr	r2, [sp, #4]
 80138be:	2100      	movs	r1, #0
 80138c0:	f7fd feae 	bl	8011620 <memset>
 80138c4:	4620      	mov	r0, r4
 80138c6:	b002      	add	sp, #8
 80138c8:	bd10      	pop	{r4, pc}
	...

080138cc <_free_r>:
 80138cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138ce:	2900      	cmp	r1, #0
 80138d0:	d048      	beq.n	8013964 <_free_r+0x98>
 80138d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138d6:	9001      	str	r0, [sp, #4]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f1a1 0404 	sub.w	r4, r1, #4
 80138de:	bfb8      	it	lt
 80138e0:	18e4      	addlt	r4, r4, r3
 80138e2:	f000 f989 	bl	8013bf8 <__malloc_lock>
 80138e6:	4a20      	ldr	r2, [pc, #128]	; (8013968 <_free_r+0x9c>)
 80138e8:	9801      	ldr	r0, [sp, #4]
 80138ea:	6813      	ldr	r3, [r2, #0]
 80138ec:	4615      	mov	r5, r2
 80138ee:	b933      	cbnz	r3, 80138fe <_free_r+0x32>
 80138f0:	6063      	str	r3, [r4, #4]
 80138f2:	6014      	str	r4, [r2, #0]
 80138f4:	b003      	add	sp, #12
 80138f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138fa:	f000 b983 	b.w	8013c04 <__malloc_unlock>
 80138fe:	42a3      	cmp	r3, r4
 8013900:	d90b      	bls.n	801391a <_free_r+0x4e>
 8013902:	6821      	ldr	r1, [r4, #0]
 8013904:	1862      	adds	r2, r4, r1
 8013906:	4293      	cmp	r3, r2
 8013908:	bf04      	itt	eq
 801390a:	681a      	ldreq	r2, [r3, #0]
 801390c:	685b      	ldreq	r3, [r3, #4]
 801390e:	6063      	str	r3, [r4, #4]
 8013910:	bf04      	itt	eq
 8013912:	1852      	addeq	r2, r2, r1
 8013914:	6022      	streq	r2, [r4, #0]
 8013916:	602c      	str	r4, [r5, #0]
 8013918:	e7ec      	b.n	80138f4 <_free_r+0x28>
 801391a:	461a      	mov	r2, r3
 801391c:	685b      	ldr	r3, [r3, #4]
 801391e:	b10b      	cbz	r3, 8013924 <_free_r+0x58>
 8013920:	42a3      	cmp	r3, r4
 8013922:	d9fa      	bls.n	801391a <_free_r+0x4e>
 8013924:	6811      	ldr	r1, [r2, #0]
 8013926:	1855      	adds	r5, r2, r1
 8013928:	42a5      	cmp	r5, r4
 801392a:	d10b      	bne.n	8013944 <_free_r+0x78>
 801392c:	6824      	ldr	r4, [r4, #0]
 801392e:	4421      	add	r1, r4
 8013930:	1854      	adds	r4, r2, r1
 8013932:	42a3      	cmp	r3, r4
 8013934:	6011      	str	r1, [r2, #0]
 8013936:	d1dd      	bne.n	80138f4 <_free_r+0x28>
 8013938:	681c      	ldr	r4, [r3, #0]
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	6053      	str	r3, [r2, #4]
 801393e:	4421      	add	r1, r4
 8013940:	6011      	str	r1, [r2, #0]
 8013942:	e7d7      	b.n	80138f4 <_free_r+0x28>
 8013944:	d902      	bls.n	801394c <_free_r+0x80>
 8013946:	230c      	movs	r3, #12
 8013948:	6003      	str	r3, [r0, #0]
 801394a:	e7d3      	b.n	80138f4 <_free_r+0x28>
 801394c:	6825      	ldr	r5, [r4, #0]
 801394e:	1961      	adds	r1, r4, r5
 8013950:	428b      	cmp	r3, r1
 8013952:	bf04      	itt	eq
 8013954:	6819      	ldreq	r1, [r3, #0]
 8013956:	685b      	ldreq	r3, [r3, #4]
 8013958:	6063      	str	r3, [r4, #4]
 801395a:	bf04      	itt	eq
 801395c:	1949      	addeq	r1, r1, r5
 801395e:	6021      	streq	r1, [r4, #0]
 8013960:	6054      	str	r4, [r2, #4]
 8013962:	e7c7      	b.n	80138f4 <_free_r+0x28>
 8013964:	b003      	add	sp, #12
 8013966:	bd30      	pop	{r4, r5, pc}
 8013968:	24000bd8 	.word	0x24000bd8

0801396c <_malloc_r>:
 801396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801396e:	1ccd      	adds	r5, r1, #3
 8013970:	f025 0503 	bic.w	r5, r5, #3
 8013974:	3508      	adds	r5, #8
 8013976:	2d0c      	cmp	r5, #12
 8013978:	bf38      	it	cc
 801397a:	250c      	movcc	r5, #12
 801397c:	2d00      	cmp	r5, #0
 801397e:	4606      	mov	r6, r0
 8013980:	db01      	blt.n	8013986 <_malloc_r+0x1a>
 8013982:	42a9      	cmp	r1, r5
 8013984:	d903      	bls.n	801398e <_malloc_r+0x22>
 8013986:	230c      	movs	r3, #12
 8013988:	6033      	str	r3, [r6, #0]
 801398a:	2000      	movs	r0, #0
 801398c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801398e:	f000 f933 	bl	8013bf8 <__malloc_lock>
 8013992:	4921      	ldr	r1, [pc, #132]	; (8013a18 <_malloc_r+0xac>)
 8013994:	680a      	ldr	r2, [r1, #0]
 8013996:	4614      	mov	r4, r2
 8013998:	b99c      	cbnz	r4, 80139c2 <_malloc_r+0x56>
 801399a:	4f20      	ldr	r7, [pc, #128]	; (8013a1c <_malloc_r+0xb0>)
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	b923      	cbnz	r3, 80139aa <_malloc_r+0x3e>
 80139a0:	4621      	mov	r1, r4
 80139a2:	4630      	mov	r0, r6
 80139a4:	f000 f83c 	bl	8013a20 <_sbrk_r>
 80139a8:	6038      	str	r0, [r7, #0]
 80139aa:	4629      	mov	r1, r5
 80139ac:	4630      	mov	r0, r6
 80139ae:	f000 f837 	bl	8013a20 <_sbrk_r>
 80139b2:	1c43      	adds	r3, r0, #1
 80139b4:	d123      	bne.n	80139fe <_malloc_r+0x92>
 80139b6:	230c      	movs	r3, #12
 80139b8:	6033      	str	r3, [r6, #0]
 80139ba:	4630      	mov	r0, r6
 80139bc:	f000 f922 	bl	8013c04 <__malloc_unlock>
 80139c0:	e7e3      	b.n	801398a <_malloc_r+0x1e>
 80139c2:	6823      	ldr	r3, [r4, #0]
 80139c4:	1b5b      	subs	r3, r3, r5
 80139c6:	d417      	bmi.n	80139f8 <_malloc_r+0x8c>
 80139c8:	2b0b      	cmp	r3, #11
 80139ca:	d903      	bls.n	80139d4 <_malloc_r+0x68>
 80139cc:	6023      	str	r3, [r4, #0]
 80139ce:	441c      	add	r4, r3
 80139d0:	6025      	str	r5, [r4, #0]
 80139d2:	e004      	b.n	80139de <_malloc_r+0x72>
 80139d4:	6863      	ldr	r3, [r4, #4]
 80139d6:	42a2      	cmp	r2, r4
 80139d8:	bf0c      	ite	eq
 80139da:	600b      	streq	r3, [r1, #0]
 80139dc:	6053      	strne	r3, [r2, #4]
 80139de:	4630      	mov	r0, r6
 80139e0:	f000 f910 	bl	8013c04 <__malloc_unlock>
 80139e4:	f104 000b 	add.w	r0, r4, #11
 80139e8:	1d23      	adds	r3, r4, #4
 80139ea:	f020 0007 	bic.w	r0, r0, #7
 80139ee:	1ac2      	subs	r2, r0, r3
 80139f0:	d0cc      	beq.n	801398c <_malloc_r+0x20>
 80139f2:	1a1b      	subs	r3, r3, r0
 80139f4:	50a3      	str	r3, [r4, r2]
 80139f6:	e7c9      	b.n	801398c <_malloc_r+0x20>
 80139f8:	4622      	mov	r2, r4
 80139fa:	6864      	ldr	r4, [r4, #4]
 80139fc:	e7cc      	b.n	8013998 <_malloc_r+0x2c>
 80139fe:	1cc4      	adds	r4, r0, #3
 8013a00:	f024 0403 	bic.w	r4, r4, #3
 8013a04:	42a0      	cmp	r0, r4
 8013a06:	d0e3      	beq.n	80139d0 <_malloc_r+0x64>
 8013a08:	1a21      	subs	r1, r4, r0
 8013a0a:	4630      	mov	r0, r6
 8013a0c:	f000 f808 	bl	8013a20 <_sbrk_r>
 8013a10:	3001      	adds	r0, #1
 8013a12:	d1dd      	bne.n	80139d0 <_malloc_r+0x64>
 8013a14:	e7cf      	b.n	80139b6 <_malloc_r+0x4a>
 8013a16:	bf00      	nop
 8013a18:	24000bd8 	.word	0x24000bd8
 8013a1c:	24000bdc 	.word	0x24000bdc

08013a20 <_sbrk_r>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	4d06      	ldr	r5, [pc, #24]	; (8013a3c <_sbrk_r+0x1c>)
 8013a24:	2300      	movs	r3, #0
 8013a26:	4604      	mov	r4, r0
 8013a28:	4608      	mov	r0, r1
 8013a2a:	602b      	str	r3, [r5, #0]
 8013a2c:	f7f1 f9a4 	bl	8004d78 <_sbrk>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d102      	bne.n	8013a3a <_sbrk_r+0x1a>
 8013a34:	682b      	ldr	r3, [r5, #0]
 8013a36:	b103      	cbz	r3, 8013a3a <_sbrk_r+0x1a>
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	bd38      	pop	{r3, r4, r5, pc}
 8013a3c:	24001600 	.word	0x24001600

08013a40 <__sread>:
 8013a40:	b510      	push	{r4, lr}
 8013a42:	460c      	mov	r4, r1
 8013a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a48:	f000 fa3c 	bl	8013ec4 <_read_r>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	bfab      	itete	ge
 8013a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a52:	89a3      	ldrhlt	r3, [r4, #12]
 8013a54:	181b      	addge	r3, r3, r0
 8013a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a5a:	bfac      	ite	ge
 8013a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a5e:	81a3      	strhlt	r3, [r4, #12]
 8013a60:	bd10      	pop	{r4, pc}

08013a62 <__swrite>:
 8013a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a66:	461f      	mov	r7, r3
 8013a68:	898b      	ldrh	r3, [r1, #12]
 8013a6a:	05db      	lsls	r3, r3, #23
 8013a6c:	4605      	mov	r5, r0
 8013a6e:	460c      	mov	r4, r1
 8013a70:	4616      	mov	r6, r2
 8013a72:	d505      	bpl.n	8013a80 <__swrite+0x1e>
 8013a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a78:	2302      	movs	r3, #2
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	f000 f898 	bl	8013bb0 <_lseek_r>
 8013a80:	89a3      	ldrh	r3, [r4, #12]
 8013a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a8a:	81a3      	strh	r3, [r4, #12]
 8013a8c:	4632      	mov	r2, r6
 8013a8e:	463b      	mov	r3, r7
 8013a90:	4628      	mov	r0, r5
 8013a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a96:	f000 b817 	b.w	8013ac8 <_write_r>

08013a9a <__sseek>:
 8013a9a:	b510      	push	{r4, lr}
 8013a9c:	460c      	mov	r4, r1
 8013a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa2:	f000 f885 	bl	8013bb0 <_lseek_r>
 8013aa6:	1c43      	adds	r3, r0, #1
 8013aa8:	89a3      	ldrh	r3, [r4, #12]
 8013aaa:	bf15      	itete	ne
 8013aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8013aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ab6:	81a3      	strheq	r3, [r4, #12]
 8013ab8:	bf18      	it	ne
 8013aba:	81a3      	strhne	r3, [r4, #12]
 8013abc:	bd10      	pop	{r4, pc}

08013abe <__sclose>:
 8013abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac2:	f000 b831 	b.w	8013b28 <_close_r>
	...

08013ac8 <_write_r>:
 8013ac8:	b538      	push	{r3, r4, r5, lr}
 8013aca:	4d07      	ldr	r5, [pc, #28]	; (8013ae8 <_write_r+0x20>)
 8013acc:	4604      	mov	r4, r0
 8013ace:	4608      	mov	r0, r1
 8013ad0:	4611      	mov	r1, r2
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	602a      	str	r2, [r5, #0]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	f7f1 f8fd 	bl	8004cd6 <_write>
 8013adc:	1c43      	adds	r3, r0, #1
 8013ade:	d102      	bne.n	8013ae6 <_write_r+0x1e>
 8013ae0:	682b      	ldr	r3, [r5, #0]
 8013ae2:	b103      	cbz	r3, 8013ae6 <_write_r+0x1e>
 8013ae4:	6023      	str	r3, [r4, #0]
 8013ae6:	bd38      	pop	{r3, r4, r5, pc}
 8013ae8:	24001600 	.word	0x24001600

08013aec <__assert_func>:
 8013aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013aee:	4614      	mov	r4, r2
 8013af0:	461a      	mov	r2, r3
 8013af2:	4b09      	ldr	r3, [pc, #36]	; (8013b18 <__assert_func+0x2c>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	4605      	mov	r5, r0
 8013af8:	68d8      	ldr	r0, [r3, #12]
 8013afa:	b14c      	cbz	r4, 8013b10 <__assert_func+0x24>
 8013afc:	4b07      	ldr	r3, [pc, #28]	; (8013b1c <__assert_func+0x30>)
 8013afe:	9100      	str	r1, [sp, #0]
 8013b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b04:	4906      	ldr	r1, [pc, #24]	; (8013b20 <__assert_func+0x34>)
 8013b06:	462b      	mov	r3, r5
 8013b08:	f000 f81e 	bl	8013b48 <fiprintf>
 8013b0c:	f000 f9f9 	bl	8013f02 <abort>
 8013b10:	4b04      	ldr	r3, [pc, #16]	; (8013b24 <__assert_func+0x38>)
 8013b12:	461c      	mov	r4, r3
 8013b14:	e7f3      	b.n	8013afe <__assert_func+0x12>
 8013b16:	bf00      	nop
 8013b18:	24000238 	.word	0x24000238
 8013b1c:	08015d9c 	.word	0x08015d9c
 8013b20:	08015da9 	.word	0x08015da9
 8013b24:	08015dd7 	.word	0x08015dd7

08013b28 <_close_r>:
 8013b28:	b538      	push	{r3, r4, r5, lr}
 8013b2a:	4d06      	ldr	r5, [pc, #24]	; (8013b44 <_close_r+0x1c>)
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	4604      	mov	r4, r0
 8013b30:	4608      	mov	r0, r1
 8013b32:	602b      	str	r3, [r5, #0]
 8013b34:	f7f1 f8eb 	bl	8004d0e <_close>
 8013b38:	1c43      	adds	r3, r0, #1
 8013b3a:	d102      	bne.n	8013b42 <_close_r+0x1a>
 8013b3c:	682b      	ldr	r3, [r5, #0]
 8013b3e:	b103      	cbz	r3, 8013b42 <_close_r+0x1a>
 8013b40:	6023      	str	r3, [r4, #0]
 8013b42:	bd38      	pop	{r3, r4, r5, pc}
 8013b44:	24001600 	.word	0x24001600

08013b48 <fiprintf>:
 8013b48:	b40e      	push	{r1, r2, r3}
 8013b4a:	b503      	push	{r0, r1, lr}
 8013b4c:	4601      	mov	r1, r0
 8013b4e:	ab03      	add	r3, sp, #12
 8013b50:	4805      	ldr	r0, [pc, #20]	; (8013b68 <fiprintf+0x20>)
 8013b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b56:	6800      	ldr	r0, [r0, #0]
 8013b58:	9301      	str	r3, [sp, #4]
 8013b5a:	f000 f883 	bl	8013c64 <_vfiprintf_r>
 8013b5e:	b002      	add	sp, #8
 8013b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b64:	b003      	add	sp, #12
 8013b66:	4770      	bx	lr
 8013b68:	24000238 	.word	0x24000238

08013b6c <_fstat_r>:
 8013b6c:	b538      	push	{r3, r4, r5, lr}
 8013b6e:	4d07      	ldr	r5, [pc, #28]	; (8013b8c <_fstat_r+0x20>)
 8013b70:	2300      	movs	r3, #0
 8013b72:	4604      	mov	r4, r0
 8013b74:	4608      	mov	r0, r1
 8013b76:	4611      	mov	r1, r2
 8013b78:	602b      	str	r3, [r5, #0]
 8013b7a:	f7f1 f8d4 	bl	8004d26 <_fstat>
 8013b7e:	1c43      	adds	r3, r0, #1
 8013b80:	d102      	bne.n	8013b88 <_fstat_r+0x1c>
 8013b82:	682b      	ldr	r3, [r5, #0]
 8013b84:	b103      	cbz	r3, 8013b88 <_fstat_r+0x1c>
 8013b86:	6023      	str	r3, [r4, #0]
 8013b88:	bd38      	pop	{r3, r4, r5, pc}
 8013b8a:	bf00      	nop
 8013b8c:	24001600 	.word	0x24001600

08013b90 <_isatty_r>:
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	4d06      	ldr	r5, [pc, #24]	; (8013bac <_isatty_r+0x1c>)
 8013b94:	2300      	movs	r3, #0
 8013b96:	4604      	mov	r4, r0
 8013b98:	4608      	mov	r0, r1
 8013b9a:	602b      	str	r3, [r5, #0]
 8013b9c:	f7f1 f8d3 	bl	8004d46 <_isatty>
 8013ba0:	1c43      	adds	r3, r0, #1
 8013ba2:	d102      	bne.n	8013baa <_isatty_r+0x1a>
 8013ba4:	682b      	ldr	r3, [r5, #0]
 8013ba6:	b103      	cbz	r3, 8013baa <_isatty_r+0x1a>
 8013ba8:	6023      	str	r3, [r4, #0]
 8013baa:	bd38      	pop	{r3, r4, r5, pc}
 8013bac:	24001600 	.word	0x24001600

08013bb0 <_lseek_r>:
 8013bb0:	b538      	push	{r3, r4, r5, lr}
 8013bb2:	4d07      	ldr	r5, [pc, #28]	; (8013bd0 <_lseek_r+0x20>)
 8013bb4:	4604      	mov	r4, r0
 8013bb6:	4608      	mov	r0, r1
 8013bb8:	4611      	mov	r1, r2
 8013bba:	2200      	movs	r2, #0
 8013bbc:	602a      	str	r2, [r5, #0]
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	f7f1 f8cc 	bl	8004d5c <_lseek>
 8013bc4:	1c43      	adds	r3, r0, #1
 8013bc6:	d102      	bne.n	8013bce <_lseek_r+0x1e>
 8013bc8:	682b      	ldr	r3, [r5, #0]
 8013bca:	b103      	cbz	r3, 8013bce <_lseek_r+0x1e>
 8013bcc:	6023      	str	r3, [r4, #0]
 8013bce:	bd38      	pop	{r3, r4, r5, pc}
 8013bd0:	24001600 	.word	0x24001600

08013bd4 <__ascii_mbtowc>:
 8013bd4:	b082      	sub	sp, #8
 8013bd6:	b901      	cbnz	r1, 8013bda <__ascii_mbtowc+0x6>
 8013bd8:	a901      	add	r1, sp, #4
 8013bda:	b142      	cbz	r2, 8013bee <__ascii_mbtowc+0x1a>
 8013bdc:	b14b      	cbz	r3, 8013bf2 <__ascii_mbtowc+0x1e>
 8013bde:	7813      	ldrb	r3, [r2, #0]
 8013be0:	600b      	str	r3, [r1, #0]
 8013be2:	7812      	ldrb	r2, [r2, #0]
 8013be4:	1e10      	subs	r0, r2, #0
 8013be6:	bf18      	it	ne
 8013be8:	2001      	movne	r0, #1
 8013bea:	b002      	add	sp, #8
 8013bec:	4770      	bx	lr
 8013bee:	4610      	mov	r0, r2
 8013bf0:	e7fb      	b.n	8013bea <__ascii_mbtowc+0x16>
 8013bf2:	f06f 0001 	mvn.w	r0, #1
 8013bf6:	e7f8      	b.n	8013bea <__ascii_mbtowc+0x16>

08013bf8 <__malloc_lock>:
 8013bf8:	4801      	ldr	r0, [pc, #4]	; (8013c00 <__malloc_lock+0x8>)
 8013bfa:	f7ff ba5c 	b.w	80130b6 <__retarget_lock_acquire_recursive>
 8013bfe:	bf00      	nop
 8013c00:	240015f8 	.word	0x240015f8

08013c04 <__malloc_unlock>:
 8013c04:	4801      	ldr	r0, [pc, #4]	; (8013c0c <__malloc_unlock+0x8>)
 8013c06:	f7ff ba57 	b.w	80130b8 <__retarget_lock_release_recursive>
 8013c0a:	bf00      	nop
 8013c0c:	240015f8 	.word	0x240015f8

08013c10 <__sfputc_r>:
 8013c10:	6893      	ldr	r3, [r2, #8]
 8013c12:	3b01      	subs	r3, #1
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	b410      	push	{r4}
 8013c18:	6093      	str	r3, [r2, #8]
 8013c1a:	da08      	bge.n	8013c2e <__sfputc_r+0x1e>
 8013c1c:	6994      	ldr	r4, [r2, #24]
 8013c1e:	42a3      	cmp	r3, r4
 8013c20:	db01      	blt.n	8013c26 <__sfputc_r+0x16>
 8013c22:	290a      	cmp	r1, #10
 8013c24:	d103      	bne.n	8013c2e <__sfputc_r+0x1e>
 8013c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c2a:	f7fe b9b9 	b.w	8011fa0 <__swbuf_r>
 8013c2e:	6813      	ldr	r3, [r2, #0]
 8013c30:	1c58      	adds	r0, r3, #1
 8013c32:	6010      	str	r0, [r2, #0]
 8013c34:	7019      	strb	r1, [r3, #0]
 8013c36:	4608      	mov	r0, r1
 8013c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c3c:	4770      	bx	lr

08013c3e <__sfputs_r>:
 8013c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c40:	4606      	mov	r6, r0
 8013c42:	460f      	mov	r7, r1
 8013c44:	4614      	mov	r4, r2
 8013c46:	18d5      	adds	r5, r2, r3
 8013c48:	42ac      	cmp	r4, r5
 8013c4a:	d101      	bne.n	8013c50 <__sfputs_r+0x12>
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	e007      	b.n	8013c60 <__sfputs_r+0x22>
 8013c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c54:	463a      	mov	r2, r7
 8013c56:	4630      	mov	r0, r6
 8013c58:	f7ff ffda 	bl	8013c10 <__sfputc_r>
 8013c5c:	1c43      	adds	r3, r0, #1
 8013c5e:	d1f3      	bne.n	8013c48 <__sfputs_r+0xa>
 8013c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c64 <_vfiprintf_r>:
 8013c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c68:	460d      	mov	r5, r1
 8013c6a:	b09d      	sub	sp, #116	; 0x74
 8013c6c:	4614      	mov	r4, r2
 8013c6e:	4698      	mov	r8, r3
 8013c70:	4606      	mov	r6, r0
 8013c72:	b118      	cbz	r0, 8013c7c <_vfiprintf_r+0x18>
 8013c74:	6983      	ldr	r3, [r0, #24]
 8013c76:	b90b      	cbnz	r3, 8013c7c <_vfiprintf_r+0x18>
 8013c78:	f7ff f97a 	bl	8012f70 <__sinit>
 8013c7c:	4b89      	ldr	r3, [pc, #548]	; (8013ea4 <_vfiprintf_r+0x240>)
 8013c7e:	429d      	cmp	r5, r3
 8013c80:	d11b      	bne.n	8013cba <_vfiprintf_r+0x56>
 8013c82:	6875      	ldr	r5, [r6, #4]
 8013c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c86:	07d9      	lsls	r1, r3, #31
 8013c88:	d405      	bmi.n	8013c96 <_vfiprintf_r+0x32>
 8013c8a:	89ab      	ldrh	r3, [r5, #12]
 8013c8c:	059a      	lsls	r2, r3, #22
 8013c8e:	d402      	bmi.n	8013c96 <_vfiprintf_r+0x32>
 8013c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c92:	f7ff fa10 	bl	80130b6 <__retarget_lock_acquire_recursive>
 8013c96:	89ab      	ldrh	r3, [r5, #12]
 8013c98:	071b      	lsls	r3, r3, #28
 8013c9a:	d501      	bpl.n	8013ca0 <_vfiprintf_r+0x3c>
 8013c9c:	692b      	ldr	r3, [r5, #16]
 8013c9e:	b9eb      	cbnz	r3, 8013cdc <_vfiprintf_r+0x78>
 8013ca0:	4629      	mov	r1, r5
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f7fe f9ce 	bl	8012044 <__swsetup_r>
 8013ca8:	b1c0      	cbz	r0, 8013cdc <_vfiprintf_r+0x78>
 8013caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013cac:	07dc      	lsls	r4, r3, #31
 8013cae:	d50e      	bpl.n	8013cce <_vfiprintf_r+0x6a>
 8013cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cb4:	b01d      	add	sp, #116	; 0x74
 8013cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cba:	4b7b      	ldr	r3, [pc, #492]	; (8013ea8 <_vfiprintf_r+0x244>)
 8013cbc:	429d      	cmp	r5, r3
 8013cbe:	d101      	bne.n	8013cc4 <_vfiprintf_r+0x60>
 8013cc0:	68b5      	ldr	r5, [r6, #8]
 8013cc2:	e7df      	b.n	8013c84 <_vfiprintf_r+0x20>
 8013cc4:	4b79      	ldr	r3, [pc, #484]	; (8013eac <_vfiprintf_r+0x248>)
 8013cc6:	429d      	cmp	r5, r3
 8013cc8:	bf08      	it	eq
 8013cca:	68f5      	ldreq	r5, [r6, #12]
 8013ccc:	e7da      	b.n	8013c84 <_vfiprintf_r+0x20>
 8013cce:	89ab      	ldrh	r3, [r5, #12]
 8013cd0:	0598      	lsls	r0, r3, #22
 8013cd2:	d4ed      	bmi.n	8013cb0 <_vfiprintf_r+0x4c>
 8013cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cd6:	f7ff f9ef 	bl	80130b8 <__retarget_lock_release_recursive>
 8013cda:	e7e9      	b.n	8013cb0 <_vfiprintf_r+0x4c>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	9309      	str	r3, [sp, #36]	; 0x24
 8013ce0:	2320      	movs	r3, #32
 8013ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013cea:	2330      	movs	r3, #48	; 0x30
 8013cec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013eb0 <_vfiprintf_r+0x24c>
 8013cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013cf4:	f04f 0901 	mov.w	r9, #1
 8013cf8:	4623      	mov	r3, r4
 8013cfa:	469a      	mov	sl, r3
 8013cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d00:	b10a      	cbz	r2, 8013d06 <_vfiprintf_r+0xa2>
 8013d02:	2a25      	cmp	r2, #37	; 0x25
 8013d04:	d1f9      	bne.n	8013cfa <_vfiprintf_r+0x96>
 8013d06:	ebba 0b04 	subs.w	fp, sl, r4
 8013d0a:	d00b      	beq.n	8013d24 <_vfiprintf_r+0xc0>
 8013d0c:	465b      	mov	r3, fp
 8013d0e:	4622      	mov	r2, r4
 8013d10:	4629      	mov	r1, r5
 8013d12:	4630      	mov	r0, r6
 8013d14:	f7ff ff93 	bl	8013c3e <__sfputs_r>
 8013d18:	3001      	adds	r0, #1
 8013d1a:	f000 80aa 	beq.w	8013e72 <_vfiprintf_r+0x20e>
 8013d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d20:	445a      	add	r2, fp
 8013d22:	9209      	str	r2, [sp, #36]	; 0x24
 8013d24:	f89a 3000 	ldrb.w	r3, [sl]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f000 80a2 	beq.w	8013e72 <_vfiprintf_r+0x20e>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	f04f 32ff 	mov.w	r2, #4294967295
 8013d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d38:	f10a 0a01 	add.w	sl, sl, #1
 8013d3c:	9304      	str	r3, [sp, #16]
 8013d3e:	9307      	str	r3, [sp, #28]
 8013d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d44:	931a      	str	r3, [sp, #104]	; 0x68
 8013d46:	4654      	mov	r4, sl
 8013d48:	2205      	movs	r2, #5
 8013d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d4e:	4858      	ldr	r0, [pc, #352]	; (8013eb0 <_vfiprintf_r+0x24c>)
 8013d50:	f7ec face 	bl	80002f0 <memchr>
 8013d54:	9a04      	ldr	r2, [sp, #16]
 8013d56:	b9d8      	cbnz	r0, 8013d90 <_vfiprintf_r+0x12c>
 8013d58:	06d1      	lsls	r1, r2, #27
 8013d5a:	bf44      	itt	mi
 8013d5c:	2320      	movmi	r3, #32
 8013d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d62:	0713      	lsls	r3, r2, #28
 8013d64:	bf44      	itt	mi
 8013d66:	232b      	movmi	r3, #43	; 0x2b
 8013d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013d70:	2b2a      	cmp	r3, #42	; 0x2a
 8013d72:	d015      	beq.n	8013da0 <_vfiprintf_r+0x13c>
 8013d74:	9a07      	ldr	r2, [sp, #28]
 8013d76:	4654      	mov	r4, sl
 8013d78:	2000      	movs	r0, #0
 8013d7a:	f04f 0c0a 	mov.w	ip, #10
 8013d7e:	4621      	mov	r1, r4
 8013d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d84:	3b30      	subs	r3, #48	; 0x30
 8013d86:	2b09      	cmp	r3, #9
 8013d88:	d94e      	bls.n	8013e28 <_vfiprintf_r+0x1c4>
 8013d8a:	b1b0      	cbz	r0, 8013dba <_vfiprintf_r+0x156>
 8013d8c:	9207      	str	r2, [sp, #28]
 8013d8e:	e014      	b.n	8013dba <_vfiprintf_r+0x156>
 8013d90:	eba0 0308 	sub.w	r3, r0, r8
 8013d94:	fa09 f303 	lsl.w	r3, r9, r3
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	9304      	str	r3, [sp, #16]
 8013d9c:	46a2      	mov	sl, r4
 8013d9e:	e7d2      	b.n	8013d46 <_vfiprintf_r+0xe2>
 8013da0:	9b03      	ldr	r3, [sp, #12]
 8013da2:	1d19      	adds	r1, r3, #4
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	9103      	str	r1, [sp, #12]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	bfbb      	ittet	lt
 8013dac:	425b      	neglt	r3, r3
 8013dae:	f042 0202 	orrlt.w	r2, r2, #2
 8013db2:	9307      	strge	r3, [sp, #28]
 8013db4:	9307      	strlt	r3, [sp, #28]
 8013db6:	bfb8      	it	lt
 8013db8:	9204      	strlt	r2, [sp, #16]
 8013dba:	7823      	ldrb	r3, [r4, #0]
 8013dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8013dbe:	d10c      	bne.n	8013dda <_vfiprintf_r+0x176>
 8013dc0:	7863      	ldrb	r3, [r4, #1]
 8013dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8013dc4:	d135      	bne.n	8013e32 <_vfiprintf_r+0x1ce>
 8013dc6:	9b03      	ldr	r3, [sp, #12]
 8013dc8:	1d1a      	adds	r2, r3, #4
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	9203      	str	r2, [sp, #12]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	bfb8      	it	lt
 8013dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013dd6:	3402      	adds	r4, #2
 8013dd8:	9305      	str	r3, [sp, #20]
 8013dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ec0 <_vfiprintf_r+0x25c>
 8013dde:	7821      	ldrb	r1, [r4, #0]
 8013de0:	2203      	movs	r2, #3
 8013de2:	4650      	mov	r0, sl
 8013de4:	f7ec fa84 	bl	80002f0 <memchr>
 8013de8:	b140      	cbz	r0, 8013dfc <_vfiprintf_r+0x198>
 8013dea:	2340      	movs	r3, #64	; 0x40
 8013dec:	eba0 000a 	sub.w	r0, r0, sl
 8013df0:	fa03 f000 	lsl.w	r0, r3, r0
 8013df4:	9b04      	ldr	r3, [sp, #16]
 8013df6:	4303      	orrs	r3, r0
 8013df8:	3401      	adds	r4, #1
 8013dfa:	9304      	str	r3, [sp, #16]
 8013dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e00:	482c      	ldr	r0, [pc, #176]	; (8013eb4 <_vfiprintf_r+0x250>)
 8013e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e06:	2206      	movs	r2, #6
 8013e08:	f7ec fa72 	bl	80002f0 <memchr>
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d03f      	beq.n	8013e90 <_vfiprintf_r+0x22c>
 8013e10:	4b29      	ldr	r3, [pc, #164]	; (8013eb8 <_vfiprintf_r+0x254>)
 8013e12:	bb1b      	cbnz	r3, 8013e5c <_vfiprintf_r+0x1f8>
 8013e14:	9b03      	ldr	r3, [sp, #12]
 8013e16:	3307      	adds	r3, #7
 8013e18:	f023 0307 	bic.w	r3, r3, #7
 8013e1c:	3308      	adds	r3, #8
 8013e1e:	9303      	str	r3, [sp, #12]
 8013e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e22:	443b      	add	r3, r7
 8013e24:	9309      	str	r3, [sp, #36]	; 0x24
 8013e26:	e767      	b.n	8013cf8 <_vfiprintf_r+0x94>
 8013e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e2c:	460c      	mov	r4, r1
 8013e2e:	2001      	movs	r0, #1
 8013e30:	e7a5      	b.n	8013d7e <_vfiprintf_r+0x11a>
 8013e32:	2300      	movs	r3, #0
 8013e34:	3401      	adds	r4, #1
 8013e36:	9305      	str	r3, [sp, #20]
 8013e38:	4619      	mov	r1, r3
 8013e3a:	f04f 0c0a 	mov.w	ip, #10
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e44:	3a30      	subs	r2, #48	; 0x30
 8013e46:	2a09      	cmp	r2, #9
 8013e48:	d903      	bls.n	8013e52 <_vfiprintf_r+0x1ee>
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d0c5      	beq.n	8013dda <_vfiprintf_r+0x176>
 8013e4e:	9105      	str	r1, [sp, #20]
 8013e50:	e7c3      	b.n	8013dda <_vfiprintf_r+0x176>
 8013e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e56:	4604      	mov	r4, r0
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e7f0      	b.n	8013e3e <_vfiprintf_r+0x1da>
 8013e5c:	ab03      	add	r3, sp, #12
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	462a      	mov	r2, r5
 8013e62:	4b16      	ldr	r3, [pc, #88]	; (8013ebc <_vfiprintf_r+0x258>)
 8013e64:	a904      	add	r1, sp, #16
 8013e66:	4630      	mov	r0, r6
 8013e68:	f7fd fc72 	bl	8011750 <_printf_float>
 8013e6c:	4607      	mov	r7, r0
 8013e6e:	1c78      	adds	r0, r7, #1
 8013e70:	d1d6      	bne.n	8013e20 <_vfiprintf_r+0x1bc>
 8013e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e74:	07d9      	lsls	r1, r3, #31
 8013e76:	d405      	bmi.n	8013e84 <_vfiprintf_r+0x220>
 8013e78:	89ab      	ldrh	r3, [r5, #12]
 8013e7a:	059a      	lsls	r2, r3, #22
 8013e7c:	d402      	bmi.n	8013e84 <_vfiprintf_r+0x220>
 8013e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e80:	f7ff f91a 	bl	80130b8 <__retarget_lock_release_recursive>
 8013e84:	89ab      	ldrh	r3, [r5, #12]
 8013e86:	065b      	lsls	r3, r3, #25
 8013e88:	f53f af12 	bmi.w	8013cb0 <_vfiprintf_r+0x4c>
 8013e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e8e:	e711      	b.n	8013cb4 <_vfiprintf_r+0x50>
 8013e90:	ab03      	add	r3, sp, #12
 8013e92:	9300      	str	r3, [sp, #0]
 8013e94:	462a      	mov	r2, r5
 8013e96:	4b09      	ldr	r3, [pc, #36]	; (8013ebc <_vfiprintf_r+0x258>)
 8013e98:	a904      	add	r1, sp, #16
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	f7fd fee4 	bl	8011c68 <_printf_i>
 8013ea0:	e7e4      	b.n	8013e6c <_vfiprintf_r+0x208>
 8013ea2:	bf00      	nop
 8013ea4:	08015bfc 	.word	0x08015bfc
 8013ea8:	08015c1c 	.word	0x08015c1c
 8013eac:	08015bdc 	.word	0x08015bdc
 8013eb0:	08015de2 	.word	0x08015de2
 8013eb4:	08015dec 	.word	0x08015dec
 8013eb8:	08011751 	.word	0x08011751
 8013ebc:	08013c3f 	.word	0x08013c3f
 8013ec0:	08015de8 	.word	0x08015de8

08013ec4 <_read_r>:
 8013ec4:	b538      	push	{r3, r4, r5, lr}
 8013ec6:	4d07      	ldr	r5, [pc, #28]	; (8013ee4 <_read_r+0x20>)
 8013ec8:	4604      	mov	r4, r0
 8013eca:	4608      	mov	r0, r1
 8013ecc:	4611      	mov	r1, r2
 8013ece:	2200      	movs	r2, #0
 8013ed0:	602a      	str	r2, [r5, #0]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	f7f0 fee2 	bl	8004c9c <_read>
 8013ed8:	1c43      	adds	r3, r0, #1
 8013eda:	d102      	bne.n	8013ee2 <_read_r+0x1e>
 8013edc:	682b      	ldr	r3, [r5, #0]
 8013ede:	b103      	cbz	r3, 8013ee2 <_read_r+0x1e>
 8013ee0:	6023      	str	r3, [r4, #0]
 8013ee2:	bd38      	pop	{r3, r4, r5, pc}
 8013ee4:	24001600 	.word	0x24001600

08013ee8 <__ascii_wctomb>:
 8013ee8:	b149      	cbz	r1, 8013efe <__ascii_wctomb+0x16>
 8013eea:	2aff      	cmp	r2, #255	; 0xff
 8013eec:	bf85      	ittet	hi
 8013eee:	238a      	movhi	r3, #138	; 0x8a
 8013ef0:	6003      	strhi	r3, [r0, #0]
 8013ef2:	700a      	strbls	r2, [r1, #0]
 8013ef4:	f04f 30ff 	movhi.w	r0, #4294967295
 8013ef8:	bf98      	it	ls
 8013efa:	2001      	movls	r0, #1
 8013efc:	4770      	bx	lr
 8013efe:	4608      	mov	r0, r1
 8013f00:	4770      	bx	lr

08013f02 <abort>:
 8013f02:	b508      	push	{r3, lr}
 8013f04:	2006      	movs	r0, #6
 8013f06:	f000 f82b 	bl	8013f60 <raise>
 8013f0a:	2001      	movs	r0, #1
 8013f0c:	f7f0 febc 	bl	8004c88 <_exit>

08013f10 <_raise_r>:
 8013f10:	291f      	cmp	r1, #31
 8013f12:	b538      	push	{r3, r4, r5, lr}
 8013f14:	4604      	mov	r4, r0
 8013f16:	460d      	mov	r5, r1
 8013f18:	d904      	bls.n	8013f24 <_raise_r+0x14>
 8013f1a:	2316      	movs	r3, #22
 8013f1c:	6003      	str	r3, [r0, #0]
 8013f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f22:	bd38      	pop	{r3, r4, r5, pc}
 8013f24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013f26:	b112      	cbz	r2, 8013f2e <_raise_r+0x1e>
 8013f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f2c:	b94b      	cbnz	r3, 8013f42 <_raise_r+0x32>
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f000 f830 	bl	8013f94 <_getpid_r>
 8013f34:	462a      	mov	r2, r5
 8013f36:	4601      	mov	r1, r0
 8013f38:	4620      	mov	r0, r4
 8013f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f3e:	f000 b817 	b.w	8013f70 <_kill_r>
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d00a      	beq.n	8013f5c <_raise_r+0x4c>
 8013f46:	1c59      	adds	r1, r3, #1
 8013f48:	d103      	bne.n	8013f52 <_raise_r+0x42>
 8013f4a:	2316      	movs	r3, #22
 8013f4c:	6003      	str	r3, [r0, #0]
 8013f4e:	2001      	movs	r0, #1
 8013f50:	e7e7      	b.n	8013f22 <_raise_r+0x12>
 8013f52:	2400      	movs	r4, #0
 8013f54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013f58:	4628      	mov	r0, r5
 8013f5a:	4798      	blx	r3
 8013f5c:	2000      	movs	r0, #0
 8013f5e:	e7e0      	b.n	8013f22 <_raise_r+0x12>

08013f60 <raise>:
 8013f60:	4b02      	ldr	r3, [pc, #8]	; (8013f6c <raise+0xc>)
 8013f62:	4601      	mov	r1, r0
 8013f64:	6818      	ldr	r0, [r3, #0]
 8013f66:	f7ff bfd3 	b.w	8013f10 <_raise_r>
 8013f6a:	bf00      	nop
 8013f6c:	24000238 	.word	0x24000238

08013f70 <_kill_r>:
 8013f70:	b538      	push	{r3, r4, r5, lr}
 8013f72:	4d07      	ldr	r5, [pc, #28]	; (8013f90 <_kill_r+0x20>)
 8013f74:	2300      	movs	r3, #0
 8013f76:	4604      	mov	r4, r0
 8013f78:	4608      	mov	r0, r1
 8013f7a:	4611      	mov	r1, r2
 8013f7c:	602b      	str	r3, [r5, #0]
 8013f7e:	f7f0 fe73 	bl	8004c68 <_kill>
 8013f82:	1c43      	adds	r3, r0, #1
 8013f84:	d102      	bne.n	8013f8c <_kill_r+0x1c>
 8013f86:	682b      	ldr	r3, [r5, #0]
 8013f88:	b103      	cbz	r3, 8013f8c <_kill_r+0x1c>
 8013f8a:	6023      	str	r3, [r4, #0]
 8013f8c:	bd38      	pop	{r3, r4, r5, pc}
 8013f8e:	bf00      	nop
 8013f90:	24001600 	.word	0x24001600

08013f94 <_getpid_r>:
 8013f94:	f7f0 be60 	b.w	8004c58 <_getpid>

08013f98 <_init>:
 8013f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f9a:	bf00      	nop
 8013f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f9e:	bc08      	pop	{r3}
 8013fa0:	469e      	mov	lr, r3
 8013fa2:	4770      	bx	lr

08013fa4 <_fini>:
 8013fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa6:	bf00      	nop
 8013fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013faa:	bc08      	pop	{r3}
 8013fac:	469e      	mov	lr, r3
 8013fae:	4770      	bx	lr
