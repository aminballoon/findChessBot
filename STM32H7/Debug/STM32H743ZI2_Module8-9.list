
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800b544  0800b544  0001b544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800b5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000086c  20000074  0800b670  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008e0  0800b670  000208e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023968  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003957  00000000  00000000  00043a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001418  00000000  00000000  00047368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001300  00000000  00000000  00048780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000439b  00000000  00000000  00049a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019aaa  00000000  00000000  0004de1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167b4f  00000000  00000000  000678c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf414  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ba8  00000000  00000000  001cf468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000074 	.word	0x20000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b52c 	.word	0x0800b52c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	0800b52c 	.word	0x0800b52c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 fe3e 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f848 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fe68 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fd16 	bl	8001010 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 fcc8 	bl	8000f78 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005e8:	f000 f9e2 	bl	80009b0 <MX_TIM2_Init>
  MX_UART4_Init();
 80005ec:	f000 fc74 	bl	8000ed8 <MX_UART4_Init>
  MX_TIM4_Init();
 80005f0:	f000 face 	bl	8000b90 <MX_TIM4_Init>
  MX_SPI3_Init();
 80005f4:	f000 f8d8 	bl	80007a8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80005f8:	f000 f92c 	bl	8000854 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005fc:	f000 fa50 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000600:	f000 fb3e 	bl	8000c80 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000604:	f000 fbc4 	bl	8000d90 <MX_TIM15_Init>
  MX_TIM12_Init();
 8000608:	f000 fb88 	bl	8000d1c <MX_TIM12_Init>
  MX_CRC_Init();
 800060c:	f000 f8aa 	bl	8000764 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2101      	movs	r1, #1
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0x8c>)
 8000616:	f004 fc89 	bl	8004f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2102      	movs	r1, #2
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <main+0x90>)
 8000620:	f004 fc84 	bl	8004f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <main+0x8c>)
 800062c:	f004 fc7e 	bl	8004f2c <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <main+0x94>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <main+0x94>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f042 0220 	orr.w	r2, r2, #32
 800063e:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <main+0x94>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <main+0x94>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800064e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000650:	2204      	movs	r2, #4
 8000652:	4905      	ldr	r1, [pc, #20]	; (8000668 <main+0x98>)
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x94>)
 8000656:	f008 fb05 	bl	8008c64 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x8a>
 800065c:	58020400 	.word	0x58020400
 8000660:	58021000 	.word	0x58021000
 8000664:	200002c8 	.word	0x200002c8
 8000668:	200008c8 	.word	0x200008c8

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	; 0x70
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	224c      	movs	r2, #76	; 0x4c
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f00a fa88 	bl	800ab90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2220      	movs	r2, #32
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00a fa82 	bl	800ab90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800068c:	2002      	movs	r0, #2
 800068e:	f004 fc81 	bl	8004f94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <SystemClock_Config+0xf0>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a30      	ldr	r2, [pc, #192]	; (800075c <SystemClock_Config+0xf0>)
 800069c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <SystemClock_Config+0xf0>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xf4>)
 80006ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SystemClock_Config+0xf4>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xf4>)
 80006ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c4:	bf00      	nop
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <SystemClock_Config+0xf0>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d2:	d1f8      	bne.n	80006c6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d8:	2301      	movs	r3, #1
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2340      	movs	r3, #64	; 0x40
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006ec:	233c      	movs	r3, #60	; 0x3c
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80006f4:	2306      	movs	r3, #6
 80006f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006fc:	230c      	movs	r3, #12
 80006fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000700:	2300      	movs	r3, #0
 8000702:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fc7b 	bl	8005008 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000718:	f000 ffa9 	bl	800166e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	233f      	movs	r3, #63	; 0x3f
 800071e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000728:	2308      	movs	r3, #8
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f005 f870 	bl	8005828 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800074e:	f000 ff8e 	bl	800166e <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3770      	adds	r7, #112	; 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	58024800 	.word	0x58024800
 8000760:	58000400 	.word	0x58000400

08000764 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f001 ff0f 	bl	80025b0 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 ff69 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000041c 	.word	0x2000041c
 80007a4:	58024c00 	.word	0x58024c00

080007a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_SPI3_Init+0xa4>)
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <MX_SPI3_Init+0xa8>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_SPI3_Init+0xa4>)
 80007b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_SPI3_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_SPI3_Init+0xa4>)
 80007c2:	2203      	movs	r2, #3
 80007c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_SPI3_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_SPI3_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_SPI3_Init+0xa4>)
 80007d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_SPI3_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI3_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_SPI3_Init+0xa4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI3_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0xa4>)
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI3_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI3_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI3_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI3_Init+0xa4>)
 8000838:	f006 fee4 	bl	8007604 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 ff14 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000554 	.word	0x20000554
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09a      	sub	sp, #104	; 0x68
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	222c      	movs	r2, #44	; 0x2c
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00a f97e 	bl	800ab90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000894:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <MX_TIM1_Init+0x154>)
 8000896:	4a45      	ldr	r2, [pc, #276]	; (80009ac <MX_TIM1_Init+0x158>)
 8000898:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 800089a:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <MX_TIM1_Init+0x154>)
 800089c:	22ef      	movs	r2, #239	; 0xef
 800089e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008a8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80008ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b4:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c0:	4839      	ldr	r0, [pc, #228]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008c2:	f006 ffbc 	bl	800783e <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 fecf 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008da:	4619      	mov	r1, r3
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008de:	f007 fa95 	bl	8007e0c <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008e8:	f000 fec1 	bl	800166e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ec:	482e      	ldr	r0, [pc, #184]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008ee:	f006 fffd 	bl	80078ec <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008f8:	f000 feb9 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800090c:	4619      	mov	r1, r3
 800090e:	4826      	ldr	r0, [pc, #152]	; (80009a8 <MX_TIM1_Init+0x154>)
 8000910:	f007 ff9e 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800091a:	f000 fea8 	bl	800166e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091e:	2360      	movs	r3, #96	; 0x60
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000922:	f240 1339 	movw	r3, #313	; 0x139
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000940:	2204      	movs	r2, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <MX_TIM1_Init+0x154>)
 8000946:	f007 f951 	bl	8007bec <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000950:	f000 fe8d 	bl	800166e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <MX_TIM1_Init+0x154>)
 800098a:	f007 ffe9 	bl	8008960 <HAL_TIMEx_ConfigBreakDeadTime>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000994:	f000 fe6b 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <MX_TIM1_Init+0x154>)
 800099a:	f000 ffcf 	bl	800193c <HAL_TIM_MspPostInit>

}
 800099e:	bf00      	nop
 80009a0:	3768      	adds	r7, #104	; 0x68
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000660 	.word	0x20000660
 80009ac:	40010000 	.word	0x40010000

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009ec:	22ef      	movs	r2, #239	; 0xef
 80009ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009f8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80009fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0a:	4824      	ldr	r0, [pc, #144]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a0c:	f006 ff17 	bl	800783e <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 fe2a 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a28:	f007 f9f0 	bl	8007e0c <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a32:	f000 fe1c 	bl	800166e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a38:	f006 ff58 	bl	80078ec <HAL_TIM_PWM_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a42:	f000 fe14 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a56:	f007 fefb 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a60:	f000 fe05 	bl	800166e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a64:	2360      	movs	r3, #96	; 0x60
 8000a66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000a68:	f240 1339 	movw	r3, #313	; 0x139
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	2208      	movs	r2, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a7e:	f007 f8b5 	bl	8007bec <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a88:	f000 fdf1 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a8e:	f000 ff55 	bl	800193c <HAL_TIM_MspPostInit>

}
 8000a92:	bf00      	nop
 8000a94:	3738      	adds	r7, #56	; 0x38
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200007b4 	.word	0x200007b4

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <MX_TIM3_Init+0xec>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ada:	22ef      	movs	r2, #239	; 0xef
 8000adc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000ae4:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ae6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000aea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af8:	4823      	ldr	r0, [pc, #140]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000afa:	f006 fea0 	bl	800783e <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b04:	f000 fdb3 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	4619      	mov	r1, r3
 8000b14:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b16:	f007 f979 	bl	8007e0c <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b20:	f000 fda5 	bl	800166e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b26:	f006 fee1 	bl	80078ec <HAL_TIM_PWM_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b30:	f000 fd9d 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4811      	ldr	r0, [pc, #68]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b44:	f007 fe84 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b4e:	f000 fd8e 	bl	800166e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b52:	2360      	movs	r3, #96	; 0x60
 8000b54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000b56:	f240 1339 	movw	r3, #313	; 0x139
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b6c:	f007 f83e 	bl	8007bec <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b76:	f000 fd7a 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b7c:	f000 fede 	bl	800193c <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	; 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000508 	.word	0x20000508
 8000b8c:	40000400 	.word	0x40000400

08000b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <MX_TIM4_Init+0xec>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bca:	22ef      	movs	r2, #239	; 0xef
 8000bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bd6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000be8:	4823      	ldr	r0, [pc, #140]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bea:	f006 fe28 	bl	800783e <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000bf4:	f000 fd3b 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	4619      	mov	r1, r3
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c06:	f007 f901 	bl	8007e0c <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000c10:	f000 fd2d 	bl	800166e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c14:	4818      	ldr	r0, [pc, #96]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c16:	f006 fe69 	bl	80078ec <HAL_TIM_PWM_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000c20:	f000 fd25 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4811      	ldr	r0, [pc, #68]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c34:	f007 fe0c 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c3e:	f000 fd16 	bl	800166e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c42:	2360      	movs	r3, #96	; 0x60
 8000c44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c46:	f240 1339 	movw	r3, #313	; 0x139
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	2208      	movs	r2, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c5c:	f006 ffc6 	bl	8007bec <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000c66:	f000 fd02 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c6a:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c6c:	f000 fe66 	bl	800193c <HAL_TIM_MspPostInit>

}
 8000c70:	bf00      	nop
 8000c72:	3738      	adds	r7, #56	; 0x38
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000204 	.word	0x20000204
 8000c7c:	40000800 	.word	0x40000800

08000c80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <MX_TIM5_Init+0x98>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000ca6:	22ef      	movs	r2, #239	; 0xef
 8000ca8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cb2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000cb6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cc6:	f006 fdba 	bl	800783e <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000cd0:	f000 fccd 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000ce2:	f007 f893 	bl	8007e0c <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cec:	f000 fcbf 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cfe:	f007 fda7 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fcb1 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200004bc 	.word	0x200004bc
 8000d18:	40000c00 	.word	0x40000c00

08000d1c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d30:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <MX_TIM12_Init+0x70>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d36:	22ef      	movs	r2, #239	; 0xef
 8000d38:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d42:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000d46:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d56:	f006 fd72 	bl	800783e <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000d60:	f000 fc85 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_TIM12_Init+0x6c>)
 8000d70:	f007 f84c 	bl	8007e0c <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000d7a:	f000 fc78 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000800 	.word	0x20000800
 8000d8c:	40001800 	.word	0x40001800

08000d90 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b09a      	sub	sp, #104	; 0x68
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	222c      	movs	r2, #44	; 0x2c
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f009 fee0 	bl	800ab90 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000dd2:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <MX_TIM15_Init+0x144>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000dd6:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000dd8:	22ef      	movs	r2, #239	; 0xef
 8000dda:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000de2:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000de4:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000de8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000df0:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000dfc:	4834      	ldr	r0, [pc, #208]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000dfe:	f006 fd1e 	bl	800783e <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f000 fc31 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e16:	4619      	mov	r1, r3
 8000e18:	482d      	ldr	r0, [pc, #180]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000e1a:	f006 fff7 	bl	8007e0c <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000e24:	f000 fc23 	bl	800166e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e28:	4829      	ldr	r0, [pc, #164]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000e2a:	f006 fd5f 	bl	80078ec <HAL_TIM_PWM_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000e34:	f000 fc1b 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e44:	4619      	mov	r1, r3
 8000e46:	4822      	ldr	r0, [pc, #136]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000e48:	f007 fd02 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000e52:	f000 fc0c 	bl	800166e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e56:	2360      	movs	r3, #96	; 0x60
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000e5a:	f240 1339 	movw	r3, #313	; 0x139
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000e7e:	f006 feb5 	bl	8007bec <HAL_TIM_PWM_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000e88:	f000 fbf1 	bl	800166e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000eb4:	f007 fd54 	bl	8008960 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000ebe:	f000 fbd6 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <MX_TIM15_Init+0x140>)
 8000ec4:	f000 fd3a 	bl	800193c <HAL_TIM_MspPostInit>

}
 8000ec8:	bf00      	nop
 8000eca:	3768      	adds	r7, #104	; 0x68
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200003d0 	.word	0x200003d0
 8000ed4:	40014000 	.word	0x40014000

08000ed8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_UART4_Init+0x94>)
 8000ede:	4a24      	ldr	r2, [pc, #144]	; (8000f70 <MX_UART4_Init+0x98>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_UART4_Init+0x94>)
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <MX_UART4_Init+0x9c>)
 8000ee6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_UART4_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_UART4_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_UART4_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_UART4_Init+0x94>)
 8000efc:	220c      	movs	r2, #12
 8000efe:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f26:	f009 fc7d 	bl	800a824 <HAL_RS485Ex_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8000f30:	f000 fb9d 	bl	800166e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f38:	f009 fd35 	bl	800a9a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f000 fb94 	bl	800166e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4808      	ldr	r0, [pc, #32]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f4a:	f009 fd6a 	bl	800aa22 <HAL_UARTEx_SetRxFifoThreshold>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8000f54:	f000 fb8b 	bl	800166e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_UART4_Init+0x94>)
 8000f5a:	f009 fceb 	bl	800a934 <HAL_UARTEx_DisableFifoMode>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8000f64:	f000 fb83 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200006ac 	.word	0x200006ac
 8000f70:	40004c00 	.word	0x40004c00
 8000f74:	001e8480 	.word	0x001e8480

08000f78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <MX_USART3_UART_Init+0x94>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000fc2:	f007 fd69 	bl	8008a98 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 fb4f 	bl	800166e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000fd4:	f009 fce7 	bl	800a9a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f000 fb46 	bl	800166e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000fe6:	f009 fd1c 	bl	800aa22 <HAL_UARTEx_SetRxFifoThreshold>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 fb3d 	bl	800166e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_USART3_UART_Init+0x90>)
 8000ff6:	f009 fc9d 	bl	800a934 <HAL_UARTEx_DisableFifoMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 fb35 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002c8 	.word	0x200002c8
 800100c:	40004800 	.word	0x40004800

08001010 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001016:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <MX_DMA_Init+0x274>)
 8001018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800101c:	4a99      	ldr	r2, [pc, #612]	; (8001284 <MX_DMA_Init+0x274>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001026:	4b97      	ldr	r3, [pc, #604]	; (8001284 <MX_DMA_Init+0x274>)
 8001028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001034:	4b93      	ldr	r3, [pc, #588]	; (8001284 <MX_DMA_Init+0x274>)
 8001036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103a:	4a92      	ldr	r2, [pc, #584]	; (8001284 <MX_DMA_Init+0x274>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001044:	4b8f      	ldr	r3, [pc, #572]	; (8001284 <MX_DMA_Init+0x274>)
 8001046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 8001052:	4b8d      	ldr	r3, [pc, #564]	; (8001288 <MX_DMA_Init+0x278>)
 8001054:	4a8d      	ldr	r2, [pc, #564]	; (800128c <MX_DMA_Init+0x27c>)
 8001056:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001058:	4b8b      	ldr	r3, [pc, #556]	; (8001288 <MX_DMA_Init+0x278>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800105e:	4b8a      	ldr	r3, [pc, #552]	; (8001288 <MX_DMA_Init+0x278>)
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001064:	4b88      	ldr	r3, [pc, #544]	; (8001288 <MX_DMA_Init+0x278>)
 8001066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 800106c:	4b86      	ldr	r3, [pc, #536]	; (8001288 <MX_DMA_Init+0x278>)
 800106e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001072:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001074:	4b84      	ldr	r3, [pc, #528]	; (8001288 <MX_DMA_Init+0x278>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107a:	4b83      	ldr	r3, [pc, #524]	; (8001288 <MX_DMA_Init+0x278>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 8001080:	4b81      	ldr	r3, [pc, #516]	; (8001288 <MX_DMA_Init+0x278>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8001086:	4b80      	ldr	r3, [pc, #512]	; (8001288 <MX_DMA_Init+0x278>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800108c:	4b7e      	ldr	r3, [pc, #504]	; (8001288 <MX_DMA_Init+0x278>)
 800108e:	2204      	movs	r2, #4
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001092:	4b7d      	ldr	r3, [pc, #500]	; (8001288 <MX_DMA_Init+0x278>)
 8001094:	2203      	movs	r2, #3
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001098:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <MX_DMA_Init+0x278>)
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800109e:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <MX_DMA_Init+0x278>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 80010a4:	4878      	ldr	r0, [pc, #480]	; (8001288 <MX_DMA_Init+0x278>)
 80010a6:	f001 fb6d 	bl	8002784 <HAL_DMA_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 80010b0:	f000 fadd 	bl	800166e <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 80010b4:	4b76      	ldr	r3, [pc, #472]	; (8001290 <MX_DMA_Init+0x280>)
 80010b6:	4a77      	ldr	r2, [pc, #476]	; (8001294 <MX_DMA_Init+0x284>)
 80010b8:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 80010ba:	4b75      	ldr	r3, [pc, #468]	; (8001290 <MX_DMA_Init+0x280>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80010c0:	4b73      	ldr	r3, [pc, #460]	; (8001290 <MX_DMA_Init+0x280>)
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 80010c6:	4b72      	ldr	r3, [pc, #456]	; (8001290 <MX_DMA_Init+0x280>)
 80010c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010cc:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 80010ce:	4b70      	ldr	r3, [pc, #448]	; (8001290 <MX_DMA_Init+0x280>)
 80010d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d6:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <MX_DMA_Init+0x280>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010dc:	4b6c      	ldr	r3, [pc, #432]	; (8001290 <MX_DMA_Init+0x280>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 80010e2:	4b6b      	ldr	r3, [pc, #428]	; (8001290 <MX_DMA_Init+0x280>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 80010e8:	4b69      	ldr	r3, [pc, #420]	; (8001290 <MX_DMA_Init+0x280>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010ee:	4b68      	ldr	r3, [pc, #416]	; (8001290 <MX_DMA_Init+0x280>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010f4:	4b66      	ldr	r3, [pc, #408]	; (8001290 <MX_DMA_Init+0x280>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 80010fa:	4b65      	ldr	r3, [pc, #404]	; (8001290 <MX_DMA_Init+0x280>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001100:	4b63      	ldr	r3, [pc, #396]	; (8001290 <MX_DMA_Init+0x280>)
 8001102:	2200      	movs	r2, #0
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8001106:	4862      	ldr	r0, [pc, #392]	; (8001290 <MX_DMA_Init+0x280>)
 8001108:	f001 fb3c 	bl	8002784 <HAL_DMA_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 8001112:	f000 faac 	bl	800166e <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8001116:	4b60      	ldr	r3, [pc, #384]	; (8001298 <MX_DMA_Init+0x288>)
 8001118:	4a60      	ldr	r2, [pc, #384]	; (800129c <MX_DMA_Init+0x28c>)
 800111a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <MX_DMA_Init+0x288>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <MX_DMA_Init+0x288>)
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001128:	4b5b      	ldr	r3, [pc, #364]	; (8001298 <MX_DMA_Init+0x288>)
 800112a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b59      	ldr	r3, [pc, #356]	; (8001298 <MX_DMA_Init+0x288>)
 8001132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001136:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001138:	4b57      	ldr	r3, [pc, #348]	; (8001298 <MX_DMA_Init+0x288>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113e:	4b56      	ldr	r3, [pc, #344]	; (8001298 <MX_DMA_Init+0x288>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8001144:	4b54      	ldr	r3, [pc, #336]	; (8001298 <MX_DMA_Init+0x288>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 800114a:	4b53      	ldr	r3, [pc, #332]	; (8001298 <MX_DMA_Init+0x288>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001150:	4b51      	ldr	r3, [pc, #324]	; (8001298 <MX_DMA_Init+0x288>)
 8001152:	2204      	movs	r2, #4
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <MX_DMA_Init+0x288>)
 8001158:	2203      	movs	r2, #3
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 800115c:	4b4e      	ldr	r3, [pc, #312]	; (8001298 <MX_DMA_Init+0x288>)
 800115e:	2200      	movs	r2, #0
 8001160:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001162:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <MX_DMA_Init+0x288>)
 8001164:	2200      	movs	r2, #0
 8001166:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8001168:	484b      	ldr	r0, [pc, #300]	; (8001298 <MX_DMA_Init+0x288>)
 800116a:	f001 fb0b 	bl	8002784 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 8001174:	f000 fa7b 	bl	800166e <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <MX_DMA_Init+0x290>)
 800117a:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <MX_DMA_Init+0x294>)
 800117c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <MX_DMA_Init+0x290>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <MX_DMA_Init+0x290>)
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <MX_DMA_Init+0x290>)
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <MX_DMA_Init+0x290>)
 8001194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001198:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <MX_DMA_Init+0x290>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <MX_DMA_Init+0x290>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <MX_DMA_Init+0x290>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <MX_DMA_Init+0x290>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_DMA_Init+0x290>)
 80011b4:	2204      	movs	r2, #4
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <MX_DMA_Init+0x290>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <MX_DMA_Init+0x290>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <MX_DMA_Init+0x290>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 80011ca:	4835      	ldr	r0, [pc, #212]	; (80012a0 <MX_DMA_Init+0x290>)
 80011cc:	f001 fada 	bl	8002784 <HAL_DMA_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 80011d6:	f000 fa4a 	bl	800166e <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <MX_DMA_Init+0x298>)
 80011dc:	4a33      	ldr	r2, [pc, #204]	; (80012ac <MX_DMA_Init+0x29c>)
 80011de:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 80011e0:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <MX_DMA_Init+0x298>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <MX_DMA_Init+0x298>)
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <MX_DMA_Init+0x298>)
 80011ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <MX_DMA_Init+0x298>)
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <MX_DMA_Init+0x298>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_DMA_Init+0x298>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_DMA_Init+0x298>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_DMA_Init+0x298>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_DMA_Init+0x298>)
 8001216:	2204      	movs	r2, #4
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_DMA_Init+0x298>)
 800121c:	2203      	movs	r2, #3
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_DMA_Init+0x298>)
 8001222:	2200      	movs	r2, #0
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_DMA_Init+0x298>)
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 800122c:	481e      	ldr	r0, [pc, #120]	; (80012a8 <MX_DMA_Init+0x298>)
 800122e:	f001 faa9 	bl	8002784 <HAL_DMA_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 8001238:	f000 fa19 	bl	800166e <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	200c      	movs	r0, #12
 8001242:	f001 f980 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001246:	200c      	movs	r0, #12
 8001248:	f001 f997 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	200d      	movs	r0, #13
 8001252:	f001 f978 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001256:	200d      	movs	r0, #13
 8001258:	f001 f98f 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2038      	movs	r0, #56	; 0x38
 8001262:	f001 f970 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f001 f987 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2039      	movs	r0, #57	; 0x39
 8001272:	f001 f968 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001276:	2039      	movs	r0, #57	; 0x39
 8001278:	f001 f97f 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024400 	.word	0x58024400
 8001288:	20000358 	.word	0x20000358
 800128c:	40020058 	.word	0x40020058
 8001290:	2000073c 	.word	0x2000073c
 8001294:	40020440 	.word	0x40020440
 8001298:	200005dc 	.word	0x200005dc
 800129c:	40020458 	.word	0x40020458
 80012a0:	2000009c 	.word	0x2000009c
 80012a4:	40020470 	.word	0x40020470
 80012a8:	20000114 	.word	0x20000114
 80012ac:	40020488 	.word	0x40020488

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c6:	4b7b      	ldr	r3, [pc, #492]	; (80014b4 <MX_GPIO_Init+0x204>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	4a79      	ldr	r2, [pc, #484]	; (80014b4 <MX_GPIO_Init+0x204>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d6:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <MX_GPIO_Init+0x204>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <MX_GPIO_Init+0x204>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	4a72      	ldr	r2, [pc, #456]	; (80014b4 <MX_GPIO_Init+0x204>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f4:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <MX_GPIO_Init+0x204>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001308:	4a6a      	ldr	r2, [pc, #424]	; (80014b4 <MX_GPIO_Init+0x204>)
 800130a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001312:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001326:	4a63      	ldr	r2, [pc, #396]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <MX_GPIO_Init+0x204>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136c:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <MX_GPIO_Init+0x204>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <MX_GPIO_Init+0x204>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <MX_GPIO_Init+0x204>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001398:	2200      	movs	r2, #0
 800139a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800139e:	4846      	ldr	r0, [pc, #280]	; (80014b8 <MX_GPIO_Init+0x208>)
 80013a0:	f003 fdc4 	bl	8004f2c <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f24c 0102 	movw	r1, #49154	; 0xc002
 80013aa:	4844      	ldr	r0, [pc, #272]	; (80014bc <MX_GPIO_Init+0x20c>)
 80013ac:	f003 fdbe 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b6:	4842      	ldr	r0, [pc, #264]	; (80014c0 <MX_GPIO_Init+0x210>)
 80013b8:	f003 fdb8 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c2:	4840      	ldr	r0, [pc, #256]	; (80014c4 <MX_GPIO_Init+0x214>)
 80013c4:	f003 fdb2 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80013c8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80013cc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4835      	ldr	r0, [pc, #212]	; (80014b8 <MX_GPIO_Init+0x208>)
 80013e2:	f003 fbf3 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 80013e6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ec:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <MX_GPIO_Init+0x218>)
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4830      	ldr	r0, [pc, #192]	; (80014bc <MX_GPIO_Init+0x20c>)
 80013fc:	f003 fbe6 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001400:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4828      	ldr	r0, [pc, #160]	; (80014bc <MX_GPIO_Init+0x20c>)
 800141a:	f003 fbd7 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4822      	ldr	r0, [pc, #136]	; (80014c0 <MX_GPIO_Init+0x210>)
 8001438:	f003 fbc8 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_GPIO_Init+0x214>)
 8001456:	f003 fbb9 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800145a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_GPIO_Init+0x218>)
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4817      	ldr	r0, [pc, #92]	; (80014cc <MX_GPIO_Init+0x21c>)
 8001470:	f003 fbac 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001474:	23c0      	movs	r3, #192	; 0xc0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_GPIO_Init+0x218>)
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <MX_GPIO_Init+0x208>)
 8001488:	f003 fba0 	bl	8004bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2103      	movs	r1, #3
 8001490:	2017      	movs	r0, #23
 8001492:	f001 f858 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001496:	2017      	movs	r0, #23
 8001498:	f001 f86f 	bl	800257a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2103      	movs	r1, #3
 80014a0:	2028      	movs	r0, #40	; 0x28
 80014a2:	f001 f850 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a6:	2028      	movs	r0, #40	; 0x28
 80014a8:	f001 f867 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 80014ac:	bf00      	nop
 80014ae:	3730      	adds	r7, #48	; 0x30
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58020c00 	.word	0x58020c00
 80014c4:	58020800 	.word	0x58020800
 80014c8:	11110000 	.word	0x11110000
 80014cc:	58021800 	.word	0x58021800

080014d0 <HAL_UART_RxCpltCallback>:
// }
//return len;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_UART_RxCpltCallback+0x148>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	f040 8096 	bne.w	800160e <HAL_UART_RxCpltCallback+0x13e>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 80014e2:	4b4e      	ldr	r3, [pc, #312]	; (800161c <HAL_UART_RxCpltCallback+0x14c>)
 80014e4:	22ac      	movs	r2, #172	; 0xac
 80014e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, UART3_TXBUFFER_ACK, 1, 1);
 80014e8:	2301      	movs	r3, #1
 80014ea:	2201      	movs	r2, #1
 80014ec:	494b      	ldr	r1, [pc, #300]	; (800161c <HAL_UART_RxCpltCallback+0x14c>)
 80014ee:	484a      	ldr	r0, [pc, #296]	; (8001618 <HAL_UART_RxCpltCallback+0x148>)
 80014f0:	f007 fb22 	bl	8008b38 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	4849      	ldr	r0, [pc, #292]	; (8001620 <HAL_UART_RxCpltCallback+0x150>)
 80014fa:	f003 fd17 	bl	8004f2c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2102      	movs	r1, #2
 8001502:	4848      	ldr	r0, [pc, #288]	; (8001624 <HAL_UART_RxCpltCallback+0x154>)
 8001504:	f003 fd12 	bl	8004f2c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800150e:	4844      	ldr	r0, [pc, #272]	; (8001620 <HAL_UART_RxCpltCallback+0x150>)
 8001510:	f003 fd0c 	bl	8004f2c <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 8001514:	4b44      	ldr	r3, [pc, #272]	; (8001628 <HAL_UART_RxCpltCallback+0x158>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	b2db      	uxtb	r3, r3
 800151e:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 8001520:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_UART_RxCpltCallback+0x158>)
 8001522:	78db      	ldrb	r3, [r3, #3]
 8001524:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 800152a:	2400      	movs	r4, #0
 800152c:	e006      	b.n	800153c <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_UART_RxCpltCallback+0x158>)
 8001530:	5d1b      	ldrb	r3, [r3, r4]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 800153a:	3401      	adds	r4, #1
 800153c:	2c02      	cmp	r4, #2
 800153e:	ddf6      	ble.n	800152e <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d13e      	bne.n	80015d2 <HAL_UART_RxCpltCallback+0x102>
		{
			switch(num_mode)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	2b0e      	cmp	r3, #14
 800155c:	d824      	bhi.n	80015a8 <HAL_UART_RxCpltCallback+0xd8>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <HAL_UART_RxCpltCallback+0x94>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	080015a9 	.word	0x080015a9
 8001568:	080015a9 	.word	0x080015a9
 800156c:	080015a9 	.word	0x080015a9
 8001570:	080015a9 	.word	0x080015a9
 8001574:	080015a9 	.word	0x080015a9
 8001578:	080015a9 	.word	0x080015a9
 800157c:	080015a9 	.word	0x080015a9
 8001580:	080015a9 	.word	0x080015a9
 8001584:	080015a9 	.word	0x080015a9
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015a9 	.word	0x080015a9
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015a9 	.word	0x080015a9
 8001598:	080015a9 	.word	0x080015a9
 800159c:	080015a9 	.word	0x080015a9
				{
					break;
				}
				case 10:
				{
					printf("10\n");
 80015a0:	4822      	ldr	r0, [pc, #136]	; (800162c <HAL_UART_RxCpltCallback+0x15c>)
 80015a2:	f009 fb6b 	bl	800ac7c <puts>
					break;
 80015a6:	e000      	b.n	80015aa <HAL_UART_RxCpltCallback+0xda>
				{
					break;
				}
				default:
				{
					break;
 80015a8:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2101      	movs	r1, #1
 80015ae:	481c      	ldr	r0, [pc, #112]	; (8001620 <HAL_UART_RxCpltCallback+0x150>)
 80015b0:	f003 fcbc 	bl	8004f2c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2102      	movs	r1, #2
 80015b8:	481a      	ldr	r0, [pc, #104]	; (8001624 <HAL_UART_RxCpltCallback+0x154>)
 80015ba:	f003 fcb7 	bl	8004f2c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c4:	4816      	ldr	r0, [pc, #88]	; (8001620 <HAL_UART_RxCpltCallback+0x150>)
 80015c6:	f003 fcb1 	bl	8004f2c <HAL_GPIO_WritePin>
			UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_UART_RxCpltCallback+0x14c>)
 80015cc:	22ad      	movs	r2, #173	; 0xad
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e012      	b.n	80015f8 <HAL_UART_RxCpltCallback+0x128>
		}
		else
		{
			UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_CheckSumError_Address;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_UART_RxCpltCallback+0x14c>)
 80015d4:	22ee      	movs	r2, #238	; 0xee
 80015d6:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	4810      	ldr	r0, [pc, #64]	; (8001620 <HAL_UART_RxCpltCallback+0x150>)
 80015de:	f003 fca5 	bl	8004f2c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2102      	movs	r1, #2
 80015e6:	480f      	ldr	r0, [pc, #60]	; (8001624 <HAL_UART_RxCpltCallback+0x154>)
 80015e8:	f003 fca0 	bl	8004f2c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <HAL_UART_RxCpltCallback+0x150>)
 80015f4:	f003 fc9a 	bl	8004f2c <HAL_GPIO_WritePin>
		}
		HAL_UART_Transmit(&huart3, UART3_TXBUFFER_ACK, 1, 1);
 80015f8:	2301      	movs	r3, #1
 80015fa:	2201      	movs	r2, #1
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <HAL_UART_RxCpltCallback+0x14c>)
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_UART_RxCpltCallback+0x148>)
 8001600:	f007 fa9a 	bl	8008b38 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001604:	2204      	movs	r2, #4
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <HAL_UART_RxCpltCallback+0x158>)
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <HAL_UART_RxCpltCallback+0x148>)
 800160a:	f007 fb2b 	bl	8008c64 <HAL_UART_Receive_IT>
	}
}
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	200002c8 	.word	0x200002c8
 800161c:	2000065c 	.word	0x2000065c
 8001620:	58020400 	.word	0x58020400
 8001624:	58021000 	.word	0x58021000
 8001628:	200008c8 	.word	0x200008c8
 800162c:	0800b544 	.word	0x0800b544

08001630 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]


}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001672:	b672      	cpsid	i
}
 8001674:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001676:	e7fe      	b.n	8001676 <Error_Handler+0x8>

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_MspInit+0x30>)
 8001680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001684:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x30>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x30>)
 8001690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	58024400 	.word	0x58024400

080016ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_CRC_MspInit+0x3c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10e      	bne.n	80016dc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_CRC_MspInit+0x40>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c4:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_CRC_MspInit+0x40>)
 80016c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_CRC_MspInit+0x40>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58024c00 	.word	0x58024c00
 80016ec:	58024400 	.word	0x58024400

080016f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0b8      	sub	sp, #224	; 0xe0
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	22bc      	movs	r2, #188	; 0xbc
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f009 fa3d 	bl	800ab90 <memset>
  if(hspi->Instance==SPI3)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <HAL_SPI_MspInit+0xc0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d142      	bne.n	80017a6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001726:	2300      	movs	r3, #0
 8001728:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fc06 	bl	8005f40 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800173a:	f7ff ff98 	bl	800166e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_SPI_MspInit+0xc4>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <HAL_SPI_MspInit+0xc4>)
 8001746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_SPI_MspInit+0xc4>)
 8001750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_SPI_MspInit+0xc4>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001762:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_SPI_MspInit+0xc4>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_SPI_MspInit+0xc4>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800177a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800177e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001794:	2306      	movs	r3, #6
 8001796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_SPI_MspInit+0xc8>)
 80017a2:	f003 fa13 	bl	8004bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	37e0      	adds	r7, #224	; 0xe0
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40003c00 	.word	0x40003c00
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020800 	.word	0x58020800

080017bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a55      	ldr	r2, [pc, #340]	; (8001920 <HAL_TIM_Base_MspInit+0x164>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10f      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ce:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80017d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017d4:	4a53      	ldr	r2, [pc, #332]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017de:	4b51      	ldr	r3, [pc, #324]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80017e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017ec:	e094      	b.n	8001918 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f6:	d10f      	bne.n	8001818 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80017fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017fe:	4a49      	ldr	r2, [pc, #292]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001808:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 800180a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	6a3b      	ldr	r3, [r7, #32]
}
 8001816:	e07f      	b.n	8001918 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a42      	ldr	r2, [pc, #264]	; (8001928 <HAL_TIM_Base_MspInit+0x16c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d10f      	bne.n	8001842 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001822:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 8001824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001828:	4a3e      	ldr	r2, [pc, #248]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001832:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 8001834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	69fb      	ldr	r3, [r7, #28]
}
 8001840:	e06a      	b.n	8001918 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a39      	ldr	r2, [pc, #228]	; (800192c <HAL_TIM_Base_MspInit+0x170>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d10f      	bne.n	800186c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 800184e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001852:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185c:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	69bb      	ldr	r3, [r7, #24]
}
 800186a:	e055      	b.n	8001918 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <HAL_TIM_Base_MspInit+0x174>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d117      	bne.n	80018a6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 8001878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800187c:	4a29      	ldr	r2, [pc, #164]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 8001888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f000 fe54 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800189e:	2032      	movs	r0, #50	; 0x32
 80018a0:	f000 fe6b 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 80018a4:	e038      	b.n	8001918 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_TIM_Base_MspInit+0x178>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d117      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80018b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b6:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80018b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80018c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	202b      	movs	r0, #43	; 0x2b
 80018d4:	f000 fe37 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80018d8:	202b      	movs	r0, #43	; 0x2b
 80018da:	f000 fe4e 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 80018de:	e01b      	b.n	8001918 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <HAL_TIM_Base_MspInit+0x17c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d116      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80018ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_TIM_Base_MspInit+0x168>)
 80018fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2074      	movs	r0, #116	; 0x74
 800190e:	f000 fe1a 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001912:	2074      	movs	r0, #116	; 0x74
 8001914:	f000 fe31 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	; 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40010000 	.word	0x40010000
 8001924:	58024400 	.word	0x58024400
 8001928:	40000400 	.word	0x40000400
 800192c:	40000800 	.word	0x40000800
 8001930:	40000c00 	.word	0x40000c00
 8001934:	40001800 	.word	0x40001800
 8001938:	40014000 	.word	0x40014000

0800193c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5e      	ldr	r2, [pc, #376]	; (8001ad4 <HAL_TIM_MspPostInit+0x198>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d120      	bne.n	80019a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800195e:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	4a5c      	ldr	r2, [pc, #368]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196e:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 800197c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800198e:	2301      	movs	r3, #1
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4850      	ldr	r0, [pc, #320]	; (8001adc <HAL_TIM_MspPostInit+0x1a0>)
 800199a:	f003 f917 	bl	8004bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800199e:	e094      	b.n	8001aca <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a8:	d120      	bne.n	80019ec <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a49      	ldr	r2, [pc, #292]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80019c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019da:	2301      	movs	r3, #1
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	483e      	ldr	r0, [pc, #248]	; (8001ae0 <HAL_TIM_MspPostInit+0x1a4>)
 80019e6:	f003 f8f1 	bl	8004bcc <HAL_GPIO_Init>
}
 80019ea:	e06e      	b.n	8001aca <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <HAL_TIM_MspPostInit+0x1a8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d11f      	bne.n	8001a36 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	4a36      	ldr	r2, [pc, #216]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001a14:	2340      	movs	r3, #64	; 0x40
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a24:	2302      	movs	r3, #2
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	482e      	ldr	r0, [pc, #184]	; (8001ae8 <HAL_TIM_MspPostInit+0x1ac>)
 8001a30:	f003 f8cc 	bl	8004bcc <HAL_GPIO_Init>
}
 8001a34:	e049      	b.n	8001aca <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	; (8001aec <HAL_TIM_MspPostInit+0x1b0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d120      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a70:	2302      	movs	r3, #2
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4819      	ldr	r0, [pc, #100]	; (8001ae0 <HAL_TIM_MspPostInit+0x1a4>)
 8001a7c:	f003 f8a6 	bl	8004bcc <HAL_GPIO_Init>
}
 8001a80:	e023      	b.n	8001aca <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_TIM_MspPostInit+0x1b4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d11e      	bne.n	8001aca <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001a94:	f043 0310 	orr.w	r3, r3, #16
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_TIM_MspPostInit+0x19c>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001aaa:	2340      	movs	r3, #64	; 0x40
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001aba:	2304      	movs	r3, #4
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_TIM_MspPostInit+0x1a0>)
 8001ac6:	f003 f881 	bl	8004bcc <HAL_GPIO_Init>
}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	58021000 	.word	0x58021000
 8001ae0:	58020400 	.word	0x58020400
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	58020000 	.word	0x58020000
 8001aec:	40000800 	.word	0x40000800
 8001af0:	40014000 	.word	0x40014000

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0bc      	sub	sp, #240	; 0xf0
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b0c:	f107 0320 	add.w	r3, r7, #32
 8001b10:	22bc      	movs	r2, #188	; 0xbc
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f009 f83b 	bl	800ab90 <memset>
  if(huart->Instance==UART4)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_UART_MspInit+0x1c8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	f040 80db 	bne.w	8001cdc <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b26:	2302      	movs	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	4618      	mov	r0, r3
 8001b36:	f004 fa03 	bl	8005f40 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b40:	f7ff fd95 	bl	800166e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b4a:	4a5d      	ldr	r2, [pc, #372]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b54:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	4a55      	ldr	r2, [pc, #340]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b80:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b86:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_UART_MspInit+0x1cc>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	483f      	ldr	r0, [pc, #252]	; (8001cc4 <HAL_UART_MspInit+0x1d0>)
 8001bc6:	f003 f801 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001be2:	2308      	movs	r3, #8
 8001be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bec:	4619      	mov	r1, r3
 8001bee:	4836      	ldr	r0, [pc, #216]	; (8001cc8 <HAL_UART_MspInit+0x1d4>)
 8001bf0:	f002 ffec 	bl	8004bcc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_UART_MspInit+0x1dc>)
 8001bf8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001bfc:	223f      	movs	r2, #63	; 0x3f
 8001bfe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c12:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c32:	4826      	ldr	r0, [pc, #152]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c34:	f000 fda6 	bl	8002784 <HAL_DMA_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001c3e:	f7ff fd16 	bl	800166e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c46:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_UART_MspInit+0x1d8>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c50:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <HAL_UART_MspInit+0x1e4>)
 8001c52:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c5c:	2240      	movs	r2, #64	; 0x40
 8001c5e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001c8c:	4811      	ldr	r0, [pc, #68]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001c8e:	f000 fd79 	bl	8002784 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001c98:	f7ff fce9 	bl	800166e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001ca0:	679a      	str	r2, [r3, #120]	; 0x78
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_UART_MspInit+0x1e0>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2034      	movs	r0, #52	; 0x34
 8001cae:	f000 fc4a 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001cb2:	2034      	movs	r0, #52	; 0x34
 8001cb4:	f000 fc61 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cb8:	e0bd      	b.n	8001e36 <HAL_UART_MspInit+0x342>
 8001cba:	bf00      	nop
 8001cbc:	40004c00 	.word	0x40004c00
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58020000 	.word	0x58020000
 8001cc8:	58020c00 	.word	0x58020c00
 8001ccc:	2000018c 	.word	0x2000018c
 8001cd0:	40020410 	.word	0x40020410
 8001cd4:	20000850 	.word	0x20000850
 8001cd8:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a57      	ldr	r2, [pc, #348]	; (8001e40 <HAL_UART_MspInit+0x34c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	f040 80a7 	bne.w	8001e36 <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 f922 	bl	8005f40 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001d02:	f7ff fcb4 	bl	800166e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d06:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <HAL_UART_MspInit+0x350>)
 8001d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	; (8001e44 <HAL_UART_MspInit+0x350>)
 8001d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d16:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_UART_MspInit+0x350>)
 8001d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d24:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_UART_MspInit+0x350>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	4a46      	ldr	r2, [pc, #280]	; (8001e44 <HAL_UART_MspInit+0x350>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_UART_MspInit+0x350>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d66:	4619      	mov	r1, r3
 8001d68:	4837      	ldr	r0, [pc, #220]	; (8001e48 <HAL_UART_MspInit+0x354>)
 8001d6a:	f002 ff2f 	bl	8004bcc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d70:	4a37      	ldr	r2, [pc, #220]	; (8001e50 <HAL_UART_MspInit+0x35c>)
 8001d72:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d76:	222d      	movs	r2, #45	; 0x2d
 8001d78:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d8c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dae:	4827      	ldr	r0, [pc, #156]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001db0:	f000 fce8 	bl	8002784 <HAL_DMA_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001dba:	f7ff fc58 	bl	800166e <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001dc2:	67da      	str	r2, [r3, #124]	; 0x7c
 8001dc4:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_UART_MspInit+0x358>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_UART_MspInit+0x364>)
 8001dce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001dd2:	222e      	movs	r2, #46	; 0x2e
 8001dd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e02:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e0a:	4812      	ldr	r0, [pc, #72]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001e0c:	f000 fcba 	bl	8002784 <HAL_DMA_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_MspInit+0x326>
      Error_Handler();
 8001e16:	f7ff fc2a 	bl	800166e <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001e1e:	679a      	str	r2, [r3, #120]	; 0x78
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_UART_MspInit+0x360>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2027      	movs	r0, #39	; 0x27
 8001e2c:	f000 fb8b 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e30:	2027      	movs	r0, #39	; 0x27
 8001e32:	f000 fba2 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	37f0      	adds	r7, #240	; 0xf0
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40004800 	.word	0x40004800
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020c00 	.word	0x58020c00
 8001e4c:	20000250 	.word	0x20000250
 8001e50:	40020028 	.word	0x40020028
 8001e54:	20000444 	.word	0x20000444
 8001e58:	40020040 	.word	0x40020040

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 fa46 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA1_Stream1_IRQHandler+0x10>)
 8001eb6:	f001 fd23 	bl	8003900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000250 	.word	0x20000250

08001ec4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA1_Stream2_IRQHandler+0x10>)
 8001eca:	f001 fd19 	bl	8003900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000444 	.word	0x20000444

08001ed8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001edc:	2040      	movs	r0, #64	; 0x40
 8001ede:	f003 f83e 	bl	8004f5e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ee2:	2080      	movs	r0, #128	; 0x80
 8001ee4:	f003 f83b 	bl	8004f5e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <USART3_IRQHandler+0x10>)
 8001ef2:	f006 fefd 	bl	8008cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002c8 	.word	0x200002c8

08001f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f08:	f003 f829 	bl	8004f5e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001f0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f10:	f003 f825 	bl	8004f5e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f18:	f003 f821 	bl	8004f5e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f20:	f003 f81d 	bl	8004f5e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001f2e:	f005 fd3e 	bl	80079ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000800 	.word	0x20000800

08001f3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM5_IRQHandler+0x10>)
 8001f42:	f005 fd34 	bl	80079ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200004bc 	.word	0x200004bc

08001f50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <UART4_IRQHandler+0x10>)
 8001f56:	f006 fecb 	bl	8008cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200006ac 	.word	0x200006ac

08001f64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA2_Stream0_IRQHandler+0x10>)
 8001f6a:	f001 fcc9 	bl	8003900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000018c 	.word	0x2000018c

08001f78 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA2_Stream1_IRQHandler+0x10>)
 8001f7e:	f001 fcbf 	bl	8003900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000850 	.word	0x20000850

08001f8c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM15_IRQHandler+0x10>)
 8001f92:	f005 fd0c 	bl	80079ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200003d0 	.word	0x200003d0

08001fa0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e00a      	b.n	8001fc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fb2:	f3af 8000 	nop.w
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dbf0      	blt.n	8001fb2 <_read+0x12>
	}

return len;
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e009      	b.n	8002000 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	60ba      	str	r2, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbf1      	blt.n	8001fec <_write+0x12>
	}
	return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_close>:

int _close(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	605a      	str	r2, [r3, #4]
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_isatty>:

int _isatty(int file)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
	return 1;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f008 fd46 	bl	800ab3c <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20020000 	.word	0x20020000
 80020dc:	00000400 	.word	0x00000400
 80020e0:	20000090 	.word	0x20000090
 80020e4:	200008e0 	.word	0x200008e0

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <SystemInit+0xec>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <SystemInit+0xec>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <SystemInit+0xf0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	2b06      	cmp	r3, #6
 8002106:	d807      	bhi.n	8002118 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <SystemInit+0xf0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 030f 	bic.w	r3, r3, #15
 8002110:	4a31      	ldr	r2, [pc, #196]	; (80021d8 <SystemInit+0xf0>)
 8002112:	f043 0307 	orr.w	r3, r3, #7
 8002116:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <SystemInit+0xf4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <SystemInit+0xf4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <SystemInit+0xf4>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <SystemInit+0xf4>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	492b      	ldr	r1, [pc, #172]	; (80021dc <SystemInit+0xf4>)
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <SystemInit+0xf8>)
 8002132:	4013      	ands	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <SystemInit+0xf0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <SystemInit+0xf0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 030f 	bic.w	r3, r3, #15
 800214a:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <SystemInit+0xf0>)
 800214c:	f043 0307 	orr.w	r3, r3, #7
 8002150:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <SystemInit+0xf4>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <SystemInit+0xf4>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <SystemInit+0xf4>)
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <SystemInit+0xf4>)
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <SystemInit+0xfc>)
 8002168:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <SystemInit+0xf4>)
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <SystemInit+0x100>)
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <SystemInit+0xf4>)
 8002172:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <SystemInit+0x104>)
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <SystemInit+0xf4>)
 8002178:	2200      	movs	r2, #0
 800217a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <SystemInit+0xf4>)
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <SystemInit+0x104>)
 8002180:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <SystemInit+0xf4>)
 8002184:	2200      	movs	r2, #0
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <SystemInit+0xf4>)
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <SystemInit+0x104>)
 800218c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <SystemInit+0xf4>)
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <SystemInit+0xf4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a10      	ldr	r2, [pc, #64]	; (80021dc <SystemInit+0xf4>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <SystemInit+0xf4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <SystemInit+0x108>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <SystemInit+0x10c>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021b2:	d202      	bcs.n	80021ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <SystemInit+0x110>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <SystemInit+0x114>)
 80021bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SystemInit+0xec>)
 80021c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021c8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	52002000 	.word	0x52002000
 80021dc:	58024400 	.word	0x58024400
 80021e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80021e4:	02020200 	.word	0x02020200
 80021e8:	01ff0000 	.word	0x01ff0000
 80021ec:	01010280 	.word	0x01010280
 80021f0:	5c001000 	.word	0x5c001000
 80021f4:	ffff0000 	.word	0xffff0000
 80021f8:	51008108 	.word	0x51008108
 80021fc:	52004000 	.word	0x52004000

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002204:	f7ff ff70 	bl	80020e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800220a:	490d      	ldr	r1, [pc, #52]	; (8002240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002210:	e002      	b.n	8002218 <LoopCopyDataInit>

08002212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002216:	3304      	adds	r3, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800221c:	d3f9      	bcc.n	8002212 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002220:	4c0a      	ldr	r4, [pc, #40]	; (800224c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002224:	e001      	b.n	800222a <LoopFillZerobss>

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002228:	3204      	adds	r2, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222e:	f008 fc8b 	bl	800ab48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7fe f9cd 	bl	80005d0 <main>
  bx  lr
 8002236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002244:	0800b5fc 	.word	0x0800b5fc
  ldr r2, =_sbss
 8002248:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800224c:	200008e0 	.word	0x200008e0

08002250 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC3_IRQHandler>
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225a:	2003      	movs	r0, #3
 800225c:	f000 f968 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002260:	f003 fc98 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_Init+0x68>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	4913      	ldr	r1, [pc, #76]	; (80022c0 <HAL_Init+0x6c>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_Init+0x68>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_Init+0x6c>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_Init+0x70>)
 8002296:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002298:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <HAL_Init+0x74>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800229e:	2000      	movs	r0, #0
 80022a0:	f000 f814 	bl	80022cc <HAL_InitTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e002      	b.n	80022b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022ae:	f7ff f9e3 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	58024400 	.word	0x58024400
 80022c0:	0800b548 	.word	0x0800b548
 80022c4:	20000004 	.word	0x20000004
 80022c8:	20000000 	.word	0x20000000

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_InitTick+0x60>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e021      	b.n	8002324 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_InitTick+0x64>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_InitTick+0x60>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f94d 	bl	8002596 <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 f917 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_InitTick+0x68>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000000c 	.word	0x2000000c
 8002330:	20000000 	.word	0x20000000
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	2000000c 	.word	0x2000000c
 800235c:	200008cc 	.word	0x200008cc

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	200008cc 	.word	0x200008cc

08002378 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_GetREVID+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0c1b      	lsrs	r3, r3, #16
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	5c001000 	.word	0x5c001000

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <__NVIC_SetPriorityGrouping+0x40>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x40>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	05fa0000 	.word	0x05fa0000

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff8e 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff29 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff40 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff90 	bl	8002484 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5f 	bl	8002430 <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff33 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa4 	bl	80024ec <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e054      	b.n	800266c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7f5b      	ldrb	r3, [r3, #29]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff f86a 	bl	80016ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	791b      	ldrb	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_CRC_Init+0xc4>)
 80025ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0218 	bic.w	r2, r2, #24
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	e00c      	b.n	800261a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	461a      	mov	r2, r3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f834 	bl	8002678 <HAL_CRCEx_Polynomial_Set>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e028      	b.n	800266c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	795b      	ldrb	r3, [r3, #5]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
 800262a:	611a      	str	r2, [r3, #16]
 800262c:	e004      	b.n	8002638 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6912      	ldr	r2, [r2, #16]
 8002636:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	04c11db7 	.word	0x04c11db7

08002678 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002688:	231f      	movs	r3, #31
 800268a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800268c:	bf00      	nop
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	613a      	str	r2, [r7, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_CRCEx_Polynomial_Set+0x34>
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_CRCEx_Polynomial_Set+0x16>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b18      	cmp	r3, #24
 80026b0:	d846      	bhi.n	8002740 <HAL_CRCEx_Polynomial_Set+0xc8>
 80026b2:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	08002747 	.word	0x08002747
 80026bc:	08002741 	.word	0x08002741
 80026c0:	08002741 	.word	0x08002741
 80026c4:	08002741 	.word	0x08002741
 80026c8:	08002741 	.word	0x08002741
 80026cc:	08002741 	.word	0x08002741
 80026d0:	08002741 	.word	0x08002741
 80026d4:	08002741 	.word	0x08002741
 80026d8:	08002735 	.word	0x08002735
 80026dc:	08002741 	.word	0x08002741
 80026e0:	08002741 	.word	0x08002741
 80026e4:	08002741 	.word	0x08002741
 80026e8:	08002741 	.word	0x08002741
 80026ec:	08002741 	.word	0x08002741
 80026f0:	08002741 	.word	0x08002741
 80026f4:	08002741 	.word	0x08002741
 80026f8:	08002729 	.word	0x08002729
 80026fc:	08002741 	.word	0x08002741
 8002700:	08002741 	.word	0x08002741
 8002704:	08002741 	.word	0x08002741
 8002708:	08002741 	.word	0x08002741
 800270c:	08002741 	.word	0x08002741
 8002710:	08002741 	.word	0x08002741
 8002714:	08002741 	.word	0x08002741
 8002718:	0800271d 	.word	0x0800271d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d913      	bls.n	800274a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002726:	e010      	b.n	800274a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b07      	cmp	r3, #7
 800272c:	d90f      	bls.n	800274e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002732:	e00c      	b.n	800274e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	d90b      	bls.n	8002752 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800273e:	e008      	b.n	8002752 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]
      break;
 8002744:	e006      	b.n	8002754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002746:	bf00      	nop
 8002748:	e004      	b.n	8002754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800274a:	bf00      	nop
 800274c:	e002      	b.n	8002754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800274e:	bf00      	nop
 8002750:	e000      	b.n	8002754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002752:	bf00      	nop
  }
  if (status == HAL_OK)
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10d      	bne.n	8002776 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 0118 	bic.w	r1, r3, #24
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
}
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff fde8 	bl	8002360 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e316      	b.n	8002dca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_DMA_Init+0x1b8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d04a      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_DMA_Init+0x1bc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d045      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a63      	ldr	r2, [pc, #396]	; (8002944 <HAL_DMA_Init+0x1c0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d040      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a62      	ldr	r2, [pc, #392]	; (8002948 <HAL_DMA_Init+0x1c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d03b      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a60      	ldr	r2, [pc, #384]	; (800294c <HAL_DMA_Init+0x1c8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d036      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5f      	ldr	r2, [pc, #380]	; (8002950 <HAL_DMA_Init+0x1cc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d031      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_DMA_Init+0x1d0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d02c      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5c      	ldr	r2, [pc, #368]	; (8002958 <HAL_DMA_Init+0x1d4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d027      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5a      	ldr	r2, [pc, #360]	; (800295c <HAL_DMA_Init+0x1d8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d022      	beq.n	800283c <HAL_DMA_Init+0xb8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a59      	ldr	r2, [pc, #356]	; (8002960 <HAL_DMA_Init+0x1dc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d01d      	beq.n	800283c <HAL_DMA_Init+0xb8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a57      	ldr	r2, [pc, #348]	; (8002964 <HAL_DMA_Init+0x1e0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_DMA_Init+0xb8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a56      	ldr	r2, [pc, #344]	; (8002968 <HAL_DMA_Init+0x1e4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_DMA_Init+0xb8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a54      	ldr	r2, [pc, #336]	; (800296c <HAL_DMA_Init+0x1e8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_DMA_Init+0xb8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a53      	ldr	r2, [pc, #332]	; (8002970 <HAL_DMA_Init+0x1ec>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_DMA_Init+0xb8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_DMA_Init+0x1f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_DMA_Init+0xb8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a50      	ldr	r2, [pc, #320]	; (8002978 <HAL_DMA_Init+0x1f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_DMA_Init+0xbc>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_DMA_Init+0xbe>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 813b 	beq.w	8002abe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a37      	ldr	r2, [pc, #220]	; (800293c <HAL_DMA_Init+0x1b8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d04a      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a36      	ldr	r2, [pc, #216]	; (8002940 <HAL_DMA_Init+0x1bc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d045      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a34      	ldr	r2, [pc, #208]	; (8002944 <HAL_DMA_Init+0x1c0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d040      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a33      	ldr	r2, [pc, #204]	; (8002948 <HAL_DMA_Init+0x1c4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d03b      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a31      	ldr	r2, [pc, #196]	; (800294c <HAL_DMA_Init+0x1c8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d036      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a30      	ldr	r2, [pc, #192]	; (8002950 <HAL_DMA_Init+0x1cc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d031      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2e      	ldr	r2, [pc, #184]	; (8002954 <HAL_DMA_Init+0x1d0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d02c      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <HAL_DMA_Init+0x1d4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d027      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_DMA_Init+0x1d8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d022      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <HAL_DMA_Init+0x1dc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d01d      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a28      	ldr	r2, [pc, #160]	; (8002964 <HAL_DMA_Init+0x1e0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d018      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a27      	ldr	r2, [pc, #156]	; (8002968 <HAL_DMA_Init+0x1e4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a25      	ldr	r2, [pc, #148]	; (800296c <HAL_DMA_Init+0x1e8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00e      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a24      	ldr	r2, [pc, #144]	; (8002970 <HAL_DMA_Init+0x1ec>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d009      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <HAL_DMA_Init+0x1f0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_DMA_Init+0x174>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a21      	ldr	r2, [pc, #132]	; (8002978 <HAL_DMA_Init+0x1f4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <HAL_DMA_Init+0x186>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e007      	b.n	800291a <HAL_DMA_Init+0x196>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800291a:	e02f      	b.n	800297c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800291c:	f7ff fd20 	bl	8002360 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b05      	cmp	r3, #5
 8002928:	d928      	bls.n	800297c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2203      	movs	r2, #3
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e246      	b.n	8002dca <HAL_DMA_Init+0x646>
 800293c:	40020010 	.word	0x40020010
 8002940:	40020028 	.word	0x40020028
 8002944:	40020040 	.word	0x40020040
 8002948:	40020058 	.word	0x40020058
 800294c:	40020070 	.word	0x40020070
 8002950:	40020088 	.word	0x40020088
 8002954:	400200a0 	.word	0x400200a0
 8002958:	400200b8 	.word	0x400200b8
 800295c:	40020410 	.word	0x40020410
 8002960:	40020428 	.word	0x40020428
 8002964:	40020440 	.word	0x40020440
 8002968:	40020458 	.word	0x40020458
 800296c:	40020470 	.word	0x40020470
 8002970:	40020488 	.word	0x40020488
 8002974:	400204a0 	.word	0x400204a0
 8002978:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1c8      	bne.n	800291c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4b83      	ldr	r3, [pc, #524]	; (8002ba4 <HAL_DMA_Init+0x420>)
 8002996:	4013      	ands	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80029a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d107      	bne.n	80029e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4313      	orrs	r3, r2
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029e0:	4b71      	ldr	r3, [pc, #452]	; (8002ba8 <HAL_DMA_Init+0x424>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b71      	ldr	r3, [pc, #452]	; (8002bac <HAL_DMA_Init+0x428>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ec:	d328      	bcc.n	8002a40 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b28      	cmp	r3, #40	; 0x28
 80029f4:	d903      	bls.n	80029fe <HAL_DMA_Init+0x27a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b2e      	cmp	r3, #46	; 0x2e
 80029fc:	d917      	bls.n	8002a2e <HAL_DMA_Init+0x2aa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b3e      	cmp	r3, #62	; 0x3e
 8002a04:	d903      	bls.n	8002a0e <HAL_DMA_Init+0x28a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b42      	cmp	r3, #66	; 0x42
 8002a0c:	d90f      	bls.n	8002a2e <HAL_DMA_Init+0x2aa>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b46      	cmp	r3, #70	; 0x46
 8002a14:	d903      	bls.n	8002a1e <HAL_DMA_Init+0x29a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b48      	cmp	r3, #72	; 0x48
 8002a1c:	d907      	bls.n	8002a2e <HAL_DMA_Init+0x2aa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b4e      	cmp	r3, #78	; 0x4e
 8002a24:	d905      	bls.n	8002a32 <HAL_DMA_Init+0x2ae>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b52      	cmp	r3, #82	; 0x52
 8002a2c:	d801      	bhi.n	8002a32 <HAL_DMA_Init+0x2ae>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_DMA_Init+0x2b0>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d117      	bne.n	8002a9a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00e      	beq.n	8002a9a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f001 ff1b 	bl	80048b8 <DMA_CheckFifoParam>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2240      	movs	r2, #64	; 0x40
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e197      	b.n	8002dca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 fe56 	bl	8004754 <DMA_CalcBaseAndBitshift>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	223f      	movs	r2, #63	; 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e0cd      	b.n	8002c5a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a3b      	ldr	r2, [pc, #236]	; (8002bb0 <HAL_DMA_Init+0x42c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_Init+0x38a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a39      	ldr	r2, [pc, #228]	; (8002bb4 <HAL_DMA_Init+0x430>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01d      	beq.n	8002b0e <HAL_DMA_Init+0x38a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <HAL_DMA_Init+0x434>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d018      	beq.n	8002b0e <HAL_DMA_Init+0x38a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a36      	ldr	r2, [pc, #216]	; (8002bbc <HAL_DMA_Init+0x438>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_DMA_Init+0x38a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <HAL_DMA_Init+0x43c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Init+0x38a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a33      	ldr	r2, [pc, #204]	; (8002bc4 <HAL_DMA_Init+0x440>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_DMA_Init+0x38a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a32      	ldr	r2, [pc, #200]	; (8002bc8 <HAL_DMA_Init+0x444>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_DMA_Init+0x38a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <HAL_DMA_Init+0x448>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Init+0x38e>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_DMA_Init+0x390>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8097 	beq.w	8002c48 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <HAL_DMA_Init+0x42c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d021      	beq.n	8002b68 <HAL_DMA_Init+0x3e4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <HAL_DMA_Init+0x430>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01c      	beq.n	8002b68 <HAL_DMA_Init+0x3e4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_DMA_Init+0x434>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d017      	beq.n	8002b68 <HAL_DMA_Init+0x3e4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_DMA_Init+0x438>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d012      	beq.n	8002b68 <HAL_DMA_Init+0x3e4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_DMA_Init+0x43c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00d      	beq.n	8002b68 <HAL_DMA_Init+0x3e4>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_DMA_Init+0x440>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d008      	beq.n	8002b68 <HAL_DMA_Init+0x3e4>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_DMA_Init+0x444>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <HAL_DMA_Init+0x3e4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_DMA_Init+0x448>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_DMA_Init+0x44c>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d020      	beq.n	8002bd4 <HAL_DMA_Init+0x450>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d102      	bne.n	8002ba0 <HAL_DMA_Init+0x41c>
 8002b9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b9e:	e01a      	b.n	8002bd6 <HAL_DMA_Init+0x452>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e018      	b.n	8002bd6 <HAL_DMA_Init+0x452>
 8002ba4:	fe10803f 	.word	0xfe10803f
 8002ba8:	5c001000 	.word	0x5c001000
 8002bac:	ffff0000 	.word	0xffff0000
 8002bb0:	58025408 	.word	0x58025408
 8002bb4:	5802541c 	.word	0x5802541c
 8002bb8:	58025430 	.word	0x58025430
 8002bbc:	58025444 	.word	0x58025444
 8002bc0:	58025458 	.word	0x58025458
 8002bc4:	5802546c 	.word	0x5802546c
 8002bc8:	58025480 	.word	0x58025480
 8002bcc:	58025494 	.word	0x58025494
 8002bd0:	fffe000f 	.word	0xfffe000f
 8002bd4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b6e      	ldr	r3, [pc, #440]	; (8002dd4 <HAL_DMA_Init+0x650>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_DMA_Init+0x654>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f001 fd91 	bl	8004754 <DMA_CalcBaseAndBitshift>
 8002c32:	4603      	mov	r3, r0
 8002c34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2201      	movs	r2, #1
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	e008      	b.n	8002c5a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2203      	movs	r2, #3
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0b7      	b.n	8002dca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a5f      	ldr	r2, [pc, #380]	; (8002ddc <HAL_DMA_Init+0x658>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d072      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a5d      	ldr	r2, [pc, #372]	; (8002de0 <HAL_DMA_Init+0x65c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d06d      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a5c      	ldr	r2, [pc, #368]	; (8002de4 <HAL_DMA_Init+0x660>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d068      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5a      	ldr	r2, [pc, #360]	; (8002de8 <HAL_DMA_Init+0x664>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d063      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a59      	ldr	r2, [pc, #356]	; (8002dec <HAL_DMA_Init+0x668>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d05e      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a57      	ldr	r2, [pc, #348]	; (8002df0 <HAL_DMA_Init+0x66c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d059      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a56      	ldr	r2, [pc, #344]	; (8002df4 <HAL_DMA_Init+0x670>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d054      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <HAL_DMA_Init+0x674>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d04f      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a53      	ldr	r2, [pc, #332]	; (8002dfc <HAL_DMA_Init+0x678>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04a      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a51      	ldr	r2, [pc, #324]	; (8002e00 <HAL_DMA_Init+0x67c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d045      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a50      	ldr	r2, [pc, #320]	; (8002e04 <HAL_DMA_Init+0x680>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d040      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <HAL_DMA_Init+0x684>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4d      	ldr	r2, [pc, #308]	; (8002e0c <HAL_DMA_Init+0x688>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d036      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_DMA_Init+0x68c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_DMA_Init+0x690>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02c      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a48      	ldr	r2, [pc, #288]	; (8002e18 <HAL_DMA_Init+0x694>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d027      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a47      	ldr	r2, [pc, #284]	; (8002e1c <HAL_DMA_Init+0x698>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <HAL_DMA_Init+0x69c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a44      	ldr	r2, [pc, #272]	; (8002e24 <HAL_DMA_Init+0x6a0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a42      	ldr	r2, [pc, #264]	; (8002e28 <HAL_DMA_Init+0x6a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a41      	ldr	r2, [pc, #260]	; (8002e2c <HAL_DMA_Init+0x6a8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3f      	ldr	r2, [pc, #252]	; (8002e30 <HAL_DMA_Init+0x6ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3e      	ldr	r2, [pc, #248]	; (8002e34 <HAL_DMA_Init+0x6b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_Init+0x5c6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <HAL_DMA_Init+0x6b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Init+0x5ca>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_DMA_Init+0x5cc>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d032      	beq.n	8002dba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f001 fe2b 	bl	80049b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b80      	cmp	r3, #128	; 0x80
 8002d60:	d102      	bne.n	8002d68 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_DMA_Init+0x624>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d80c      	bhi.n	8002da8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f001 fea8 	bl	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	e008      	b.n	8002dba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	a7fdabf8 	.word	0xa7fdabf8
 8002dd8:	cccccccd 	.word	0xcccccccd
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
 8002e1c:	58025408 	.word	0x58025408
 8002e20:	5802541c 	.word	0x5802541c
 8002e24:	58025430 	.word	0x58025430
 8002e28:	58025444 	.word	0x58025444
 8002e2c:	58025458 	.word	0x58025458
 8002e30:	5802546c 	.word	0x5802546c
 8002e34:	58025480 	.word	0x58025480
 8002e38:	58025494 	.word	0x58025494

08002e3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff fa8c 	bl	8002360 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e2dc      	b.n	800340e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d008      	beq.n	8002e72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e2cd      	b.n	800340e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a76      	ldr	r2, [pc, #472]	; (8003050 <HAL_DMA_Abort+0x214>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d04a      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a74      	ldr	r2, [pc, #464]	; (8003054 <HAL_DMA_Abort+0x218>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d045      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a73      	ldr	r2, [pc, #460]	; (8003058 <HAL_DMA_Abort+0x21c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d040      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a71      	ldr	r2, [pc, #452]	; (800305c <HAL_DMA_Abort+0x220>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d03b      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a70      	ldr	r2, [pc, #448]	; (8003060 <HAL_DMA_Abort+0x224>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d036      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_DMA_Abort+0x228>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d031      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6d      	ldr	r2, [pc, #436]	; (8003068 <HAL_DMA_Abort+0x22c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d02c      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6b      	ldr	r2, [pc, #428]	; (800306c <HAL_DMA_Abort+0x230>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d027      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6a      	ldr	r2, [pc, #424]	; (8003070 <HAL_DMA_Abort+0x234>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a68      	ldr	r2, [pc, #416]	; (8003074 <HAL_DMA_Abort+0x238>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01d      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a67      	ldr	r2, [pc, #412]	; (8003078 <HAL_DMA_Abort+0x23c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d018      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_DMA_Abort+0x240>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a64      	ldr	r2, [pc, #400]	; (8003080 <HAL_DMA_Abort+0x244>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a62      	ldr	r2, [pc, #392]	; (8003084 <HAL_DMA_Abort+0x248>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a61      	ldr	r2, [pc, #388]	; (8003088 <HAL_DMA_Abort+0x24c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5f      	ldr	r2, [pc, #380]	; (800308c <HAL_DMA_Abort+0x250>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_DMA_Abort+0xda>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_DMA_Abort+0xdc>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 021e 	bic.w	r2, r2, #30
 8002f2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e00a      	b.n	8002f5a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 020e 	bic.w	r2, r2, #14
 8002f52:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <HAL_DMA_Abort+0x214>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d072      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <HAL_DMA_Abort+0x218>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d06d      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a39      	ldr	r2, [pc, #228]	; (8003058 <HAL_DMA_Abort+0x21c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d068      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_DMA_Abort+0x220>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d063      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a36      	ldr	r2, [pc, #216]	; (8003060 <HAL_DMA_Abort+0x224>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d05e      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a34      	ldr	r2, [pc, #208]	; (8003064 <HAL_DMA_Abort+0x228>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d059      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a33      	ldr	r2, [pc, #204]	; (8003068 <HAL_DMA_Abort+0x22c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d054      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_DMA_Abort+0x230>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d04f      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a30      	ldr	r2, [pc, #192]	; (8003070 <HAL_DMA_Abort+0x234>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2e      	ldr	r2, [pc, #184]	; (8003074 <HAL_DMA_Abort+0x238>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_DMA_Abort+0x23c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	; (800307c <HAL_DMA_Abort+0x240>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_DMA_Abort+0x244>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_DMA_Abort+0x248>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_DMA_Abort+0x24c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_DMA_Abort+0x250>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_DMA_Abort+0x254>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_DMA_Abort+0x258>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a21      	ldr	r2, [pc, #132]	; (8003098 <HAL_DMA_Abort+0x25c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_DMA_Abort+0x260>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_DMA_Abort+0x264>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_DMA_Abort+0x268>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_DMA_Abort+0x26c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_DMA_Abort+0x270>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d132      	bne.n	80030b0 <HAL_DMA_Abort+0x274>
 800304a:	2301      	movs	r3, #1
 800304c:	e031      	b.n	80030b2 <HAL_DMA_Abort+0x276>
 800304e:	bf00      	nop
 8003050:	40020010 	.word	0x40020010
 8003054:	40020028 	.word	0x40020028
 8003058:	40020040 	.word	0x40020040
 800305c:	40020058 	.word	0x40020058
 8003060:	40020070 	.word	0x40020070
 8003064:	40020088 	.word	0x40020088
 8003068:	400200a0 	.word	0x400200a0
 800306c:	400200b8 	.word	0x400200b8
 8003070:	40020410 	.word	0x40020410
 8003074:	40020428 	.word	0x40020428
 8003078:	40020440 	.word	0x40020440
 800307c:	40020458 	.word	0x40020458
 8003080:	40020470 	.word	0x40020470
 8003084:	40020488 	.word	0x40020488
 8003088:	400204a0 	.word	0x400204a0
 800308c:	400204b8 	.word	0x400204b8
 8003090:	58025408 	.word	0x58025408
 8003094:	5802541c 	.word	0x5802541c
 8003098:	58025430 	.word	0x58025430
 800309c:	58025444 	.word	0x58025444
 80030a0:	58025458 	.word	0x58025458
 80030a4:	5802546c 	.word	0x5802546c
 80030a8:	58025480 	.word	0x58025480
 80030ac:	58025494 	.word	0x58025494
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6d      	ldr	r2, [pc, #436]	; (8003280 <HAL_DMA_Abort+0x444>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d04a      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6b      	ldr	r2, [pc, #428]	; (8003284 <HAL_DMA_Abort+0x448>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d045      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <HAL_DMA_Abort+0x44c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d040      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a68      	ldr	r2, [pc, #416]	; (800328c <HAL_DMA_Abort+0x450>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d03b      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_DMA_Abort+0x454>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d036      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_DMA_Abort+0x458>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d031      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_DMA_Abort+0x45c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d02c      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_DMA_Abort+0x460>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d027      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a61      	ldr	r2, [pc, #388]	; (80032a0 <HAL_DMA_Abort+0x464>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_DMA_Abort+0x468>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01d      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <HAL_DMA_Abort+0x46c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d018      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <HAL_DMA_Abort+0x470>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <HAL_DMA_Abort+0x474>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00e      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_DMA_Abort+0x478>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d009      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <HAL_DMA_Abort+0x47c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_DMA_Abort+0x480>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <HAL_DMA_Abort+0x33c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e007      	b.n	8003188 <HAL_DMA_Abort+0x34c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003188:	e013      	b.n	80031b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff f8e9 	bl	8002360 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d90c      	bls.n	80031b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e12d      	b.n	800340e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e5      	bne.n	800318a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <HAL_DMA_Abort+0x444>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04a      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_DMA_Abort+0x448>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d045      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <HAL_DMA_Abort+0x44c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d040      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <HAL_DMA_Abort+0x450>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d03b      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a29      	ldr	r2, [pc, #164]	; (8003290 <HAL_DMA_Abort+0x454>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d036      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <HAL_DMA_Abort+0x458>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d031      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a26      	ldr	r2, [pc, #152]	; (8003298 <HAL_DMA_Abort+0x45c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d02c      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a24      	ldr	r2, [pc, #144]	; (800329c <HAL_DMA_Abort+0x460>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d027      	beq.n	800325e <HAL_DMA_Abort+0x422>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a23      	ldr	r2, [pc, #140]	; (80032a0 <HAL_DMA_Abort+0x464>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <HAL_DMA_Abort+0x468>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01d      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a20      	ldr	r2, [pc, #128]	; (80032a8 <HAL_DMA_Abort+0x46c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_DMA_Abort+0x422>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_DMA_Abort+0x470>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_DMA_Abort+0x474>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_DMA_Abort+0x478>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_DMA_Abort+0x422>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_DMA_Abort+0x47c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_DMA_Abort+0x480>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_DMA_Abort+0x426>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_DMA_Abort+0x428>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02b      	beq.n	80032c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	223f      	movs	r2, #63	; 0x3f
 8003278:	409a      	lsls	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	e02a      	b.n	80032d6 <HAL_DMA_Abort+0x49a>
 8003280:	40020010 	.word	0x40020010
 8003284:	40020028 	.word	0x40020028
 8003288:	40020040 	.word	0x40020040
 800328c:	40020058 	.word	0x40020058
 8003290:	40020070 	.word	0x40020070
 8003294:	40020088 	.word	0x40020088
 8003298:	400200a0 	.word	0x400200a0
 800329c:	400200b8 	.word	0x400200b8
 80032a0:	40020410 	.word	0x40020410
 80032a4:	40020428 	.word	0x40020428
 80032a8:	40020440 	.word	0x40020440
 80032ac:	40020458 	.word	0x40020458
 80032b0:	40020470 	.word	0x40020470
 80032b4:	40020488 	.word	0x40020488
 80032b8:	400204a0 	.word	0x400204a0
 80032bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4f      	ldr	r2, [pc, #316]	; (8003418 <HAL_DMA_Abort+0x5dc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d072      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	; (800341c <HAL_DMA_Abort+0x5e0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d06d      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a4c      	ldr	r2, [pc, #304]	; (8003420 <HAL_DMA_Abort+0x5e4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d068      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_DMA_Abort+0x5e8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d063      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_DMA_Abort+0x5ec>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d05e      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a47      	ldr	r2, [pc, #284]	; (800342c <HAL_DMA_Abort+0x5f0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d059      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_DMA_Abort+0x5f4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d054      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a44      	ldr	r2, [pc, #272]	; (8003434 <HAL_DMA_Abort+0x5f8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04f      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a43      	ldr	r2, [pc, #268]	; (8003438 <HAL_DMA_Abort+0x5fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d04a      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a41      	ldr	r2, [pc, #260]	; (800343c <HAL_DMA_Abort+0x600>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d045      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a40      	ldr	r2, [pc, #256]	; (8003440 <HAL_DMA_Abort+0x604>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d040      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3e      	ldr	r2, [pc, #248]	; (8003444 <HAL_DMA_Abort+0x608>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d03b      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <HAL_DMA_Abort+0x60c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d036      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3b      	ldr	r2, [pc, #236]	; (800344c <HAL_DMA_Abort+0x610>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <HAL_DMA_Abort+0x614>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d02c      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a38      	ldr	r2, [pc, #224]	; (8003454 <HAL_DMA_Abort+0x618>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d027      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a37      	ldr	r2, [pc, #220]	; (8003458 <HAL_DMA_Abort+0x61c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a35      	ldr	r2, [pc, #212]	; (800345c <HAL_DMA_Abort+0x620>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a34      	ldr	r2, [pc, #208]	; (8003460 <HAL_DMA_Abort+0x624>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a32      	ldr	r2, [pc, #200]	; (8003464 <HAL_DMA_Abort+0x628>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_DMA_Abort+0x62c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <HAL_DMA_Abort+0x630>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <HAL_DMA_Abort+0x634>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <HAL_DMA_Abort+0x638>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_DMA_Abort+0x58e>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_DMA_Abort+0x590>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40020010 	.word	0x40020010
 800341c:	40020028 	.word	0x40020028
 8003420:	40020040 	.word	0x40020040
 8003424:	40020058 	.word	0x40020058
 8003428:	40020070 	.word	0x40020070
 800342c:	40020088 	.word	0x40020088
 8003430:	400200a0 	.word	0x400200a0
 8003434:	400200b8 	.word	0x400200b8
 8003438:	40020410 	.word	0x40020410
 800343c:	40020428 	.word	0x40020428
 8003440:	40020440 	.word	0x40020440
 8003444:	40020458 	.word	0x40020458
 8003448:	40020470 	.word	0x40020470
 800344c:	40020488 	.word	0x40020488
 8003450:	400204a0 	.word	0x400204a0
 8003454:	400204b8 	.word	0x400204b8
 8003458:	58025408 	.word	0x58025408
 800345c:	5802541c 	.word	0x5802541c
 8003460:	58025430 	.word	0x58025430
 8003464:	58025444 	.word	0x58025444
 8003468:	58025458 	.word	0x58025458
 800346c:	5802546c 	.word	0x5802546c
 8003470:	58025480 	.word	0x58025480
 8003474:	58025494 	.word	0x58025494

08003478 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e205      	b.n	8003896 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d004      	beq.n	80034a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e1fa      	b.n	8003896 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a8c      	ldr	r2, [pc, #560]	; (80036d8 <HAL_DMA_Abort_IT+0x260>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d04a      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a8b      	ldr	r2, [pc, #556]	; (80036dc <HAL_DMA_Abort_IT+0x264>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d045      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a89      	ldr	r2, [pc, #548]	; (80036e0 <HAL_DMA_Abort_IT+0x268>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d040      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a88      	ldr	r2, [pc, #544]	; (80036e4 <HAL_DMA_Abort_IT+0x26c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d03b      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a86      	ldr	r2, [pc, #536]	; (80036e8 <HAL_DMA_Abort_IT+0x270>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d036      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a85      	ldr	r2, [pc, #532]	; (80036ec <HAL_DMA_Abort_IT+0x274>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d031      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a83      	ldr	r2, [pc, #524]	; (80036f0 <HAL_DMA_Abort_IT+0x278>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d02c      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a82      	ldr	r2, [pc, #520]	; (80036f4 <HAL_DMA_Abort_IT+0x27c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d027      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a80      	ldr	r2, [pc, #512]	; (80036f8 <HAL_DMA_Abort_IT+0x280>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d022      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7f      	ldr	r2, [pc, #508]	; (80036fc <HAL_DMA_Abort_IT+0x284>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d01d      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7d      	ldr	r2, [pc, #500]	; (8003700 <HAL_DMA_Abort_IT+0x288>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d018      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7c      	ldr	r2, [pc, #496]	; (8003704 <HAL_DMA_Abort_IT+0x28c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7a      	ldr	r2, [pc, #488]	; (8003708 <HAL_DMA_Abort_IT+0x290>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a79      	ldr	r2, [pc, #484]	; (800370c <HAL_DMA_Abort_IT+0x294>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a77      	ldr	r2, [pc, #476]	; (8003710 <HAL_DMA_Abort_IT+0x298>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a76      	ldr	r2, [pc, #472]	; (8003714 <HAL_DMA_Abort_IT+0x29c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_DMA_Abort_IT+0xcc>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_DMA_Abort_IT+0xce>
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d065      	beq.n	8003616 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <HAL_DMA_Abort_IT+0x260>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d04a      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5e      	ldr	r2, [pc, #376]	; (80036dc <HAL_DMA_Abort_IT+0x264>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d045      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <HAL_DMA_Abort_IT+0x268>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d040      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a5b      	ldr	r2, [pc, #364]	; (80036e4 <HAL_DMA_Abort_IT+0x26c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d03b      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a5a      	ldr	r2, [pc, #360]	; (80036e8 <HAL_DMA_Abort_IT+0x270>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d036      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_DMA_Abort_IT+0x274>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d031      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <HAL_DMA_Abort_IT+0x278>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d02c      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a55      	ldr	r2, [pc, #340]	; (80036f4 <HAL_DMA_Abort_IT+0x27c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d027      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a54      	ldr	r2, [pc, #336]	; (80036f8 <HAL_DMA_Abort_IT+0x280>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d022      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_DMA_Abort_IT+0x284>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01d      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a51      	ldr	r2, [pc, #324]	; (8003700 <HAL_DMA_Abort_IT+0x288>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d018      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a4f      	ldr	r2, [pc, #316]	; (8003704 <HAL_DMA_Abort_IT+0x28c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4e      	ldr	r2, [pc, #312]	; (8003708 <HAL_DMA_Abort_IT+0x290>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a4c      	ldr	r2, [pc, #304]	; (800370c <HAL_DMA_Abort_IT+0x294>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4b      	ldr	r2, [pc, #300]	; (8003710 <HAL_DMA_Abort_IT+0x298>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x17a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a49      	ldr	r2, [pc, #292]	; (8003714 <HAL_DMA_Abort_IT+0x29c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d108      	bne.n	8003604 <HAL_DMA_Abort_IT+0x18c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e147      	b.n	8003894 <HAL_DMA_Abort_IT+0x41c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e13e      	b.n	8003894 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 020e 	bic.w	r2, r2, #14
 8003624:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <HAL_DMA_Abort_IT+0x260>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d04a      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_DMA_Abort_IT+0x264>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d045      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <HAL_DMA_Abort_IT+0x268>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d040      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_DMA_Abort_IT+0x26c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d03b      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_DMA_Abort_IT+0x270>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d036      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_DMA_Abort_IT+0x274>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d031      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_DMA_Abort_IT+0x278>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d02c      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <HAL_DMA_Abort_IT+0x27c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d027      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_DMA_Abort_IT+0x280>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_DMA_Abort_IT+0x284>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01d      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_DMA_Abort_IT+0x288>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <HAL_DMA_Abort_IT+0x28c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_DMA_Abort_IT+0x290>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <HAL_DMA_Abort_IT+0x294>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a16      	ldr	r2, [pc, #88]	; (8003710 <HAL_DMA_Abort_IT+0x298>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_DMA_Abort_IT+0x29c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d128      	bne.n	8003718 <HAL_DMA_Abort_IT+0x2a0>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e027      	b.n	8003728 <HAL_DMA_Abort_IT+0x2b0>
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a5c      	ldr	r2, [pc, #368]	; (80038a0 <HAL_DMA_Abort_IT+0x428>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d072      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5b      	ldr	r2, [pc, #364]	; (80038a4 <HAL_DMA_Abort_IT+0x42c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d06d      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a59      	ldr	r2, [pc, #356]	; (80038a8 <HAL_DMA_Abort_IT+0x430>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d068      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_DMA_Abort_IT+0x434>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d063      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a56      	ldr	r2, [pc, #344]	; (80038b0 <HAL_DMA_Abort_IT+0x438>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d05e      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a55      	ldr	r2, [pc, #340]	; (80038b4 <HAL_DMA_Abort_IT+0x43c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d059      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a53      	ldr	r2, [pc, #332]	; (80038b8 <HAL_DMA_Abort_IT+0x440>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d054      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_DMA_Abort_IT+0x444>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d04f      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_DMA_Abort_IT+0x448>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d04a      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <HAL_DMA_Abort_IT+0x44c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d045      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a4d      	ldr	r2, [pc, #308]	; (80038c8 <HAL_DMA_Abort_IT+0x450>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d040      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a4c      	ldr	r2, [pc, #304]	; (80038cc <HAL_DMA_Abort_IT+0x454>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d03b      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a4a      	ldr	r2, [pc, #296]	; (80038d0 <HAL_DMA_Abort_IT+0x458>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d036      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a49      	ldr	r2, [pc, #292]	; (80038d4 <HAL_DMA_Abort_IT+0x45c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d031      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a47      	ldr	r2, [pc, #284]	; (80038d8 <HAL_DMA_Abort_IT+0x460>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02c      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a46      	ldr	r2, [pc, #280]	; (80038dc <HAL_DMA_Abort_IT+0x464>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d027      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a44      	ldr	r2, [pc, #272]	; (80038e0 <HAL_DMA_Abort_IT+0x468>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d022      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <HAL_DMA_Abort_IT+0x46c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d01d      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a41      	ldr	r2, [pc, #260]	; (80038e8 <HAL_DMA_Abort_IT+0x470>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d018      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a40      	ldr	r2, [pc, #256]	; (80038ec <HAL_DMA_Abort_IT+0x474>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a3e      	ldr	r2, [pc, #248]	; (80038f0 <HAL_DMA_Abort_IT+0x478>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00e      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <HAL_DMA_Abort_IT+0x47c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <HAL_DMA_Abort_IT+0x480>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_DMA_Abort_IT+0x3a0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3a      	ldr	r2, [pc, #232]	; (80038fc <HAL_DMA_Abort_IT+0x484>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_DMA_Abort_IT+0x3a4>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <HAL_DMA_Abort_IT+0x3a6>
 800381c:	2300      	movs	r3, #0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d028      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003830:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003850:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003868:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003872:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40020010 	.word	0x40020010
 80038a4:	40020028 	.word	0x40020028
 80038a8:	40020040 	.word	0x40020040
 80038ac:	40020058 	.word	0x40020058
 80038b0:	40020070 	.word	0x40020070
 80038b4:	40020088 	.word	0x40020088
 80038b8:	400200a0 	.word	0x400200a0
 80038bc:	400200b8 	.word	0x400200b8
 80038c0:	40020410 	.word	0x40020410
 80038c4:	40020428 	.word	0x40020428
 80038c8:	40020440 	.word	0x40020440
 80038cc:	40020458 	.word	0x40020458
 80038d0:	40020470 	.word	0x40020470
 80038d4:	40020488 	.word	0x40020488
 80038d8:	400204a0 	.word	0x400204a0
 80038dc:	400204b8 	.word	0x400204b8
 80038e0:	58025408 	.word	0x58025408
 80038e4:	5802541c 	.word	0x5802541c
 80038e8:	58025430 	.word	0x58025430
 80038ec:	58025444 	.word	0x58025444
 80038f0:	58025458 	.word	0x58025458
 80038f4:	5802546c 	.word	0x5802546c
 80038f8:	58025480 	.word	0x58025480
 80038fc:	58025494 	.word	0x58025494

08003900 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800390c:	4b67      	ldr	r3, [pc, #412]	; (8003aac <HAL_DMA_IRQHandler+0x1ac>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <HAL_DMA_IRQHandler+0x1b0>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0a9b      	lsrs	r3, r3, #10
 8003918:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5f      	ldr	r2, [pc, #380]	; (8003ab4 <HAL_DMA_IRQHandler+0x1b4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d04a      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5d      	ldr	r2, [pc, #372]	; (8003ab8 <HAL_DMA_IRQHandler+0x1b8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d045      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a5c      	ldr	r2, [pc, #368]	; (8003abc <HAL_DMA_IRQHandler+0x1bc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d040      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a5a      	ldr	r2, [pc, #360]	; (8003ac0 <HAL_DMA_IRQHandler+0x1c0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d03b      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a59      	ldr	r2, [pc, #356]	; (8003ac4 <HAL_DMA_IRQHandler+0x1c4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d036      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <HAL_DMA_IRQHandler+0x1c8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d031      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a56      	ldr	r2, [pc, #344]	; (8003acc <HAL_DMA_IRQHandler+0x1cc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d02c      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a54      	ldr	r2, [pc, #336]	; (8003ad0 <HAL_DMA_IRQHandler+0x1d0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d027      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a53      	ldr	r2, [pc, #332]	; (8003ad4 <HAL_DMA_IRQHandler+0x1d4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a51      	ldr	r2, [pc, #324]	; (8003ad8 <HAL_DMA_IRQHandler+0x1d8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01d      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a50      	ldr	r2, [pc, #320]	; (8003adc <HAL_DMA_IRQHandler+0x1dc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a4e      	ldr	r2, [pc, #312]	; (8003ae0 <HAL_DMA_IRQHandler+0x1e0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a4d      	ldr	r2, [pc, #308]	; (8003ae4 <HAL_DMA_IRQHandler+0x1e4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a4b      	ldr	r2, [pc, #300]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <HAL_DMA_IRQHandler+0x1ec>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xd2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a48      	ldr	r2, [pc, #288]	; (8003af0 <HAL_DMA_IRQHandler+0x1f0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_IRQHandler+0xd6>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_DMA_IRQHandler+0xd8>
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 842b 	beq.w	8004234 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	2208      	movs	r2, #8
 80039e8:	409a      	lsls	r2, r3
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a2 	beq.w	8003b38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2e      	ldr	r2, [pc, #184]	; (8003ab4 <HAL_DMA_IRQHandler+0x1b4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d04a      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2d      	ldr	r2, [pc, #180]	; (8003ab8 <HAL_DMA_IRQHandler+0x1b8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d045      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_DMA_IRQHandler+0x1bc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d040      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_DMA_IRQHandler+0x1c0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d03b      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a28      	ldr	r2, [pc, #160]	; (8003ac4 <HAL_DMA_IRQHandler+0x1c4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d036      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_DMA_IRQHandler+0x1c8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d031      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <HAL_DMA_IRQHandler+0x1cc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02c      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d027      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_DMA_IRQHandler+0x1d4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d01d      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_DMA_IRQHandler+0x1dc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_DMA_IRQHandler+0x1ec>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x194>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d12f      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x1f4>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	e02e      	b.n	8003b08 <HAL_DMA_IRQHandler+0x208>
 8003aaa:	bf00      	nop
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	1b4e81b5 	.word	0x1b4e81b5
 8003ab4:	40020010 	.word	0x40020010
 8003ab8:	40020028 	.word	0x40020028
 8003abc:	40020040 	.word	0x40020040
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020070 	.word	0x40020070
 8003ac8:	40020088 	.word	0x40020088
 8003acc:	400200a0 	.word	0x400200a0
 8003ad0:	400200b8 	.word	0x400200b8
 8003ad4:	40020410 	.word	0x40020410
 8003ad8:	40020428 	.word	0x40020428
 8003adc:	40020440 	.word	0x40020440
 8003ae0:	40020458 	.word	0x40020458
 8003ae4:	40020470 	.word	0x40020470
 8003ae8:	40020488 	.word	0x40020488
 8003aec:	400204a0 	.word	0x400204a0
 8003af0:	400204b8 	.word	0x400204b8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0204 	bic.w	r2, r2, #4
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2208      	movs	r2, #8
 8003b26:	409a      	lsls	r2, r3
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d06e      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a69      	ldr	r2, [pc, #420]	; (8003cf8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d04a      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a67      	ldr	r2, [pc, #412]	; (8003cfc <HAL_DMA_IRQHandler+0x3fc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d045      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a66      	ldr	r2, [pc, #408]	; (8003d00 <HAL_DMA_IRQHandler+0x400>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d040      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a64      	ldr	r2, [pc, #400]	; (8003d04 <HAL_DMA_IRQHandler+0x404>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a63      	ldr	r2, [pc, #396]	; (8003d08 <HAL_DMA_IRQHandler+0x408>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a61      	ldr	r2, [pc, #388]	; (8003d0c <HAL_DMA_IRQHandler+0x40c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a60      	ldr	r2, [pc, #384]	; (8003d10 <HAL_DMA_IRQHandler+0x410>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5e      	ldr	r2, [pc, #376]	; (8003d14 <HAL_DMA_IRQHandler+0x414>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d027      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5d      	ldr	r2, [pc, #372]	; (8003d18 <HAL_DMA_IRQHandler+0x418>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a5b      	ldr	r2, [pc, #364]	; (8003d1c <HAL_DMA_IRQHandler+0x41c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a5a      	ldr	r2, [pc, #360]	; (8003d20 <HAL_DMA_IRQHandler+0x420>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a58      	ldr	r2, [pc, #352]	; (8003d24 <HAL_DMA_IRQHandler+0x424>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a57      	ldr	r2, [pc, #348]	; (8003d28 <HAL_DMA_IRQHandler+0x428>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a55      	ldr	r2, [pc, #340]	; (8003d2c <HAL_DMA_IRQHandler+0x42c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a54      	ldr	r2, [pc, #336]	; (8003d30 <HAL_DMA_IRQHandler+0x430>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2ee>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a52      	ldr	r2, [pc, #328]	; (8003d34 <HAL_DMA_IRQHandler+0x434>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10a      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x304>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e003      	b.n	8003c0c <HAL_DMA_IRQHandler+0x30c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2201      	movs	r2, #1
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2204      	movs	r2, #4
 8003c36:	409a      	lsls	r2, r3
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 808f 	beq.w	8003d60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <HAL_DMA_IRQHandler+0x3f8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d04a      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <HAL_DMA_IRQHandler+0x3fc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d045      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a29      	ldr	r2, [pc, #164]	; (8003d00 <HAL_DMA_IRQHandler+0x400>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d040      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <HAL_DMA_IRQHandler+0x404>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d03b      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_DMA_IRQHandler+0x408>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d036      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <HAL_DMA_IRQHandler+0x40c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d031      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a23      	ldr	r2, [pc, #140]	; (8003d10 <HAL_DMA_IRQHandler+0x410>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d02c      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_DMA_IRQHandler+0x414>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d027      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <HAL_DMA_IRQHandler+0x418>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_DMA_IRQHandler+0x41c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_DMA_IRQHandler+0x420>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d018      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_DMA_IRQHandler+0x424>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <HAL_DMA_IRQHandler+0x428>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_DMA_IRQHandler+0x42c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_DMA_IRQHandler+0x430>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x3e2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_DMA_IRQHandler+0x434>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d12a      	bne.n	8003d38 <HAL_DMA_IRQHandler+0x438>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e023      	b.n	8003d40 <HAL_DMA_IRQHandler+0x440>
 8003cf8:	40020010 	.word	0x40020010
 8003cfc:	40020028 	.word	0x40020028
 8003d00:	40020040 	.word	0x40020040
 8003d04:	40020058 	.word	0x40020058
 8003d08:	40020070 	.word	0x40020070
 8003d0c:	40020088 	.word	0x40020088
 8003d10:	400200a0 	.word	0x400200a0
 8003d14:	400200b8 	.word	0x400200b8
 8003d18:	40020410 	.word	0x40020410
 8003d1c:	40020428 	.word	0x40020428
 8003d20:	40020440 	.word	0x40020440
 8003d24:	40020458 	.word	0x40020458
 8003d28:	40020470 	.word	0x40020470
 8003d2c:	40020488 	.word	0x40020488
 8003d30:	400204a0 	.word	0x400204a0
 8003d34:	400204b8 	.word	0x400204b8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00d      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	f043 0204 	orr.w	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2210      	movs	r2, #16
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a6 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a85      	ldr	r2, [pc, #532]	; (8003f90 <HAL_DMA_IRQHandler+0x690>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d04a      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a83      	ldr	r2, [pc, #524]	; (8003f94 <HAL_DMA_IRQHandler+0x694>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d045      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a82      	ldr	r2, [pc, #520]	; (8003f98 <HAL_DMA_IRQHandler+0x698>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d040      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a80      	ldr	r2, [pc, #512]	; (8003f9c <HAL_DMA_IRQHandler+0x69c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d03b      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7f      	ldr	r2, [pc, #508]	; (8003fa0 <HAL_DMA_IRQHandler+0x6a0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d036      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a7d      	ldr	r2, [pc, #500]	; (8003fa4 <HAL_DMA_IRQHandler+0x6a4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d031      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7c      	ldr	r2, [pc, #496]	; (8003fa8 <HAL_DMA_IRQHandler+0x6a8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d02c      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a7a      	ldr	r2, [pc, #488]	; (8003fac <HAL_DMA_IRQHandler+0x6ac>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d027      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a79      	ldr	r2, [pc, #484]	; (8003fb0 <HAL_DMA_IRQHandler+0x6b0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d022      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a77      	ldr	r2, [pc, #476]	; (8003fb4 <HAL_DMA_IRQHandler+0x6b4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01d      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a76      	ldr	r2, [pc, #472]	; (8003fb8 <HAL_DMA_IRQHandler+0x6b8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d018      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a74      	ldr	r2, [pc, #464]	; (8003fbc <HAL_DMA_IRQHandler+0x6bc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a73      	ldr	r2, [pc, #460]	; (8003fc0 <HAL_DMA_IRQHandler+0x6c0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00e      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a71      	ldr	r2, [pc, #452]	; (8003fc4 <HAL_DMA_IRQHandler+0x6c4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d009      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a70      	ldr	r2, [pc, #448]	; (8003fc8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x516>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6e      	ldr	r2, [pc, #440]	; (8003fcc <HAL_DMA_IRQHandler+0x6cc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10a      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x52c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e009      	b.n	8003e40 <HAL_DMA_IRQHandler+0x540>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d03e      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d018      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d108      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d024      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
 8003e80:	e01f      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01b      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
 8003e92:	e016      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d107      	bne.n	8003eb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0208 	bic.w	r2, r2, #8
 8003eb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2220      	movs	r2, #32
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8110 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <HAL_DMA_IRQHandler+0x690>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d04a      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <HAL_DMA_IRQHandler+0x694>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d045      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <HAL_DMA_IRQHandler+0x698>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d040      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <HAL_DMA_IRQHandler+0x69c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d03b      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <HAL_DMA_IRQHandler+0x6a0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d036      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <HAL_DMA_IRQHandler+0x6a4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d031      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <HAL_DMA_IRQHandler+0x6a8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_DMA_IRQHandler+0x6ac>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <HAL_DMA_IRQHandler+0x6b0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_DMA_IRQHandler+0x6b4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01d      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_DMA_IRQHandler+0x6b8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_DMA_IRQHandler+0x6bc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <HAL_DMA_IRQHandler+0x6c0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <HAL_DMA_IRQHandler+0x6c4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_DMA_IRQHandler+0x6c8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x678>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <HAL_DMA_IRQHandler+0x6cc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d12b      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x6d0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e02a      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x6e4>
 8003f8e:	bf00      	nop
 8003f90:	40020010 	.word	0x40020010
 8003f94:	40020028 	.word	0x40020028
 8003f98:	40020040 	.word	0x40020040
 8003f9c:	40020058 	.word	0x40020058
 8003fa0:	40020070 	.word	0x40020070
 8003fa4:	40020088 	.word	0x40020088
 8003fa8:	400200a0 	.word	0x400200a0
 8003fac:	400200b8 	.word	0x400200b8
 8003fb0:	40020410 	.word	0x40020410
 8003fb4:	40020428 	.word	0x40020428
 8003fb8:	40020440 	.word	0x40020440
 8003fbc:	40020458 	.word	0x40020458
 8003fc0:	40020470 	.word	0x40020470
 8003fc4:	40020488 	.word	0x40020488
 8003fc8:	400204a0 	.word	0x400204a0
 8003fcc:	400204b8 	.word	0x400204b8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8087 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b04      	cmp	r3, #4
 8004004:	d139      	bne.n	800407a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0216 	bic.w	r2, r2, #22
 8004014:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004024:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <HAL_DMA_IRQHandler+0x736>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0208 	bic.w	r2, r2, #8
 8004044:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	223f      	movs	r2, #63	; 0x3f
 8004050:	409a      	lsls	r2, r3
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 834a 	beq.w	8004704 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
          }
          return;
 8004078:	e344      	b.n	8004704 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d018      	beq.n	80040ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d108      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	2b00      	cmp	r3, #0
 800409c:	d02c      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
 80040a6:	e027      	b.n	80040f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
 80040b8:	e01e      	b.n	80040f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10f      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0210 	bic.w	r2, r2, #16
 80040d6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8306 	beq.w	800470e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8088 	beq.w	8004220 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2204      	movs	r2, #4
 8004114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a7a      	ldr	r2, [pc, #488]	; (8004308 <HAL_DMA_IRQHandler+0xa08>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d04a      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a79      	ldr	r2, [pc, #484]	; (800430c <HAL_DMA_IRQHandler+0xa0c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d045      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a77      	ldr	r2, [pc, #476]	; (8004310 <HAL_DMA_IRQHandler+0xa10>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d040      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a76      	ldr	r2, [pc, #472]	; (8004314 <HAL_DMA_IRQHandler+0xa14>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d03b      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a74      	ldr	r2, [pc, #464]	; (8004318 <HAL_DMA_IRQHandler+0xa18>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d036      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a73      	ldr	r2, [pc, #460]	; (800431c <HAL_DMA_IRQHandler+0xa1c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d031      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a71      	ldr	r2, [pc, #452]	; (8004320 <HAL_DMA_IRQHandler+0xa20>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02c      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a70      	ldr	r2, [pc, #448]	; (8004324 <HAL_DMA_IRQHandler+0xa24>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d027      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6e      	ldr	r2, [pc, #440]	; (8004328 <HAL_DMA_IRQHandler+0xa28>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d022      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6d      	ldr	r2, [pc, #436]	; (800432c <HAL_DMA_IRQHandler+0xa2c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d01d      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a6b      	ldr	r2, [pc, #428]	; (8004330 <HAL_DMA_IRQHandler+0xa30>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a6a      	ldr	r2, [pc, #424]	; (8004334 <HAL_DMA_IRQHandler+0xa34>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a68      	ldr	r2, [pc, #416]	; (8004338 <HAL_DMA_IRQHandler+0xa38>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a67      	ldr	r2, [pc, #412]	; (800433c <HAL_DMA_IRQHandler+0xa3c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a65      	ldr	r2, [pc, #404]	; (8004340 <HAL_DMA_IRQHandler+0xa40>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x8b8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a64      	ldr	r2, [pc, #400]	; (8004344 <HAL_DMA_IRQHandler+0xa44>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <HAL_DMA_IRQHandler+0x8ca>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e007      	b.n	80041da <HAL_DMA_IRQHandler+0x8da>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d307      	bcc.n	80041f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f2      	bne.n	80041da <HAL_DMA_IRQHandler+0x8da>
 80041f4:	e000      	b.n	80041f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041f6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2203      	movs	r2, #3
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004216:	e003      	b.n	8004220 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8272 	beq.w	800470e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
 8004232:	e26c      	b.n	800470e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a43      	ldr	r2, [pc, #268]	; (8004348 <HAL_DMA_IRQHandler+0xa48>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_IRQHandler+0x984>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a42      	ldr	r2, [pc, #264]	; (800434c <HAL_DMA_IRQHandler+0xa4c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_IRQHandler+0x984>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a40      	ldr	r2, [pc, #256]	; (8004350 <HAL_DMA_IRQHandler+0xa50>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_IRQHandler+0x984>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a3f      	ldr	r2, [pc, #252]	; (8004354 <HAL_DMA_IRQHandler+0xa54>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_IRQHandler+0x984>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a3d      	ldr	r2, [pc, #244]	; (8004358 <HAL_DMA_IRQHandler+0xa58>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_IRQHandler+0x984>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3c      	ldr	r2, [pc, #240]	; (800435c <HAL_DMA_IRQHandler+0xa5c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_IRQHandler+0x984>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <HAL_DMA_IRQHandler+0xa60>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_IRQHandler+0x984>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a39      	ldr	r2, [pc, #228]	; (8004364 <HAL_DMA_IRQHandler+0xa64>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_DMA_IRQHandler+0x988>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_DMA_IRQHandler+0x98a>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 823f 	beq.w	800470e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2204      	movs	r2, #4
 80042a2:	409a      	lsls	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80cd 	beq.w	8004448 <HAL_DMA_IRQHandler+0xb48>
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80c7 	beq.w	8004448 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2204      	movs	r2, #4
 80042c4:	409a      	lsls	r2, r3
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d049      	beq.n	8004368 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8210 	beq.w	8004708 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f0:	e20a      	b.n	8004708 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8206 	beq.w	8004708 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004304:	e200      	b.n	8004708 <HAL_DMA_IRQHandler+0xe08>
 8004306:	bf00      	nop
 8004308:	40020010 	.word	0x40020010
 800430c:	40020028 	.word	0x40020028
 8004310:	40020040 	.word	0x40020040
 8004314:	40020058 	.word	0x40020058
 8004318:	40020070 	.word	0x40020070
 800431c:	40020088 	.word	0x40020088
 8004320:	400200a0 	.word	0x400200a0
 8004324:	400200b8 	.word	0x400200b8
 8004328:	40020410 	.word	0x40020410
 800432c:	40020428 	.word	0x40020428
 8004330:	40020440 	.word	0x40020440
 8004334:	40020458 	.word	0x40020458
 8004338:	40020470 	.word	0x40020470
 800433c:	40020488 	.word	0x40020488
 8004340:	400204a0 	.word	0x400204a0
 8004344:	400204b8 	.word	0x400204b8
 8004348:	58025408 	.word	0x58025408
 800434c:	5802541c 	.word	0x5802541c
 8004350:	58025430 	.word	0x58025430
 8004354:	58025444 	.word	0x58025444
 8004358:	58025458 	.word	0x58025458
 800435c:	5802546c 	.word	0x5802546c
 8004360:	58025480 	.word	0x58025480
 8004364:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d160      	bne.n	8004434 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a8c      	ldr	r2, [pc, #560]	; (80045a8 <HAL_DMA_IRQHandler+0xca8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d04a      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a8a      	ldr	r2, [pc, #552]	; (80045ac <HAL_DMA_IRQHandler+0xcac>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d045      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a89      	ldr	r2, [pc, #548]	; (80045b0 <HAL_DMA_IRQHandler+0xcb0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d040      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a87      	ldr	r2, [pc, #540]	; (80045b4 <HAL_DMA_IRQHandler+0xcb4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d03b      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a86      	ldr	r2, [pc, #536]	; (80045b8 <HAL_DMA_IRQHandler+0xcb8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d036      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a84      	ldr	r2, [pc, #528]	; (80045bc <HAL_DMA_IRQHandler+0xcbc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d031      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a83      	ldr	r2, [pc, #524]	; (80045c0 <HAL_DMA_IRQHandler+0xcc0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d02c      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a81      	ldr	r2, [pc, #516]	; (80045c4 <HAL_DMA_IRQHandler+0xcc4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d027      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a80      	ldr	r2, [pc, #512]	; (80045c8 <HAL_DMA_IRQHandler+0xcc8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7e      	ldr	r2, [pc, #504]	; (80045cc <HAL_DMA_IRQHandler+0xccc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01d      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7d      	ldr	r2, [pc, #500]	; (80045d0 <HAL_DMA_IRQHandler+0xcd0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a7b      	ldr	r2, [pc, #492]	; (80045d4 <HAL_DMA_IRQHandler+0xcd4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a7a      	ldr	r2, [pc, #488]	; (80045d8 <HAL_DMA_IRQHandler+0xcd8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a78      	ldr	r2, [pc, #480]	; (80045dc <HAL_DMA_IRQHandler+0xcdc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a77      	ldr	r2, [pc, #476]	; (80045e0 <HAL_DMA_IRQHandler+0xce0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_DMA_IRQHandler+0xb12>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a75      	ldr	r2, [pc, #468]	; (80045e4 <HAL_DMA_IRQHandler+0xce4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d108      	bne.n	8004424 <HAL_DMA_IRQHandler+0xb24>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0208 	bic.w	r2, r2, #8
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e007      	b.n	8004434 <HAL_DMA_IRQHandler+0xb34>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8165 	beq.w	8004708 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004446:	e15f      	b.n	8004708 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2202      	movs	r2, #2
 8004452:	409a      	lsls	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80c5 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xce8>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80bf 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2202      	movs	r2, #2
 8004474:	409a      	lsls	r2, r3
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 813a 	beq.w	800470c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a0:	e134      	b.n	800470c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8130 	beq.w	800470c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b4:	e12a      	b.n	800470c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d168      	bne.n	8004592 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a38      	ldr	r2, [pc, #224]	; (80045a8 <HAL_DMA_IRQHandler+0xca8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04a      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a37      	ldr	r2, [pc, #220]	; (80045ac <HAL_DMA_IRQHandler+0xcac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d045      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <HAL_DMA_IRQHandler+0xcb0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d040      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <HAL_DMA_IRQHandler+0xcb4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03b      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a32      	ldr	r2, [pc, #200]	; (80045b8 <HAL_DMA_IRQHandler+0xcb8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d036      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a31      	ldr	r2, [pc, #196]	; (80045bc <HAL_DMA_IRQHandler+0xcbc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d031      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <HAL_DMA_IRQHandler+0xcc0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d02c      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2e      	ldr	r2, [pc, #184]	; (80045c4 <HAL_DMA_IRQHandler+0xcc4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d027      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <HAL_DMA_IRQHandler+0xcc8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d022      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <HAL_DMA_IRQHandler+0xccc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_DMA_IRQHandler+0xcd0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <HAL_DMA_IRQHandler+0xcd4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <HAL_DMA_IRQHandler+0xcd8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a25      	ldr	r2, [pc, #148]	; (80045dc <HAL_DMA_IRQHandler+0xcdc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <HAL_DMA_IRQHandler+0xce0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_DMA_IRQHandler+0xc60>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <HAL_DMA_IRQHandler+0xce4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d108      	bne.n	8004572 <HAL_DMA_IRQHandler+0xc72>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0214 	bic.w	r2, r2, #20
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e007      	b.n	8004582 <HAL_DMA_IRQHandler+0xc82>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 020a 	bic.w	r2, r2, #10
 8004580:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80b8 	beq.w	800470c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a4:	e0b2      	b.n	800470c <HAL_DMA_IRQHandler+0xe0c>
 80045a6:	bf00      	nop
 80045a8:	40020010 	.word	0x40020010
 80045ac:	40020028 	.word	0x40020028
 80045b0:	40020040 	.word	0x40020040
 80045b4:	40020058 	.word	0x40020058
 80045b8:	40020070 	.word	0x40020070
 80045bc:	40020088 	.word	0x40020088
 80045c0:	400200a0 	.word	0x400200a0
 80045c4:	400200b8 	.word	0x400200b8
 80045c8:	40020410 	.word	0x40020410
 80045cc:	40020428 	.word	0x40020428
 80045d0:	40020440 	.word	0x40020440
 80045d4:	40020458 	.word	0x40020458
 80045d8:	40020470 	.word	0x40020470
 80045dc:	40020488 	.word	0x40020488
 80045e0:	400204a0 	.word	0x400204a0
 80045e4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2208      	movs	r2, #8
 80045f2:	409a      	lsls	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8088 	beq.w	800470e <HAL_DMA_IRQHandler+0xe0e>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8082 	beq.w	800470e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a41      	ldr	r2, [pc, #260]	; (8004714 <HAL_DMA_IRQHandler+0xe14>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d04a      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3f      	ldr	r2, [pc, #252]	; (8004718 <HAL_DMA_IRQHandler+0xe18>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d045      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a3e      	ldr	r2, [pc, #248]	; (800471c <HAL_DMA_IRQHandler+0xe1c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d040      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3c      	ldr	r2, [pc, #240]	; (8004720 <HAL_DMA_IRQHandler+0xe20>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d03b      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <HAL_DMA_IRQHandler+0xe24>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d036      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a39      	ldr	r2, [pc, #228]	; (8004728 <HAL_DMA_IRQHandler+0xe28>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d031      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_DMA_IRQHandler+0xe2c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d02c      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a36      	ldr	r2, [pc, #216]	; (8004730 <HAL_DMA_IRQHandler+0xe30>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d027      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a35      	ldr	r2, [pc, #212]	; (8004734 <HAL_DMA_IRQHandler+0xe34>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a33      	ldr	r2, [pc, #204]	; (8004738 <HAL_DMA_IRQHandler+0xe38>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01d      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a32      	ldr	r2, [pc, #200]	; (800473c <HAL_DMA_IRQHandler+0xe3c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a30      	ldr	r2, [pc, #192]	; (8004740 <HAL_DMA_IRQHandler+0xe40>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2f      	ldr	r2, [pc, #188]	; (8004744 <HAL_DMA_IRQHandler+0xe44>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <HAL_DMA_IRQHandler+0xe48>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <HAL_DMA_IRQHandler+0xe4c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_IRQHandler+0xdaa>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2a      	ldr	r2, [pc, #168]	; (8004750 <HAL_DMA_IRQHandler+0xe50>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d108      	bne.n	80046bc <HAL_DMA_IRQHandler+0xdbc>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 021c 	bic.w	r2, r2, #28
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e007      	b.n	80046cc <HAL_DMA_IRQHandler+0xdcc>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 020e 	bic.w	r2, r2, #14
 80046ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2201      	movs	r2, #1
 80046d6:	409a      	lsls	r2, r3
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
 8004702:	e004      	b.n	800470e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004704:	bf00      	nop
 8004706:	e002      	b.n	800470e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004708:	bf00      	nop
 800470a:	e000      	b.n	800470e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800470c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40020010 	.word	0x40020010
 8004718:	40020028 	.word	0x40020028
 800471c:	40020040 	.word	0x40020040
 8004720:	40020058 	.word	0x40020058
 8004724:	40020070 	.word	0x40020070
 8004728:	40020088 	.word	0x40020088
 800472c:	400200a0 	.word	0x400200a0
 8004730:	400200b8 	.word	0x400200b8
 8004734:	40020410 	.word	0x40020410
 8004738:	40020428 	.word	0x40020428
 800473c:	40020440 	.word	0x40020440
 8004740:	40020458 	.word	0x40020458
 8004744:	40020470 	.word	0x40020470
 8004748:	40020488 	.word	0x40020488
 800474c:	400204a0 	.word	0x400204a0
 8004750:	400204b8 	.word	0x400204b8

08004754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a42      	ldr	r2, [pc, #264]	; (800486c <DMA_CalcBaseAndBitshift+0x118>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d04a      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a41      	ldr	r2, [pc, #260]	; (8004870 <DMA_CalcBaseAndBitshift+0x11c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d045      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a3f      	ldr	r2, [pc, #252]	; (8004874 <DMA_CalcBaseAndBitshift+0x120>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d040      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <DMA_CalcBaseAndBitshift+0x124>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d03b      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a3c      	ldr	r2, [pc, #240]	; (800487c <DMA_CalcBaseAndBitshift+0x128>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d036      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3b      	ldr	r2, [pc, #236]	; (8004880 <DMA_CalcBaseAndBitshift+0x12c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d031      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a39      	ldr	r2, [pc, #228]	; (8004884 <DMA_CalcBaseAndBitshift+0x130>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02c      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a38      	ldr	r2, [pc, #224]	; (8004888 <DMA_CalcBaseAndBitshift+0x134>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d027      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a36      	ldr	r2, [pc, #216]	; (800488c <DMA_CalcBaseAndBitshift+0x138>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d022      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a35      	ldr	r2, [pc, #212]	; (8004890 <DMA_CalcBaseAndBitshift+0x13c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d01d      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a33      	ldr	r2, [pc, #204]	; (8004894 <DMA_CalcBaseAndBitshift+0x140>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d018      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a32      	ldr	r2, [pc, #200]	; (8004898 <DMA_CalcBaseAndBitshift+0x144>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a30      	ldr	r2, [pc, #192]	; (800489c <DMA_CalcBaseAndBitshift+0x148>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2f      	ldr	r2, [pc, #188]	; (80048a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d009      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2d      	ldr	r2, [pc, #180]	; (80048a4 <DMA_CalcBaseAndBitshift+0x150>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <DMA_CalcBaseAndBitshift+0xa8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2c      	ldr	r2, [pc, #176]	; (80048a8 <DMA_CalcBaseAndBitshift+0x154>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <DMA_CalcBaseAndBitshift+0xac>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <DMA_CalcBaseAndBitshift+0xae>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d024      	beq.n	8004850 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3b10      	subs	r3, #16
 800480e:	4a27      	ldr	r2, [pc, #156]	; (80048ac <DMA_CalcBaseAndBitshift+0x158>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004820:	5cd3      	ldrb	r3, [r2, r3]
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d908      	bls.n	8004840 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <DMA_CalcBaseAndBitshift+0x160>)
 8004836:	4013      	ands	r3, r2
 8004838:	1d1a      	adds	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	659a      	str	r2, [r3, #88]	; 0x58
 800483e:	e00d      	b.n	800485c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <DMA_CalcBaseAndBitshift+0x160>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6593      	str	r3, [r2, #88]	; 0x58
 800484e:	e005      	b.n	800485c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40020010 	.word	0x40020010
 8004870:	40020028 	.word	0x40020028
 8004874:	40020040 	.word	0x40020040
 8004878:	40020058 	.word	0x40020058
 800487c:	40020070 	.word	0x40020070
 8004880:	40020088 	.word	0x40020088
 8004884:	400200a0 	.word	0x400200a0
 8004888:	400200b8 	.word	0x400200b8
 800488c:	40020410 	.word	0x40020410
 8004890:	40020428 	.word	0x40020428
 8004894:	40020440 	.word	0x40020440
 8004898:	40020458 	.word	0x40020458
 800489c:	40020470 	.word	0x40020470
 80048a0:	40020488 	.word	0x40020488
 80048a4:	400204a0 	.word	0x400204a0
 80048a8:	400204b8 	.word	0x400204b8
 80048ac:	aaaaaaab 	.word	0xaaaaaaab
 80048b0:	0800b558 	.word	0x0800b558
 80048b4:	fffffc00 	.word	0xfffffc00

080048b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d120      	bne.n	800490e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d858      	bhi.n	8004986 <DMA_CheckFifoParam+0xce>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <DMA_CheckFifoParam+0x24>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048ff 	.word	0x080048ff
 80048e4:	080048ed 	.word	0x080048ed
 80048e8:	08004987 	.word	0x08004987
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d048      	beq.n	800498a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048fc:	e045      	b.n	800498a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004906:	d142      	bne.n	800498e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800490c:	e03f      	b.n	800498e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004916:	d123      	bne.n	8004960 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	2b03      	cmp	r3, #3
 800491e:	d838      	bhi.n	8004992 <DMA_CheckFifoParam+0xda>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <DMA_CheckFifoParam+0x70>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004939 	.word	0x08004939
 800492c:	0800493f 	.word	0x0800493f
 8004930:	08004939 	.word	0x08004939
 8004934:	08004951 	.word	0x08004951
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
        break;
 800493c:	e030      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d025      	beq.n	8004996 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800494e:	e022      	b.n	8004996 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004958:	d11f      	bne.n	800499a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800495e:	e01c      	b.n	800499a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	2b02      	cmp	r3, #2
 8004966:	d902      	bls.n	800496e <DMA_CheckFifoParam+0xb6>
 8004968:	2b03      	cmp	r3, #3
 800496a:	d003      	beq.n	8004974 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800496c:	e018      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
        break;
 8004972:	e015      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00e      	beq.n	800499e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
    break;
 8004984:	e00b      	b.n	800499e <DMA_CheckFifoParam+0xe6>
        break;
 8004986:	bf00      	nop
 8004988:	e00a      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
        break;
 800498a:	bf00      	nop
 800498c:	e008      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
        break;
 800498e:	bf00      	nop
 8004990:	e006      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
        break;
 8004992:	bf00      	nop
 8004994:	e004      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
        break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
        break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <DMA_CheckFifoParam+0xe8>
    break;
 800499e:	bf00      	nop
    }
  }

  return status;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop

080049b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a36      	ldr	r2, [pc, #216]	; (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a35      	ldr	r2, [pc, #212]	; (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a33      	ldr	r2, [pc, #204]	; (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a32      	ldr	r2, [pc, #200]	; (8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a30      	ldr	r2, [pc, #192]	; (8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2d      	ldr	r2, [pc, #180]	; (8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01a      	beq.n	8004a4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	3b08      	subs	r3, #8
 8004a20:	4a28      	ldr	r2, [pc, #160]	; (8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a24      	ldr	r2, [pc, #144]	; (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2201      	movs	r2, #1
 8004a46:	409a      	lsls	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a4c:	e024      	b.n	8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3b10      	subs	r3, #16
 8004a56:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d806      	bhi.n	8004a76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d902      	bls.n	8004a76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3308      	adds	r3, #8
 8004a74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4b18      	ldr	r3, [pc, #96]	; (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	461a      	mov	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	58025408 	.word	0x58025408
 8004aa8:	5802541c 	.word	0x5802541c
 8004aac:	58025430 	.word	0x58025430
 8004ab0:	58025444 	.word	0x58025444
 8004ab4:	58025458 	.word	0x58025458
 8004ab8:	5802546c 	.word	0x5802546c
 8004abc:	58025480 	.word	0x58025480
 8004ac0:	58025494 	.word	0x58025494
 8004ac4:	cccccccd 	.word	0xcccccccd
 8004ac8:	16009600 	.word	0x16009600
 8004acc:	58025880 	.word	0x58025880
 8004ad0:	aaaaaaab 	.word	0xaaaaaaab
 8004ad4:	400204b8 	.word	0x400204b8
 8004ad8:	4002040f 	.word	0x4002040f
 8004adc:	10008200 	.word	0x10008200
 8004ae0:	40020880 	.word	0x40020880

08004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d04a      	beq.n	8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d847      	bhi.n	8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a25      	ldr	r2, [pc, #148]	; (8004b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d022      	beq.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a24      	ldr	r2, [pc, #144]	; (8004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d01d      	beq.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b6c:	671a      	str	r2, [r3, #112]	; 0x70
 8004b6e:	e009      	b.n	8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a11      	ldr	r2, [pc, #68]	; (8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	2201      	movs	r2, #1
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	58025408 	.word	0x58025408
 8004ba0:	5802541c 	.word	0x5802541c
 8004ba4:	58025430 	.word	0x58025430
 8004ba8:	58025444 	.word	0x58025444
 8004bac:	58025458 	.word	0x58025458
 8004bb0:	5802546c 	.word	0x5802546c
 8004bb4:	58025480 	.word	0x58025480
 8004bb8:	58025494 	.word	0x58025494
 8004bbc:	1600963f 	.word	0x1600963f
 8004bc0:	58025940 	.word	0x58025940
 8004bc4:	1000823f 	.word	0x1000823f
 8004bc8:	40020940 	.word	0x40020940

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b089      	sub	sp, #36	; 0x24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bda:	4b89      	ldr	r3, [pc, #548]	; (8004e00 <HAL_GPIO_Init+0x234>)
 8004bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bde:	e194      	b.n	8004f0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8186 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d00b      	beq.n	8004c18 <HAL_GPIO_Init+0x4c>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d007      	beq.n	8004c18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c0c:	2b11      	cmp	r3, #17
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b12      	cmp	r3, #18
 8004c16:	d130      	bne.n	8004c7a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	2203      	movs	r2, #3
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4e:	2201      	movs	r2, #1
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0201 	and.w	r2, r3, #1
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	2203      	movs	r2, #3
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0xee>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b12      	cmp	r3, #18
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80e0 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d62:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <HAL_GPIO_Init+0x23c>)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	3302      	adds	r3, #2
 8004d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	220f      	movs	r2, #15
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_GPIO_Init+0x240>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d052      	beq.n	8004e34 <HAL_GPIO_Init+0x268>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_GPIO_Init+0x244>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <HAL_GPIO_Init+0x22e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <HAL_GPIO_Init+0x248>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d02b      	beq.n	8004df6 <HAL_GPIO_Init+0x22a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_GPIO_Init+0x24c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d025      	beq.n	8004df2 <HAL_GPIO_Init+0x226>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <HAL_GPIO_Init+0x250>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <HAL_GPIO_Init+0x222>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <HAL_GPIO_Init+0x254>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d019      	beq.n	8004dea <HAL_GPIO_Init+0x21e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_GPIO_Init+0x258>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_GPIO_Init+0x21a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_GPIO_Init+0x25c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00d      	beq.n	8004de2 <HAL_GPIO_Init+0x216>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_GPIO_Init+0x260>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <HAL_GPIO_Init+0x212>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <HAL_GPIO_Init+0x264>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_GPIO_Init+0x20e>
 8004dd6:	2309      	movs	r3, #9
 8004dd8:	e02d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dda:	230a      	movs	r3, #10
 8004ddc:	e02b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dde:	2308      	movs	r3, #8
 8004de0:	e029      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de2:	2307      	movs	r3, #7
 8004de4:	e027      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de6:	2306      	movs	r3, #6
 8004de8:	e025      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dea:	2305      	movs	r3, #5
 8004dec:	e023      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dee:	2304      	movs	r3, #4
 8004df0:	e021      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df2:	2303      	movs	r3, #3
 8004df4:	e01f      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e01d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfe:	bf00      	nop
 8004e00:	58000080 	.word	0x58000080
 8004e04:	58024400 	.word	0x58024400
 8004e08:	58000400 	.word	0x58000400
 8004e0c:	58020000 	.word	0x58020000
 8004e10:	58020400 	.word	0x58020400
 8004e14:	58020800 	.word	0x58020800
 8004e18:	58020c00 	.word	0x58020c00
 8004e1c:	58021000 	.word	0x58021000
 8004e20:	58021400 	.word	0x58021400
 8004e24:	58021800 	.word	0x58021800
 8004e28:	58021c00 	.word	0x58021c00
 8004e2c:	58022000 	.word	0x58022000
 8004e30:	58022400 	.word	0x58022400
 8004e34:	2300      	movs	r3, #0
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	f002 0203 	and.w	r2, r2, #3
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	4093      	lsls	r3, r2
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e46:	4938      	ldr	r1, [pc, #224]	; (8004f28 <HAL_GPIO_Init+0x35c>)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f ae63 	bne.w	8004be0 <HAL_GPIO_Init+0x14>
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3724      	adds	r7, #36	; 0x24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	58000400 	.word	0x58000400

08004f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f48:	e003      	b.n	8004f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	041a      	lsls	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	619a      	str	r2, [r3, #24]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	4603      	mov	r3, r0
 8004f66:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fc fb5d 	bl	8001644 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d00a      	beq.n	8004fbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fa8:	4b16      	ldr	r3, [pc, #88]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d001      	beq.n	8004fba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e01f      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e01d      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 0207 	bic.w	r2, r3, #7
 8004fc6:	490f      	ldr	r1, [pc, #60]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004fce:	f7fd f9c7 	bl	8002360 <HAL_GetTick>
 8004fd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fd4:	e009      	b.n	8004fea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fd6:	f7fd f9c3 	bl	8002360 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe4:	d901      	bls.n	8004fea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e007      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	d1ee      	bne.n	8004fd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	58024800 	.word	0x58024800

08005008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e3ff      	b.n	800581a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8087 	beq.w	8005136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005028:	4b99      	ldr	r3, [pc, #612]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005032:	4b97      	ldr	r3, [pc, #604]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	2b10      	cmp	r3, #16
 800503c:	d007      	beq.n	800504e <HAL_RCC_OscConfig+0x46>
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b18      	cmp	r3, #24
 8005042:	d110      	bne.n	8005066 <HAL_RCC_OscConfig+0x5e>
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d10b      	bne.n	8005066 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504e:	4b90      	ldr	r3, [pc, #576]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d06c      	beq.n	8005134 <HAL_RCC_OscConfig+0x12c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d168      	bne.n	8005134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e3d9      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x76>
 8005070:	4b87      	ldr	r3, [pc, #540]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a86      	ldr	r2, [pc, #536]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	e02e      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x98>
 8005086:	4b82      	ldr	r3, [pc, #520]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a81      	ldr	r2, [pc, #516]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800508c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b7f      	ldr	r3, [pc, #508]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7e      	ldr	r2, [pc, #504]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e01d      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0xbc>
 80050aa:	4b79      	ldr	r3, [pc, #484]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a78      	ldr	r2, [pc, #480]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b76      	ldr	r3, [pc, #472]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a75      	ldr	r2, [pc, #468]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e00b      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 80050c4:	4b72      	ldr	r3, [pc, #456]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a71      	ldr	r2, [pc, #452]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4b6f      	ldr	r3, [pc, #444]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6e      	ldr	r2, [pc, #440]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fd f93c 	bl	8002360 <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ec:	f7fd f938 	bl	8002360 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e38d      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050fe:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0xe4>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fd f928 	bl	8002360 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005114:	f7fd f924 	bl	8002360 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e379      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005126:	4b5a      	ldr	r3, [pc, #360]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x10c>
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80ae 	beq.w	80052a0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005144:	4b52      	ldr	r3, [pc, #328]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800514c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800514e:	4b50      	ldr	r3, [pc, #320]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_RCC_OscConfig+0x162>
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	2b18      	cmp	r3, #24
 800515e:	d13a      	bne.n	80051d6 <HAL_RCC_OscConfig+0x1ce>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d135      	bne.n	80051d6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516a:	4b49      	ldr	r3, [pc, #292]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCC_OscConfig+0x17a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e34b      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005182:	f7fd f8f9 	bl	8002378 <HAL_GetREVID>
 8005186:	4603      	mov	r3, r0
 8005188:	f241 0203 	movw	r2, #4099	; 0x1003
 800518c:	4293      	cmp	r3, r2
 800518e:	d817      	bhi.n	80051c0 <HAL_RCC_OscConfig+0x1b8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d108      	bne.n	80051aa <HAL_RCC_OscConfig+0x1a2>
 8005198:	4b3d      	ldr	r3, [pc, #244]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051a0:	4a3b      	ldr	r2, [pc, #236]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a8:	e07a      	b.n	80052a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	4b39      	ldr	r3, [pc, #228]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	031b      	lsls	r3, r3, #12
 80051b8:	4935      	ldr	r1, [pc, #212]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051be:	e06f      	b.n	80052a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b33      	ldr	r3, [pc, #204]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	4930      	ldr	r1, [pc, #192]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d4:	e064      	b.n	80052a0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d045      	beq.n	800526a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051de:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 0219 	bic.w	r2, r3, #25
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4929      	ldr	r1, [pc, #164]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd f8b6 	bl	8002360 <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fd f8b2 	bl	8002360 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e307      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520a:	4b21      	ldr	r3, [pc, #132]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	f7fd f8af 	bl	8002378 <HAL_GetREVID>
 800521a:	4603      	mov	r3, r0
 800521c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005220:	4293      	cmp	r3, r2
 8005222:	d817      	bhi.n	8005254 <HAL_RCC_OscConfig+0x24c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d108      	bne.n	800523e <HAL_RCC_OscConfig+0x236>
 800522c:	4b18      	ldr	r3, [pc, #96]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	6053      	str	r3, [r2, #4]
 800523c:	e030      	b.n	80052a0 <HAL_RCC_OscConfig+0x298>
 800523e:	4b14      	ldr	r3, [pc, #80]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	031b      	lsls	r3, r3, #12
 800524c:	4910      	ldr	r1, [pc, #64]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
 8005252:	e025      	b.n	80052a0 <HAL_RCC_OscConfig+0x298>
 8005254:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	490b      	ldr	r1, [pc, #44]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
 8005268:	e01a      	b.n	80052a0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a08      	ldr	r2, [pc, #32]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fd f873 	bl	8002360 <HAL_GetTick>
 800527a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800527c:	e00a      	b.n	8005294 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800527e:	f7fd f86f 	bl	8002360 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d903      	bls.n	8005294 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e2c4      	b.n	800581a <HAL_RCC_OscConfig+0x812>
 8005290:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005294:	4ba4      	ldr	r3, [pc, #656]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1ee      	bne.n	800527e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a9 	beq.w	8005400 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ae:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b8:	4b9b      	ldr	r3, [pc, #620]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d007      	beq.n	80052d4 <HAL_RCC_OscConfig+0x2cc>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b18      	cmp	r3, #24
 80052c8:	d13a      	bne.n	8005340 <HAL_RCC_OscConfig+0x338>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d135      	bne.n	8005340 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052d4:	4b94      	ldr	r3, [pc, #592]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_OscConfig+0x2e4>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e296      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052ec:	f7fd f844 	bl	8002378 <HAL_GetREVID>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d817      	bhi.n	800532a <HAL_RCC_OscConfig+0x322>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d108      	bne.n	8005314 <HAL_RCC_OscConfig+0x30c>
 8005302:	4b89      	ldr	r3, [pc, #548]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800530a:	4a87      	ldr	r2, [pc, #540]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800530c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005310:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005312:	e075      	b.n	8005400 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005314:	4b84      	ldr	r3, [pc, #528]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	069b      	lsls	r3, r3, #26
 8005322:	4981      	ldr	r1, [pc, #516]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005328:	e06a      	b.n	8005400 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800532a:	4b7f      	ldr	r3, [pc, #508]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	061b      	lsls	r3, r3, #24
 8005338:	497b      	ldr	r1, [pc, #492]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800533a:	4313      	orrs	r3, r2
 800533c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800533e:	e05f      	b.n	8005400 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d042      	beq.n	80053ce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005348:	4b77      	ldr	r3, [pc, #476]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a76      	ldr	r2, [pc, #472]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fd f804 	bl	8002360 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800535c:	f7fd f800 	bl	8002360 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e255      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800536e:	4b6e      	ldr	r3, [pc, #440]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800537a:	f7fc fffd 	bl	8002378 <HAL_GetREVID>
 800537e:	4603      	mov	r3, r0
 8005380:	f241 0203 	movw	r2, #4099	; 0x1003
 8005384:	4293      	cmp	r3, r2
 8005386:	d817      	bhi.n	80053b8 <HAL_RCC_OscConfig+0x3b0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	2b20      	cmp	r3, #32
 800538e:	d108      	bne.n	80053a2 <HAL_RCC_OscConfig+0x39a>
 8005390:	4b65      	ldr	r3, [pc, #404]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005398:	4a63      	ldr	r2, [pc, #396]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800539a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800539e:	6053      	str	r3, [r2, #4]
 80053a0:	e02e      	b.n	8005400 <HAL_RCC_OscConfig+0x3f8>
 80053a2:	4b61      	ldr	r3, [pc, #388]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	069b      	lsls	r3, r3, #26
 80053b0:	495d      	ldr	r1, [pc, #372]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	604b      	str	r3, [r1, #4]
 80053b6:	e023      	b.n	8005400 <HAL_RCC_OscConfig+0x3f8>
 80053b8:	4b5b      	ldr	r3, [pc, #364]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	4958      	ldr	r1, [pc, #352]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60cb      	str	r3, [r1, #12]
 80053cc:	e018      	b.n	8005400 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053ce:	4b56      	ldr	r3, [pc, #344]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a55      	ldr	r2, [pc, #340]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fc ffc1 	bl	8002360 <HAL_GetTick>
 80053de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80053e2:	f7fc ffbd 	bl	8002360 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e212      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053f4:	4b4c      	ldr	r3, [pc, #304]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d036      	beq.n	800547a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d019      	beq.n	8005448 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005414:	4b44      	ldr	r3, [pc, #272]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	4a43      	ldr	r2, [pc, #268]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fc ff9e 	bl	8002360 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005428:	f7fc ff9a 	bl	8002360 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e1ef      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800543a:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800543c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x420>
 8005446:	e018      	b.n	800547a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005448:	4b37      	ldr	r3, [pc, #220]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800544a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544c:	4a36      	ldr	r2, [pc, #216]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7fc ff84 	bl	8002360 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545c:	f7fc ff80 	bl	8002360 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e1d5      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800546e:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d036      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d019      	beq.n	80054c2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a25      	ldr	r2, [pc, #148]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 8005494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005498:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800549a:	f7fc ff61 	bl	8002360 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80054a2:	f7fc ff5d 	bl	8002360 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e1b2      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054b4:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x49a>
 80054c0:	e018      	b.n	80054f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054c2:	4b19      	ldr	r3, [pc, #100]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80054c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054ce:	f7fc ff47 	bl	8002360 <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80054d6:	f7fc ff43 	bl	8002360 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e198      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <HAL_RCC_OscConfig+0x520>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8085 	beq.w	800560c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_OscConfig+0x524>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <HAL_RCC_OscConfig+0x524>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800550e:	f7fc ff27 	bl	8002360 <HAL_GetTick>
 8005512:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005514:	e00c      	b.n	8005530 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005516:	f7fc ff23 	bl	8002360 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b64      	cmp	r3, #100	; 0x64
 8005522:	d905      	bls.n	8005530 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e178      	b.n	800581a <HAL_RCC_OscConfig+0x812>
 8005528:	58024400 	.word	0x58024400
 800552c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005530:	4b96      	ldr	r3, [pc, #600]	; (800578c <HAL_RCC_OscConfig+0x784>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0ec      	beq.n	8005516 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d106      	bne.n	8005552 <HAL_RCC_OscConfig+0x54a>
 8005544:	4b92      	ldr	r3, [pc, #584]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	4a91      	ldr	r2, [pc, #580]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	; 0x70
 8005550:	e02d      	b.n	80055ae <HAL_RCC_OscConfig+0x5a6>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x56c>
 800555a:	4b8d      	ldr	r3, [pc, #564]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a8c      	ldr	r2, [pc, #560]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a89      	ldr	r2, [pc, #548]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
 8005572:	e01c      	b.n	80055ae <HAL_RCC_OscConfig+0x5a6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d10c      	bne.n	8005596 <HAL_RCC_OscConfig+0x58e>
 800557c:	4b84      	ldr	r3, [pc, #528]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a83      	ldr	r2, [pc, #524]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005582:	f043 0304 	orr.w	r3, r3, #4
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
 8005588:	4b81      	ldr	r3, [pc, #516]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a80      	ldr	r2, [pc, #512]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
 8005594:	e00b      	b.n	80055ae <HAL_RCC_OscConfig+0x5a6>
 8005596:	4b7e      	ldr	r3, [pc, #504]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a7d      	ldr	r2, [pc, #500]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
 80055a2:	4b7b      	ldr	r3, [pc, #492]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a7a      	ldr	r2, [pc, #488]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80055a8:	f023 0304 	bic.w	r3, r3, #4
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d015      	beq.n	80055e2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b6:	f7fc fed3 	bl	8002360 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fc fecf 	bl	8002360 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e122      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d4:	4b6e      	ldr	r3, [pc, #440]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ee      	beq.n	80055be <HAL_RCC_OscConfig+0x5b6>
 80055e0:	e014      	b.n	800560c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e2:	f7fc febd 	bl	8002360 <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fc feb9 	bl	8002360 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e10c      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005600:	4b63      	ldr	r3, [pc, #396]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ee      	bne.n	80055ea <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8101 	beq.w	8005818 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005616:	4b5e      	ldr	r3, [pc, #376]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800561e:	2b18      	cmp	r3, #24
 8005620:	f000 80bc 	beq.w	800579c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2b02      	cmp	r3, #2
 800562a:	f040 8095 	bne.w	8005758 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562e:	4b58      	ldr	r3, [pc, #352]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a57      	ldr	r2, [pc, #348]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fc fe91 	bl	8002360 <HAL_GetTick>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005642:	f7fc fe8d 	bl	8002360 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e0e2      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005654:	4b4e      	ldr	r3, [pc, #312]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005660:	4b4b      	ldr	r3, [pc, #300]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005664:	4b4b      	ldr	r3, [pc, #300]	; (8005794 <HAL_RCC_OscConfig+0x78c>)
 8005666:	4013      	ands	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005670:	0112      	lsls	r2, r2, #4
 8005672:	430a      	orrs	r2, r1
 8005674:	4946      	ldr	r1, [pc, #280]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005676:	4313      	orrs	r3, r2
 8005678:	628b      	str	r3, [r1, #40]	; 0x28
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	3b01      	subs	r3, #1
 8005680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	3b01      	subs	r3, #1
 800568a:	025b      	lsls	r3, r3, #9
 800568c:	b29b      	uxth	r3, r3
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	3b01      	subs	r3, #1
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	3b01      	subs	r3, #1
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056aa:	4939      	ldr	r1, [pc, #228]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80056b0:	4b37      	ldr	r3, [pc, #220]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4a36      	ldr	r2, [pc, #216]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056bc:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <HAL_RCC_OscConfig+0x790>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056c8:	00d2      	lsls	r2, r2, #3
 80056ca:	4931      	ldr	r1, [pc, #196]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056d0:	4b2f      	ldr	r3, [pc, #188]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	f023 020c 	bic.w	r2, r3, #12
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	492c      	ldr	r1, [pc, #176]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056e2:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	f023 0202 	bic.w	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	4928      	ldr	r1, [pc, #160]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056f4:	4b26      	ldr	r3, [pc, #152]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	4a25      	ldr	r2, [pc, #148]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 80056fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005700:	4b23      	ldr	r3, [pc, #140]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800570c:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005724:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a19      	ldr	r2, [pc, #100]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800572a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fc fe16 	bl	8002360 <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005738:	f7fc fe12 	bl	8002360 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e067      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800574a:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x730>
 8005756:	e05f      	b.n	8005818 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a0c      	ldr	r2, [pc, #48]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 800575e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fc fdfc 	bl	8002360 <HAL_GetTick>
 8005768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576c:	f7fc fdf8 	bl	8002360 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e04d      	b.n	800581a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <HAL_RCC_OscConfig+0x788>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x764>
 800578a:	e045      	b.n	8005818 <HAL_RCC_OscConfig+0x810>
 800578c:	58024800 	.word	0x58024800
 8005790:	58024400 	.word	0x58024400
 8005794:	fffffc0c 	.word	0xfffffc0c
 8005798:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800579c:	4b21      	ldr	r3, [pc, #132]	; (8005824 <HAL_RCC_OscConfig+0x81c>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057a2:	4b20      	ldr	r3, [pc, #128]	; (8005824 <HAL_RCC_OscConfig+0x81c>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d031      	beq.n	8005814 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f003 0203 	and.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d12a      	bne.n	8005814 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d122      	bne.n	8005814 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d11a      	bne.n	8005814 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	0a5b      	lsrs	r3, r3, #9
 80057e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d111      	bne.n	8005814 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d108      	bne.n	8005814 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	0e1b      	lsrs	r3, r3, #24
 8005806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3730      	adds	r7, #48	; 0x30
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400

08005828 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e19c      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800583c:	4b8a      	ldr	r3, [pc, #552]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d910      	bls.n	800586c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584a:	4b87      	ldr	r3, [pc, #540]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 020f 	bic.w	r2, r3, #15
 8005852:	4985      	ldr	r1, [pc, #532]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	4b83      	ldr	r3, [pc, #524]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d001      	beq.n	800586c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e184      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	4b7b      	ldr	r3, [pc, #492]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005884:	429a      	cmp	r2, r3
 8005886:	d908      	bls.n	800589a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005888:	4b78      	ldr	r3, [pc, #480]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	4975      	ldr	r1, [pc, #468]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005896:	4313      	orrs	r3, r2
 8005898:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d010      	beq.n	80058c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	4b70      	ldr	r3, [pc, #448]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d908      	bls.n	80058c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058b6:	4b6d      	ldr	r3, [pc, #436]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	496a      	ldr	r1, [pc, #424]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	4b64      	ldr	r3, [pc, #400]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d908      	bls.n	80058f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058e4:	4b61      	ldr	r3, [pc, #388]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	495e      	ldr	r1, [pc, #376]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800590e:	429a      	cmp	r2, r3
 8005910:	d908      	bls.n	8005924 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005912:	4b56      	ldr	r3, [pc, #344]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	4953      	ldr	r1, [pc, #332]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005920:	4313      	orrs	r3, r2
 8005922:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d010      	beq.n	8005952 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	4b4d      	ldr	r3, [pc, #308]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	429a      	cmp	r2, r3
 800593e:	d908      	bls.n	8005952 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005940:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f023 020f 	bic.w	r2, r3, #15
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4947      	ldr	r1, [pc, #284]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 800594e:	4313      	orrs	r3, r2
 8005950:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d055      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800595e:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4940      	ldr	r1, [pc, #256]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 800596c:	4313      	orrs	r3, r2
 800596e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d107      	bne.n	8005988 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005978:	4b3c      	ldr	r3, [pc, #240]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d121      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0f6      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d107      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005990:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d115      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0ea      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059a8:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0de      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059b8:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0d6      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059c8:	4b28      	ldr	r3, [pc, #160]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f023 0207 	bic.w	r2, r3, #7
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4925      	ldr	r1, [pc, #148]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059da:	f7fc fcc1 	bl	8002360 <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e0:	e00a      	b.n	80059f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e2:	f7fc fcbd 	bl	8002360 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e0be      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f8:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d1eb      	bne.n	80059e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d010      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d208      	bcs.n	8005a38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a26:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f023 020f 	bic.w	r2, r3, #15
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	490e      	ldr	r1, [pc, #56]	; (8005a6c <HAL_RCC_ClockConfig+0x244>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d214      	bcs.n	8005a70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 020f 	bic.w	r2, r3, #15
 8005a4e:	4906      	ldr	r1, [pc, #24]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <HAL_RCC_ClockConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e086      	b.n	8005b76 <HAL_RCC_ClockConfig+0x34e>
 8005a68:	52002000 	.word	0x52002000
 8005a6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d208      	bcs.n	8005a9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a8c:	4b3c      	ldr	r3, [pc, #240]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	4939      	ldr	r1, [pc, #228]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d010      	beq.n	8005acc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	4b34      	ldr	r3, [pc, #208]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d208      	bcs.n	8005acc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aba:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	492e      	ldr	r1, [pc, #184]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d010      	beq.n	8005afa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d208      	bcs.n	8005afa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ae8:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	4922      	ldr	r1, [pc, #136]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d010      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d208      	bcs.n	8005b28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b16:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	4917      	ldr	r1, [pc, #92]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b28:	f000 f834 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	4912      	ldr	r1, [pc, #72]	; (8005b84 <HAL_RCC_ClockConfig+0x35c>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
 8005b44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b46:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <HAL_RCC_ClockConfig+0x358>)
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <HAL_RCC_ClockConfig+0x35c>)
 8005b50:	5cd3      	ldrb	r3, [r2, r3]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5c:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <HAL_RCC_ClockConfig+0x360>)
 8005b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b60:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <HAL_RCC_ClockConfig+0x364>)
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <HAL_RCC_ClockConfig+0x368>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fc fbae 	bl	80022cc <HAL_InitTick>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	58024400 	.word	0x58024400
 8005b84:	0800b548 	.word	0x0800b548
 8005b88:	20000004 	.word	0x20000004
 8005b8c:	20000000 	.word	0x20000000
 8005b90:	20000008 	.word	0x20000008

08005b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b9a:	4bb3      	ldr	r3, [pc, #716]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ba2:	2b18      	cmp	r3, #24
 8005ba4:	f200 8155 	bhi.w	8005e52 <HAL_RCC_GetSysClockFreq+0x2be>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005c15 	.word	0x08005c15
 8005bb4:	08005e53 	.word	0x08005e53
 8005bb8:	08005e53 	.word	0x08005e53
 8005bbc:	08005e53 	.word	0x08005e53
 8005bc0:	08005e53 	.word	0x08005e53
 8005bc4:	08005e53 	.word	0x08005e53
 8005bc8:	08005e53 	.word	0x08005e53
 8005bcc:	08005e53 	.word	0x08005e53
 8005bd0:	08005c3b 	.word	0x08005c3b
 8005bd4:	08005e53 	.word	0x08005e53
 8005bd8:	08005e53 	.word	0x08005e53
 8005bdc:	08005e53 	.word	0x08005e53
 8005be0:	08005e53 	.word	0x08005e53
 8005be4:	08005e53 	.word	0x08005e53
 8005be8:	08005e53 	.word	0x08005e53
 8005bec:	08005e53 	.word	0x08005e53
 8005bf0:	08005c41 	.word	0x08005c41
 8005bf4:	08005e53 	.word	0x08005e53
 8005bf8:	08005e53 	.word	0x08005e53
 8005bfc:	08005e53 	.word	0x08005e53
 8005c00:	08005e53 	.word	0x08005e53
 8005c04:	08005e53 	.word	0x08005e53
 8005c08:	08005e53 	.word	0x08005e53
 8005c0c:	08005e53 	.word	0x08005e53
 8005c10:	08005c47 	.word	0x08005c47
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c14:	4b94      	ldr	r3, [pc, #592]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c20:	4b91      	ldr	r3, [pc, #580]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	4a90      	ldr	r2, [pc, #576]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005c32:	e111      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c34:	4b8d      	ldr	r3, [pc, #564]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c36:	61bb      	str	r3, [r7, #24]
    break;
 8005c38:	e10e      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005c3a:	4b8d      	ldr	r3, [pc, #564]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c3c:	61bb      	str	r3, [r7, #24]
    break;
 8005c3e:	e10b      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005c40:	4b8c      	ldr	r3, [pc, #560]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c42:	61bb      	str	r3, [r7, #24]
    break;
 8005c44:	e108      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c46:	4b88      	ldr	r3, [pc, #544]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005c50:	4b85      	ldr	r3, [pc, #532]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c5c:	4b82      	ldr	r3, [pc, #520]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005c66:	4b80      	ldr	r3, [pc, #512]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	08db      	lsrs	r3, r3, #3
 8005c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80e1 	beq.w	8005e4c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	f000 8083 	beq.w	8005d98 <HAL_RCC_GetSysClockFreq+0x204>
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	f200 80a1 	bhi.w	8005ddc <HAL_RCC_GetSysClockFreq+0x248>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d056      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ca6:	e099      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca8:	4b6f      	ldr	r3, [pc, #444]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02d      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cb4:	4b6c      	ldr	r3, [pc, #432]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	4a6b      	ldr	r2, [pc, #428]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b62      	ldr	r3, [pc, #392]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005d0e:	e087      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005e7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d22:	4b51      	ldr	r3, [pc, #324]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d52:	e065      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005e80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d66:	4b40      	ldr	r3, [pc, #256]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d96:	e043      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005e84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005daa:	4b2f      	ldr	r3, [pc, #188]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dda:	e021      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005e80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dee:	4b1e      	ldr	r3, [pc, #120]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e1e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005e20:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	0a5b      	lsrs	r3, r3, #9
 8005e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e44:	ee17 3a90 	vmov	r3, s15
 8005e48:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005e4a:	e005      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61bb      	str	r3, [r7, #24]
    break;
 8005e50:	e002      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e54:	61bb      	str	r3, [r7, #24]
    break;
 8005e56:	bf00      	nop
  }

  return sysclockfreq;
 8005e58:	69bb      	ldr	r3, [r7, #24]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3724      	adds	r7, #36	; 0x24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	03d09000 	.word	0x03d09000
 8005e70:	003d0900 	.word	0x003d0900
 8005e74:	02dc6c00 	.word	0x02dc6c00
 8005e78:	46000000 	.word	0x46000000
 8005e7c:	4c742400 	.word	0x4c742400
 8005e80:	4a742400 	.word	0x4a742400
 8005e84:	4c371b00 	.word	0x4c371b00

08005e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e8e:	f7ff fe81 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 8005e92:	4602      	mov	r2, r0
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	490f      	ldr	r1, [pc, #60]	; (8005edc <HAL_RCC_GetHCLKFreq+0x54>)
 8005ea0:	5ccb      	ldrb	r3, [r1, r3]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eaa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	4a09      	ldr	r2, [pc, #36]	; (8005edc <HAL_RCC_GetHCLKFreq+0x54>)
 8005eb6:	5cd3      	ldrb	r3, [r2, r3]
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	4a07      	ldr	r2, [pc, #28]	; (8005ee0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ec4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ec6:	4a07      	ldr	r2, [pc, #28]	; (8005ee4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ecc:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ece:	681b      	ldr	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	0800b548 	.word	0x0800b548
 8005ee0:	20000004 	.word	0x20000004
 8005ee4:	20000000 	.word	0x20000000

08005ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005eec:	f7ff ffcc 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	4904      	ldr	r1, [pc, #16]	; (8005f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	0800b548 	.word	0x0800b548

08005f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f18:	f7ff ffb6 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4904      	ldr	r1, [pc, #16]	; (8005f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	0800b548 	.word	0x0800b548

08005f40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f48:	2300      	movs	r3, #0
 8005f4a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d03f      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f64:	d02a      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f6a:	d824      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f70:	d018      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f76:	d81e      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f80:	d007      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f82:	e018      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f84:	4bab      	ldr	r3, [pc, #684]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	4aaa      	ldr	r2, [pc, #680]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f90:	e015      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	2102      	movs	r1, #2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 f9cf 	bl	800733c <RCCEx_PLL2_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fa2:	e00c      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3324      	adds	r3, #36	; 0x24
 8005fa8:	2102      	movs	r1, #2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 fa78 	bl	80074a0 <RCCEx_PLL3_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fb4:	e003      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fba:	e000      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d109      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005fc4:	4b9b      	ldr	r3, [pc, #620]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd0:	4998      	ldr	r1, [pc, #608]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	650b      	str	r3, [r1, #80]	; 0x50
 8005fd6:	e001      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d03d      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d826      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ff0:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	0800600d 	.word	0x0800600d
 8005ffc:	0800601b 	.word	0x0800601b
 8006000:	0800602d 	.word	0x0800602d
 8006004:	08006045 	.word	0x08006045
 8006008:	08006045 	.word	0x08006045
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600c:	4b89      	ldr	r3, [pc, #548]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	4a88      	ldr	r2, [pc, #544]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006018:	e015      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3304      	adds	r3, #4
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f001 f98b 	bl	800733c <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800602a:	e00c      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3324      	adds	r3, #36	; 0x24
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f001 fa34 	bl	80074a0 <RCCEx_PLL3_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800603c:	e003      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
      break;
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800604c:	4b79      	ldr	r3, [pc, #484]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006050:	f023 0207 	bic.w	r2, r3, #7
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	4976      	ldr	r1, [pc, #472]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800605a:	4313      	orrs	r3, r2
 800605c:	650b      	str	r3, [r1, #80]	; 0x50
 800605e:	e001      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800606c:	2b00      	cmp	r3, #0
 800606e:	d042      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006078:	d02b      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800607a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607e:	d825      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006080:	2bc0      	cmp	r3, #192	; 0xc0
 8006082:	d028      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006084:	2bc0      	cmp	r3, #192	; 0xc0
 8006086:	d821      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006088:	2b80      	cmp	r3, #128	; 0x80
 800608a:	d016      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d81d      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	d007      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006098:	e018      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800609a:	4b66      	ldr	r3, [pc, #408]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	4a65      	ldr	r2, [pc, #404]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060a6:	e017      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 f944 	bl	800733c <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060b8:	e00e      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3324      	adds	r3, #36	; 0x24
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 f9ed 	bl	80074a0 <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060ca:	e005      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
      break;
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80060d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060de:	4b55      	ldr	r3, [pc, #340]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	4952      	ldr	r1, [pc, #328]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	650b      	str	r3, [r1, #80]	; 0x50
 80060f0:	e001      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d049      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800610c:	d030      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800610e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006112:	d82a      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006114:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006118:	d02c      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800611a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800611e:	d824      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006124:	d018      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800612a:	d81e      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006134:	d007      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006136:	e018      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006138:	4b3e      	ldr	r3, [pc, #248]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a3d      	ldr	r2, [pc, #244]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800613e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006144:	e017      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	2100      	movs	r1, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f001 f8f5 	bl	800733c <RCCEx_PLL2_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006156:	e00e      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3324      	adds	r3, #36	; 0x24
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f001 f99e 	bl	80074a0 <RCCEx_PLL3_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006168:	e005      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	75fb      	strb	r3, [r7, #23]
      break;
 800616e:	e002      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006170:	bf00      	nop
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800617c:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800618a:	492a      	ldr	r1, [pc, #168]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800618c:	4313      	orrs	r3, r2
 800618e:	658b      	str	r3, [r1, #88]	; 0x58
 8006190:	e001      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04c      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061ac:	d030      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80061ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061b2:	d82a      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061b8:	d02c      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80061ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061be:	d824      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061c4:	d018      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80061c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ca:	d81e      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80061d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061d4:	d007      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80061d6:	e018      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d8:	4b16      	ldr	r3, [pc, #88]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061e4:	e017      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 f8a5 	bl	800733c <RCCEx_PLL2_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80061f6:	e00e      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3324      	adds	r3, #36	; 0x24
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 f94e 	bl	80074a0 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006208:	e005      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
      break;
 800620e:	e002      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006210:	bf00      	nop
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10d      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800621e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006220:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800622a:	4902      	ldr	r1, [pc, #8]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800622c:	4313      	orrs	r3, r2
 800622e:	658b      	str	r3, [r1, #88]	; 0x58
 8006230:	e004      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006232:	bf00      	nop
 8006234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d032      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624c:	2b30      	cmp	r3, #48	; 0x30
 800624e:	d01c      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006250:	2b30      	cmp	r3, #48	; 0x30
 8006252:	d817      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d00c      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006258:	2b20      	cmp	r3, #32
 800625a:	d813      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d016      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006260:	2b10      	cmp	r3, #16
 8006262:	d10f      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006264:	4baf      	ldr	r3, [pc, #700]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	4aae      	ldr	r2, [pc, #696]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800626a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006270:	e00e      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3304      	adds	r3, #4
 8006276:	2102      	movs	r1, #2
 8006278:	4618      	mov	r0, r3
 800627a:	f001 f85f 	bl	800733c <RCCEx_PLL2_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006282:	e005      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	75fb      	strb	r3, [r7, #23]
      break;
 8006288:	e002      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800628e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006296:	4ba3      	ldr	r3, [pc, #652]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a2:	49a0      	ldr	r1, [pc, #640]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062a8:	e001      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d047      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c2:	d030      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80062c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c8:	d82a      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80062ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062ce:	d02c      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80062d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062d4:	d824      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80062d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062da:	d018      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d81e      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80062e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ea:	d007      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80062ec:	e018      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ee:	4b8d      	ldr	r3, [pc, #564]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	4a8c      	ldr	r2, [pc, #560]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80062fa:	e017      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f001 f81a 	bl	800733c <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800630c:	e00e      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f001 f8c3 	bl	80074a0 <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800631e:	e005      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e002      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006326:	bf00      	nop
 8006328:	e000      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800632a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006332:	4b7c      	ldr	r3, [pc, #496]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006336:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	4979      	ldr	r1, [pc, #484]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006340:	4313      	orrs	r3, r2
 8006342:	650b      	str	r3, [r1, #80]	; 0x50
 8006344:	e001      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d049      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800635e:	d02e      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006364:	d828      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006366:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800636a:	d02a      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800636c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006370:	d822      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006372:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006376:	d026      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800637c:	d81c      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800637e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006382:	d010      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006388:	d816      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01d      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d111      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	2101      	movs	r1, #1
 800639a:	4618      	mov	r0, r3
 800639c:	f000 ffce 	bl	800733c <RCCEx_PLL2_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063a4:	e012      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	2101      	movs	r1, #1
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f877 	bl	80074a0 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063b6:	e009      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	75fb      	strb	r3, [r7, #23]
      break;
 80063bc:	e006      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80063be:	bf00      	nop
 80063c0:	e004      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80063c2:	bf00      	nop
 80063c4:	e002      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80063ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063d2:	4b54      	ldr	r3, [pc, #336]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063de:	4951      	ldr	r1, [pc, #324]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	650b      	str	r3, [r1, #80]	; 0x50
 80063e4:	e001      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d04b      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006400:	d02e      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006406:	d828      	bhi.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d02a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006412:	d822      	bhi.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006414:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006418:	d026      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800641a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800641e:	d81c      	bhi.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006424:	d010      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642a:	d816      	bhi.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01d      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006434:	d111      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f000 ff7d 	bl	800733c <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006446:	e012      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3324      	adds	r3, #36	; 0x24
 800644c:	2101      	movs	r1, #1
 800644e:	4618      	mov	r0, r3
 8006450:	f001 f826 	bl	80074a0 <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006458:	e009      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	75fb      	strb	r3, [r7, #23]
      break;
 800645e:	e006      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006460:	bf00      	nop
 8006462:	e004      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006464:	bf00      	nop
 8006466:	e002      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006468:	bf00      	nop
 800646a:	e000      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800646c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006474:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006478:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006482:	4928      	ldr	r1, [pc, #160]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006484:	4313      	orrs	r3, r2
 8006486:	658b      	str	r3, [r1, #88]	; 0x58
 8006488:	e001      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d02f      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a2:	d00e      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80064a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a8:	d814      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d015      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80064ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b2:	d10f      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b4:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064c0:	e00c      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2101      	movs	r1, #1
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 ff37 	bl	800733c <RCCEx_PLL2_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064d2:	e003      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	e000      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80064da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ee:	490d      	ldr	r1, [pc, #52]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	650b      	str	r3, [r1, #80]	; 0x50
 80064f4:	e001      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
 80064f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d033      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	2b03      	cmp	r3, #3
 800650c:	d81c      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	0800654f 	.word	0x0800654f
 8006518:	08006529 	.word	0x08006529
 800651c:	08006537 	.word	0x08006537
 8006520:	0800654f 	.word	0x0800654f
 8006524:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006528:	4bb8      	ldr	r3, [pc, #736]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	4ab7      	ldr	r2, [pc, #732]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800652e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006534:	e00c      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	2102      	movs	r1, #2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fefd 	bl	800733c <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006546:	e003      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
      break;
 800654c:	e000      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800654e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006556:	4bad      	ldr	r3, [pc, #692]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655a:	f023 0203 	bic.w	r2, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	49aa      	ldr	r1, [pc, #680]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006564:	4313      	orrs	r3, r2
 8006566:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006568:	e001      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8086 	beq.w	8006688 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800657c:	4ba4      	ldr	r3, [pc, #656]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4aa3      	ldr	r2, [pc, #652]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006588:	f7fb feea 	bl	8002360 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800658e:	e009      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006590:	f7fb fee6 	bl	8002360 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b64      	cmp	r3, #100	; 0x64
 800659c:	d902      	bls.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	75fb      	strb	r3, [r7, #23]
        break;
 80065a2:	e005      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065a4:	4b9a      	ldr	r3, [pc, #616]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0ef      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d166      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065b6:	4b95      	ldr	r3, [pc, #596]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065c0:	4053      	eors	r3, r2
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d013      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ca:	4b90      	ldr	r3, [pc, #576]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065d4:	4b8d      	ldr	r3, [pc, #564]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	4a8c      	ldr	r2, [pc, #560]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065e0:	4b8a      	ldr	r3, [pc, #552]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e4:	4a89      	ldr	r2, [pc, #548]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065ec:	4a87      	ldr	r2, [pc, #540]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fc:	d115      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fe:	f7fb feaf 	bl	8002360 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006604:	e00b      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006606:	f7fb feab 	bl	8002360 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	f241 3288 	movw	r2, #5000	; 0x1388
 8006614:	4293      	cmp	r3, r2
 8006616:	d902      	bls.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	75fb      	strb	r3, [r7, #23]
            break;
 800661c:	e005      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800661e:	4b7b      	ldr	r3, [pc, #492]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0ed      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800662a:	7dfb      	ldrb	r3, [r7, #23]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d126      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800663e:	d10d      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006640:	4b72      	ldr	r3, [pc, #456]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800664e:	0919      	lsrs	r1, r3, #4
 8006650:	4b70      	ldr	r3, [pc, #448]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006652:	400b      	ands	r3, r1
 8006654:	496d      	ldr	r1, [pc, #436]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006656:	4313      	orrs	r3, r2
 8006658:	610b      	str	r3, [r1, #16]
 800665a:	e005      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800665c:	4b6b      	ldr	r3, [pc, #428]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	4a6a      	ldr	r2, [pc, #424]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006662:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006666:	6113      	str	r3, [r2, #16]
 8006668:	4b68      	ldr	r3, [pc, #416]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800666a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006676:	4965      	ldr	r1, [pc, #404]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006678:	4313      	orrs	r3, r2
 800667a:	670b      	str	r3, [r1, #112]	; 0x70
 800667c:	e004      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	75bb      	strb	r3, [r7, #22]
 8006682:	e001      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d07e      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006698:	2b28      	cmp	r3, #40	; 0x28
 800669a:	d867      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	08006773 	.word	0x08006773
 80066a8:	0800676d 	.word	0x0800676d
 80066ac:	0800676d 	.word	0x0800676d
 80066b0:	0800676d 	.word	0x0800676d
 80066b4:	0800676d 	.word	0x0800676d
 80066b8:	0800676d 	.word	0x0800676d
 80066bc:	0800676d 	.word	0x0800676d
 80066c0:	0800676d 	.word	0x0800676d
 80066c4:	08006749 	.word	0x08006749
 80066c8:	0800676d 	.word	0x0800676d
 80066cc:	0800676d 	.word	0x0800676d
 80066d0:	0800676d 	.word	0x0800676d
 80066d4:	0800676d 	.word	0x0800676d
 80066d8:	0800676d 	.word	0x0800676d
 80066dc:	0800676d 	.word	0x0800676d
 80066e0:	0800676d 	.word	0x0800676d
 80066e4:	0800675b 	.word	0x0800675b
 80066e8:	0800676d 	.word	0x0800676d
 80066ec:	0800676d 	.word	0x0800676d
 80066f0:	0800676d 	.word	0x0800676d
 80066f4:	0800676d 	.word	0x0800676d
 80066f8:	0800676d 	.word	0x0800676d
 80066fc:	0800676d 	.word	0x0800676d
 8006700:	0800676d 	.word	0x0800676d
 8006704:	08006773 	.word	0x08006773
 8006708:	0800676d 	.word	0x0800676d
 800670c:	0800676d 	.word	0x0800676d
 8006710:	0800676d 	.word	0x0800676d
 8006714:	0800676d 	.word	0x0800676d
 8006718:	0800676d 	.word	0x0800676d
 800671c:	0800676d 	.word	0x0800676d
 8006720:	0800676d 	.word	0x0800676d
 8006724:	08006773 	.word	0x08006773
 8006728:	0800676d 	.word	0x0800676d
 800672c:	0800676d 	.word	0x0800676d
 8006730:	0800676d 	.word	0x0800676d
 8006734:	0800676d 	.word	0x0800676d
 8006738:	0800676d 	.word	0x0800676d
 800673c:	0800676d 	.word	0x0800676d
 8006740:	0800676d 	.word	0x0800676d
 8006744:	08006773 	.word	0x08006773
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3304      	adds	r3, #4
 800674c:	2101      	movs	r1, #1
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fdf4 	bl	800733c <RCCEx_PLL2_Config>
 8006754:	4603      	mov	r3, r0
 8006756:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006758:	e00c      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	2101      	movs	r1, #1
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fe9d 	bl	80074a0 <RCCEx_PLL3_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800676a:	e003      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
      break;
 8006770:	e000      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006786:	4921      	ldr	r1, [pc, #132]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006788:	4313      	orrs	r3, r2
 800678a:	654b      	str	r3, [r1, #84]	; 0x54
 800678c:	e001      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d03e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d820      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067ef 	.word	0x080067ef
 80067b0:	080067c5 	.word	0x080067c5
 80067b4:	080067d7 	.word	0x080067d7
 80067b8:	080067ef 	.word	0x080067ef
 80067bc:	080067ef 	.word	0x080067ef
 80067c0:	080067ef 	.word	0x080067ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3304      	adds	r3, #4
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fdb6 	bl	800733c <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80067d4:	e00c      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3324      	adds	r3, #36	; 0x24
 80067da:	2101      	movs	r1, #1
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fe5f 	bl	80074a0 <RCCEx_PLL3_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	75fb      	strb	r3, [r7, #23]
      break;
 80067ec:	e000      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80067ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d110      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067f6:	4b05      	ldr	r3, [pc, #20]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	f023 0207 	bic.w	r2, r3, #7
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006802:	4902      	ldr	r1, [pc, #8]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006804:	4313      	orrs	r3, r2
 8006806:	654b      	str	r3, [r1, #84]	; 0x54
 8006808:	e008      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800680a:	bf00      	nop
 800680c:	58024400 	.word	0x58024400
 8006810:	58024800 	.word	0x58024800
 8006814:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d039      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	2b05      	cmp	r3, #5
 8006830:	d820      	bhi.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800687b 	.word	0x0800687b
 800683c:	08006851 	.word	0x08006851
 8006840:	08006863 	.word	0x08006863
 8006844:	0800687b 	.word	0x0800687b
 8006848:	0800687b 	.word	0x0800687b
 800684c:	0800687b 	.word	0x0800687b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3304      	adds	r3, #4
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fd70 	bl	800733c <RCCEx_PLL2_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006860:	e00c      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3324      	adds	r3, #36	; 0x24
 8006866:	2101      	movs	r1, #1
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fe19 	bl	80074a0 <RCCEx_PLL3_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006872:	e003      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]
      break;
 8006878:	e000      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800687a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006882:	4bb7      	ldr	r3, [pc, #732]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006886:	f023 0207 	bic.w	r2, r3, #7
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006890:	49b3      	ldr	r1, [pc, #716]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006892:	4313      	orrs	r3, r2
 8006894:	658b      	str	r3, [r1, #88]	; 0x58
 8006896:	e001      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d04b      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068b2:	d02e      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80068b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068b8:	d828      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80068ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068be:	d02a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c4:	d822      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80068c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068ca:	d026      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80068cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068d0:	d81c      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80068d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d6:	d010      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80068d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068dc:	d816      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01d      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80068e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e6:	d111      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	2100      	movs	r1, #0
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fd24 	bl	800733c <RCCEx_PLL2_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80068f8:	e012      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3324      	adds	r3, #36	; 0x24
 80068fe:	2102      	movs	r1, #2
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fdcd 	bl	80074a0 <RCCEx_PLL3_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800690a:	e009      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
      break;
 8006910:	e006      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006912:	bf00      	nop
 8006914:	e004      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006916:	bf00      	nop
 8006918:	e002      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800691e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006920:	7dfb      	ldrb	r3, [r7, #23]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006926:	4b8e      	ldr	r3, [pc, #568]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006934:	498a      	ldr	r1, [pc, #552]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006936:	4313      	orrs	r3, r2
 8006938:	654b      	str	r3, [r1, #84]	; 0x54
 800693a:	e001      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d04b      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006952:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006956:	d02e      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006958:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800695c:	d828      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800695e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006962:	d02a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006968:	d822      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800696a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800696e:	d026      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006974:	d81c      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697a:	d010      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800697c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006980:	d816      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01d      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698a:	d111      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fcd2 	bl	800733c <RCCEx_PLL2_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800699c:	e012      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3324      	adds	r3, #36	; 0x24
 80069a2:	2102      	movs	r1, #2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fd7b 	bl	80074a0 <RCCEx_PLL3_Config>
 80069aa:	4603      	mov	r3, r0
 80069ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069ae:	e009      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
      break;
 80069b4:	e006      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80069b6:	bf00      	nop
 80069b8:	e004      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80069c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069ca:	4b65      	ldr	r3, [pc, #404]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d8:	4961      	ldr	r1, [pc, #388]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	658b      	str	r3, [r1, #88]	; 0x58
 80069de:	e001      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d04b      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069fa:	d02e      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80069fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a00:	d828      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a06:	d02a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0c:	d822      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006a0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a12:	d026      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006a14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a18:	d81c      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1e:	d010      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a24:	d816      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01d      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2e:	d111      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3304      	adds	r3, #4
 8006a34:	2100      	movs	r1, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fc80 	bl	800733c <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a40:	e012      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3324      	adds	r3, #36	; 0x24
 8006a46:	2102      	movs	r1, #2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fd29 	bl	80074a0 <RCCEx_PLL3_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a52:	e009      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	75fb      	strb	r3, [r7, #23]
      break;
 8006a58:	e006      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e004      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e002      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a62:	bf00      	nop
 8006a64:	e000      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a6e:	4b3c      	ldr	r3, [pc, #240]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a7c:	4938      	ldr	r1, [pc, #224]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	658b      	str	r3, [r1, #88]	; 0x58
 8006a82:	e001      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9e:	d10a      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3324      	adds	r3, #36	; 0x24
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fcfa 	bl	80074a0 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	4926      	ldr	r1, [pc, #152]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01a      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae0:	d10a      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3324      	adds	r3, #36	; 0x24
 8006ae6:	2102      	movs	r1, #2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fcd9 	bl	80074a0 <RCCEx_PLL3_Config>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006af8:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b06:	4916      	ldr	r1, [pc, #88]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d036      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b22:	d01f      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b28:	d817      	bhi.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b32:	d009      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006b34:	e011      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fbfd 	bl	800733c <RCCEx_PLL2_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b46:	e00e      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3324      	adds	r3, #36	; 0x24
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fca6 	bl	80074a0 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b58:	e005      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5e:	e002      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006b60:	58024400 	.word	0x58024400
      break;
 8006b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b6c:	4b93      	ldr	r3, [pc, #588]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b7a:	4990      	ldr	r1, [pc, #576]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	658b      	str	r3, [r1, #88]	; 0x58
 8006b80:	e001      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d033      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b9c:	d01c      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006b9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ba2:	d816      	bhi.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba8:	d003      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bae:	d007      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006bb0:	e00f      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb2:	4b82      	ldr	r3, [pc, #520]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	4a81      	ldr	r2, [pc, #516]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bbe:	e00c      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fc6a 	bl	80074a0 <RCCEx_PLL3_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bd0:	e003      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd6:	e000      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006be0:	4b76      	ldr	r3, [pc, #472]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bee:	4973      	ldr	r1, [pc, #460]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	654b      	str	r3, [r1, #84]	; 0x54
 8006bf4:	e001      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d029      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c12:	d007      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006c14:	e00f      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c16:	4b69      	ldr	r3, [pc, #420]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	4a68      	ldr	r2, [pc, #416]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c22:	e00b      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	2102      	movs	r1, #2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fb86 	bl	800733c <RCCEx_PLL2_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c42:	4b5e      	ldr	r3, [pc, #376]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	495b      	ldr	r1, [pc, #364]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c54:	e001      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3324      	adds	r3, #36	; 0x24
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fc17 	bl	80074a0 <RCCEx_PLL3_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d030      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c90:	d017      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c96:	d811      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9c:	d013      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca2:	d80b      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d010      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cac:	d106      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cae:	4b43      	ldr	r3, [pc, #268]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	4a42      	ldr	r2, [pc, #264]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006cba:	e007      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e004      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e002      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cd2:	4b3a      	ldr	r3, [pc, #232]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cde:	4937      	ldr	r1, [pc, #220]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	654b      	str	r3, [r1, #84]	; 0x54
 8006ce4:	e001      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cf6:	4b31      	ldr	r3, [pc, #196]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	492e      	ldr	r1, [pc, #184]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d14:	4b29      	ldr	r3, [pc, #164]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d22:	4926      	ldr	r1, [pc, #152]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d34:	4b21      	ldr	r3, [pc, #132]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d40:	491e      	ldr	r1, [pc, #120]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00d      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d52:	4b1a      	ldr	r3, [pc, #104]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d5c:	6113      	str	r3, [r2, #16]
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d68:	4914      	ldr	r1, [pc, #80]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da08      	bge.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d82:	490e      	ldr	r1, [pc, #56]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d94:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da2:	4906      	ldr	r1, [pc, #24]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006da8:	7dbb      	ldrb	r3, [r7, #22]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	58024400 	.word	0x58024400

08006dc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006dc4:	f7ff f860 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	091b      	lsrs	r3, r3, #4
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	4904      	ldr	r1, [pc, #16]	; (8006de8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dd6:	5ccb      	ldrb	r3, [r1, r3]
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	58024400 	.word	0x58024400
 8006de8:	0800b548 	.word	0x0800b548

08006dec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b089      	sub	sp, #36	; 0x24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df4:	4ba1      	ldr	r3, [pc, #644]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006dfe:	4b9f      	ldr	r3, [pc, #636]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e02:	0b1b      	lsrs	r3, r3, #12
 8006e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e0a:	4b9c      	ldr	r3, [pc, #624]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	091b      	lsrs	r3, r3, #4
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e16:	4b99      	ldr	r3, [pc, #612]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8111 	beq.w	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	f000 8083 	beq.w	8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	f200 80a1 	bhi.w	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d056      	beq.n	8006f04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e56:	e099      	b.n	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e58:	4b88      	ldr	r3, [pc, #544]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d02d      	beq.n	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e64:	4b85      	ldr	r3, [pc, #532]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	08db      	lsrs	r3, r3, #3
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	4a84      	ldr	r2, [pc, #528]	; (8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
 8006e74:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	ee07 3a90 	vmov	s15, r3
 8006e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8e:	4b7b      	ldr	r3, [pc, #492]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ebe:	e087      	b.n	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007088 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed2:	4b6a      	ldr	r3, [pc, #424]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f02:	e065      	b.n	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f16:	4b59      	ldr	r3, [pc, #356]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f46:	e043      	b.n	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5a:	4b48      	ldr	r3, [pc, #288]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f8a:	e021      	b.n	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	4b37      	ldr	r3, [pc, #220]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006fd0:	4b2a      	ldr	r3, [pc, #168]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff6:	ee17 2a90 	vmov	r2, s15
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006ffe:	4b1f      	ldr	r3, [pc, #124]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	0c1b      	lsrs	r3, r3, #16
 8007004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007014:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007018:	edd7 6a07 	vldr	s13, [r7, #28]
 800701c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007024:	ee17 2a90 	vmov	r2, s15
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	0e1b      	lsrs	r3, r3, #24
 8007032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007046:	edd7 6a07 	vldr	s13, [r7, #28]
 800704a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007052:	ee17 2a90 	vmov	r2, s15
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800705a:	e008      	b.n	800706e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
}
 800706e:	bf00      	nop
 8007070:	3724      	adds	r7, #36	; 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
 8007080:	03d09000 	.word	0x03d09000
 8007084:	46000000 	.word	0x46000000
 8007088:	4c742400 	.word	0x4c742400
 800708c:	4a742400 	.word	0x4a742400
 8007090:	4c371b00 	.word	0x4c371b00

08007094 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800709c:	4ba1      	ldr	r3, [pc, #644]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80070a6:	4b9f      	ldr	r3, [pc, #636]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	0d1b      	lsrs	r3, r3, #20
 80070ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070b2:	4b9c      	ldr	r3, [pc, #624]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	0a1b      	lsrs	r3, r3, #8
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80070be:	4b99      	ldr	r3, [pc, #612]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	08db      	lsrs	r3, r3, #3
 80070c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8111 	beq.w	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	f000 8083 	beq.w	80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f200 80a1 	bhi.w	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d056      	beq.n	80071ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070fe:	e099      	b.n	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007100:	4b88      	ldr	r3, [pc, #544]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d02d      	beq.n	8007168 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800710c:	4b85      	ldr	r3, [pc, #532]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	08db      	lsrs	r3, r3, #3
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	4a84      	ldr	r2, [pc, #528]	; (8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
 800711c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	ee07 3a90 	vmov	s15, r3
 8007124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b7b      	ldr	r3, [pc, #492]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	ed97 6a03 	vldr	s12, [r7, #12]
 800714a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800732c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007166:	e087      	b.n	8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007330 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800732c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071aa:	e065      	b.n	8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800732c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ee:	e043      	b.n	8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b48      	ldr	r3, [pc, #288]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a45 	vldr	s11, [pc, #276]	; 800732c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007232:	e021      	b.n	8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b37      	ldr	r3, [pc, #220]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800732c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007276:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007278:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800727a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727c:	0a5b      	lsrs	r3, r3, #9
 800727e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800728e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007292:	edd7 6a07 	vldr	s13, [r7, #28]
 8007296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729e:	ee17 2a90 	vmov	r2, s15
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072cc:	ee17 2a90 	vmov	r2, s15
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	0e1b      	lsrs	r3, r3, #24
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	ee17 2a90 	vmov	r2, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007302:	e008      	b.n	8007316 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	609a      	str	r2, [r3, #8]
}
 8007316:	bf00      	nop
 8007318:	3724      	adds	r7, #36	; 0x24
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	58024400 	.word	0x58024400
 8007328:	03d09000 	.word	0x03d09000
 800732c:	46000000 	.word	0x46000000
 8007330:	4c742400 	.word	0x4c742400
 8007334:	4a742400 	.word	0x4a742400
 8007338:	4c371b00 	.word	0x4c371b00

0800733c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800734a:	4b53      	ldr	r3, [pc, #332]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d101      	bne.n	800735a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e099      	b.n	800748e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800735a:	4b4f      	ldr	r3, [pc, #316]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a4e      	ldr	r2, [pc, #312]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007360:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007366:	f7fa fffb 	bl	8002360 <HAL_GetTick>
 800736a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800736c:	e008      	b.n	8007380 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800736e:	f7fa fff7 	bl	8002360 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e086      	b.n	800748e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007380:	4b45      	ldr	r3, [pc, #276]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800738c:	4b42      	ldr	r3, [pc, #264]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	031b      	lsls	r3, r3, #12
 800739a:	493f      	ldr	r1, [pc, #252]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 800739c:	4313      	orrs	r3, r2
 800739e:	628b      	str	r3, [r1, #40]	; 0x28
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	025b      	lsls	r3, r3, #9
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	061b      	lsls	r3, r3, #24
 80073cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073d0:	4931      	ldr	r1, [pc, #196]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073d6:	4b30      	ldr	r3, [pc, #192]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	492d      	ldr	r1, [pc, #180]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073e8:	4b2b      	ldr	r3, [pc, #172]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	f023 0220 	bic.w	r2, r3, #32
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	4928      	ldr	r1, [pc, #160]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073fa:	4b27      	ldr	r3, [pc, #156]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	4a26      	ldr	r2, [pc, #152]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007400:	f023 0310 	bic.w	r3, r3, #16
 8007404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800740a:	4b24      	ldr	r3, [pc, #144]	; (800749c <RCCEx_PLL2_Config+0x160>)
 800740c:	4013      	ands	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	69d2      	ldr	r2, [r2, #28]
 8007412:	00d2      	lsls	r2, r2, #3
 8007414:	4920      	ldr	r1, [pc, #128]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800741a:	4b1f      	ldr	r3, [pc, #124]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	4a1e      	ldr	r2, [pc, #120]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007420:	f043 0310 	orr.w	r3, r3, #16
 8007424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800742c:	4b1a      	ldr	r3, [pc, #104]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4a19      	ldr	r2, [pc, #100]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007436:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007438:	e00f      	b.n	800745a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d106      	bne.n	800744e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007440:	4b15      	ldr	r3, [pc, #84]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	4a14      	ldr	r2, [pc, #80]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800744a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800744c:	e005      	b.n	800745a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800744e:	4b12      	ldr	r3, [pc, #72]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	4a11      	ldr	r2, [pc, #68]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007458:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800745a:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a0e      	ldr	r2, [pc, #56]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007466:	f7fa ff7b 	bl	8002360 <HAL_GetTick>
 800746a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800746c:	e008      	b.n	8007480 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800746e:	f7fa ff77 	bl	8002360 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e006      	b.n	800748e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f0      	beq.n	800746e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	58024400 	.word	0x58024400
 800749c:	ffff0007 	.word	0xffff0007

080074a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ae:	4b53      	ldr	r3, [pc, #332]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d101      	bne.n	80074be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e099      	b.n	80075f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074be:	4b4f      	ldr	r3, [pc, #316]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4e      	ldr	r2, [pc, #312]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ca:	f7fa ff49 	bl	8002360 <HAL_GetTick>
 80074ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d0:	e008      	b.n	80074e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074d2:	f7fa ff45 	bl	8002360 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e086      	b.n	80075f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074e4:	4b45      	ldr	r3, [pc, #276]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f0      	bne.n	80074d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074f0:	4b42      	ldr	r3, [pc, #264]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	051b      	lsls	r3, r3, #20
 80074fe:	493f      	ldr	r1, [pc, #252]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007500:	4313      	orrs	r3, r2
 8007502:	628b      	str	r3, [r1, #40]	; 0x28
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	3b01      	subs	r3, #1
 800750a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	3b01      	subs	r3, #1
 8007514:	025b      	lsls	r3, r3, #9
 8007516:	b29b      	uxth	r3, r3
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	3b01      	subs	r3, #1
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	3b01      	subs	r3, #1
 800752e:	061b      	lsls	r3, r3, #24
 8007530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007534:	4931      	ldr	r1, [pc, #196]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800753a:	4b30      	ldr	r3, [pc, #192]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	492d      	ldr	r1, [pc, #180]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007548:	4313      	orrs	r3, r2
 800754a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800754c:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	4928      	ldr	r1, [pc, #160]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800755e:	4b27      	ldr	r3, [pc, #156]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	4a26      	ldr	r2, [pc, #152]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800756a:	4b24      	ldr	r3, [pc, #144]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 800756c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800756e:	4b24      	ldr	r3, [pc, #144]	; (8007600 <RCCEx_PLL3_Config+0x160>)
 8007570:	4013      	ands	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	69d2      	ldr	r2, [r2, #28]
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	4920      	ldr	r1, [pc, #128]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 800757a:	4313      	orrs	r3, r2
 800757c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800757e:	4b1f      	ldr	r3, [pc, #124]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007590:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4a19      	ldr	r2, [pc, #100]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800759a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800759c:	e00f      	b.n	80075be <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d106      	bne.n	80075b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075a4:	4b15      	ldr	r3, [pc, #84]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	4a14      	ldr	r2, [pc, #80]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075b0:	e005      	b.n	80075be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075b2:	4b12      	ldr	r3, [pc, #72]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4a11      	ldr	r2, [pc, #68]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a0e      	ldr	r2, [pc, #56]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ca:	f7fa fec9 	bl	8002360 <HAL_GetTick>
 80075ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075d0:	e008      	b.n	80075e4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075d2:	f7fa fec5 	bl	8002360 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d901      	bls.n	80075e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e006      	b.n	80075f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0f0      	beq.n	80075d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	58024400 	.word	0x58024400
 8007600:	ffff0007 	.word	0xffff0007

08007604 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e0eb      	b.n	80077f2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a75      	ldr	r2, [pc, #468]	; (80077fc <HAL_SPI_Init+0x1f8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00f      	beq.n	800764a <HAL_SPI_Init+0x46>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a74      	ldr	r2, [pc, #464]	; (8007800 <HAL_SPI_Init+0x1fc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00a      	beq.n	800764a <HAL_SPI_Init+0x46>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a72      	ldr	r2, [pc, #456]	; (8007804 <HAL_SPI_Init+0x200>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d005      	beq.n	800764a <HAL_SPI_Init+0x46>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	2b0f      	cmp	r3, #15
 8007644:	d901      	bls.n	800764a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e0d3      	b.n	80077f2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8dc 	bl	8007808 <SPI_GetPacketSize>
 8007650:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a69      	ldr	r2, [pc, #420]	; (80077fc <HAL_SPI_Init+0x1f8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00c      	beq.n	8007676 <HAL_SPI_Init+0x72>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a67      	ldr	r2, [pc, #412]	; (8007800 <HAL_SPI_Init+0x1fc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d007      	beq.n	8007676 <HAL_SPI_Init+0x72>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a66      	ldr	r2, [pc, #408]	; (8007804 <HAL_SPI_Init+0x200>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d002      	beq.n	8007676 <HAL_SPI_Init+0x72>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b08      	cmp	r3, #8
 8007674:	d811      	bhi.n	800769a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800767a:	4a60      	ldr	r2, [pc, #384]	; (80077fc <HAL_SPI_Init+0x1f8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a5e      	ldr	r2, [pc, #376]	; (8007800 <HAL_SPI_Init+0x1fc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_SPI_Init+0x90>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a5d      	ldr	r2, [pc, #372]	; (8007804 <HAL_SPI_Init+0x200>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d104      	bne.n	800769e <HAL_SPI_Init+0x9a>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b10      	cmp	r3, #16
 8007698:	d901      	bls.n	800769e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e0a9      	b.n	80077f2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7fa f81c 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0201 	bic.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d8:	d119      	bne.n	800770e <HAL_SPI_Init+0x10a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e2:	d103      	bne.n	80076ec <HAL_SPI_Init+0xe8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10c      	bne.n	800770e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076fc:	d107      	bne.n	800770e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800770c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69da      	ldr	r2, [r3, #28]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	431a      	orrs	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	ea42 0103 	orr.w	r1, r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776e:	ea42 0103 	orr.w	r1, r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d113      	bne.n	80077ae <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007798:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40013000 	.word	0x40013000
 8007800:	40003800 	.word	0x40003800
 8007804:	40003c00 	.word	0x40003c00

08007808 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	3307      	adds	r3, #7
 8007826:	08db      	lsrs	r3, r3, #3
 8007828:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e049      	b.n	80078e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7f9 ffa9 	bl	80017bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3304      	adds	r3, #4
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f000 fbe1 	bl	8008044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e049      	b.n	8007992 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f841 	bl	800799a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f000 fb8a 	bl	8008044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d122      	bne.n	8007a0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d11b      	bne.n	8007a0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f06f 0202 	mvn.w	r2, #2
 80079da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fb09 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 80079f6:	e005      	b.n	8007a04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fafb 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fb0c 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d122      	bne.n	8007a5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d11b      	bne.n	8007a5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f06f 0204 	mvn.w	r2, #4
 8007a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fadf 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007a4a:	e005      	b.n	8007a58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fad1 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fae2 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d122      	bne.n	8007ab2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d11b      	bne.n	8007ab2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f06f 0208 	mvn.w	r2, #8
 8007a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2204      	movs	r2, #4
 8007a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fab5 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007a9e:	e005      	b.n	8007aac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 faa7 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fab8 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d122      	bne.n	8007b06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	2b10      	cmp	r3, #16
 8007acc:	d11b      	bne.n	8007b06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f06f 0210 	mvn.w	r2, #16
 8007ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2208      	movs	r2, #8
 8007adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa8b 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007af2:	e005      	b.n	8007b00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa7d 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa8e 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d10e      	bne.n	8007b32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d107      	bne.n	8007b32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f06f 0201 	mvn.w	r2, #1
 8007b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7f9 fd94 	bl	800165a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d10e      	bne.n	8007b5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	2b80      	cmp	r3, #128	; 0x80
 8007b4c:	d107      	bne.n	8007b5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 ff89 	bl	8008a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6c:	d10e      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b78:	2b80      	cmp	r3, #128	; 0x80
 8007b7a:	d107      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 ff7c 	bl	8008a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d10e      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	d107      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa3c 	bl	8008030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d10e      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d107      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f06f 0220 	mvn.w	r2, #32
 8007bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 ff3c 	bl	8008a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e0fd      	b.n	8007e02 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b14      	cmp	r3, #20
 8007c12:	f200 80f0 	bhi.w	8007df6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c71 	.word	0x08007c71
 8007c20:	08007df7 	.word	0x08007df7
 8007c24:	08007df7 	.word	0x08007df7
 8007c28:	08007df7 	.word	0x08007df7
 8007c2c:	08007cb1 	.word	0x08007cb1
 8007c30:	08007df7 	.word	0x08007df7
 8007c34:	08007df7 	.word	0x08007df7
 8007c38:	08007df7 	.word	0x08007df7
 8007c3c:	08007cf3 	.word	0x08007cf3
 8007c40:	08007df7 	.word	0x08007df7
 8007c44:	08007df7 	.word	0x08007df7
 8007c48:	08007df7 	.word	0x08007df7
 8007c4c:	08007d33 	.word	0x08007d33
 8007c50:	08007df7 	.word	0x08007df7
 8007c54:	08007df7 	.word	0x08007df7
 8007c58:	08007df7 	.word	0x08007df7
 8007c5c:	08007d75 	.word	0x08007d75
 8007c60:	08007df7 	.word	0x08007df7
 8007c64:	08007df7 	.word	0x08007df7
 8007c68:	08007df7 	.word	0x08007df7
 8007c6c:	08007db5 	.word	0x08007db5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fa7e 	bl	8008178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0208 	orr.w	r2, r2, #8
 8007c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0204 	bic.w	r2, r2, #4
 8007c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6999      	ldr	r1, [r3, #24]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	691a      	ldr	r2, [r3, #16]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	619a      	str	r2, [r3, #24]
      break;
 8007cae:	e0a3      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 faee 	bl	8008298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6999      	ldr	r1, [r3, #24]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	021a      	lsls	r2, r3, #8
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	619a      	str	r2, [r3, #24]
      break;
 8007cf0:	e082      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fb57 	bl	80083ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69da      	ldr	r2, [r3, #28]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0208 	orr.w	r2, r2, #8
 8007d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0204 	bic.w	r2, r2, #4
 8007d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69d9      	ldr	r1, [r3, #28]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	61da      	str	r2, [r3, #28]
      break;
 8007d30:	e062      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fbbd 	bl	80084b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69da      	ldr	r2, [r3, #28]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69d9      	ldr	r1, [r3, #28]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	021a      	lsls	r2, r3, #8
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	61da      	str	r2, [r3, #28]
      break;
 8007d72:	e041      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fc04 	bl	8008588 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0208 	orr.w	r2, r2, #8
 8007d8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0204 	bic.w	r2, r2, #4
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007db2:	e021      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fc46 	bl	800864c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	021a      	lsls	r2, r3, #8
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007df4:	e000      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007df6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_TIM_ConfigClockSource+0x18>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e0db      	b.n	8007fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4b69      	ldr	r3, [pc, #420]	; (8007fe4 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a63      	ldr	r2, [pc, #396]	; (8007fe8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	f000 80a9 	beq.w	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007e60:	4a61      	ldr	r2, [pc, #388]	; (8007fe8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	f200 80ae 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007e68:	4a60      	ldr	r2, [pc, #384]	; (8007fec <HAL_TIM_ConfigClockSource+0x1e0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	f000 80a1 	beq.w	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007e70:	4a5e      	ldr	r2, [pc, #376]	; (8007fec <HAL_TIM_ConfigClockSource+0x1e0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	f200 80a6 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007e78:	4a5d      	ldr	r2, [pc, #372]	; (8007ff0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	f000 8099 	beq.w	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007e80:	4a5b      	ldr	r2, [pc, #364]	; (8007ff0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	f200 809e 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007e88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007e8c:	f000 8091 	beq.w	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007e90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007e94:	f200 8096 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9c:	f000 8089 	beq.w	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea4:	f200 808e 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eac:	d03e      	beq.n	8007f2c <HAL_TIM_ConfigClockSource+0x120>
 8007eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb2:	f200 8087 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eba:	f000 8085 	beq.w	8007fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec2:	d87f      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ec4:	2b70      	cmp	r3, #112	; 0x70
 8007ec6:	d01a      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0xf2>
 8007ec8:	2b70      	cmp	r3, #112	; 0x70
 8007eca:	d87b      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ecc:	2b60      	cmp	r3, #96	; 0x60
 8007ece:	d050      	beq.n	8007f72 <HAL_TIM_ConfigClockSource+0x166>
 8007ed0:	2b60      	cmp	r3, #96	; 0x60
 8007ed2:	d877      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ed4:	2b50      	cmp	r3, #80	; 0x50
 8007ed6:	d03c      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0x146>
 8007ed8:	2b50      	cmp	r3, #80	; 0x50
 8007eda:	d873      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d058      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x186>
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d86f      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ee4:	2b30      	cmp	r3, #48	; 0x30
 8007ee6:	d064      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ee8:	2b30      	cmp	r3, #48	; 0x30
 8007eea:	d86b      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d060      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d867      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d05c      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ef8:	2b10      	cmp	r3, #16
 8007efa:	d05a      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007efc:	e062      	b.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6899      	ldr	r1, [r3, #8]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f000 fc7f 	bl	8008810 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	609a      	str	r2, [r3, #8]
      break;
 8007f2a:	e04e      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6899      	ldr	r1, [r3, #8]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f000 fc68 	bl	8008810 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f4e:	609a      	str	r2, [r3, #8]
      break;
 8007f50:	e03b      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6859      	ldr	r1, [r3, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f000 fbd8 	bl	8008714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2150      	movs	r1, #80	; 0x50
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fc32 	bl	80087d4 <TIM_ITRx_SetConfig>
      break;
 8007f70:	e02b      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6859      	ldr	r1, [r3, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f000 fbf7 	bl	8008772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2160      	movs	r1, #96	; 0x60
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fc22 	bl	80087d4 <TIM_ITRx_SetConfig>
      break;
 8007f90:	e01b      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	6859      	ldr	r1, [r3, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f000 fbb8 	bl	8008714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2140      	movs	r1, #64	; 0x40
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fc12 	bl	80087d4 <TIM_ITRx_SetConfig>
      break;
 8007fb0:	e00b      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	f000 fc09 	bl	80087d4 <TIM_ITRx_SetConfig>
        break;
 8007fc2:	e002      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007fc4:	bf00      	nop
 8007fc6:	e000      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007fc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	ffceff88 	.word	0xffceff88
 8007fe8:	00100040 	.word	0x00100040
 8007fec:	00100030 	.word	0x00100030
 8007ff0:	00100020 	.word	0x00100020

08007ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a40      	ldr	r2, [pc, #256]	; (8008158 <TIM_Base_SetConfig+0x114>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d013      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008062:	d00f      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a3d      	ldr	r2, [pc, #244]	; (800815c <TIM_Base_SetConfig+0x118>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00b      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a3c      	ldr	r2, [pc, #240]	; (8008160 <TIM_Base_SetConfig+0x11c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d007      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a3b      	ldr	r2, [pc, #236]	; (8008164 <TIM_Base_SetConfig+0x120>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d003      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a3a      	ldr	r2, [pc, #232]	; (8008168 <TIM_Base_SetConfig+0x124>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d108      	bne.n	8008096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2f      	ldr	r2, [pc, #188]	; (8008158 <TIM_Base_SetConfig+0x114>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01f      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a4:	d01b      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2c      	ldr	r2, [pc, #176]	; (800815c <TIM_Base_SetConfig+0x118>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d017      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2b      	ldr	r2, [pc, #172]	; (8008160 <TIM_Base_SetConfig+0x11c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2a      	ldr	r2, [pc, #168]	; (8008164 <TIM_Base_SetConfig+0x120>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a29      	ldr	r2, [pc, #164]	; (8008168 <TIM_Base_SetConfig+0x124>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a28      	ldr	r2, [pc, #160]	; (800816c <TIM_Base_SetConfig+0x128>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a27      	ldr	r2, [pc, #156]	; (8008170 <TIM_Base_SetConfig+0x12c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a26      	ldr	r2, [pc, #152]	; (8008174 <TIM_Base_SetConfig+0x130>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d108      	bne.n	80080f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a10      	ldr	r2, [pc, #64]	; (8008158 <TIM_Base_SetConfig+0x114>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00f      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a12      	ldr	r2, [pc, #72]	; (8008168 <TIM_Base_SetConfig+0x124>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00b      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a11      	ldr	r2, [pc, #68]	; (800816c <TIM_Base_SetConfig+0x128>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d007      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a10      	ldr	r2, [pc, #64]	; (8008170 <TIM_Base_SetConfig+0x12c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a0f      	ldr	r2, [pc, #60]	; (8008174 <TIM_Base_SetConfig+0x130>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d103      	bne.n	8008144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	615a      	str	r2, [r3, #20]
}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40010000 	.word	0x40010000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40010400 	.word	0x40010400
 800816c:	40014000 	.word	0x40014000
 8008170:	40014400 	.word	0x40014400
 8008174:	40014800 	.word	0x40014800

08008178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	f023 0201 	bic.w	r2, r3, #1
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4b37      	ldr	r3, [pc, #220]	; (8008280 <TIM_OC1_SetConfig+0x108>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 0302 	bic.w	r3, r3, #2
 80081c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <TIM_OC1_SetConfig+0x10c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00f      	beq.n	80081f4 <TIM_OC1_SetConfig+0x7c>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a2c      	ldr	r2, [pc, #176]	; (8008288 <TIM_OC1_SetConfig+0x110>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00b      	beq.n	80081f4 <TIM_OC1_SetConfig+0x7c>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a2b      	ldr	r2, [pc, #172]	; (800828c <TIM_OC1_SetConfig+0x114>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d007      	beq.n	80081f4 <TIM_OC1_SetConfig+0x7c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a2a      	ldr	r2, [pc, #168]	; (8008290 <TIM_OC1_SetConfig+0x118>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_OC1_SetConfig+0x7c>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a29      	ldr	r2, [pc, #164]	; (8008294 <TIM_OC1_SetConfig+0x11c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d10c      	bne.n	800820e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f023 0308 	bic.w	r3, r3, #8
 80081fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f023 0304 	bic.w	r3, r3, #4
 800820c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a1c      	ldr	r2, [pc, #112]	; (8008284 <TIM_OC1_SetConfig+0x10c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00f      	beq.n	8008236 <TIM_OC1_SetConfig+0xbe>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <TIM_OC1_SetConfig+0x110>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00b      	beq.n	8008236 <TIM_OC1_SetConfig+0xbe>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a1a      	ldr	r2, [pc, #104]	; (800828c <TIM_OC1_SetConfig+0x114>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d007      	beq.n	8008236 <TIM_OC1_SetConfig+0xbe>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <TIM_OC1_SetConfig+0x118>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_OC1_SetConfig+0xbe>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a18      	ldr	r2, [pc, #96]	; (8008294 <TIM_OC1_SetConfig+0x11c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d111      	bne.n	800825a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800823c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	4313      	orrs	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	621a      	str	r2, [r3, #32]
}
 8008274:	bf00      	nop
 8008276:	371c      	adds	r7, #28
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	fffeff8f 	.word	0xfffeff8f
 8008284:	40010000 	.word	0x40010000
 8008288:	40010400 	.word	0x40010400
 800828c:	40014000 	.word	0x40014000
 8008290:	40014400 	.word	0x40014400
 8008294:	40014800 	.word	0x40014800

08008298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f023 0210 	bic.w	r2, r3, #16
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4b34      	ldr	r3, [pc, #208]	; (8008394 <TIM_OC2_SetConfig+0xfc>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f023 0320 	bic.w	r3, r3, #32
 80082e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a29      	ldr	r2, [pc, #164]	; (8008398 <TIM_OC2_SetConfig+0x100>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC2_SetConfig+0x68>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a28      	ldr	r2, [pc, #160]	; (800839c <TIM_OC2_SetConfig+0x104>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10d      	bne.n	800831c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4313      	orrs	r3, r2
 8008312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1e      	ldr	r2, [pc, #120]	; (8008398 <TIM_OC2_SetConfig+0x100>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00f      	beq.n	8008344 <TIM_OC2_SetConfig+0xac>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a1d      	ldr	r2, [pc, #116]	; (800839c <TIM_OC2_SetConfig+0x104>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00b      	beq.n	8008344 <TIM_OC2_SetConfig+0xac>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a1c      	ldr	r2, [pc, #112]	; (80083a0 <TIM_OC2_SetConfig+0x108>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d007      	beq.n	8008344 <TIM_OC2_SetConfig+0xac>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <TIM_OC2_SetConfig+0x10c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <TIM_OC2_SetConfig+0xac>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a1a      	ldr	r2, [pc, #104]	; (80083a8 <TIM_OC2_SetConfig+0x110>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d113      	bne.n	800836c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800834a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4313      	orrs	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	621a      	str	r2, [r3, #32]
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	feff8fff 	.word	0xfeff8fff
 8008398:	40010000 	.word	0x40010000
 800839c:	40010400 	.word	0x40010400
 80083a0:	40014000 	.word	0x40014000
 80083a4:	40014400 	.word	0x40014400
 80083a8:	40014800 	.word	0x40014800

080083ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	021b      	lsls	r3, r3, #8
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a27      	ldr	r2, [pc, #156]	; (80084a4 <TIM_OC3_SetConfig+0xf8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_OC3_SetConfig+0x66>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a26      	ldr	r2, [pc, #152]	; (80084a8 <TIM_OC3_SetConfig+0xfc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d10d      	bne.n	800842e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800842c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a1c      	ldr	r2, [pc, #112]	; (80084a4 <TIM_OC3_SetConfig+0xf8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00f      	beq.n	8008456 <TIM_OC3_SetConfig+0xaa>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a1b      	ldr	r2, [pc, #108]	; (80084a8 <TIM_OC3_SetConfig+0xfc>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <TIM_OC3_SetConfig+0xaa>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a1a      	ldr	r2, [pc, #104]	; (80084ac <TIM_OC3_SetConfig+0x100>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_OC3_SetConfig+0xaa>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a19      	ldr	r2, [pc, #100]	; (80084b0 <TIM_OC3_SetConfig+0x104>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_OC3_SetConfig+0xaa>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a18      	ldr	r2, [pc, #96]	; (80084b4 <TIM_OC3_SetConfig+0x108>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d113      	bne.n	800847e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800845c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	621a      	str	r2, [r3, #32]
}
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	40010000 	.word	0x40010000
 80084a8:	40010400 	.word	0x40010400
 80084ac:	40014000 	.word	0x40014000
 80084b0:	40014400 	.word	0x40014400
 80084b4:	40014800 	.word	0x40014800

080084b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	031b      	lsls	r3, r3, #12
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a18      	ldr	r2, [pc, #96]	; (8008574 <TIM_OC4_SetConfig+0xbc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00f      	beq.n	8008538 <TIM_OC4_SetConfig+0x80>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <TIM_OC4_SetConfig+0xc0>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00b      	beq.n	8008538 <TIM_OC4_SetConfig+0x80>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a16      	ldr	r2, [pc, #88]	; (800857c <TIM_OC4_SetConfig+0xc4>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d007      	beq.n	8008538 <TIM_OC4_SetConfig+0x80>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a15      	ldr	r2, [pc, #84]	; (8008580 <TIM_OC4_SetConfig+0xc8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d003      	beq.n	8008538 <TIM_OC4_SetConfig+0x80>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a14      	ldr	r2, [pc, #80]	; (8008584 <TIM_OC4_SetConfig+0xcc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d109      	bne.n	800854c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800853e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	019b      	lsls	r3, r3, #6
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	621a      	str	r2, [r3, #32]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40010000 	.word	0x40010000
 8008578:	40010400 	.word	0x40010400
 800857c:	40014000 	.word	0x40014000
 8008580:	40014400 	.word	0x40014400
 8008584:	40014800 	.word	0x40014800

08008588 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80085c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	041b      	lsls	r3, r3, #16
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a17      	ldr	r2, [pc, #92]	; (8008638 <TIM_OC5_SetConfig+0xb0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00f      	beq.n	80085fe <TIM_OC5_SetConfig+0x76>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a16      	ldr	r2, [pc, #88]	; (800863c <TIM_OC5_SetConfig+0xb4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00b      	beq.n	80085fe <TIM_OC5_SetConfig+0x76>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a15      	ldr	r2, [pc, #84]	; (8008640 <TIM_OC5_SetConfig+0xb8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d007      	beq.n	80085fe <TIM_OC5_SetConfig+0x76>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a14      	ldr	r2, [pc, #80]	; (8008644 <TIM_OC5_SetConfig+0xbc>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC5_SetConfig+0x76>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a13      	ldr	r2, [pc, #76]	; (8008648 <TIM_OC5_SetConfig+0xc0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d109      	bne.n	8008612 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008604:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	621a      	str	r2, [r3, #32]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40010000 	.word	0x40010000
 800863c:	40010400 	.word	0x40010400
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800

0800864c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	4313      	orrs	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800868e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	051b      	lsls	r3, r3, #20
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a18      	ldr	r2, [pc, #96]	; (8008700 <TIM_OC6_SetConfig+0xb4>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00f      	beq.n	80086c4 <TIM_OC6_SetConfig+0x78>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a17      	ldr	r2, [pc, #92]	; (8008704 <TIM_OC6_SetConfig+0xb8>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00b      	beq.n	80086c4 <TIM_OC6_SetConfig+0x78>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a16      	ldr	r2, [pc, #88]	; (8008708 <TIM_OC6_SetConfig+0xbc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d007      	beq.n	80086c4 <TIM_OC6_SetConfig+0x78>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <TIM_OC6_SetConfig+0xc0>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_OC6_SetConfig+0x78>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a14      	ldr	r2, [pc, #80]	; (8008710 <TIM_OC6_SetConfig+0xc4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d109      	bne.n	80086d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	029b      	lsls	r3, r3, #10
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40010400 	.word	0x40010400
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	f023 0201 	bic.w	r2, r3, #1
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800873e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f023 030a 	bic.w	r3, r3, #10
 8008750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	621a      	str	r2, [r3, #32]
}
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008772:	b480      	push	{r7}
 8008774:	b087      	sub	sp, #28
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	f023 0210 	bic.w	r2, r3, #16
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800879c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	031b      	lsls	r3, r3, #12
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	011b      	lsls	r3, r3, #4
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
	...

080087d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <TIM_ITRx_SetConfig+0x38>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f043 0307 	orr.w	r3, r3, #7
 80087f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	609a      	str	r2, [r3, #8]
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	ffcfff8f 	.word	0xffcfff8f

08008810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800882a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	021a      	lsls	r2, r3, #8
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	431a      	orrs	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4313      	orrs	r3, r2
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	609a      	str	r2, [r3, #8]
}
 8008844:	bf00      	nop
 8008846:	371c      	adds	r7, #28
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008864:	2302      	movs	r3, #2
 8008866:	e068      	b.n	800893a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a2e      	ldr	r2, [pc, #184]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d004      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a2d      	ldr	r2, [pc, #180]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d108      	bne.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4313      	orrs	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1e      	ldr	r2, [pc, #120]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d01d      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088da:	d018      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1b      	ldr	r2, [pc, #108]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d013      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1a      	ldr	r2, [pc, #104]	; (8008954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00e      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a18      	ldr	r2, [pc, #96]	; (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d009      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a13      	ldr	r2, [pc, #76]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d004      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a14      	ldr	r2, [pc, #80]	; (800895c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d10c      	bne.n	8008928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4313      	orrs	r3, r2
 800891e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40010000 	.word	0x40010000
 800894c:	40010400 	.word	0x40010400
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40001800 	.word	0x40001800

08008960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008978:	2302      	movs	r3, #2
 800897a:	e065      	b.n	8008a48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	4313      	orrs	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	041b      	lsls	r3, r3, #16
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a16      	ldr	r2, [pc, #88]	; (8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d115      	bne.n	8008a36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	051b      	lsls	r3, r3, #20
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40010400 	.word	0x40010400

08008a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e042      	b.n	8008b30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d106      	bne.n	8008ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7f9 f819 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2224      	movs	r2, #36	; 0x24
 8008ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0201 	bic.w	r2, r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fbd8 	bl	8009290 <UART_SetConfig>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e022      	b.n	8008b30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 f92c 	bl	8009d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0201 	orr.w	r2, r2, #1
 8008b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 f9b3 	bl	8009e94 <UART_CheckIdleState>
 8008b2e:	4603      	mov	r3, r0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	f040 8083 	bne.w	8008c5a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_UART_Transmit+0x28>
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e07b      	b.n	8008c5c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Transmit+0x3a>
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e074      	b.n	8008c5c <HAL_UART_Transmit+0x124>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2221      	movs	r2, #33	; 0x21
 8008b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b8a:	f7f9 fbe9 	bl	8002360 <HAL_GetTick>
 8008b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	88fa      	ldrh	r2, [r7, #6]
 8008b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba8:	d108      	bne.n	8008bbc <HAL_UART_Transmit+0x84>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d104      	bne.n	8008bbc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	e003      	b.n	8008bc4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008bcc:	e02c      	b.n	8008c28 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2180      	movs	r1, #128	; 0x80
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f001 f9a6 	bl	8009f2a <UART_WaitOnFlagUntilTimeout>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e039      	b.n	8008c5c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10b      	bne.n	8008c06 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	3302      	adds	r3, #2
 8008c02:	61bb      	str	r3, [r7, #24]
 8008c04:	e007      	b.n	8008c16 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1cc      	bne.n	8008bce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2140      	movs	r1, #64	; 0x40
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f001 f973 	bl	8009f2a <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e006      	b.n	8008c5c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e000      	b.n	8008c5c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008c5a:	2302      	movs	r3, #2
  }
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3720      	adds	r7, #32
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c78:	2b20      	cmp	r3, #32
 8008c7a:	d131      	bne.n	8008ce0 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <HAL_UART_Receive_IT+0x24>
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e02a      	b.n	8008ce2 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d101      	bne.n	8008c9a <HAL_UART_Receive_IT+0x36>
 8008c96:	2302      	movs	r3, #2
 8008c98:	e023      	b.n	8008ce2 <HAL_UART_Receive_IT+0x7e>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a0f      	ldr	r2, [pc, #60]	; (8008cec <HAL_UART_Receive_IT+0x88>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00e      	beq.n	8008cd0 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008cce:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008cd0:	88fb      	ldrh	r3, [r7, #6]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f001 f9a8 	bl	800a02c <UART_Start_Receive_IT>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	e000      	b.n	8008ce2 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008ce0:	2302      	movs	r3, #2
  }
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	58000c00 	.word	0x58000c00

08008cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d16:	4013      	ands	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d118      	bne.n	8008d52 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d013      	beq.n	8008d52 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8282 	beq.w	800924c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
      }
      return;
 8008d50:	e27c      	b.n	800924c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80ef 	beq.w	8008f38 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4b73      	ldr	r3, [pc, #460]	; (8008f2c <HAL_UART_IRQHandler+0x23c>)
 8008d5e:	4013      	ands	r3, r2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d105      	bne.n	8008d70 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	4b72      	ldr	r3, [pc, #456]	; (8008f30 <HAL_UART_IRQHandler+0x240>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 80e4 	beq.w	8008f38 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d010      	beq.n	8008d9c <HAL_UART_IRQHandler+0xac>
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d92:	f043 0201 	orr.w	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d010      	beq.n	8008dc8 <HAL_UART_IRQHandler+0xd8>
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00b      	beq.n	8008dc8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2202      	movs	r2, #2
 8008db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dbe:	f043 0204 	orr.w	r2, r3, #4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d010      	beq.n	8008df4 <HAL_UART_IRQHandler+0x104>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2204      	movs	r2, #4
 8008de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dea:	f043 0202 	orr.w	r2, r3, #2
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d015      	beq.n	8008e2a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4b48      	ldr	r3, [pc, #288]	; (8008f2c <HAL_UART_IRQHandler+0x23c>)
 8008e0c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2208      	movs	r2, #8
 8008e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e20:	f043 0208 	orr.w	r2, r3, #8
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d011      	beq.n	8008e58 <HAL_UART_IRQHandler+0x168>
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00c      	beq.n	8008e58 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4e:	f043 0220 	orr.w	r2, r3, #32
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 81f6 	beq.w	8009250 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d011      	beq.n	8008e92 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e98:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
 8008ea6:	d004      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d031      	beq.n	8008f16 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 f978 	bl	800a1a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d123      	bne.n	8008f0e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ed4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d013      	beq.n	8008f06 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee2:	4a14      	ldr	r2, [pc, #80]	; (8008f34 <HAL_UART_IRQHandler+0x244>)
 8008ee4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fa fac4 	bl	8003478 <HAL_DMA_Abort_IT>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d017      	beq.n	8008f26 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f04:	e00f      	b.n	8008f26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9ac 	bl	8009264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0c:	e00b      	b.n	8008f26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f9a8 	bl	8009264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f14:	e007      	b.n	8008f26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f9a4 	bl	8009264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008f24:	e194      	b.n	8009250 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f26:	bf00      	nop
    return;
 8008f28:	e192      	b.n	8009250 <HAL_UART_IRQHandler+0x560>
 8008f2a:	bf00      	nop
 8008f2c:	10000001 	.word	0x10000001
 8008f30:	04000120 	.word	0x04000120
 8008f34:	0800a20d 	.word	0x0800a20d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	f040 810f 	bne.w	8009160 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8109 	beq.w	8009160 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 8103 	beq.w	8009160 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2210      	movs	r2, #16
 8008f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	f040 80bb 	bne.w	80090e8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a96      	ldr	r2, [pc, #600]	; (80091d4 <HAL_UART_IRQHandler+0x4e4>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d059      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a94      	ldr	r2, [pc, #592]	; (80091d8 <HAL_UART_IRQHandler+0x4e8>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d053      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a92      	ldr	r2, [pc, #584]	; (80091dc <HAL_UART_IRQHandler+0x4ec>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d04d      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a90      	ldr	r2, [pc, #576]	; (80091e0 <HAL_UART_IRQHandler+0x4f0>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d047      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a8e      	ldr	r2, [pc, #568]	; (80091e4 <HAL_UART_IRQHandler+0x4f4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d041      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a8c      	ldr	r2, [pc, #560]	; (80091e8 <HAL_UART_IRQHandler+0x4f8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d03b      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a8a      	ldr	r2, [pc, #552]	; (80091ec <HAL_UART_IRQHandler+0x4fc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d035      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a88      	ldr	r2, [pc, #544]	; (80091f0 <HAL_UART_IRQHandler+0x500>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d02f      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a86      	ldr	r2, [pc, #536]	; (80091f4 <HAL_UART_IRQHandler+0x504>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d029      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a84      	ldr	r2, [pc, #528]	; (80091f8 <HAL_UART_IRQHandler+0x508>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d023      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a82      	ldr	r2, [pc, #520]	; (80091fc <HAL_UART_IRQHandler+0x50c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d01d      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a80      	ldr	r2, [pc, #512]	; (8009200 <HAL_UART_IRQHandler+0x510>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d017      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a7e      	ldr	r2, [pc, #504]	; (8009204 <HAL_UART_IRQHandler+0x514>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d011      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a7c      	ldr	r2, [pc, #496]	; (8009208 <HAL_UART_IRQHandler+0x518>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d00b      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a7a      	ldr	r2, [pc, #488]	; (800920c <HAL_UART_IRQHandler+0x51c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d005      	beq.n	8009032 <HAL_UART_IRQHandler+0x342>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a78      	ldr	r2, [pc, #480]	; (8009210 <HAL_UART_IRQHandler+0x520>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d105      	bne.n	800903e <HAL_UART_IRQHandler+0x34e>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	b29b      	uxth	r3, r3
 800903c:	e004      	b.n	8009048 <HAL_UART_IRQHandler+0x358>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	b29b      	uxth	r3, r3
 8009048:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800904a:	893b      	ldrh	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 8101 	beq.w	8009254 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009058:	893a      	ldrh	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	f080 80fa 	bcs.w	8009254 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	893a      	ldrh	r2, [r7, #8]
 8009064:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009072:	d02b      	beq.n	80090cc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009082:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090a2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0210 	bic.w	r2, r2, #16
 80090c0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f9 feb8 	bl	8002e3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	b29b      	uxth	r3, r3
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f8c9 	bl	8009278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090e6:	e0b5      	b.n	8009254 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80a8 	beq.w	8009258 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009108:	897b      	ldrh	r3, [r7, #10]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 80a4 	beq.w	8009258 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800911e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6899      	ldr	r1, [r3, #8]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4b3a      	ldr	r3, [pc, #232]	; (8009214 <HAL_UART_IRQHandler+0x524>)
 800912c:	400b      	ands	r3, r1
 800912e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2220      	movs	r2, #32
 8009134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0210 	bic.w	r2, r2, #16
 8009152:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009154:	897b      	ldrh	r3, [r7, #10]
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f88d 	bl	8009278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800915e:	e07b      	b.n	8009258 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <HAL_UART_IRQHandler+0x496>
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d008      	beq.n	8009186 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800917c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fbba 	bl	800a8f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009184:	e06b      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918c:	2b00      	cmp	r3, #0
 800918e:	d012      	beq.n	80091b6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009196:	2b00      	cmp	r3, #0
 8009198:	d104      	bne.n	80091a4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d057      	beq.n	800925c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	4798      	blx	r3
    }
    return;
 80091b4:	e052      	b.n	800925c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d02b      	beq.n	8009218 <HAL_UART_IRQHandler+0x528>
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d026      	beq.n	8009218 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 f834 	bl	800a238 <UART_EndTransmit_IT>
    return;
 80091d0:	e045      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
 80091d2:	bf00      	nop
 80091d4:	40020010 	.word	0x40020010
 80091d8:	40020028 	.word	0x40020028
 80091dc:	40020040 	.word	0x40020040
 80091e0:	40020058 	.word	0x40020058
 80091e4:	40020070 	.word	0x40020070
 80091e8:	40020088 	.word	0x40020088
 80091ec:	400200a0 	.word	0x400200a0
 80091f0:	400200b8 	.word	0x400200b8
 80091f4:	40020410 	.word	0x40020410
 80091f8:	40020428 	.word	0x40020428
 80091fc:	40020440 	.word	0x40020440
 8009200:	40020458 	.word	0x40020458
 8009204:	40020470 	.word	0x40020470
 8009208:	40020488 	.word	0x40020488
 800920c:	400204a0 	.word	0x400204a0
 8009210:	400204b8 	.word	0x400204b8
 8009214:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d008      	beq.n	8009234 <HAL_UART_IRQHandler+0x544>
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fb77 	bl	800a920 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009232:	e014      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00f      	beq.n	800925e <HAL_UART_IRQHandler+0x56e>
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	da0c      	bge.n	800925e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fb61 	bl	800a90c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800924a:	e008      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
      return;
 800924c:	bf00      	nop
 800924e:	e006      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
    return;
 8009250:	bf00      	nop
 8009252:	e004      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
      return;
 8009254:	bf00      	nop
 8009256:	e002      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
      return;
 8009258:	bf00      	nop
 800925a:	e000      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
    return;
 800925c:	bf00      	nop
  }
}
 800925e:	3720      	adds	r7, #32
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009290:	b5b0      	push	{r4, r5, r7, lr}
 8009292:	b08e      	sub	sp, #56	; 0x38
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	431a      	orrs	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	4bbf      	ldr	r3, [pc, #764]	; (80095bc <UART_SetConfig+0x32c>)
 80092be:	4013      	ands	r3, r2
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092c6:	430b      	orrs	r3, r1
 80092c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4ab5      	ldr	r2, [pc, #724]	; (80095c0 <UART_SetConfig+0x330>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d004      	beq.n	80092fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092f6:	4313      	orrs	r3, r2
 80092f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	4bb0      	ldr	r3, [pc, #704]	; (80095c4 <UART_SetConfig+0x334>)
 8009302:	4013      	ands	r3, r2
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6812      	ldr	r2, [r2, #0]
 8009308:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800930a:	430b      	orrs	r3, r1
 800930c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	f023 010f 	bic.w	r1, r3, #15
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4aa7      	ldr	r2, [pc, #668]	; (80095c8 <UART_SetConfig+0x338>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d176      	bne.n	800941c <UART_SetConfig+0x18c>
 800932e:	4ba7      	ldr	r3, [pc, #668]	; (80095cc <UART_SetConfig+0x33c>)
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009336:	2b28      	cmp	r3, #40	; 0x28
 8009338:	d86c      	bhi.n	8009414 <UART_SetConfig+0x184>
 800933a:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <UART_SetConfig+0xb0>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	080093e5 	.word	0x080093e5
 8009344:	08009415 	.word	0x08009415
 8009348:	08009415 	.word	0x08009415
 800934c:	08009415 	.word	0x08009415
 8009350:	08009415 	.word	0x08009415
 8009354:	08009415 	.word	0x08009415
 8009358:	08009415 	.word	0x08009415
 800935c:	08009415 	.word	0x08009415
 8009360:	080093ed 	.word	0x080093ed
 8009364:	08009415 	.word	0x08009415
 8009368:	08009415 	.word	0x08009415
 800936c:	08009415 	.word	0x08009415
 8009370:	08009415 	.word	0x08009415
 8009374:	08009415 	.word	0x08009415
 8009378:	08009415 	.word	0x08009415
 800937c:	08009415 	.word	0x08009415
 8009380:	080093f5 	.word	0x080093f5
 8009384:	08009415 	.word	0x08009415
 8009388:	08009415 	.word	0x08009415
 800938c:	08009415 	.word	0x08009415
 8009390:	08009415 	.word	0x08009415
 8009394:	08009415 	.word	0x08009415
 8009398:	08009415 	.word	0x08009415
 800939c:	08009415 	.word	0x08009415
 80093a0:	080093fd 	.word	0x080093fd
 80093a4:	08009415 	.word	0x08009415
 80093a8:	08009415 	.word	0x08009415
 80093ac:	08009415 	.word	0x08009415
 80093b0:	08009415 	.word	0x08009415
 80093b4:	08009415 	.word	0x08009415
 80093b8:	08009415 	.word	0x08009415
 80093bc:	08009415 	.word	0x08009415
 80093c0:	08009405 	.word	0x08009405
 80093c4:	08009415 	.word	0x08009415
 80093c8:	08009415 	.word	0x08009415
 80093cc:	08009415 	.word	0x08009415
 80093d0:	08009415 	.word	0x08009415
 80093d4:	08009415 	.word	0x08009415
 80093d8:	08009415 	.word	0x08009415
 80093dc:	08009415 	.word	0x08009415
 80093e0:	0800940d 	.word	0x0800940d
 80093e4:	2301      	movs	r3, #1
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e222      	b.n	8009832 <UART_SetConfig+0x5a2>
 80093ec:	2304      	movs	r3, #4
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e21e      	b.n	8009832 <UART_SetConfig+0x5a2>
 80093f4:	2308      	movs	r3, #8
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e21a      	b.n	8009832 <UART_SetConfig+0x5a2>
 80093fc:	2310      	movs	r3, #16
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e216      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009404:	2320      	movs	r3, #32
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e212      	b.n	8009832 <UART_SetConfig+0x5a2>
 800940c:	2340      	movs	r3, #64	; 0x40
 800940e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009412:	e20e      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009414:	2380      	movs	r3, #128	; 0x80
 8009416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941a:	e20a      	b.n	8009832 <UART_SetConfig+0x5a2>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a6b      	ldr	r2, [pc, #428]	; (80095d0 <UART_SetConfig+0x340>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d130      	bne.n	8009488 <UART_SetConfig+0x1f8>
 8009426:	4b69      	ldr	r3, [pc, #420]	; (80095cc <UART_SetConfig+0x33c>)
 8009428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	2b05      	cmp	r3, #5
 8009430:	d826      	bhi.n	8009480 <UART_SetConfig+0x1f0>
 8009432:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <UART_SetConfig+0x1a8>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	08009451 	.word	0x08009451
 800943c:	08009459 	.word	0x08009459
 8009440:	08009461 	.word	0x08009461
 8009444:	08009469 	.word	0x08009469
 8009448:	08009471 	.word	0x08009471
 800944c:	08009479 	.word	0x08009479
 8009450:	2300      	movs	r3, #0
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e1ec      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009458:	2304      	movs	r3, #4
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	e1e8      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009460:	2308      	movs	r3, #8
 8009462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009466:	e1e4      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009468:	2310      	movs	r3, #16
 800946a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946e:	e1e0      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009470:	2320      	movs	r3, #32
 8009472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009476:	e1dc      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009478:	2340      	movs	r3, #64	; 0x40
 800947a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947e:	e1d8      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009480:	2380      	movs	r3, #128	; 0x80
 8009482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009486:	e1d4      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a51      	ldr	r2, [pc, #324]	; (80095d4 <UART_SetConfig+0x344>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d130      	bne.n	80094f4 <UART_SetConfig+0x264>
 8009492:	4b4e      	ldr	r3, [pc, #312]	; (80095cc <UART_SetConfig+0x33c>)
 8009494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	2b05      	cmp	r3, #5
 800949c:	d826      	bhi.n	80094ec <UART_SetConfig+0x25c>
 800949e:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <UART_SetConfig+0x214>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	080094bd 	.word	0x080094bd
 80094a8:	080094c5 	.word	0x080094c5
 80094ac:	080094cd 	.word	0x080094cd
 80094b0:	080094d5 	.word	0x080094d5
 80094b4:	080094dd 	.word	0x080094dd
 80094b8:	080094e5 	.word	0x080094e5
 80094bc:	2300      	movs	r3, #0
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e1b6      	b.n	8009832 <UART_SetConfig+0x5a2>
 80094c4:	2304      	movs	r3, #4
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e1b2      	b.n	8009832 <UART_SetConfig+0x5a2>
 80094cc:	2308      	movs	r3, #8
 80094ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d2:	e1ae      	b.n	8009832 <UART_SetConfig+0x5a2>
 80094d4:	2310      	movs	r3, #16
 80094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094da:	e1aa      	b.n	8009832 <UART_SetConfig+0x5a2>
 80094dc:	2320      	movs	r3, #32
 80094de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e2:	e1a6      	b.n	8009832 <UART_SetConfig+0x5a2>
 80094e4:	2340      	movs	r3, #64	; 0x40
 80094e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ea:	e1a2      	b.n	8009832 <UART_SetConfig+0x5a2>
 80094ec:	2380      	movs	r3, #128	; 0x80
 80094ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f2:	e19e      	b.n	8009832 <UART_SetConfig+0x5a2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a37      	ldr	r2, [pc, #220]	; (80095d8 <UART_SetConfig+0x348>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d130      	bne.n	8009560 <UART_SetConfig+0x2d0>
 80094fe:	4b33      	ldr	r3, [pc, #204]	; (80095cc <UART_SetConfig+0x33c>)
 8009500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b05      	cmp	r3, #5
 8009508:	d826      	bhi.n	8009558 <UART_SetConfig+0x2c8>
 800950a:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <UART_SetConfig+0x280>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	08009529 	.word	0x08009529
 8009514:	08009531 	.word	0x08009531
 8009518:	08009539 	.word	0x08009539
 800951c:	08009541 	.word	0x08009541
 8009520:	08009549 	.word	0x08009549
 8009524:	08009551 	.word	0x08009551
 8009528:	2300      	movs	r3, #0
 800952a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952e:	e180      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009530:	2304      	movs	r3, #4
 8009532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009536:	e17c      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009538:	2308      	movs	r3, #8
 800953a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953e:	e178      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009540:	2310      	movs	r3, #16
 8009542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009546:	e174      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009548:	2320      	movs	r3, #32
 800954a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954e:	e170      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009550:	2340      	movs	r3, #64	; 0x40
 8009552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009556:	e16c      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009558:	2380      	movs	r3, #128	; 0x80
 800955a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955e:	e168      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1d      	ldr	r2, [pc, #116]	; (80095dc <UART_SetConfig+0x34c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d142      	bne.n	80095f0 <UART_SetConfig+0x360>
 800956a:	4b18      	ldr	r3, [pc, #96]	; (80095cc <UART_SetConfig+0x33c>)
 800956c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	2b05      	cmp	r3, #5
 8009574:	d838      	bhi.n	80095e8 <UART_SetConfig+0x358>
 8009576:	a201      	add	r2, pc, #4	; (adr r2, 800957c <UART_SetConfig+0x2ec>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	08009595 	.word	0x08009595
 8009580:	0800959d 	.word	0x0800959d
 8009584:	080095a5 	.word	0x080095a5
 8009588:	080095ad 	.word	0x080095ad
 800958c:	080095b5 	.word	0x080095b5
 8009590:	080095e1 	.word	0x080095e1
 8009594:	2300      	movs	r3, #0
 8009596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959a:	e14a      	b.n	8009832 <UART_SetConfig+0x5a2>
 800959c:	2304      	movs	r3, #4
 800959e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a2:	e146      	b.n	8009832 <UART_SetConfig+0x5a2>
 80095a4:	2308      	movs	r3, #8
 80095a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095aa:	e142      	b.n	8009832 <UART_SetConfig+0x5a2>
 80095ac:	2310      	movs	r3, #16
 80095ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b2:	e13e      	b.n	8009832 <UART_SetConfig+0x5a2>
 80095b4:	2320      	movs	r3, #32
 80095b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ba:	e13a      	b.n	8009832 <UART_SetConfig+0x5a2>
 80095bc:	cfff69f3 	.word	0xcfff69f3
 80095c0:	58000c00 	.word	0x58000c00
 80095c4:	11fff4ff 	.word	0x11fff4ff
 80095c8:	40011000 	.word	0x40011000
 80095cc:	58024400 	.word	0x58024400
 80095d0:	40004400 	.word	0x40004400
 80095d4:	40004800 	.word	0x40004800
 80095d8:	40004c00 	.word	0x40004c00
 80095dc:	40005000 	.word	0x40005000
 80095e0:	2340      	movs	r3, #64	; 0x40
 80095e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e6:	e124      	b.n	8009832 <UART_SetConfig+0x5a2>
 80095e8:	2380      	movs	r3, #128	; 0x80
 80095ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ee:	e120      	b.n	8009832 <UART_SetConfig+0x5a2>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4acc      	ldr	r2, [pc, #816]	; (8009928 <UART_SetConfig+0x698>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d176      	bne.n	80096e8 <UART_SetConfig+0x458>
 80095fa:	4bcc      	ldr	r3, [pc, #816]	; (800992c <UART_SetConfig+0x69c>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009602:	2b28      	cmp	r3, #40	; 0x28
 8009604:	d86c      	bhi.n	80096e0 <UART_SetConfig+0x450>
 8009606:	a201      	add	r2, pc, #4	; (adr r2, 800960c <UART_SetConfig+0x37c>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	080096b1 	.word	0x080096b1
 8009610:	080096e1 	.word	0x080096e1
 8009614:	080096e1 	.word	0x080096e1
 8009618:	080096e1 	.word	0x080096e1
 800961c:	080096e1 	.word	0x080096e1
 8009620:	080096e1 	.word	0x080096e1
 8009624:	080096e1 	.word	0x080096e1
 8009628:	080096e1 	.word	0x080096e1
 800962c:	080096b9 	.word	0x080096b9
 8009630:	080096e1 	.word	0x080096e1
 8009634:	080096e1 	.word	0x080096e1
 8009638:	080096e1 	.word	0x080096e1
 800963c:	080096e1 	.word	0x080096e1
 8009640:	080096e1 	.word	0x080096e1
 8009644:	080096e1 	.word	0x080096e1
 8009648:	080096e1 	.word	0x080096e1
 800964c:	080096c1 	.word	0x080096c1
 8009650:	080096e1 	.word	0x080096e1
 8009654:	080096e1 	.word	0x080096e1
 8009658:	080096e1 	.word	0x080096e1
 800965c:	080096e1 	.word	0x080096e1
 8009660:	080096e1 	.word	0x080096e1
 8009664:	080096e1 	.word	0x080096e1
 8009668:	080096e1 	.word	0x080096e1
 800966c:	080096c9 	.word	0x080096c9
 8009670:	080096e1 	.word	0x080096e1
 8009674:	080096e1 	.word	0x080096e1
 8009678:	080096e1 	.word	0x080096e1
 800967c:	080096e1 	.word	0x080096e1
 8009680:	080096e1 	.word	0x080096e1
 8009684:	080096e1 	.word	0x080096e1
 8009688:	080096e1 	.word	0x080096e1
 800968c:	080096d1 	.word	0x080096d1
 8009690:	080096e1 	.word	0x080096e1
 8009694:	080096e1 	.word	0x080096e1
 8009698:	080096e1 	.word	0x080096e1
 800969c:	080096e1 	.word	0x080096e1
 80096a0:	080096e1 	.word	0x080096e1
 80096a4:	080096e1 	.word	0x080096e1
 80096a8:	080096e1 	.word	0x080096e1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	2301      	movs	r3, #1
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e0bc      	b.n	8009832 <UART_SetConfig+0x5a2>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e0b8      	b.n	8009832 <UART_SetConfig+0x5a2>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e0b4      	b.n	8009832 <UART_SetConfig+0x5a2>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	e0b0      	b.n	8009832 <UART_SetConfig+0x5a2>
 80096d0:	2320      	movs	r3, #32
 80096d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d6:	e0ac      	b.n	8009832 <UART_SetConfig+0x5a2>
 80096d8:	2340      	movs	r3, #64	; 0x40
 80096da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096de:	e0a8      	b.n	8009832 <UART_SetConfig+0x5a2>
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e6:	e0a4      	b.n	8009832 <UART_SetConfig+0x5a2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a90      	ldr	r2, [pc, #576]	; (8009930 <UART_SetConfig+0x6a0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d130      	bne.n	8009754 <UART_SetConfig+0x4c4>
 80096f2:	4b8e      	ldr	r3, [pc, #568]	; (800992c <UART_SetConfig+0x69c>)
 80096f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b05      	cmp	r3, #5
 80096fc:	d826      	bhi.n	800974c <UART_SetConfig+0x4bc>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <UART_SetConfig+0x474>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	0800971d 	.word	0x0800971d
 8009708:	08009725 	.word	0x08009725
 800970c:	0800972d 	.word	0x0800972d
 8009710:	08009735 	.word	0x08009735
 8009714:	0800973d 	.word	0x0800973d
 8009718:	08009745 	.word	0x08009745
 800971c:	2300      	movs	r3, #0
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009722:	e086      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009724:	2304      	movs	r3, #4
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972a:	e082      	b.n	8009832 <UART_SetConfig+0x5a2>
 800972c:	2308      	movs	r3, #8
 800972e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009732:	e07e      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009734:	2310      	movs	r3, #16
 8009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973a:	e07a      	b.n	8009832 <UART_SetConfig+0x5a2>
 800973c:	2320      	movs	r3, #32
 800973e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009742:	e076      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009744:	2340      	movs	r3, #64	; 0x40
 8009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974a:	e072      	b.n	8009832 <UART_SetConfig+0x5a2>
 800974c:	2380      	movs	r3, #128	; 0x80
 800974e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009752:	e06e      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a76      	ldr	r2, [pc, #472]	; (8009934 <UART_SetConfig+0x6a4>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d130      	bne.n	80097c0 <UART_SetConfig+0x530>
 800975e:	4b73      	ldr	r3, [pc, #460]	; (800992c <UART_SetConfig+0x69c>)
 8009760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b05      	cmp	r3, #5
 8009768:	d826      	bhi.n	80097b8 <UART_SetConfig+0x528>
 800976a:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <UART_SetConfig+0x4e0>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	08009789 	.word	0x08009789
 8009774:	08009791 	.word	0x08009791
 8009778:	08009799 	.word	0x08009799
 800977c:	080097a1 	.word	0x080097a1
 8009780:	080097a9 	.word	0x080097a9
 8009784:	080097b1 	.word	0x080097b1
 8009788:	2300      	movs	r3, #0
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e050      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009790:	2304      	movs	r3, #4
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e04c      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009798:	2308      	movs	r3, #8
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979e:	e048      	b.n	8009832 <UART_SetConfig+0x5a2>
 80097a0:	2310      	movs	r3, #16
 80097a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a6:	e044      	b.n	8009832 <UART_SetConfig+0x5a2>
 80097a8:	2320      	movs	r3, #32
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e040      	b.n	8009832 <UART_SetConfig+0x5a2>
 80097b0:	2340      	movs	r3, #64	; 0x40
 80097b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b6:	e03c      	b.n	8009832 <UART_SetConfig+0x5a2>
 80097b8:	2380      	movs	r3, #128	; 0x80
 80097ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097be:	e038      	b.n	8009832 <UART_SetConfig+0x5a2>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a5c      	ldr	r2, [pc, #368]	; (8009938 <UART_SetConfig+0x6a8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d130      	bne.n	800982c <UART_SetConfig+0x59c>
 80097ca:	4b58      	ldr	r3, [pc, #352]	; (800992c <UART_SetConfig+0x69c>)
 80097cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	2b05      	cmp	r3, #5
 80097d4:	d826      	bhi.n	8009824 <UART_SetConfig+0x594>
 80097d6:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <UART_SetConfig+0x54c>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	080097f5 	.word	0x080097f5
 80097e0:	080097fd 	.word	0x080097fd
 80097e4:	08009805 	.word	0x08009805
 80097e8:	0800980d 	.word	0x0800980d
 80097ec:	08009815 	.word	0x08009815
 80097f0:	0800981d 	.word	0x0800981d
 80097f4:	2302      	movs	r3, #2
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e01a      	b.n	8009832 <UART_SetConfig+0x5a2>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e016      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e012      	b.n	8009832 <UART_SetConfig+0x5a2>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e00e      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009814:	2320      	movs	r3, #32
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e00a      	b.n	8009832 <UART_SetConfig+0x5a2>
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e006      	b.n	8009832 <UART_SetConfig+0x5a2>
 8009824:	2380      	movs	r3, #128	; 0x80
 8009826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982a:	e002      	b.n	8009832 <UART_SetConfig+0x5a2>
 800982c:	2380      	movs	r3, #128	; 0x80
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a40      	ldr	r2, [pc, #256]	; (8009938 <UART_SetConfig+0x6a8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	f040 80ef 	bne.w	8009a1c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800983e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009842:	2b20      	cmp	r3, #32
 8009844:	dc46      	bgt.n	80098d4 <UART_SetConfig+0x644>
 8009846:	2b02      	cmp	r3, #2
 8009848:	f2c0 8081 	blt.w	800994e <UART_SetConfig+0x6be>
 800984c:	3b02      	subs	r3, #2
 800984e:	2b1e      	cmp	r3, #30
 8009850:	d87d      	bhi.n	800994e <UART_SetConfig+0x6be>
 8009852:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0x5c8>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	080098db 	.word	0x080098db
 800985c:	0800994f 	.word	0x0800994f
 8009860:	080098e3 	.word	0x080098e3
 8009864:	0800994f 	.word	0x0800994f
 8009868:	0800994f 	.word	0x0800994f
 800986c:	0800994f 	.word	0x0800994f
 8009870:	080098f3 	.word	0x080098f3
 8009874:	0800994f 	.word	0x0800994f
 8009878:	0800994f 	.word	0x0800994f
 800987c:	0800994f 	.word	0x0800994f
 8009880:	0800994f 	.word	0x0800994f
 8009884:	0800994f 	.word	0x0800994f
 8009888:	0800994f 	.word	0x0800994f
 800988c:	0800994f 	.word	0x0800994f
 8009890:	08009903 	.word	0x08009903
 8009894:	0800994f 	.word	0x0800994f
 8009898:	0800994f 	.word	0x0800994f
 800989c:	0800994f 	.word	0x0800994f
 80098a0:	0800994f 	.word	0x0800994f
 80098a4:	0800994f 	.word	0x0800994f
 80098a8:	0800994f 	.word	0x0800994f
 80098ac:	0800994f 	.word	0x0800994f
 80098b0:	0800994f 	.word	0x0800994f
 80098b4:	0800994f 	.word	0x0800994f
 80098b8:	0800994f 	.word	0x0800994f
 80098bc:	0800994f 	.word	0x0800994f
 80098c0:	0800994f 	.word	0x0800994f
 80098c4:	0800994f 	.word	0x0800994f
 80098c8:	0800994f 	.word	0x0800994f
 80098cc:	0800994f 	.word	0x0800994f
 80098d0:	08009941 	.word	0x08009941
 80098d4:	2b40      	cmp	r3, #64	; 0x40
 80098d6:	d036      	beq.n	8009946 <UART_SetConfig+0x6b6>
 80098d8:	e039      	b.n	800994e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098da:	f7fd fa71 	bl	8006dc0 <HAL_RCCEx_GetD3PCLK1Freq>
 80098de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80098e0:	e03b      	b.n	800995a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e2:	f107 0314 	add.w	r3, r7, #20
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fd fa80 	bl	8006dec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098f0:	e033      	b.n	800995a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd fbcc 	bl	8007094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009900:	e02b      	b.n	800995a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009902:	4b0a      	ldr	r3, [pc, #40]	; (800992c <UART_SetConfig+0x69c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d009      	beq.n	8009922 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800990e:	4b07      	ldr	r3, [pc, #28]	; (800992c <UART_SetConfig+0x69c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	08db      	lsrs	r3, r3, #3
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	4a08      	ldr	r2, [pc, #32]	; (800993c <UART_SetConfig+0x6ac>)
 800991a:	fa22 f303 	lsr.w	r3, r2, r3
 800991e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009920:	e01b      	b.n	800995a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009922:	4b06      	ldr	r3, [pc, #24]	; (800993c <UART_SetConfig+0x6ac>)
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009926:	e018      	b.n	800995a <UART_SetConfig+0x6ca>
 8009928:	40011400 	.word	0x40011400
 800992c:	58024400 	.word	0x58024400
 8009930:	40007800 	.word	0x40007800
 8009934:	40007c00 	.word	0x40007c00
 8009938:	58000c00 	.word	0x58000c00
 800993c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009940:	4bc4      	ldr	r3, [pc, #784]	; (8009c54 <UART_SetConfig+0x9c4>)
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009944:	e009      	b.n	800995a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800994c:	e005      	b.n	800995a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 81da 	beq.w	8009d16 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	4abc      	ldr	r2, [pc, #752]	; (8009c58 <UART_SetConfig+0x9c8>)
 8009968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800996c:	461a      	mov	r2, r3
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	fbb3 f3f2 	udiv	r3, r3, r2
 8009974:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	4613      	mov	r3, r2
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	4413      	add	r3, r2
 8009980:	6a3a      	ldr	r2, [r7, #32]
 8009982:	429a      	cmp	r2, r3
 8009984:	d305      	bcc.n	8009992 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800998c:	6a3a      	ldr	r2, [r7, #32]
 800998e:	429a      	cmp	r2, r3
 8009990:	d903      	bls.n	800999a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009998:	e1bd      	b.n	8009d16 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	4618      	mov	r0, r3
 800999e:	f04f 0100 	mov.w	r1, #0
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	4aac      	ldr	r2, [pc, #688]	; (8009c58 <UART_SetConfig+0x9c8>)
 80099a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	f04f 0300 	mov.w	r3, #0
 80099b2:	f7f6 fc91 	bl	80002d8 <__aeabi_uldivmod>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	f04f 0200 	mov.w	r2, #0
 80099c2:	f04f 0300 	mov.w	r3, #0
 80099c6:	020b      	lsls	r3, r1, #8
 80099c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099cc:	0202      	lsls	r2, r0, #8
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	6849      	ldr	r1, [r1, #4]
 80099d2:	0849      	lsrs	r1, r1, #1
 80099d4:	4608      	mov	r0, r1
 80099d6:	f04f 0100 	mov.w	r1, #0
 80099da:	1814      	adds	r4, r2, r0
 80099dc:	eb43 0501 	adc.w	r5, r3, r1
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	461a      	mov	r2, r3
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	4620      	mov	r0, r4
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7f6 fc73 	bl	80002d8 <__aeabi_uldivmod>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4613      	mov	r3, r2
 80099f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a00:	d308      	bcc.n	8009a14 <UART_SetConfig+0x784>
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a08:	d204      	bcs.n	8009a14 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a10:	60da      	str	r2, [r3, #12]
 8009a12:	e180      	b.n	8009d16 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a1a:	e17c      	b.n	8009d16 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a24:	f040 80bf 	bne.w	8009ba6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a2c:	2b20      	cmp	r3, #32
 8009a2e:	dc49      	bgt.n	8009ac4 <UART_SetConfig+0x834>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	db7c      	blt.n	8009b2e <UART_SetConfig+0x89e>
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	d87a      	bhi.n	8009b2e <UART_SetConfig+0x89e>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <UART_SetConfig+0x7b0>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009acb 	.word	0x08009acb
 8009a44:	08009ad3 	.word	0x08009ad3
 8009a48:	08009b2f 	.word	0x08009b2f
 8009a4c:	08009b2f 	.word	0x08009b2f
 8009a50:	08009adb 	.word	0x08009adb
 8009a54:	08009b2f 	.word	0x08009b2f
 8009a58:	08009b2f 	.word	0x08009b2f
 8009a5c:	08009b2f 	.word	0x08009b2f
 8009a60:	08009aeb 	.word	0x08009aeb
 8009a64:	08009b2f 	.word	0x08009b2f
 8009a68:	08009b2f 	.word	0x08009b2f
 8009a6c:	08009b2f 	.word	0x08009b2f
 8009a70:	08009b2f 	.word	0x08009b2f
 8009a74:	08009b2f 	.word	0x08009b2f
 8009a78:	08009b2f 	.word	0x08009b2f
 8009a7c:	08009b2f 	.word	0x08009b2f
 8009a80:	08009afb 	.word	0x08009afb
 8009a84:	08009b2f 	.word	0x08009b2f
 8009a88:	08009b2f 	.word	0x08009b2f
 8009a8c:	08009b2f 	.word	0x08009b2f
 8009a90:	08009b2f 	.word	0x08009b2f
 8009a94:	08009b2f 	.word	0x08009b2f
 8009a98:	08009b2f 	.word	0x08009b2f
 8009a9c:	08009b2f 	.word	0x08009b2f
 8009aa0:	08009b2f 	.word	0x08009b2f
 8009aa4:	08009b2f 	.word	0x08009b2f
 8009aa8:	08009b2f 	.word	0x08009b2f
 8009aac:	08009b2f 	.word	0x08009b2f
 8009ab0:	08009b2f 	.word	0x08009b2f
 8009ab4:	08009b2f 	.word	0x08009b2f
 8009ab8:	08009b2f 	.word	0x08009b2f
 8009abc:	08009b2f 	.word	0x08009b2f
 8009ac0:	08009b21 	.word	0x08009b21
 8009ac4:	2b40      	cmp	r3, #64	; 0x40
 8009ac6:	d02e      	beq.n	8009b26 <UART_SetConfig+0x896>
 8009ac8:	e031      	b.n	8009b2e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aca:	f7fc fa0d 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8009ace:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ad0:	e033      	b.n	8009b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ad2:	f7fc fa1f 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 8009ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ad8:	e02f      	b.n	8009b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ada:	f107 0314 	add.w	r3, r7, #20
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fd f984 	bl	8006dec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ae8:	e027      	b.n	8009b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aea:	f107 0308 	add.w	r3, r7, #8
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fd fad0 	bl	8007094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009af8:	e01f      	b.n	8009b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009afa:	4b58      	ldr	r3, [pc, #352]	; (8009c5c <UART_SetConfig+0x9cc>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d009      	beq.n	8009b1a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b06:	4b55      	ldr	r3, [pc, #340]	; (8009c5c <UART_SetConfig+0x9cc>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	08db      	lsrs	r3, r3, #3
 8009b0c:	f003 0303 	and.w	r3, r3, #3
 8009b10:	4a53      	ldr	r2, [pc, #332]	; (8009c60 <UART_SetConfig+0x9d0>)
 8009b12:	fa22 f303 	lsr.w	r3, r2, r3
 8009b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b18:	e00f      	b.n	8009b3a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009b1a:	4b51      	ldr	r3, [pc, #324]	; (8009c60 <UART_SetConfig+0x9d0>)
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b1e:	e00c      	b.n	8009b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b20:	4b4c      	ldr	r3, [pc, #304]	; (8009c54 <UART_SetConfig+0x9c4>)
 8009b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b24:	e009      	b.n	8009b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b2c:	e005      	b.n	8009b3a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80ea 	beq.w	8009d16 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	4a44      	ldr	r2, [pc, #272]	; (8009c58 <UART_SetConfig+0x9c8>)
 8009b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b54:	005a      	lsls	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	085b      	lsrs	r3, r3, #1
 8009b5c:	441a      	add	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	2b0f      	cmp	r3, #15
 8009b6e:	d916      	bls.n	8009b9e <UART_SetConfig+0x90e>
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b76:	d212      	bcs.n	8009b9e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f023 030f 	bic.w	r3, r3, #15
 8009b80:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	085b      	lsrs	r3, r3, #1
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b90:	4313      	orrs	r3, r2
 8009b92:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b9a:	60da      	str	r2, [r3, #12]
 8009b9c:	e0bb      	b.n	8009d16 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ba4:	e0b7      	b.n	8009d16 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009baa:	2b20      	cmp	r3, #32
 8009bac:	dc4a      	bgt.n	8009c44 <UART_SetConfig+0x9b4>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f2c0 8086 	blt.w	8009cc0 <UART_SetConfig+0xa30>
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	f200 8083 	bhi.w	8009cc0 <UART_SetConfig+0xa30>
 8009bba:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <UART_SetConfig+0x930>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009c4b 	.word	0x08009c4b
 8009bc4:	08009c65 	.word	0x08009c65
 8009bc8:	08009cc1 	.word	0x08009cc1
 8009bcc:	08009cc1 	.word	0x08009cc1
 8009bd0:	08009c6d 	.word	0x08009c6d
 8009bd4:	08009cc1 	.word	0x08009cc1
 8009bd8:	08009cc1 	.word	0x08009cc1
 8009bdc:	08009cc1 	.word	0x08009cc1
 8009be0:	08009c7d 	.word	0x08009c7d
 8009be4:	08009cc1 	.word	0x08009cc1
 8009be8:	08009cc1 	.word	0x08009cc1
 8009bec:	08009cc1 	.word	0x08009cc1
 8009bf0:	08009cc1 	.word	0x08009cc1
 8009bf4:	08009cc1 	.word	0x08009cc1
 8009bf8:	08009cc1 	.word	0x08009cc1
 8009bfc:	08009cc1 	.word	0x08009cc1
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009cc1 	.word	0x08009cc1
 8009c08:	08009cc1 	.word	0x08009cc1
 8009c0c:	08009cc1 	.word	0x08009cc1
 8009c10:	08009cc1 	.word	0x08009cc1
 8009c14:	08009cc1 	.word	0x08009cc1
 8009c18:	08009cc1 	.word	0x08009cc1
 8009c1c:	08009cc1 	.word	0x08009cc1
 8009c20:	08009cc1 	.word	0x08009cc1
 8009c24:	08009cc1 	.word	0x08009cc1
 8009c28:	08009cc1 	.word	0x08009cc1
 8009c2c:	08009cc1 	.word	0x08009cc1
 8009c30:	08009cc1 	.word	0x08009cc1
 8009c34:	08009cc1 	.word	0x08009cc1
 8009c38:	08009cc1 	.word	0x08009cc1
 8009c3c:	08009cc1 	.word	0x08009cc1
 8009c40:	08009cb3 	.word	0x08009cb3
 8009c44:	2b40      	cmp	r3, #64	; 0x40
 8009c46:	d037      	beq.n	8009cb8 <UART_SetConfig+0xa28>
 8009c48:	e03a      	b.n	8009cc0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4a:	f7fc f94d 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8009c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c50:	e03c      	b.n	8009ccc <UART_SetConfig+0xa3c>
 8009c52:	bf00      	nop
 8009c54:	003d0900 	.word	0x003d0900
 8009c58:	0800b560 	.word	0x0800b560
 8009c5c:	58024400 	.word	0x58024400
 8009c60:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c64:	f7fc f956 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 8009c68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c6a:	e02f      	b.n	8009ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fd f8bb 	bl	8006dec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c7a:	e027      	b.n	8009ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c7c:	f107 0308 	add.w	r3, r7, #8
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fd fa07 	bl	8007094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c8a:	e01f      	b.n	8009ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c8c:	4b2c      	ldr	r3, [pc, #176]	; (8009d40 <UART_SetConfig+0xab0>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d009      	beq.n	8009cac <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c98:	4b29      	ldr	r3, [pc, #164]	; (8009d40 <UART_SetConfig+0xab0>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	08db      	lsrs	r3, r3, #3
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	4a28      	ldr	r2, [pc, #160]	; (8009d44 <UART_SetConfig+0xab4>)
 8009ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009caa:	e00f      	b.n	8009ccc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009cac:	4b25      	ldr	r3, [pc, #148]	; (8009d44 <UART_SetConfig+0xab4>)
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb0:	e00c      	b.n	8009ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb2:	4b25      	ldr	r3, [pc, #148]	; (8009d48 <UART_SetConfig+0xab8>)
 8009cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb6:	e009      	b.n	8009ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cbe:	e005      	b.n	8009ccc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009cca:	bf00      	nop
    }

    if (pclk != 0U)
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d021      	beq.n	8009d16 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	4a1d      	ldr	r2, [pc, #116]	; (8009d4c <UART_SetConfig+0xabc>)
 8009cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	085b      	lsrs	r3, r3, #1
 8009cea:	441a      	add	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	2b0f      	cmp	r3, #15
 8009cfc:	d908      	bls.n	8009d10 <UART_SetConfig+0xa80>
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d04:	d204      	bcs.n	8009d10 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d0c:	60da      	str	r2, [r3, #12]
 8009d0e:	e002      	b.n	8009d16 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009d32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3738      	adds	r7, #56	; 0x38
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	58024400 	.word	0x58024400
 8009d44:	03d09000 	.word	0x03d09000
 8009d48:	003d0900 	.word	0x003d0900
 8009d4c:	0800b560 	.word	0x0800b560

08009d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da0:	f003 0304 	and.w	r3, r3, #4
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00a      	beq.n	8009dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	f003 0308 	and.w	r3, r3, #8
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00a      	beq.n	8009e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01a      	beq.n	8009e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e4e:	d10a      	bne.n	8009e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00a      	beq.n	8009e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	430a      	orrs	r2, r1
 8009e86:	605a      	str	r2, [r3, #4]
  }
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ea4:	f7f8 fa5c 	bl	8002360 <HAL_GetTick>
 8009ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b08      	cmp	r3, #8
 8009eb6:	d10e      	bne.n	8009ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f82f 	bl	8009f2a <UART_WaitOnFlagUntilTimeout>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e025      	b.n	8009f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	d10e      	bne.n	8009f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f819 	bl	8009f2a <UART_WaitOnFlagUntilTimeout>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e00f      	b.n	8009f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	603b      	str	r3, [r7, #0]
 8009f36:	4613      	mov	r3, r2
 8009f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f3a:	e062      	b.n	800a002 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d05e      	beq.n	800a002 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f44:	f7f8 fa0c 	bl	8002360 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	69ba      	ldr	r2, [r7, #24]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d302      	bcc.n	8009f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d11d      	bne.n	8009f96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e045      	b.n	800a022 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d02e      	beq.n	800a002 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	69db      	ldr	r3, [r3, #28]
 8009faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fb2:	d126      	bne.n	800a002 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fcc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0201 	bic.w	r2, r2, #1
 8009fdc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e00f      	b.n	800a022 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69da      	ldr	r2, [r3, #28]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4013      	ands	r3, r2
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	429a      	cmp	r2, r3
 800a010:	bf0c      	ite	eq
 800a012:	2301      	moveq	r3, #1
 800a014:	2300      	movne	r3, #0
 800a016:	b2db      	uxtb	r3, r3
 800a018:	461a      	mov	r2, r3
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d08d      	beq.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	4613      	mov	r3, r2
 800a038:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	88fa      	ldrh	r2, [r7, #6]
 800a044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	88fa      	ldrh	r2, [r7, #6]
 800a04c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a05e:	d10e      	bne.n	800a07e <UART_Start_Receive_IT+0x52>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d105      	bne.n	800a074 <UART_Start_Receive_IT+0x48>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a06e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a072:	e02d      	b.n	800a0d0 <UART_Start_Receive_IT+0xa4>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	22ff      	movs	r2, #255	; 0xff
 800a078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a07c:	e028      	b.n	800a0d0 <UART_Start_Receive_IT+0xa4>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10d      	bne.n	800a0a2 <UART_Start_Receive_IT+0x76>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d104      	bne.n	800a098 <UART_Start_Receive_IT+0x6c>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	22ff      	movs	r2, #255	; 0xff
 800a092:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a096:	e01b      	b.n	800a0d0 <UART_Start_Receive_IT+0xa4>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	227f      	movs	r2, #127	; 0x7f
 800a09c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0a0:	e016      	b.n	800a0d0 <UART_Start_Receive_IT+0xa4>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0aa:	d10d      	bne.n	800a0c8 <UART_Start_Receive_IT+0x9c>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <UART_Start_Receive_IT+0x92>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	227f      	movs	r2, #127	; 0x7f
 800a0b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0bc:	e008      	b.n	800a0d0 <UART_Start_Receive_IT+0xa4>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	223f      	movs	r2, #63	; 0x3f
 800a0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0c6:	e003      	b.n	800a0d0 <UART_Start_Receive_IT+0xa4>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2222      	movs	r2, #34	; 0x22
 800a0dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0201 	orr.w	r2, r2, #1
 800a0ee:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f8:	d12a      	bne.n	800a150 <UART_Start_Receive_IT+0x124>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a100:	88fa      	ldrh	r2, [r7, #6]
 800a102:	429a      	cmp	r2, r3
 800a104:	d324      	bcc.n	800a150 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a10e:	d107      	bne.n	800a120 <UART_Start_Receive_IT+0xf4>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d103      	bne.n	800a120 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a1f      	ldr	r2, [pc, #124]	; (800a198 <UART_Start_Receive_IT+0x16c>)
 800a11c:	671a      	str	r2, [r3, #112]	; 0x70
 800a11e:	e002      	b.n	800a126 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4a1e      	ldr	r2, [pc, #120]	; (800a19c <UART_Start_Receive_IT+0x170>)
 800a124:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a13c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a14c:	609a      	str	r2, [r3, #8]
 800a14e:	e01b      	b.n	800a188 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a158:	d107      	bne.n	800a16a <UART_Start_Receive_IT+0x13e>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d103      	bne.n	800a16a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4a0e      	ldr	r2, [pc, #56]	; (800a1a0 <UART_Start_Receive_IT+0x174>)
 800a166:	671a      	str	r2, [r3, #112]	; 0x70
 800a168:	e002      	b.n	800a170 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <UART_Start_Receive_IT+0x178>)
 800a16e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a186:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	0800a621 	.word	0x0800a621
 800a19c:	0800a41d 	.word	0x0800a41d
 800a1a0:	0800a345 	.word	0x0800a345
 800a1a4:	0800a26d 	.word	0x0800a26d

0800a1a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a1be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6899      	ldr	r1, [r3, #8]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <UART_EndRxTransfer+0x60>)
 800a1cc:	400b      	ands	r3, r1
 800a1ce:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d107      	bne.n	800a1e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 0210 	bic.w	r2, r2, #16
 800a1e6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	effffffe 	.word	0xeffffffe

0800a20c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff f81a 	bl	8009264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a24e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7f7 f9e6 	bl	8001630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a27a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a282:	2b22      	cmp	r3, #34	; 0x22
 800a284:	d152      	bne.n	800a32c <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a28e:	89bb      	ldrh	r3, [r7, #12]
 800a290:	b2d9      	uxtb	r1, r3
 800a292:	89fb      	ldrh	r3, [r7, #14]
 800a294:	b2da      	uxtb	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29a:	400a      	ands	r2, r1
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d139      	bne.n	800a33c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2d6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0201 	bic.w	r2, r2, #1
 800a2e6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d10f      	bne.n	800a31e <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 0210 	bic.w	r2, r2, #16
 800a30c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7fe ffae 	bl	8009278 <HAL_UARTEx_RxEventCallback>
 800a31c:	e002      	b.n	800a324 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7f7 f8d6 	bl	80014d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a32a:	e007      	b.n	800a33c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0208 	orr.w	r2, r2, #8
 800a33a:	619a      	str	r2, [r3, #24]
}
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a352:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a35a:	2b22      	cmp	r3, #34	; 0x22
 800a35c:	d152      	bne.n	800a404 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a36a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a36c:	89ba      	ldrh	r2, [r7, #12]
 800a36e:	89fb      	ldrh	r3, [r7, #14]
 800a370:	4013      	ands	r3, r2
 800a372:	b29a      	uxth	r2, r3
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37c:	1c9a      	adds	r2, r3, #2
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d139      	bne.n	800a414 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0201 	bic.w	r2, r2, #1
 800a3be:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d10f      	bne.n	800a3f6 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f022 0210 	bic.w	r2, r2, #16
 800a3e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7fe ff42 	bl	8009278 <HAL_UARTEx_RxEventCallback>
 800a3f4:	e002      	b.n	800a3fc <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7f7 f86a 	bl	80014d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a402:	e007      	b.n	800a414 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	699a      	ldr	r2, [r3, #24]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 0208 	orr.w	r2, r2, #8
 800a412:	619a      	str	r2, [r3, #24]
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a42a:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44a:	2b22      	cmp	r3, #34	; 0x22
 800a44c:	f040 80d8 	bne.w	800a600 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a456:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a458:	e0a8      	b.n	800a5ac <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a462:	89bb      	ldrh	r3, [r7, #12]
 800a464:	b2d9      	uxtb	r1, r3
 800a466:	8b7b      	ldrh	r3, [r7, #26]
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46e:	400a      	ands	r2, r1
 800a470:	b2d2      	uxtb	r2, r2
 800a472:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a484:	b29b      	uxth	r3, r3
 800a486:	3b01      	subs	r3, #1
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d04d      	beq.n	800a53e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d010      	beq.n	800a4ce <UART_RxISR_8BIT_FIFOEN+0xb2>
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00b      	beq.n	800a4ce <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c4:	f043 0201 	orr.w	r2, r3, #1
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d010      	beq.n	800a4fa <UART_RxISR_8BIT_FIFOEN+0xde>
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00b      	beq.n	800a4fa <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4f0:	f043 0204 	orr.w	r2, r3, #4
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b00      	cmp	r3, #0
 800a502:	d010      	beq.n	800a526 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00b      	beq.n	800a526 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2204      	movs	r2, #4
 800a514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a51c:	f043 0202 	orr.w	r2, r3, #2
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d006      	beq.n	800a53e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7fe fe97 	bl	8009264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a544:	b29b      	uxth	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d130      	bne.n	800a5ac <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a558:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6899      	ldr	r1, [r3, #8]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	4b2c      	ldr	r3, [pc, #176]	; (800a618 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800a566:	400b      	ands	r3, r1
 800a568:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d10f      	bne.n	800a5a0 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f022 0210 	bic.w	r2, r2, #16
 800a58e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7fe fe6d 	bl	8009278 <HAL_UARTEx_RxEventCallback>
 800a59e:	e002      	b.n	800a5a6 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7f6 ff95 	bl	80014d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5ac:	89fb      	ldrh	r3, [r7, #14]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d005      	beq.n	800a5be <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f47f af4e 	bne.w	800a45a <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5c4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a5c6:	897b      	ldrh	r3, [r7, #10]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d021      	beq.n	800a610 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a5d2:	897a      	ldrh	r2, [r7, #10]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d21b      	bcs.n	800a610 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5e6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a0c      	ldr	r2, [pc, #48]	; (800a61c <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a5ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f042 0220 	orr.w	r2, r2, #32
 800a5fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5fe:	e007      	b.n	800a610 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	699a      	ldr	r2, [r3, #24]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0208 	orr.w	r2, r2, #8
 800a60e:	619a      	str	r2, [r3, #24]
}
 800a610:	bf00      	nop
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	effffffe 	.word	0xeffffffe
 800a61c:	0800a26d 	.word	0x0800a26d

0800a620 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08a      	sub	sp, #40	; 0x28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a62e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64e:	2b22      	cmp	r3, #34	; 0x22
 800a650:	f040 80d8 	bne.w	800a804 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a65a:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a65c:	e0a8      	b.n	800a7b0 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a66a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a66c:	8aba      	ldrh	r2, [r7, #20]
 800a66e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a670:	4013      	ands	r3, r2
 800a672:	b29a      	uxth	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67c:	1c9a      	adds	r2, r3, #2
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a688:	b29b      	uxth	r3, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d04d      	beq.n	800a742 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d010      	beq.n	800a6d2 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00b      	beq.n	800a6d2 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6c8:	f043 0201 	orr.w	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d010      	beq.n	800a6fe <UART_RxISR_16BIT_FIFOEN+0xde>
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00b      	beq.n	800a6fe <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6f4:	f043 0204 	orr.w	r2, r3, #4
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	d010      	beq.n	800a72a <UART_RxISR_16BIT_FIFOEN+0x10a>
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00b      	beq.n	800a72a <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2204      	movs	r2, #4
 800a718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a720:	f043 0202 	orr.w	r2, r3, #2
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d006      	beq.n	800a742 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7fe fd95 	bl	8009264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d130      	bne.n	800a7b0 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a75c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6899      	ldr	r1, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b2c      	ldr	r3, [pc, #176]	; (800a81c <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800a76a:	400b      	ands	r3, r1
 800a76c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a780:	2b01      	cmp	r3, #1
 800a782:	d10f      	bne.n	800a7a4 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0210 	bic.w	r2, r2, #16
 800a792:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7fe fd6b 	bl	8009278 <HAL_UARTEx_RxEventCallback>
 800a7a2:	e002      	b.n	800a7aa <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7f6 fe93 	bl	80014d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7b0:	8afb      	ldrh	r3, [r7, #22]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d005      	beq.n	800a7c2 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f47f af4e 	bne.w	800a65e <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7c8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a7ca:	89fb      	ldrh	r3, [r7, #14]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d021      	beq.n	800a814 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7d6:	89fa      	ldrh	r2, [r7, #14]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d21b      	bcs.n	800a814 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a7ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a0c      	ldr	r2, [pc, #48]	; (800a820 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800a7f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f042 0220 	orr.w	r2, r2, #32
 800a800:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a802:	e007      	b.n	800a814 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0208 	orr.w	r2, r2, #8
 800a812:	619a      	str	r2, [r3, #24]
}
 800a814:	bf00      	nop
 800a816:	3728      	adds	r7, #40	; 0x28
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	effffffe 	.word	0xeffffffe
 800a820:	0800a345 	.word	0x0800a345

0800a824 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e056      	b.n	800a8ea <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a842:	2b00      	cmp	r3, #0
 800a844:	d106      	bne.n	800a854 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7f7 f950 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2224      	movs	r2, #36	; 0x24
 800a858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0201 	bic.w	r2, r2, #1
 800a86a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f7fe fd0f 	bl	8009290 <UART_SetConfig>
 800a872:	4603      	mov	r3, r0
 800a874:	2b01      	cmp	r3, #1
 800a876:	d101      	bne.n	800a87c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e036      	b.n	800a8ea <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7ff fa63 	bl	8009d50 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a898:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	055b      	lsls	r3, r3, #21
 800a8b2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	041b      	lsls	r3, r3, #16
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <HAL_RS485Ex_Init+0xd0>)
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	6812      	ldr	r2, [r2, #0]
 800a8cc:	6979      	ldr	r1, [r7, #20]
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f042 0201 	orr.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fad6 	bl	8009e94 <UART_CheckIdleState>
 800a8e8:	4603      	mov	r3, r0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	fc00ffff 	.word	0xfc00ffff

0800a8f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_UARTEx_DisableFifoMode+0x16>
 800a946:	2302      	movs	r3, #2
 800a948:	e027      	b.n	800a99a <HAL_UARTEx_DisableFifoMode+0x66>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2224      	movs	r2, #36	; 0x24
 800a956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0201 	bic.w	r2, r2, #1
 800a970:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a978:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2220      	movs	r2, #32
 800a98c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e02d      	b.n	800aa1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2224      	movs	r2, #36	; 0x24
 800a9ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f022 0201 	bic.w	r2, r2, #1
 800a9e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f850 	bl	800aaa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e02d      	b.n	800aa96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2224      	movs	r2, #36	; 0x24
 800aa46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 0201 	bic.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f812 	bl	800aaa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2220      	movs	r2, #32
 800aa88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d108      	bne.n	800aac2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aac0:	e031      	b.n	800ab26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aac2:	2310      	movs	r3, #16
 800aac4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aac6:	2310      	movs	r3, #16
 800aac8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	0e5b      	lsrs	r3, r3, #25
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	f003 0307 	and.w	r3, r3, #7
 800aad8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	0f5b      	lsrs	r3, r3, #29
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	7b3a      	ldrb	r2, [r7, #12]
 800aaee:	4911      	ldr	r1, [pc, #68]	; (800ab34 <UARTEx_SetNbDataToProcess+0x94>)
 800aaf0:	5c8a      	ldrb	r2, [r1, r2]
 800aaf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aaf6:	7b3a      	ldrb	r2, [r7, #12]
 800aaf8:	490f      	ldr	r1, [pc, #60]	; (800ab38 <UARTEx_SetNbDataToProcess+0x98>)
 800aafa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aafc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	7b7a      	ldrb	r2, [r7, #13]
 800ab0c:	4909      	ldr	r1, [pc, #36]	; (800ab34 <UARTEx_SetNbDataToProcess+0x94>)
 800ab0e:	5c8a      	ldrb	r2, [r1, r2]
 800ab10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab14:	7b7a      	ldrb	r2, [r7, #13]
 800ab16:	4908      	ldr	r1, [pc, #32]	; (800ab38 <UARTEx_SetNbDataToProcess+0x98>)
 800ab18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	0800b578 	.word	0x0800b578
 800ab38:	0800b580 	.word	0x0800b580

0800ab3c <__errno>:
 800ab3c:	4b01      	ldr	r3, [pc, #4]	; (800ab44 <__errno+0x8>)
 800ab3e:	6818      	ldr	r0, [r3, #0]
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	20000010 	.word	0x20000010

0800ab48 <__libc_init_array>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	4d0d      	ldr	r5, [pc, #52]	; (800ab80 <__libc_init_array+0x38>)
 800ab4c:	4c0d      	ldr	r4, [pc, #52]	; (800ab84 <__libc_init_array+0x3c>)
 800ab4e:	1b64      	subs	r4, r4, r5
 800ab50:	10a4      	asrs	r4, r4, #2
 800ab52:	2600      	movs	r6, #0
 800ab54:	42a6      	cmp	r6, r4
 800ab56:	d109      	bne.n	800ab6c <__libc_init_array+0x24>
 800ab58:	4d0b      	ldr	r5, [pc, #44]	; (800ab88 <__libc_init_array+0x40>)
 800ab5a:	4c0c      	ldr	r4, [pc, #48]	; (800ab8c <__libc_init_array+0x44>)
 800ab5c:	f000 fce6 	bl	800b52c <_init>
 800ab60:	1b64      	subs	r4, r4, r5
 800ab62:	10a4      	asrs	r4, r4, #2
 800ab64:	2600      	movs	r6, #0
 800ab66:	42a6      	cmp	r6, r4
 800ab68:	d105      	bne.n	800ab76 <__libc_init_array+0x2e>
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab70:	4798      	blx	r3
 800ab72:	3601      	adds	r6, #1
 800ab74:	e7ee      	b.n	800ab54 <__libc_init_array+0xc>
 800ab76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab7a:	4798      	blx	r3
 800ab7c:	3601      	adds	r6, #1
 800ab7e:	e7f2      	b.n	800ab66 <__libc_init_array+0x1e>
 800ab80:	0800b5f4 	.word	0x0800b5f4
 800ab84:	0800b5f4 	.word	0x0800b5f4
 800ab88:	0800b5f4 	.word	0x0800b5f4
 800ab8c:	0800b5f8 	.word	0x0800b5f8

0800ab90 <memset>:
 800ab90:	4402      	add	r2, r0
 800ab92:	4603      	mov	r3, r0
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d100      	bne.n	800ab9a <memset+0xa>
 800ab98:	4770      	bx	lr
 800ab9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab9e:	e7f9      	b.n	800ab94 <memset+0x4>

0800aba0 <_puts_r>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	460e      	mov	r6, r1
 800aba4:	4605      	mov	r5, r0
 800aba6:	b118      	cbz	r0, 800abb0 <_puts_r+0x10>
 800aba8:	6983      	ldr	r3, [r0, #24]
 800abaa:	b90b      	cbnz	r3, 800abb0 <_puts_r+0x10>
 800abac:	f000 fa48 	bl	800b040 <__sinit>
 800abb0:	69ab      	ldr	r3, [r5, #24]
 800abb2:	68ac      	ldr	r4, [r5, #8]
 800abb4:	b913      	cbnz	r3, 800abbc <_puts_r+0x1c>
 800abb6:	4628      	mov	r0, r5
 800abb8:	f000 fa42 	bl	800b040 <__sinit>
 800abbc:	4b2c      	ldr	r3, [pc, #176]	; (800ac70 <_puts_r+0xd0>)
 800abbe:	429c      	cmp	r4, r3
 800abc0:	d120      	bne.n	800ac04 <_puts_r+0x64>
 800abc2:	686c      	ldr	r4, [r5, #4]
 800abc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abc6:	07db      	lsls	r3, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_puts_r+0x36>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	0598      	lsls	r0, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_puts_r+0x36>
 800abd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abd2:	f000 fad3 	bl	800b17c <__retarget_lock_acquire_recursive>
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	0719      	lsls	r1, r3, #28
 800abda:	d51d      	bpl.n	800ac18 <_puts_r+0x78>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	b1db      	cbz	r3, 800ac18 <_puts_r+0x78>
 800abe0:	3e01      	subs	r6, #1
 800abe2:	68a3      	ldr	r3, [r4, #8]
 800abe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abe8:	3b01      	subs	r3, #1
 800abea:	60a3      	str	r3, [r4, #8]
 800abec:	bb39      	cbnz	r1, 800ac3e <_puts_r+0x9e>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da38      	bge.n	800ac64 <_puts_r+0xc4>
 800abf2:	4622      	mov	r2, r4
 800abf4:	210a      	movs	r1, #10
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 f848 	bl	800ac8c <__swbuf_r>
 800abfc:	3001      	adds	r0, #1
 800abfe:	d011      	beq.n	800ac24 <_puts_r+0x84>
 800ac00:	250a      	movs	r5, #10
 800ac02:	e011      	b.n	800ac28 <_puts_r+0x88>
 800ac04:	4b1b      	ldr	r3, [pc, #108]	; (800ac74 <_puts_r+0xd4>)
 800ac06:	429c      	cmp	r4, r3
 800ac08:	d101      	bne.n	800ac0e <_puts_r+0x6e>
 800ac0a:	68ac      	ldr	r4, [r5, #8]
 800ac0c:	e7da      	b.n	800abc4 <_puts_r+0x24>
 800ac0e:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <_puts_r+0xd8>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	bf08      	it	eq
 800ac14:	68ec      	ldreq	r4, [r5, #12]
 800ac16:	e7d5      	b.n	800abc4 <_puts_r+0x24>
 800ac18:	4621      	mov	r1, r4
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f000 f888 	bl	800ad30 <__swsetup_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d0dd      	beq.n	800abe0 <_puts_r+0x40>
 800ac24:	f04f 35ff 	mov.w	r5, #4294967295
 800ac28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac2a:	07da      	lsls	r2, r3, #31
 800ac2c:	d405      	bmi.n	800ac3a <_puts_r+0x9a>
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	059b      	lsls	r3, r3, #22
 800ac32:	d402      	bmi.n	800ac3a <_puts_r+0x9a>
 800ac34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac36:	f000 faa2 	bl	800b17e <__retarget_lock_release_recursive>
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	bd70      	pop	{r4, r5, r6, pc}
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	da04      	bge.n	800ac4c <_puts_r+0xac>
 800ac42:	69a2      	ldr	r2, [r4, #24]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	dc06      	bgt.n	800ac56 <_puts_r+0xb6>
 800ac48:	290a      	cmp	r1, #10
 800ac4a:	d004      	beq.n	800ac56 <_puts_r+0xb6>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	6022      	str	r2, [r4, #0]
 800ac52:	7019      	strb	r1, [r3, #0]
 800ac54:	e7c5      	b.n	800abe2 <_puts_r+0x42>
 800ac56:	4622      	mov	r2, r4
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f000 f817 	bl	800ac8c <__swbuf_r>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d1bf      	bne.n	800abe2 <_puts_r+0x42>
 800ac62:	e7df      	b.n	800ac24 <_puts_r+0x84>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	250a      	movs	r5, #10
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	6022      	str	r2, [r4, #0]
 800ac6c:	701d      	strb	r5, [r3, #0]
 800ac6e:	e7db      	b.n	800ac28 <_puts_r+0x88>
 800ac70:	0800b5ac 	.word	0x0800b5ac
 800ac74:	0800b5cc 	.word	0x0800b5cc
 800ac78:	0800b58c 	.word	0x0800b58c

0800ac7c <puts>:
 800ac7c:	4b02      	ldr	r3, [pc, #8]	; (800ac88 <puts+0xc>)
 800ac7e:	4601      	mov	r1, r0
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	f7ff bf8d 	b.w	800aba0 <_puts_r>
 800ac86:	bf00      	nop
 800ac88:	20000010 	.word	0x20000010

0800ac8c <__swbuf_r>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	460e      	mov	r6, r1
 800ac90:	4614      	mov	r4, r2
 800ac92:	4605      	mov	r5, r0
 800ac94:	b118      	cbz	r0, 800ac9e <__swbuf_r+0x12>
 800ac96:	6983      	ldr	r3, [r0, #24]
 800ac98:	b90b      	cbnz	r3, 800ac9e <__swbuf_r+0x12>
 800ac9a:	f000 f9d1 	bl	800b040 <__sinit>
 800ac9e:	4b21      	ldr	r3, [pc, #132]	; (800ad24 <__swbuf_r+0x98>)
 800aca0:	429c      	cmp	r4, r3
 800aca2:	d12b      	bne.n	800acfc <__swbuf_r+0x70>
 800aca4:	686c      	ldr	r4, [r5, #4]
 800aca6:	69a3      	ldr	r3, [r4, #24]
 800aca8:	60a3      	str	r3, [r4, #8]
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	071a      	lsls	r2, r3, #28
 800acae:	d52f      	bpl.n	800ad10 <__swbuf_r+0x84>
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	b36b      	cbz	r3, 800ad10 <__swbuf_r+0x84>
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	6820      	ldr	r0, [r4, #0]
 800acb8:	1ac0      	subs	r0, r0, r3
 800acba:	6963      	ldr	r3, [r4, #20]
 800acbc:	b2f6      	uxtb	r6, r6
 800acbe:	4283      	cmp	r3, r0
 800acc0:	4637      	mov	r7, r6
 800acc2:	dc04      	bgt.n	800acce <__swbuf_r+0x42>
 800acc4:	4621      	mov	r1, r4
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 f926 	bl	800af18 <_fflush_r>
 800accc:	bb30      	cbnz	r0, 800ad1c <__swbuf_r+0x90>
 800acce:	68a3      	ldr	r3, [r4, #8]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	60a3      	str	r3, [r4, #8]
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	701e      	strb	r6, [r3, #0]
 800acdc:	6963      	ldr	r3, [r4, #20]
 800acde:	3001      	adds	r0, #1
 800ace0:	4283      	cmp	r3, r0
 800ace2:	d004      	beq.n	800acee <__swbuf_r+0x62>
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	07db      	lsls	r3, r3, #31
 800ace8:	d506      	bpl.n	800acf8 <__swbuf_r+0x6c>
 800acea:	2e0a      	cmp	r6, #10
 800acec:	d104      	bne.n	800acf8 <__swbuf_r+0x6c>
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 f911 	bl	800af18 <_fflush_r>
 800acf6:	b988      	cbnz	r0, 800ad1c <__swbuf_r+0x90>
 800acf8:	4638      	mov	r0, r7
 800acfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acfc:	4b0a      	ldr	r3, [pc, #40]	; (800ad28 <__swbuf_r+0x9c>)
 800acfe:	429c      	cmp	r4, r3
 800ad00:	d101      	bne.n	800ad06 <__swbuf_r+0x7a>
 800ad02:	68ac      	ldr	r4, [r5, #8]
 800ad04:	e7cf      	b.n	800aca6 <__swbuf_r+0x1a>
 800ad06:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <__swbuf_r+0xa0>)
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	bf08      	it	eq
 800ad0c:	68ec      	ldreq	r4, [r5, #12]
 800ad0e:	e7ca      	b.n	800aca6 <__swbuf_r+0x1a>
 800ad10:	4621      	mov	r1, r4
 800ad12:	4628      	mov	r0, r5
 800ad14:	f000 f80c 	bl	800ad30 <__swsetup_r>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d0cb      	beq.n	800acb4 <__swbuf_r+0x28>
 800ad1c:	f04f 37ff 	mov.w	r7, #4294967295
 800ad20:	e7ea      	b.n	800acf8 <__swbuf_r+0x6c>
 800ad22:	bf00      	nop
 800ad24:	0800b5ac 	.word	0x0800b5ac
 800ad28:	0800b5cc 	.word	0x0800b5cc
 800ad2c:	0800b58c 	.word	0x0800b58c

0800ad30 <__swsetup_r>:
 800ad30:	4b32      	ldr	r3, [pc, #200]	; (800adfc <__swsetup_r+0xcc>)
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	681d      	ldr	r5, [r3, #0]
 800ad36:	4606      	mov	r6, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	b125      	cbz	r5, 800ad46 <__swsetup_r+0x16>
 800ad3c:	69ab      	ldr	r3, [r5, #24]
 800ad3e:	b913      	cbnz	r3, 800ad46 <__swsetup_r+0x16>
 800ad40:	4628      	mov	r0, r5
 800ad42:	f000 f97d 	bl	800b040 <__sinit>
 800ad46:	4b2e      	ldr	r3, [pc, #184]	; (800ae00 <__swsetup_r+0xd0>)
 800ad48:	429c      	cmp	r4, r3
 800ad4a:	d10f      	bne.n	800ad6c <__swsetup_r+0x3c>
 800ad4c:	686c      	ldr	r4, [r5, #4]
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad54:	0719      	lsls	r1, r3, #28
 800ad56:	d42c      	bmi.n	800adb2 <__swsetup_r+0x82>
 800ad58:	06dd      	lsls	r5, r3, #27
 800ad5a:	d411      	bmi.n	800ad80 <__swsetup_r+0x50>
 800ad5c:	2309      	movs	r3, #9
 800ad5e:	6033      	str	r3, [r6, #0]
 800ad60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6a:	e03e      	b.n	800adea <__swsetup_r+0xba>
 800ad6c:	4b25      	ldr	r3, [pc, #148]	; (800ae04 <__swsetup_r+0xd4>)
 800ad6e:	429c      	cmp	r4, r3
 800ad70:	d101      	bne.n	800ad76 <__swsetup_r+0x46>
 800ad72:	68ac      	ldr	r4, [r5, #8]
 800ad74:	e7eb      	b.n	800ad4e <__swsetup_r+0x1e>
 800ad76:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <__swsetup_r+0xd8>)
 800ad78:	429c      	cmp	r4, r3
 800ad7a:	bf08      	it	eq
 800ad7c:	68ec      	ldreq	r4, [r5, #12]
 800ad7e:	e7e6      	b.n	800ad4e <__swsetup_r+0x1e>
 800ad80:	0758      	lsls	r0, r3, #29
 800ad82:	d512      	bpl.n	800adaa <__swsetup_r+0x7a>
 800ad84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad86:	b141      	cbz	r1, 800ad9a <__swsetup_r+0x6a>
 800ad88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	d002      	beq.n	800ad96 <__swsetup_r+0x66>
 800ad90:	4630      	mov	r0, r6
 800ad92:	f000 fa59 	bl	800b248 <_free_r>
 800ad96:	2300      	movs	r3, #0
 800ad98:	6363      	str	r3, [r4, #52]	; 0x34
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	2300      	movs	r3, #0
 800ada4:	6063      	str	r3, [r4, #4]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	f043 0308 	orr.w	r3, r3, #8
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	b94b      	cbnz	r3, 800adca <__swsetup_r+0x9a>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adc0:	d003      	beq.n	800adca <__swsetup_r+0x9a>
 800adc2:	4621      	mov	r1, r4
 800adc4:	4630      	mov	r0, r6
 800adc6:	f000 f9ff 	bl	800b1c8 <__smakebuf_r>
 800adca:	89a0      	ldrh	r0, [r4, #12]
 800adcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800add0:	f010 0301 	ands.w	r3, r0, #1
 800add4:	d00a      	beq.n	800adec <__swsetup_r+0xbc>
 800add6:	2300      	movs	r3, #0
 800add8:	60a3      	str	r3, [r4, #8]
 800adda:	6963      	ldr	r3, [r4, #20]
 800addc:	425b      	negs	r3, r3
 800adde:	61a3      	str	r3, [r4, #24]
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	b943      	cbnz	r3, 800adf6 <__swsetup_r+0xc6>
 800ade4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ade8:	d1ba      	bne.n	800ad60 <__swsetup_r+0x30>
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	0781      	lsls	r1, r0, #30
 800adee:	bf58      	it	pl
 800adf0:	6963      	ldrpl	r3, [r4, #20]
 800adf2:	60a3      	str	r3, [r4, #8]
 800adf4:	e7f4      	b.n	800ade0 <__swsetup_r+0xb0>
 800adf6:	2000      	movs	r0, #0
 800adf8:	e7f7      	b.n	800adea <__swsetup_r+0xba>
 800adfa:	bf00      	nop
 800adfc:	20000010 	.word	0x20000010
 800ae00:	0800b5ac 	.word	0x0800b5ac
 800ae04:	0800b5cc 	.word	0x0800b5cc
 800ae08:	0800b58c 	.word	0x0800b58c

0800ae0c <__sflush_r>:
 800ae0c:	898a      	ldrh	r2, [r1, #12]
 800ae0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	4605      	mov	r5, r0
 800ae14:	0710      	lsls	r0, r2, #28
 800ae16:	460c      	mov	r4, r1
 800ae18:	d458      	bmi.n	800aecc <__sflush_r+0xc0>
 800ae1a:	684b      	ldr	r3, [r1, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dc05      	bgt.n	800ae2c <__sflush_r+0x20>
 800ae20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dc02      	bgt.n	800ae2c <__sflush_r+0x20>
 800ae26:	2000      	movs	r0, #0
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	d0f9      	beq.n	800ae26 <__sflush_r+0x1a>
 800ae32:	2300      	movs	r3, #0
 800ae34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae38:	682f      	ldr	r7, [r5, #0]
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	d032      	beq.n	800aea4 <__sflush_r+0x98>
 800ae3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	075a      	lsls	r2, r3, #29
 800ae44:	d505      	bpl.n	800ae52 <__sflush_r+0x46>
 800ae46:	6863      	ldr	r3, [r4, #4]
 800ae48:	1ac0      	subs	r0, r0, r3
 800ae4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae4c:	b10b      	cbz	r3, 800ae52 <__sflush_r+0x46>
 800ae4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae50:	1ac0      	subs	r0, r0, r3
 800ae52:	2300      	movs	r3, #0
 800ae54:	4602      	mov	r2, r0
 800ae56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae58:	6a21      	ldr	r1, [r4, #32]
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b0      	blx	r6
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	d106      	bne.n	800ae72 <__sflush_r+0x66>
 800ae64:	6829      	ldr	r1, [r5, #0]
 800ae66:	291d      	cmp	r1, #29
 800ae68:	d82c      	bhi.n	800aec4 <__sflush_r+0xb8>
 800ae6a:	4a2a      	ldr	r2, [pc, #168]	; (800af14 <__sflush_r+0x108>)
 800ae6c:	40ca      	lsrs	r2, r1
 800ae6e:	07d6      	lsls	r6, r2, #31
 800ae70:	d528      	bpl.n	800aec4 <__sflush_r+0xb8>
 800ae72:	2200      	movs	r2, #0
 800ae74:	6062      	str	r2, [r4, #4]
 800ae76:	04d9      	lsls	r1, r3, #19
 800ae78:	6922      	ldr	r2, [r4, #16]
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	d504      	bpl.n	800ae88 <__sflush_r+0x7c>
 800ae7e:	1c42      	adds	r2, r0, #1
 800ae80:	d101      	bne.n	800ae86 <__sflush_r+0x7a>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	b903      	cbnz	r3, 800ae88 <__sflush_r+0x7c>
 800ae86:	6560      	str	r0, [r4, #84]	; 0x54
 800ae88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8a:	602f      	str	r7, [r5, #0]
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	d0ca      	beq.n	800ae26 <__sflush_r+0x1a>
 800ae90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d002      	beq.n	800ae9e <__sflush_r+0x92>
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 f9d5 	bl	800b248 <_free_r>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	6360      	str	r0, [r4, #52]	; 0x34
 800aea2:	e7c1      	b.n	800ae28 <__sflush_r+0x1c>
 800aea4:	6a21      	ldr	r1, [r4, #32]
 800aea6:	2301      	movs	r3, #1
 800aea8:	4628      	mov	r0, r5
 800aeaa:	47b0      	blx	r6
 800aeac:	1c41      	adds	r1, r0, #1
 800aeae:	d1c7      	bne.n	800ae40 <__sflush_r+0x34>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0c4      	beq.n	800ae40 <__sflush_r+0x34>
 800aeb6:	2b1d      	cmp	r3, #29
 800aeb8:	d001      	beq.n	800aebe <__sflush_r+0xb2>
 800aeba:	2b16      	cmp	r3, #22
 800aebc:	d101      	bne.n	800aec2 <__sflush_r+0xb6>
 800aebe:	602f      	str	r7, [r5, #0]
 800aec0:	e7b1      	b.n	800ae26 <__sflush_r+0x1a>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	e7ad      	b.n	800ae28 <__sflush_r+0x1c>
 800aecc:	690f      	ldr	r7, [r1, #16]
 800aece:	2f00      	cmp	r7, #0
 800aed0:	d0a9      	beq.n	800ae26 <__sflush_r+0x1a>
 800aed2:	0793      	lsls	r3, r2, #30
 800aed4:	680e      	ldr	r6, [r1, #0]
 800aed6:	bf08      	it	eq
 800aed8:	694b      	ldreq	r3, [r1, #20]
 800aeda:	600f      	str	r7, [r1, #0]
 800aedc:	bf18      	it	ne
 800aede:	2300      	movne	r3, #0
 800aee0:	eba6 0807 	sub.w	r8, r6, r7
 800aee4:	608b      	str	r3, [r1, #8]
 800aee6:	f1b8 0f00 	cmp.w	r8, #0
 800aeea:	dd9c      	ble.n	800ae26 <__sflush_r+0x1a>
 800aeec:	6a21      	ldr	r1, [r4, #32]
 800aeee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aef0:	4643      	mov	r3, r8
 800aef2:	463a      	mov	r2, r7
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b0      	blx	r6
 800aef8:	2800      	cmp	r0, #0
 800aefa:	dc06      	bgt.n	800af0a <__sflush_r+0xfe>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	e78e      	b.n	800ae28 <__sflush_r+0x1c>
 800af0a:	4407      	add	r7, r0
 800af0c:	eba8 0800 	sub.w	r8, r8, r0
 800af10:	e7e9      	b.n	800aee6 <__sflush_r+0xda>
 800af12:	bf00      	nop
 800af14:	20400001 	.word	0x20400001

0800af18 <_fflush_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	690b      	ldr	r3, [r1, #16]
 800af1c:	4605      	mov	r5, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	b913      	cbnz	r3, 800af28 <_fflush_r+0x10>
 800af22:	2500      	movs	r5, #0
 800af24:	4628      	mov	r0, r5
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	b118      	cbz	r0, 800af32 <_fflush_r+0x1a>
 800af2a:	6983      	ldr	r3, [r0, #24]
 800af2c:	b90b      	cbnz	r3, 800af32 <_fflush_r+0x1a>
 800af2e:	f000 f887 	bl	800b040 <__sinit>
 800af32:	4b14      	ldr	r3, [pc, #80]	; (800af84 <_fflush_r+0x6c>)
 800af34:	429c      	cmp	r4, r3
 800af36:	d11b      	bne.n	800af70 <_fflush_r+0x58>
 800af38:	686c      	ldr	r4, [r5, #4]
 800af3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0ef      	beq.n	800af22 <_fflush_r+0xa>
 800af42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af44:	07d0      	lsls	r0, r2, #31
 800af46:	d404      	bmi.n	800af52 <_fflush_r+0x3a>
 800af48:	0599      	lsls	r1, r3, #22
 800af4a:	d402      	bmi.n	800af52 <_fflush_r+0x3a>
 800af4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af4e:	f000 f915 	bl	800b17c <__retarget_lock_acquire_recursive>
 800af52:	4628      	mov	r0, r5
 800af54:	4621      	mov	r1, r4
 800af56:	f7ff ff59 	bl	800ae0c <__sflush_r>
 800af5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af5c:	07da      	lsls	r2, r3, #31
 800af5e:	4605      	mov	r5, r0
 800af60:	d4e0      	bmi.n	800af24 <_fflush_r+0xc>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	059b      	lsls	r3, r3, #22
 800af66:	d4dd      	bmi.n	800af24 <_fflush_r+0xc>
 800af68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af6a:	f000 f908 	bl	800b17e <__retarget_lock_release_recursive>
 800af6e:	e7d9      	b.n	800af24 <_fflush_r+0xc>
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <_fflush_r+0x70>)
 800af72:	429c      	cmp	r4, r3
 800af74:	d101      	bne.n	800af7a <_fflush_r+0x62>
 800af76:	68ac      	ldr	r4, [r5, #8]
 800af78:	e7df      	b.n	800af3a <_fflush_r+0x22>
 800af7a:	4b04      	ldr	r3, [pc, #16]	; (800af8c <_fflush_r+0x74>)
 800af7c:	429c      	cmp	r4, r3
 800af7e:	bf08      	it	eq
 800af80:	68ec      	ldreq	r4, [r5, #12]
 800af82:	e7da      	b.n	800af3a <_fflush_r+0x22>
 800af84:	0800b5ac 	.word	0x0800b5ac
 800af88:	0800b5cc 	.word	0x0800b5cc
 800af8c:	0800b58c 	.word	0x0800b58c

0800af90 <std>:
 800af90:	2300      	movs	r3, #0
 800af92:	b510      	push	{r4, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	e9c0 3300 	strd	r3, r3, [r0]
 800af9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af9e:	6083      	str	r3, [r0, #8]
 800afa0:	8181      	strh	r1, [r0, #12]
 800afa2:	6643      	str	r3, [r0, #100]	; 0x64
 800afa4:	81c2      	strh	r2, [r0, #14]
 800afa6:	6183      	str	r3, [r0, #24]
 800afa8:	4619      	mov	r1, r3
 800afaa:	2208      	movs	r2, #8
 800afac:	305c      	adds	r0, #92	; 0x5c
 800afae:	f7ff fdef 	bl	800ab90 <memset>
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <std+0x38>)
 800afb4:	6263      	str	r3, [r4, #36]	; 0x24
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <std+0x3c>)
 800afb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <std+0x40>)
 800afbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afbe:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <std+0x44>)
 800afc0:	6224      	str	r4, [r4, #32]
 800afc2:	6323      	str	r3, [r4, #48]	; 0x30
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	bf00      	nop
 800afc8:	0800b3bd 	.word	0x0800b3bd
 800afcc:	0800b3df 	.word	0x0800b3df
 800afd0:	0800b417 	.word	0x0800b417
 800afd4:	0800b43b 	.word	0x0800b43b

0800afd8 <_cleanup_r>:
 800afd8:	4901      	ldr	r1, [pc, #4]	; (800afe0 <_cleanup_r+0x8>)
 800afda:	f000 b8af 	b.w	800b13c <_fwalk_reent>
 800afde:	bf00      	nop
 800afe0:	0800af19 	.word	0x0800af19

0800afe4 <__sfmoreglue>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	1e4a      	subs	r2, r1, #1
 800afe8:	2568      	movs	r5, #104	; 0x68
 800afea:	4355      	muls	r5, r2
 800afec:	460e      	mov	r6, r1
 800afee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aff2:	f000 f979 	bl	800b2e8 <_malloc_r>
 800aff6:	4604      	mov	r4, r0
 800aff8:	b140      	cbz	r0, 800b00c <__sfmoreglue+0x28>
 800affa:	2100      	movs	r1, #0
 800affc:	e9c0 1600 	strd	r1, r6, [r0]
 800b000:	300c      	adds	r0, #12
 800b002:	60a0      	str	r0, [r4, #8]
 800b004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b008:	f7ff fdc2 	bl	800ab90 <memset>
 800b00c:	4620      	mov	r0, r4
 800b00e:	bd70      	pop	{r4, r5, r6, pc}

0800b010 <__sfp_lock_acquire>:
 800b010:	4801      	ldr	r0, [pc, #4]	; (800b018 <__sfp_lock_acquire+0x8>)
 800b012:	f000 b8b3 	b.w	800b17c <__retarget_lock_acquire_recursive>
 800b016:	bf00      	nop
 800b018:	200008d8 	.word	0x200008d8

0800b01c <__sfp_lock_release>:
 800b01c:	4801      	ldr	r0, [pc, #4]	; (800b024 <__sfp_lock_release+0x8>)
 800b01e:	f000 b8ae 	b.w	800b17e <__retarget_lock_release_recursive>
 800b022:	bf00      	nop
 800b024:	200008d8 	.word	0x200008d8

0800b028 <__sinit_lock_acquire>:
 800b028:	4801      	ldr	r0, [pc, #4]	; (800b030 <__sinit_lock_acquire+0x8>)
 800b02a:	f000 b8a7 	b.w	800b17c <__retarget_lock_acquire_recursive>
 800b02e:	bf00      	nop
 800b030:	200008d3 	.word	0x200008d3

0800b034 <__sinit_lock_release>:
 800b034:	4801      	ldr	r0, [pc, #4]	; (800b03c <__sinit_lock_release+0x8>)
 800b036:	f000 b8a2 	b.w	800b17e <__retarget_lock_release_recursive>
 800b03a:	bf00      	nop
 800b03c:	200008d3 	.word	0x200008d3

0800b040 <__sinit>:
 800b040:	b510      	push	{r4, lr}
 800b042:	4604      	mov	r4, r0
 800b044:	f7ff fff0 	bl	800b028 <__sinit_lock_acquire>
 800b048:	69a3      	ldr	r3, [r4, #24]
 800b04a:	b11b      	cbz	r3, 800b054 <__sinit+0x14>
 800b04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b050:	f7ff bff0 	b.w	800b034 <__sinit_lock_release>
 800b054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b058:	6523      	str	r3, [r4, #80]	; 0x50
 800b05a:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <__sinit+0x68>)
 800b05c:	4a13      	ldr	r2, [pc, #76]	; (800b0ac <__sinit+0x6c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	62a2      	str	r2, [r4, #40]	; 0x28
 800b062:	42a3      	cmp	r3, r4
 800b064:	bf04      	itt	eq
 800b066:	2301      	moveq	r3, #1
 800b068:	61a3      	streq	r3, [r4, #24]
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 f820 	bl	800b0b0 <__sfp>
 800b070:	6060      	str	r0, [r4, #4]
 800b072:	4620      	mov	r0, r4
 800b074:	f000 f81c 	bl	800b0b0 <__sfp>
 800b078:	60a0      	str	r0, [r4, #8]
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 f818 	bl	800b0b0 <__sfp>
 800b080:	2200      	movs	r2, #0
 800b082:	60e0      	str	r0, [r4, #12]
 800b084:	2104      	movs	r1, #4
 800b086:	6860      	ldr	r0, [r4, #4]
 800b088:	f7ff ff82 	bl	800af90 <std>
 800b08c:	68a0      	ldr	r0, [r4, #8]
 800b08e:	2201      	movs	r2, #1
 800b090:	2109      	movs	r1, #9
 800b092:	f7ff ff7d 	bl	800af90 <std>
 800b096:	68e0      	ldr	r0, [r4, #12]
 800b098:	2202      	movs	r2, #2
 800b09a:	2112      	movs	r1, #18
 800b09c:	f7ff ff78 	bl	800af90 <std>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	61a3      	str	r3, [r4, #24]
 800b0a4:	e7d2      	b.n	800b04c <__sinit+0xc>
 800b0a6:	bf00      	nop
 800b0a8:	0800b588 	.word	0x0800b588
 800b0ac:	0800afd9 	.word	0x0800afd9

0800b0b0 <__sfp>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	f7ff ffac 	bl	800b010 <__sfp_lock_acquire>
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <__sfp+0x84>)
 800b0ba:	681e      	ldr	r6, [r3, #0]
 800b0bc:	69b3      	ldr	r3, [r6, #24]
 800b0be:	b913      	cbnz	r3, 800b0c6 <__sfp+0x16>
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7ff ffbd 	bl	800b040 <__sinit>
 800b0c6:	3648      	adds	r6, #72	; 0x48
 800b0c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	d503      	bpl.n	800b0d8 <__sfp+0x28>
 800b0d0:	6833      	ldr	r3, [r6, #0]
 800b0d2:	b30b      	cbz	r3, 800b118 <__sfp+0x68>
 800b0d4:	6836      	ldr	r6, [r6, #0]
 800b0d6:	e7f7      	b.n	800b0c8 <__sfp+0x18>
 800b0d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0dc:	b9d5      	cbnz	r5, 800b114 <__sfp+0x64>
 800b0de:	4b16      	ldr	r3, [pc, #88]	; (800b138 <__sfp+0x88>)
 800b0e0:	60e3      	str	r3, [r4, #12]
 800b0e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b0e8:	f000 f847 	bl	800b17a <__retarget_lock_init_recursive>
 800b0ec:	f7ff ff96 	bl	800b01c <__sfp_lock_release>
 800b0f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0f8:	6025      	str	r5, [r4, #0]
 800b0fa:	61a5      	str	r5, [r4, #24]
 800b0fc:	2208      	movs	r2, #8
 800b0fe:	4629      	mov	r1, r5
 800b100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b104:	f7ff fd44 	bl	800ab90 <memset>
 800b108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b10c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b110:	4620      	mov	r0, r4
 800b112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b114:	3468      	adds	r4, #104	; 0x68
 800b116:	e7d9      	b.n	800b0cc <__sfp+0x1c>
 800b118:	2104      	movs	r1, #4
 800b11a:	4638      	mov	r0, r7
 800b11c:	f7ff ff62 	bl	800afe4 <__sfmoreglue>
 800b120:	4604      	mov	r4, r0
 800b122:	6030      	str	r0, [r6, #0]
 800b124:	2800      	cmp	r0, #0
 800b126:	d1d5      	bne.n	800b0d4 <__sfp+0x24>
 800b128:	f7ff ff78 	bl	800b01c <__sfp_lock_release>
 800b12c:	230c      	movs	r3, #12
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	e7ee      	b.n	800b110 <__sfp+0x60>
 800b132:	bf00      	nop
 800b134:	0800b588 	.word	0x0800b588
 800b138:	ffff0001 	.word	0xffff0001

0800b13c <_fwalk_reent>:
 800b13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b140:	4606      	mov	r6, r0
 800b142:	4688      	mov	r8, r1
 800b144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b148:	2700      	movs	r7, #0
 800b14a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b14e:	f1b9 0901 	subs.w	r9, r9, #1
 800b152:	d505      	bpl.n	800b160 <_fwalk_reent+0x24>
 800b154:	6824      	ldr	r4, [r4, #0]
 800b156:	2c00      	cmp	r4, #0
 800b158:	d1f7      	bne.n	800b14a <_fwalk_reent+0xe>
 800b15a:	4638      	mov	r0, r7
 800b15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b160:	89ab      	ldrh	r3, [r5, #12]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d907      	bls.n	800b176 <_fwalk_reent+0x3a>
 800b166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b16a:	3301      	adds	r3, #1
 800b16c:	d003      	beq.n	800b176 <_fwalk_reent+0x3a>
 800b16e:	4629      	mov	r1, r5
 800b170:	4630      	mov	r0, r6
 800b172:	47c0      	blx	r8
 800b174:	4307      	orrs	r7, r0
 800b176:	3568      	adds	r5, #104	; 0x68
 800b178:	e7e9      	b.n	800b14e <_fwalk_reent+0x12>

0800b17a <__retarget_lock_init_recursive>:
 800b17a:	4770      	bx	lr

0800b17c <__retarget_lock_acquire_recursive>:
 800b17c:	4770      	bx	lr

0800b17e <__retarget_lock_release_recursive>:
 800b17e:	4770      	bx	lr

0800b180 <__swhatbuf_r>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	460e      	mov	r6, r1
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	2900      	cmp	r1, #0
 800b18a:	b096      	sub	sp, #88	; 0x58
 800b18c:	4614      	mov	r4, r2
 800b18e:	461d      	mov	r5, r3
 800b190:	da07      	bge.n	800b1a2 <__swhatbuf_r+0x22>
 800b192:	2300      	movs	r3, #0
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	89b3      	ldrh	r3, [r6, #12]
 800b198:	061a      	lsls	r2, r3, #24
 800b19a:	d410      	bmi.n	800b1be <__swhatbuf_r+0x3e>
 800b19c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1a0:	e00e      	b.n	800b1c0 <__swhatbuf_r+0x40>
 800b1a2:	466a      	mov	r2, sp
 800b1a4:	f000 f970 	bl	800b488 <_fstat_r>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	dbf2      	blt.n	800b192 <__swhatbuf_r+0x12>
 800b1ac:	9a01      	ldr	r2, [sp, #4]
 800b1ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1b6:	425a      	negs	r2, r3
 800b1b8:	415a      	adcs	r2, r3
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	e7ee      	b.n	800b19c <__swhatbuf_r+0x1c>
 800b1be:	2340      	movs	r3, #64	; 0x40
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	6023      	str	r3, [r4, #0]
 800b1c4:	b016      	add	sp, #88	; 0x58
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}

0800b1c8 <__smakebuf_r>:
 800b1c8:	898b      	ldrh	r3, [r1, #12]
 800b1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1cc:	079d      	lsls	r5, r3, #30
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	d507      	bpl.n	800b1e4 <__smakebuf_r+0x1c>
 800b1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	6123      	str	r3, [r4, #16]
 800b1dc:	2301      	movs	r3, #1
 800b1de:	6163      	str	r3, [r4, #20]
 800b1e0:	b002      	add	sp, #8
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	ab01      	add	r3, sp, #4
 800b1e6:	466a      	mov	r2, sp
 800b1e8:	f7ff ffca 	bl	800b180 <__swhatbuf_r>
 800b1ec:	9900      	ldr	r1, [sp, #0]
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f000 f879 	bl	800b2e8 <_malloc_r>
 800b1f6:	b948      	cbnz	r0, 800b20c <__smakebuf_r+0x44>
 800b1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fc:	059a      	lsls	r2, r3, #22
 800b1fe:	d4ef      	bmi.n	800b1e0 <__smakebuf_r+0x18>
 800b200:	f023 0303 	bic.w	r3, r3, #3
 800b204:	f043 0302 	orr.w	r3, r3, #2
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	e7e3      	b.n	800b1d4 <__smakebuf_r+0xc>
 800b20c:	4b0d      	ldr	r3, [pc, #52]	; (800b244 <__smakebuf_r+0x7c>)
 800b20e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	6020      	str	r0, [r4, #0]
 800b214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	6163      	str	r3, [r4, #20]
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	6120      	str	r0, [r4, #16]
 800b222:	b15b      	cbz	r3, 800b23c <__smakebuf_r+0x74>
 800b224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 f93f 	bl	800b4ac <_isatty_r>
 800b22e:	b128      	cbz	r0, 800b23c <__smakebuf_r+0x74>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	89a0      	ldrh	r0, [r4, #12]
 800b23e:	4305      	orrs	r5, r0
 800b240:	81a5      	strh	r5, [r4, #12]
 800b242:	e7cd      	b.n	800b1e0 <__smakebuf_r+0x18>
 800b244:	0800afd9 	.word	0x0800afd9

0800b248 <_free_r>:
 800b248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b24a:	2900      	cmp	r1, #0
 800b24c:	d048      	beq.n	800b2e0 <_free_r+0x98>
 800b24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b252:	9001      	str	r0, [sp, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f1a1 0404 	sub.w	r4, r1, #4
 800b25a:	bfb8      	it	lt
 800b25c:	18e4      	addlt	r4, r4, r3
 800b25e:	f000 f947 	bl	800b4f0 <__malloc_lock>
 800b262:	4a20      	ldr	r2, [pc, #128]	; (800b2e4 <_free_r+0x9c>)
 800b264:	9801      	ldr	r0, [sp, #4]
 800b266:	6813      	ldr	r3, [r2, #0]
 800b268:	4615      	mov	r5, r2
 800b26a:	b933      	cbnz	r3, 800b27a <_free_r+0x32>
 800b26c:	6063      	str	r3, [r4, #4]
 800b26e:	6014      	str	r4, [r2, #0]
 800b270:	b003      	add	sp, #12
 800b272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b276:	f000 b941 	b.w	800b4fc <__malloc_unlock>
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	d90b      	bls.n	800b296 <_free_r+0x4e>
 800b27e:	6821      	ldr	r1, [r4, #0]
 800b280:	1862      	adds	r2, r4, r1
 800b282:	4293      	cmp	r3, r2
 800b284:	bf04      	itt	eq
 800b286:	681a      	ldreq	r2, [r3, #0]
 800b288:	685b      	ldreq	r3, [r3, #4]
 800b28a:	6063      	str	r3, [r4, #4]
 800b28c:	bf04      	itt	eq
 800b28e:	1852      	addeq	r2, r2, r1
 800b290:	6022      	streq	r2, [r4, #0]
 800b292:	602c      	str	r4, [r5, #0]
 800b294:	e7ec      	b.n	800b270 <_free_r+0x28>
 800b296:	461a      	mov	r2, r3
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	b10b      	cbz	r3, 800b2a0 <_free_r+0x58>
 800b29c:	42a3      	cmp	r3, r4
 800b29e:	d9fa      	bls.n	800b296 <_free_r+0x4e>
 800b2a0:	6811      	ldr	r1, [r2, #0]
 800b2a2:	1855      	adds	r5, r2, r1
 800b2a4:	42a5      	cmp	r5, r4
 800b2a6:	d10b      	bne.n	800b2c0 <_free_r+0x78>
 800b2a8:	6824      	ldr	r4, [r4, #0]
 800b2aa:	4421      	add	r1, r4
 800b2ac:	1854      	adds	r4, r2, r1
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	d1dd      	bne.n	800b270 <_free_r+0x28>
 800b2b4:	681c      	ldr	r4, [r3, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	6053      	str	r3, [r2, #4]
 800b2ba:	4421      	add	r1, r4
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	e7d7      	b.n	800b270 <_free_r+0x28>
 800b2c0:	d902      	bls.n	800b2c8 <_free_r+0x80>
 800b2c2:	230c      	movs	r3, #12
 800b2c4:	6003      	str	r3, [r0, #0]
 800b2c6:	e7d3      	b.n	800b270 <_free_r+0x28>
 800b2c8:	6825      	ldr	r5, [r4, #0]
 800b2ca:	1961      	adds	r1, r4, r5
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	bf04      	itt	eq
 800b2d0:	6819      	ldreq	r1, [r3, #0]
 800b2d2:	685b      	ldreq	r3, [r3, #4]
 800b2d4:	6063      	str	r3, [r4, #4]
 800b2d6:	bf04      	itt	eq
 800b2d8:	1949      	addeq	r1, r1, r5
 800b2da:	6021      	streq	r1, [r4, #0]
 800b2dc:	6054      	str	r4, [r2, #4]
 800b2de:	e7c7      	b.n	800b270 <_free_r+0x28>
 800b2e0:	b003      	add	sp, #12
 800b2e2:	bd30      	pop	{r4, r5, pc}
 800b2e4:	20000094 	.word	0x20000094

0800b2e8 <_malloc_r>:
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	1ccd      	adds	r5, r1, #3
 800b2ec:	f025 0503 	bic.w	r5, r5, #3
 800b2f0:	3508      	adds	r5, #8
 800b2f2:	2d0c      	cmp	r5, #12
 800b2f4:	bf38      	it	cc
 800b2f6:	250c      	movcc	r5, #12
 800b2f8:	2d00      	cmp	r5, #0
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	db01      	blt.n	800b302 <_malloc_r+0x1a>
 800b2fe:	42a9      	cmp	r1, r5
 800b300:	d903      	bls.n	800b30a <_malloc_r+0x22>
 800b302:	230c      	movs	r3, #12
 800b304:	6033      	str	r3, [r6, #0]
 800b306:	2000      	movs	r0, #0
 800b308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b30a:	f000 f8f1 	bl	800b4f0 <__malloc_lock>
 800b30e:	4921      	ldr	r1, [pc, #132]	; (800b394 <_malloc_r+0xac>)
 800b310:	680a      	ldr	r2, [r1, #0]
 800b312:	4614      	mov	r4, r2
 800b314:	b99c      	cbnz	r4, 800b33e <_malloc_r+0x56>
 800b316:	4f20      	ldr	r7, [pc, #128]	; (800b398 <_malloc_r+0xb0>)
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	b923      	cbnz	r3, 800b326 <_malloc_r+0x3e>
 800b31c:	4621      	mov	r1, r4
 800b31e:	4630      	mov	r0, r6
 800b320:	f000 f83c 	bl	800b39c <_sbrk_r>
 800b324:	6038      	str	r0, [r7, #0]
 800b326:	4629      	mov	r1, r5
 800b328:	4630      	mov	r0, r6
 800b32a:	f000 f837 	bl	800b39c <_sbrk_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	d123      	bne.n	800b37a <_malloc_r+0x92>
 800b332:	230c      	movs	r3, #12
 800b334:	6033      	str	r3, [r6, #0]
 800b336:	4630      	mov	r0, r6
 800b338:	f000 f8e0 	bl	800b4fc <__malloc_unlock>
 800b33c:	e7e3      	b.n	800b306 <_malloc_r+0x1e>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	1b5b      	subs	r3, r3, r5
 800b342:	d417      	bmi.n	800b374 <_malloc_r+0x8c>
 800b344:	2b0b      	cmp	r3, #11
 800b346:	d903      	bls.n	800b350 <_malloc_r+0x68>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	441c      	add	r4, r3
 800b34c:	6025      	str	r5, [r4, #0]
 800b34e:	e004      	b.n	800b35a <_malloc_r+0x72>
 800b350:	6863      	ldr	r3, [r4, #4]
 800b352:	42a2      	cmp	r2, r4
 800b354:	bf0c      	ite	eq
 800b356:	600b      	streq	r3, [r1, #0]
 800b358:	6053      	strne	r3, [r2, #4]
 800b35a:	4630      	mov	r0, r6
 800b35c:	f000 f8ce 	bl	800b4fc <__malloc_unlock>
 800b360:	f104 000b 	add.w	r0, r4, #11
 800b364:	1d23      	adds	r3, r4, #4
 800b366:	f020 0007 	bic.w	r0, r0, #7
 800b36a:	1ac2      	subs	r2, r0, r3
 800b36c:	d0cc      	beq.n	800b308 <_malloc_r+0x20>
 800b36e:	1a1b      	subs	r3, r3, r0
 800b370:	50a3      	str	r3, [r4, r2]
 800b372:	e7c9      	b.n	800b308 <_malloc_r+0x20>
 800b374:	4622      	mov	r2, r4
 800b376:	6864      	ldr	r4, [r4, #4]
 800b378:	e7cc      	b.n	800b314 <_malloc_r+0x2c>
 800b37a:	1cc4      	adds	r4, r0, #3
 800b37c:	f024 0403 	bic.w	r4, r4, #3
 800b380:	42a0      	cmp	r0, r4
 800b382:	d0e3      	beq.n	800b34c <_malloc_r+0x64>
 800b384:	1a21      	subs	r1, r4, r0
 800b386:	4630      	mov	r0, r6
 800b388:	f000 f808 	bl	800b39c <_sbrk_r>
 800b38c:	3001      	adds	r0, #1
 800b38e:	d1dd      	bne.n	800b34c <_malloc_r+0x64>
 800b390:	e7cf      	b.n	800b332 <_malloc_r+0x4a>
 800b392:	bf00      	nop
 800b394:	20000094 	.word	0x20000094
 800b398:	20000098 	.word	0x20000098

0800b39c <_sbrk_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d06      	ldr	r5, [pc, #24]	; (800b3b8 <_sbrk_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	602b      	str	r3, [r5, #0]
 800b3a8:	f7f6 fe68 	bl	800207c <_sbrk>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_sbrk_r+0x1a>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_sbrk_r+0x1a>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	200008dc 	.word	0x200008dc

0800b3bc <__sread>:
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	460c      	mov	r4, r1
 800b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c4:	f000 f8a0 	bl	800b508 <_read_r>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	bfab      	itete	ge
 800b3cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b3d0:	181b      	addge	r3, r3, r0
 800b3d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3d6:	bfac      	ite	ge
 800b3d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3da:	81a3      	strhlt	r3, [r4, #12]
 800b3dc:	bd10      	pop	{r4, pc}

0800b3de <__swrite>:
 800b3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	461f      	mov	r7, r3
 800b3e4:	898b      	ldrh	r3, [r1, #12]
 800b3e6:	05db      	lsls	r3, r3, #23
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	4616      	mov	r6, r2
 800b3ee:	d505      	bpl.n	800b3fc <__swrite+0x1e>
 800b3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f000 f868 	bl	800b4cc <_lseek_r>
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	4632      	mov	r2, r6
 800b40a:	463b      	mov	r3, r7
 800b40c:	4628      	mov	r0, r5
 800b40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b412:	f000 b817 	b.w	800b444 <_write_r>

0800b416 <__sseek>:
 800b416:	b510      	push	{r4, lr}
 800b418:	460c      	mov	r4, r1
 800b41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41e:	f000 f855 	bl	800b4cc <_lseek_r>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	bf15      	itete	ne
 800b428:	6560      	strne	r0, [r4, #84]	; 0x54
 800b42a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b42e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b432:	81a3      	strheq	r3, [r4, #12]
 800b434:	bf18      	it	ne
 800b436:	81a3      	strhne	r3, [r4, #12]
 800b438:	bd10      	pop	{r4, pc}

0800b43a <__sclose>:
 800b43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43e:	f000 b813 	b.w	800b468 <_close_r>
	...

0800b444 <_write_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	4d07      	ldr	r5, [pc, #28]	; (800b464 <_write_r+0x20>)
 800b448:	4604      	mov	r4, r0
 800b44a:	4608      	mov	r0, r1
 800b44c:	4611      	mov	r1, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	602a      	str	r2, [r5, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	f7f6 fdc1 	bl	8001fda <_write>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_write_r+0x1e>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_write_r+0x1e>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	200008dc 	.word	0x200008dc

0800b468 <_close_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4d06      	ldr	r5, [pc, #24]	; (800b484 <_close_r+0x1c>)
 800b46c:	2300      	movs	r3, #0
 800b46e:	4604      	mov	r4, r0
 800b470:	4608      	mov	r0, r1
 800b472:	602b      	str	r3, [r5, #0]
 800b474:	f7f6 fdcd 	bl	8002012 <_close>
 800b478:	1c43      	adds	r3, r0, #1
 800b47a:	d102      	bne.n	800b482 <_close_r+0x1a>
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	b103      	cbz	r3, 800b482 <_close_r+0x1a>
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	bd38      	pop	{r3, r4, r5, pc}
 800b484:	200008dc 	.word	0x200008dc

0800b488 <_fstat_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d07      	ldr	r5, [pc, #28]	; (800b4a8 <_fstat_r+0x20>)
 800b48c:	2300      	movs	r3, #0
 800b48e:	4604      	mov	r4, r0
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	602b      	str	r3, [r5, #0]
 800b496:	f7f6 fdc8 	bl	800202a <_fstat>
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	d102      	bne.n	800b4a4 <_fstat_r+0x1c>
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	b103      	cbz	r3, 800b4a4 <_fstat_r+0x1c>
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	bd38      	pop	{r3, r4, r5, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200008dc 	.word	0x200008dc

0800b4ac <_isatty_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d06      	ldr	r5, [pc, #24]	; (800b4c8 <_isatty_r+0x1c>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	f7f6 fdc7 	bl	800204a <_isatty>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_isatty_r+0x1a>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_isatty_r+0x1a>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	200008dc 	.word	0x200008dc

0800b4cc <_lseek_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	; (800b4ec <_lseek_r+0x20>)
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	4608      	mov	r0, r1
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	602a      	str	r2, [r5, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f7f6 fdc0 	bl	8002060 <_lseek>
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	d102      	bne.n	800b4ea <_lseek_r+0x1e>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	b103      	cbz	r3, 800b4ea <_lseek_r+0x1e>
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	200008dc 	.word	0x200008dc

0800b4f0 <__malloc_lock>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	; (800b4f8 <__malloc_lock+0x8>)
 800b4f2:	f7ff be43 	b.w	800b17c <__retarget_lock_acquire_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	200008d4 	.word	0x200008d4

0800b4fc <__malloc_unlock>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	; (800b504 <__malloc_unlock+0x8>)
 800b4fe:	f7ff be3e 	b.w	800b17e <__retarget_lock_release_recursive>
 800b502:	bf00      	nop
 800b504:	200008d4 	.word	0x200008d4

0800b508 <_read_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d07      	ldr	r5, [pc, #28]	; (800b528 <_read_r+0x20>)
 800b50c:	4604      	mov	r4, r0
 800b50e:	4608      	mov	r0, r1
 800b510:	4611      	mov	r1, r2
 800b512:	2200      	movs	r2, #0
 800b514:	602a      	str	r2, [r5, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	f7f6 fd42 	bl	8001fa0 <_read>
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	d102      	bne.n	800b526 <_read_r+0x1e>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	b103      	cbz	r3, 800b526 <_read_r+0x1e>
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	bd38      	pop	{r3, r4, r5, pc}
 800b528:	200008dc 	.word	0x200008dc

0800b52c <_init>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	bf00      	nop
 800b530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b532:	bc08      	pop	{r3}
 800b534:	469e      	mov	lr, r3
 800b536:	4770      	bx	lr

0800b538 <_fini>:
 800b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53a:	bf00      	nop
 800b53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b53e:	bc08      	pop	{r3}
 800b540:	469e      	mov	lr, r3
 800b542:	4770      	bx	lr
