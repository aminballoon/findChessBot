
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800f360  0800f360  0001f360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f8fc  0800f8fc  0001f8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f904  0800f904  0001f904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800f90c  0800f90c  0001f90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  0800f914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000924  24000208  0800fb1c  00020208  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b2c  0800fb1c  00020b2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030389  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044cf  00000000  00000000  000505bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001558  00000000  00000000  00054a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001420  00000000  00000000  00055fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc28  00000000  00000000  00057408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc12  00000000  00000000  00094030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d29a  00000000  00000000  000b1c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021eedc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b00  00000000  00000000  0021ef30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f348 	.word	0x0800f348

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0800f348 	.word	0x0800f348

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f009 fe7a 	bl	800a74c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f009 ff07 	bl	800a878 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	74da      	strb	r2, [r3, #19]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7c9b      	ldrb	r3, [r3, #18]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7cdb      	ldrb	r3, [r3, #19]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	eef0 7ae7 	vabs.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c08:	61da      	str	r2, [r3, #28]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000c0e:	621a      	str	r2, [r3, #32]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	22c7      	movs	r2, #199	; 0xc7
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 20.0f;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000c32:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c38:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8000c3a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000c68 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f830 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	60da      	str	r2, [r3, #12]
}
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	41a00000 	.word	0x41a00000
 8000c60:	469c4000 	.word	0x469c4000
 8000c64:	43480000 	.word	0x43480000
 8000c68:	00000000 	.word	0x00000000

08000c6c <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
}
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4619      	mov	r1, r3
 8000c94:	4610      	mov	r0, r2
 8000c96:	f008 fb49 	bl	800932c <HAL_TIM_PWM_Start>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	ed2d 8b02 	vpush	{d8}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc4:	f7ff ff6f 	bl	8000ba6 <_ZSt4fabsf>
 8000cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	bf94      	ite	ls
 8000cdc:	2301      	movls	r3, #1
 8000cde:	2300      	movhi	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e01b      	b.n	8000d26 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf8:	f7ff ff55 	bl	8000ba6 <_ZSt4fabsf>
 8000cfc:	eeb0 7a40 	vmov.f32	s14, s0
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	bfac      	ite	ge
 8000d10:	2301      	movge	r3, #1
 8000d12:	2300      	movlt	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	e001      	b.n	8000d26 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f && fabs(this->frequency) >= this->minFrequency) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d2c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8000ff0 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	dd12      	ble.n	8000d60 <_ZN7Stepper19StepperSetFrequencyEf+0xbc>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d40:	eeb0 0a67 	vmov.f32	s0, s15
 8000d44:	f7ff ff2f 	bl	8000ba6 <_ZSt4fabsf>
 8000d48:	eeb0 7a40 	vmov.f32	s14, s0
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5a:	db01      	blt.n	8000d60 <_ZN7Stepper19StepperSetFrequencyEf+0xbc>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <_ZN7Stepper19StepperSetFrequencyEf+0xbe>
 8000d60:	2300      	movs	r3, #0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 80db 	beq.w	8000f1e <_ZN7Stepper19StepperSetFrequencyEf+0x27a>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6898      	ldr	r0, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	f005 fcff 	bl	8006778 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * f)) - 1U);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	3301      	adds	r3, #1
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d94:	eddf 6a97 	vldr	s13, [pc, #604]	; 8000ff4 <_ZN7Stepper19StepperSetFrequencyEf+0x350>
 8000d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000da0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000da4:	eeb0 0a67 	vmov.f32	s0, s15
 8000da8:	f7ff ff0d 	bl	8000bc6 <_ZSt5roundf>
 8000dac:	eef0 7a40 	vmov.f32	s15, s0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dba:	ee17 2a90 	vmov	r2, s15
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d113      	bne.n	8000df0 <_ZN7Stepper19StepperSetFrequencyEf+0x14c>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000dd2:	085b      	lsrs	r3, r3, #1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fa42 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000dda:	eeb0 7b40 	vmov.f64	d7, d0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000de8:	ee17 2a90 	vmov	r2, s15
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000dee:	e1f6      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d113      	bne.n	8000e20 <_ZN7Stepper19StepperSetFrequencyEf+0x17c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000e02:	085b      	lsrs	r3, r3, #1
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fa2a 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e18:	ee17 2a90 	vmov	r2, s15
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e1e:	e1de      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d113      	bne.n	8000e50 <_ZN7Stepper19StepperSetFrequencyEf+0x1ac>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fa12 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e48:	ee17 2a90 	vmov	r2, s15
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e4e:	e1c6      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b0c      	cmp	r3, #12
 8000e56:	d113      	bne.n	8000e80 <_ZN7Stepper19StepperSetFrequencyEf+0x1dc>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f9fa 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e78:	ee17 2a90 	vmov	r2, s15
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e7e:	e1ae      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b10      	cmp	r3, #16
 8000e86:	d113      	bne.n	8000eb0 <_ZN7Stepper19StepperSetFrequencyEf+0x20c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000e92:	085b      	lsrs	r3, r3, #1
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f9e2 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ea8:	ee17 2a90 	vmov	r2, s15
 8000eac:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000eae:	e196      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b14      	cmp	r3, #20
 8000eb6:	d113      	bne.n	8000ee0 <_ZN7Stepper19StepperSetFrequencyEf+0x23c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f9ca 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000eca:	eeb0 7b40 	vmov.f64	d7, d0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ed8:	ee17 2a90 	vmov	r2, s15
 8000edc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ede:	e17e      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
			this->stepper_htim->Instance->CCR1 = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f1c:	e15f      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
	} else if (this->frequency < -0.001f && fabs(this->frequency) >= this->minFrequency) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f24:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000ff8 <_ZN7Stepper19StepperSetFrequencyEf+0x354>
 8000f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f30:	d512      	bpl.n	8000f58 <_ZN7Stepper19StepperSetFrequencyEf+0x2b4>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f38:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3c:	f7ff fe33 	bl	8000ba6 <_ZSt4fabsf>
 8000f40:	eeb0 7a40 	vmov.f32	s14, s0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	db01      	blt.n	8000f58 <_ZN7Stepper19StepperSetFrequencyEf+0x2b4>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <_ZN7Stepper19StepperSetFrequencyEf+0x2b6>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 80e5 	beq.w	800112a <_ZN7Stepper19StepperSetFrequencyEf+0x486>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6898      	ldr	r0, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f005 fc03 	bl	8006778 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000f84:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f88:	f7ff fe0d 	bl	8000ba6 <_ZSt4fabsf>
 8000f8c:	eef0 7a40 	vmov.f32	s15, s0
 8000f90:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000f94:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000ff4 <_ZN7Stepper19StepperSetFrequencyEf+0x350>
 8000f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa8:	f7ff fe0d 	bl	8000bc6 <_ZSt5roundf>
 8000fac:	eef0 7a40 	vmov.f32	s15, s0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fba:	ee17 2a90 	vmov	r2, s15
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d119      	bne.n	8000ffc <_ZN7Stepper19StepperSetFrequencyEf+0x358>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f942 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000fda:	eeb0 7b40 	vmov.f64	d7, d0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe8:	ee17 2a90 	vmov	r2, s15
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fee:	e0f6      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
 8000ff0:	3a83126f 	.word	0x3a83126f
 8000ff4:	4d64e1c0 	.word	0x4d64e1c0
 8000ff8:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d113      	bne.n	800102c <_ZN7Stepper19StepperSetFrequencyEf+0x388>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f924 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001016:	eeb0 7b40 	vmov.f64	d7, d0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001024:	ee17 2a90 	vmov	r2, s15
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
}
 800102a:	e0d8      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b08      	cmp	r3, #8
 8001032:	d113      	bne.n	800105c <_ZN7Stepper19StepperSetFrequencyEf+0x3b8>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800103e:	085b      	lsrs	r3, r3, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f90c 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001046:	eeb0 7b40 	vmov.f64	d7, d0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001054:	ee17 2a90 	vmov	r2, s15
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800105a:	e0c0      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d113      	bne.n	800108c <_ZN7Stepper19StepperSetFrequencyEf+0x3e8>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f8f4 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001076:	eeb0 7b40 	vmov.f64	d7, d0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001084:	ee17 2a90 	vmov	r2, s15
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
}
 800108a:	e0a8      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b10      	cmp	r3, #16
 8001092:	d113      	bne.n	80010bc <_ZN7Stepper19StepperSetFrequencyEf+0x418>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f8dc 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80010a6:	eeb0 7b40 	vmov.f64	d7, d0
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010b4:	ee17 2a90 	vmov	r2, s15
 80010b8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80010ba:	e090      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b14      	cmp	r3, #20
 80010c2:	d113      	bne.n	80010ec <_ZN7Stepper19StepperSetFrequencyEf+0x448>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 80010ce:	085b      	lsrs	r3, r3, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f8c4 	bl	800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80010d6:	eeb0 7b40 	vmov.f64	d7, d0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010e4:	ee17 2a90 	vmov	r2, s15
 80010e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010ea:	e078      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
			this->stepper_htim->Instance->CCR1 = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2200      	movs	r2, #0
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001128:	e059      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d105      	bne.n	800113e <_ZN7Stepper19StepperSetFrequencyEf+0x49a>
			this->stepper_htim->Instance->CCR1 = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2200      	movs	r2, #0
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800113c:	e04f      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d105      	bne.n	8001152 <_ZN7Stepper19StepperSetFrequencyEf+0x4ae>
			this->stepper_htim->Instance->CCR2 = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001150:	e045      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b08      	cmp	r3, #8
 8001158:	d105      	bne.n	8001166 <_ZN7Stepper19StepperSetFrequencyEf+0x4c2>
			this->stepper_htim->Instance->CCR3 = 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001164:	e03b      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b0c      	cmp	r3, #12
 800116c:	d105      	bne.n	800117a <_ZN7Stepper19StepperSetFrequencyEf+0x4d6>
			this->stepper_htim->Instance->CCR4 = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001178:	e031      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d105      	bne.n	800118e <_ZN7Stepper19StepperSetFrequencyEf+0x4ea>
			this->stepper_htim->Instance->CCR5 = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800118c:	e027      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b14      	cmp	r3, #20
 8001194:	d105      	bne.n	80011a2 <_ZN7Stepper19StepperSetFrequencyEf+0x4fe>
			this->stepper_htim->Instance->CCR6 = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80011a0:	e01d      	b.n	80011de <_ZN7Stepper19StepperSetFrequencyEf+0x53a>
			this->stepper_htim->Instance->CCR1 = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	ecbd 8b02 	vpop	{d8}
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop

080011ec <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80011f8:	ed97 0a00 	vldr	s0, [r7]
 80011fc:	f7ff fcd3 	bl	8000ba6 <_ZSt4fabsf>
 8001200:	eef0 7a40 	vmov.f32	s15, s0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001226:	eeb0 0b47 	vmov.f64	d0, d7
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffe5 	bl	8001212 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001248:	eeb0 7b40 	vmov.f64	d7, d0
 800124c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001270:	eeb0 0b47 	vmov.f64	d0, d7
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	ed87 0a01 	vstr	s0, [r7, #4]
 8001288:	edc7 0a00 	vstr	s1, [r7]
 800128c:	edd7 0a00 	vldr	s1, [r7]
 8001290:	ed97 0a01 	vldr	s0, [r7, #4]
 8001294:	f00b fa40 	bl	800c718 <atan2f>
 8001298:	eef0 7a40 	vmov.f32	s15, s0
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80012b4:	f00b f8b8 	bl	800c428 <cosf>
 80012b8:	eef0 7a40 	vmov.f32	s15, s0
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80012d0:	ed97 0a01 	vldr	s0, [r7, #4]
 80012d4:	f00b f980 	bl	800c5d8 <sinf>
 80012d8:	eef0 7a40 	vmov.f32	s15, s0
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	ed87 0a01 	vstr	s0, [r7, #4]
 80012f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80012f4:	f00b fa12 	bl	800c71c <sqrtf>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <_Z7find_IKffff>:
// p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
// p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
//}

joint_config find_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b095      	sub	sp, #84	; 0x54
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a07 	vstr	s0, [r7, #28]
 8001312:	edc7 0a06 	vstr	s1, [r7, #24]
 8001316:	ed87 1a05 	vstr	s2, [r7, #20]
 800131a:	edc7 1a04 	vstr	s3, [r7, #16]
	bug1 = gripper_linear_x*gripper_linear_x;
 800131e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001322:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001326:	4b86      	ldr	r3, [pc, #536]	; (8001540 <_Z7find_IKffff+0x238>)
 8001328:	edc3 7a00 	vstr	s15, [r3]
	bug2 = gripper_linear_y*gripper_linear_y;
 800132c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001330:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <_Z7find_IKffff+0x23c>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
	bug3 = L12*L12;
 800133a:	4b83      	ldr	r3, [pc, #524]	; (8001548 <_Z7find_IKffff+0x240>)
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	4b81      	ldr	r3, [pc, #516]	; (8001548 <_Z7find_IKffff+0x240>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134a:	4b80      	ldr	r3, [pc, #512]	; (800154c <_Z7find_IKffff+0x244>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	bug4 = L3*L3 ;
 8001350:	4b7f      	ldr	r3, [pc, #508]	; (8001550 <_Z7find_IKffff+0x248>)
 8001352:	ed93 7a00 	vldr	s14, [r3]
 8001356:	4b7e      	ldr	r3, [pc, #504]	; (8001550 <_Z7find_IKffff+0x248>)
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	4b7c      	ldr	r3, [pc, #496]	; (8001554 <_Z7find_IKffff+0x24c>)
 8001362:	edc3 7a00 	vstr	s15, [r3]
	C3 = ((gripper_linear_x*gripper_linear_x)+(gripper_linear_y*gripper_linear_y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 8001366:	edd7 7a07 	vldr	s15, [r7, #28]
 800136a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800136e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001372:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137a:	4b73      	ldr	r3, [pc, #460]	; (8001548 <_Z7find_IKffff+0x240>)
 800137c:	edd3 6a00 	vldr	s13, [r3]
 8001380:	4b71      	ldr	r3, [pc, #452]	; (8001548 <_Z7find_IKffff+0x240>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800138e:	4b70      	ldr	r3, [pc, #448]	; (8001550 <_Z7find_IKffff+0x248>)
 8001390:	edd3 6a00 	vldr	s13, [r3]
 8001394:	4b6e      	ldr	r3, [pc, #440]	; (8001550 <_Z7find_IKffff+0x248>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013a2:	4b69      	ldr	r3, [pc, #420]	; (8001548 <_Z7find_IKffff+0x240>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013ac:	4b68      	ldr	r3, [pc, #416]	; (8001550 <_Z7find_IKffff+0x248>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <_Z7find_IKffff+0x250>)
 80013bc:	edc3 7a00 	vstr	s15, [r3]
	S3 = sqrt(1-(C3*C3));
 80013c0:	4b65      	ldr	r3, [pc, #404]	; (8001558 <_Z7find_IKffff+0x250>)
 80013c2:	ed93 7a00 	vldr	s14, [r3]
 80013c6:	4b64      	ldr	r3, [pc, #400]	; (8001558 <_Z7find_IKffff+0x250>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	eeb0 0a67 	vmov.f32	s0, s15
 80013dc:	f7ff ff83 	bl	80012e6 <_ZSt4sqrtf>
 80013e0:	eef0 7a40 	vmov.f32	s15, s0
 80013e4:	4b5d      	ldr	r3, [pc, #372]	; (800155c <_Z7find_IKffff+0x254>)
 80013e6:	edc3 7a00 	vstr	s15, [r3]
	q3 = atan2(S3,C3);
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <_Z7find_IKffff+0x254>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	4b59      	ldr	r3, [pc, #356]	; (8001558 <_Z7find_IKffff+0x250>)
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	eef0 0a47 	vmov.f32	s1, s14
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	f7ff ff3e 	bl	800127e <_ZSt5atan2ff>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <_Z7find_IKffff+0x258>)
 8001408:	edc3 7a00 	vstr	s15, [r3]

	float L3S3 = L3*S3;
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <_Z7find_IKffff+0x248>)
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	4b52      	ldr	r3, [pc, #328]	; (800155c <_Z7find_IKffff+0x254>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float L123C3 = L12 + (L3*C3);
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <_Z7find_IKffff+0x248>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <_Z7find_IKffff+0x250>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <_Z7find_IKffff+0x240>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	S1 = (-L3S3*gripper_linear_x) + (L123C3*gripper_linear_y);
 800143e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001442:	eeb1 7a67 	vneg.f32	s14, s15
 8001446:	edd7 7a07 	vldr	s15, [r7, #28]
 800144a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144e:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001452:	edd7 7a06 	vldr	s15, [r7, #24]
 8001456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <_Z7find_IKffff+0x25c>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
	C1 = (L3S3*gripper_linear_y) + (L123C3*gripper_linear_x);
 8001464:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001468:	edd7 7a06 	vldr	s15, [r7, #24]
 800146c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001470:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001474:	edd7 7a07 	vldr	s15, [r7, #28]
 8001478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <_Z7find_IKffff+0x260>)
 8001482:	edc3 7a00 	vstr	s15, [r3]
	q1 = atan2(S1,C1);
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <_Z7find_IKffff+0x25c>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <_Z7find_IKffff+0x260>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	eef0 0a47 	vmov.f32	s1, s14
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	f7ff fef0 	bl	800127e <_ZSt5atan2ff>
 800149e:	eef0 7a40 	vmov.f32	s15, s0
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <_Z7find_IKffff+0x264>)
 80014a4:	edc3 7a00 	vstr	s15, [r3]
	float q4 = gripper_angular_yaw - q1 - q3;
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <_Z7find_IKffff+0x264>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80014b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <_Z7find_IKffff+0x258>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float q2 = gripper_linear_z + H4 - H3 - H1;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <_Z7find_IKffff+0x268>)
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <_Z7find_IKffff+0x26c>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <_Z7find_IKffff+0x270>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	joint_config buff;
	buff.q1 = q1;
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <_Z7find_IKffff+0x264>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	623b      	str	r3, [r7, #32]
	buff.q2 = C3;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <_Z7find_IKffff+0x250>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
	buff.q3 = q3;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <_Z7find_IKffff+0x258>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
	buff.q4 = S3;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <_Z7find_IKffff+0x254>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c

    return buff;
 8001502:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001512:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001518:	ee06 0a10 	vmov	s12, r0
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
}
 8001528:	eeb0 0a46 	vmov.f32	s0, s12
 800152c:	eef0 0a66 	vmov.f32	s1, s13
 8001530:	eeb0 1a47 	vmov.f32	s2, s14
 8001534:	eef0 1a67 	vmov.f32	s3, s15
 8001538:	3754      	adds	r7, #84	; 0x54
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	24000afc 	.word	0x24000afc
 8001544:	24000b00 	.word	0x24000b00
 8001548:	24000004 	.word	0x24000004
 800154c:	24000b04 	.word	0x24000b04
 8001550:	24000000 	.word	0x24000000
 8001554:	24000b08 	.word	0x24000b08
 8001558:	24000ad8 	.word	0x24000ad8
 800155c:	24000adc 	.word	0x24000adc
 8001560:	24000ae4 	.word	0x24000ae4
 8001564:	24000ad4 	.word	0x24000ad4
 8001568:	24000ad0 	.word	0x24000ad0
 800156c:	24000ae0 	.word	0x24000ae0
 8001570:	24000010 	.word	0x24000010
 8001574:	2400000c 	.word	0x2400000c
 8001578:	24000008 	.word	0x24000008
 800157c:	00000000 	.word	0x00000000

08001580 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	if (htim == &htim12){	//
	}
	if (htim == &htim7){	//

	}
	if (htim == &htim14) { 	//
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a8d      	ldr	r2, [pc, #564]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800158c:	4293      	cmp	r3, r2
 800158e:	f040 8105 	bne.w	800179c <HAL_TIM_PeriodElapsedCallback+0x21c>

		encoderJ1.AMT21_Read();
 8001592:	488c      	ldr	r0, [pc, #560]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001594:	f7ff fa53 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8001598:	488a      	ldr	r0, [pc, #552]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800159a:	f7ff fa7f 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80015a4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x3c>
			posJ1 = encoderJ1.getAngPos180();
 80015ae:	4885      	ldr	r0, [pc, #532]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80015b0:	f7ff fad8 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b84      	ldr	r3, [pc, #528]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015ba:	801a      	strh	r2, [r3, #0]
		}
		encoderJ3.AMT21_Read();
 80015bc:	4884      	ldr	r0, [pc, #528]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015be:	f7ff fa3e 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80015c2:	4883      	ldr	r0, [pc, #524]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015c4:	f7ff fa6a 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b81      	ldr	r3, [pc, #516]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015ce:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80015d0:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d106      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x66>
			posJ3 = encoderJ3.getAngPos180();
 80015d8:	487d      	ldr	r0, [pc, #500]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015da:	f7ff fac3 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015e4:	801a      	strh	r2, [r3, #0]

//
//		Goal_velocity_q1 = sin(0.314 * 2 * t) * 2000;
//		Goal_velocity_q3 = sin(0.314 * 2 * t) * 4000;

		const float KP_J1 = 1;
 80015e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015ea:	61fb      	str	r3, [r7, #28]
		const float Kp_J3 = 2;
 80015ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f0:	61bb      	str	r3, [r7, #24]
//		const float KP_J1 = 0.3;
//		const float Kp_J3 = 0.6;

		joint_config findchessbot_joint_state;
	//	findchessbot_joint_state = find_IK(0.4, 0, 0, 0);
		chess_board_ang = chessboard_angular_velocity * t;
 80015f2:	4b7a      	ldr	r3, [pc, #488]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015f4:	ed93 7a00 	vldr	s14, [r3]
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001602:	4b78      	ldr	r3, [pc, #480]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001604:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_x = 0.247*cos(chess_board_ang)+0.42744;
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	f7ff fe48 	bl	80012a6 <_ZSt3cosf>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
 800161a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80017a8 <HAL_TIM_PeriodElapsedCallback+0x228>
 8001622:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001626:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80017b0 <HAL_TIM_PeriodElapsedCallback+0x230>
 800162a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800162e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001634:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_y = 0.247*sin(chess_board_ang)+0.00059371;
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eeb0 0a67 	vmov.f32	s0, s15
 8001642:	f7ff fe40 	bl	80012c6 <_ZSt3sinf>
 8001646:	eef0 7a40 	vmov.f32	s15, s0
 800164a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800164e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80017a8 <HAL_TIM_PeriodElapsedCallback+0x228>
 8001652:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001656:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x238>
 800165a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800165e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001662:	4b62      	ldr	r3, [pc, #392]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001664:	edc3 7a00 	vstr	s15, [r3]
		findchessbot_joint_state = find_IK(
				debug_pos_x,
				debug_pos_y,
				0,
				0);
 8001668:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001670:	ed93 7a00 	vldr	s14, [r3]
 8001674:	eddf 1a5e 	vldr	s3, [pc, #376]	; 80017f0 <HAL_TIM_PeriodElapsedCallback+0x270>
 8001678:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80017f0 <HAL_TIM_PeriodElapsedCallback+0x270>
 800167c:	eef0 0a47 	vmov.f32	s1, s14
 8001680:	eeb0 0a67 	vmov.f32	s0, s15
 8001684:	f7ff fe40 	bl	8001308 <_Z7find_IKffff>
 8001688:	eeb0 6a40 	vmov.f32	s12, s0
 800168c:	eef0 6a60 	vmov.f32	s13, s1
 8001690:	eeb0 7a41 	vmov.f32	s14, s2
 8001694:	eef0 7a61 	vmov.f32	s15, s3
 8001698:	ed87 6a02 	vstr	s12, [r7, #8]
 800169c:	edc7 6a03 	vstr	s13, [r7, #12]
 80016a0:	ed87 7a04 	vstr	s14, [r7, #16]
 80016a4:	edc7 7a05 	vstr	s15, [r7, #20]
//		chess_board_ang = (chess_board_ang + 0.000261) ;
//		chess_board_ang = (chess_board_ang + 0.00522) ;
	//	printf("%f\t%f\n",findchessbot_joint_state.q1,findchessbot_joint_state.q3);
		setpointJ1 = findchessbot_joint_state.q1 * 2607;
 80016a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ac:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 80016b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b8:	ee17 2a90 	vmov	r2, s15
 80016bc:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80016be:	601a      	str	r2, [r3, #0]
		setpointJ3 = findchessbot_joint_state.q3 * 2607;
 80016c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	4b49      	ldr	r3, [pc, #292]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80016d6:	601a      	str	r2, [r3, #0]
//		setpointJ1 = sin(chess_board_ang) * 3000;
//		setpointJ3 = sin(chess_board_ang) * 3000;
		b1 = findchessbot_joint_state.q1;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4a49      	ldr	r2, [pc, #292]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016dc:	6013      	str	r3, [r2, #0]
		b2 = findchessbot_joint_state.q2;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4a48      	ldr	r2, [pc, #288]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016e2:	6013      	str	r3, [r2, #0]
		b3 = findchessbot_joint_state.q3;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016e8:	6013      	str	r3, [r2, #0]
		b4 = findchessbot_joint_state.q4;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016ee:	6013      	str	r3, [r2, #0]
//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;
		errorJ1 = posJ1 - setpointJ1;
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
		errorJ3 = posJ3 - setpointJ3 ;
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b21b      	sxth	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001724:	edc3 7a00 	vstr	s15, [r3]
//
		uJ1 = (KP_J1 * errorJ1);
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800172e:	6013      	str	r3, [r2, #0]
		uJ3 = (Kp_J3 * errorJ3);
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800173c:	edc3 7a00 	vstr	s15, [r3]
//	//	stepperJ3.StepperSetFrequency(-1200.0f);
//
		#ifdef __cplusplus
//		stepperJ1.StepperSetFrequency(300.0f);

		stepperJ1.StepperSetFrequency(uJ1);
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	eeb0 0a67 	vmov.f32	s0, s15
 800174a:	4835      	ldr	r0, [pc, #212]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800174c:	f7ff faaa 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(uJ3);
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eeb0 0a67 	vmov.f32	s0, s15
 800175a:	4832      	ldr	r0, [pc, #200]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800175c:	f7ff faa2 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
//		else
//		{
//		stepperJ3.StepperSetFrequency(0);
//		}

		t = t + sample_time_500;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001772:	edc3 7a00 	vstr	s15, [r3]
		if (t>=20.0)
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	bfac      	ite	ge
 800178a:	2301      	movge	r3, #1
 800178c:	2300      	movlt	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_TIM_PeriodElapsedCallback+0x21c>
		{
			t = 0.0;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
		}

		#endif
	}
}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	2d0e5604 	.word	0x2d0e5604
 80017ac:	3fcf9db2 	.word	0x3fcf9db2
 80017b0:	4d4024b3 	.word	0x4d4024b3
 80017b4:	3fdb5b2d 	.word	0x3fdb5b2d
 80017b8:	84437119 	.word	0x84437119
 80017bc:	3f437466 	.word	0x3f437466
 80017c0:	2400057c 	.word	0x2400057c
 80017c4:	24000a1c 	.word	0x24000a1c
 80017c8:	24000a94 	.word	0x24000a94
 80017cc:	24000aa8 	.word	0x24000aa8
 80017d0:	24000a30 	.word	0x24000a30
 80017d4:	24000a95 	.word	0x24000a95
 80017d8:	24000aaa 	.word	0x24000aaa
 80017dc:	24000024 	.word	0x24000024
 80017e0:	24000ae8 	.word	0x24000ae8
 80017e4:	24000ac4 	.word	0x24000ac4
 80017e8:	24000ac8 	.word	0x24000ac8
 80017ec:	24000acc 	.word	0x24000acc
 80017f0:	00000000 	.word	0x00000000
 80017f4:	4522f000 	.word	0x4522f000
 80017f8:	24000aac 	.word	0x24000aac
 80017fc:	24000ab0 	.word	0x24000ab0
 8001800:	24000a98 	.word	0x24000a98
 8001804:	24000a9c 	.word	0x24000a9c
 8001808:	24000aa0 	.word	0x24000aa0
 800180c:	24000aa4 	.word	0x24000aa4
 8001810:	24000ab4 	.word	0x24000ab4
 8001814:	24000ab8 	.word	0x24000ab8
 8001818:	24000abc 	.word	0x24000abc
 800181c:	24000ac0 	.word	0x24000ac0
 8001820:	24000a44 	.word	0x24000a44
 8001824:	24000a6c 	.word	0x24000a6c
 8001828:	24000020 	.word	0x24000020

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001830:	f002 f92a 	bl	8003a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001834:	f000 f87a 	bl	800192c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001838:	f000 ffa2 	bl	8002780 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800183c:	f000 ff60 	bl	8002700 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001840:	f000 fefe 	bl	8002640 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8001844:	f000 fa4a 	bl	8001cdc <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8001848:	f000 fe30 	bl	80024ac <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 800184c:	f000 fb68 	bl	8001f20 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8001850:	f000 f91e 	bl	8001a90 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8001854:	f000 f976 	bl	8001b44 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001858:	f000 fad0 	bl	8001dfc <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 800185c:	f000 fbf2 	bl	8002044 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8001860:	f000 fd62 	bl	8002328 <_ZL13MX_TIM15_Initv>
  MX_CRC_Init();
 8001864:	f000 f8ec 	bl	8001a40 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8001868:	f000 fe88 	bl	800257c <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 800186c:	f000 fc48 	bl	8002100 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8001870:	f000 fc86 	bl	8002180 <_ZL12MX_TIM7_Initv>
  MX_TIM12_Init();
 8001874:	f000 fcc4 	bl	8002200 <_ZL13MX_TIM12_Initv>
  MX_TIM13_Init();
 8001878:	f000 fd06 	bl	8002288 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800187c:	f000 fd2c 	bl	80022d8 <_ZL13MX_TIM14_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2101      	movs	r1, #1
 8001884:	481f      	ldr	r0, [pc, #124]	; (8001904 <main+0xd8>)
 8001886:	f004 ff77 	bl	8006778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2102      	movs	r1, #2
 800188e:	481e      	ldr	r0, [pc, #120]	; (8001908 <main+0xdc>)
 8001890:	f004 ff72 	bl	8006778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189a:	481a      	ldr	r0, [pc, #104]	; (8001904 <main+0xd8>)
 800189c:	f004 ff6c 	bl	8006778 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80018a0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800190c <main+0xe0>
 80018a4:	481a      	ldr	r0, [pc, #104]	; (8001910 <main+0xe4>)
 80018a6:	f7ff f9fd 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 80018aa:	2110      	movs	r1, #16
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <main+0xe4>)
 80018ae:	f7ff fcc1 	bl	8001234 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 80018b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018b6:	4816      	ldr	r0, [pc, #88]	; (8001910 <main+0xe4>)
 80018b8:	f7ff fc98 	bl	80011ec <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80018bc:	4814      	ldr	r0, [pc, #80]	; (8001910 <main+0xe4>)
 80018be:	f7ff f9e0 	bl	8000c82 <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0);
 80018c2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800190c <main+0xe0>
 80018c6:	4813      	ldr	r0, [pc, #76]	; (8001914 <main+0xe8>)
 80018c8:	f7ff f9ec 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80018cc:	2110      	movs	r1, #16
 80018ce:	4811      	ldr	r0, [pc, #68]	; (8001914 <main+0xe8>)
 80018d0:	f7ff fcb0 	bl	8001234 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 80018d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018d8:	480e      	ldr	r0, [pc, #56]	; (8001914 <main+0xe8>)
 80018da:	f7ff fc87 	bl	80011ec <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <main+0xe8>)
 80018e0:	f7ff f9cf 	bl	8000c82 <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <main+0xec>)
 80018e6:	f007 fc47 	bl	8009178 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <main+0xf0>)
 80018ec:	f007 fc44 	bl	8009178 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <main+0xf4>)
 80018f2:	f007 fc41 	bl	8009178 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <main+0xf8>)
 80018f8:	f007 fc3e 	bl	8009178 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <main+0xfc>)
 80018fe:	f007 fc3b 	bl	8009178 <HAL_TIM_Base_Start_IT>
//	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001902:	e7fe      	b.n	8001902 <main+0xd6>
 8001904:	58020400 	.word	0x58020400
 8001908:	58021000 	.word	0x58021000
 800190c:	00000000 	.word	0x00000000
 8001910:	24000a44 	.word	0x24000a44
 8001914:	24000a6c 	.word	0x24000a6c
 8001918:	24000400 	.word	0x24000400
 800191c:	2400044c 	.word	0x2400044c
 8001920:	24000498 	.word	0x24000498
 8001924:	240004e4 	.word	0x240004e4
 8001928:	2400057c 	.word	0x2400057c

0800192c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b09c      	sub	sp, #112	; 0x70
 8001930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	224c      	movs	r2, #76	; 0x4c
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f00b f8bc 	bl	800cab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2220      	movs	r2, #32
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f00b f8b6 	bl	800cab8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800194c:	2002      	movs	r0, #2
 800194e:	f004 ff47 	bl	80067e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <_Z18SystemClock_Configv+0x10c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <_Z18SystemClock_Configv+0x10c>)
 800195c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <_Z18SystemClock_Configv+0x10c>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <_Z18SystemClock_Configv+0x110>)
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <_Z18SystemClock_Configv+0x110>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <_Z18SystemClock_Configv+0x110>)
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <_Z18SystemClock_Configv+0x10c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800198c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d000      	beq.n	800199e <_Z18SystemClock_Configv+0x72>
 800199c:	e7f2      	b.n	8001984 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800199e:	2302      	movs	r3, #2
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a6:	2340      	movs	r3, #64	; 0x40
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019aa:	2302      	movs	r3, #2
 80019ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ae:	2300      	movs	r3, #0
 80019b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019b2:	2304      	movs	r3, #4
 80019b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80019b6:	233c      	movs	r3, #60	; 0x3c
 80019b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80019be:	2306      	movs	r3, #6
 80019c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019c2:	2302      	movs	r3, #2
 80019c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019c6:	230c      	movs	r3, #12
 80019c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 ff3c 	bl	8006854 <HAL_RCC_OscConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf14      	ite	ne
 80019e2:	2301      	movne	r3, #1
 80019e4:	2300      	moveq	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80019ec:	f001 f80a 	bl	8002a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f0:	233f      	movs	r3, #63	; 0x3f
 80019f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f4:	2303      	movs	r3, #3
 80019f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019fc:	2308      	movs	r3, #8
 80019fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2104      	movs	r1, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 fb48 	bl	80070ac <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001a2c:	f000 ffea 	bl	8002a04 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3770      	adds	r7, #112	; 0x70
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	58024800 	.word	0x58024800
 8001a3c:	58000400 	.word	0x58000400

08001a40 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_ZL11MX_CRC_Initv+0x48>)
 8001a46:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <_ZL11MX_CRC_Initv+0x4c>)
 8001a48:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <_ZL11MX_CRC_Initv+0x48>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <_ZL11MX_CRC_Initv+0x48>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <_ZL11MX_CRC_Initv+0x48>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <_ZL11MX_CRC_Initv+0x48>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <_ZL11MX_CRC_Initv+0x48>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <_ZL11MX_CRC_Initv+0x48>)
 8001a6a:	f002 f9c7 	bl	8003dfc <HAL_CRC_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001a7e:	f000 ffc1 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	24000224 	.word	0x24000224
 8001a8c:	58024c00 	.word	0x58024c00

08001a90 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001a96:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <_ZL12MX_SPI3_Initv+0xb0>)
 8001a98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001a9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aa0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001aaa:	2203      	movs	r2, #3
 8001aac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001abc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ac0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <_ZL12MX_SPI3_Initv+0xac>)
 8001b20:	f007 f9b2 	bl	8008e88 <HAL_SPI_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf14      	ite	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	2300      	moveq	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001b34:	f000 ff66 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24000248 	.word	0x24000248
 8001b40:	40003c00 	.word	0x40003c00

08001b44 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b09a      	sub	sp, #104	; 0x68
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	615a      	str	r2, [r3, #20]
 8001b76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	222c      	movs	r2, #44	; 0x2c
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00a ff9a 	bl	800cab8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001b86:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <_ZL12MX_TIM1_Initv+0x194>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8001b8a:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001b8c:	22c7      	movs	r2, #199	; 0xc7
 8001b8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001b96:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001b98:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001b9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001baa:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb0:	4848      	ldr	r0, [pc, #288]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001bb2:	f007 fa8a 	bl	80090ca <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8001bc6:	f000 ff1d 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bce:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	483f      	ldr	r0, [pc, #252]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001bd8:	f007 feea 	bl	80099b0 <HAL_TIM_ConfigClockSource>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001bec:	f000 ff0a 	bl	8002a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf0:	4838      	ldr	r0, [pc, #224]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001bf2:	f007 fb39 	bl	8009268 <HAL_TIM_PWM_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001c06:	f000 fefd 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	482d      	ldr	r0, [pc, #180]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001c1e:	f008 fc1b 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001c32:	f000 fee7 	bl	8002a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	; 0x60
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001c3a:	f240 1339 	movw	r3, #313	; 0x139
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	481d      	ldr	r0, [pc, #116]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001c5e:	f007 fd93 	bl	8009788 <HAL_TIM_PWM_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001c72:	f000 fec7 	bl	8002a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001cac:	f008 fc62 	bl	800a574 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf14      	ite	ne
 8001cb6:	2301      	movne	r3, #1
 8001cb8:	2300      	moveq	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 8001cc0:	f000 fea0 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <_ZL12MX_TIM1_Initv+0x190>)
 8001cc6:	f001 f979 	bl	8002fbc <HAL_TIM_MspPostInit>

}
 8001cca:	bf00      	nop
 8001ccc:	3768      	adds	r7, #104	; 0x68
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	240002d0 	.word	0x240002d0
 8001cd8:	40010000 	.word	0x40010000

08001cdc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d18:	22c7      	movs	r2, #199	; 0xc7
 8001d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8001d22:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d24:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d36:	4830      	ldr	r0, [pc, #192]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d38:	f007 f9c7 	bl	80090ca <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001d4c:	f000 fe5a 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4826      	ldr	r0, [pc, #152]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d5e:	f007 fe27 	bl	80099b0 <HAL_TIM_ConfigClockSource>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001d72:	f000 fe47 	bl	8002a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d76:	4820      	ldr	r0, [pc, #128]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d78:	f007 fa76 	bl	8009268 <HAL_TIM_PWM_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001d8c:	f000 fe3a 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4816      	ldr	r0, [pc, #88]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001da0:	f008 fb5a 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001db4:	f000 fe26 	bl	8002a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	; 0x60
 8001dba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001dbc:	f240 1339 	movw	r3, #313	; 0x139
 8001dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dca:	463b      	mov	r3, r7
 8001dcc:	2208      	movs	r2, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4809      	ldr	r0, [pc, #36]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001dd2:	f007 fcd9 	bl	8009788 <HAL_TIM_PWM_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8001de6:	f000 fe0d 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001dec:	f001 f8e6 	bl	8002fbc <HAL_TIM_MspPostInit>

}
 8001df0:	bf00      	nop
 8001df2:	3738      	adds	r7, #56	; 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2400031c 	.word	0x2400031c

08001dfc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e30:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <_ZL12MX_TIM3_Initv+0x120>)
 8001e32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e36:	22c7      	movs	r2, #199	; 0xc7
 8001e38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001e40:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e42:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e54:	4830      	ldr	r0, [pc, #192]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e56:	f007 f938 	bl	80090ca <HAL_TIM_Base_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001e6a:	f000 fdcb 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4827      	ldr	r0, [pc, #156]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e7c:	f007 fd98 	bl	80099b0 <HAL_TIM_ConfigClockSource>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001e90:	f000 fdb8 	bl	8002a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e94:	4820      	ldr	r0, [pc, #128]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e96:	f007 f9e7 	bl	8009268 <HAL_TIM_PWM_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8001eaa:	f000 fdab 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4816      	ldr	r0, [pc, #88]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001ebe:	f008 facb 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001ed2:	f000 fd97 	bl	8002a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed6:	2360      	movs	r3, #96	; 0x60
 8001ed8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001eda:	f240 1339 	movw	r3, #313	; 0x139
 8001ede:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2200      	movs	r2, #0
 8001eec:	4619      	mov	r1, r3
 8001eee:	480a      	ldr	r0, [pc, #40]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001ef0:	f007 fc4a 	bl	8009788 <HAL_TIM_PWM_ConfigChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8001f04:	f000 fd7e 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f08:	4803      	ldr	r0, [pc, #12]	; (8001f18 <_ZL12MX_TIM3_Initv+0x11c>)
 8001f0a:	f001 f857 	bl	8002fbc <HAL_TIM_MspPostInit>

}
 8001f0e:	bf00      	nop
 8001f10:	3738      	adds	r7, #56	; 0x38
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	24000368 	.word	0x24000368
 8001f1c:	40000400 	.word	0x40000400

08001f20 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <_ZL12MX_TIM4_Initv+0x120>)
 8001f56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8001f58:	4b38      	ldr	r3, [pc, #224]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f5a:	22c7      	movs	r2, #199	; 0xc7
 8001f5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f66:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001f6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b33      	ldr	r3, [pc, #204]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f72:	4b32      	ldr	r3, [pc, #200]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f78:	4830      	ldr	r0, [pc, #192]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f7a:	f007 f8a6 	bl	80090ca <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001f8e:	f000 fd39 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4827      	ldr	r0, [pc, #156]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fa0:	f007 fd06 	bl	80099b0 <HAL_TIM_ConfigClockSource>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001fb4:	f000 fd26 	bl	8002a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fb8:	4820      	ldr	r0, [pc, #128]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fba:	f007 f955 	bl	8009268 <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001fce:	f000 fd19 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4816      	ldr	r0, [pc, #88]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fe2:	f008 fa39 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8001ff6:	f000 fd05 	bl	8002a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffa:	2360      	movs	r3, #96	; 0x60
 8001ffc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001ffe:	f240 1339 	movw	r3, #313	; 0x139
 8002002:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	2208      	movs	r2, #8
 8002010:	4619      	mov	r1, r3
 8002012:	480a      	ldr	r0, [pc, #40]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 8002014:	f007 fbb8 	bl	8009788 <HAL_TIM_PWM_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 8002028:	f000 fcec 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800202c:	4803      	ldr	r0, [pc, #12]	; (800203c <_ZL12MX_TIM4_Initv+0x11c>)
 800202e:	f000 ffc5 	bl	8002fbc <HAL_TIM_MspPostInit>

}
 8002032:	bf00      	nop
 8002034:	3738      	adds	r7, #56	; 0x38
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	240003b4 	.word	0x240003b4
 8002040:	40000800 	.word	0x40000800

08002044 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <_ZL12MX_TIM5_Initv+0xb8>)
 8002066:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 800206a:	22c7      	movs	r2, #199	; 0xc7
 800206c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002076:	f642 62df 	movw	r2, #11999	; 0x2edf
 800207a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002088:	481b      	ldr	r0, [pc, #108]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 800208a:	f007 f81e 	bl	80090ca <HAL_TIM_Base_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 800209e:	f000 fcb1 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4619      	mov	r1, r3
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 80020b0:	f007 fc7e 	bl	80099b0 <HAL_TIM_ConfigClockSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 80020c4:	f000 fc9e 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4808      	ldr	r0, [pc, #32]	; (80020f8 <_ZL12MX_TIM5_Initv+0xb4>)
 80020d6:	f008 f9bf 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 80020ea:	f000 fc8b 	bl	8002a04 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24000400 	.word	0x24000400
 80020fc:	40000c00 	.word	0x40000c00

08002100 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <_ZL12MX_TIM6_Initv+0x78>)
 8002112:	4a1a      	ldr	r2, [pc, #104]	; (800217c <_ZL12MX_TIM6_Initv+0x7c>)
 8002114:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <_ZL12MX_TIM6_Initv+0x78>)
 8002118:	22c7      	movs	r2, #199	; 0xc7
 800211a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <_ZL12MX_TIM6_Initv+0x78>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <_ZL12MX_TIM6_Initv+0x78>)
 8002124:	f241 726f 	movw	r2, #5999	; 0x176f
 8002128:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <_ZL12MX_TIM6_Initv+0x78>)
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002130:	4811      	ldr	r0, [pc, #68]	; (8002178 <_ZL12MX_TIM6_Initv+0x78>)
 8002132:	f006 ffca 	bl	80090ca <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8002146:	f000 fc5d 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <_ZL12MX_TIM6_Initv+0x78>)
 8002158:	f008 f97e 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf14      	ite	ne
 8002162:	2301      	movne	r3, #1
 8002164:	2300      	moveq	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800216c:	f000 fc4a 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2400044c 	.word	0x2400044c
 800217c:	40001000 	.word	0x40001000

08002180 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <_ZL12MX_TIM7_Initv+0x78>)
 8002192:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <_ZL12MX_TIM7_Initv+0x7c>)
 8002194:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <_ZL12MX_TIM7_Initv+0x78>)
 8002198:	22c7      	movs	r2, #199	; 0xc7
 800219a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <_ZL12MX_TIM7_Initv+0x78>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_ZL12MX_TIM7_Initv+0x78>)
 80021a4:	f240 42af 	movw	r2, #1199	; 0x4af
 80021a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <_ZL12MX_TIM7_Initv+0x78>)
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021b0:	4811      	ldr	r0, [pc, #68]	; (80021f8 <_ZL12MX_TIM7_Initv+0x78>)
 80021b2:	f006 ff8a 	bl	80090ca <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 80021c6:	f000 fc1d 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <_ZL12MX_TIM7_Initv+0x78>)
 80021d8:	f008 f93e 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 80021ec:	f000 fc0a 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	24000498 	.word	0x24000498
 80021fc:	40001400 	.word	0x40001400

08002200 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	463b      	mov	r3, r7
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <_ZL13MX_TIM12_Initv+0x84>)
 8002216:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 800221a:	22c7      	movs	r2, #199	; 0xc7
 800221c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 8002226:	f240 2257 	movw	r2, #599	; 0x257
 800222a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002238:	4811      	ldr	r0, [pc, #68]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 800223a:	f006 ff46 	bl	80090ca <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 800224e:	f000 fbd9 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002256:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002258:	463b      	mov	r3, r7
 800225a:	4619      	mov	r1, r3
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <_ZL13MX_TIM12_Initv+0x80>)
 800225e:	f007 fba7 	bl	80099b0 <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8002272:	f000 fbc7 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	240004e4 	.word	0x240004e4
 8002284:	40001800 	.word	0x40001800

08002288 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <_ZL13MX_TIM13_Initv+0x48>)
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <_ZL13MX_TIM13_Initv+0x4c>)
 8002290:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <_ZL13MX_TIM13_Initv+0x48>)
 8002294:	22c7      	movs	r2, #199	; 0xc7
 8002296:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <_ZL13MX_TIM13_Initv+0x48>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <_ZL13MX_TIM13_Initv+0x48>)
 80022a0:	f240 2257 	movw	r2, #599	; 0x257
 80022a4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <_ZL13MX_TIM13_Initv+0x48>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <_ZL13MX_TIM13_Initv+0x48>)
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80022b2:	4807      	ldr	r0, [pc, #28]	; (80022d0 <_ZL13MX_TIM13_Initv+0x48>)
 80022b4:	f006 ff09 	bl	80090ca <HAL_TIM_Base_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 80022c8:	f000 fb9c 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	24000530 	.word	0x24000530
 80022d4:	40001c00 	.word	0x40001c00

080022d8 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <_ZL13MX_TIM14_Initv+0x48>)
 80022de:	4a11      	ldr	r2, [pc, #68]	; (8002324 <_ZL13MX_TIM14_Initv+0x4c>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <_ZL13MX_TIM14_Initv+0x48>)
 80022e4:	22c7      	movs	r2, #199	; 0xc7
 80022e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <_ZL13MX_TIM14_Initv+0x48>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <_ZL13MX_TIM14_Initv+0x48>)
 80022f0:	f640 125f 	movw	r2, #2399	; 0x95f
 80022f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <_ZL13MX_TIM14_Initv+0x48>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <_ZL13MX_TIM14_Initv+0x48>)
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <_ZL13MX_TIM14_Initv+0x48>)
 8002304:	f006 fee1 	bl	80090ca <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8002318:	f000 fb74 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2400057c 	.word	0x2400057c
 8002324:	40002000 	.word	0x40002000

08002328 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b09a      	sub	sp, #104	; 0x68
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	222c      	movs	r2, #44	; 0x2c
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f00a fba8 	bl	800cab8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002368:	4b4e      	ldr	r3, [pc, #312]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 800236a:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <_ZL13MX_TIM15_Initv+0x180>)
 800236c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 800236e:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 8002370:	22ef      	movs	r2, #239	; 0xef
 8002372:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800237a:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 800237c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002380:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800238e:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002394:	4843      	ldr	r0, [pc, #268]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 8002396:	f006 fe98 	bl	80090ca <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 80023aa:	f000 fb2b 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80023b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023b8:	4619      	mov	r1, r3
 80023ba:	483a      	ldr	r0, [pc, #232]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023bc:	f007 faf8 	bl	80099b0 <HAL_TIM_ConfigClockSource>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 80023d0:	f000 fb18 	bl	8002a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80023d4:	4833      	ldr	r0, [pc, #204]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023d6:	f006 ff47 	bl	8009268 <HAL_TIM_PWM_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 80023ea:	f000 fb0b 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4829      	ldr	r0, [pc, #164]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023fe:	f008 f82b 	bl	800a458 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8002412:	f000 faf7 	bl	8002a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002416:	2360      	movs	r3, #96	; 0x60
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800241a:	f240 1339 	movw	r3, #313	; 0x139
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002424:	2300      	movs	r3, #0
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002434:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002438:	2204      	movs	r2, #4
 800243a:	4619      	mov	r1, r3
 800243c:	4819      	ldr	r0, [pc, #100]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 800243e:	f007 f9a3 	bl	8009788 <HAL_TIM_PWM_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 8002452:	f000 fad7 	bl	8002a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800246a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 800247e:	f008 f879 	bl	800a574 <HAL_TIMEx_ConfigBreakDeadTime>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 8002492:	f000 fab7 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <_ZL13MX_TIM15_Initv+0x17c>)
 8002498:	f000 fd90 	bl	8002fbc <HAL_TIM_MspPostInit>

}
 800249c:	bf00      	nop
 800249e:	3768      	adds	r7, #104	; 0x68
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	240005c8 	.word	0x240005c8
 80024a8:	40014000 	.word	0x40014000

080024ac <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024b0:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024b2:	4a30      	ldr	r2, [pc, #192]	; (8002574 <_ZL13MX_UART4_Initv+0xc8>)
 80024b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80024b6:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024b8:	4a2f      	ldr	r2, [pc, #188]	; (8002578 <_ZL13MX_UART4_Initv+0xcc>)
 80024ba:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024bc:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024d0:	220c      	movs	r2, #12
 80024d2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024da:	4b25      	ldr	r3, [pc, #148]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024ee:	2208      	movs	r2, #8
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024fa:	481d      	ldr	r0, [pc, #116]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 80024fc:	f008 f8d6 	bl	800a6ac <HAL_UART_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <_ZL13MX_UART4_Initv+0x68>
  {
    Error_Handler();
 8002510:	f000 fa78 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002514:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002518:	4815      	ldr	r0, [pc, #84]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 800251a:	f009 fe8e 	bl	800c23a <HAL_UARTEx_SetTxFifoThreshold>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <_ZL13MX_UART4_Initv+0x86>
  {
    Error_Handler();
 800252e:	f000 fa69 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002532:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002536:	480e      	ldr	r0, [pc, #56]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 8002538:	f009 febd 	bl	800c2b6 <HAL_UARTEx_SetRxFifoThreshold>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <_ZL13MX_UART4_Initv+0xa4>
  {
    Error_Handler();
 800254c:	f000 fa5a 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8002550:	4807      	ldr	r0, [pc, #28]	; (8002570 <_ZL13MX_UART4_Initv+0xc4>)
 8002552:	f009 fdfe 	bl	800c152 <HAL_UARTEx_EnableFifoMode>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <_ZL13MX_UART4_Initv+0xbe>
  {
    Error_Handler();
 8002566:	f000 fa4d 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000614 	.word	0x24000614
 8002574:	40004c00 	.word	0x40004c00
 8002578:	001e8480 	.word	0x001e8480

0800257c <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 8002582:	4a2e      	ldr	r2, [pc, #184]	; (800263c <_ZL13MX_UART7_Initv+0xc0>)
 8002584:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 8002588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800258c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800259a:	4b27      	ldr	r3, [pc, #156]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025a2:	220c      	movs	r2, #12
 80025a4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80025c4:	481c      	ldr	r0, [pc, #112]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025c6:	f008 f871 	bl	800a6ac <HAL_UART_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 80025da:	f000 fa13 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80025de:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80025e2:	4815      	ldr	r0, [pc, #84]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 80025e4:	f009 fe29 	bl	800c23a <HAL_UARTEx_SetTxFifoThreshold>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 80025f8:	f000 fa04 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80025fc:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 8002602:	f009 fe58 	bl	800c2b6 <HAL_UARTEx_SetRxFifoThreshold>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8002616:	f000 f9f5 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 800261a:	4807      	ldr	r0, [pc, #28]	; (8002638 <_ZL13MX_UART7_Initv+0xbc>)
 800261c:	f009 fd99 	bl	800c152 <HAL_UARTEx_EnableFifoMode>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8002630:	f000 f9e8 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	240006a4 	.word	0x240006a4
 800263c:	40007800 	.word	0x40007800

08002640 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002646:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <_ZL19MX_USART3_UART_Initv+0xbc>)
 8002648:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800264c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002650:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002684:	2200      	movs	r2, #0
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002688:	481b      	ldr	r0, [pc, #108]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800268a:	f008 f80f 	bl	800a6ac <HAL_UART_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 800269e:	f000 f9b1 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a2:	2100      	movs	r1, #0
 80026a4:	4814      	ldr	r0, [pc, #80]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026a6:	f009 fdc8 	bl	800c23a <HAL_UARTEx_SetTxFifoThreshold>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80026ba:	f000 f9a3 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026be:	2100      	movs	r1, #0
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026c2:	f009 fdf8 	bl	800c2b6 <HAL_UARTEx_SetRxFifoThreshold>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80026d6:	f000 f995 	bl	8002a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026da:	4807      	ldr	r0, [pc, #28]	; (80026f8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026dc:	f009 fd74 	bl	800c1c8 <HAL_UARTEx_DisableFifoMode>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 80026f0:	f000 f988 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	24000734 	.word	0x24000734
 80026fc:	40004800 	.word	0x40004800

08002700 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <_ZL11MX_DMA_Initv+0x7c>)
 8002708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <_ZL11MX_DMA_Initv+0x7c>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <_ZL11MX_DMA_Initv+0x7c>)
 8002718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	200b      	movs	r0, #11
 800272a:	f001 fb26 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800272e:	200b      	movs	r0, #11
 8002730:	f001 fb3d 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	2100      	movs	r1, #0
 8002738:	200c      	movs	r0, #12
 800273a:	f001 fb1e 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800273e:	200c      	movs	r0, #12
 8002740:	f001 fb35 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	200d      	movs	r0, #13
 800274a:	f001 fb16 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800274e:	200d      	movs	r0, #13
 8002750:	f001 fb2d 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	200e      	movs	r0, #14
 800275a:	f001 fb0e 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800275e:	200e      	movs	r0, #14
 8002760:	f001 fb25 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	200f      	movs	r0, #15
 800276a:	f001 fb06 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800276e:	200f      	movs	r0, #15
 8002770:	f001 fb1d 	bl	8003dae <HAL_NVIC_EnableIRQ>

}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	58024400 	.word	0x58024400

08002780 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002786:	f107 031c 	add.w	r3, r7, #28
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002796:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 8002798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279c:	4a8c      	ldr	r2, [pc, #560]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 800279e:	f043 0310 	orr.w	r3, r3, #16
 80027a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a6:	4b8a      	ldr	r3, [pc, #552]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ba:	4a85      	ldr	r2, [pc, #532]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027c4:	4b82      	ldr	r3, [pc, #520]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027d2:	4b7f      	ldr	r3, [pc, #508]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d8:	4a7d      	ldr	r2, [pc, #500]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e2:	4b7b      	ldr	r3, [pc, #492]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f0:	4b77      	ldr	r3, [pc, #476]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f6:	4a76      	ldr	r2, [pc, #472]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002800:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 8002802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 8002810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002814:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281e:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002832:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800284a:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	4a5f      	ldr	r2, [pc, #380]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 8002852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <_ZL12MX_GPIO_Initv+0x250>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002868:	2200      	movs	r2, #0
 800286a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800286e:	4859      	ldr	r0, [pc, #356]	; (80029d4 <_ZL12MX_GPIO_Initv+0x254>)
 8002870:	f003 ff82 	bl	8006778 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	f24c 0102 	movw	r1, #49154	; 0xc002
 800287a:	4857      	ldr	r0, [pc, #348]	; (80029d8 <_ZL12MX_GPIO_Initv+0x258>)
 800287c:	f003 ff7c 	bl	8006778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002886:	4855      	ldr	r0, [pc, #340]	; (80029dc <_ZL12MX_GPIO_Initv+0x25c>)
 8002888:	f003 ff76 	bl	8006778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002892:	4853      	ldr	r0, [pc, #332]	; (80029e0 <_ZL12MX_GPIO_Initv+0x260>)
 8002894:	f003 ff70 	bl	8006778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289e:	4851      	ldr	r0, [pc, #324]	; (80029e4 <_ZL12MX_GPIO_Initv+0x264>)
 80028a0:	f003 ff6a 	bl	8006778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80028a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	4849      	ldr	r0, [pc, #292]	; (80029e0 <_ZL12MX_GPIO_Initv+0x260>)
 80028bc:	f003 fdac 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80028c0:	f644 2321 	movw	r3, #18977	; 0x4a21
 80028c4:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	483e      	ldr	r0, [pc, #248]	; (80029d4 <_ZL12MX_GPIO_Initv+0x254>)
 80028da:	f003 fd9d 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 80028de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	4838      	ldr	r0, [pc, #224]	; (80029d8 <_ZL12MX_GPIO_Initv+0x258>)
 80028f6:	f003 fd8f 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80028fa:	f24c 0302 	movw	r3, #49154	; 0xc002
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002900:	2301      	movs	r3, #1
 8002902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	4831      	ldr	r0, [pc, #196]	; (80029d8 <_ZL12MX_GPIO_Initv+0x258>)
 8002914:	f003 fd80 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	482a      	ldr	r0, [pc, #168]	; (80029dc <_ZL12MX_GPIO_Initv+0x25c>)
 8002932:	f003 fd71 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4824      	ldr	r0, [pc, #144]	; (80029e0 <_ZL12MX_GPIO_Initv+0x260>)
 8002950:	f003 fd62 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	2301      	movs	r3, #1
 800295c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	481d      	ldr	r0, [pc, #116]	; (80029e4 <_ZL12MX_GPIO_Initv+0x264>)
 800296e:	f003 fd53 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8002972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002978:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800297c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	4817      	ldr	r0, [pc, #92]	; (80029e8 <_ZL12MX_GPIO_Initv+0x268>)
 800298a:	f003 fd45 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 800298e:	23c0      	movs	r3, #192	; 0xc0
 8002990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002992:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	480c      	ldr	r0, [pc, #48]	; (80029d4 <_ZL12MX_GPIO_Initv+0x254>)
 80029a4:	f003 fd38 	bl	8006418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	2017      	movs	r0, #23
 80029ae:	f001 f9e4 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029b2:	2017      	movs	r0, #23
 80029b4:	f001 f9fb 	bl	8003dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	2028      	movs	r0, #40	; 0x28
 80029be:	f001 f9dc 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029c2:	2028      	movs	r0, #40	; 0x28
 80029c4:	f001 f9f3 	bl	8003dae <HAL_NVIC_EnableIRQ>

}
 80029c8:	bf00      	nop
 80029ca:	3730      	adds	r7, #48	; 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020400 	.word	0x58020400
 80029d8:	58021000 	.word	0x58021000
 80029dc:	58020c00 	.word	0x58020c00
 80029e0:	58020800 	.word	0x58020800
 80029e4:	58020000 	.word	0x58020000
 80029e8:	58021800 	.word	0x58021800

080029ec <HAL_GPIO_EXTI_Callback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]

}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4808      	ldr	r0, [pc, #32]	; (8002a30 <Error_Handler+0x2c>)
 8002a0e:	f003 feb3 	bl	8006778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2102      	movs	r1, #2
 8002a16:	4807      	ldr	r0, [pc, #28]	; (8002a34 <Error_Handler+0x30>)
 8002a18:	f003 feae 	bl	8006778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a22:	4803      	ldr	r0, [pc, #12]	; (8002a30 <Error_Handler+0x2c>)
 8002a24:	f003 fea8 	bl	8006778 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a2c:	e7fe      	b.n	8002a2c <Error_Handler+0x28>
 8002a2e:	bf00      	nop
 8002a30:	58020400 	.word	0x58020400
 8002a34:	58021000 	.word	0x58021000

08002a38 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 809b 	bne.w	8002b80 <_Z41__static_initialization_and_destruction_0ii+0x148>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a50:	4293      	cmp	r3, r2
 8002a52:	f040 8095 	bne.w	8002b80 <_Z41__static_initialization_and_destruction_0ii+0x148>
AMT21 encoderJ1(&huart4, 0xD4);
 8002a56:	22d4      	movs	r2, #212	; 0xd4
 8002a58:	4955      	ldr	r1, [pc, #340]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002a5a:	4856      	ldr	r0, [pc, #344]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8002a5c:	f7fd ffd0 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8002a60:	22c4      	movs	r2, #196	; 0xc4
 8002a62:	4953      	ldr	r1, [pc, #332]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002a64:	4854      	ldr	r0, [pc, #336]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8002a66:	f7fd ffcb 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	4953      	ldr	r1, [pc, #332]	; (8002bc0 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8002a74:	4853      	ldr	r0, [pc, #332]	; (8002bc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002a76:	f7fe f8b7 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8002a82:	2204      	movs	r2, #4
 8002a84:	4951      	ldr	r1, [pc, #324]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8002a86:	4852      	ldr	r0, [pc, #328]	; (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8002a88:	f7fe f8ae 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = 3.0*C0_q1 / Time*Time;
 8002a8c:	4b51      	ldr	r3, [pc, #324]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a96:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002a9a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aa8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002aba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = 2.0*C0_q1 / Time*Time*Time;
 8002ac4:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ace:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002adc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002ae0:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002af8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002afc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b00:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = 3.0*C0_q3 / Time*Time;
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b10:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002b14:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002b18:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b22:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8002b3a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = 2.0*C0_q3 / Time*Time*Time;
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b48:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002b4c:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8002b7c:	edc3 7a00 	vstr	s15, [r3]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d110      	bne.n	8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x170>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d10b      	bne.n	8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x170>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002b90:	480f      	ldr	r0, [pc, #60]	; (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8002b92:	f7fe f86b 	bl	8000c6c <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002b96:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002b98:	f7fe f868 	bl	8000c6c <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8002b9c:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8002b9e:	f7fd ff43 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002ba2:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8002ba4:	f7fd ff40 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	24000614 	.word	0x24000614
 8002bb4:	24000a1c 	.word	0x24000a1c
 8002bb8:	24000a30 	.word	0x24000a30
 8002bbc:	58020400 	.word	0x58020400
 8002bc0:	24000368 	.word	0x24000368
 8002bc4:	24000a44 	.word	0x24000a44
 8002bc8:	58021000 	.word	0x58021000
 8002bcc:	240005c8 	.word	0x240005c8
 8002bd0:	24000a6c 	.word	0x24000a6c
 8002bd4:	24000018 	.word	0x24000018
 8002bd8:	24000014 	.word	0x24000014
 8002bdc:	24000aec 	.word	0x24000aec
 8002be0:	24000af0 	.word	0x24000af0
 8002be4:	2400001c 	.word	0x2400001c
 8002be8:	24000af4 	.word	0x24000af4
 8002bec:	24000af8 	.word	0x24000af8

08002bf0 <_GLOBAL__sub_I_hcrc>:
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff ff1d 	bl	8002a38 <_Z41__static_initialization_and_destruction_0ii>
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_GLOBAL__sub_D_hcrc>:
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff ff15 	bl	8002a38 <_Z41__static_initialization_and_destruction_0ii>
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_MspInit+0x30>)
 8002c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c1c:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_MspInit+0x30>)
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_MspInit+0x30>)
 8002c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	58024400 	.word	0x58024400

08002c44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <HAL_CRC_MspInit+0x3c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10e      	bne.n	8002c74 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_CRC_MspInit+0x40>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5c:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_CRC_MspInit+0x40>)
 8002c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_CRC_MspInit+0x40>)
 8002c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	58024c00 	.word	0x58024c00
 8002c84:	58024400 	.word	0x58024400

08002c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0b8      	sub	sp, #224	; 0xe0
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	22bc      	movs	r2, #188	; 0xbc
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f009 ff05 	bl	800cab8 <memset>
  if(hspi->Instance==SPI3)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_SPI_MspInit+0xc0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d142      	bne.n	8002d3e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc2:	f107 0310 	add.w	r3, r7, #16
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 fd7c 	bl	80077c4 <HAL_RCCEx_PeriphCLKConfig>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002cd2:	f7ff fe97 	bl	8002a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_SPI_MspInit+0xc4>)
 8002cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_SPI_MspInit+0xc4>)
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_SPI_MspInit+0xc4>)
 8002ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_SPI_MspInit+0xc4>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_SPI_MspInit+0xc4>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_SPI_MspInit+0xc4>)
 8002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002d12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d2c:	2306      	movs	r3, #6
 8002d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d36:	4619      	mov	r1, r3
 8002d38:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_SPI_MspInit+0xc8>)
 8002d3a:	f003 fb6d 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d3e:	bf00      	nop
 8002d40:	37e0      	adds	r7, #224	; 0xe0
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40003c00 	.word	0x40003c00
 8002d4c:	58024400 	.word	0x58024400
 8002d50:	58020800 	.word	0x58020800

08002d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a8b      	ldr	r2, [pc, #556]	; (8002f90 <HAL_TIM_Base_MspInit+0x23c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10f      	bne.n	8002d86 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d66:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d6c:	4a89      	ldr	r2, [pc, #548]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d76:	4b87      	ldr	r3, [pc, #540]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002d84:	e100      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d10f      	bne.n	8002db0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d90:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d96:	4a7f      	ldr	r2, [pc, #508]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002da0:	4b7c      	ldr	r3, [pc, #496]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002dae:	e0eb      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a78      	ldr	r2, [pc, #480]	; (8002f98 <HAL_TIM_Base_MspInit+0x244>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10f      	bne.n	8002dda <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc0:	4a74      	ldr	r2, [pc, #464]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
 8002dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002dd8:	e0d6      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM4)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <HAL_TIM_Base_MspInit+0x248>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10f      	bne.n	8002e04 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002de4:	4b6b      	ldr	r3, [pc, #428]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dea:	4a6a      	ldr	r2, [pc, #424]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002df4:	4b67      	ldr	r3, [pc, #412]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e02:	e0c1      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM5)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <HAL_TIM_Base_MspInit+0x24c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d117      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e0e:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e14:	4a5f      	ldr	r2, [pc, #380]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	2032      	movs	r0, #50	; 0x32
 8002e32:	f000 ffa2 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e36:	2032      	movs	r0, #50	; 0x32
 8002e38:	f000 ffb9 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002e3c:	e0a4      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM6)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_TIM_Base_MspInit+0x250>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d117      	bne.n	8002e78 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e48:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4e:	4a51      	ldr	r2, [pc, #324]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e50:	f043 0310 	orr.w	r3, r3, #16
 8002e54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e58:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2036      	movs	r0, #54	; 0x36
 8002e6c:	f000 ff85 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e70:	2036      	movs	r0, #54	; 0x36
 8002e72:	f000 ff9c 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002e76:	e087      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM7)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4a      	ldr	r2, [pc, #296]	; (8002fa8 <HAL_TIM_Base_MspInit+0x254>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d117      	bne.n	8002eb2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e88:	4a42      	ldr	r2, [pc, #264]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e8a:	f043 0320 	orr.w	r3, r3, #32
 8002e8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e92:	4b40      	ldr	r3, [pc, #256]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2037      	movs	r0, #55	; 0x37
 8002ea6:	f000 ff68 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002eaa:	2037      	movs	r0, #55	; 0x37
 8002eac:	f000 ff7f 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002eb0:	e06a      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM12)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a3d      	ldr	r2, [pc, #244]	; (8002fac <HAL_TIM_Base_MspInit+0x258>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d117      	bne.n	8002eec <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ebc:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec2:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	202b      	movs	r0, #43	; 0x2b
 8002ee0:	f000 ff4b 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ee4:	202b      	movs	r0, #43	; 0x2b
 8002ee6:	f000 ff62 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002eea:	e04d      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM13)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2f      	ldr	r2, [pc, #188]	; (8002fb0 <HAL_TIM_Base_MspInit+0x25c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d117      	bne.n	8002f26 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	202c      	movs	r0, #44	; 0x2c
 8002f1a:	f000 ff2e 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002f1e:	202c      	movs	r0, #44	; 0x2c
 8002f20:	f000 ff45 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002f24:	e030      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM14)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_TIM_Base_MspInit+0x260>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d117      	bne.n	8002f60 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	202d      	movs	r0, #45	; 0x2d
 8002f54:	f000 ff11 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002f58:	202d      	movs	r0, #45	; 0x2d
 8002f5a:	f000 ff28 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002f5e:	e013      	b.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM15)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_TIM_Base_MspInit+0x264>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_TIM_Base_MspInit+0x240>)
 8002f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3738      	adds	r7, #56	; 0x38
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40010000 	.word	0x40010000
 8002f94:	58024400 	.word	0x58024400
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40001000 	.word	0x40001000
 8002fa8:	40001400 	.word	0x40001400
 8002fac:	40001800 	.word	0x40001800
 8002fb0:	40001c00 	.word	0x40001c00
 8002fb4:	40002000 	.word	0x40002000
 8002fb8:	40014000 	.word	0x40014000

08002fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	; 0x30
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5e      	ldr	r2, [pc, #376]	; (8003154 <HAL_TIM_MspPostInit+0x198>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d120      	bne.n	8003020 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fde:	4b5e      	ldr	r3, [pc, #376]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 8002fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe4:	4a5c      	ldr	r2, [pc, #368]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 8002fe6:	f043 0310 	orr.w	r3, r3, #16
 8002fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fee:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 8002ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800300e:	2301      	movs	r3, #1
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4619      	mov	r1, r3
 8003018:	4850      	ldr	r0, [pc, #320]	; (800315c <HAL_TIM_MspPostInit+0x1a0>)
 800301a:	f003 f9fd 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800301e:	e094      	b.n	800314a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d120      	bne.n	800306c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 800302c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003030:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 800303c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8003048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800304c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800305a:	2301      	movs	r3, #1
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	4619      	mov	r1, r3
 8003064:	483e      	ldr	r0, [pc, #248]	; (8003160 <HAL_TIM_MspPostInit+0x1a4>)
 8003066:	f003 f9d7 	bl	8006418 <HAL_GPIO_Init>
}
 800306a:	e06e      	b.n	800314a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <HAL_TIM_MspPostInit+0x1a8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d11f      	bne.n	80030b6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 8003078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307c:	4a36      	ldr	r2, [pc, #216]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 8003088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8003094:	2340      	movs	r3, #64	; 0x40
 8003096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030a4:	2302      	movs	r3, #2
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80030a8:	f107 031c 	add.w	r3, r7, #28
 80030ac:	4619      	mov	r1, r3
 80030ae:	482e      	ldr	r0, [pc, #184]	; (8003168 <HAL_TIM_MspPostInit+0x1ac>)
 80030b0:	f003 f9b2 	bl	8006418 <HAL_GPIO_Init>
}
 80030b4:	e049      	b.n	800314a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2c      	ldr	r2, [pc, #176]	; (800316c <HAL_TIM_MspPostInit+0x1b0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d120      	bne.n	8003102 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	4a24      	ldr	r2, [pc, #144]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 80030d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80030de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030f0:	2302      	movs	r3, #2
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	4619      	mov	r1, r3
 80030fa:	4819      	ldr	r0, [pc, #100]	; (8003160 <HAL_TIM_MspPostInit+0x1a4>)
 80030fc:	f003 f98c 	bl	8006418 <HAL_GPIO_Init>
}
 8003100:	e023      	b.n	800314a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_TIM_MspPostInit+0x1b4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d11e      	bne.n	800314a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_TIM_MspPostInit+0x19c>)
 800311e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800312a:	2340      	movs	r3, #64	; 0x40
 800312c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800313a:	2304      	movs	r3, #4
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	4619      	mov	r1, r3
 8003144:	4805      	ldr	r0, [pc, #20]	; (800315c <HAL_TIM_MspPostInit+0x1a0>)
 8003146:	f003 f967 	bl	8006418 <HAL_GPIO_Init>
}
 800314a:	bf00      	nop
 800314c:	3730      	adds	r7, #48	; 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40010000 	.word	0x40010000
 8003158:	58024400 	.word	0x58024400
 800315c:	58021000 	.word	0x58021000
 8003160:	58020400 	.word	0x58020400
 8003164:	40000400 	.word	0x40000400
 8003168:	58020000 	.word	0x58020000
 800316c:	40000800 	.word	0x40000800
 8003170:	40014000 	.word	0x40014000

08003174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0bc      	sub	sp, #240	; 0xf0
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800318c:	f107 0320 	add.w	r3, r7, #32
 8003190:	22bc      	movs	r2, #188	; 0xbc
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f009 fc8f 	bl	800cab8 <memset>
  if(huart->Instance==UART4)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4aa1      	ldr	r2, [pc, #644]	; (8003424 <HAL_UART_MspInit+0x2b0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f040 80b7 	bne.w	8003314 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031a6:	2302      	movs	r3, #2
 80031a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b0:	f107 0320 	add.w	r3, r7, #32
 80031b4:	4618      	mov	r0, r3
 80031b6:	f004 fb05 	bl	80077c4 <HAL_RCCEx_PeriphCLKConfig>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80031c0:	f7ff fc20 	bl	8002a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031c4:	4b98      	ldr	r3, [pc, #608]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 80031c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ca:	4a97      	ldr	r2, [pc, #604]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 80031cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031d4:	4b94      	ldr	r3, [pc, #592]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 80031d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e2:	4b91      	ldr	r3, [pc, #580]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	4a8f      	ldr	r2, [pc, #572]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f2:	4b8d      	ldr	r3, [pc, #564]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003200:	2303      	movs	r3, #3
 8003202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003218:	2308      	movs	r3, #8
 800321a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800321e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003222:	4619      	mov	r1, r3
 8003224:	4881      	ldr	r0, [pc, #516]	; (800342c <HAL_UART_MspInit+0x2b8>)
 8003226:	f003 f8f7 	bl	8006418 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800322a:	4b81      	ldr	r3, [pc, #516]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 800322c:	4a81      	ldr	r2, [pc, #516]	; (8003434 <HAL_UART_MspInit+0x2c0>)
 800322e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003230:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003232:	223f      	movs	r2, #63	; 0x3f
 8003234:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003236:	4b7e      	ldr	r3, [pc, #504]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800323c:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003242:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003248:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800324a:	4b79      	ldr	r3, [pc, #484]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 800324c:	2200      	movs	r2, #0
 800324e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003250:	4b77      	ldr	r3, [pc, #476]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003252:	2200      	movs	r2, #0
 8003254:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003256:	4b76      	ldr	r3, [pc, #472]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003258:	2200      	movs	r2, #0
 800325a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800325c:	4b74      	ldr	r3, [pc, #464]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 800325e:	2200      	movs	r2, #0
 8003260:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003264:	2204      	movs	r2, #4
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003268:	4b71      	ldr	r3, [pc, #452]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 800326a:	2203      	movs	r2, #3
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800326e:	4b70      	ldr	r3, [pc, #448]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003270:	2200      	movs	r2, #0
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003274:	4b6e      	ldr	r3, [pc, #440]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800327a:	486d      	ldr	r0, [pc, #436]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 800327c:	f000 fea8 	bl	8003fd0 <HAL_DMA_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003286:	f7ff fbbd 	bl	8002a04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a68      	ldr	r2, [pc, #416]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 800328e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003290:	4a67      	ldr	r2, [pc, #412]	; (8003430 <HAL_UART_MspInit+0x2bc>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003296:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 8003298:	4a68      	ldr	r2, [pc, #416]	; (800343c <HAL_UART_MspInit+0x2c8>)
 800329a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800329c:	4b66      	ldr	r3, [pc, #408]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 800329e:	2240      	movs	r2, #64	; 0x40
 80032a0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a2:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a8:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ae:	4b62      	ldr	r3, [pc, #392]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b6:	4b60      	ldr	r3, [pc, #384]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032bc:	4b5e      	ldr	r3, [pc, #376]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80032c2:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c8:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032ce:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032d0:	2204      	movs	r2, #4
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032d4:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032d6:	2203      	movs	r2, #3
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032dc:	2200      	movs	r2, #0
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80032e6:	4854      	ldr	r0, [pc, #336]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032e8:	f000 fe72 	bl	8003fd0 <HAL_DMA_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80032f2:	f7ff fb87 	bl	8002a04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032fa:	679a      	str	r2, [r3, #120]	; 0x78
 80032fc:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <HAL_UART_MspInit+0x2c4>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	2034      	movs	r0, #52	; 0x34
 8003308:	f000 fd37 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800330c:	2034      	movs	r0, #52	; 0x34
 800330e:	f000 fd4e 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003312:	e154      	b.n	80035be <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a49      	ldr	r2, [pc, #292]	; (8003440 <HAL_UART_MspInit+0x2cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	f040 8098 	bne.w	8003450 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003320:	2302      	movs	r3, #2
 8003322:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800332a:	f107 0320 	add.w	r3, r7, #32
 800332e:	4618      	mov	r0, r3
 8003330:	f004 fa48 	bl	80077c4 <HAL_RCCEx_PeriphCLKConfig>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800333a:	f7ff fb63 	bl	8002a04 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800333e:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 8003340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003344:	4a38      	ldr	r2, [pc, #224]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 8003346:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800334a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800334e:	4b36      	ldr	r3, [pc, #216]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 8003350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800335c:	4b32      	ldr	r3, [pc, #200]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 800335e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003362:	4a31      	ldr	r2, [pc, #196]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336c:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <HAL_UART_MspInit+0x2b4>)
 800336e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800337a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800337e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003394:	2307      	movs	r3, #7
 8003396:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800339a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800339e:	4619      	mov	r1, r3
 80033a0:	4828      	ldr	r0, [pc, #160]	; (8003444 <HAL_UART_MspInit+0x2d0>)
 80033a2:	f003 f839 	bl	8006418 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80033a6:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_UART_MspInit+0x2d8>)
 80033aa:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033ae:	2250      	movs	r2, #80	; 0x50
 80033b0:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b2:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c4:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033da:	2200      	movs	r2, #0
 80033dc:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033e0:	2204      	movs	r2, #4
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033e6:	2203      	movs	r2, #3
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80033ea:	4b17      	ldr	r3, [pc, #92]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80033f6:	4814      	ldr	r0, [pc, #80]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 80033f8:	f000 fdea 	bl	8003fd0 <HAL_DMA_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8003402:	f7ff faff 	bl	8002a04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 800340a:	679a      	str	r2, [r3, #120]	; 0x78
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_UART_MspInit+0x2d4>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2100      	movs	r1, #0
 8003416:	2052      	movs	r0, #82	; 0x52
 8003418:	f000 fcaf 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800341c:	2052      	movs	r0, #82	; 0x52
 800341e:	f000 fcc6 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8003422:	e0cc      	b.n	80035be <HAL_UART_MspInit+0x44a>
 8003424:	40004c00 	.word	0x40004c00
 8003428:	58024400 	.word	0x58024400
 800342c:	58020c00 	.word	0x58020c00
 8003430:	240007c4 	.word	0x240007c4
 8003434:	40020058 	.word	0x40020058
 8003438:	2400083c 	.word	0x2400083c
 800343c:	40020070 	.word	0x40020070
 8003440:	40007800 	.word	0x40007800
 8003444:	58021000 	.word	0x58021000
 8003448:	240008b4 	.word	0x240008b4
 800344c:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <HAL_UART_MspInit+0x454>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f040 80b1 	bne.w	80035be <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800345c:	2302      	movs	r3, #2
 800345e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003466:	f107 0320 	add.w	r3, r7, #32
 800346a:	4618      	mov	r0, r3
 800346c:	f004 f9aa 	bl	80077c4 <HAL_RCCEx_PeriphCLKConfig>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_UART_MspInit+0x306>
      Error_Handler();
 8003476:	f7ff fac5 	bl	8002a04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800347a:	4b54      	ldr	r3, [pc, #336]	; (80035cc <HAL_UART_MspInit+0x458>)
 800347c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003480:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_UART_MspInit+0x458>)
 8003482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003486:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800348a:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_UART_MspInit+0x458>)
 800348c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_UART_MspInit+0x458>)
 800349a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349e:	4a4b      	ldr	r2, [pc, #300]	; (80035cc <HAL_UART_MspInit+0x458>)
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a8:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_UART_MspInit+0x458>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034d0:	2307      	movs	r3, #7
 80034d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034da:	4619      	mov	r1, r3
 80034dc:	483c      	ldr	r0, [pc, #240]	; (80035d0 <HAL_UART_MspInit+0x45c>)
 80034de:	f002 ff9b 	bl	8006418 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80034e2:	4b3c      	ldr	r3, [pc, #240]	; (80035d4 <HAL_UART_MspInit+0x460>)
 80034e4:	4a3c      	ldr	r2, [pc, #240]	; (80035d8 <HAL_UART_MspInit+0x464>)
 80034e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80034e8:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <HAL_UART_MspInit+0x460>)
 80034ea:	222d      	movs	r2, #45	; 0x2d
 80034ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <HAL_UART_MspInit+0x460>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_UART_MspInit+0x460>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034fa:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_UART_MspInit+0x460>)
 80034fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003500:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003502:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_UART_MspInit+0x460>)
 8003504:	2200      	movs	r2, #0
 8003506:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003508:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <HAL_UART_MspInit+0x460>)
 800350a:	2200      	movs	r2, #0
 800350c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_UART_MspInit+0x460>)
 8003510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003514:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_UART_MspInit+0x460>)
 8003518:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800351c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_UART_MspInit+0x460>)
 8003520:	2200      	movs	r2, #0
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003524:	482b      	ldr	r0, [pc, #172]	; (80035d4 <HAL_UART_MspInit+0x460>)
 8003526:	f000 fd53 	bl	8003fd0 <HAL_DMA_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8003530:	f7ff fa68 	bl	8002a04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <HAL_UART_MspInit+0x460>)
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c
 800353a:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_UART_MspInit+0x460>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8003540:	4b26      	ldr	r3, [pc, #152]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003542:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <HAL_UART_MspInit+0x46c>)
 8003544:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003546:	4b25      	ldr	r3, [pc, #148]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003548:	222e      	movs	r2, #46	; 0x2e
 800354a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_UART_MspInit+0x468>)
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003558:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_UART_MspInit+0x468>)
 800355a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800355e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003562:	2200      	movs	r2, #0
 8003564:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_UART_MspInit+0x468>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003574:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003578:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_UART_MspInit+0x468>)
 800357c:	2204      	movs	r2, #4
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003582:	2203      	movs	r2, #3
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003588:	2200      	movs	r2, #0
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_UART_MspInit+0x468>)
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003592:	4812      	ldr	r0, [pc, #72]	; (80035dc <HAL_UART_MspInit+0x468>)
 8003594:	f000 fd1c 	bl	8003fd0 <HAL_DMA_Init>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 800359e:	f7ff fa31 	bl	8002a04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <HAL_UART_MspInit+0x468>)
 80035a6:	679a      	str	r2, [r3, #120]	; 0x78
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_UART_MspInit+0x468>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	2027      	movs	r0, #39	; 0x27
 80035b4:	f000 fbe1 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035b8:	2027      	movs	r0, #39	; 0x27
 80035ba:	f000 fbf8 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 80035be:	bf00      	nop
 80035c0:	37f0      	adds	r7, #240	; 0xf0
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40004800 	.word	0x40004800
 80035cc:	58024400 	.word	0x58024400
 80035d0:	58020c00 	.word	0x58020c00
 80035d4:	2400092c 	.word	0x2400092c
 80035d8:	40020028 	.word	0x40020028
 80035dc:	240009a4 	.word	0x240009a4
 80035e0:	40020040 	.word	0x40020040

080035e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e8:	e7fe      	b.n	80035e8 <NMI_Handler+0x4>

080035ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ee:	e7fe      	b.n	80035ee <HardFault_Handler+0x4>

080035f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f4:	e7fe      	b.n	80035f4 <MemManage_Handler+0x4>

080035f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035fa:	e7fe      	b.n	80035fa <BusFault_Handler+0x4>

080035fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003600:	e7fe      	b.n	8003600 <UsageFault_Handler+0x4>

08003602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003630:	f000 fa9c 	bl	8003b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003634:	f000 fbd5 	bl	8003de2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}

0800363c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA1_Stream0_IRQHandler+0x10>)
 8003642:	f001 fd83 	bl	800514c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	240008b4 	.word	0x240008b4

08003650 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Stream1_IRQHandler+0x10>)
 8003656:	f001 fd79 	bl	800514c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2400092c 	.word	0x2400092c

08003664 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <DMA1_Stream2_IRQHandler+0x10>)
 800366a:	f001 fd6f 	bl	800514c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	240009a4 	.word	0x240009a4

08003678 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <DMA1_Stream3_IRQHandler+0x10>)
 800367e:	f001 fd65 	bl	800514c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	240007c4 	.word	0x240007c4

0800368c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <DMA1_Stream4_IRQHandler+0x10>)
 8003692:	f001 fd5b 	bl	800514c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2400083c 	.word	0x2400083c

080036a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80036a4:	2040      	movs	r0, #64	; 0x40
 80036a6:	f003 f880 	bl	80067aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 80036aa:	2080      	movs	r0, #128	; 0x80
 80036ac:	f003 f87d 	bl	80067aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <USART3_IRQHandler+0x10>)
 80036ba:	f007 f9b1 	bl	800aa20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	24000734 	.word	0x24000734

080036c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 80036cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80036d0:	f003 f86b 	bl	80067aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 80036d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80036d8:	f003 f867 	bl	80067aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 80036dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80036e0:	f003 f863 	bl	80067aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80036e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036e8:	f003 f85f 	bl	80067aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80036f4:	4802      	ldr	r0, [pc, #8]	; (8003700 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80036f6:	f005 ff27 	bl	8009548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	240004e4 	.word	0x240004e4

08003704 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800370a:	f005 ff1d 	bl	8009548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	24000530 	.word	0x24000530

08003718 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800371e:	f005 ff13 	bl	8009548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	2400057c 	.word	0x2400057c

0800372c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003730:	4802      	ldr	r0, [pc, #8]	; (800373c <TIM5_IRQHandler+0x10>)
 8003732:	f005 ff09 	bl	8009548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	24000400 	.word	0x24000400

08003740 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <UART4_IRQHandler+0x10>)
 8003746:	f007 f96b 	bl	800aa20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	24000614 	.word	0x24000614

08003754 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <TIM6_DAC_IRQHandler+0x10>)
 800375a:	f005 fef5 	bl	8009548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2400044c 	.word	0x2400044c

08003768 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <TIM7_IRQHandler+0x10>)
 800376e:	f005 feeb 	bl	8009548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	24000498 	.word	0x24000498

0800377c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <UART7_IRQHandler+0x10>)
 8003782:	f007 f94d 	bl	800aa20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	240006a4 	.word	0x240006a4

08003790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
	return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_kill>:

int _kill(int pid, int sig)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037aa:	f009 f95b 	bl	800ca64 <__errno>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2216      	movs	r2, #22
 80037b2:	601a      	str	r2, [r3, #0]
	return -1;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_exit>:

void _exit (int status)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ffe7 	bl	80037a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037d2:	e7fe      	b.n	80037d2 <_exit+0x12>

080037d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e00a      	b.n	80037fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037e6:	f3af 8000 	nop.w
 80037ea:	4601      	mov	r1, r0
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	60ba      	str	r2, [r7, #8]
 80037f2:	b2ca      	uxtb	r2, r1
 80037f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3301      	adds	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	dbf0      	blt.n	80037e6 <_read+0x12>
	}

return len;
 8003804:	687b      	ldr	r3, [r7, #4]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e009      	b.n	8003834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	60ba      	str	r2, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	dbf1      	blt.n	8003820 <_write+0x12>
	}
	return len;
 800383c:	687b      	ldr	r3, [r7, #4]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_close>:

int _close(int file)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
	return -1;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800386e:	605a      	str	r2, [r3, #4]
	return 0;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <_isatty>:

int _isatty(int file)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	return 1;
 8003886:	2301      	movs	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
	return 0;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <_sbrk+0x5c>)
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <_sbrk+0x60>)
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <_sbrk+0x64>)
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <_sbrk+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d207      	bcs.n	80038f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e0:	f009 f8c0 	bl	800ca64 <__errno>
 80038e4:	4603      	mov	r3, r0
 80038e6:	220c      	movs	r2, #12
 80038e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e009      	b.n	8003904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <_sbrk+0x64>)
 8003900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	24001130 	.word	0x24001130
 8003910:	00000400 	.word	0x00000400
 8003914:	24000b0c 	.word	0x24000b0c
 8003918:	24000b30 	.word	0x24000b30

0800391c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003920:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <SystemInit+0xec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	4a38      	ldr	r2, [pc, #224]	; (8003a08 <SystemInit+0xec>)
 8003928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800392c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003930:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <SystemInit+0xf0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	2b06      	cmp	r3, #6
 800393a:	d807      	bhi.n	800394c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800393c:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <SystemInit+0xf0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 030f 	bic.w	r3, r3, #15
 8003944:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <SystemInit+0xf0>)
 8003946:	f043 0307 	orr.w	r3, r3, #7
 800394a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <SystemInit+0xf4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <SystemInit+0xf4>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003958:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <SystemInit+0xf4>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800395e:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <SystemInit+0xf4>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	492b      	ldr	r1, [pc, #172]	; (8003a10 <SystemInit+0xf4>)
 8003964:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <SystemInit+0xf8>)
 8003966:	4013      	ands	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <SystemInit+0xf0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003976:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <SystemInit+0xf0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 030f 	bic.w	r3, r3, #15
 800397e:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <SystemInit+0xf0>)
 8003980:	f043 0307 	orr.w	r3, r3, #7
 8003984:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <SystemInit+0xf4>)
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800398c:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <SystemInit+0xf4>)
 800398e:	2200      	movs	r2, #0
 8003990:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003992:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <SystemInit+0xf4>)
 8003994:	2200      	movs	r2, #0
 8003996:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <SystemInit+0xf4>)
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <SystemInit+0xfc>)
 800399c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800399e:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <SystemInit+0xf4>)
 80039a0:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <SystemInit+0x100>)
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039a4:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <SystemInit+0xf4>)
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <SystemInit+0x104>)
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <SystemInit+0xf4>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039b0:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <SystemInit+0xf4>)
 80039b2:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <SystemInit+0x104>)
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <SystemInit+0xf4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <SystemInit+0xf4>)
 80039be:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <SystemInit+0x104>)
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <SystemInit+0xf4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <SystemInit+0xf4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <SystemInit+0xf4>)
 80039ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <SystemInit+0xf4>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <SystemInit+0x108>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <SystemInit+0x10c>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e6:	d202      	bcs.n	80039ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <SystemInit+0x110>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <SystemInit+0x114>)
 80039f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80039f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SystemInit+0xec>)
 80039f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00
 8003a0c:	52002000 	.word	0x52002000
 8003a10:	58024400 	.word	0x58024400
 8003a14:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a18:	02020200 	.word	0x02020200
 8003a1c:	01ff0000 	.word	0x01ff0000
 8003a20:	01010280 	.word	0x01010280
 8003a24:	5c001000 	.word	0x5c001000
 8003a28:	ffff0000 	.word	0xffff0000
 8003a2c:	51008108 	.word	0x51008108
 8003a30:	52004000 	.word	0x52004000

08003a34 <Reset_Handler>:
 8003a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a6c <LoopFillZerobss+0xe>
 8003a38:	f7ff ff70 	bl	800391c <SystemInit>
 8003a3c:	480c      	ldr	r0, [pc, #48]	; (8003a70 <LoopFillZerobss+0x12>)
 8003a3e:	490d      	ldr	r1, [pc, #52]	; (8003a74 <LoopFillZerobss+0x16>)
 8003a40:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <LoopFillZerobss+0x1a>)
 8003a42:	2300      	movs	r3, #0
 8003a44:	e002      	b.n	8003a4c <LoopCopyDataInit>

08003a46 <CopyDataInit>:
 8003a46:	58d4      	ldr	r4, [r2, r3]
 8003a48:	50c4      	str	r4, [r0, r3]
 8003a4a:	3304      	adds	r3, #4

08003a4c <LoopCopyDataInit>:
 8003a4c:	18c4      	adds	r4, r0, r3
 8003a4e:	428c      	cmp	r4, r1
 8003a50:	d3f9      	bcc.n	8003a46 <CopyDataInit>
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <LoopFillZerobss+0x1e>)
 8003a54:	4c0a      	ldr	r4, [pc, #40]	; (8003a80 <LoopFillZerobss+0x22>)
 8003a56:	2300      	movs	r3, #0
 8003a58:	e001      	b.n	8003a5e <LoopFillZerobss>

08003a5a <FillZerobss>:
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	3204      	adds	r2, #4

08003a5e <LoopFillZerobss>:
 8003a5e:	42a2      	cmp	r2, r4
 8003a60:	d3fb      	bcc.n	8003a5a <FillZerobss>
 8003a62:	f009 f805 	bl	800ca70 <__libc_init_array>
 8003a66:	f7fd fee1 	bl	800182c <main>
 8003a6a:	4770      	bx	lr
 8003a6c:	24001130 	.word	0x24001130
 8003a70:	24000000 	.word	0x24000000
 8003a74:	24000208 	.word	0x24000208
 8003a78:	0800f914 	.word	0x0800f914
 8003a7c:	24000208 	.word	0x24000208
 8003a80:	24000b2c 	.word	0x24000b2c

08003a84 <ADC3_IRQHandler>:
 8003a84:	e7fe      	b.n	8003a84 <ADC3_IRQHandler>
	...

08003a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a8e:	2003      	movs	r0, #3
 8003a90:	f000 f968 	bl	8003d64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a94:	f003 fcc0 	bl	8007418 <HAL_RCC_GetSysClockFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_Init+0x68>)
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4913      	ldr	r1, [pc, #76]	; (8003af4 <HAL_Init+0x6c>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_Init+0x68>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <HAL_Init+0x6c>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_Init+0x70>)
 8003aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <HAL_Init+0x74>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f000 f814 	bl	8003b00 <HAL_InitTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e002      	b.n	8003ae8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae2:	f7ff f895 	bl	8002c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	58024400 	.word	0x58024400
 8003af4:	0800f360 	.word	0x0800f360
 8003af8:	2400002c 	.word	0x2400002c
 8003afc:	24000028 	.word	0x24000028

08003b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <HAL_InitTick+0x60>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e021      	b.n	8003b58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <HAL_InitTick+0x64>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_InitTick+0x60>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f94d 	bl	8003dca <HAL_SYSTICK_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00e      	b.n	8003b58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d80a      	bhi.n	8003b56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b40:	2200      	movs	r2, #0
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f000 f917 	bl	8003d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b4c:	4a06      	ldr	r2, [pc, #24]	; (8003b68 <HAL_InitTick+0x68>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	24000034 	.word	0x24000034
 8003b64:	24000028 	.word	0x24000028
 8003b68:	24000030 	.word	0x24000030

08003b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_IncTick+0x20>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_IncTick+0x24>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_IncTick+0x24>)
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	24000034 	.word	0x24000034
 8003b90:	24000b18 	.word	0x24000b18

08003b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return uwTick;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_GetTick+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	24000b18 	.word	0x24000b18

08003bac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_GetREVID+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	5c001000 	.word	0x5c001000

08003bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <__NVIC_SetPriorityGrouping+0x40>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x40>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00
 8003c08:	05fa0000 	.word	0x05fa0000

08003c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	; (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	; (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d30:	d301      	bcc.n	8003d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <SysTick_Config+0x40>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3e:	210f      	movs	r1, #15
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f7ff ff8e 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <SysTick_Config+0x40>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SysTick_Config+0x40>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff29 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d88:	f7ff ff40 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff90 	bl	8003cb8 <NVIC_EncodePriority>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5f 	bl	8003c64 <__NVIC_SetPriority>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff33 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffa4 	bl	8003d20 <SysTick_Config>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003de6:	f000 f802 	bl	8003dee <HAL_SYSTICK_Callback>
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e054      	b.n	8003eb8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7f5b      	ldrb	r3, [r3, #29]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe ff10 	bl	8002c44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	791b      	ldrb	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10c      	bne.n	8003e4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <HAL_CRC_Init+0xc4>)
 8003e38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0218 	bic.w	r2, r2, #24
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	e00c      	b.n	8003e66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f834 	bl	8003ec4 <HAL_CRCEx_Polynomial_Set>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e028      	b.n	8003eb8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	795b      	ldrb	r3, [r3, #5]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f04f 32ff 	mov.w	r2, #4294967295
 8003e76:	611a      	str	r2, [r3, #16]
 8003e78:	e004      	b.n	8003e84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6912      	ldr	r2, [r2, #16]
 8003e82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	04c11db7 	.word	0x04c11db7

08003ec4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003ed4:	231f      	movs	r3, #31
 8003ed6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003ed8:	bf00      	nop
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1e5a      	subs	r2, r3, #1
 8003ede:	613a      	str	r2, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <HAL_CRCEx_Polynomial_Set+0x34>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_CRCEx_Polynomial_Set+0x16>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b18      	cmp	r3, #24
 8003efc:	d846      	bhi.n	8003f8c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f93 	.word	0x08003f93
 8003f08:	08003f8d 	.word	0x08003f8d
 8003f0c:	08003f8d 	.word	0x08003f8d
 8003f10:	08003f8d 	.word	0x08003f8d
 8003f14:	08003f8d 	.word	0x08003f8d
 8003f18:	08003f8d 	.word	0x08003f8d
 8003f1c:	08003f8d 	.word	0x08003f8d
 8003f20:	08003f8d 	.word	0x08003f8d
 8003f24:	08003f81 	.word	0x08003f81
 8003f28:	08003f8d 	.word	0x08003f8d
 8003f2c:	08003f8d 	.word	0x08003f8d
 8003f30:	08003f8d 	.word	0x08003f8d
 8003f34:	08003f8d 	.word	0x08003f8d
 8003f38:	08003f8d 	.word	0x08003f8d
 8003f3c:	08003f8d 	.word	0x08003f8d
 8003f40:	08003f8d 	.word	0x08003f8d
 8003f44:	08003f75 	.word	0x08003f75
 8003f48:	08003f8d 	.word	0x08003f8d
 8003f4c:	08003f8d 	.word	0x08003f8d
 8003f50:	08003f8d 	.word	0x08003f8d
 8003f54:	08003f8d 	.word	0x08003f8d
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003f69 	.word	0x08003f69
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	d913      	bls.n	8003f96 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f72:	e010      	b.n	8003f96 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b07      	cmp	r3, #7
 8003f78:	d90f      	bls.n	8003f9a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f7e:	e00c      	b.n	8003f9a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	d90b      	bls.n	8003f9e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f8a:	e008      	b.n	8003f9e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f90:	e006      	b.n	8003fa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f92:	bf00      	nop
 8003f94:	e004      	b.n	8003fa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f96:	bf00      	nop
 8003f98:	e002      	b.n	8003fa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f9e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 0118 	bic.w	r1, r3, #24
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7ff fddc 	bl	8003b94 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e316      	b.n	8004616 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a66      	ldr	r2, [pc, #408]	; (8004188 <HAL_DMA_Init+0x1b8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d04a      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_DMA_Init+0x1bc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d045      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a63      	ldr	r2, [pc, #396]	; (8004190 <HAL_DMA_Init+0x1c0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d040      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a62      	ldr	r2, [pc, #392]	; (8004194 <HAL_DMA_Init+0x1c4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d03b      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_DMA_Init+0x1c8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d036      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5f      	ldr	r2, [pc, #380]	; (800419c <HAL_DMA_Init+0x1cc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d031      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <HAL_DMA_Init+0x1d0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d02c      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5c      	ldr	r2, [pc, #368]	; (80041a4 <HAL_DMA_Init+0x1d4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d027      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <HAL_DMA_Init+0x1d8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d022      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a59      	ldr	r2, [pc, #356]	; (80041ac <HAL_DMA_Init+0x1dc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d01d      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a57      	ldr	r2, [pc, #348]	; (80041b0 <HAL_DMA_Init+0x1e0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d018      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a56      	ldr	r2, [pc, #344]	; (80041b4 <HAL_DMA_Init+0x1e4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_DMA_Init+0x1e8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a53      	ldr	r2, [pc, #332]	; (80041bc <HAL_DMA_Init+0x1ec>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a51      	ldr	r2, [pc, #324]	; (80041c0 <HAL_DMA_Init+0x1f0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_DMA_Init+0xb8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a50      	ldr	r2, [pc, #320]	; (80041c4 <HAL_DMA_Init+0x1f4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_DMA_Init+0xbc>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_DMA_Init+0xbe>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 813b 	beq.w	800430a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a37      	ldr	r2, [pc, #220]	; (8004188 <HAL_DMA_Init+0x1b8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d04a      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a36      	ldr	r2, [pc, #216]	; (800418c <HAL_DMA_Init+0x1bc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d045      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a34      	ldr	r2, [pc, #208]	; (8004190 <HAL_DMA_Init+0x1c0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d040      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a33      	ldr	r2, [pc, #204]	; (8004194 <HAL_DMA_Init+0x1c4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d03b      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a31      	ldr	r2, [pc, #196]	; (8004198 <HAL_DMA_Init+0x1c8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d036      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a30      	ldr	r2, [pc, #192]	; (800419c <HAL_DMA_Init+0x1cc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d031      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <HAL_DMA_Init+0x1d0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d02c      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <HAL_DMA_Init+0x1d4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d027      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2b      	ldr	r2, [pc, #172]	; (80041a8 <HAL_DMA_Init+0x1d8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d022      	beq.n	8004144 <HAL_DMA_Init+0x174>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <HAL_DMA_Init+0x1dc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d01d      	beq.n	8004144 <HAL_DMA_Init+0x174>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <HAL_DMA_Init+0x1e0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d018      	beq.n	8004144 <HAL_DMA_Init+0x174>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <HAL_DMA_Init+0x1e4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <HAL_DMA_Init+0x174>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a25      	ldr	r2, [pc, #148]	; (80041b8 <HAL_DMA_Init+0x1e8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00e      	beq.n	8004144 <HAL_DMA_Init+0x174>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a24      	ldr	r2, [pc, #144]	; (80041bc <HAL_DMA_Init+0x1ec>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_DMA_Init+0x174>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_DMA_Init+0x1f0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_DMA_Init+0x174>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <HAL_DMA_Init+0x1f4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d108      	bne.n	8004156 <HAL_DMA_Init+0x186>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e007      	b.n	8004166 <HAL_DMA_Init+0x196>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004166:	e02f      	b.n	80041c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004168:	f7ff fd14 	bl	8003b94 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b05      	cmp	r3, #5
 8004174:	d928      	bls.n	80041c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2203      	movs	r2, #3
 8004180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e246      	b.n	8004616 <HAL_DMA_Init+0x646>
 8004188:	40020010 	.word	0x40020010
 800418c:	40020028 	.word	0x40020028
 8004190:	40020040 	.word	0x40020040
 8004194:	40020058 	.word	0x40020058
 8004198:	40020070 	.word	0x40020070
 800419c:	40020088 	.word	0x40020088
 80041a0:	400200a0 	.word	0x400200a0
 80041a4:	400200b8 	.word	0x400200b8
 80041a8:	40020410 	.word	0x40020410
 80041ac:	40020428 	.word	0x40020428
 80041b0:	40020440 	.word	0x40020440
 80041b4:	40020458 	.word	0x40020458
 80041b8:	40020470 	.word	0x40020470
 80041bc:	40020488 	.word	0x40020488
 80041c0:	400204a0 	.word	0x400204a0
 80041c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1c8      	bne.n	8004168 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4b83      	ldr	r3, [pc, #524]	; (80043f0 <HAL_DMA_Init+0x420>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004206:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b04      	cmp	r3, #4
 800421a:	d107      	bne.n	800422c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4313      	orrs	r3, r2
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800422c:	4b71      	ldr	r3, [pc, #452]	; (80043f4 <HAL_DMA_Init+0x424>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b71      	ldr	r3, [pc, #452]	; (80043f8 <HAL_DMA_Init+0x428>)
 8004232:	4013      	ands	r3, r2
 8004234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004238:	d328      	bcc.n	800428c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b28      	cmp	r3, #40	; 0x28
 8004240:	d903      	bls.n	800424a <HAL_DMA_Init+0x27a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b2e      	cmp	r3, #46	; 0x2e
 8004248:	d917      	bls.n	800427a <HAL_DMA_Init+0x2aa>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b3e      	cmp	r3, #62	; 0x3e
 8004250:	d903      	bls.n	800425a <HAL_DMA_Init+0x28a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b42      	cmp	r3, #66	; 0x42
 8004258:	d90f      	bls.n	800427a <HAL_DMA_Init+0x2aa>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b46      	cmp	r3, #70	; 0x46
 8004260:	d903      	bls.n	800426a <HAL_DMA_Init+0x29a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b48      	cmp	r3, #72	; 0x48
 8004268:	d907      	bls.n	800427a <HAL_DMA_Init+0x2aa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b4e      	cmp	r3, #78	; 0x4e
 8004270:	d905      	bls.n	800427e <HAL_DMA_Init+0x2ae>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b52      	cmp	r3, #82	; 0x52
 8004278:	d801      	bhi.n	800427e <HAL_DMA_Init+0x2ae>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_DMA_Init+0x2b0>
 800427e:	2300      	movs	r3, #0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d117      	bne.n	80042e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f001 ff1b 	bl	8006104 <DMA_CheckFifoParam>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2240      	movs	r2, #64	; 0x40
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e197      	b.n	8004616 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f001 fe56 	bl	8005fa0 <DMA_CalcBaseAndBitshift>
 80042f4:	4603      	mov	r3, r0
 80042f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	223f      	movs	r2, #63	; 0x3f
 8004302:	409a      	lsls	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e0cd      	b.n	80044a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3b      	ldr	r2, [pc, #236]	; (80043fc <HAL_DMA_Init+0x42c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d022      	beq.n	800435a <HAL_DMA_Init+0x38a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a39      	ldr	r2, [pc, #228]	; (8004400 <HAL_DMA_Init+0x430>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01d      	beq.n	800435a <HAL_DMA_Init+0x38a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a38      	ldr	r2, [pc, #224]	; (8004404 <HAL_DMA_Init+0x434>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d018      	beq.n	800435a <HAL_DMA_Init+0x38a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a36      	ldr	r2, [pc, #216]	; (8004408 <HAL_DMA_Init+0x438>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_DMA_Init+0x38a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a35      	ldr	r2, [pc, #212]	; (800440c <HAL_DMA_Init+0x43c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00e      	beq.n	800435a <HAL_DMA_Init+0x38a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a33      	ldr	r2, [pc, #204]	; (8004410 <HAL_DMA_Init+0x440>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_DMA_Init+0x38a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a32      	ldr	r2, [pc, #200]	; (8004414 <HAL_DMA_Init+0x444>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_DMA_Init+0x38a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <HAL_DMA_Init+0x448>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_DMA_Init+0x38e>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_DMA_Init+0x390>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8097 	beq.w	8004494 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_DMA_Init+0x42c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d021      	beq.n	80043b4 <HAL_DMA_Init+0x3e4>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_DMA_Init+0x430>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01c      	beq.n	80043b4 <HAL_DMA_Init+0x3e4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a21      	ldr	r2, [pc, #132]	; (8004404 <HAL_DMA_Init+0x434>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d017      	beq.n	80043b4 <HAL_DMA_Init+0x3e4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <HAL_DMA_Init+0x438>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d012      	beq.n	80043b4 <HAL_DMA_Init+0x3e4>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_DMA_Init+0x43c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00d      	beq.n	80043b4 <HAL_DMA_Init+0x3e4>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <HAL_DMA_Init+0x440>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d008      	beq.n	80043b4 <HAL_DMA_Init+0x3e4>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_DMA_Init+0x444>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <HAL_DMA_Init+0x3e4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <HAL_DMA_Init+0x448>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_DMA_Init+0x44c>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d020      	beq.n	8004420 <HAL_DMA_Init+0x450>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d102      	bne.n	80043ec <HAL_DMA_Init+0x41c>
 80043e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043ea:	e01a      	b.n	8004422 <HAL_DMA_Init+0x452>
 80043ec:	2300      	movs	r3, #0
 80043ee:	e018      	b.n	8004422 <HAL_DMA_Init+0x452>
 80043f0:	fe10803f 	.word	0xfe10803f
 80043f4:	5c001000 	.word	0x5c001000
 80043f8:	ffff0000 	.word	0xffff0000
 80043fc:	58025408 	.word	0x58025408
 8004400:	5802541c 	.word	0x5802541c
 8004404:	58025430 	.word	0x58025430
 8004408:	58025444 	.word	0x58025444
 800440c:	58025458 	.word	0x58025458
 8004410:	5802546c 	.word	0x5802546c
 8004414:	58025480 	.word	0x58025480
 8004418:	58025494 	.word	0x58025494
 800441c:	fffe000f 	.word	0xfffe000f
 8004420:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68d2      	ldr	r2, [r2, #12]
 8004426:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004450:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_DMA_Init+0x650>)
 8004468:	4413      	add	r3, r2
 800446a:	4a6e      	ldr	r2, [pc, #440]	; (8004624 <HAL_DMA_Init+0x654>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	009a      	lsls	r2, r3, #2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f001 fd91 	bl	8005fa0 <DMA_CalcBaseAndBitshift>
 800447e:	4603      	mov	r3, r0
 8004480:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2201      	movs	r2, #1
 800448c:	409a      	lsls	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	e008      	b.n	80044a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0b7      	b.n	8004616 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5f      	ldr	r2, [pc, #380]	; (8004628 <HAL_DMA_Init+0x658>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d072      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a5d      	ldr	r2, [pc, #372]	; (800462c <HAL_DMA_Init+0x65c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d06d      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a5c      	ldr	r2, [pc, #368]	; (8004630 <HAL_DMA_Init+0x660>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d068      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a5a      	ldr	r2, [pc, #360]	; (8004634 <HAL_DMA_Init+0x664>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d063      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a59      	ldr	r2, [pc, #356]	; (8004638 <HAL_DMA_Init+0x668>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d05e      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a57      	ldr	r2, [pc, #348]	; (800463c <HAL_DMA_Init+0x66c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d059      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a56      	ldr	r2, [pc, #344]	; (8004640 <HAL_DMA_Init+0x670>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d054      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a54      	ldr	r2, [pc, #336]	; (8004644 <HAL_DMA_Init+0x674>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d04f      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a53      	ldr	r2, [pc, #332]	; (8004648 <HAL_DMA_Init+0x678>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d04a      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a51      	ldr	r2, [pc, #324]	; (800464c <HAL_DMA_Init+0x67c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d045      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a50      	ldr	r2, [pc, #320]	; (8004650 <HAL_DMA_Init+0x680>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d040      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a4e      	ldr	r2, [pc, #312]	; (8004654 <HAL_DMA_Init+0x684>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d03b      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a4d      	ldr	r2, [pc, #308]	; (8004658 <HAL_DMA_Init+0x688>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d036      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a4b      	ldr	r2, [pc, #300]	; (800465c <HAL_DMA_Init+0x68c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d031      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a4a      	ldr	r2, [pc, #296]	; (8004660 <HAL_DMA_Init+0x690>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d02c      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a48      	ldr	r2, [pc, #288]	; (8004664 <HAL_DMA_Init+0x694>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d027      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a47      	ldr	r2, [pc, #284]	; (8004668 <HAL_DMA_Init+0x698>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d022      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a45      	ldr	r2, [pc, #276]	; (800466c <HAL_DMA_Init+0x69c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01d      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a44      	ldr	r2, [pc, #272]	; (8004670 <HAL_DMA_Init+0x6a0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d018      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a42      	ldr	r2, [pc, #264]	; (8004674 <HAL_DMA_Init+0x6a4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a41      	ldr	r2, [pc, #260]	; (8004678 <HAL_DMA_Init+0x6a8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00e      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3f      	ldr	r2, [pc, #252]	; (800467c <HAL_DMA_Init+0x6ac>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3e      	ldr	r2, [pc, #248]	; (8004680 <HAL_DMA_Init+0x6b0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_DMA_Init+0x5c6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a3c      	ldr	r2, [pc, #240]	; (8004684 <HAL_DMA_Init+0x6b4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <HAL_DMA_Init+0x5ca>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_DMA_Init+0x5cc>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d032      	beq.n	8004606 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f001 fe2b 	bl	80061fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d102      	bne.n	80045b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_DMA_Init+0x624>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d80c      	bhi.n	80045f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f001 fea8 	bl	8006330 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	e008      	b.n	8004606 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	a7fdabf8 	.word	0xa7fdabf8
 8004624:	cccccccd 	.word	0xcccccccd
 8004628:	40020010 	.word	0x40020010
 800462c:	40020028 	.word	0x40020028
 8004630:	40020040 	.word	0x40020040
 8004634:	40020058 	.word	0x40020058
 8004638:	40020070 	.word	0x40020070
 800463c:	40020088 	.word	0x40020088
 8004640:	400200a0 	.word	0x400200a0
 8004644:	400200b8 	.word	0x400200b8
 8004648:	40020410 	.word	0x40020410
 800464c:	40020428 	.word	0x40020428
 8004650:	40020440 	.word	0x40020440
 8004654:	40020458 	.word	0x40020458
 8004658:	40020470 	.word	0x40020470
 800465c:	40020488 	.word	0x40020488
 8004660:	400204a0 	.word	0x400204a0
 8004664:	400204b8 	.word	0x400204b8
 8004668:	58025408 	.word	0x58025408
 800466c:	5802541c 	.word	0x5802541c
 8004670:	58025430 	.word	0x58025430
 8004674:	58025444 	.word	0x58025444
 8004678:	58025458 	.word	0x58025458
 800467c:	5802546c 	.word	0x5802546c
 8004680:	58025480 	.word	0x58025480
 8004684:	58025494 	.word	0x58025494

08004688 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004690:	f7ff fa80 	bl	8003b94 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e2dc      	b.n	8004c5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d008      	beq.n	80046be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e2cd      	b.n	8004c5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a76      	ldr	r2, [pc, #472]	; (800489c <HAL_DMA_Abort+0x214>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d04a      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a74      	ldr	r2, [pc, #464]	; (80048a0 <HAL_DMA_Abort+0x218>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d045      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a73      	ldr	r2, [pc, #460]	; (80048a4 <HAL_DMA_Abort+0x21c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d040      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a71      	ldr	r2, [pc, #452]	; (80048a8 <HAL_DMA_Abort+0x220>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d03b      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a70      	ldr	r2, [pc, #448]	; (80048ac <HAL_DMA_Abort+0x224>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d036      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a6e      	ldr	r2, [pc, #440]	; (80048b0 <HAL_DMA_Abort+0x228>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d031      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6d      	ldr	r2, [pc, #436]	; (80048b4 <HAL_DMA_Abort+0x22c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d02c      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a6b      	ldr	r2, [pc, #428]	; (80048b8 <HAL_DMA_Abort+0x230>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d027      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6a      	ldr	r2, [pc, #424]	; (80048bc <HAL_DMA_Abort+0x234>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d022      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a68      	ldr	r2, [pc, #416]	; (80048c0 <HAL_DMA_Abort+0x238>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01d      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a67      	ldr	r2, [pc, #412]	; (80048c4 <HAL_DMA_Abort+0x23c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d018      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_DMA_Abort+0x240>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a64      	ldr	r2, [pc, #400]	; (80048cc <HAL_DMA_Abort+0x244>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a62      	ldr	r2, [pc, #392]	; (80048d0 <HAL_DMA_Abort+0x248>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a61      	ldr	r2, [pc, #388]	; (80048d4 <HAL_DMA_Abort+0x24c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_DMA_Abort+0xd6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a5f      	ldr	r2, [pc, #380]	; (80048d8 <HAL_DMA_Abort+0x250>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_DMA_Abort+0xda>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_DMA_Abort+0xdc>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 021e 	bic.w	r2, r2, #30
 8004776:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004786:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e00a      	b.n	80047a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 020e 	bic.w	r2, r2, #14
 800479e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a3c      	ldr	r2, [pc, #240]	; (800489c <HAL_DMA_Abort+0x214>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d072      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a3a      	ldr	r2, [pc, #232]	; (80048a0 <HAL_DMA_Abort+0x218>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d06d      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <HAL_DMA_Abort+0x21c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d068      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a37      	ldr	r2, [pc, #220]	; (80048a8 <HAL_DMA_Abort+0x220>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d063      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a36      	ldr	r2, [pc, #216]	; (80048ac <HAL_DMA_Abort+0x224>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d05e      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a34      	ldr	r2, [pc, #208]	; (80048b0 <HAL_DMA_Abort+0x228>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d059      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a33      	ldr	r2, [pc, #204]	; (80048b4 <HAL_DMA_Abort+0x22c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d054      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a31      	ldr	r2, [pc, #196]	; (80048b8 <HAL_DMA_Abort+0x230>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d04f      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a30      	ldr	r2, [pc, #192]	; (80048bc <HAL_DMA_Abort+0x234>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d04a      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2e      	ldr	r2, [pc, #184]	; (80048c0 <HAL_DMA_Abort+0x238>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d045      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2d      	ldr	r2, [pc, #180]	; (80048c4 <HAL_DMA_Abort+0x23c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d040      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a2b      	ldr	r2, [pc, #172]	; (80048c8 <HAL_DMA_Abort+0x240>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d03b      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <HAL_DMA_Abort+0x244>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d036      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a28      	ldr	r2, [pc, #160]	; (80048d0 <HAL_DMA_Abort+0x248>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d031      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a27      	ldr	r2, [pc, #156]	; (80048d4 <HAL_DMA_Abort+0x24c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d02c      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <HAL_DMA_Abort+0x250>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d027      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a24      	ldr	r2, [pc, #144]	; (80048dc <HAL_DMA_Abort+0x254>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <HAL_DMA_Abort+0x258>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <HAL_DMA_Abort+0x25c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <HAL_DMA_Abort+0x260>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_DMA_Abort+0x264>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_DMA_Abort+0x268>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_DMA_Abort+0x26c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_DMA_Abort+0x20e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_DMA_Abort+0x270>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d132      	bne.n	80048fc <HAL_DMA_Abort+0x274>
 8004896:	2301      	movs	r3, #1
 8004898:	e031      	b.n	80048fe <HAL_DMA_Abort+0x276>
 800489a:	bf00      	nop
 800489c:	40020010 	.word	0x40020010
 80048a0:	40020028 	.word	0x40020028
 80048a4:	40020040 	.word	0x40020040
 80048a8:	40020058 	.word	0x40020058
 80048ac:	40020070 	.word	0x40020070
 80048b0:	40020088 	.word	0x40020088
 80048b4:	400200a0 	.word	0x400200a0
 80048b8:	400200b8 	.word	0x400200b8
 80048bc:	40020410 	.word	0x40020410
 80048c0:	40020428 	.word	0x40020428
 80048c4:	40020440 	.word	0x40020440
 80048c8:	40020458 	.word	0x40020458
 80048cc:	40020470 	.word	0x40020470
 80048d0:	40020488 	.word	0x40020488
 80048d4:	400204a0 	.word	0x400204a0
 80048d8:	400204b8 	.word	0x400204b8
 80048dc:	58025408 	.word	0x58025408
 80048e0:	5802541c 	.word	0x5802541c
 80048e4:	58025430 	.word	0x58025430
 80048e8:	58025444 	.word	0x58025444
 80048ec:	58025458 	.word	0x58025458
 80048f0:	5802546c 	.word	0x5802546c
 80048f4:	58025480 	.word	0x58025480
 80048f8:	58025494 	.word	0x58025494
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004910:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a6d      	ldr	r2, [pc, #436]	; (8004acc <HAL_DMA_Abort+0x444>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d04a      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a6b      	ldr	r2, [pc, #428]	; (8004ad0 <HAL_DMA_Abort+0x448>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d045      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6a      	ldr	r2, [pc, #424]	; (8004ad4 <HAL_DMA_Abort+0x44c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d040      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a68      	ldr	r2, [pc, #416]	; (8004ad8 <HAL_DMA_Abort+0x450>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d03b      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a67      	ldr	r2, [pc, #412]	; (8004adc <HAL_DMA_Abort+0x454>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d036      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a65      	ldr	r2, [pc, #404]	; (8004ae0 <HAL_DMA_Abort+0x458>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d031      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a64      	ldr	r2, [pc, #400]	; (8004ae4 <HAL_DMA_Abort+0x45c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d02c      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a62      	ldr	r2, [pc, #392]	; (8004ae8 <HAL_DMA_Abort+0x460>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d027      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a61      	ldr	r2, [pc, #388]	; (8004aec <HAL_DMA_Abort+0x464>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d022      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a5f      	ldr	r2, [pc, #380]	; (8004af0 <HAL_DMA_Abort+0x468>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01d      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a5e      	ldr	r2, [pc, #376]	; (8004af4 <HAL_DMA_Abort+0x46c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d018      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5c      	ldr	r2, [pc, #368]	; (8004af8 <HAL_DMA_Abort+0x470>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a5b      	ldr	r2, [pc, #364]	; (8004afc <HAL_DMA_Abort+0x474>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00e      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a59      	ldr	r2, [pc, #356]	; (8004b00 <HAL_DMA_Abort+0x478>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d009      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a58      	ldr	r2, [pc, #352]	; (8004b04 <HAL_DMA_Abort+0x47c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d004      	beq.n	80049b2 <HAL_DMA_Abort+0x32a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a56      	ldr	r2, [pc, #344]	; (8004b08 <HAL_DMA_Abort+0x480>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d108      	bne.n	80049c4 <HAL_DMA_Abort+0x33c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e007      	b.n	80049d4 <HAL_DMA_Abort+0x34c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049d4:	e013      	b.n	80049fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049d6:	f7ff f8dd 	bl	8003b94 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d90c      	bls.n	80049fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2203      	movs	r2, #3
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e12d      	b.n	8004c5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <HAL_DMA_Abort+0x444>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d04a      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2d      	ldr	r2, [pc, #180]	; (8004ad0 <HAL_DMA_Abort+0x448>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d045      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2c      	ldr	r2, [pc, #176]	; (8004ad4 <HAL_DMA_Abort+0x44c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d040      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <HAL_DMA_Abort+0x450>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d03b      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a29      	ldr	r2, [pc, #164]	; (8004adc <HAL_DMA_Abort+0x454>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d036      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_DMA_Abort+0x458>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d031      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_DMA_Abort+0x45c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d02c      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <HAL_DMA_Abort+0x460>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d027      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a23      	ldr	r2, [pc, #140]	; (8004aec <HAL_DMA_Abort+0x464>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d022      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <HAL_DMA_Abort+0x468>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01d      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a20      	ldr	r2, [pc, #128]	; (8004af4 <HAL_DMA_Abort+0x46c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d018      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <HAL_DMA_Abort+0x470>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1d      	ldr	r2, [pc, #116]	; (8004afc <HAL_DMA_Abort+0x474>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_DMA_Abort+0x478>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <HAL_DMA_Abort+0x47c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_DMA_Abort+0x422>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_DMA_Abort+0x480>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_DMA_Abort+0x426>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <HAL_DMA_Abort+0x428>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02b      	beq.n	8004b0c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	223f      	movs	r2, #63	; 0x3f
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	e02a      	b.n	8004b22 <HAL_DMA_Abort+0x49a>
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a4f      	ldr	r2, [pc, #316]	; (8004c64 <HAL_DMA_Abort+0x5dc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d072      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a4d      	ldr	r2, [pc, #308]	; (8004c68 <HAL_DMA_Abort+0x5e0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d06d      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a4c      	ldr	r2, [pc, #304]	; (8004c6c <HAL_DMA_Abort+0x5e4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d068      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a4a      	ldr	r2, [pc, #296]	; (8004c70 <HAL_DMA_Abort+0x5e8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d063      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a49      	ldr	r2, [pc, #292]	; (8004c74 <HAL_DMA_Abort+0x5ec>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d05e      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a47      	ldr	r2, [pc, #284]	; (8004c78 <HAL_DMA_Abort+0x5f0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d059      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a46      	ldr	r2, [pc, #280]	; (8004c7c <HAL_DMA_Abort+0x5f4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d054      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a44      	ldr	r2, [pc, #272]	; (8004c80 <HAL_DMA_Abort+0x5f8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d04f      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a43      	ldr	r2, [pc, #268]	; (8004c84 <HAL_DMA_Abort+0x5fc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d04a      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a41      	ldr	r2, [pc, #260]	; (8004c88 <HAL_DMA_Abort+0x600>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d045      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a40      	ldr	r2, [pc, #256]	; (8004c8c <HAL_DMA_Abort+0x604>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d040      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a3e      	ldr	r2, [pc, #248]	; (8004c90 <HAL_DMA_Abort+0x608>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d03b      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3d      	ldr	r2, [pc, #244]	; (8004c94 <HAL_DMA_Abort+0x60c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d036      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3b      	ldr	r2, [pc, #236]	; (8004c98 <HAL_DMA_Abort+0x610>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d031      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a3a      	ldr	r2, [pc, #232]	; (8004c9c <HAL_DMA_Abort+0x614>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d02c      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <HAL_DMA_Abort+0x618>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d027      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <HAL_DMA_Abort+0x61c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d022      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a35      	ldr	r2, [pc, #212]	; (8004ca8 <HAL_DMA_Abort+0x620>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01d      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a34      	ldr	r2, [pc, #208]	; (8004cac <HAL_DMA_Abort+0x624>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d018      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a32      	ldr	r2, [pc, #200]	; (8004cb0 <HAL_DMA_Abort+0x628>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a31      	ldr	r2, [pc, #196]	; (8004cb4 <HAL_DMA_Abort+0x62c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <HAL_DMA_Abort+0x630>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <HAL_DMA_Abort+0x634>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_DMA_Abort+0x58a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <HAL_DMA_Abort+0x638>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <HAL_DMA_Abort+0x58e>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_DMA_Abort+0x590>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d015      	beq.n	8004c48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40020010 	.word	0x40020010
 8004c68:	40020028 	.word	0x40020028
 8004c6c:	40020040 	.word	0x40020040
 8004c70:	40020058 	.word	0x40020058
 8004c74:	40020070 	.word	0x40020070
 8004c78:	40020088 	.word	0x40020088
 8004c7c:	400200a0 	.word	0x400200a0
 8004c80:	400200b8 	.word	0x400200b8
 8004c84:	40020410 	.word	0x40020410
 8004c88:	40020428 	.word	0x40020428
 8004c8c:	40020440 	.word	0x40020440
 8004c90:	40020458 	.word	0x40020458
 8004c94:	40020470 	.word	0x40020470
 8004c98:	40020488 	.word	0x40020488
 8004c9c:	400204a0 	.word	0x400204a0
 8004ca0:	400204b8 	.word	0x400204b8
 8004ca4:	58025408 	.word	0x58025408
 8004ca8:	5802541c 	.word	0x5802541c
 8004cac:	58025430 	.word	0x58025430
 8004cb0:	58025444 	.word	0x58025444
 8004cb4:	58025458 	.word	0x58025458
 8004cb8:	5802546c 	.word	0x5802546c
 8004cbc:	58025480 	.word	0x58025480
 8004cc0:	58025494 	.word	0x58025494

08004cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e205      	b.n	80050e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d004      	beq.n	8004cec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e1fa      	b.n	80050e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a8c      	ldr	r2, [pc, #560]	; (8004f24 <HAL_DMA_Abort_IT+0x260>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d04a      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a8b      	ldr	r2, [pc, #556]	; (8004f28 <HAL_DMA_Abort_IT+0x264>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d045      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a89      	ldr	r2, [pc, #548]	; (8004f2c <HAL_DMA_Abort_IT+0x268>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d040      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a88      	ldr	r2, [pc, #544]	; (8004f30 <HAL_DMA_Abort_IT+0x26c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d03b      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a86      	ldr	r2, [pc, #536]	; (8004f34 <HAL_DMA_Abort_IT+0x270>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d036      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a85      	ldr	r2, [pc, #532]	; (8004f38 <HAL_DMA_Abort_IT+0x274>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d031      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a83      	ldr	r2, [pc, #524]	; (8004f3c <HAL_DMA_Abort_IT+0x278>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02c      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a82      	ldr	r2, [pc, #520]	; (8004f40 <HAL_DMA_Abort_IT+0x27c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d027      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a80      	ldr	r2, [pc, #512]	; (8004f44 <HAL_DMA_Abort_IT+0x280>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a7f      	ldr	r2, [pc, #508]	; (8004f48 <HAL_DMA_Abort_IT+0x284>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a7d      	ldr	r2, [pc, #500]	; (8004f4c <HAL_DMA_Abort_IT+0x288>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a7c      	ldr	r2, [pc, #496]	; (8004f50 <HAL_DMA_Abort_IT+0x28c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a7a      	ldr	r2, [pc, #488]	; (8004f54 <HAL_DMA_Abort_IT+0x290>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a79      	ldr	r2, [pc, #484]	; (8004f58 <HAL_DMA_Abort_IT+0x294>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a77      	ldr	r2, [pc, #476]	; (8004f5c <HAL_DMA_Abort_IT+0x298>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_DMA_Abort_IT+0xc8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a76      	ldr	r2, [pc, #472]	; (8004f60 <HAL_DMA_Abort_IT+0x29c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d101      	bne.n	8004d90 <HAL_DMA_Abort_IT+0xcc>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_DMA_Abort_IT+0xce>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d065      	beq.n	8004e62 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a60      	ldr	r2, [pc, #384]	; (8004f24 <HAL_DMA_Abort_IT+0x260>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d04a      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a5e      	ldr	r2, [pc, #376]	; (8004f28 <HAL_DMA_Abort_IT+0x264>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d045      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a5d      	ldr	r2, [pc, #372]	; (8004f2c <HAL_DMA_Abort_IT+0x268>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d040      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5b      	ldr	r2, [pc, #364]	; (8004f30 <HAL_DMA_Abort_IT+0x26c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d03b      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a5a      	ldr	r2, [pc, #360]	; (8004f34 <HAL_DMA_Abort_IT+0x270>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d036      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a58      	ldr	r2, [pc, #352]	; (8004f38 <HAL_DMA_Abort_IT+0x274>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d031      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a57      	ldr	r2, [pc, #348]	; (8004f3c <HAL_DMA_Abort_IT+0x278>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d02c      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a55      	ldr	r2, [pc, #340]	; (8004f40 <HAL_DMA_Abort_IT+0x27c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d027      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a54      	ldr	r2, [pc, #336]	; (8004f44 <HAL_DMA_Abort_IT+0x280>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <HAL_DMA_Abort_IT+0x284>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a51      	ldr	r2, [pc, #324]	; (8004f4c <HAL_DMA_Abort_IT+0x288>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a4f      	ldr	r2, [pc, #316]	; (8004f50 <HAL_DMA_Abort_IT+0x28c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a4e      	ldr	r2, [pc, #312]	; (8004f54 <HAL_DMA_Abort_IT+0x290>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a4c      	ldr	r2, [pc, #304]	; (8004f58 <HAL_DMA_Abort_IT+0x294>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a4b      	ldr	r2, [pc, #300]	; (8004f5c <HAL_DMA_Abort_IT+0x298>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_DMA_Abort_IT+0x17a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a49      	ldr	r2, [pc, #292]	; (8004f60 <HAL_DMA_Abort_IT+0x29c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d108      	bne.n	8004e50 <HAL_DMA_Abort_IT+0x18c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e147      	b.n	80050e0 <HAL_DMA_Abort_IT+0x41c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e13e      	b.n	80050e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 020e 	bic.w	r2, r2, #14
 8004e70:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <HAL_DMA_Abort_IT+0x260>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d04a      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a29      	ldr	r2, [pc, #164]	; (8004f28 <HAL_DMA_Abort_IT+0x264>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d045      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <HAL_DMA_Abort_IT+0x268>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d040      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <HAL_DMA_Abort_IT+0x26c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d03b      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <HAL_DMA_Abort_IT+0x270>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d036      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <HAL_DMA_Abort_IT+0x274>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d031      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_DMA_Abort_IT+0x278>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d02c      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <HAL_DMA_Abort_IT+0x27c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d027      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_DMA_Abort_IT+0x280>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1d      	ldr	r2, [pc, #116]	; (8004f48 <HAL_DMA_Abort_IT+0x284>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01d      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <HAL_DMA_Abort_IT+0x288>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <HAL_DMA_Abort_IT+0x28c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_DMA_Abort_IT+0x290>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_DMA_Abort_IT+0x294>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_DMA_Abort_IT+0x298>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x24e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <HAL_DMA_Abort_IT+0x29c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d128      	bne.n	8004f64 <HAL_DMA_Abort_IT+0x2a0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e027      	b.n	8004f74 <HAL_DMA_Abort_IT+0x2b0>
 8004f24:	40020010 	.word	0x40020010
 8004f28:	40020028 	.word	0x40020028
 8004f2c:	40020040 	.word	0x40020040
 8004f30:	40020058 	.word	0x40020058
 8004f34:	40020070 	.word	0x40020070
 8004f38:	40020088 	.word	0x40020088
 8004f3c:	400200a0 	.word	0x400200a0
 8004f40:	400200b8 	.word	0x400200b8
 8004f44:	40020410 	.word	0x40020410
 8004f48:	40020428 	.word	0x40020428
 8004f4c:	40020440 	.word	0x40020440
 8004f50:	40020458 	.word	0x40020458
 8004f54:	40020470 	.word	0x40020470
 8004f58:	40020488 	.word	0x40020488
 8004f5c:	400204a0 	.word	0x400204a0
 8004f60:	400204b8 	.word	0x400204b8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a5c      	ldr	r2, [pc, #368]	; (80050ec <HAL_DMA_Abort_IT+0x428>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d072      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a5b      	ldr	r2, [pc, #364]	; (80050f0 <HAL_DMA_Abort_IT+0x42c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d06d      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a59      	ldr	r2, [pc, #356]	; (80050f4 <HAL_DMA_Abort_IT+0x430>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d068      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <HAL_DMA_Abort_IT+0x434>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d063      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a56      	ldr	r2, [pc, #344]	; (80050fc <HAL_DMA_Abort_IT+0x438>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d05e      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a55      	ldr	r2, [pc, #340]	; (8005100 <HAL_DMA_Abort_IT+0x43c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d059      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a53      	ldr	r2, [pc, #332]	; (8005104 <HAL_DMA_Abort_IT+0x440>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d054      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a52      	ldr	r2, [pc, #328]	; (8005108 <HAL_DMA_Abort_IT+0x444>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d04f      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a50      	ldr	r2, [pc, #320]	; (800510c <HAL_DMA_Abort_IT+0x448>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d04a      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a4f      	ldr	r2, [pc, #316]	; (8005110 <HAL_DMA_Abort_IT+0x44c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d045      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a4d      	ldr	r2, [pc, #308]	; (8005114 <HAL_DMA_Abort_IT+0x450>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d040      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4c      	ldr	r2, [pc, #304]	; (8005118 <HAL_DMA_Abort_IT+0x454>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d03b      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a4a      	ldr	r2, [pc, #296]	; (800511c <HAL_DMA_Abort_IT+0x458>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d036      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a49      	ldr	r2, [pc, #292]	; (8005120 <HAL_DMA_Abort_IT+0x45c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d031      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a47      	ldr	r2, [pc, #284]	; (8005124 <HAL_DMA_Abort_IT+0x460>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d02c      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a46      	ldr	r2, [pc, #280]	; (8005128 <HAL_DMA_Abort_IT+0x464>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d027      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a44      	ldr	r2, [pc, #272]	; (800512c <HAL_DMA_Abort_IT+0x468>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d022      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a43      	ldr	r2, [pc, #268]	; (8005130 <HAL_DMA_Abort_IT+0x46c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d01d      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a41      	ldr	r2, [pc, #260]	; (8005134 <HAL_DMA_Abort_IT+0x470>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a40      	ldr	r2, [pc, #256]	; (8005138 <HAL_DMA_Abort_IT+0x474>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3e      	ldr	r2, [pc, #248]	; (800513c <HAL_DMA_Abort_IT+0x478>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3d      	ldr	r2, [pc, #244]	; (8005140 <HAL_DMA_Abort_IT+0x47c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3b      	ldr	r2, [pc, #236]	; (8005144 <HAL_DMA_Abort_IT+0x480>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_DMA_Abort_IT+0x3a0>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3a      	ldr	r2, [pc, #232]	; (8005148 <HAL_DMA_Abort_IT+0x484>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d101      	bne.n	8005068 <HAL_DMA_Abort_IT+0x3a4>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_DMA_Abort_IT+0x3a6>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d028      	beq.n	80050c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800507c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2201      	movs	r2, #1
 800508e:	409a      	lsls	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800509c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40020010 	.word	0x40020010
 80050f0:	40020028 	.word	0x40020028
 80050f4:	40020040 	.word	0x40020040
 80050f8:	40020058 	.word	0x40020058
 80050fc:	40020070 	.word	0x40020070
 8005100:	40020088 	.word	0x40020088
 8005104:	400200a0 	.word	0x400200a0
 8005108:	400200b8 	.word	0x400200b8
 800510c:	40020410 	.word	0x40020410
 8005110:	40020428 	.word	0x40020428
 8005114:	40020440 	.word	0x40020440
 8005118:	40020458 	.word	0x40020458
 800511c:	40020470 	.word	0x40020470
 8005120:	40020488 	.word	0x40020488
 8005124:	400204a0 	.word	0x400204a0
 8005128:	400204b8 	.word	0x400204b8
 800512c:	58025408 	.word	0x58025408
 8005130:	5802541c 	.word	0x5802541c
 8005134:	58025430 	.word	0x58025430
 8005138:	58025444 	.word	0x58025444
 800513c:	58025458 	.word	0x58025458
 8005140:	5802546c 	.word	0x5802546c
 8005144:	58025480 	.word	0x58025480
 8005148:	58025494 	.word	0x58025494

0800514c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005158:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_DMA_IRQHandler+0x1ac>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a67      	ldr	r2, [pc, #412]	; (80052fc <HAL_DMA_IRQHandler+0x1b0>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	0a9b      	lsrs	r3, r3, #10
 8005164:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005170:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a5f      	ldr	r2, [pc, #380]	; (8005300 <HAL_DMA_IRQHandler+0x1b4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d04a      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a5d      	ldr	r2, [pc, #372]	; (8005304 <HAL_DMA_IRQHandler+0x1b8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d045      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5c      	ldr	r2, [pc, #368]	; (8005308 <HAL_DMA_IRQHandler+0x1bc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d040      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a5a      	ldr	r2, [pc, #360]	; (800530c <HAL_DMA_IRQHandler+0x1c0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d03b      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a59      	ldr	r2, [pc, #356]	; (8005310 <HAL_DMA_IRQHandler+0x1c4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d036      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a57      	ldr	r2, [pc, #348]	; (8005314 <HAL_DMA_IRQHandler+0x1c8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d031      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a56      	ldr	r2, [pc, #344]	; (8005318 <HAL_DMA_IRQHandler+0x1cc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d02c      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a54      	ldr	r2, [pc, #336]	; (800531c <HAL_DMA_IRQHandler+0x1d0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d027      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a53      	ldr	r2, [pc, #332]	; (8005320 <HAL_DMA_IRQHandler+0x1d4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d022      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a51      	ldr	r2, [pc, #324]	; (8005324 <HAL_DMA_IRQHandler+0x1d8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01d      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a50      	ldr	r2, [pc, #320]	; (8005328 <HAL_DMA_IRQHandler+0x1dc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d018      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a4e      	ldr	r2, [pc, #312]	; (800532c <HAL_DMA_IRQHandler+0x1e0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a4d      	ldr	r2, [pc, #308]	; (8005330 <HAL_DMA_IRQHandler+0x1e4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a4b      	ldr	r2, [pc, #300]	; (8005334 <HAL_DMA_IRQHandler+0x1e8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d009      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <HAL_DMA_IRQHandler+0x1ec>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d004      	beq.n	800521e <HAL_DMA_IRQHandler+0xd2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a48      	ldr	r2, [pc, #288]	; (800533c <HAL_DMA_IRQHandler+0x1f0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <HAL_DMA_IRQHandler+0xd6>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <HAL_DMA_IRQHandler+0xd8>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 842b 	beq.w	8005a80 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2208      	movs	r2, #8
 8005234:	409a      	lsls	r2, r3
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80a2 	beq.w	8005384 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2e      	ldr	r2, [pc, #184]	; (8005300 <HAL_DMA_IRQHandler+0x1b4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d04a      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <HAL_DMA_IRQHandler+0x1b8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d045      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2b      	ldr	r2, [pc, #172]	; (8005308 <HAL_DMA_IRQHandler+0x1bc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d040      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2a      	ldr	r2, [pc, #168]	; (800530c <HAL_DMA_IRQHandler+0x1c0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d03b      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a28      	ldr	r2, [pc, #160]	; (8005310 <HAL_DMA_IRQHandler+0x1c4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d036      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a27      	ldr	r2, [pc, #156]	; (8005314 <HAL_DMA_IRQHandler+0x1c8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d031      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a25      	ldr	r2, [pc, #148]	; (8005318 <HAL_DMA_IRQHandler+0x1cc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02c      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a24      	ldr	r2, [pc, #144]	; (800531c <HAL_DMA_IRQHandler+0x1d0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d027      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a22      	ldr	r2, [pc, #136]	; (8005320 <HAL_DMA_IRQHandler+0x1d4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	; (8005324 <HAL_DMA_IRQHandler+0x1d8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d01d      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <HAL_DMA_IRQHandler+0x1dc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <HAL_DMA_IRQHandler+0x1e0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_DMA_IRQHandler+0x1e4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <HAL_DMA_IRQHandler+0x1e8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <HAL_DMA_IRQHandler+0x1ec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x194>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a18      	ldr	r2, [pc, #96]	; (800533c <HAL_DMA_IRQHandler+0x1f0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d12f      	bne.n	8005340 <HAL_DMA_IRQHandler+0x1f4>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	e02e      	b.n	8005354 <HAL_DMA_IRQHandler+0x208>
 80052f6:	bf00      	nop
 80052f8:	24000028 	.word	0x24000028
 80052fc:	1b4e81b5 	.word	0x1b4e81b5
 8005300:	40020010 	.word	0x40020010
 8005304:	40020028 	.word	0x40020028
 8005308:	40020040 	.word	0x40020040
 800530c:	40020058 	.word	0x40020058
 8005310:	40020070 	.word	0x40020070
 8005314:	40020088 	.word	0x40020088
 8005318:	400200a0 	.word	0x400200a0
 800531c:	400200b8 	.word	0x400200b8
 8005320:	40020410 	.word	0x40020410
 8005324:	40020428 	.word	0x40020428
 8005328:	40020440 	.word	0x40020440
 800532c:	40020458 	.word	0x40020458
 8005330:	40020470 	.word	0x40020470
 8005334:	40020488 	.word	0x40020488
 8005338:	400204a0 	.word	0x400204a0
 800533c:	400204b8 	.word	0x400204b8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0204 	bic.w	r2, r2, #4
 8005366:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2208      	movs	r2, #8
 8005372:	409a      	lsls	r2, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	f043 0201 	orr.w	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	fa22 f303 	lsr.w	r3, r2, r3
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d06e      	beq.n	8005478 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a69      	ldr	r2, [pc, #420]	; (8005544 <HAL_DMA_IRQHandler+0x3f8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d04a      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a67      	ldr	r2, [pc, #412]	; (8005548 <HAL_DMA_IRQHandler+0x3fc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d045      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a66      	ldr	r2, [pc, #408]	; (800554c <HAL_DMA_IRQHandler+0x400>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d040      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a64      	ldr	r2, [pc, #400]	; (8005550 <HAL_DMA_IRQHandler+0x404>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d03b      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a63      	ldr	r2, [pc, #396]	; (8005554 <HAL_DMA_IRQHandler+0x408>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d036      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a61      	ldr	r2, [pc, #388]	; (8005558 <HAL_DMA_IRQHandler+0x40c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d031      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a60      	ldr	r2, [pc, #384]	; (800555c <HAL_DMA_IRQHandler+0x410>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d02c      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a5e      	ldr	r2, [pc, #376]	; (8005560 <HAL_DMA_IRQHandler+0x414>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d027      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a5d      	ldr	r2, [pc, #372]	; (8005564 <HAL_DMA_IRQHandler+0x418>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d022      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a5b      	ldr	r2, [pc, #364]	; (8005568 <HAL_DMA_IRQHandler+0x41c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01d      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5a      	ldr	r2, [pc, #360]	; (800556c <HAL_DMA_IRQHandler+0x420>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d018      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a58      	ldr	r2, [pc, #352]	; (8005570 <HAL_DMA_IRQHandler+0x424>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a57      	ldr	r2, [pc, #348]	; (8005574 <HAL_DMA_IRQHandler+0x428>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a55      	ldr	r2, [pc, #340]	; (8005578 <HAL_DMA_IRQHandler+0x42c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a54      	ldr	r2, [pc, #336]	; (800557c <HAL_DMA_IRQHandler+0x430>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_DMA_IRQHandler+0x2ee>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a52      	ldr	r2, [pc, #328]	; (8005580 <HAL_DMA_IRQHandler+0x434>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10a      	bne.n	8005450 <HAL_DMA_IRQHandler+0x304>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e003      	b.n	8005458 <HAL_DMA_IRQHandler+0x30c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f043 0202 	orr.w	r2, r3, #2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2204      	movs	r2, #4
 8005482:	409a      	lsls	r2, r3
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 808f 	beq.w	80055ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a2c      	ldr	r2, [pc, #176]	; (8005544 <HAL_DMA_IRQHandler+0x3f8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04a      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <HAL_DMA_IRQHandler+0x3fc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d045      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a29      	ldr	r2, [pc, #164]	; (800554c <HAL_DMA_IRQHandler+0x400>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a27      	ldr	r2, [pc, #156]	; (8005550 <HAL_DMA_IRQHandler+0x404>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d03b      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a26      	ldr	r2, [pc, #152]	; (8005554 <HAL_DMA_IRQHandler+0x408>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d036      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a24      	ldr	r2, [pc, #144]	; (8005558 <HAL_DMA_IRQHandler+0x40c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d031      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a23      	ldr	r2, [pc, #140]	; (800555c <HAL_DMA_IRQHandler+0x410>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d02c      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a21      	ldr	r2, [pc, #132]	; (8005560 <HAL_DMA_IRQHandler+0x414>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d027      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a20      	ldr	r2, [pc, #128]	; (8005564 <HAL_DMA_IRQHandler+0x418>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <HAL_DMA_IRQHandler+0x41c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01d      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1d      	ldr	r2, [pc, #116]	; (800556c <HAL_DMA_IRQHandler+0x420>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <HAL_DMA_IRQHandler+0x424>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <HAL_DMA_IRQHandler+0x428>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a18      	ldr	r2, [pc, #96]	; (8005578 <HAL_DMA_IRQHandler+0x42c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a17      	ldr	r2, [pc, #92]	; (800557c <HAL_DMA_IRQHandler+0x430>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_DMA_IRQHandler+0x3e2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a15      	ldr	r2, [pc, #84]	; (8005580 <HAL_DMA_IRQHandler+0x434>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d12a      	bne.n	8005584 <HAL_DMA_IRQHandler+0x438>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e023      	b.n	800558c <HAL_DMA_IRQHandler+0x440>
 8005544:	40020010 	.word	0x40020010
 8005548:	40020028 	.word	0x40020028
 800554c:	40020040 	.word	0x40020040
 8005550:	40020058 	.word	0x40020058
 8005554:	40020070 	.word	0x40020070
 8005558:	40020088 	.word	0x40020088
 800555c:	400200a0 	.word	0x400200a0
 8005560:	400200b8 	.word	0x400200b8
 8005564:	40020410 	.word	0x40020410
 8005568:	40020428 	.word	0x40020428
 800556c:	40020440 	.word	0x40020440
 8005570:	40020458 	.word	0x40020458
 8005574:	40020470 	.word	0x40020470
 8005578:	40020488 	.word	0x40020488
 800557c:	400204a0 	.word	0x400204a0
 8005580:	400204b8 	.word	0x400204b8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2204      	movs	r2, #4
 800559a:	409a      	lsls	r2, r3
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	f043 0204 	orr.w	r2, r3, #4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2210      	movs	r2, #16
 80055b6:	409a      	lsls	r2, r3
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80a6 	beq.w	800570e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a85      	ldr	r2, [pc, #532]	; (80057dc <HAL_DMA_IRQHandler+0x690>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d04a      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a83      	ldr	r2, [pc, #524]	; (80057e0 <HAL_DMA_IRQHandler+0x694>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d045      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a82      	ldr	r2, [pc, #520]	; (80057e4 <HAL_DMA_IRQHandler+0x698>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d040      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a80      	ldr	r2, [pc, #512]	; (80057e8 <HAL_DMA_IRQHandler+0x69c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d03b      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a7f      	ldr	r2, [pc, #508]	; (80057ec <HAL_DMA_IRQHandler+0x6a0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d036      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a7d      	ldr	r2, [pc, #500]	; (80057f0 <HAL_DMA_IRQHandler+0x6a4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d031      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7c      	ldr	r2, [pc, #496]	; (80057f4 <HAL_DMA_IRQHandler+0x6a8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d02c      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a7a      	ldr	r2, [pc, #488]	; (80057f8 <HAL_DMA_IRQHandler+0x6ac>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d027      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a79      	ldr	r2, [pc, #484]	; (80057fc <HAL_DMA_IRQHandler+0x6b0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d022      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a77      	ldr	r2, [pc, #476]	; (8005800 <HAL_DMA_IRQHandler+0x6b4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a76      	ldr	r2, [pc, #472]	; (8005804 <HAL_DMA_IRQHandler+0x6b8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a74      	ldr	r2, [pc, #464]	; (8005808 <HAL_DMA_IRQHandler+0x6bc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a73      	ldr	r2, [pc, #460]	; (800580c <HAL_DMA_IRQHandler+0x6c0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a71      	ldr	r2, [pc, #452]	; (8005810 <HAL_DMA_IRQHandler+0x6c4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a70      	ldr	r2, [pc, #448]	; (8005814 <HAL_DMA_IRQHandler+0x6c8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_DMA_IRQHandler+0x516>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a6e      	ldr	r2, [pc, #440]	; (8005818 <HAL_DMA_IRQHandler+0x6cc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10a      	bne.n	8005678 <HAL_DMA_IRQHandler+0x52c>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	e009      	b.n	800568c <HAL_DMA_IRQHandler+0x540>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf14      	ite	ne
 8005686:	2301      	movne	r3, #1
 8005688:	2300      	moveq	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d03e      	beq.n	800570e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2210      	movs	r2, #16
 800569a:	409a      	lsls	r2, r3
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d024      	beq.n	800570e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
 80056cc:	e01f      	b.n	800570e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01b      	beq.n	800570e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
 80056de:	e016      	b.n	800570e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0208 	bic.w	r2, r2, #8
 80056fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2220      	movs	r2, #32
 8005718:	409a      	lsls	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8110 	beq.w	8005944 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <HAL_DMA_IRQHandler+0x690>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d04a      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <HAL_DMA_IRQHandler+0x694>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d045      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <HAL_DMA_IRQHandler+0x698>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d040      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <HAL_DMA_IRQHandler+0x69c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d03b      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <HAL_DMA_IRQHandler+0x6a0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d036      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <HAL_DMA_IRQHandler+0x6a4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d031      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a23      	ldr	r2, [pc, #140]	; (80057f4 <HAL_DMA_IRQHandler+0x6a8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d02c      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <HAL_DMA_IRQHandler+0x6ac>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d027      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a20      	ldr	r2, [pc, #128]	; (80057fc <HAL_DMA_IRQHandler+0x6b0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <HAL_DMA_IRQHandler+0x6b4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d01d      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_DMA_IRQHandler+0x6b8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_DMA_IRQHandler+0x6bc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1a      	ldr	r2, [pc, #104]	; (800580c <HAL_DMA_IRQHandler+0x6c0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_DMA_IRQHandler+0x6c4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a17      	ldr	r2, [pc, #92]	; (8005814 <HAL_DMA_IRQHandler+0x6c8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x678>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a16      	ldr	r2, [pc, #88]	; (8005818 <HAL_DMA_IRQHandler+0x6cc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d12b      	bne.n	800581c <HAL_DMA_IRQHandler+0x6d0>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bf14      	ite	ne
 80057d2:	2301      	movne	r3, #1
 80057d4:	2300      	moveq	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e02a      	b.n	8005830 <HAL_DMA_IRQHandler+0x6e4>
 80057da:	bf00      	nop
 80057dc:	40020010 	.word	0x40020010
 80057e0:	40020028 	.word	0x40020028
 80057e4:	40020040 	.word	0x40020040
 80057e8:	40020058 	.word	0x40020058
 80057ec:	40020070 	.word	0x40020070
 80057f0:	40020088 	.word	0x40020088
 80057f4:	400200a0 	.word	0x400200a0
 80057f8:	400200b8 	.word	0x400200b8
 80057fc:	40020410 	.word	0x40020410
 8005800:	40020428 	.word	0x40020428
 8005804:	40020440 	.word	0x40020440
 8005808:	40020458 	.word	0x40020458
 800580c:	40020470 	.word	0x40020470
 8005810:	40020488 	.word	0x40020488
 8005814:	400204a0 	.word	0x400204a0
 8005818:	400204b8 	.word	0x400204b8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf14      	ite	ne
 800582a:	2301      	movne	r3, #1
 800582c:	2300      	moveq	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8087 	beq.w	8005944 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2220      	movs	r2, #32
 8005840:	409a      	lsls	r2, r3
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b04      	cmp	r3, #4
 8005850:	d139      	bne.n	80058c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0216 	bic.w	r2, r2, #22
 8005860:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005870:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <HAL_DMA_IRQHandler+0x736>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0208 	bic.w	r2, r2, #8
 8005890:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	223f      	movs	r2, #63	; 0x3f
 800589c:	409a      	lsls	r2, r3
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 834a 	beq.w	8005f50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
          }
          return;
 80058c4:	e344      	b.n	8005f50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d02c      	beq.n	8005944 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
 80058f2:	e027      	b.n	8005944 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d023      	beq.n	8005944 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
 8005904:	e01e      	b.n	8005944 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10f      	bne.n	8005934 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0210 	bic.w	r2, r2, #16
 8005922:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8306 	beq.w	8005f5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8088 	beq.w	8005a6c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2204      	movs	r2, #4
 8005960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <HAL_DMA_IRQHandler+0xa08>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d04a      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a79      	ldr	r2, [pc, #484]	; (8005b58 <HAL_DMA_IRQHandler+0xa0c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d045      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a77      	ldr	r2, [pc, #476]	; (8005b5c <HAL_DMA_IRQHandler+0xa10>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d040      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a76      	ldr	r2, [pc, #472]	; (8005b60 <HAL_DMA_IRQHandler+0xa14>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d03b      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a74      	ldr	r2, [pc, #464]	; (8005b64 <HAL_DMA_IRQHandler+0xa18>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d036      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a73      	ldr	r2, [pc, #460]	; (8005b68 <HAL_DMA_IRQHandler+0xa1c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d031      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a71      	ldr	r2, [pc, #452]	; (8005b6c <HAL_DMA_IRQHandler+0xa20>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d02c      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a70      	ldr	r2, [pc, #448]	; (8005b70 <HAL_DMA_IRQHandler+0xa24>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d027      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6e      	ldr	r2, [pc, #440]	; (8005b74 <HAL_DMA_IRQHandler+0xa28>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d022      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a6d      	ldr	r2, [pc, #436]	; (8005b78 <HAL_DMA_IRQHandler+0xa2c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d01d      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a6b      	ldr	r2, [pc, #428]	; (8005b7c <HAL_DMA_IRQHandler+0xa30>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d018      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a6a      	ldr	r2, [pc, #424]	; (8005b80 <HAL_DMA_IRQHandler+0xa34>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a68      	ldr	r2, [pc, #416]	; (8005b84 <HAL_DMA_IRQHandler+0xa38>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a67      	ldr	r2, [pc, #412]	; (8005b88 <HAL_DMA_IRQHandler+0xa3c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a65      	ldr	r2, [pc, #404]	; (8005b8c <HAL_DMA_IRQHandler+0xa40>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x8b8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a64      	ldr	r2, [pc, #400]	; (8005b90 <HAL_DMA_IRQHandler+0xa44>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d108      	bne.n	8005a16 <HAL_DMA_IRQHandler+0x8ca>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e007      	b.n	8005a26 <HAL_DMA_IRQHandler+0x8da>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d307      	bcc.n	8005a42 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f2      	bne.n	8005a26 <HAL_DMA_IRQHandler+0x8da>
 8005a40:	e000      	b.n	8005a44 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a42:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a5a:	e003      	b.n	8005a64 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8272 	beq.w	8005f5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
 8005a7e:	e26c      	b.n	8005f5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a43      	ldr	r2, [pc, #268]	; (8005b94 <HAL_DMA_IRQHandler+0xa48>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d022      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x984>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a42      	ldr	r2, [pc, #264]	; (8005b98 <HAL_DMA_IRQHandler+0xa4c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d01d      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x984>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a40      	ldr	r2, [pc, #256]	; (8005b9c <HAL_DMA_IRQHandler+0xa50>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d018      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x984>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a3f      	ldr	r2, [pc, #252]	; (8005ba0 <HAL_DMA_IRQHandler+0xa54>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d013      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x984>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <HAL_DMA_IRQHandler+0xa58>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x984>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <HAL_DMA_IRQHandler+0xa5c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x984>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a3a      	ldr	r2, [pc, #232]	; (8005bac <HAL_DMA_IRQHandler+0xa60>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d004      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x984>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a39      	ldr	r2, [pc, #228]	; (8005bb0 <HAL_DMA_IRQHandler+0xa64>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d101      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x988>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <HAL_DMA_IRQHandler+0x98a>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 823f 	beq.w	8005f5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	2204      	movs	r2, #4
 8005aee:	409a      	lsls	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80cd 	beq.w	8005c94 <HAL_DMA_IRQHandler+0xb48>
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80c7 	beq.w	8005c94 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2204      	movs	r2, #4
 8005b10:	409a      	lsls	r2, r3
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d049      	beq.n	8005bb4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8210 	beq.w	8005f54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b3c:	e20a      	b.n	8005f54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8206 	beq.w	8005f54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b50:	e200      	b.n	8005f54 <HAL_DMA_IRQHandler+0xe08>
 8005b52:	bf00      	nop
 8005b54:	40020010 	.word	0x40020010
 8005b58:	40020028 	.word	0x40020028
 8005b5c:	40020040 	.word	0x40020040
 8005b60:	40020058 	.word	0x40020058
 8005b64:	40020070 	.word	0x40020070
 8005b68:	40020088 	.word	0x40020088
 8005b6c:	400200a0 	.word	0x400200a0
 8005b70:	400200b8 	.word	0x400200b8
 8005b74:	40020410 	.word	0x40020410
 8005b78:	40020428 	.word	0x40020428
 8005b7c:	40020440 	.word	0x40020440
 8005b80:	40020458 	.word	0x40020458
 8005b84:	40020470 	.word	0x40020470
 8005b88:	40020488 	.word	0x40020488
 8005b8c:	400204a0 	.word	0x400204a0
 8005b90:	400204b8 	.word	0x400204b8
 8005b94:	58025408 	.word	0x58025408
 8005b98:	5802541c 	.word	0x5802541c
 8005b9c:	58025430 	.word	0x58025430
 8005ba0:	58025444 	.word	0x58025444
 8005ba4:	58025458 	.word	0x58025458
 8005ba8:	5802546c 	.word	0x5802546c
 8005bac:	58025480 	.word	0x58025480
 8005bb0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d160      	bne.n	8005c80 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a8c      	ldr	r2, [pc, #560]	; (8005df4 <HAL_DMA_IRQHandler+0xca8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d04a      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a8a      	ldr	r2, [pc, #552]	; (8005df8 <HAL_DMA_IRQHandler+0xcac>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d045      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a89      	ldr	r2, [pc, #548]	; (8005dfc <HAL_DMA_IRQHandler+0xcb0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d040      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a87      	ldr	r2, [pc, #540]	; (8005e00 <HAL_DMA_IRQHandler+0xcb4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d03b      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a86      	ldr	r2, [pc, #536]	; (8005e04 <HAL_DMA_IRQHandler+0xcb8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d036      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a84      	ldr	r2, [pc, #528]	; (8005e08 <HAL_DMA_IRQHandler+0xcbc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d031      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a83      	ldr	r2, [pc, #524]	; (8005e0c <HAL_DMA_IRQHandler+0xcc0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d02c      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a81      	ldr	r2, [pc, #516]	; (8005e10 <HAL_DMA_IRQHandler+0xcc4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d027      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a80      	ldr	r2, [pc, #512]	; (8005e14 <HAL_DMA_IRQHandler+0xcc8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d022      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a7e      	ldr	r2, [pc, #504]	; (8005e18 <HAL_DMA_IRQHandler+0xccc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01d      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a7d      	ldr	r2, [pc, #500]	; (8005e1c <HAL_DMA_IRQHandler+0xcd0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d018      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a7b      	ldr	r2, [pc, #492]	; (8005e20 <HAL_DMA_IRQHandler+0xcd4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7a      	ldr	r2, [pc, #488]	; (8005e24 <HAL_DMA_IRQHandler+0xcd8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a78      	ldr	r2, [pc, #480]	; (8005e28 <HAL_DMA_IRQHandler+0xcdc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a77      	ldr	r2, [pc, #476]	; (8005e2c <HAL_DMA_IRQHandler+0xce0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xb12>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a75      	ldr	r2, [pc, #468]	; (8005e30 <HAL_DMA_IRQHandler+0xce4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <HAL_DMA_IRQHandler+0xb24>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0208 	bic.w	r2, r2, #8
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e007      	b.n	8005c80 <HAL_DMA_IRQHandler+0xb34>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0204 	bic.w	r2, r2, #4
 8005c7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8165 	beq.w	8005f54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c92:	e15f      	b.n	8005f54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c98:	f003 031f 	and.w	r3, r3, #31
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80c5 	beq.w	8005e34 <HAL_DMA_IRQHandler+0xce8>
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80bf 	beq.w	8005e34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d018      	beq.n	8005d02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 813a 	beq.w	8005f58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cec:	e134      	b.n	8005f58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8130 	beq.w	8005f58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d00:	e12a      	b.n	8005f58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d168      	bne.n	8005dde <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a38      	ldr	r2, [pc, #224]	; (8005df4 <HAL_DMA_IRQHandler+0xca8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d04a      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a37      	ldr	r2, [pc, #220]	; (8005df8 <HAL_DMA_IRQHandler+0xcac>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d045      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a35      	ldr	r2, [pc, #212]	; (8005dfc <HAL_DMA_IRQHandler+0xcb0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d040      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a34      	ldr	r2, [pc, #208]	; (8005e00 <HAL_DMA_IRQHandler+0xcb4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d03b      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a32      	ldr	r2, [pc, #200]	; (8005e04 <HAL_DMA_IRQHandler+0xcb8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d036      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a31      	ldr	r2, [pc, #196]	; (8005e08 <HAL_DMA_IRQHandler+0xcbc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d031      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <HAL_DMA_IRQHandler+0xcc0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d02c      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2e      	ldr	r2, [pc, #184]	; (8005e10 <HAL_DMA_IRQHandler+0xcc4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d027      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2c      	ldr	r2, [pc, #176]	; (8005e14 <HAL_DMA_IRQHandler+0xcc8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d022      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2b      	ldr	r2, [pc, #172]	; (8005e18 <HAL_DMA_IRQHandler+0xccc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d01d      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <HAL_DMA_IRQHandler+0xcd0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a28      	ldr	r2, [pc, #160]	; (8005e20 <HAL_DMA_IRQHandler+0xcd4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a26      	ldr	r2, [pc, #152]	; (8005e24 <HAL_DMA_IRQHandler+0xcd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a25      	ldr	r2, [pc, #148]	; (8005e28 <HAL_DMA_IRQHandler+0xcdc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <HAL_DMA_IRQHandler+0xce0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_DMA_IRQHandler+0xc60>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <HAL_DMA_IRQHandler+0xce4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <HAL_DMA_IRQHandler+0xc72>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0214 	bic.w	r2, r2, #20
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e007      	b.n	8005dce <HAL_DMA_IRQHandler+0xc82>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 020a 	bic.w	r2, r2, #10
 8005dcc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80b8 	beq.w	8005f58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005df0:	e0b2      	b.n	8005f58 <HAL_DMA_IRQHandler+0xe0c>
 8005df2:	bf00      	nop
 8005df4:	40020010 	.word	0x40020010
 8005df8:	40020028 	.word	0x40020028
 8005dfc:	40020040 	.word	0x40020040
 8005e00:	40020058 	.word	0x40020058
 8005e04:	40020070 	.word	0x40020070
 8005e08:	40020088 	.word	0x40020088
 8005e0c:	400200a0 	.word	0x400200a0
 8005e10:	400200b8 	.word	0x400200b8
 8005e14:	40020410 	.word	0x40020410
 8005e18:	40020428 	.word	0x40020428
 8005e1c:	40020440 	.word	0x40020440
 8005e20:	40020458 	.word	0x40020458
 8005e24:	40020470 	.word	0x40020470
 8005e28:	40020488 	.word	0x40020488
 8005e2c:	400204a0 	.word	0x400204a0
 8005e30:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8088 	beq.w	8005f5a <HAL_DMA_IRQHandler+0xe0e>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8082 	beq.w	8005f5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	; (8005f60 <HAL_DMA_IRQHandler+0xe14>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d04a      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <HAL_DMA_IRQHandler+0xe18>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d045      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a3e      	ldr	r2, [pc, #248]	; (8005f68 <HAL_DMA_IRQHandler+0xe1c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d040      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <HAL_DMA_IRQHandler+0xe20>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d03b      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3b      	ldr	r2, [pc, #236]	; (8005f70 <HAL_DMA_IRQHandler+0xe24>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d036      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a39      	ldr	r2, [pc, #228]	; (8005f74 <HAL_DMA_IRQHandler+0xe28>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d031      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a38      	ldr	r2, [pc, #224]	; (8005f78 <HAL_DMA_IRQHandler+0xe2c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d02c      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a36      	ldr	r2, [pc, #216]	; (8005f7c <HAL_DMA_IRQHandler+0xe30>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d027      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a35      	ldr	r2, [pc, #212]	; (8005f80 <HAL_DMA_IRQHandler+0xe34>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d022      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_DMA_IRQHandler+0xe38>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a32      	ldr	r2, [pc, #200]	; (8005f88 <HAL_DMA_IRQHandler+0xe3c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a30      	ldr	r2, [pc, #192]	; (8005f8c <HAL_DMA_IRQHandler+0xe40>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2f      	ldr	r2, [pc, #188]	; (8005f90 <HAL_DMA_IRQHandler+0xe44>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2d      	ldr	r2, [pc, #180]	; (8005f94 <HAL_DMA_IRQHandler+0xe48>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2c      	ldr	r2, [pc, #176]	; (8005f98 <HAL_DMA_IRQHandler+0xe4c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xdaa>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <HAL_DMA_IRQHandler+0xe50>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <HAL_DMA_IRQHandler+0xdbc>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 021c 	bic.w	r2, r2, #28
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e007      	b.n	8005f18 <HAL_DMA_IRQHandler+0xdcc>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 020e 	bic.w	r2, r2, #14
 8005f16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2201      	movs	r2, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
 8005f4e:	e004      	b.n	8005f5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f50:	bf00      	nop
 8005f52:	e002      	b.n	8005f5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f54:	bf00      	nop
 8005f56:	e000      	b.n	8005f5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f5a:	3728      	adds	r7, #40	; 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40020010 	.word	0x40020010
 8005f64:	40020028 	.word	0x40020028
 8005f68:	40020040 	.word	0x40020040
 8005f6c:	40020058 	.word	0x40020058
 8005f70:	40020070 	.word	0x40020070
 8005f74:	40020088 	.word	0x40020088
 8005f78:	400200a0 	.word	0x400200a0
 8005f7c:	400200b8 	.word	0x400200b8
 8005f80:	40020410 	.word	0x40020410
 8005f84:	40020428 	.word	0x40020428
 8005f88:	40020440 	.word	0x40020440
 8005f8c:	40020458 	.word	0x40020458
 8005f90:	40020470 	.word	0x40020470
 8005f94:	40020488 	.word	0x40020488
 8005f98:	400204a0 	.word	0x400204a0
 8005f9c:	400204b8 	.word	0x400204b8

08005fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a42      	ldr	r2, [pc, #264]	; (80060b8 <DMA_CalcBaseAndBitshift+0x118>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04a      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a41      	ldr	r2, [pc, #260]	; (80060bc <DMA_CalcBaseAndBitshift+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d045      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3f      	ldr	r2, [pc, #252]	; (80060c0 <DMA_CalcBaseAndBitshift+0x120>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d040      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3e      	ldr	r2, [pc, #248]	; (80060c4 <DMA_CalcBaseAndBitshift+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d03b      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <DMA_CalcBaseAndBitshift+0x128>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d036      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a3b      	ldr	r2, [pc, #236]	; (80060cc <DMA_CalcBaseAndBitshift+0x12c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d031      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a39      	ldr	r2, [pc, #228]	; (80060d0 <DMA_CalcBaseAndBitshift+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d02c      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <DMA_CalcBaseAndBitshift+0x134>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d027      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a36      	ldr	r2, [pc, #216]	; (80060d8 <DMA_CalcBaseAndBitshift+0x138>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d022      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a35      	ldr	r2, [pc, #212]	; (80060dc <DMA_CalcBaseAndBitshift+0x13c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d01d      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a33      	ldr	r2, [pc, #204]	; (80060e0 <DMA_CalcBaseAndBitshift+0x140>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a32      	ldr	r2, [pc, #200]	; (80060e4 <DMA_CalcBaseAndBitshift+0x144>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <DMA_CalcBaseAndBitshift+0x148>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2f      	ldr	r2, [pc, #188]	; (80060ec <DMA_CalcBaseAndBitshift+0x14c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <DMA_CalcBaseAndBitshift+0x150>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <DMA_CalcBaseAndBitshift+0x154>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d101      	bne.n	800604c <DMA_CalcBaseAndBitshift+0xac>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <DMA_CalcBaseAndBitshift+0xae>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d024      	beq.n	800609c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	3b10      	subs	r3, #16
 800605a:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <DMA_CalcBaseAndBitshift+0x158>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	4a24      	ldr	r2, [pc, #144]	; (80060fc <DMA_CalcBaseAndBitshift+0x15c>)
 800606c:	5cd3      	ldrb	r3, [r2, r3]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d908      	bls.n	800608c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <DMA_CalcBaseAndBitshift+0x160>)
 8006082:	4013      	ands	r3, r2
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	659a      	str	r2, [r3, #88]	; 0x58
 800608a:	e00d      	b.n	80060a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <DMA_CalcBaseAndBitshift+0x160>)
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6593      	str	r3, [r2, #88]	; 0x58
 800609a:	e005      	b.n	80060a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40020010 	.word	0x40020010
 80060bc:	40020028 	.word	0x40020028
 80060c0:	40020040 	.word	0x40020040
 80060c4:	40020058 	.word	0x40020058
 80060c8:	40020070 	.word	0x40020070
 80060cc:	40020088 	.word	0x40020088
 80060d0:	400200a0 	.word	0x400200a0
 80060d4:	400200b8 	.word	0x400200b8
 80060d8:	40020410 	.word	0x40020410
 80060dc:	40020428 	.word	0x40020428
 80060e0:	40020440 	.word	0x40020440
 80060e4:	40020458 	.word	0x40020458
 80060e8:	40020470 	.word	0x40020470
 80060ec:	40020488 	.word	0x40020488
 80060f0:	400204a0 	.word	0x400204a0
 80060f4:	400204b8 	.word	0x400204b8
 80060f8:	aaaaaaab 	.word	0xaaaaaaab
 80060fc:	0800f370 	.word	0x0800f370
 8006100:	fffffc00 	.word	0xfffffc00

08006104 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d120      	bne.n	800615a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	2b03      	cmp	r3, #3
 800611e:	d858      	bhi.n	80061d2 <DMA_CheckFifoParam+0xce>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <DMA_CheckFifoParam+0x24>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	08006139 	.word	0x08006139
 800612c:	0800614b 	.word	0x0800614b
 8006130:	08006139 	.word	0x08006139
 8006134:	080061d3 	.word	0x080061d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d048      	beq.n	80061d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006148:	e045      	b.n	80061d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006152:	d142      	bne.n	80061da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006158:	e03f      	b.n	80061da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	d123      	bne.n	80061ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	2b03      	cmp	r3, #3
 800616a:	d838      	bhi.n	80061de <DMA_CheckFifoParam+0xda>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <DMA_CheckFifoParam+0x70>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006185 	.word	0x08006185
 8006178:	0800618b 	.word	0x0800618b
 800617c:	08006185 	.word	0x08006185
 8006180:	0800619d 	.word	0x0800619d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
        break;
 8006188:	e030      	b.n	80061ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d025      	beq.n	80061e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800619a:	e022      	b.n	80061e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061a4:	d11f      	bne.n	80061e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061aa:	e01c      	b.n	80061e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d902      	bls.n	80061ba <DMA_CheckFifoParam+0xb6>
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d003      	beq.n	80061c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061b8:	e018      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
        break;
 80061be:	e015      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
    break;
 80061d0:	e00b      	b.n	80061ea <DMA_CheckFifoParam+0xe6>
        break;
 80061d2:	bf00      	nop
 80061d4:	e00a      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061d6:	bf00      	nop
 80061d8:	e008      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061da:	bf00      	nop
 80061dc:	e006      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061de:	bf00      	nop
 80061e0:	e004      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
    break;
 80061ea:	bf00      	nop
    }
  }

  return status;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop

080061fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a38      	ldr	r2, [pc, #224]	; (80062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a36      	ldr	r2, [pc, #216]	; (80062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01d      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a33      	ldr	r2, [pc, #204]	; (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a32      	ldr	r2, [pc, #200]	; (8006300 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a30      	ldr	r2, [pc, #192]	; (8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2f      	ldr	r2, [pc, #188]	; (8006308 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2d      	ldr	r2, [pc, #180]	; (800630c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01a      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	3b08      	subs	r3, #8
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4b26      	ldr	r3, [pc, #152]	; (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a24      	ldr	r2, [pc, #144]	; (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006288:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006298:	e024      	b.n	80062e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	3b10      	subs	r3, #16
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d806      	bhi.n	80062c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d902      	bls.n	80062c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3308      	adds	r3, #8
 80062c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4b18      	ldr	r3, [pc, #96]	; (8006328 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a16      	ldr	r2, [pc, #88]	; (800632c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2201      	movs	r2, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	58025408 	.word	0x58025408
 80062f4:	5802541c 	.word	0x5802541c
 80062f8:	58025430 	.word	0x58025430
 80062fc:	58025444 	.word	0x58025444
 8006300:	58025458 	.word	0x58025458
 8006304:	5802546c 	.word	0x5802546c
 8006308:	58025480 	.word	0x58025480
 800630c:	58025494 	.word	0x58025494
 8006310:	cccccccd 	.word	0xcccccccd
 8006314:	16009600 	.word	0x16009600
 8006318:	58025880 	.word	0x58025880
 800631c:	aaaaaaab 	.word	0xaaaaaaab
 8006320:	400204b8 	.word	0x400204b8
 8006324:	4002040f 	.word	0x4002040f
 8006328:	10008200 	.word	0x10008200
 800632c:	40020880 	.word	0x40020880

08006330 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d04a      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d847      	bhi.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a24      	ldr	r2, [pc, #144]	; (80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01d      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063b8:	671a      	str	r2, [r3, #112]	; 0x70
 80063ba:	e009      	b.n	80063d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4b14      	ldr	r3, [pc, #80]	; (8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	461a      	mov	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a11      	ldr	r2, [pc, #68]	; (8006414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	2201      	movs	r2, #1
 80063d6:	409a      	lsls	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	58025408 	.word	0x58025408
 80063ec:	5802541c 	.word	0x5802541c
 80063f0:	58025430 	.word	0x58025430
 80063f4:	58025444 	.word	0x58025444
 80063f8:	58025458 	.word	0x58025458
 80063fc:	5802546c 	.word	0x5802546c
 8006400:	58025480 	.word	0x58025480
 8006404:	58025494 	.word	0x58025494
 8006408:	1600963f 	.word	0x1600963f
 800640c:	58025940 	.word	0x58025940
 8006410:	1000823f 	.word	0x1000823f
 8006414:	40020940 	.word	0x40020940

08006418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006418:	b480      	push	{r7}
 800641a:	b089      	sub	sp, #36	; 0x24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006426:	4b89      	ldr	r3, [pc, #548]	; (800664c <HAL_GPIO_Init+0x234>)
 8006428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800642a:	e194      	b.n	8006756 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	2101      	movs	r1, #1
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	4013      	ands	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8186 	beq.w	8006750 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d005      	beq.n	800645c <HAL_GPIO_Init+0x44>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d130      	bne.n	80064be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	2203      	movs	r2, #3
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	43db      	mvns	r3, r3
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4013      	ands	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006492:	2201      	movs	r2, #1
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	f003 0201 	and.w	r2, r3, #1
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d017      	beq.n	80064fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	2203      	movs	r2, #3
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d123      	bne.n	800654e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	08da      	lsrs	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3208      	adds	r2, #8
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	220f      	movs	r2, #15
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4313      	orrs	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	08da      	lsrs	r2, r3, #3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3208      	adds	r2, #8
 8006548:	69b9      	ldr	r1, [r7, #24]
 800654a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	2203      	movs	r2, #3
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0203 	and.w	r2, r3, #3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 80e0 	beq.w	8006750 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006590:	4b2f      	ldr	r3, [pc, #188]	; (8006650 <HAL_GPIO_Init+0x238>)
 8006592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006596:	4a2e      	ldr	r2, [pc, #184]	; (8006650 <HAL_GPIO_Init+0x238>)
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80065a0:	4b2b      	ldr	r3, [pc, #172]	; (8006650 <HAL_GPIO_Init+0x238>)
 80065a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065ae:	4a29      	ldr	r2, [pc, #164]	; (8006654 <HAL_GPIO_Init+0x23c>)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	089b      	lsrs	r3, r3, #2
 80065b4:	3302      	adds	r3, #2
 80065b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	220f      	movs	r2, #15
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43db      	mvns	r3, r3
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4013      	ands	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <HAL_GPIO_Init+0x240>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d052      	beq.n	8006680 <HAL_GPIO_Init+0x268>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1f      	ldr	r2, [pc, #124]	; (800665c <HAL_GPIO_Init+0x244>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d031      	beq.n	8006646 <HAL_GPIO_Init+0x22e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <HAL_GPIO_Init+0x248>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d02b      	beq.n	8006642 <HAL_GPIO_Init+0x22a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_GPIO_Init+0x24c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d025      	beq.n	800663e <HAL_GPIO_Init+0x226>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <HAL_GPIO_Init+0x250>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01f      	beq.n	800663a <HAL_GPIO_Init+0x222>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1b      	ldr	r2, [pc, #108]	; (800666c <HAL_GPIO_Init+0x254>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d019      	beq.n	8006636 <HAL_GPIO_Init+0x21e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <HAL_GPIO_Init+0x258>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_GPIO_Init+0x21a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a19      	ldr	r2, [pc, #100]	; (8006674 <HAL_GPIO_Init+0x25c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00d      	beq.n	800662e <HAL_GPIO_Init+0x216>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a18      	ldr	r2, [pc, #96]	; (8006678 <HAL_GPIO_Init+0x260>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d007      	beq.n	800662a <HAL_GPIO_Init+0x212>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a17      	ldr	r2, [pc, #92]	; (800667c <HAL_GPIO_Init+0x264>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_GPIO_Init+0x20e>
 8006622:	2309      	movs	r3, #9
 8006624:	e02d      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006626:	230a      	movs	r3, #10
 8006628:	e02b      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800662a:	2308      	movs	r3, #8
 800662c:	e029      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800662e:	2307      	movs	r3, #7
 8006630:	e027      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006632:	2306      	movs	r3, #6
 8006634:	e025      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006636:	2305      	movs	r3, #5
 8006638:	e023      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800663a:	2304      	movs	r3, #4
 800663c:	e021      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800663e:	2303      	movs	r3, #3
 8006640:	e01f      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006642:	2302      	movs	r3, #2
 8006644:	e01d      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006646:	2301      	movs	r3, #1
 8006648:	e01b      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800664a:	bf00      	nop
 800664c:	58000080 	.word	0x58000080
 8006650:	58024400 	.word	0x58024400
 8006654:	58000400 	.word	0x58000400
 8006658:	58020000 	.word	0x58020000
 800665c:	58020400 	.word	0x58020400
 8006660:	58020800 	.word	0x58020800
 8006664:	58020c00 	.word	0x58020c00
 8006668:	58021000 	.word	0x58021000
 800666c:	58021400 	.word	0x58021400
 8006670:	58021800 	.word	0x58021800
 8006674:	58021c00 	.word	0x58021c00
 8006678:	58022000 	.word	0x58022000
 800667c:	58022400 	.word	0x58022400
 8006680:	2300      	movs	r3, #0
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	f002 0203 	and.w	r2, r2, #3
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	4093      	lsls	r3, r2
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	4313      	orrs	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006692:	4938      	ldr	r1, [pc, #224]	; (8006774 <HAL_GPIO_Init+0x35c>)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	3302      	adds	r3, #2
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	43db      	mvns	r3, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4013      	ands	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	43db      	mvns	r3, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4013      	ands	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	43db      	mvns	r3, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4013      	ands	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3301      	adds	r3, #1
 8006754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	fa22 f303 	lsr.w	r3, r2, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	f47f ae63 	bne.w	800642c <HAL_GPIO_Init+0x14>
  }
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	3724      	adds	r7, #36	; 0x24
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	58000400 	.word	0x58000400

08006778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
 8006784:	4613      	mov	r3, r2
 8006786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006788:	787b      	ldrb	r3, [r7, #1]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800678e:	887a      	ldrh	r2, [r7, #2]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006794:	e003      	b.n	800679e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006796:	887b      	ldrh	r3, [r7, #2]
 8006798:	041a      	lsls	r2, r3, #16
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	619a      	str	r2, [r3, #24]
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	4603      	mov	r3, r0
 80067b2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80067b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fc f90b 	bl	80029ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067e8:	4b19      	ldr	r3, [pc, #100]	; (8006850 <HAL_PWREx_ConfigSupply+0x70>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d00a      	beq.n	800680a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067f4:	4b16      	ldr	r3, [pc, #88]	; (8006850 <HAL_PWREx_ConfigSupply+0x70>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d001      	beq.n	8006806 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e01f      	b.n	8006846 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e01d      	b.n	8006846 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800680a:	4b11      	ldr	r3, [pc, #68]	; (8006850 <HAL_PWREx_ConfigSupply+0x70>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f023 0207 	bic.w	r2, r3, #7
 8006812:	490f      	ldr	r1, [pc, #60]	; (8006850 <HAL_PWREx_ConfigSupply+0x70>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4313      	orrs	r3, r2
 8006818:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800681a:	f7fd f9bb 	bl	8003b94 <HAL_GetTick>
 800681e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006820:	e009      	b.n	8006836 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006822:	f7fd f9b7 	bl	8003b94 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006830:	d901      	bls.n	8006836 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e007      	b.n	8006846 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006836:	4b06      	ldr	r3, [pc, #24]	; (8006850 <HAL_PWREx_ConfigSupply+0x70>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800683e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006842:	d1ee      	bne.n	8006822 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	58024800 	.word	0x58024800

08006854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08c      	sub	sp, #48	; 0x30
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f000 bc1c 	b.w	80070a0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8087 	beq.w	8006984 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006876:	4b9e      	ldr	r3, [pc, #632]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006880:	4b9b      	ldr	r3, [pc, #620]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	2b10      	cmp	r3, #16
 800688a:	d007      	beq.n	800689c <HAL_RCC_OscConfig+0x48>
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	2b18      	cmp	r3, #24
 8006890:	d110      	bne.n	80068b4 <HAL_RCC_OscConfig+0x60>
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d10b      	bne.n	80068b4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800689c:	4b94      	ldr	r3, [pc, #592]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d06c      	beq.n	8006982 <HAL_RCC_OscConfig+0x12e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d168      	bne.n	8006982 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e3f5      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d106      	bne.n	80068cc <HAL_RCC_OscConfig+0x78>
 80068be:	4b8c      	ldr	r3, [pc, #560]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a8b      	ldr	r2, [pc, #556]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e02e      	b.n	800692a <HAL_RCC_OscConfig+0xd6>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10c      	bne.n	80068ee <HAL_RCC_OscConfig+0x9a>
 80068d4:	4b86      	ldr	r3, [pc, #536]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a85      	ldr	r2, [pc, #532]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	4b83      	ldr	r3, [pc, #524]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a82      	ldr	r2, [pc, #520]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	e01d      	b.n	800692a <HAL_RCC_OscConfig+0xd6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068f6:	d10c      	bne.n	8006912 <HAL_RCC_OscConfig+0xbe>
 80068f8:	4b7d      	ldr	r3, [pc, #500]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a7c      	ldr	r2, [pc, #496]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80068fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	4b7a      	ldr	r3, [pc, #488]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a79      	ldr	r2, [pc, #484]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 800690a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e00b      	b.n	800692a <HAL_RCC_OscConfig+0xd6>
 8006912:	4b77      	ldr	r3, [pc, #476]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a76      	ldr	r2, [pc, #472]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	4b74      	ldr	r3, [pc, #464]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a73      	ldr	r2, [pc, #460]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006928:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d013      	beq.n	800695a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006932:	f7fd f92f 	bl	8003b94 <HAL_GetTick>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800693a:	f7fd f92b 	bl	8003b94 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b64      	cmp	r3, #100	; 0x64
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e3a9      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800694c:	4b68      	ldr	r3, [pc, #416]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <HAL_RCC_OscConfig+0xe6>
 8006958:	e014      	b.n	8006984 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695a:	f7fd f91b 	bl	8003b94 <HAL_GetTick>
 800695e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006962:	f7fd f917 	bl	8003b94 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b64      	cmp	r3, #100	; 0x64
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e395      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006974:	4b5e      	ldr	r3, [pc, #376]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <HAL_RCC_OscConfig+0x10e>
 8006980:	e000      	b.n	8006984 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006982:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80ca 	beq.w	8006b26 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006992:	4b57      	ldr	r3, [pc, #348]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800699a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800699c:	4b54      	ldr	r3, [pc, #336]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_RCC_OscConfig+0x164>
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	2b18      	cmp	r3, #24
 80069ac:	d156      	bne.n	8006a5c <HAL_RCC_OscConfig+0x208>
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d151      	bne.n	8006a5c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069b8:	4b4d      	ldr	r3, [pc, #308]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_OscConfig+0x17c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e367      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069d0:	4b47      	ldr	r3, [pc, #284]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 0219 	bic.w	r2, r3, #25
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	4944      	ldr	r1, [pc, #272]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069e2:	f7fd f8d7 	bl	8003b94 <HAL_GetTick>
 80069e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ea:	f7fd f8d3 	bl	8003b94 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e351      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069fc:	4b3c      	ldr	r3, [pc, #240]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0f0      	beq.n	80069ea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a08:	f7fd f8d0 	bl	8003bac <HAL_GetREVID>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d817      	bhi.n	8006a46 <HAL_RCC_OscConfig+0x1f2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d108      	bne.n	8006a30 <HAL_RCC_OscConfig+0x1dc>
 8006a1e:	4b34      	ldr	r3, [pc, #208]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a26:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a2e:	e07a      	b.n	8006b26 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a30:	4b2f      	ldr	r3, [pc, #188]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	031b      	lsls	r3, r3, #12
 8006a3e:	492c      	ldr	r1, [pc, #176]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a44:	e06f      	b.n	8006b26 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a46:	4b2a      	ldr	r3, [pc, #168]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	061b      	lsls	r3, r3, #24
 8006a54:	4926      	ldr	r1, [pc, #152]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a5a:	e064      	b.n	8006b26 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d047      	beq.n	8006af4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a64:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f023 0219 	bic.w	r2, r3, #25
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	491f      	ldr	r1, [pc, #124]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a76:	f7fd f88d 	bl	8003b94 <HAL_GetTick>
 8006a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a7e:	f7fd f889 	bl	8003b94 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e307      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9c:	f7fd f886 	bl	8003bac <HAL_GetREVID>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d817      	bhi.n	8006ada <HAL_RCC_OscConfig+0x286>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d108      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x270>
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006aba:	4a0d      	ldr	r2, [pc, #52]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac0:	6053      	str	r3, [r2, #4]
 8006ac2:	e030      	b.n	8006b26 <HAL_RCC_OscConfig+0x2d2>
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	4907      	ldr	r1, [pc, #28]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	604b      	str	r3, [r1, #4]
 8006ad8:	e025      	b.n	8006b26 <HAL_RCC_OscConfig+0x2d2>
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	4901      	ldr	r1, [pc, #4]	; (8006af0 <HAL_RCC_OscConfig+0x29c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	604b      	str	r3, [r1, #4]
 8006aee:	e01a      	b.n	8006b26 <HAL_RCC_OscConfig+0x2d2>
 8006af0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006af4:	4b9e      	ldr	r3, [pc, #632]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a9d      	ldr	r2, [pc, #628]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fd f848 	bl	8003b94 <HAL_GetTick>
 8006b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b08:	f7fd f844 	bl	8003b94 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e2c2      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b1a:	4b95      	ldr	r3, [pc, #596]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f0      	bne.n	8006b08 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80a9 	beq.w	8006c86 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b34:	4b8e      	ldr	r3, [pc, #568]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b3e:	4b8c      	ldr	r3, [pc, #560]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d007      	beq.n	8006b5a <HAL_RCC_OscConfig+0x306>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b18      	cmp	r3, #24
 8006b4e:	d13a      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x372>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d135      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b5a:	4b85      	ldr	r3, [pc, #532]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_RCC_OscConfig+0x31e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	2b80      	cmp	r3, #128	; 0x80
 8006b6c:	d001      	beq.n	8006b72 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e296      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b72:	f7fd f81b 	bl	8003bac <HAL_GetREVID>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d817      	bhi.n	8006bb0 <HAL_RCC_OscConfig+0x35c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d108      	bne.n	8006b9a <HAL_RCC_OscConfig+0x346>
 8006b88:	4b79      	ldr	r3, [pc, #484]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b90:	4a77      	ldr	r2, [pc, #476]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b96:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b98:	e075      	b.n	8006c86 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b9a:	4b75      	ldr	r3, [pc, #468]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	069b      	lsls	r3, r3, #26
 8006ba8:	4971      	ldr	r1, [pc, #452]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bae:	e06a      	b.n	8006c86 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bb0:	4b6f      	ldr	r3, [pc, #444]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	061b      	lsls	r3, r3, #24
 8006bbe:	496c      	ldr	r1, [pc, #432]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bc4:	e05f      	b.n	8006c86 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d042      	beq.n	8006c54 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bce:	4b68      	ldr	r3, [pc, #416]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a67      	ldr	r2, [pc, #412]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bda:	f7fc ffdb 	bl	8003b94 <HAL_GetTick>
 8006bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006be2:	f7fc ffd7 	bl	8003b94 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e255      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bf4:	4b5e      	ldr	r3, [pc, #376]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0f0      	beq.n	8006be2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c00:	f7fc ffd4 	bl	8003bac <HAL_GetREVID>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d817      	bhi.n	8006c3e <HAL_RCC_OscConfig+0x3ea>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d108      	bne.n	8006c28 <HAL_RCC_OscConfig+0x3d4>
 8006c16:	4b56      	ldr	r3, [pc, #344]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c1e:	4a54      	ldr	r2, [pc, #336]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c24:	6053      	str	r3, [r2, #4]
 8006c26:	e02e      	b.n	8006c86 <HAL_RCC_OscConfig+0x432>
 8006c28:	4b51      	ldr	r3, [pc, #324]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	069b      	lsls	r3, r3, #26
 8006c36:	494e      	ldr	r1, [pc, #312]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	604b      	str	r3, [r1, #4]
 8006c3c:	e023      	b.n	8006c86 <HAL_RCC_OscConfig+0x432>
 8006c3e:	4b4c      	ldr	r3, [pc, #304]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	061b      	lsls	r3, r3, #24
 8006c4c:	4948      	ldr	r1, [pc, #288]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60cb      	str	r3, [r1, #12]
 8006c52:	e018      	b.n	8006c86 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c54:	4b46      	ldr	r3, [pc, #280]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a45      	ldr	r2, [pc, #276]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fc ff98 	bl	8003b94 <HAL_GetTick>
 8006c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c68:	f7fc ff94 	bl	8003b94 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e212      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c7a:	4b3d      	ldr	r3, [pc, #244]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d036      	beq.n	8006d00 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d019      	beq.n	8006cce <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c9a:	4b35      	ldr	r3, [pc, #212]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9e:	4a34      	ldr	r2, [pc, #208]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca6:	f7fc ff75 	bl	8003b94 <HAL_GetTick>
 8006caa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cae:	f7fc ff71 	bl	8003b94 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e1ef      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cc0:	4b2b      	ldr	r3, [pc, #172]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x45a>
 8006ccc:	e018      	b.n	8006d00 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cce:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd2:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cda:	f7fc ff5b 	bl	8003b94 <HAL_GetTick>
 8006cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ce2:	f7fc ff57 	bl	8003b94 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e1d5      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f0      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d039      	beq.n	8006d80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d019      	beq.n	8006d48 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d14:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006d1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d20:	f7fc ff38 	bl	8003b94 <HAL_GetTick>
 8006d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d28:	f7fc ff34 	bl	8003b94 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e1b2      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x4d4>
 8006d46:	e01b      	b.n	8006d80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a08      	ldr	r2, [pc, #32]	; (8006d70 <HAL_RCC_OscConfig+0x51c>)
 8006d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d54:	f7fc ff1e 	bl	8003b94 <HAL_GetTick>
 8006d58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d5a:	e00b      	b.n	8006d74 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d5c:	f7fc ff1a 	bl	8003b94 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d904      	bls.n	8006d74 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e198      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
 8006d6e:	bf00      	nop
 8006d70:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d74:	4ba3      	ldr	r3, [pc, #652]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1ed      	bne.n	8006d5c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8081 	beq.w	8006e90 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d8e:	4b9e      	ldr	r3, [pc, #632]	; (8007008 <HAL_RCC_OscConfig+0x7b4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a9d      	ldr	r2, [pc, #628]	; (8007008 <HAL_RCC_OscConfig+0x7b4>)
 8006d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d9a:	f7fc fefb 	bl	8003b94 <HAL_GetTick>
 8006d9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006da2:	f7fc fef7 	bl	8003b94 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b64      	cmp	r3, #100	; 0x64
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e175      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006db4:	4b94      	ldr	r3, [pc, #592]	; (8007008 <HAL_RCC_OscConfig+0x7b4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d106      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x582>
 8006dc8:	4b8e      	ldr	r3, [pc, #568]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	4a8d      	ldr	r2, [pc, #564]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006dce:	f043 0301 	orr.w	r3, r3, #1
 8006dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd4:	e02d      	b.n	8006e32 <HAL_RCC_OscConfig+0x5de>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x5a4>
 8006dde:	4b89      	ldr	r3, [pc, #548]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	4a88      	ldr	r2, [pc, #544]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dea:	4b86      	ldr	r3, [pc, #536]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dee:	4a85      	ldr	r2, [pc, #532]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006df0:	f023 0304 	bic.w	r3, r3, #4
 8006df4:	6713      	str	r3, [r2, #112]	; 0x70
 8006df6:	e01c      	b.n	8006e32 <HAL_RCC_OscConfig+0x5de>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b05      	cmp	r3, #5
 8006dfe:	d10c      	bne.n	8006e1a <HAL_RCC_OscConfig+0x5c6>
 8006e00:	4b80      	ldr	r3, [pc, #512]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e04:	4a7f      	ldr	r2, [pc, #508]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e06:	f043 0304 	orr.w	r3, r3, #4
 8006e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e0c:	4b7d      	ldr	r3, [pc, #500]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	4a7c      	ldr	r2, [pc, #496]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6713      	str	r3, [r2, #112]	; 0x70
 8006e18:	e00b      	b.n	8006e32 <HAL_RCC_OscConfig+0x5de>
 8006e1a:	4b7a      	ldr	r3, [pc, #488]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4a79      	ldr	r2, [pc, #484]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e20:	f023 0301 	bic.w	r3, r3, #1
 8006e24:	6713      	str	r3, [r2, #112]	; 0x70
 8006e26:	4b77      	ldr	r3, [pc, #476]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	4a76      	ldr	r2, [pc, #472]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e2c:	f023 0304 	bic.w	r3, r3, #4
 8006e30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d015      	beq.n	8006e66 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fc feab 	bl	8003b94 <HAL_GetTick>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e42:	f7fc fea7 	bl	8003b94 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e123      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e58:	4b6a      	ldr	r3, [pc, #424]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0ee      	beq.n	8006e42 <HAL_RCC_OscConfig+0x5ee>
 8006e64:	e014      	b.n	8006e90 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e66:	f7fc fe95 	bl	8003b94 <HAL_GetTick>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e6c:	e00a      	b.n	8006e84 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e6e:	f7fc fe91 	bl	8003b94 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e10d      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e84:	4b5f      	ldr	r3, [pc, #380]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ee      	bne.n	8006e6e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8102 	beq.w	800709e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e9a:	4b5a      	ldr	r3, [pc, #360]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea2:	2b18      	cmp	r3, #24
 8006ea4:	f000 80bd 	beq.w	8007022 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	f040 8095 	bne.w	8006fdc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb2:	4b54      	ldr	r3, [pc, #336]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a53      	ldr	r2, [pc, #332]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fc fe69 	bl	8003b94 <HAL_GetTick>
 8006ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7fc fe65 	bl	8003b94 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e0e3      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ed8:	4b4a      	ldr	r3, [pc, #296]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ee4:	4b47      	ldr	r3, [pc, #284]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ee8:	4b48      	ldr	r3, [pc, #288]	; (800700c <HAL_RCC_OscConfig+0x7b8>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ef4:	0112      	lsls	r2, r2, #4
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	4942      	ldr	r1, [pc, #264]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	628b      	str	r3, [r1, #40]	; 0x28
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	3b01      	subs	r3, #1
 8006f04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	025b      	lsls	r3, r3, #9
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	3b01      	subs	r3, #1
 8006f28:	061b      	lsls	r3, r3, #24
 8006f2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f2e:	4935      	ldr	r1, [pc, #212]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f34:	4b33      	ldr	r3, [pc, #204]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a32      	ldr	r2, [pc, #200]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f3a:	f023 0301 	bic.w	r3, r3, #1
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f40:	4b30      	ldr	r3, [pc, #192]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f44:	4b32      	ldr	r3, [pc, #200]	; (8007010 <HAL_RCC_OscConfig+0x7bc>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f4c:	00d2      	lsls	r2, r2, #3
 8006f4e:	492d      	ldr	r1, [pc, #180]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f54:	4b2b      	ldr	r3, [pc, #172]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	f023 020c 	bic.w	r2, r3, #12
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	4928      	ldr	r1, [pc, #160]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f66:	4b27      	ldr	r3, [pc, #156]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	f023 0202 	bic.w	r2, r3, #2
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	4924      	ldr	r1, [pc, #144]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f78:	4b22      	ldr	r3, [pc, #136]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	4a21      	ldr	r2, [pc, #132]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f84:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f90:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a1b      	ldr	r2, [pc, #108]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006f9c:	4b19      	ldr	r3, [pc, #100]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4a18      	ldr	r2, [pc, #96]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa8:	4b16      	ldr	r3, [pc, #88]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a15      	ldr	r2, [pc, #84]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb4:	f7fc fdee 	bl	8003b94 <HAL_GetTick>
 8006fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fbc:	f7fc fdea 	bl	8003b94 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e068      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0f0      	beq.n	8006fbc <HAL_RCC_OscConfig+0x768>
 8006fda:	e060      	b.n	800709e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fdc:	4b09      	ldr	r3, [pc, #36]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a08      	ldr	r2, [pc, #32]	; (8007004 <HAL_RCC_OscConfig+0x7b0>)
 8006fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fc fdd4 	bl	8003b94 <HAL_GetTick>
 8006fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fee:	e011      	b.n	8007014 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff0:	f7fc fdd0 	bl	8003b94 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d90a      	bls.n	8007014 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e04e      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	58024800 	.word	0x58024800
 800700c:	fffffc0c 	.word	0xfffffc0c
 8007010:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007014:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <HAL_RCC_OscConfig+0x854>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e7      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x79c>
 8007020:	e03d      	b.n	800709e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007022:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <HAL_RCC_OscConfig+0x854>)
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007028:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <HAL_RCC_OscConfig+0x854>)
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b01      	cmp	r3, #1
 8007034:	d031      	beq.n	800709a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f003 0203 	and.w	r2, r3, #3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007040:	429a      	cmp	r2, r3
 8007042:	d12a      	bne.n	800709a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007050:	429a      	cmp	r2, r3
 8007052:	d122      	bne.n	800709a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007060:	429a      	cmp	r2, r3
 8007062:	d11a      	bne.n	800709a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	0a5b      	lsrs	r3, r3, #9
 8007068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007072:	429a      	cmp	r2, r3
 8007074:	d111      	bne.n	800709a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007084:	429a      	cmp	r2, r3
 8007086:	d108      	bne.n	800709a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	0e1b      	lsrs	r3, r3, #24
 800708c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007096:	429a      	cmp	r2, r3
 8007098:	d001      	beq.n	800709e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3730      	adds	r7, #48	; 0x30
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	58024400 	.word	0x58024400

080070ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e19c      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070c0:	4b8a      	ldr	r3, [pc, #552]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d910      	bls.n	80070f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ce:	4b87      	ldr	r3, [pc, #540]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 020f 	bic.w	r2, r3, #15
 80070d6:	4985      	ldr	r1, [pc, #532]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	4313      	orrs	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070de:	4b83      	ldr	r3, [pc, #524]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d001      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e184      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d010      	beq.n	800711e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	4b7b      	ldr	r3, [pc, #492]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007108:	429a      	cmp	r2, r3
 800710a:	d908      	bls.n	800711e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800710c:	4b78      	ldr	r3, [pc, #480]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	4975      	ldr	r1, [pc, #468]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800711a:	4313      	orrs	r3, r2
 800711c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d010      	beq.n	800714c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	4b70      	ldr	r3, [pc, #448]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007136:	429a      	cmp	r2, r3
 8007138:	d908      	bls.n	800714c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800713a:	4b6d      	ldr	r3, [pc, #436]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	496a      	ldr	r1, [pc, #424]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 8007148:	4313      	orrs	r3, r2
 800714a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b00      	cmp	r3, #0
 8007156:	d010      	beq.n	800717a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	4b64      	ldr	r3, [pc, #400]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007164:	429a      	cmp	r2, r3
 8007166:	d908      	bls.n	800717a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007168:	4b61      	ldr	r3, [pc, #388]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	495e      	ldr	r1, [pc, #376]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 8007176:	4313      	orrs	r3, r2
 8007178:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d010      	beq.n	80071a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69da      	ldr	r2, [r3, #28]
 800718a:	4b59      	ldr	r3, [pc, #356]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007192:	429a      	cmp	r2, r3
 8007194:	d908      	bls.n	80071a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007196:	4b56      	ldr	r3, [pc, #344]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	4953      	ldr	r1, [pc, #332]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d010      	beq.n	80071d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	4b4d      	ldr	r3, [pc, #308]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d908      	bls.n	80071d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071c4:	4b4a      	ldr	r3, [pc, #296]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f023 020f 	bic.w	r2, r3, #15
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4947      	ldr	r1, [pc, #284]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d055      	beq.n	800728e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071e2:	4b43      	ldr	r3, [pc, #268]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	4940      	ldr	r1, [pc, #256]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d107      	bne.n	800720c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071fc:	4b3c      	ldr	r3, [pc, #240]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d121      	bne.n	800724c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e0f6      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d107      	bne.n	8007224 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007214:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d115      	bne.n	800724c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0ea      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800722c:	4b30      	ldr	r3, [pc, #192]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0de      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800723c:	4b2c      	ldr	r3, [pc, #176]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0d6      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800724c:	4b28      	ldr	r3, [pc, #160]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f023 0207 	bic.w	r2, r3, #7
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4925      	ldr	r1, [pc, #148]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800725a:	4313      	orrs	r3, r2
 800725c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725e:	f7fc fc99 	bl	8003b94 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007264:	e00a      	b.n	800727c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007266:	f7fc fc95 	bl	8003b94 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f241 3288 	movw	r2, #5000	; 0x1388
 8007274:	4293      	cmp	r3, r2
 8007276:	d901      	bls.n	800727c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e0be      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727c:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	429a      	cmp	r2, r3
 800728c:	d1eb      	bne.n	8007266 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d010      	beq.n	80072bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d208      	bcs.n	80072bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072aa:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f023 020f 	bic.w	r2, r3, #15
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	490e      	ldr	r1, [pc, #56]	; (80072f0 <HAL_RCC_ClockConfig+0x244>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d214      	bcs.n	80072f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ca:	4b08      	ldr	r3, [pc, #32]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f023 020f 	bic.w	r2, r3, #15
 80072d2:	4906      	ldr	r1, [pc, #24]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072da:	4b04      	ldr	r3, [pc, #16]	; (80072ec <HAL_RCC_ClockConfig+0x240>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d005      	beq.n	80072f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e086      	b.n	80073fa <HAL_RCC_ClockConfig+0x34e>
 80072ec:	52002000 	.word	0x52002000
 80072f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d010      	beq.n	8007322 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	4b3f      	ldr	r3, [pc, #252]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800730c:	429a      	cmp	r2, r3
 800730e:	d208      	bcs.n	8007322 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007310:	4b3c      	ldr	r3, [pc, #240]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	4939      	ldr	r1, [pc, #228]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 800731e:	4313      	orrs	r3, r2
 8007320:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d010      	beq.n	8007350 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695a      	ldr	r2, [r3, #20]
 8007332:	4b34      	ldr	r3, [pc, #208]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800733a:	429a      	cmp	r2, r3
 800733c:	d208      	bcs.n	8007350 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800733e:	4b31      	ldr	r3, [pc, #196]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	492e      	ldr	r1, [pc, #184]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 800734c:	4313      	orrs	r3, r2
 800734e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	4b28      	ldr	r3, [pc, #160]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007368:	429a      	cmp	r2, r3
 800736a:	d208      	bcs.n	800737e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	4922      	ldr	r1, [pc, #136]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 800737a:	4313      	orrs	r3, r2
 800737c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d010      	beq.n	80073ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69da      	ldr	r2, [r3, #28]
 800738e:	4b1d      	ldr	r3, [pc, #116]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007396:	429a      	cmp	r2, r3
 8007398:	d208      	bcs.n	80073ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800739a:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	4917      	ldr	r1, [pc, #92]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073ac:	f000 f834 	bl	8007418 <HAL_RCC_GetSysClockFreq>
 80073b0:	4602      	mov	r2, r0
 80073b2:	4b14      	ldr	r3, [pc, #80]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	0a1b      	lsrs	r3, r3, #8
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	4912      	ldr	r1, [pc, #72]	; (8007408 <HAL_RCC_ClockConfig+0x35c>)
 80073be:	5ccb      	ldrb	r3, [r1, r3]
 80073c0:	f003 031f 	and.w	r3, r3, #31
 80073c4:	fa22 f303 	lsr.w	r3, r2, r3
 80073c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073ca:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <HAL_RCC_ClockConfig+0x358>)
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	4a0d      	ldr	r2, [pc, #52]	; (8007408 <HAL_RCC_ClockConfig+0x35c>)
 80073d4:	5cd3      	ldrb	r3, [r2, r3]
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <HAL_RCC_ClockConfig+0x360>)
 80073e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073e4:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <HAL_RCC_ClockConfig+0x364>)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80073ea:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <HAL_RCC_ClockConfig+0x368>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fc fb86 	bl	8003b00 <HAL_InitTick>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	58024400 	.word	0x58024400
 8007408:	0800f360 	.word	0x0800f360
 800740c:	2400002c 	.word	0x2400002c
 8007410:	24000028 	.word	0x24000028
 8007414:	24000030 	.word	0x24000030

08007418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007418:	b480      	push	{r7}
 800741a:	b089      	sub	sp, #36	; 0x24
 800741c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800741e:	4bb3      	ldr	r3, [pc, #716]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007426:	2b18      	cmp	r3, #24
 8007428:	f200 8155 	bhi.w	80076d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800742c:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <HAL_RCC_GetSysClockFreq+0x1c>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007499 	.word	0x08007499
 8007438:	080076d7 	.word	0x080076d7
 800743c:	080076d7 	.word	0x080076d7
 8007440:	080076d7 	.word	0x080076d7
 8007444:	080076d7 	.word	0x080076d7
 8007448:	080076d7 	.word	0x080076d7
 800744c:	080076d7 	.word	0x080076d7
 8007450:	080076d7 	.word	0x080076d7
 8007454:	080074bf 	.word	0x080074bf
 8007458:	080076d7 	.word	0x080076d7
 800745c:	080076d7 	.word	0x080076d7
 8007460:	080076d7 	.word	0x080076d7
 8007464:	080076d7 	.word	0x080076d7
 8007468:	080076d7 	.word	0x080076d7
 800746c:	080076d7 	.word	0x080076d7
 8007470:	080076d7 	.word	0x080076d7
 8007474:	080074c5 	.word	0x080074c5
 8007478:	080076d7 	.word	0x080076d7
 800747c:	080076d7 	.word	0x080076d7
 8007480:	080076d7 	.word	0x080076d7
 8007484:	080076d7 	.word	0x080076d7
 8007488:	080076d7 	.word	0x080076d7
 800748c:	080076d7 	.word	0x080076d7
 8007490:	080076d7 	.word	0x080076d7
 8007494:	080074cb 	.word	0x080074cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007498:	4b94      	ldr	r3, [pc, #592]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a4:	4b91      	ldr	r3, [pc, #580]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	08db      	lsrs	r3, r3, #3
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	4a90      	ldr	r2, [pc, #576]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80074b6:	e111      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074b8:	4b8d      	ldr	r3, [pc, #564]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074ba:	61bb      	str	r3, [r7, #24]
    break;
 80074bc:	e10e      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80074be:	4b8d      	ldr	r3, [pc, #564]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074c0:	61bb      	str	r3, [r7, #24]
    break;
 80074c2:	e10b      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80074c4:	4b8c      	ldr	r3, [pc, #560]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074c6:	61bb      	str	r3, [r7, #24]
    break;
 80074c8:	e108      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074ca:	4b88      	ldr	r3, [pc, #544]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80074d4:	4b85      	ldr	r3, [pc, #532]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074e0:	4b82      	ldr	r3, [pc, #520]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80074ea:	4b80      	ldr	r3, [pc, #512]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	08db      	lsrs	r3, r3, #3
 80074f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007502:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80e1 	beq.w	80076d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b02      	cmp	r3, #2
 8007512:	f000 8083 	beq.w	800761c <HAL_RCC_GetSysClockFreq+0x204>
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b02      	cmp	r3, #2
 800751a:	f200 80a1 	bhi.w	8007660 <HAL_RCC_GetSysClockFreq+0x248>
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_RCC_GetSysClockFreq+0x114>
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d056      	beq.n	80075d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800752a:	e099      	b.n	8007660 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800752c:	4b6f      	ldr	r3, [pc, #444]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	d02d      	beq.n	8007594 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007538:	4b6c      	ldr	r3, [pc, #432]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	08db      	lsrs	r3, r3, #3
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	4a6b      	ldr	r2, [pc, #428]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007544:	fa22 f303 	lsr.w	r3, r2, r3
 8007548:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b62      	ldr	r3, [pc, #392]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a02 	vldr	s12, [r7, #8]
 8007576:	eddf 5a61 	vldr	s11, [pc, #388]	; 80076fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007592:	e087      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007700 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b51      	ldr	r3, [pc, #324]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80076fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d6:	e065      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b40      	ldr	r3, [pc, #256]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80075fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80076fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761a:	e043      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007708 <HAL_RCC_GetSysClockFreq+0x2f0>
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b2f      	ldr	r3, [pc, #188]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007642:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80076fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765e:	e021      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2ec>
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b1e      	ldr	r3, [pc, #120]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a02 	vldr	s12, [r7, #8]
 8007686:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80076fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80076a4:	4b11      	ldr	r3, [pc, #68]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	0a5b      	lsrs	r3, r3, #9
 80076aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ae:	3301      	adds	r3, #1
 80076b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80076c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c8:	ee17 3a90 	vmov	r3, s15
 80076cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80076ce:	e005      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
    break;
 80076d4:	e002      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80076d6:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076d8:	61bb      	str	r3, [r7, #24]
    break;
 80076da:	bf00      	nop
  }

  return sysclockfreq;
 80076dc:	69bb      	ldr	r3, [r7, #24]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3724      	adds	r7, #36	; 0x24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	58024400 	.word	0x58024400
 80076f0:	03d09000 	.word	0x03d09000
 80076f4:	003d0900 	.word	0x003d0900
 80076f8:	02dc6c00 	.word	0x02dc6c00
 80076fc:	46000000 	.word	0x46000000
 8007700:	4c742400 	.word	0x4c742400
 8007704:	4a742400 	.word	0x4a742400
 8007708:	4c371b00 	.word	0x4c371b00

0800770c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007712:	f7ff fe81 	bl	8007418 <HAL_RCC_GetSysClockFreq>
 8007716:	4602      	mov	r2, r0
 8007718:	4b10      	ldr	r3, [pc, #64]	; (800775c <HAL_RCC_GetHCLKFreq+0x50>)
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	0a1b      	lsrs	r3, r3, #8
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	490f      	ldr	r1, [pc, #60]	; (8007760 <HAL_RCC_GetHCLKFreq+0x54>)
 8007724:	5ccb      	ldrb	r3, [r1, r3]
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	fa22 f303 	lsr.w	r3, r2, r3
 800772e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007730:	4b0a      	ldr	r3, [pc, #40]	; (800775c <HAL_RCC_GetHCLKFreq+0x50>)
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <HAL_RCC_GetHCLKFreq+0x54>)
 800773a:	5cd3      	ldrb	r3, [r2, r3]
 800773c:	f003 031f 	and.w	r3, r3, #31
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	fa22 f303 	lsr.w	r3, r2, r3
 8007746:	4a07      	ldr	r2, [pc, #28]	; (8007764 <HAL_RCC_GetHCLKFreq+0x58>)
 8007748:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800774a:	4a07      	ldr	r2, [pc, #28]	; (8007768 <HAL_RCC_GetHCLKFreq+0x5c>)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007750:	4b04      	ldr	r3, [pc, #16]	; (8007764 <HAL_RCC_GetHCLKFreq+0x58>)
 8007752:	681b      	ldr	r3, [r3, #0]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	58024400 	.word	0x58024400
 8007760:	0800f360 	.word	0x0800f360
 8007764:	2400002c 	.word	0x2400002c
 8007768:	24000028 	.word	0x24000028

0800776c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007770:	f7ff ffcc 	bl	800770c <HAL_RCC_GetHCLKFreq>
 8007774:	4602      	mov	r2, r0
 8007776:	4b06      	ldr	r3, [pc, #24]	; (8007790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	091b      	lsrs	r3, r3, #4
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	4904      	ldr	r1, [pc, #16]	; (8007794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007782:	5ccb      	ldrb	r3, [r1, r3]
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800778c:	4618      	mov	r0, r3
 800778e:	bd80      	pop	{r7, pc}
 8007790:	58024400 	.word	0x58024400
 8007794:	0800f360 	.word	0x0800f360

08007798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800779c:	f7ff ffb6 	bl	800770c <HAL_RCC_GetHCLKFreq>
 80077a0:	4602      	mov	r2, r0
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	4904      	ldr	r1, [pc, #16]	; (80077c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077ae:	5ccb      	ldrb	r3, [r1, r3]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	58024400 	.word	0x58024400
 80077c0:	0800f360 	.word	0x0800f360

080077c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077d0:	2300      	movs	r3, #0
 80077d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d03f      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077e8:	d02a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80077ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077ee:	d824      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80077f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f4:	d018      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077fa:	d81e      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007804:	d007      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007806:	e018      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007808:	4bab      	ldr	r3, [pc, #684]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	4aaa      	ldr	r2, [pc, #680]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800780e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007814:	e015      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3304      	adds	r3, #4
 800781a:	2102      	movs	r1, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f9cf 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007826:	e00c      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3324      	adds	r3, #36	; 0x24
 800782c:	2102      	movs	r1, #2
 800782e:	4618      	mov	r0, r3
 8007830:	f001 fa78 	bl	8008d24 <RCCEx_PLL3_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007838:	e003      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]
      break;
 800783e:	e000      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007848:	4b9b      	ldr	r3, [pc, #620]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007854:	4998      	ldr	r1, [pc, #608]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	650b      	str	r3, [r1, #80]	; 0x50
 800785a:	e001      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d03d      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007870:	2b04      	cmp	r3, #4
 8007872:	d826      	bhi.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007874:	a201      	add	r2, pc, #4	; (adr r2, 800787c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	08007891 	.word	0x08007891
 8007880:	0800789f 	.word	0x0800789f
 8007884:	080078b1 	.word	0x080078b1
 8007888:	080078c9 	.word	0x080078c9
 800788c:	080078c9 	.word	0x080078c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007890:	4b89      	ldr	r3, [pc, #548]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	4a88      	ldr	r2, [pc, #544]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800789a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800789c:	e015      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3304      	adds	r3, #4
 80078a2:	2100      	movs	r1, #0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 f98b 	bl	8008bc0 <RCCEx_PLL2_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078ae:	e00c      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3324      	adds	r3, #36	; 0x24
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fa34 	bl	8008d24 <RCCEx_PLL3_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078c0:	e003      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
      break;
 80078c6:	e000      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80078c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078d0:	4b79      	ldr	r3, [pc, #484]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	f023 0207 	bic.w	r2, r3, #7
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078dc:	4976      	ldr	r1, [pc, #472]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	650b      	str	r3, [r1, #80]	; 0x50
 80078e2:	e001      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d042      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fc:	d02b      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80078fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007902:	d825      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007904:	2bc0      	cmp	r3, #192	; 0xc0
 8007906:	d028      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007908:	2bc0      	cmp	r3, #192	; 0xc0
 800790a:	d821      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800790c:	2b80      	cmp	r3, #128	; 0x80
 800790e:	d016      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007910:	2b80      	cmp	r3, #128	; 0x80
 8007912:	d81d      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007918:	2b40      	cmp	r3, #64	; 0x40
 800791a:	d007      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800791c:	e018      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791e:	4b66      	ldr	r3, [pc, #408]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	4a65      	ldr	r2, [pc, #404]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800792a:	e017      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f001 f944 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800793c:	e00e      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3324      	adds	r3, #36	; 0x24
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f001 f9ed 	bl	8008d24 <RCCEx_PLL3_Config>
 800794a:	4603      	mov	r3, r0
 800794c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800794e:	e005      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	75fb      	strb	r3, [r7, #23]
      break;
 8007954:	e002      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007956:	bf00      	nop
 8007958:	e000      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800795a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d109      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007962:	4b55      	ldr	r3, [pc, #340]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007966:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	4952      	ldr	r1, [pc, #328]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007970:	4313      	orrs	r3, r2
 8007972:	650b      	str	r3, [r1, #80]	; 0x50
 8007974:	e001      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007982:	2b00      	cmp	r3, #0
 8007984:	d049      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800798c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007990:	d030      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007996:	d82a      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007998:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800799c:	d02c      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800799e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079a2:	d824      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079a8:	d018      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80079aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ae:	d81e      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80079b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079b8:	d007      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80079ba:	e018      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079bc:	4b3e      	ldr	r3, [pc, #248]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a3d      	ldr	r2, [pc, #244]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079c8:	e017      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 f8f5 	bl	8008bc0 <RCCEx_PLL2_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079da:	e00e      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3324      	adds	r3, #36	; 0x24
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 f99e 	bl	8008d24 <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079ec:	e005      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	75fb      	strb	r3, [r7, #23]
      break;
 80079f2:	e002      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80079f4:	bf00      	nop
 80079f6:	e000      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80079f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a00:	4b2d      	ldr	r3, [pc, #180]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a0e:	492a      	ldr	r1, [pc, #168]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	658b      	str	r3, [r1, #88]	; 0x58
 8007a14:	e001      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d04c      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a30:	d030      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a36:	d82a      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a3c:	d02c      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a42:	d824      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a48:	d018      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a4e:	d81e      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a58:	d007      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007a5a:	e018      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a68:	e017      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 f8a5 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a7a:	e00e      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 f94e 	bl	8008d24 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a8c:	e005      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
      break;
 8007a92:	e002      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007a94:	bf00      	nop
 8007a96:	e000      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10d      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007aae:	4902      	ldr	r1, [pc, #8]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ab4:	e004      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007ab6:	bf00      	nop
 8007ab8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d032      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad0:	2b30      	cmp	r3, #48	; 0x30
 8007ad2:	d01c      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ad4:	2b30      	cmp	r3, #48	; 0x30
 8007ad6:	d817      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d00c      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d813      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d016      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d10f      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae8:	4baf      	ldr	r3, [pc, #700]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4aae      	ldr	r2, [pc, #696]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007af4:	e00e      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	2102      	movs	r1, #2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 f85f 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b06:	e005      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0c:	e002      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b0e:	bf00      	nop
 8007b10:	e000      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d109      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b1a:	4ba3      	ldr	r3, [pc, #652]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b26:	49a0      	ldr	r1, [pc, #640]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b2c:	e001      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d047      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b46:	d030      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b4c:	d82a      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b52:	d02c      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007b54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b58:	d824      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b5e:	d018      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b64:	d81e      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6e:	d007      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007b70:	e018      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b72:	4b8d      	ldr	r3, [pc, #564]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	4a8c      	ldr	r2, [pc, #560]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b7e:	e017      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 f81a 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b90:	e00e      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3324      	adds	r3, #36	; 0x24
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 f8c3 	bl	8008d24 <RCCEx_PLL3_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ba2:	e005      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba8:	e002      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007baa:	bf00      	nop
 8007bac:	e000      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d109      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bb6:	4b7c      	ldr	r3, [pc, #496]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc2:	4979      	ldr	r1, [pc, #484]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	650b      	str	r3, [r1, #80]	; 0x50
 8007bc8:	e001      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d049      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be2:	d02e      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be8:	d828      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bee:	d02a      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bf4:	d822      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bfa:	d026      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007bfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c00:	d81c      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c06:	d010      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c0c:	d816      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01d      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c16:	d111      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 ffce 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c28:	e012      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f877 	bl	8008d24 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c3a:	e009      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c40:	e006      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c42:	bf00      	nop
 8007c44:	e004      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c46:	bf00      	nop
 8007c48:	e002      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c56:	4b54      	ldr	r3, [pc, #336]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c62:	4951      	ldr	r1, [pc, #324]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	650b      	str	r3, [r1, #80]	; 0x50
 8007c68:	e001      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d04b      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c84:	d02e      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c8a:	d828      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c90:	d02a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c96:	d822      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c9c:	d026      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007c9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ca2:	d81c      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d010      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cae:	d816      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01d      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb8:	d111      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 ff7d 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007cca:	e012      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3324      	adds	r3, #36	; 0x24
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f826 	bl	8008d24 <RCCEx_PLL3_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007cdc:	e009      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce2:	e006      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e004      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ce8:	bf00      	nop
 8007cea:	e002      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007cec:	bf00      	nop
 8007cee:	e000      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10a      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007cf8:	4b2b      	ldr	r3, [pc, #172]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d06:	4928      	ldr	r1, [pc, #160]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8007d0c:	e001      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d02f      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d26:	d00e      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d2c:	d814      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d015      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d36:	d10f      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d38:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	4a1a      	ldr	r2, [pc, #104]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d44:	e00c      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 ff37 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d56:	e003      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5c:	e000      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d66:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d72:	490d      	ldr	r1, [pc, #52]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	650b      	str	r3, [r1, #80]	; 0x50
 8007d78:	e001      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d033      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d81c      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007dd3 	.word	0x08007dd3
 8007d9c:	08007dad 	.word	0x08007dad
 8007da0:	08007dbb 	.word	0x08007dbb
 8007da4:	08007dd3 	.word	0x08007dd3
 8007da8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dac:	4bb8      	ldr	r3, [pc, #736]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	4ab7      	ldr	r2, [pc, #732]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007db8:	e00c      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fefd 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007dca:	e003      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	e000      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007dda:	4bad      	ldr	r3, [pc, #692]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dde:	f023 0203 	bic.w	r2, r3, #3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	49aa      	ldr	r1, [pc, #680]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007dec:	e001      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 8086 	beq.w	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e00:	4ba4      	ldr	r3, [pc, #656]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4aa3      	ldr	r2, [pc, #652]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e0c:	f7fb fec2 	bl	8003b94 <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e12:	e009      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e14:	f7fb febe 	bl	8003b94 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b64      	cmp	r3, #100	; 0x64
 8007e20:	d902      	bls.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	75fb      	strb	r3, [r7, #23]
        break;
 8007e26:	e005      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e28:	4b9a      	ldr	r3, [pc, #616]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0ef      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d166      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e3a:	4b95      	ldr	r3, [pc, #596]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e44:	4053      	eors	r3, r2
 8007e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d013      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e4e:	4b90      	ldr	r3, [pc, #576]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e58:	4b8d      	ldr	r3, [pc, #564]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5c:	4a8c      	ldr	r2, [pc, #560]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e64:	4b8a      	ldr	r3, [pc, #552]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	4a89      	ldr	r2, [pc, #548]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e70:	4a87      	ldr	r2, [pc, #540]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e80:	d115      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e82:	f7fb fe87 	bl	8003b94 <HAL_GetTick>
 8007e86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e88:	e00b      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8a:	f7fb fe83 	bl	8003b94 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d902      	bls.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	75fb      	strb	r3, [r7, #23]
            break;
 8007ea0:	e005      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ea2:	4b7b      	ldr	r3, [pc, #492]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0ed      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d126      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec2:	d10d      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ec4:	4b72      	ldr	r3, [pc, #456]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ed2:	0919      	lsrs	r1, r3, #4
 8007ed4:	4b70      	ldr	r3, [pc, #448]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	496d      	ldr	r1, [pc, #436]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	610b      	str	r3, [r1, #16]
 8007ede:	e005      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007ee0:	4b6b      	ldr	r3, [pc, #428]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	4a6a      	ldr	r2, [pc, #424]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ee6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007eea:	6113      	str	r3, [r2, #16]
 8007eec:	4b68      	ldr	r3, [pc, #416]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007efa:	4965      	ldr	r1, [pc, #404]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	670b      	str	r3, [r1, #112]	; 0x70
 8007f00:	e004      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	75bb      	strb	r3, [r7, #22]
 8007f06:	e001      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d07e      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f1c:	2b28      	cmp	r3, #40	; 0x28
 8007f1e:	d867      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007f20:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007ff7 	.word	0x08007ff7
 8007f2c:	08007ff1 	.word	0x08007ff1
 8007f30:	08007ff1 	.word	0x08007ff1
 8007f34:	08007ff1 	.word	0x08007ff1
 8007f38:	08007ff1 	.word	0x08007ff1
 8007f3c:	08007ff1 	.word	0x08007ff1
 8007f40:	08007ff1 	.word	0x08007ff1
 8007f44:	08007ff1 	.word	0x08007ff1
 8007f48:	08007fcd 	.word	0x08007fcd
 8007f4c:	08007ff1 	.word	0x08007ff1
 8007f50:	08007ff1 	.word	0x08007ff1
 8007f54:	08007ff1 	.word	0x08007ff1
 8007f58:	08007ff1 	.word	0x08007ff1
 8007f5c:	08007ff1 	.word	0x08007ff1
 8007f60:	08007ff1 	.word	0x08007ff1
 8007f64:	08007ff1 	.word	0x08007ff1
 8007f68:	08007fdf 	.word	0x08007fdf
 8007f6c:	08007ff1 	.word	0x08007ff1
 8007f70:	08007ff1 	.word	0x08007ff1
 8007f74:	08007ff1 	.word	0x08007ff1
 8007f78:	08007ff1 	.word	0x08007ff1
 8007f7c:	08007ff1 	.word	0x08007ff1
 8007f80:	08007ff1 	.word	0x08007ff1
 8007f84:	08007ff1 	.word	0x08007ff1
 8007f88:	08007ff7 	.word	0x08007ff7
 8007f8c:	08007ff1 	.word	0x08007ff1
 8007f90:	08007ff1 	.word	0x08007ff1
 8007f94:	08007ff1 	.word	0x08007ff1
 8007f98:	08007ff1 	.word	0x08007ff1
 8007f9c:	08007ff1 	.word	0x08007ff1
 8007fa0:	08007ff1 	.word	0x08007ff1
 8007fa4:	08007ff1 	.word	0x08007ff1
 8007fa8:	08007ff7 	.word	0x08007ff7
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08007ff1 	.word	0x08007ff1
 8007fb4:	08007ff1 	.word	0x08007ff1
 8007fb8:	08007ff1 	.word	0x08007ff1
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	08007ff1 	.word	0x08007ff1
 8007fc4:	08007ff1 	.word	0x08007ff1
 8007fc8:	08007ff7 	.word	0x08007ff7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fdf4 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007fdc:	e00c      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3324      	adds	r3, #36	; 0x24
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fe9d 	bl	8008d24 <RCCEx_PLL3_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ffe:	4b24      	ldr	r3, [pc, #144]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800800a:	4921      	ldr	r1, [pc, #132]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800800c:	4313      	orrs	r3, r2
 800800e:	654b      	str	r3, [r1, #84]	; 0x54
 8008010:	e001      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d03e      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008026:	2b05      	cmp	r3, #5
 8008028:	d820      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008073 	.word	0x08008073
 8008034:	08008049 	.word	0x08008049
 8008038:	0800805b 	.word	0x0800805b
 800803c:	08008073 	.word	0x08008073
 8008040:	08008073 	.word	0x08008073
 8008044:	08008073 	.word	0x08008073
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	2101      	movs	r1, #1
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fdb6 	bl	8008bc0 <RCCEx_PLL2_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008058:	e00c      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3324      	adds	r3, #36	; 0x24
 800805e:	2101      	movs	r1, #1
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fe5f 	bl	8008d24 <RCCEx_PLL3_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800806a:	e003      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	75fb      	strb	r3, [r7, #23]
      break;
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d110      	bne.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800807a:	4b05      	ldr	r3, [pc, #20]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	f023 0207 	bic.w	r2, r3, #7
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008086:	4902      	ldr	r1, [pc, #8]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008088:	4313      	orrs	r3, r2
 800808a:	654b      	str	r3, [r1, #84]	; 0x54
 800808c:	e008      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
 8008094:	58024800 	.word	0x58024800
 8008098:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d039      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	d820      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80080b6:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	080080ff 	.word	0x080080ff
 80080c0:	080080d5 	.word	0x080080d5
 80080c4:	080080e7 	.word	0x080080e7
 80080c8:	080080ff 	.word	0x080080ff
 80080cc:	080080ff 	.word	0x080080ff
 80080d0:	080080ff 	.word	0x080080ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	2101      	movs	r1, #1
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fd70 	bl	8008bc0 <RCCEx_PLL2_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080e4:	e00c      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3324      	adds	r3, #36	; 0x24
 80080ea:	2101      	movs	r1, #1
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fe19 	bl	8008d24 <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080f6:	e003      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
      break;
 80080fc:	e000      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80080fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008106:	4bb7      	ldr	r3, [pc, #732]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810a:	f023 0207 	bic.w	r2, r3, #7
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008114:	49b3      	ldr	r1, [pc, #716]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008116:	4313      	orrs	r3, r2
 8008118:	658b      	str	r3, [r1, #88]	; 0x58
 800811a:	e001      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d04b      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008136:	d02e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800813c:	d828      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008142:	d02a      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008148:	d822      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800814a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800814e:	d026      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008154:	d81c      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800815a:	d010      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800815c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008160:	d816      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01d      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800816a:	d111      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	2100      	movs	r1, #0
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fd24 	bl	8008bc0 <RCCEx_PLL2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800817c:	e012      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3324      	adds	r3, #36	; 0x24
 8008182:	2102      	movs	r1, #2
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fdcd 	bl	8008d24 <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800818e:	e009      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
      break;
 8008194:	e006      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008196:	bf00      	nop
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081aa:	4b8e      	ldr	r3, [pc, #568]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b8:	498a      	ldr	r1, [pc, #552]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	654b      	str	r3, [r1, #84]	; 0x54
 80081be:	e001      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d04b      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081da:	d02e      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80081dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081e0:	d828      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80081e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e6:	d02a      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80081e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ec:	d822      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80081ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081f2:	d026      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80081f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081f8:	d81c      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80081fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081fe:	d010      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008204:	d816      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d01d      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800820a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820e:	d111      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3304      	adds	r3, #4
 8008214:	2100      	movs	r1, #0
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fcd2 	bl	8008bc0 <RCCEx_PLL2_Config>
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008220:	e012      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3324      	adds	r3, #36	; 0x24
 8008226:	2102      	movs	r1, #2
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fd7b 	bl	8008d24 <RCCEx_PLL3_Config>
 800822e:	4603      	mov	r3, r0
 8008230:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008232:	e009      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	75fb      	strb	r3, [r7, #23]
      break;
 8008238:	e006      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800823a:	bf00      	nop
 800823c:	e004      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800823e:	bf00      	nop
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800824e:	4b65      	ldr	r3, [pc, #404]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008252:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800825c:	4961      	ldr	r1, [pc, #388]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800825e:	4313      	orrs	r3, r2
 8008260:	658b      	str	r3, [r1, #88]	; 0x58
 8008262:	e001      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008270:	2b00      	cmp	r3, #0
 8008272:	d04b      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800827a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800827e:	d02e      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008280:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008284:	d828      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800828a:	d02a      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008290:	d822      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008292:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008296:	d026      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008298:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800829c:	d81c      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800829e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a2:	d010      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80082a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a8:	d816      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d01d      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80082ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b2:	d111      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	2100      	movs	r1, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fc80 	bl	8008bc0 <RCCEx_PLL2_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80082c4:	e012      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2102      	movs	r1, #2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fd29 	bl	8008d24 <RCCEx_PLL3_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80082d6:	e009      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
      break;
 80082dc:	e006      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082de:	bf00      	nop
 80082e0:	e004      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082e2:	bf00      	nop
 80082e4:	e002      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082e6:	bf00      	nop
 80082e8:	e000      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082f2:	4b3c      	ldr	r3, [pc, #240]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008300:	4938      	ldr	r1, [pc, #224]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008302:	4313      	orrs	r3, r2
 8008304:	658b      	str	r3, [r1, #88]	; 0x58
 8008306:	e001      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008322:	d10a      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3324      	adds	r3, #36	; 0x24
 8008328:	2102      	movs	r1, #2
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fcfa 	bl	8008d24 <RCCEx_PLL3_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800833a:	4b2a      	ldr	r3, [pc, #168]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800833c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008348:	4926      	ldr	r1, [pc, #152]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800834a:	4313      	orrs	r3, r2
 800834c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01a      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008364:	d10a      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3324      	adds	r3, #36	; 0x24
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fcd9 	bl	8008d24 <RCCEx_PLL3_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800837c:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800837e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800838a:	4916      	ldr	r1, [pc, #88]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800838c:	4313      	orrs	r3, r2
 800838e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d036      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083a6:	d01f      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80083a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ac:	d817      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80083b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b6:	d009      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80083b8:	e011      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fbfd 	bl	8008bc0 <RCCEx_PLL2_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80083ca:	e00e      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3324      	adds	r3, #36	; 0x24
 80083d0:	2102      	movs	r1, #2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fca6 	bl	8008d24 <RCCEx_PLL3_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80083dc:	e005      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
      break;
 80083e2:	e002      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80083e4:	58024400 	.word	0x58024400
      break;
 80083e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083f0:	4b93      	ldr	r3, [pc, #588]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083fe:	4990      	ldr	r1, [pc, #576]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008400:	4313      	orrs	r3, r2
 8008402:	658b      	str	r3, [r1, #88]	; 0x58
 8008404:	e001      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d033      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008420:	d01c      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008422:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008426:	d816      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842c:	d003      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800842e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008432:	d007      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008434:	e00f      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008436:	4b82      	ldr	r3, [pc, #520]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	4a81      	ldr	r2, [pc, #516]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800843c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008442:	e00c      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3324      	adds	r3, #36	; 0x24
 8008448:	2101      	movs	r1, #1
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fc6a 	bl	8008d24 <RCCEx_PLL3_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008454:	e003      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
      break;
 800845a:	e000      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800845c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008464:	4b76      	ldr	r3, [pc, #472]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008472:	4973      	ldr	r1, [pc, #460]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008474:	4313      	orrs	r3, r2
 8008476:	654b      	str	r3, [r1, #84]	; 0x54
 8008478:	e001      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d029      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008496:	d007      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008498:	e00f      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849a:	4b69      	ldr	r3, [pc, #420]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	4a68      	ldr	r2, [pc, #416]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80084a6:	e00b      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	2102      	movs	r1, #2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fb86 	bl	8008bc0 <RCCEx_PLL2_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80084b8:	e002      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
      break;
 80084be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084c6:	4b5e      	ldr	r3, [pc, #376]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	495b      	ldr	r1, [pc, #364]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80084d8:	e001      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3324      	adds	r3, #36	; 0x24
 80084ee:	2102      	movs	r1, #2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fc17 	bl	8008d24 <RCCEx_PLL3_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d030      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008514:	d017      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851a:	d811      	bhi.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800851c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008520:	d013      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008526:	d80b      	bhi.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d010      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800852c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008530:	d106      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008532:	4b43      	ldr	r3, [pc, #268]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	4a42      	ldr	r2, [pc, #264]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800853c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800853e:	e007      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	75fb      	strb	r3, [r7, #23]
      break;
 8008544:	e004      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008546:	bf00      	nop
 8008548:	e002      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800854e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d109      	bne.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008556:	4b3a      	ldr	r3, [pc, #232]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008562:	4937      	ldr	r1, [pc, #220]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008564:	4313      	orrs	r3, r2
 8008566:	654b      	str	r3, [r1, #84]	; 0x54
 8008568:	e001      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d008      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800857a:	4b31      	ldr	r3, [pc, #196]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800857c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008586:	492e      	ldr	r1, [pc, #184]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008588:	4313      	orrs	r3, r2
 800858a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d009      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008598:	4b29      	ldr	r3, [pc, #164]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085a6:	4926      	ldr	r1, [pc, #152]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d008      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085b8:	4b21      	ldr	r3, [pc, #132]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c4:	491e      	ldr	r1, [pc, #120]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085d6:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	4a19      	ldr	r2, [pc, #100]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085e0:	6113      	str	r3, [r2, #16]
 80085e2:	4b17      	ldr	r3, [pc, #92]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80085ec:	4914      	ldr	r1, [pc, #80]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da08      	bge.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008606:	490e      	ldr	r1, [pc, #56]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008608:	4313      	orrs	r3, r2
 800860a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d009      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008618:	4b09      	ldr	r3, [pc, #36]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800861a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008626:	4906      	ldr	r1, [pc, #24]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008628:	4313      	orrs	r3, r2
 800862a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800862c:	7dbb      	ldrb	r3, [r7, #22]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e000      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	58024400 	.word	0x58024400

08008644 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008648:	f7ff f860 	bl	800770c <HAL_RCC_GetHCLKFreq>
 800864c:	4602      	mov	r2, r0
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	091b      	lsrs	r3, r3, #4
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	4904      	ldr	r1, [pc, #16]	; (800866c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800865a:	5ccb      	ldrb	r3, [r1, r3]
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008664:	4618      	mov	r0, r3
 8008666:	bd80      	pop	{r7, pc}
 8008668:	58024400 	.word	0x58024400
 800866c:	0800f360 	.word	0x0800f360

08008670 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008670:	b480      	push	{r7}
 8008672:	b089      	sub	sp, #36	; 0x24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008678:	4ba1      	ldr	r3, [pc, #644]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008682:	4b9f      	ldr	r3, [pc, #636]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	0b1b      	lsrs	r3, r3, #12
 8008688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800868c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800868e:	4b9c      	ldr	r3, [pc, #624]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800869a:	4b99      	ldr	r3, [pc, #612]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	08db      	lsrs	r3, r3, #3
 80086a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	fb02 f303 	mul.w	r3, r2, r3
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8111 	beq.w	80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	f000 8083 	beq.w	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	f200 80a1 	bhi.w	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d056      	beq.n	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086da:	e099      	b.n	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086dc:	4b88      	ldr	r3, [pc, #544]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d02d      	beq.n	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086e8:	4b85      	ldr	r3, [pc, #532]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	08db      	lsrs	r3, r3, #3
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	4a84      	ldr	r2, [pc, #528]	; (8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
 80086f8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b7b      	ldr	r3, [pc, #492]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008742:	e087      	b.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800890c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008756:	4b6a      	ldr	r3, [pc, #424]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	ed97 6a03 	vldr	s12, [r7, #12]
 800876a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008786:	e065      	b.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b59      	ldr	r3, [pc, #356]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087ca:	e043      	b.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087de:	4b48      	ldr	r3, [pc, #288]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800880e:	e021      	b.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b37      	ldr	r3, [pc, #220]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a03 	vldr	s12, [r7, #12]
 8008836:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008852:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008854:	4b2a      	ldr	r3, [pc, #168]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	0a5b      	lsrs	r3, r3, #9
 800885a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800886a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800886e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887a:	ee17 2a90 	vmov	r2, s15
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008882:	4b1f      	ldr	r3, [pc, #124]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888c:	ee07 3a90 	vmov	s15, r3
 8008890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800889c:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a8:	ee17 2a90 	vmov	r2, s15
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80088b0:	4b13      	ldr	r3, [pc, #76]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b4:	0e1b      	lsrs	r3, r3, #24
 80088b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d6:	ee17 2a90 	vmov	r2, s15
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088de:	e008      	b.n	80088f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
}
 80088f2:	bf00      	nop
 80088f4:	3724      	adds	r7, #36	; 0x24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400
 8008904:	03d09000 	.word	0x03d09000
 8008908:	46000000 	.word	0x46000000
 800890c:	4c742400 	.word	0x4c742400
 8008910:	4a742400 	.word	0x4a742400
 8008914:	4c371b00 	.word	0x4c371b00

08008918 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008918:	b480      	push	{r7}
 800891a:	b089      	sub	sp, #36	; 0x24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008920:	4ba1      	ldr	r3, [pc, #644]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800892a:	4b9f      	ldr	r3, [pc, #636]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	0d1b      	lsrs	r3, r3, #20
 8008930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008934:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008936:	4b9c      	ldr	r3, [pc, #624]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008942:	4b99      	ldr	r3, [pc, #612]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008946:	08db      	lsrs	r3, r3, #3
 8008948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	fb02 f303 	mul.w	r3, r2, r3
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 8111 	beq.w	8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b02      	cmp	r3, #2
 800896a:	f000 8083 	beq.w	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b02      	cmp	r3, #2
 8008972:	f200 80a1 	bhi.w	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d056      	beq.n	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008982:	e099      	b.n	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008984:	4b88      	ldr	r3, [pc, #544]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02d      	beq.n	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008990:	4b85      	ldr	r3, [pc, #532]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	08db      	lsrs	r3, r3, #3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	4a84      	ldr	r2, [pc, #528]	; (8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b7b      	ldr	r3, [pc, #492]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80089ea:	e087      	b.n	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b6a      	ldr	r3, [pc, #424]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a2e:	e065      	b.n	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b59      	ldr	r3, [pc, #356]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a72:	e043      	b.n	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b48      	ldr	r3, [pc, #288]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ab6:	e021      	b.n	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b37      	ldr	r3, [pc, #220]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008afa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008afc:	4b2a      	ldr	r3, [pc, #168]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b00:	0a5b      	lsrs	r3, r3, #9
 8008b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b22:	ee17 2a90 	vmov	r2, s15
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008b2a:	4b1f      	ldr	r3, [pc, #124]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	0c1b      	lsrs	r3, r3, #16
 8008b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b34:	ee07 3a90 	vmov	s15, r3
 8008b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b50:	ee17 2a90 	vmov	r2, s15
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008b58:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5c:	0e1b      	lsrs	r3, r3, #24
 8008b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b7e:	ee17 2a90 	vmov	r2, s15
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b86:	e008      	b.n	8008b9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	609a      	str	r2, [r3, #8]
}
 8008b9a:	bf00      	nop
 8008b9c:	3724      	adds	r7, #36	; 0x24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	58024400 	.word	0x58024400
 8008bac:	03d09000 	.word	0x03d09000
 8008bb0:	46000000 	.word	0x46000000
 8008bb4:	4c742400 	.word	0x4c742400
 8008bb8:	4a742400 	.word	0x4a742400
 8008bbc:	4c371b00 	.word	0x4c371b00

08008bc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bce:	4b53      	ldr	r3, [pc, #332]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	f003 0303 	and.w	r3, r3, #3
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d101      	bne.n	8008bde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e099      	b.n	8008d12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008bde:	4b4f      	ldr	r3, [pc, #316]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a4e      	ldr	r2, [pc, #312]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008be4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bea:	f7fa ffd3 	bl	8003b94 <HAL_GetTick>
 8008bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bf0:	e008      	b.n	8008c04 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bf2:	f7fa ffcf 	bl	8003b94 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d901      	bls.n	8008c04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e086      	b.n	8008d12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c04:	4b45      	ldr	r3, [pc, #276]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1f0      	bne.n	8008bf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c10:	4b42      	ldr	r3, [pc, #264]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	031b      	lsls	r3, r3, #12
 8008c1e:	493f      	ldr	r1, [pc, #252]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	628b      	str	r3, [r1, #40]	; 0x28
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	025b      	lsls	r3, r3, #9
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	041b      	lsls	r3, r3, #16
 8008c42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	061b      	lsls	r3, r3, #24
 8008c50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c54:	4931      	ldr	r1, [pc, #196]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c5a:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	492d      	ldr	r1, [pc, #180]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c6c:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	f023 0220 	bic.w	r2, r3, #32
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	4928      	ldr	r1, [pc, #160]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c7e:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c82:	4a26      	ldr	r2, [pc, #152]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c84:	f023 0310 	bic.w	r3, r3, #16
 8008c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c8a:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c8e:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <RCCEx_PLL2_Config+0x160>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	69d2      	ldr	r2, [r2, #28]
 8008c96:	00d2      	lsls	r2, r2, #3
 8008c98:	4920      	ldr	r1, [pc, #128]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c9e:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	4a1e      	ldr	r2, [pc, #120]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ca4:	f043 0310 	orr.w	r3, r3, #16
 8008ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	4a19      	ldr	r2, [pc, #100]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cbc:	e00f      	b.n	8008cde <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d106      	bne.n	8008cd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008cc4:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	4a14      	ldr	r2, [pc, #80]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cd0:	e005      	b.n	8008cde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008cd2:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008cde:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a0e      	ldr	r2, [pc, #56]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cea:	f7fa ff53 	bl	8003b94 <HAL_GetTick>
 8008cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cf0:	e008      	b.n	8008d04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cf2:	f7fa ff4f 	bl	8003b94 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e006      	b.n	8008d12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	ffff0007 	.word	0xffff0007

08008d24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d32:	4b53      	ldr	r3, [pc, #332]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d101      	bne.n	8008d42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e099      	b.n	8008e76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d42:	4b4f      	ldr	r3, [pc, #316]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a4e      	ldr	r2, [pc, #312]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d4e:	f7fa ff21 	bl	8003b94 <HAL_GetTick>
 8008d52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d54:	e008      	b.n	8008d68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d56:	f7fa ff1d 	bl	8003b94 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e086      	b.n	8008e76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d68:	4b45      	ldr	r3, [pc, #276]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f0      	bne.n	8008d56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d74:	4b42      	ldr	r3, [pc, #264]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	051b      	lsls	r3, r3, #20
 8008d82:	493f      	ldr	r1, [pc, #252]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	628b      	str	r3, [r1, #40]	; 0x28
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	025b      	lsls	r3, r3, #9
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	041b      	lsls	r3, r3, #16
 8008da6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	061b      	lsls	r3, r3, #24
 8008db4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008db8:	4931      	ldr	r1, [pc, #196]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008dbe:	4b30      	ldr	r3, [pc, #192]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	492d      	ldr	r1, [pc, #180]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008dd0:	4b2b      	ldr	r3, [pc, #172]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	4928      	ldr	r1, [pc, #160]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008de2:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	4a26      	ldr	r2, [pc, #152]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008dee:	4b24      	ldr	r3, [pc, #144]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008df2:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <RCCEx_PLL3_Config+0x160>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	69d2      	ldr	r2, [r2, #28]
 8008dfa:	00d2      	lsls	r2, r2, #3
 8008dfc:	4920      	ldr	r1, [pc, #128]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e02:	4b1f      	ldr	r3, [pc, #124]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d106      	bne.n	8008e22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e14:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e20:	e00f      	b.n	8008e42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d106      	bne.n	8008e36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4a14      	ldr	r2, [pc, #80]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e34:	e005      	b.n	8008e42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e36:	4b12      	ldr	r3, [pc, #72]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a0e      	ldr	r2, [pc, #56]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e4e:	f7fa fea1 	bl	8003b94 <HAL_GetTick>
 8008e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e54:	e008      	b.n	8008e68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e56:	f7fa fe9d 	bl	8003b94 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d901      	bls.n	8008e68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e006      	b.n	8008e76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0f0      	beq.n	8008e56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	58024400 	.word	0x58024400
 8008e84:	ffff0007 	.word	0xffff0007

08008e88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e0f1      	b.n	800907e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a78      	ldr	r2, [pc, #480]	; (8009088 <HAL_SPI_Init+0x200>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00f      	beq.n	8008eca <HAL_SPI_Init+0x42>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a77      	ldr	r2, [pc, #476]	; (800908c <HAL_SPI_Init+0x204>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00a      	beq.n	8008eca <HAL_SPI_Init+0x42>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a75      	ldr	r2, [pc, #468]	; (8009090 <HAL_SPI_Init+0x208>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d005      	beq.n	8008eca <HAL_SPI_Init+0x42>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2b0f      	cmp	r3, #15
 8008ec4:	d901      	bls.n	8008eca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e0d9      	b.n	800907e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f8e2 	bl	8009094 <SPI_GetPacketSize>
 8008ed0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a6c      	ldr	r2, [pc, #432]	; (8009088 <HAL_SPI_Init+0x200>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00c      	beq.n	8008ef6 <HAL_SPI_Init+0x6e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a6a      	ldr	r2, [pc, #424]	; (800908c <HAL_SPI_Init+0x204>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d007      	beq.n	8008ef6 <HAL_SPI_Init+0x6e>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a69      	ldr	r2, [pc, #420]	; (8009090 <HAL_SPI_Init+0x208>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d002      	beq.n	8008ef6 <HAL_SPI_Init+0x6e>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	d811      	bhi.n	8008f1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008efa:	4a63      	ldr	r2, [pc, #396]	; (8009088 <HAL_SPI_Init+0x200>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d009      	beq.n	8008f14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a61      	ldr	r2, [pc, #388]	; (800908c <HAL_SPI_Init+0x204>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d004      	beq.n	8008f14 <HAL_SPI_Init+0x8c>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a60      	ldr	r2, [pc, #384]	; (8009090 <HAL_SPI_Init+0x208>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d104      	bne.n	8008f1e <HAL_SPI_Init+0x96>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b10      	cmp	r3, #16
 8008f18:	d901      	bls.n	8008f1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0af      	b.n	800907e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7f9 fea8 	bl	8002c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0201 	bic.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008f5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f64:	d119      	bne.n	8008f9a <HAL_SPI_Init+0x112>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f6e:	d103      	bne.n	8008f78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10c      	bne.n	8008f9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f88:	d107      	bne.n	8008f9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69da      	ldr	r2, [r3, #28]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fac:	ea42 0103 	orr.w	r1, r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ffa:	ea42 0103 	orr.w	r1, r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d113      	bne.n	800903a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009024:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009038:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0201 	bic.w	r2, r2, #1
 8009048:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	40013000 	.word	0x40013000
 800908c:	40003800 	.word	0x40003800
 8009090:	40003c00 	.word	0x40003c00

08009094 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	3301      	adds	r3, #1
 80090a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	3307      	adds	r3, #7
 80090b2:	08db      	lsrs	r3, r3, #3
 80090b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e049      	b.n	8009170 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7f9 fe2f 	bl	8002d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f000 fd71 	bl	8009bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b01      	cmp	r3, #1
 800918a:	d001      	beq.n	8009190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e054      	b.n	800923a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a26      	ldr	r2, [pc, #152]	; (8009248 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d022      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ba:	d01d      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a22      	ldr	r2, [pc, #136]	; (800924c <HAL_TIM_Base_Start_IT+0xd4>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d018      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a21      	ldr	r2, [pc, #132]	; (8009250 <HAL_TIM_Base_Start_IT+0xd8>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d013      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1f      	ldr	r2, [pc, #124]	; (8009254 <HAL_TIM_Base_Start_IT+0xdc>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00e      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <HAL_TIM_Base_Start_IT+0xe0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d009      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1c      	ldr	r2, [pc, #112]	; (800925c <HAL_TIM_Base_Start_IT+0xe4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d004      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <HAL_TIM_Base_Start_IT+0xe8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d115      	bne.n	8009224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	4b19      	ldr	r3, [pc, #100]	; (8009264 <HAL_TIM_Base_Start_IT+0xec>)
 8009200:	4013      	ands	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b06      	cmp	r3, #6
 8009208:	d015      	beq.n	8009236 <HAL_TIM_Base_Start_IT+0xbe>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009210:	d011      	beq.n	8009236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0201 	orr.w	r2, r2, #1
 8009220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009222:	e008      	b.n	8009236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0201 	orr.w	r2, r2, #1
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	e000      	b.n	8009238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40010000 	.word	0x40010000
 800924c:	40000400 	.word	0x40000400
 8009250:	40000800 	.word	0x40000800
 8009254:	40000c00 	.word	0x40000c00
 8009258:	40010400 	.word	0x40010400
 800925c:	40001800 	.word	0x40001800
 8009260:	40014000 	.word	0x40014000
 8009264:	00010007 	.word	0x00010007

08009268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e049      	b.n	800930e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f841 	bl	8009316 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f000 fca2 	bl	8009bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
	...

0800932c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <HAL_TIM_PWM_Start+0x24>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	bf14      	ite	ne
 8009348:	2301      	movne	r3, #1
 800934a:	2300      	moveq	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	e03c      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b04      	cmp	r3, #4
 8009354:	d109      	bne.n	800936a <HAL_TIM_PWM_Start+0x3e>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b01      	cmp	r3, #1
 8009360:	bf14      	ite	ne
 8009362:	2301      	movne	r3, #1
 8009364:	2300      	moveq	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	e02f      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b08      	cmp	r3, #8
 800936e:	d109      	bne.n	8009384 <HAL_TIM_PWM_Start+0x58>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	bf14      	ite	ne
 800937c:	2301      	movne	r3, #1
 800937e:	2300      	moveq	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	e022      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b0c      	cmp	r3, #12
 8009388:	d109      	bne.n	800939e <HAL_TIM_PWM_Start+0x72>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b01      	cmp	r3, #1
 8009394:	bf14      	ite	ne
 8009396:	2301      	movne	r3, #1
 8009398:	2300      	moveq	r3, #0
 800939a:	b2db      	uxtb	r3, r3
 800939c:	e015      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b10      	cmp	r3, #16
 80093a2:	d109      	bne.n	80093b8 <HAL_TIM_PWM_Start+0x8c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	bf14      	ite	ne
 80093b0:	2301      	movne	r3, #1
 80093b2:	2300      	moveq	r3, #0
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	e008      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	bf14      	ite	ne
 80093c4:	2301      	movne	r3, #1
 80093c6:	2300      	moveq	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e0a1      	b.n	8009516 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <HAL_TIM_PWM_Start+0xb6>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e0:	e023      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d104      	bne.n	80093f2 <HAL_TIM_PWM_Start+0xc6>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093f0:	e01b      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d104      	bne.n	8009402 <HAL_TIM_PWM_Start+0xd6>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009400:	e013      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b0c      	cmp	r3, #12
 8009406:	d104      	bne.n	8009412 <HAL_TIM_PWM_Start+0xe6>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009410:	e00b      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b10      	cmp	r3, #16
 8009416:	d104      	bne.n	8009422 <HAL_TIM_PWM_Start+0xf6>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009420:	e003      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2201      	movs	r2, #1
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 ffea 	bl	800a40c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a38      	ldr	r2, [pc, #224]	; (8009520 <HAL_TIM_PWM_Start+0x1f4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d013      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a37      	ldr	r2, [pc, #220]	; (8009524 <HAL_TIM_PWM_Start+0x1f8>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00e      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a35      	ldr	r2, [pc, #212]	; (8009528 <HAL_TIM_PWM_Start+0x1fc>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d009      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a34      	ldr	r2, [pc, #208]	; (800952c <HAL_TIM_PWM_Start+0x200>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d004      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a32      	ldr	r2, [pc, #200]	; (8009530 <HAL_TIM_PWM_Start+0x204>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d101      	bne.n	800946e <HAL_TIM_PWM_Start+0x142>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <HAL_TIM_PWM_Start+0x144>
 800946e:	2300      	movs	r3, #0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009482:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a25      	ldr	r2, [pc, #148]	; (8009520 <HAL_TIM_PWM_Start+0x1f4>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d022      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009496:	d01d      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a25      	ldr	r2, [pc, #148]	; (8009534 <HAL_TIM_PWM_Start+0x208>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d018      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a24      	ldr	r2, [pc, #144]	; (8009538 <HAL_TIM_PWM_Start+0x20c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d013      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a22      	ldr	r2, [pc, #136]	; (800953c <HAL_TIM_PWM_Start+0x210>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00e      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a1a      	ldr	r2, [pc, #104]	; (8009524 <HAL_TIM_PWM_Start+0x1f8>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d009      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <HAL_TIM_PWM_Start+0x214>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d004      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a16      	ldr	r2, [pc, #88]	; (8009528 <HAL_TIM_PWM_Start+0x1fc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d115      	bne.n	8009500 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	4b1a      	ldr	r3, [pc, #104]	; (8009544 <HAL_TIM_PWM_Start+0x218>)
 80094dc:	4013      	ands	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b06      	cmp	r3, #6
 80094e4:	d015      	beq.n	8009512 <HAL_TIM_PWM_Start+0x1e6>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ec:	d011      	beq.n	8009512 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0201 	orr.w	r2, r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fe:	e008      	b.n	8009512 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e000      	b.n	8009514 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	40010000 	.word	0x40010000
 8009524:	40010400 	.word	0x40010400
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40000c00 	.word	0x40000c00
 8009540:	40001800 	.word	0x40001800
 8009544:	00010007 	.word	0x00010007

08009548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b02      	cmp	r3, #2
 800955c:	d122      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	f003 0302 	and.w	r3, r3, #2
 8009568:	2b02      	cmp	r3, #2
 800956a:	d11b      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f06f 0202 	mvn.w	r2, #2
 8009574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fb12 	bl	8009bb4 <HAL_TIM_IC_CaptureCallback>
 8009590:	e005      	b.n	800959e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fb04 	bl	8009ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb15 	bl	8009bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d122      	bne.n	80095f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d11b      	bne.n	80095f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0204 	mvn.w	r2, #4
 80095c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2202      	movs	r2, #2
 80095ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fae8 	bl	8009bb4 <HAL_TIM_IC_CaptureCallback>
 80095e4:	e005      	b.n	80095f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fada 	bl	8009ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 faeb 	bl	8009bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b08      	cmp	r3, #8
 8009604:	d122      	bne.n	800964c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b08      	cmp	r3, #8
 8009612:	d11b      	bne.n	800964c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f06f 0208 	mvn.w	r2, #8
 800961c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2204      	movs	r2, #4
 8009622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fabe 	bl	8009bb4 <HAL_TIM_IC_CaptureCallback>
 8009638:	e005      	b.n	8009646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fab0 	bl	8009ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fac1 	bl	8009bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f003 0310 	and.w	r3, r3, #16
 8009656:	2b10      	cmp	r3, #16
 8009658:	d122      	bne.n	80096a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b10      	cmp	r3, #16
 8009666:	d11b      	bne.n	80096a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f06f 0210 	mvn.w	r2, #16
 8009670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2208      	movs	r2, #8
 8009676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fa94 	bl	8009bb4 <HAL_TIM_IC_CaptureCallback>
 800968c:	e005      	b.n	800969a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fa86 	bl	8009ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fa97 	bl	8009bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d10e      	bne.n	80096cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d107      	bne.n	80096cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f06f 0201 	mvn.w	r2, #1
 80096c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7f7 ff5a 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d6:	2b80      	cmp	r3, #128	; 0x80
 80096d8:	d10e      	bne.n	80096f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e4:	2b80      	cmp	r3, #128	; 0x80
 80096e6:	d107      	bne.n	80096f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 ffc6 	bl	800a684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009706:	d10e      	bne.n	8009726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009712:	2b80      	cmp	r3, #128	; 0x80
 8009714:	d107      	bne.n	8009726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800971e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 ffb9 	bl	800a698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	d10e      	bne.n	8009752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	d107      	bne.n	8009752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800974a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fa45 	bl	8009bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b20      	cmp	r3, #32
 800975e:	d10e      	bne.n	800977e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b20      	cmp	r3, #32
 800976c:	d107      	bne.n	800977e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f06f 0220 	mvn.w	r2, #32
 8009776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 ff79 	bl	800a670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e0ff      	b.n	80099a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b14      	cmp	r3, #20
 80097b2:	f200 80f0 	bhi.w	8009996 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80097b6:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	08009811 	.word	0x08009811
 80097c0:	08009997 	.word	0x08009997
 80097c4:	08009997 	.word	0x08009997
 80097c8:	08009997 	.word	0x08009997
 80097cc:	08009851 	.word	0x08009851
 80097d0:	08009997 	.word	0x08009997
 80097d4:	08009997 	.word	0x08009997
 80097d8:	08009997 	.word	0x08009997
 80097dc:	08009893 	.word	0x08009893
 80097e0:	08009997 	.word	0x08009997
 80097e4:	08009997 	.word	0x08009997
 80097e8:	08009997 	.word	0x08009997
 80097ec:	080098d3 	.word	0x080098d3
 80097f0:	08009997 	.word	0x08009997
 80097f4:	08009997 	.word	0x08009997
 80097f8:	08009997 	.word	0x08009997
 80097fc:	08009915 	.word	0x08009915
 8009800:	08009997 	.word	0x08009997
 8009804:	08009997 	.word	0x08009997
 8009808:	08009997 	.word	0x08009997
 800980c:	08009955 	.word	0x08009955
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fa84 	bl	8009d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0208 	orr.w	r2, r2, #8
 800982a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0204 	bic.w	r2, r2, #4
 800983a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6999      	ldr	r1, [r3, #24]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	691a      	ldr	r2, [r3, #16]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	619a      	str	r2, [r3, #24]
      break;
 800984e:	e0a5      	b.n	800999c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 faf4 	bl	8009e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800986a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800987a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6999      	ldr	r1, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	021a      	lsls	r2, r3, #8
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	619a      	str	r2, [r3, #24]
      break;
 8009890:	e084      	b.n	800999c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fb5d 	bl	8009f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	69da      	ldr	r2, [r3, #28]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f042 0208 	orr.w	r2, r2, #8
 80098ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69da      	ldr	r2, [r3, #28]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0204 	bic.w	r2, r2, #4
 80098bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69d9      	ldr	r1, [r3, #28]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	61da      	str	r2, [r3, #28]
      break;
 80098d0:	e064      	b.n	800999c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fbc5 	bl	800a068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69d9      	ldr	r1, [r3, #28]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	021a      	lsls	r2, r3, #8
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	61da      	str	r2, [r3, #28]
      break;
 8009912:	e043      	b.n	800999c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fc0e 	bl	800a13c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0208 	orr.w	r2, r2, #8
 800992e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0204 	bic.w	r2, r2, #4
 800993e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	691a      	ldr	r2, [r3, #16]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009952:	e023      	b.n	800999c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fc52 	bl	800a204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800996e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800997e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	021a      	lsls	r2, r3, #8
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009994:	e002      	b.n	800999c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	75fb      	strb	r3, [r7, #23]
      break;
 800999a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop

080099b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d101      	bne.n	80099cc <HAL_TIM_ConfigClockSource+0x1c>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e0dc      	b.n	8009b86 <HAL_TIM_ConfigClockSource+0x1d6>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	4b6a      	ldr	r3, [pc, #424]	; (8009b90 <HAL_TIM_ConfigClockSource+0x1e0>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a64      	ldr	r2, [pc, #400]	; (8009b94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	f000 80a9 	beq.w	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a08:	4a62      	ldr	r2, [pc, #392]	; (8009b94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	f200 80ae 	bhi.w	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a10:	4a61      	ldr	r2, [pc, #388]	; (8009b98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	f000 80a1 	beq.w	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a18:	4a5f      	ldr	r2, [pc, #380]	; (8009b98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	f200 80a6 	bhi.w	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a20:	4a5e      	ldr	r2, [pc, #376]	; (8009b9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	f000 8099 	beq.w	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a28:	4a5c      	ldr	r2, [pc, #368]	; (8009b9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	f200 809e 	bhi.w	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a34:	f000 8091 	beq.w	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a3c:	f200 8096 	bhi.w	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a44:	f000 8089 	beq.w	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a4c:	f200 808e 	bhi.w	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a54:	d03e      	beq.n	8009ad4 <HAL_TIM_ConfigClockSource+0x124>
 8009a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a5a:	f200 8087 	bhi.w	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a62:	f000 8086 	beq.w	8009b72 <HAL_TIM_ConfigClockSource+0x1c2>
 8009a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a6a:	d87f      	bhi.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a6c:	2b70      	cmp	r3, #112	; 0x70
 8009a6e:	d01a      	beq.n	8009aa6 <HAL_TIM_ConfigClockSource+0xf6>
 8009a70:	2b70      	cmp	r3, #112	; 0x70
 8009a72:	d87b      	bhi.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a74:	2b60      	cmp	r3, #96	; 0x60
 8009a76:	d050      	beq.n	8009b1a <HAL_TIM_ConfigClockSource+0x16a>
 8009a78:	2b60      	cmp	r3, #96	; 0x60
 8009a7a:	d877      	bhi.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a7c:	2b50      	cmp	r3, #80	; 0x50
 8009a7e:	d03c      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x14a>
 8009a80:	2b50      	cmp	r3, #80	; 0x50
 8009a82:	d873      	bhi.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a84:	2b40      	cmp	r3, #64	; 0x40
 8009a86:	d058      	beq.n	8009b3a <HAL_TIM_ConfigClockSource+0x18a>
 8009a88:	2b40      	cmp	r3, #64	; 0x40
 8009a8a:	d86f      	bhi.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a8c:	2b30      	cmp	r3, #48	; 0x30
 8009a8e:	d064      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a90:	2b30      	cmp	r3, #48	; 0x30
 8009a92:	d86b      	bhi.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a94:	2b20      	cmp	r3, #32
 8009a96:	d060      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	d867      	bhi.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d05c      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009aa0:	2b10      	cmp	r3, #16
 8009aa2:	d05a      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8009aa4:	e062      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	6899      	ldr	r1, [r3, #8]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f000 fc89 	bl	800a3cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	609a      	str	r2, [r3, #8]
      break;
 8009ad2:	e04f      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6818      	ldr	r0, [r3, #0]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	6899      	ldr	r1, [r3, #8]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f000 fc72 	bl	800a3cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689a      	ldr	r2, [r3, #8]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009af6:	609a      	str	r2, [r3, #8]
      break;
 8009af8:	e03c      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6818      	ldr	r0, [r3, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	6859      	ldr	r1, [r3, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f000 fbe2 	bl	800a2d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2150      	movs	r1, #80	; 0x50
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 fc3c 	bl	800a390 <TIM_ITRx_SetConfig>
      break;
 8009b18:	e02c      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	6859      	ldr	r1, [r3, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f000 fc01 	bl	800a32e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2160      	movs	r1, #96	; 0x60
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fc2c 	bl	800a390 <TIM_ITRx_SetConfig>
      break;
 8009b38:	e01c      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	6859      	ldr	r1, [r3, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	461a      	mov	r2, r3
 8009b48:	f000 fbc2 	bl	800a2d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2140      	movs	r1, #64	; 0x40
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fc1c 	bl	800a390 <TIM_ITRx_SetConfig>
      break;
 8009b58:	e00c      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4619      	mov	r1, r3
 8009b64:	4610      	mov	r0, r2
 8009b66:	f000 fc13 	bl	800a390 <TIM_ITRx_SetConfig>
      break;
 8009b6a:	e003      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b70:	e000      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	ffceff88 	.word	0xffceff88
 8009b94:	00100040 	.word	0x00100040
 8009b98:	00100030 	.word	0x00100030
 8009b9c:	00100020 	.word	0x00100020

08009ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a40      	ldr	r2, [pc, #256]	; (8009d04 <TIM_Base_SetConfig+0x114>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d013      	beq.n	8009c30 <TIM_Base_SetConfig+0x40>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c0e:	d00f      	beq.n	8009c30 <TIM_Base_SetConfig+0x40>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a3d      	ldr	r2, [pc, #244]	; (8009d08 <TIM_Base_SetConfig+0x118>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00b      	beq.n	8009c30 <TIM_Base_SetConfig+0x40>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a3c      	ldr	r2, [pc, #240]	; (8009d0c <TIM_Base_SetConfig+0x11c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d007      	beq.n	8009c30 <TIM_Base_SetConfig+0x40>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a3b      	ldr	r2, [pc, #236]	; (8009d10 <TIM_Base_SetConfig+0x120>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d003      	beq.n	8009c30 <TIM_Base_SetConfig+0x40>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a3a      	ldr	r2, [pc, #232]	; (8009d14 <TIM_Base_SetConfig+0x124>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d108      	bne.n	8009c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a2f      	ldr	r2, [pc, #188]	; (8009d04 <TIM_Base_SetConfig+0x114>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d01f      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c50:	d01b      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a2c      	ldr	r2, [pc, #176]	; (8009d08 <TIM_Base_SetConfig+0x118>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d017      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a2b      	ldr	r2, [pc, #172]	; (8009d0c <TIM_Base_SetConfig+0x11c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d013      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a2a      	ldr	r2, [pc, #168]	; (8009d10 <TIM_Base_SetConfig+0x120>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d00f      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a29      	ldr	r2, [pc, #164]	; (8009d14 <TIM_Base_SetConfig+0x124>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d00b      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a28      	ldr	r2, [pc, #160]	; (8009d18 <TIM_Base_SetConfig+0x128>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d007      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a27      	ldr	r2, [pc, #156]	; (8009d1c <TIM_Base_SetConfig+0x12c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d003      	beq.n	8009c8a <TIM_Base_SetConfig+0x9a>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a26      	ldr	r2, [pc, #152]	; (8009d20 <TIM_Base_SetConfig+0x130>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d108      	bne.n	8009c9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a10      	ldr	r2, [pc, #64]	; (8009d04 <TIM_Base_SetConfig+0x114>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00f      	beq.n	8009ce8 <TIM_Base_SetConfig+0xf8>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a12      	ldr	r2, [pc, #72]	; (8009d14 <TIM_Base_SetConfig+0x124>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00b      	beq.n	8009ce8 <TIM_Base_SetConfig+0xf8>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a11      	ldr	r2, [pc, #68]	; (8009d18 <TIM_Base_SetConfig+0x128>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d007      	beq.n	8009ce8 <TIM_Base_SetConfig+0xf8>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a10      	ldr	r2, [pc, #64]	; (8009d1c <TIM_Base_SetConfig+0x12c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d003      	beq.n	8009ce8 <TIM_Base_SetConfig+0xf8>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a0f      	ldr	r2, [pc, #60]	; (8009d20 <TIM_Base_SetConfig+0x130>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d103      	bne.n	8009cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	691a      	ldr	r2, [r3, #16]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	615a      	str	r2, [r3, #20]
}
 8009cf6:	bf00      	nop
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	40010000 	.word	0x40010000
 8009d08:	40000400 	.word	0x40000400
 8009d0c:	40000800 	.word	0x40000800
 8009d10:	40000c00 	.word	0x40000c00
 8009d14:	40010400 	.word	0x40010400
 8009d18:	40014000 	.word	0x40014000
 8009d1c:	40014400 	.word	0x40014400
 8009d20:	40014800 	.word	0x40014800

08009d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b087      	sub	sp, #28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	f023 0201 	bic.w	r2, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4b37      	ldr	r3, [pc, #220]	; (8009e2c <TIM_OC1_SetConfig+0x108>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0303 	bic.w	r3, r3, #3
 8009d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f023 0302 	bic.w	r3, r3, #2
 8009d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a2d      	ldr	r2, [pc, #180]	; (8009e30 <TIM_OC1_SetConfig+0x10c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d00f      	beq.n	8009da0 <TIM_OC1_SetConfig+0x7c>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a2c      	ldr	r2, [pc, #176]	; (8009e34 <TIM_OC1_SetConfig+0x110>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00b      	beq.n	8009da0 <TIM_OC1_SetConfig+0x7c>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a2b      	ldr	r2, [pc, #172]	; (8009e38 <TIM_OC1_SetConfig+0x114>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d007      	beq.n	8009da0 <TIM_OC1_SetConfig+0x7c>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a2a      	ldr	r2, [pc, #168]	; (8009e3c <TIM_OC1_SetConfig+0x118>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d003      	beq.n	8009da0 <TIM_OC1_SetConfig+0x7c>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a29      	ldr	r2, [pc, #164]	; (8009e40 <TIM_OC1_SetConfig+0x11c>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d10c      	bne.n	8009dba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f023 0308 	bic.w	r3, r3, #8
 8009da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f023 0304 	bic.w	r3, r3, #4
 8009db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a1c      	ldr	r2, [pc, #112]	; (8009e30 <TIM_OC1_SetConfig+0x10c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00f      	beq.n	8009de2 <TIM_OC1_SetConfig+0xbe>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a1b      	ldr	r2, [pc, #108]	; (8009e34 <TIM_OC1_SetConfig+0x110>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00b      	beq.n	8009de2 <TIM_OC1_SetConfig+0xbe>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a1a      	ldr	r2, [pc, #104]	; (8009e38 <TIM_OC1_SetConfig+0x114>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d007      	beq.n	8009de2 <TIM_OC1_SetConfig+0xbe>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a19      	ldr	r2, [pc, #100]	; (8009e3c <TIM_OC1_SetConfig+0x118>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d003      	beq.n	8009de2 <TIM_OC1_SetConfig+0xbe>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a18      	ldr	r2, [pc, #96]	; (8009e40 <TIM_OC1_SetConfig+0x11c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d111      	bne.n	8009e06 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	621a      	str	r2, [r3, #32]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	fffeff8f 	.word	0xfffeff8f
 8009e30:	40010000 	.word	0x40010000
 8009e34:	40010400 	.word	0x40010400
 8009e38:	40014000 	.word	0x40014000
 8009e3c:	40014400 	.word	0x40014400
 8009e40:	40014800 	.word	0x40014800

08009e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f023 0210 	bic.w	r2, r3, #16
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4b34      	ldr	r3, [pc, #208]	; (8009f40 <TIM_OC2_SetConfig+0xfc>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	f023 0320 	bic.w	r3, r3, #32
 8009e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	011b      	lsls	r3, r3, #4
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a29      	ldr	r2, [pc, #164]	; (8009f44 <TIM_OC2_SetConfig+0x100>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d003      	beq.n	8009eac <TIM_OC2_SetConfig+0x68>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a28      	ldr	r2, [pc, #160]	; (8009f48 <TIM_OC2_SetConfig+0x104>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d10d      	bne.n	8009ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a1e      	ldr	r2, [pc, #120]	; (8009f44 <TIM_OC2_SetConfig+0x100>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00f      	beq.n	8009ef0 <TIM_OC2_SetConfig+0xac>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a1d      	ldr	r2, [pc, #116]	; (8009f48 <TIM_OC2_SetConfig+0x104>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00b      	beq.n	8009ef0 <TIM_OC2_SetConfig+0xac>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a1c      	ldr	r2, [pc, #112]	; (8009f4c <TIM_OC2_SetConfig+0x108>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <TIM_OC2_SetConfig+0xac>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	; (8009f50 <TIM_OC2_SetConfig+0x10c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_OC2_SetConfig+0xac>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a1a      	ldr	r2, [pc, #104]	; (8009f54 <TIM_OC2_SetConfig+0x110>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d113      	bne.n	8009f18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	feff8fff 	.word	0xfeff8fff
 8009f44:	40010000 	.word	0x40010000
 8009f48:	40010400 	.word	0x40010400
 8009f4c:	40014000 	.word	0x40014000
 8009f50:	40014400 	.word	0x40014400
 8009f54:	40014800 	.word	0x40014800

08009f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4b33      	ldr	r3, [pc, #204]	; (800a050 <TIM_OC3_SetConfig+0xf8>)
 8009f84:	4013      	ands	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 0303 	bic.w	r3, r3, #3
 8009f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a28      	ldr	r2, [pc, #160]	; (800a054 <TIM_OC3_SetConfig+0xfc>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d003      	beq.n	8009fbe <TIM_OC3_SetConfig+0x66>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a27      	ldr	r2, [pc, #156]	; (800a058 <TIM_OC3_SetConfig+0x100>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d10d      	bne.n	8009fda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	021b      	lsls	r3, r3, #8
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a1d      	ldr	r2, [pc, #116]	; (800a054 <TIM_OC3_SetConfig+0xfc>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00f      	beq.n	800a002 <TIM_OC3_SetConfig+0xaa>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a1c      	ldr	r2, [pc, #112]	; (800a058 <TIM_OC3_SetConfig+0x100>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d00b      	beq.n	800a002 <TIM_OC3_SetConfig+0xaa>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a1b      	ldr	r2, [pc, #108]	; (800a05c <TIM_OC3_SetConfig+0x104>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d007      	beq.n	800a002 <TIM_OC3_SetConfig+0xaa>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a1a      	ldr	r2, [pc, #104]	; (800a060 <TIM_OC3_SetConfig+0x108>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d003      	beq.n	800a002 <TIM_OC3_SetConfig+0xaa>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a19      	ldr	r2, [pc, #100]	; (800a064 <TIM_OC3_SetConfig+0x10c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d113      	bne.n	800a02a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4313      	orrs	r3, r2
 800a028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	621a      	str	r2, [r3, #32]
}
 800a044:	bf00      	nop
 800a046:	371c      	adds	r7, #28
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	fffeff8f 	.word	0xfffeff8f
 800a054:	40010000 	.word	0x40010000
 800a058:	40010400 	.word	0x40010400
 800a05c:	40014000 	.word	0x40014000
 800a060:	40014400 	.word	0x40014400
 800a064:	40014800 	.word	0x40014800

0800a068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	4b24      	ldr	r3, [pc, #144]	; (800a124 <TIM_OC4_SetConfig+0xbc>)
 800a094:	4013      	ands	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	021b      	lsls	r3, r3, #8
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	031b      	lsls	r3, r3, #12
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a19      	ldr	r2, [pc, #100]	; (800a128 <TIM_OC4_SetConfig+0xc0>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d00f      	beq.n	800a0e8 <TIM_OC4_SetConfig+0x80>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a18      	ldr	r2, [pc, #96]	; (800a12c <TIM_OC4_SetConfig+0xc4>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00b      	beq.n	800a0e8 <TIM_OC4_SetConfig+0x80>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a17      	ldr	r2, [pc, #92]	; (800a130 <TIM_OC4_SetConfig+0xc8>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d007      	beq.n	800a0e8 <TIM_OC4_SetConfig+0x80>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a16      	ldr	r2, [pc, #88]	; (800a134 <TIM_OC4_SetConfig+0xcc>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d003      	beq.n	800a0e8 <TIM_OC4_SetConfig+0x80>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a15      	ldr	r2, [pc, #84]	; (800a138 <TIM_OC4_SetConfig+0xd0>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d109      	bne.n	800a0fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	019b      	lsls	r3, r3, #6
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	621a      	str	r2, [r3, #32]
}
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	feff8fff 	.word	0xfeff8fff
 800a128:	40010000 	.word	0x40010000
 800a12c:	40010400 	.word	0x40010400
 800a130:	40014000 	.word	0x40014000
 800a134:	40014400 	.word	0x40014400
 800a138:	40014800 	.word	0x40014800

0800a13c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4b21      	ldr	r3, [pc, #132]	; (800a1ec <TIM_OC5_SetConfig+0xb0>)
 800a168:	4013      	ands	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a17c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	041b      	lsls	r3, r3, #16
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a18      	ldr	r2, [pc, #96]	; (800a1f0 <TIM_OC5_SetConfig+0xb4>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00f      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x76>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a17      	ldr	r2, [pc, #92]	; (800a1f4 <TIM_OC5_SetConfig+0xb8>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x76>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a16      	ldr	r2, [pc, #88]	; (800a1f8 <TIM_OC5_SetConfig+0xbc>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d007      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x76>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a15      	ldr	r2, [pc, #84]	; (800a1fc <TIM_OC5_SetConfig+0xc0>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x76>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a14      	ldr	r2, [pc, #80]	; (800a200 <TIM_OC5_SetConfig+0xc4>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d109      	bne.n	800a1c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	621a      	str	r2, [r3, #32]
}
 800a1e0:	bf00      	nop
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	fffeff8f 	.word	0xfffeff8f
 800a1f0:	40010000 	.word	0x40010000
 800a1f4:	40010400 	.word	0x40010400
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	40014400 	.word	0x40014400
 800a200:	40014800 	.word	0x40014800

0800a204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	4b22      	ldr	r3, [pc, #136]	; (800a2b8 <TIM_OC6_SetConfig+0xb4>)
 800a230:	4013      	ands	r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	021b      	lsls	r3, r3, #8
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	051b      	lsls	r3, r3, #20
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a19      	ldr	r2, [pc, #100]	; (800a2bc <TIM_OC6_SetConfig+0xb8>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d00f      	beq.n	800a27c <TIM_OC6_SetConfig+0x78>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <TIM_OC6_SetConfig+0xbc>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d00b      	beq.n	800a27c <TIM_OC6_SetConfig+0x78>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a17      	ldr	r2, [pc, #92]	; (800a2c4 <TIM_OC6_SetConfig+0xc0>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d007      	beq.n	800a27c <TIM_OC6_SetConfig+0x78>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a16      	ldr	r2, [pc, #88]	; (800a2c8 <TIM_OC6_SetConfig+0xc4>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_OC6_SetConfig+0x78>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a15      	ldr	r2, [pc, #84]	; (800a2cc <TIM_OC6_SetConfig+0xc8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d109      	bne.n	800a290 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	029b      	lsls	r3, r3, #10
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	621a      	str	r2, [r3, #32]
}
 800a2aa:	bf00      	nop
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	feff8fff 	.word	0xfeff8fff
 800a2bc:	40010000 	.word	0x40010000
 800a2c0:	40010400 	.word	0x40010400
 800a2c4:	40014000 	.word	0x40014000
 800a2c8:	40014400 	.word	0x40014400
 800a2cc:	40014800 	.word	0x40014800

0800a2d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b087      	sub	sp, #28
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	f023 0201 	bic.w	r2, r3, #1
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f023 030a 	bic.w	r3, r3, #10
 800a30c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a32e:	b480      	push	{r7}
 800a330:	b087      	sub	sp, #28
 800a332:	af00      	add	r7, sp, #0
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	f023 0210 	bic.w	r2, r3, #16
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	031b      	lsls	r3, r3, #12
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	4313      	orrs	r3, r2
 800a362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a36a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	621a      	str	r2, [r3, #32]
}
 800a382:	bf00      	nop
 800a384:	371c      	adds	r7, #28
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
	...

0800a390 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <TIM_ITRx_SetConfig+0x38>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	f043 0307 	orr.w	r3, r3, #7
 800a3b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	609a      	str	r2, [r3, #8]
}
 800a3ba:	bf00      	nop
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	ffcfff8f 	.word	0xffcfff8f

0800a3cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b087      	sub	sp, #28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	021a      	lsls	r2, r3, #8
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	609a      	str	r2, [r3, #8]
}
 800a400:	bf00      	nop
 800a402:	371c      	adds	r7, #28
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f003 031f 	and.w	r3, r3, #31
 800a41e:	2201      	movs	r2, #1
 800a420:	fa02 f303 	lsl.w	r3, r2, r3
 800a424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a1a      	ldr	r2, [r3, #32]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	43db      	mvns	r3, r3
 800a42e:	401a      	ands	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a1a      	ldr	r2, [r3, #32]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f003 031f 	and.w	r3, r3, #31
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	fa01 f303 	lsl.w	r3, r1, r3
 800a444:	431a      	orrs	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	621a      	str	r2, [r3, #32]
}
 800a44a:	bf00      	nop
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
	...

0800a458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a46c:	2302      	movs	r3, #2
 800a46e:	e06d      	b.n	800a54c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2202      	movs	r2, #2
 800a47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a30      	ldr	r2, [pc, #192]	; (800a558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d004      	beq.n	800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a2f      	ldr	r2, [pc, #188]	; (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d108      	bne.n	800a4b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a20      	ldr	r2, [pc, #128]	; (800a558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d022      	beq.n	800a520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e2:	d01d      	beq.n	800a520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a1d      	ldr	r2, [pc, #116]	; (800a560 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d018      	beq.n	800a520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a1c      	ldr	r2, [pc, #112]	; (800a564 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d013      	beq.n	800a520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a1a      	ldr	r2, [pc, #104]	; (800a568 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00e      	beq.n	800a520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a15      	ldr	r2, [pc, #84]	; (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d009      	beq.n	800a520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a16      	ldr	r2, [pc, #88]	; (800a56c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d004      	beq.n	800a520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a15      	ldr	r2, [pc, #84]	; (800a570 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d10c      	bne.n	800a53a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a526:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	40010000 	.word	0x40010000
 800a55c:	40010400 	.word	0x40010400
 800a560:	40000400 	.word	0x40000400
 800a564:	40000800 	.word	0x40000800
 800a568:	40000c00 	.word	0x40000c00
 800a56c:	40001800 	.word	0x40001800
 800a570:	40014000 	.word	0x40014000

0800a574 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d101      	bne.n	800a590 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a58c:	2302      	movs	r3, #2
 800a58e:	e065      	b.n	800a65c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	041b      	lsls	r3, r3, #16
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a16      	ldr	r2, [pc, #88]	; (800a668 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d004      	beq.n	800a61e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a14      	ldr	r2, [pc, #80]	; (800a66c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d115      	bne.n	800a64a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	051b      	lsls	r3, r3, #20
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	40010000 	.word	0x40010000
 800a66c:	40010400 	.word	0x40010400

0800a670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e042      	b.n	800a744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7f8 fd4f 	bl	8003174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2224      	movs	r2, #36	; 0x24
 800a6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fd54 	bl	800b19c <UART_SetConfig>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d101      	bne.n	800a6fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e022      	b.n	800a744 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 faa8 	bl	800bc5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a71a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a72a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0201 	orr.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 fb2f 	bl	800bda0 <UART_CheckIdleState>
 800a742:	4603      	mov	r3, r0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08a      	sub	sp, #40	; 0x28
 800a750:	af02      	add	r7, sp, #8
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	4613      	mov	r3, r2
 800a75a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a762:	2b20      	cmp	r3, #32
 800a764:	f040 8083 	bne.w	800a86e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <HAL_UART_Transmit+0x28>
 800a76e:	88fb      	ldrh	r3, [r7, #6]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e07b      	b.n	800a870 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d101      	bne.n	800a786 <HAL_UART_Transmit+0x3a>
 800a782:	2302      	movs	r3, #2
 800a784:	e074      	b.n	800a870 <HAL_UART_Transmit+0x124>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2221      	movs	r2, #33	; 0x21
 800a79a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a79e:	f7f9 f9f9 	bl	8003b94 <HAL_GetTick>
 800a7a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	88fa      	ldrh	r2, [r7, #6]
 800a7a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	88fa      	ldrh	r2, [r7, #6]
 800a7b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7bc:	d108      	bne.n	800a7d0 <HAL_UART_Transmit+0x84>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d104      	bne.n	800a7d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	61bb      	str	r3, [r7, #24]
 800a7ce:	e003      	b.n	800a7d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a7e0:	e02c      	b.n	800a83c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2180      	movs	r1, #128	; 0x80
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f001 fb22 	bl	800be36 <UART_WaitOnFlagUntilTimeout>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e039      	b.n	800a870 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10b      	bne.n	800a81a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a810:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	3302      	adds	r3, #2
 800a816:	61bb      	str	r3, [r7, #24]
 800a818:	e007      	b.n	800a82a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	781a      	ldrb	r2, [r3, #0]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	3301      	adds	r3, #1
 800a828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a830:	b29b      	uxth	r3, r3
 800a832:	3b01      	subs	r3, #1
 800a834:	b29a      	uxth	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a842:	b29b      	uxth	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1cc      	bne.n	800a7e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2200      	movs	r2, #0
 800a850:	2140      	movs	r1, #64	; 0x40
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f001 faef 	bl	800be36 <UART_WaitOnFlagUntilTimeout>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e006      	b.n	800a870 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2220      	movs	r2, #32
 800a866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e000      	b.n	800a870 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a86e:	2302      	movs	r3, #2
  }
}
 800a870:	4618      	mov	r0, r3
 800a872:	3720      	adds	r7, #32
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08a      	sub	sp, #40	; 0x28
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	4613      	mov	r3, r2
 800a886:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88e:	2b20      	cmp	r3, #32
 800a890:	f040 80c0 	bne.w	800aa14 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <HAL_UART_Receive+0x28>
 800a89a:	88fb      	ldrh	r3, [r7, #6]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d101      	bne.n	800a8a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e0b8      	b.n	800aa16 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <HAL_UART_Receive+0x3a>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e0b1      	b.n	800aa16 <HAL_UART_Receive+0x19e>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2222      	movs	r2, #34	; 0x22
 800a8c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8d0:	f7f9 f960 	bl	8003b94 <HAL_GetTick>
 800a8d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	88fa      	ldrh	r2, [r7, #6]
 800a8da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	88fa      	ldrh	r2, [r7, #6]
 800a8e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ee:	d10e      	bne.n	800a90e <HAL_UART_Receive+0x96>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d105      	bne.n	800a904 <HAL_UART_Receive+0x8c>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a8fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a902:	e02d      	b.n	800a960 <HAL_UART_Receive+0xe8>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	22ff      	movs	r2, #255	; 0xff
 800a908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a90c:	e028      	b.n	800a960 <HAL_UART_Receive+0xe8>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10d      	bne.n	800a932 <HAL_UART_Receive+0xba>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d104      	bne.n	800a928 <HAL_UART_Receive+0xb0>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	22ff      	movs	r2, #255	; 0xff
 800a922:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a926:	e01b      	b.n	800a960 <HAL_UART_Receive+0xe8>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	227f      	movs	r2, #127	; 0x7f
 800a92c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a930:	e016      	b.n	800a960 <HAL_UART_Receive+0xe8>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a93a:	d10d      	bne.n	800a958 <HAL_UART_Receive+0xe0>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d104      	bne.n	800a94e <HAL_UART_Receive+0xd6>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	227f      	movs	r2, #127	; 0x7f
 800a948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a94c:	e008      	b.n	800a960 <HAL_UART_Receive+0xe8>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	223f      	movs	r2, #63	; 0x3f
 800a952:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a956:	e003      	b.n	800a960 <HAL_UART_Receive+0xe8>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a966:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a970:	d108      	bne.n	800a984 <HAL_UART_Receive+0x10c>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d104      	bne.n	800a984 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	61bb      	str	r3, [r7, #24]
 800a982:	e003      	b.n	800a98c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a994:	e032      	b.n	800a9fc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2200      	movs	r2, #0
 800a99e:	2120      	movs	r1, #32
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f001 fa48 	bl	800be36 <UART_WaitOnFlagUntilTimeout>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e032      	b.n	800aa16 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10c      	bne.n	800a9d0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	8a7b      	ldrh	r3, [r7, #18]
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	e00c      	b.n	800a9ea <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	8a7b      	ldrh	r3, [r7, #18]
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	4013      	ands	r3, r2
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1c6      	bne.n	800a996 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	e000      	b.n	800aa16 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800aa14:	2302      	movs	r3, #2
  }
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3720      	adds	r7, #32
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b0ba      	sub	sp, #232	; 0xe8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aa4a:	f640 030f 	movw	r3, #2063	; 0x80f
 800aa4e:	4013      	ands	r3, r2
 800aa50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aa54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d11b      	bne.n	800aa94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa60:	f003 0320 	and.w	r3, r3, #32
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d015      	beq.n	800aa94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d105      	bne.n	800aa80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d009      	beq.n	800aa94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 835a 	beq.w	800b13e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
      }
      return;
 800aa92:	e354      	b.n	800b13e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 811f 	beq.w	800acdc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aaa2:	4b8b      	ldr	r3, [pc, #556]	; (800acd0 <HAL_UART_IRQHandler+0x2b0>)
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aaaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aaae:	4b89      	ldr	r3, [pc, #548]	; (800acd4 <HAL_UART_IRQHandler+0x2b4>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8112 	beq.w	800acdc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d011      	beq.n	800aae8 <HAL_UART_IRQHandler+0xc8>
 800aac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00b      	beq.n	800aae8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2201      	movs	r2, #1
 800aad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aade:	f043 0201 	orr.w	r2, r3, #1
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d011      	beq.n	800ab18 <HAL_UART_IRQHandler+0xf8>
 800aaf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00b      	beq.n	800ab18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2202      	movs	r2, #2
 800ab06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab0e:	f043 0204 	orr.w	r2, r3, #4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d011      	beq.n	800ab48 <HAL_UART_IRQHandler+0x128>
 800ab24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2204      	movs	r2, #4
 800ab36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab3e:	f043 0202 	orr.w	r2, r3, #2
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab4c:	f003 0308 	and.w	r3, r3, #8
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d017      	beq.n	800ab84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d105      	bne.n	800ab6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab64:	4b5a      	ldr	r3, [pc, #360]	; (800acd0 <HAL_UART_IRQHandler+0x2b0>)
 800ab66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2208      	movs	r2, #8
 800ab72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab7a:	f043 0208 	orr.w	r2, r3, #8
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d012      	beq.n	800abb6 <HAL_UART_IRQHandler+0x196>
 800ab90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00c      	beq.n	800abb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abac:	f043 0220 	orr.w	r2, r3, #32
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 82c0 	beq.w	800b142 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc6:	f003 0320 	and.w	r3, r3, #32
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d013      	beq.n	800abf6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d007      	beq.n	800abf6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0a:	2b40      	cmp	r3, #64	; 0x40
 800ac0c:	d005      	beq.n	800ac1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d04f      	beq.n	800acba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f001 f9d4 	bl	800bfc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2a:	2b40      	cmp	r3, #64	; 0x40
 800ac2c:	d141      	bne.n	800acb2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3308      	adds	r3, #8
 800ac34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3308      	adds	r3, #8
 800ac56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac6a:	e841 2300 	strex	r3, r2, [r1]
 800ac6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1d9      	bne.n	800ac2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d013      	beq.n	800acaa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac86:	4a14      	ldr	r2, [pc, #80]	; (800acd8 <HAL_UART_IRQHandler+0x2b8>)
 800ac88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fa f818 	bl	8004cc4 <HAL_DMA_Abort_IT>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d017      	beq.n	800acca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800aca4:	4610      	mov	r0, r2
 800aca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca8:	e00f      	b.n	800acca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fa60 	bl	800b170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb0:	e00b      	b.n	800acca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fa5c 	bl	800b170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb8:	e007      	b.n	800acca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fa58 	bl	800b170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800acc8:	e23b      	b.n	800b142 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acca:	bf00      	nop
    return;
 800accc:	e239      	b.n	800b142 <HAL_UART_IRQHandler+0x722>
 800acce:	bf00      	nop
 800acd0:	10000001 	.word	0x10000001
 800acd4:	04000120 	.word	0x04000120
 800acd8:	0800c095 	.word	0x0800c095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	f040 81ce 	bne.w	800b082 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ace6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acea:	f003 0310 	and.w	r3, r3, #16
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 81c7 	beq.w	800b082 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 81c0 	beq.w	800b082 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2210      	movs	r2, #16
 800ad08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad14:	2b40      	cmp	r3, #64	; 0x40
 800ad16:	f040 813b 	bne.w	800af90 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a8b      	ldr	r2, [pc, #556]	; (800af50 <HAL_UART_IRQHandler+0x530>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d059      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a89      	ldr	r2, [pc, #548]	; (800af54 <HAL_UART_IRQHandler+0x534>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d053      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a87      	ldr	r2, [pc, #540]	; (800af58 <HAL_UART_IRQHandler+0x538>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d04d      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a85      	ldr	r2, [pc, #532]	; (800af5c <HAL_UART_IRQHandler+0x53c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d047      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a83      	ldr	r2, [pc, #524]	; (800af60 <HAL_UART_IRQHandler+0x540>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d041      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a81      	ldr	r2, [pc, #516]	; (800af64 <HAL_UART_IRQHandler+0x544>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d03b      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a7f      	ldr	r2, [pc, #508]	; (800af68 <HAL_UART_IRQHandler+0x548>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d035      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a7d      	ldr	r2, [pc, #500]	; (800af6c <HAL_UART_IRQHandler+0x54c>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d02f      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a7b      	ldr	r2, [pc, #492]	; (800af70 <HAL_UART_IRQHandler+0x550>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d029      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a79      	ldr	r2, [pc, #484]	; (800af74 <HAL_UART_IRQHandler+0x554>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d023      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a77      	ldr	r2, [pc, #476]	; (800af78 <HAL_UART_IRQHandler+0x558>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d01d      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a75      	ldr	r2, [pc, #468]	; (800af7c <HAL_UART_IRQHandler+0x55c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d017      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a73      	ldr	r2, [pc, #460]	; (800af80 <HAL_UART_IRQHandler+0x560>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d011      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a71      	ldr	r2, [pc, #452]	; (800af84 <HAL_UART_IRQHandler+0x564>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00b      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a6f      	ldr	r2, [pc, #444]	; (800af88 <HAL_UART_IRQHandler+0x568>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d005      	beq.n	800adda <HAL_UART_IRQHandler+0x3ba>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a6d      	ldr	r2, [pc, #436]	; (800af8c <HAL_UART_IRQHandler+0x56c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d105      	bne.n	800ade6 <HAL_UART_IRQHandler+0x3c6>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	e004      	b.n	800adf0 <HAL_UART_IRQHandler+0x3d0>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	b29b      	uxth	r3, r3
 800adf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800adf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 81a4 	beq.w	800b146 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	f080 819c 	bcs.w	800b146 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae22:	f000 8086 	beq.w	800af32 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae60:	e841 2300 	strex	r3, r2, [r1]
 800ae64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1da      	bne.n	800ae26 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae7a:	e853 3f00 	ldrex	r3, [r3]
 800ae7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae82:	f023 0301 	bic.w	r3, r3, #1
 800ae86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3308      	adds	r3, #8
 800ae90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aea0:	e841 2300 	strex	r3, r2, [r1]
 800aea4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e1      	bne.n	800ae70 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aed0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aed2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aed6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aed8:	e841 2300 	strex	r3, r2, [r1]
 800aedc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1e3      	bne.n	800aeac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aefa:	e853 3f00 	ldrex	r3, [r3]
 800aefe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af02:	f023 0310 	bic.w	r3, r3, #16
 800af06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af14:	65bb      	str	r3, [r7, #88]	; 0x58
 800af16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af1c:	e841 2300 	strex	r3, r2, [r1]
 800af20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1e4      	bne.n	800aef2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7f9 fbab 	bl	8004688 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af3e:	b29b      	uxth	r3, r3
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	b29b      	uxth	r3, r3
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f91c 	bl	800b184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af4c:	e0fb      	b.n	800b146 <HAL_UART_IRQHandler+0x726>
 800af4e:	bf00      	nop
 800af50:	40020010 	.word	0x40020010
 800af54:	40020028 	.word	0x40020028
 800af58:	40020040 	.word	0x40020040
 800af5c:	40020058 	.word	0x40020058
 800af60:	40020070 	.word	0x40020070
 800af64:	40020088 	.word	0x40020088
 800af68:	400200a0 	.word	0x400200a0
 800af6c:	400200b8 	.word	0x400200b8
 800af70:	40020410 	.word	0x40020410
 800af74:	40020428 	.word	0x40020428
 800af78:	40020440 	.word	0x40020440
 800af7c:	40020458 	.word	0x40020458
 800af80:	40020470 	.word	0x40020470
 800af84:	40020488 	.word	0x40020488
 800af88:	400204a0 	.word	0x400204a0
 800af8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afaa:	b29b      	uxth	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 80cc 	beq.w	800b14a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800afb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 80c7 	beq.w	800b14a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afde:	647b      	str	r3, [r7, #68]	; 0x44
 800afe0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e4      	bne.n	800afbc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3308      	adds	r3, #8
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	623b      	str	r3, [r7, #32]
   return(result);
 800b002:	6a3a      	ldr	r2, [r7, #32]
 800b004:	4b54      	ldr	r3, [pc, #336]	; (800b158 <HAL_UART_IRQHandler+0x738>)
 800b006:	4013      	ands	r3, r2
 800b008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3308      	adds	r3, #8
 800b012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b016:	633a      	str	r2, [r7, #48]	; 0x30
 800b018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e3      	bne.n	800aff2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f023 0310 	bic.w	r3, r3, #16
 800b052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b060:	61fb      	str	r3, [r7, #28]
 800b062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	69b9      	ldr	r1, [r7, #24]
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	617b      	str	r3, [r7, #20]
   return(result);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e4      	bne.n	800b03e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f882 	bl	800b184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b080:	e063      	b.n	800b14a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00e      	beq.n	800b0ac <HAL_UART_IRQHandler+0x68c>
 800b08e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d008      	beq.n	800b0ac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b0a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f836 	bl	800c116 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0aa:	e051      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d014      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d105      	bne.n	800b0d0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d008      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d03a      	beq.n	800b14e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	4798      	blx	r3
    }
    return;
 800b0e0:	e035      	b.n	800b14e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d009      	beq.n	800b102 <HAL_UART_IRQHandler+0x6e2>
 800b0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 ffe0 	bl	800c0c0 <UART_EndTransmit_IT>
    return;
 800b100:	e026      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <HAL_UART_IRQHandler+0x702>
 800b10e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b112:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 f80f 	bl	800c13e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b120:	e016      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d010      	beq.n	800b150 <HAL_UART_IRQHandler+0x730>
 800b12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b132:	2b00      	cmp	r3, #0
 800b134:	da0c      	bge.n	800b150 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fff7 	bl	800c12a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b13c:	e008      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
      return;
 800b13e:	bf00      	nop
 800b140:	e006      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
    return;
 800b142:	bf00      	nop
 800b144:	e004      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
      return;
 800b146:	bf00      	nop
 800b148:	e002      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
      return;
 800b14a:	bf00      	nop
 800b14c:	e000      	b.n	800b150 <HAL_UART_IRQHandler+0x730>
    return;
 800b14e:	bf00      	nop
  }
}
 800b150:	37e8      	adds	r7, #232	; 0xe8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	effffffe 	.word	0xeffffffe

0800b15c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b19c:	b5b0      	push	{r4, r5, r7, lr}
 800b19e:	b08e      	sub	sp, #56	; 0x38
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689a      	ldr	r2, [r3, #8]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	4bbf      	ldr	r3, [pc, #764]	; (800b4c8 <UART_SetConfig+0x32c>)
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	6812      	ldr	r2, [r2, #0]
 800b1d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b1d2:	430b      	orrs	r3, r1
 800b1d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68da      	ldr	r2, [r3, #12]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4ab5      	ldr	r2, [pc, #724]	; (800b4cc <UART_SetConfig+0x330>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d004      	beq.n	800b206 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b202:	4313      	orrs	r3, r2
 800b204:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	4bb0      	ldr	r3, [pc, #704]	; (800b4d0 <UART_SetConfig+0x334>)
 800b20e:	4013      	ands	r3, r2
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	6812      	ldr	r2, [r2, #0]
 800b214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b216:	430b      	orrs	r3, r1
 800b218:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	f023 010f 	bic.w	r1, r3, #15
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4aa7      	ldr	r2, [pc, #668]	; (800b4d4 <UART_SetConfig+0x338>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d176      	bne.n	800b328 <UART_SetConfig+0x18c>
 800b23a:	4ba7      	ldr	r3, [pc, #668]	; (800b4d8 <UART_SetConfig+0x33c>)
 800b23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b23e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b242:	2b28      	cmp	r3, #40	; 0x28
 800b244:	d86c      	bhi.n	800b320 <UART_SetConfig+0x184>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <UART_SetConfig+0xb0>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b2f1 	.word	0x0800b2f1
 800b250:	0800b321 	.word	0x0800b321
 800b254:	0800b321 	.word	0x0800b321
 800b258:	0800b321 	.word	0x0800b321
 800b25c:	0800b321 	.word	0x0800b321
 800b260:	0800b321 	.word	0x0800b321
 800b264:	0800b321 	.word	0x0800b321
 800b268:	0800b321 	.word	0x0800b321
 800b26c:	0800b2f9 	.word	0x0800b2f9
 800b270:	0800b321 	.word	0x0800b321
 800b274:	0800b321 	.word	0x0800b321
 800b278:	0800b321 	.word	0x0800b321
 800b27c:	0800b321 	.word	0x0800b321
 800b280:	0800b321 	.word	0x0800b321
 800b284:	0800b321 	.word	0x0800b321
 800b288:	0800b321 	.word	0x0800b321
 800b28c:	0800b301 	.word	0x0800b301
 800b290:	0800b321 	.word	0x0800b321
 800b294:	0800b321 	.word	0x0800b321
 800b298:	0800b321 	.word	0x0800b321
 800b29c:	0800b321 	.word	0x0800b321
 800b2a0:	0800b321 	.word	0x0800b321
 800b2a4:	0800b321 	.word	0x0800b321
 800b2a8:	0800b321 	.word	0x0800b321
 800b2ac:	0800b309 	.word	0x0800b309
 800b2b0:	0800b321 	.word	0x0800b321
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b321 	.word	0x0800b321
 800b2bc:	0800b321 	.word	0x0800b321
 800b2c0:	0800b321 	.word	0x0800b321
 800b2c4:	0800b321 	.word	0x0800b321
 800b2c8:	0800b321 	.word	0x0800b321
 800b2cc:	0800b311 	.word	0x0800b311
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b321 	.word	0x0800b321
 800b2dc:	0800b321 	.word	0x0800b321
 800b2e0:	0800b321 	.word	0x0800b321
 800b2e4:	0800b321 	.word	0x0800b321
 800b2e8:	0800b321 	.word	0x0800b321
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f6:	e222      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2fe:	e21e      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b300:	2308      	movs	r3, #8
 800b302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b306:	e21a      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b308:	2310      	movs	r3, #16
 800b30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30e:	e216      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b310:	2320      	movs	r3, #32
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e212      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b318:	2340      	movs	r3, #64	; 0x40
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e20e      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b320:	2380      	movs	r3, #128	; 0x80
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e20a      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a6b      	ldr	r2, [pc, #428]	; (800b4dc <UART_SetConfig+0x340>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d130      	bne.n	800b394 <UART_SetConfig+0x1f8>
 800b332:	4b69      	ldr	r3, [pc, #420]	; (800b4d8 <UART_SetConfig+0x33c>)
 800b334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	2b05      	cmp	r3, #5
 800b33c:	d826      	bhi.n	800b38c <UART_SetConfig+0x1f0>
 800b33e:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <UART_SetConfig+0x1a8>)
 800b340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b344:	0800b35d 	.word	0x0800b35d
 800b348:	0800b365 	.word	0x0800b365
 800b34c:	0800b36d 	.word	0x0800b36d
 800b350:	0800b375 	.word	0x0800b375
 800b354:	0800b37d 	.word	0x0800b37d
 800b358:	0800b385 	.word	0x0800b385
 800b35c:	2300      	movs	r3, #0
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b362:	e1ec      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b364:	2304      	movs	r3, #4
 800b366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b36a:	e1e8      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b36c:	2308      	movs	r3, #8
 800b36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b372:	e1e4      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b374:	2310      	movs	r3, #16
 800b376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37a:	e1e0      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b37c:	2320      	movs	r3, #32
 800b37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b382:	e1dc      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b384:	2340      	movs	r3, #64	; 0x40
 800b386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38a:	e1d8      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b38c:	2380      	movs	r3, #128	; 0x80
 800b38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b392:	e1d4      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a51      	ldr	r2, [pc, #324]	; (800b4e0 <UART_SetConfig+0x344>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d130      	bne.n	800b400 <UART_SetConfig+0x264>
 800b39e:	4b4e      	ldr	r3, [pc, #312]	; (800b4d8 <UART_SetConfig+0x33c>)
 800b3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	2b05      	cmp	r3, #5
 800b3a8:	d826      	bhi.n	800b3f8 <UART_SetConfig+0x25c>
 800b3aa:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <UART_SetConfig+0x214>)
 800b3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b0:	0800b3c9 	.word	0x0800b3c9
 800b3b4:	0800b3d1 	.word	0x0800b3d1
 800b3b8:	0800b3d9 	.word	0x0800b3d9
 800b3bc:	0800b3e1 	.word	0x0800b3e1
 800b3c0:	0800b3e9 	.word	0x0800b3e9
 800b3c4:	0800b3f1 	.word	0x0800b3f1
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ce:	e1b6      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b3d0:	2304      	movs	r3, #4
 800b3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d6:	e1b2      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b3d8:	2308      	movs	r3, #8
 800b3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3de:	e1ae      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b3e0:	2310      	movs	r3, #16
 800b3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3e6:	e1aa      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b3e8:	2320      	movs	r3, #32
 800b3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ee:	e1a6      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b3f0:	2340      	movs	r3, #64	; 0x40
 800b3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3f6:	e1a2      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b3f8:	2380      	movs	r3, #128	; 0x80
 800b3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3fe:	e19e      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a37      	ldr	r2, [pc, #220]	; (800b4e4 <UART_SetConfig+0x348>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d130      	bne.n	800b46c <UART_SetConfig+0x2d0>
 800b40a:	4b33      	ldr	r3, [pc, #204]	; (800b4d8 <UART_SetConfig+0x33c>)
 800b40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40e:	f003 0307 	and.w	r3, r3, #7
 800b412:	2b05      	cmp	r3, #5
 800b414:	d826      	bhi.n	800b464 <UART_SetConfig+0x2c8>
 800b416:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <UART_SetConfig+0x280>)
 800b418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41c:	0800b435 	.word	0x0800b435
 800b420:	0800b43d 	.word	0x0800b43d
 800b424:	0800b445 	.word	0x0800b445
 800b428:	0800b44d 	.word	0x0800b44d
 800b42c:	0800b455 	.word	0x0800b455
 800b430:	0800b45d 	.word	0x0800b45d
 800b434:	2300      	movs	r3, #0
 800b436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43a:	e180      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b43c:	2304      	movs	r3, #4
 800b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b442:	e17c      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b444:	2308      	movs	r3, #8
 800b446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b44a:	e178      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b44c:	2310      	movs	r3, #16
 800b44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b452:	e174      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b454:	2320      	movs	r3, #32
 800b456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b45a:	e170      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b462:	e16c      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b464:	2380      	movs	r3, #128	; 0x80
 800b466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b46a:	e168      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a1d      	ldr	r2, [pc, #116]	; (800b4e8 <UART_SetConfig+0x34c>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d142      	bne.n	800b4fc <UART_SetConfig+0x360>
 800b476:	4b18      	ldr	r3, [pc, #96]	; (800b4d8 <UART_SetConfig+0x33c>)
 800b478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b47a:	f003 0307 	and.w	r3, r3, #7
 800b47e:	2b05      	cmp	r3, #5
 800b480:	d838      	bhi.n	800b4f4 <UART_SetConfig+0x358>
 800b482:	a201      	add	r2, pc, #4	; (adr r2, 800b488 <UART_SetConfig+0x2ec>)
 800b484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b488:	0800b4a1 	.word	0x0800b4a1
 800b48c:	0800b4a9 	.word	0x0800b4a9
 800b490:	0800b4b1 	.word	0x0800b4b1
 800b494:	0800b4b9 	.word	0x0800b4b9
 800b498:	0800b4c1 	.word	0x0800b4c1
 800b49c:	0800b4ed 	.word	0x0800b4ed
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a6:	e14a      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b4a8:	2304      	movs	r3, #4
 800b4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ae:	e146      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4b6:	e142      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b4b8:	2310      	movs	r3, #16
 800b4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4be:	e13e      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b4c0:	2320      	movs	r3, #32
 800b4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4c6:	e13a      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b4c8:	cfff69f3 	.word	0xcfff69f3
 800b4cc:	58000c00 	.word	0x58000c00
 800b4d0:	11fff4ff 	.word	0x11fff4ff
 800b4d4:	40011000 	.word	0x40011000
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	40004400 	.word	0x40004400
 800b4e0:	40004800 	.word	0x40004800
 800b4e4:	40004c00 	.word	0x40004c00
 800b4e8:	40005000 	.word	0x40005000
 800b4ec:	2340      	movs	r3, #64	; 0x40
 800b4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f2:	e124      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b4f4:	2380      	movs	r3, #128	; 0x80
 800b4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fa:	e120      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4acc      	ldr	r2, [pc, #816]	; (800b834 <UART_SetConfig+0x698>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d176      	bne.n	800b5f4 <UART_SetConfig+0x458>
 800b506:	4bcc      	ldr	r3, [pc, #816]	; (800b838 <UART_SetConfig+0x69c>)
 800b508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b50e:	2b28      	cmp	r3, #40	; 0x28
 800b510:	d86c      	bhi.n	800b5ec <UART_SetConfig+0x450>
 800b512:	a201      	add	r2, pc, #4	; (adr r2, 800b518 <UART_SetConfig+0x37c>)
 800b514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b518:	0800b5bd 	.word	0x0800b5bd
 800b51c:	0800b5ed 	.word	0x0800b5ed
 800b520:	0800b5ed 	.word	0x0800b5ed
 800b524:	0800b5ed 	.word	0x0800b5ed
 800b528:	0800b5ed 	.word	0x0800b5ed
 800b52c:	0800b5ed 	.word	0x0800b5ed
 800b530:	0800b5ed 	.word	0x0800b5ed
 800b534:	0800b5ed 	.word	0x0800b5ed
 800b538:	0800b5c5 	.word	0x0800b5c5
 800b53c:	0800b5ed 	.word	0x0800b5ed
 800b540:	0800b5ed 	.word	0x0800b5ed
 800b544:	0800b5ed 	.word	0x0800b5ed
 800b548:	0800b5ed 	.word	0x0800b5ed
 800b54c:	0800b5ed 	.word	0x0800b5ed
 800b550:	0800b5ed 	.word	0x0800b5ed
 800b554:	0800b5ed 	.word	0x0800b5ed
 800b558:	0800b5cd 	.word	0x0800b5cd
 800b55c:	0800b5ed 	.word	0x0800b5ed
 800b560:	0800b5ed 	.word	0x0800b5ed
 800b564:	0800b5ed 	.word	0x0800b5ed
 800b568:	0800b5ed 	.word	0x0800b5ed
 800b56c:	0800b5ed 	.word	0x0800b5ed
 800b570:	0800b5ed 	.word	0x0800b5ed
 800b574:	0800b5ed 	.word	0x0800b5ed
 800b578:	0800b5d5 	.word	0x0800b5d5
 800b57c:	0800b5ed 	.word	0x0800b5ed
 800b580:	0800b5ed 	.word	0x0800b5ed
 800b584:	0800b5ed 	.word	0x0800b5ed
 800b588:	0800b5ed 	.word	0x0800b5ed
 800b58c:	0800b5ed 	.word	0x0800b5ed
 800b590:	0800b5ed 	.word	0x0800b5ed
 800b594:	0800b5ed 	.word	0x0800b5ed
 800b598:	0800b5dd 	.word	0x0800b5dd
 800b59c:	0800b5ed 	.word	0x0800b5ed
 800b5a0:	0800b5ed 	.word	0x0800b5ed
 800b5a4:	0800b5ed 	.word	0x0800b5ed
 800b5a8:	0800b5ed 	.word	0x0800b5ed
 800b5ac:	0800b5ed 	.word	0x0800b5ed
 800b5b0:	0800b5ed 	.word	0x0800b5ed
 800b5b4:	0800b5ed 	.word	0x0800b5ed
 800b5b8:	0800b5e5 	.word	0x0800b5e5
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5c2:	e0bc      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b5c4:	2304      	movs	r3, #4
 800b5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ca:	e0b8      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b5cc:	2308      	movs	r3, #8
 800b5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5d2:	e0b4      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b5d4:	2310      	movs	r3, #16
 800b5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5da:	e0b0      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b5dc:	2320      	movs	r3, #32
 800b5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5e2:	e0ac      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ea:	e0a8      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b5ec:	2380      	movs	r3, #128	; 0x80
 800b5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5f2:	e0a4      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a90      	ldr	r2, [pc, #576]	; (800b83c <UART_SetConfig+0x6a0>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d130      	bne.n	800b660 <UART_SetConfig+0x4c4>
 800b5fe:	4b8e      	ldr	r3, [pc, #568]	; (800b838 <UART_SetConfig+0x69c>)
 800b600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b602:	f003 0307 	and.w	r3, r3, #7
 800b606:	2b05      	cmp	r3, #5
 800b608:	d826      	bhi.n	800b658 <UART_SetConfig+0x4bc>
 800b60a:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <UART_SetConfig+0x474>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b629 	.word	0x0800b629
 800b614:	0800b631 	.word	0x0800b631
 800b618:	0800b639 	.word	0x0800b639
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b649 	.word	0x0800b649
 800b624:	0800b651 	.word	0x0800b651
 800b628:	2300      	movs	r3, #0
 800b62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b62e:	e086      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b630:	2304      	movs	r3, #4
 800b632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b636:	e082      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b638:	2308      	movs	r3, #8
 800b63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b63e:	e07e      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b640:	2310      	movs	r3, #16
 800b642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b646:	e07a      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b648:	2320      	movs	r3, #32
 800b64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b64e:	e076      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b650:	2340      	movs	r3, #64	; 0x40
 800b652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b656:	e072      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b658:	2380      	movs	r3, #128	; 0x80
 800b65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b65e:	e06e      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a76      	ldr	r2, [pc, #472]	; (800b840 <UART_SetConfig+0x6a4>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d130      	bne.n	800b6cc <UART_SetConfig+0x530>
 800b66a:	4b73      	ldr	r3, [pc, #460]	; (800b838 <UART_SetConfig+0x69c>)
 800b66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b66e:	f003 0307 	and.w	r3, r3, #7
 800b672:	2b05      	cmp	r3, #5
 800b674:	d826      	bhi.n	800b6c4 <UART_SetConfig+0x528>
 800b676:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <UART_SetConfig+0x4e0>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b695 	.word	0x0800b695
 800b680:	0800b69d 	.word	0x0800b69d
 800b684:	0800b6a5 	.word	0x0800b6a5
 800b688:	0800b6ad 	.word	0x0800b6ad
 800b68c:	0800b6b5 	.word	0x0800b6b5
 800b690:	0800b6bd 	.word	0x0800b6bd
 800b694:	2300      	movs	r3, #0
 800b696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b69a:	e050      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b69c:	2304      	movs	r3, #4
 800b69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6a2:	e04c      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b6a4:	2308      	movs	r3, #8
 800b6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6aa:	e048      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b6ac:	2310      	movs	r3, #16
 800b6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6b2:	e044      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b6b4:	2320      	movs	r3, #32
 800b6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ba:	e040      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b6bc:	2340      	movs	r3, #64	; 0x40
 800b6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6c2:	e03c      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b6c4:	2380      	movs	r3, #128	; 0x80
 800b6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ca:	e038      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a5c      	ldr	r2, [pc, #368]	; (800b844 <UART_SetConfig+0x6a8>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d130      	bne.n	800b738 <UART_SetConfig+0x59c>
 800b6d6:	4b58      	ldr	r3, [pc, #352]	; (800b838 <UART_SetConfig+0x69c>)
 800b6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6da:	f003 0307 	and.w	r3, r3, #7
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	d826      	bhi.n	800b730 <UART_SetConfig+0x594>
 800b6e2:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <UART_SetConfig+0x54c>)
 800b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e8:	0800b701 	.word	0x0800b701
 800b6ec:	0800b709 	.word	0x0800b709
 800b6f0:	0800b711 	.word	0x0800b711
 800b6f4:	0800b719 	.word	0x0800b719
 800b6f8:	0800b721 	.word	0x0800b721
 800b6fc:	0800b729 	.word	0x0800b729
 800b700:	2302      	movs	r3, #2
 800b702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b706:	e01a      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b708:	2304      	movs	r3, #4
 800b70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b70e:	e016      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b710:	2308      	movs	r3, #8
 800b712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b716:	e012      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b718:	2310      	movs	r3, #16
 800b71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b71e:	e00e      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b720:	2320      	movs	r3, #32
 800b722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b726:	e00a      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b728:	2340      	movs	r3, #64	; 0x40
 800b72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b72e:	e006      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b730:	2380      	movs	r3, #128	; 0x80
 800b732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b736:	e002      	b.n	800b73e <UART_SetConfig+0x5a2>
 800b738:	2380      	movs	r3, #128	; 0x80
 800b73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a40      	ldr	r2, [pc, #256]	; (800b844 <UART_SetConfig+0x6a8>)
 800b744:	4293      	cmp	r3, r2
 800b746:	f040 80ef 	bne.w	800b928 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b74a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b74e:	2b20      	cmp	r3, #32
 800b750:	dc46      	bgt.n	800b7e0 <UART_SetConfig+0x644>
 800b752:	2b02      	cmp	r3, #2
 800b754:	f2c0 8081 	blt.w	800b85a <UART_SetConfig+0x6be>
 800b758:	3b02      	subs	r3, #2
 800b75a:	2b1e      	cmp	r3, #30
 800b75c:	d87d      	bhi.n	800b85a <UART_SetConfig+0x6be>
 800b75e:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <UART_SetConfig+0x5c8>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b7e7 	.word	0x0800b7e7
 800b768:	0800b85b 	.word	0x0800b85b
 800b76c:	0800b7ef 	.word	0x0800b7ef
 800b770:	0800b85b 	.word	0x0800b85b
 800b774:	0800b85b 	.word	0x0800b85b
 800b778:	0800b85b 	.word	0x0800b85b
 800b77c:	0800b7ff 	.word	0x0800b7ff
 800b780:	0800b85b 	.word	0x0800b85b
 800b784:	0800b85b 	.word	0x0800b85b
 800b788:	0800b85b 	.word	0x0800b85b
 800b78c:	0800b85b 	.word	0x0800b85b
 800b790:	0800b85b 	.word	0x0800b85b
 800b794:	0800b85b 	.word	0x0800b85b
 800b798:	0800b85b 	.word	0x0800b85b
 800b79c:	0800b80f 	.word	0x0800b80f
 800b7a0:	0800b85b 	.word	0x0800b85b
 800b7a4:	0800b85b 	.word	0x0800b85b
 800b7a8:	0800b85b 	.word	0x0800b85b
 800b7ac:	0800b85b 	.word	0x0800b85b
 800b7b0:	0800b85b 	.word	0x0800b85b
 800b7b4:	0800b85b 	.word	0x0800b85b
 800b7b8:	0800b85b 	.word	0x0800b85b
 800b7bc:	0800b85b 	.word	0x0800b85b
 800b7c0:	0800b85b 	.word	0x0800b85b
 800b7c4:	0800b85b 	.word	0x0800b85b
 800b7c8:	0800b85b 	.word	0x0800b85b
 800b7cc:	0800b85b 	.word	0x0800b85b
 800b7d0:	0800b85b 	.word	0x0800b85b
 800b7d4:	0800b85b 	.word	0x0800b85b
 800b7d8:	0800b85b 	.word	0x0800b85b
 800b7dc:	0800b84d 	.word	0x0800b84d
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	d036      	beq.n	800b852 <UART_SetConfig+0x6b6>
 800b7e4:	e039      	b.n	800b85a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b7e6:	f7fc ff2d 	bl	8008644 <HAL_RCCEx_GetD3PCLK1Freq>
 800b7ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7ec:	e03b      	b.n	800b866 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ee:	f107 0314 	add.w	r3, r7, #20
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fc ff3c 	bl	8008670 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7fc:	e033      	b.n	800b866 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7fe:	f107 0308 	add.w	r3, r7, #8
 800b802:	4618      	mov	r0, r3
 800b804:	f7fd f888 	bl	8008918 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b80c:	e02b      	b.n	800b866 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b80e:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <UART_SetConfig+0x69c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b00      	cmp	r3, #0
 800b818:	d009      	beq.n	800b82e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b81a:	4b07      	ldr	r3, [pc, #28]	; (800b838 <UART_SetConfig+0x69c>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	08db      	lsrs	r3, r3, #3
 800b820:	f003 0303 	and.w	r3, r3, #3
 800b824:	4a08      	ldr	r2, [pc, #32]	; (800b848 <UART_SetConfig+0x6ac>)
 800b826:	fa22 f303 	lsr.w	r3, r2, r3
 800b82a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b82c:	e01b      	b.n	800b866 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b82e:	4b06      	ldr	r3, [pc, #24]	; (800b848 <UART_SetConfig+0x6ac>)
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b832:	e018      	b.n	800b866 <UART_SetConfig+0x6ca>
 800b834:	40011400 	.word	0x40011400
 800b838:	58024400 	.word	0x58024400
 800b83c:	40007800 	.word	0x40007800
 800b840:	40007c00 	.word	0x40007c00
 800b844:	58000c00 	.word	0x58000c00
 800b848:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b84c:	4bc4      	ldr	r3, [pc, #784]	; (800bb60 <UART_SetConfig+0x9c4>)
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b850:	e009      	b.n	800b866 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b858:	e005      	b.n	800b866 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 81da 	beq.w	800bc22 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	4abc      	ldr	r2, [pc, #752]	; (800bb64 <UART_SetConfig+0x9c8>)
 800b874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b878:	461a      	mov	r2, r3
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b880:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	4413      	add	r3, r2
 800b88c:	6a3a      	ldr	r2, [r7, #32]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d305      	bcc.n	800b89e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b898:	6a3a      	ldr	r2, [r7, #32]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d903      	bls.n	800b8a6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b8a4:	e1bd      	b.n	800bc22 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f04f 0100 	mov.w	r1, #0
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	4aac      	ldr	r2, [pc, #688]	; (800bb64 <UART_SetConfig+0x9c8>)
 800b8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	f04f 0300 	mov.w	r3, #0
 800b8be:	f7f4 ff23 	bl	8000708 <__aeabi_uldivmod>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f04f 0200 	mov.w	r2, #0
 800b8ce:	f04f 0300 	mov.w	r3, #0
 800b8d2:	020b      	lsls	r3, r1, #8
 800b8d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b8d8:	0202      	lsls	r2, r0, #8
 800b8da:	6879      	ldr	r1, [r7, #4]
 800b8dc:	6849      	ldr	r1, [r1, #4]
 800b8de:	0849      	lsrs	r1, r1, #1
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	f04f 0100 	mov.w	r1, #0
 800b8e6:	1814      	adds	r4, r2, r0
 800b8e8:	eb43 0501 	adc.w	r5, r3, r1
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	f04f 0300 	mov.w	r3, #0
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	f7f4 ff05 	bl	8000708 <__aeabi_uldivmod>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4613      	mov	r3, r2
 800b904:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b90c:	d308      	bcc.n	800b920 <UART_SetConfig+0x784>
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b914:	d204      	bcs.n	800b920 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b91c:	60da      	str	r2, [r3, #12]
 800b91e:	e180      	b.n	800bc22 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b926:	e17c      	b.n	800bc22 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	69db      	ldr	r3, [r3, #28]
 800b92c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b930:	f040 80be 	bne.w	800bab0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b934:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b938:	2b20      	cmp	r3, #32
 800b93a:	dc49      	bgt.n	800b9d0 <UART_SetConfig+0x834>
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	db7c      	blt.n	800ba3a <UART_SetConfig+0x89e>
 800b940:	2b20      	cmp	r3, #32
 800b942:	d87a      	bhi.n	800ba3a <UART_SetConfig+0x89e>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <UART_SetConfig+0x7b0>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b9d7 	.word	0x0800b9d7
 800b950:	0800b9df 	.word	0x0800b9df
 800b954:	0800ba3b 	.word	0x0800ba3b
 800b958:	0800ba3b 	.word	0x0800ba3b
 800b95c:	0800b9e7 	.word	0x0800b9e7
 800b960:	0800ba3b 	.word	0x0800ba3b
 800b964:	0800ba3b 	.word	0x0800ba3b
 800b968:	0800ba3b 	.word	0x0800ba3b
 800b96c:	0800b9f7 	.word	0x0800b9f7
 800b970:	0800ba3b 	.word	0x0800ba3b
 800b974:	0800ba3b 	.word	0x0800ba3b
 800b978:	0800ba3b 	.word	0x0800ba3b
 800b97c:	0800ba3b 	.word	0x0800ba3b
 800b980:	0800ba3b 	.word	0x0800ba3b
 800b984:	0800ba3b 	.word	0x0800ba3b
 800b988:	0800ba3b 	.word	0x0800ba3b
 800b98c:	0800ba07 	.word	0x0800ba07
 800b990:	0800ba3b 	.word	0x0800ba3b
 800b994:	0800ba3b 	.word	0x0800ba3b
 800b998:	0800ba3b 	.word	0x0800ba3b
 800b99c:	0800ba3b 	.word	0x0800ba3b
 800b9a0:	0800ba3b 	.word	0x0800ba3b
 800b9a4:	0800ba3b 	.word	0x0800ba3b
 800b9a8:	0800ba3b 	.word	0x0800ba3b
 800b9ac:	0800ba3b 	.word	0x0800ba3b
 800b9b0:	0800ba3b 	.word	0x0800ba3b
 800b9b4:	0800ba3b 	.word	0x0800ba3b
 800b9b8:	0800ba3b 	.word	0x0800ba3b
 800b9bc:	0800ba3b 	.word	0x0800ba3b
 800b9c0:	0800ba3b 	.word	0x0800ba3b
 800b9c4:	0800ba3b 	.word	0x0800ba3b
 800b9c8:	0800ba3b 	.word	0x0800ba3b
 800b9cc:	0800ba2d 	.word	0x0800ba2d
 800b9d0:	2b40      	cmp	r3, #64	; 0x40
 800b9d2:	d02e      	beq.n	800ba32 <UART_SetConfig+0x896>
 800b9d4:	e031      	b.n	800ba3a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9d6:	f7fb fec9 	bl	800776c <HAL_RCC_GetPCLK1Freq>
 800b9da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b9dc:	e033      	b.n	800ba46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9de:	f7fb fedb 	bl	8007798 <HAL_RCC_GetPCLK2Freq>
 800b9e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b9e4:	e02f      	b.n	800ba46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9e6:	f107 0314 	add.w	r3, r7, #20
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fc fe40 	bl	8008670 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b9f4:	e027      	b.n	800ba46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9f6:	f107 0308 	add.w	r3, r7, #8
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fc ff8c 	bl	8008918 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba04:	e01f      	b.n	800ba46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba06:	4b58      	ldr	r3, [pc, #352]	; (800bb68 <UART_SetConfig+0x9cc>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0320 	and.w	r3, r3, #32
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d009      	beq.n	800ba26 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba12:	4b55      	ldr	r3, [pc, #340]	; (800bb68 <UART_SetConfig+0x9cc>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	08db      	lsrs	r3, r3, #3
 800ba18:	f003 0303 	and.w	r3, r3, #3
 800ba1c:	4a53      	ldr	r2, [pc, #332]	; (800bb6c <UART_SetConfig+0x9d0>)
 800ba1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba24:	e00f      	b.n	800ba46 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ba26:	4b51      	ldr	r3, [pc, #324]	; (800bb6c <UART_SetConfig+0x9d0>)
 800ba28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba2a:	e00c      	b.n	800ba46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba2c:	4b4c      	ldr	r3, [pc, #304]	; (800bb60 <UART_SetConfig+0x9c4>)
 800ba2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba30:	e009      	b.n	800ba46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba38:	e005      	b.n	800ba46 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ba44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 80ea 	beq.w	800bc22 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba52:	4a44      	ldr	r2, [pc, #272]	; (800bb64 <UART_SetConfig+0x9c8>)
 800ba54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba60:	005a      	lsls	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	441a      	add	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	2b0f      	cmp	r3, #15
 800ba78:	d916      	bls.n	800baa8 <UART_SetConfig+0x90c>
 800ba7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba80:	d212      	bcs.n	800baa8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	f023 030f 	bic.w	r3, r3, #15
 800ba8a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	085b      	lsrs	r3, r3, #1
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800baa4:	60da      	str	r2, [r3, #12]
 800baa6:	e0bc      	b.n	800bc22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800baae:	e0b8      	b.n	800bc22 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bab0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	dc4b      	bgt.n	800bb50 <UART_SetConfig+0x9b4>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f2c0 8087 	blt.w	800bbcc <UART_SetConfig+0xa30>
 800babe:	2b20      	cmp	r3, #32
 800bac0:	f200 8084 	bhi.w	800bbcc <UART_SetConfig+0xa30>
 800bac4:	a201      	add	r2, pc, #4	; (adr r2, 800bacc <UART_SetConfig+0x930>)
 800bac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baca:	bf00      	nop
 800bacc:	0800bb57 	.word	0x0800bb57
 800bad0:	0800bb71 	.word	0x0800bb71
 800bad4:	0800bbcd 	.word	0x0800bbcd
 800bad8:	0800bbcd 	.word	0x0800bbcd
 800badc:	0800bb79 	.word	0x0800bb79
 800bae0:	0800bbcd 	.word	0x0800bbcd
 800bae4:	0800bbcd 	.word	0x0800bbcd
 800bae8:	0800bbcd 	.word	0x0800bbcd
 800baec:	0800bb89 	.word	0x0800bb89
 800baf0:	0800bbcd 	.word	0x0800bbcd
 800baf4:	0800bbcd 	.word	0x0800bbcd
 800baf8:	0800bbcd 	.word	0x0800bbcd
 800bafc:	0800bbcd 	.word	0x0800bbcd
 800bb00:	0800bbcd 	.word	0x0800bbcd
 800bb04:	0800bbcd 	.word	0x0800bbcd
 800bb08:	0800bbcd 	.word	0x0800bbcd
 800bb0c:	0800bb99 	.word	0x0800bb99
 800bb10:	0800bbcd 	.word	0x0800bbcd
 800bb14:	0800bbcd 	.word	0x0800bbcd
 800bb18:	0800bbcd 	.word	0x0800bbcd
 800bb1c:	0800bbcd 	.word	0x0800bbcd
 800bb20:	0800bbcd 	.word	0x0800bbcd
 800bb24:	0800bbcd 	.word	0x0800bbcd
 800bb28:	0800bbcd 	.word	0x0800bbcd
 800bb2c:	0800bbcd 	.word	0x0800bbcd
 800bb30:	0800bbcd 	.word	0x0800bbcd
 800bb34:	0800bbcd 	.word	0x0800bbcd
 800bb38:	0800bbcd 	.word	0x0800bbcd
 800bb3c:	0800bbcd 	.word	0x0800bbcd
 800bb40:	0800bbcd 	.word	0x0800bbcd
 800bb44:	0800bbcd 	.word	0x0800bbcd
 800bb48:	0800bbcd 	.word	0x0800bbcd
 800bb4c:	0800bbbf 	.word	0x0800bbbf
 800bb50:	2b40      	cmp	r3, #64	; 0x40
 800bb52:	d037      	beq.n	800bbc4 <UART_SetConfig+0xa28>
 800bb54:	e03a      	b.n	800bbcc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb56:	f7fb fe09 	bl	800776c <HAL_RCC_GetPCLK1Freq>
 800bb5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb5c:	e03c      	b.n	800bbd8 <UART_SetConfig+0xa3c>
 800bb5e:	bf00      	nop
 800bb60:	003d0900 	.word	0x003d0900
 800bb64:	0800f378 	.word	0x0800f378
 800bb68:	58024400 	.word	0x58024400
 800bb6c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb70:	f7fb fe12 	bl	8007798 <HAL_RCC_GetPCLK2Freq>
 800bb74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb76:	e02f      	b.n	800bbd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb78:	f107 0314 	add.w	r3, r7, #20
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fc fd77 	bl	8008670 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb86:	e027      	b.n	800bbd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb88:	f107 0308 	add.w	r3, r7, #8
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fc fec3 	bl	8008918 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb96:	e01f      	b.n	800bbd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb98:	4b2c      	ldr	r3, [pc, #176]	; (800bc4c <UART_SetConfig+0xab0>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0320 	and.w	r3, r3, #32
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d009      	beq.n	800bbb8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bba4:	4b29      	ldr	r3, [pc, #164]	; (800bc4c <UART_SetConfig+0xab0>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	08db      	lsrs	r3, r3, #3
 800bbaa:	f003 0303 	and.w	r3, r3, #3
 800bbae:	4a28      	ldr	r2, [pc, #160]	; (800bc50 <UART_SetConfig+0xab4>)
 800bbb0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbb6:	e00f      	b.n	800bbd8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800bbb8:	4b25      	ldr	r3, [pc, #148]	; (800bc50 <UART_SetConfig+0xab4>)
 800bbba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbbc:	e00c      	b.n	800bbd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bbbe:	4b25      	ldr	r3, [pc, #148]	; (800bc54 <UART_SetConfig+0xab8>)
 800bbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbc2:	e009      	b.n	800bbd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbca:	e005      	b.n	800bbd8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bbd6:	bf00      	nop
    }

    if (pclk != 0U)
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d021      	beq.n	800bc22 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	4a1d      	ldr	r2, [pc, #116]	; (800bc58 <UART_SetConfig+0xabc>)
 800bbe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbe8:	461a      	mov	r2, r3
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	085b      	lsrs	r3, r3, #1
 800bbf6:	441a      	add	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	2b0f      	cmp	r3, #15
 800bc06:	d909      	bls.n	800bc1c <UART_SetConfig+0xa80>
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc0e:	d205      	bcs.n	800bc1c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	60da      	str	r2, [r3, #12]
 800bc1a:	e002      	b.n	800bc22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bc3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3738      	adds	r7, #56	; 0x38
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bdb0      	pop	{r4, r5, r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	58024400 	.word	0x58024400
 800bc50:	03d09000 	.word	0x03d09000
 800bc54:	003d0900 	.word	0x003d0900
 800bc58:	0800f378 	.word	0x0800f378

0800bc5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00a      	beq.n	800bc86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	430a      	orrs	r2, r1
 800bc84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcce:	f003 0308 	and.w	r3, r3, #8
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00a      	beq.n	800bcec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf0:	f003 0310 	and.w	r3, r3, #16
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00a      	beq.n	800bd0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd12:	f003 0320 	and.w	r3, r3, #32
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00a      	beq.n	800bd30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d01a      	beq.n	800bd72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd5a:	d10a      	bne.n	800bd72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	605a      	str	r2, [r3, #4]
  }
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af02      	add	r7, sp, #8
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdb0:	f7f7 fef0 	bl	8003b94 <HAL_GetTick>
 800bdb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0308 	and.w	r3, r3, #8
 800bdc0:	2b08      	cmp	r3, #8
 800bdc2:	d10e      	bne.n	800bde2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f82f 	bl	800be36 <UART_WaitOnFlagUntilTimeout>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e025      	b.n	800be2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 0304 	and.w	r3, r3, #4
 800bdec:	2b04      	cmp	r3, #4
 800bdee:	d10e      	bne.n	800be0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f819 	bl	800be36 <UART_WaitOnFlagUntilTimeout>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e00f      	b.n	800be2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2220      	movs	r2, #32
 800be12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2220      	movs	r2, #32
 800be1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b09c      	sub	sp, #112	; 0x70
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	60f8      	str	r0, [r7, #12]
 800be3e:	60b9      	str	r1, [r7, #8]
 800be40:	603b      	str	r3, [r7, #0]
 800be42:	4613      	mov	r3, r2
 800be44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be46:	e0a9      	b.n	800bf9c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4e:	f000 80a5 	beq.w	800bf9c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be52:	f7f7 fe9f 	bl	8003b94 <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be5e:	429a      	cmp	r2, r3
 800be60:	d302      	bcc.n	800be68 <UART_WaitOnFlagUntilTimeout+0x32>
 800be62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be64:	2b00      	cmp	r3, #0
 800be66:	d140      	bne.n	800beea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be70:	e853 3f00 	ldrex	r3, [r3]
 800be74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be7c:	667b      	str	r3, [r7, #100]	; 0x64
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be8e:	e841 2300 	strex	r3, r2, [r1]
 800be92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800be94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1e6      	bne.n	800be68 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	663b      	str	r3, [r7, #96]	; 0x60
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3308      	adds	r3, #8
 800beb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800beba:	64ba      	str	r2, [r7, #72]	; 0x48
 800bebc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bec2:	e841 2300 	strex	r3, r2, [r1]
 800bec6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1e5      	bne.n	800be9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2220      	movs	r2, #32
 800beda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e069      	b.n	800bfbe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d051      	beq.n	800bf9c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf06:	d149      	bne.n	800bf9c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1a:	e853 3f00 	ldrex	r3, [r3]
 800bf1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf26:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf30:	637b      	str	r3, [r7, #52]	; 0x34
 800bf32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e6      	bne.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	613b      	str	r3, [r7, #16]
   return(result);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f023 0301 	bic.w	r3, r3, #1
 800bf5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3308      	adds	r3, #8
 800bf62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf64:	623a      	str	r2, [r7, #32]
 800bf66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	69f9      	ldr	r1, [r7, #28]
 800bf6a:	6a3a      	ldr	r2, [r7, #32]
 800bf6c:	e841 2300 	strex	r3, r2, [r1]
 800bf70:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1e5      	bne.n	800bf44 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2220      	movs	r2, #32
 800bf84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e010      	b.n	800bfbe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	69da      	ldr	r2, [r3, #28]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	bf0c      	ite	eq
 800bfac:	2301      	moveq	r3, #1
 800bfae:	2300      	movne	r3, #0
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	f43f af46 	beq.w	800be48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3770      	adds	r7, #112	; 0x70
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b095      	sub	sp, #84	; 0x54
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd8:	e853 3f00 	ldrex	r3, [r3]
 800bfdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfee:	643b      	str	r3, [r7, #64]	; 0x40
 800bff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e6      	bne.n	800bfd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3308      	adds	r3, #8
 800c008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	61fb      	str	r3, [r7, #28]
   return(result);
 800c012:	69fa      	ldr	r2, [r7, #28]
 800c014:	4b1e      	ldr	r3, [pc, #120]	; (800c090 <UART_EndRxTransfer+0xc8>)
 800c016:	4013      	ands	r3, r2
 800c018:	64bb      	str	r3, [r7, #72]	; 0x48
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3308      	adds	r3, #8
 800c020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c022:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c02a:	e841 2300 	strex	r3, r2, [r1]
 800c02e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1e5      	bne.n	800c002 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d118      	bne.n	800c070 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	e853 3f00 	ldrex	r3, [r3]
 800c04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	f023 0310 	bic.w	r3, r3, #16
 800c052:	647b      	str	r3, [r7, #68]	; 0x44
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	461a      	mov	r2, r3
 800c05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c05c:	61bb      	str	r3, [r7, #24]
 800c05e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	6979      	ldr	r1, [r7, #20]
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	e841 2300 	strex	r3, r2, [r1]
 800c068:	613b      	str	r3, [r7, #16]
   return(result);
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e6      	bne.n	800c03e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2220      	movs	r2, #32
 800c074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c084:	bf00      	nop
 800c086:	3754      	adds	r7, #84	; 0x54
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	effffffe 	.word	0xeffffffe

0800c094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7ff f85c 	bl	800b170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0b8:	bf00      	nop
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b088      	sub	sp, #32
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0dc:	61fb      	str	r3, [r7, #28]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	61bb      	str	r3, [r7, #24]
 800c0e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	6979      	ldr	r1, [r7, #20]
 800c0ec:	69ba      	ldr	r2, [r7, #24]
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e6      	bne.n	800c0c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff f827 	bl	800b15c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c10e:	bf00      	nop
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c11e:	bf00      	nop
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c132:	bf00      	nop
 800c134:	370c      	adds	r7, #12
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c13e:	b480      	push	{r7}
 800c140:	b083      	sub	sp, #12
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c160:	2b01      	cmp	r3, #1
 800c162:	d101      	bne.n	800c168 <HAL_UARTEx_EnableFifoMode+0x16>
 800c164:	2302      	movs	r3, #2
 800c166:	e02b      	b.n	800c1c0 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2224      	movs	r2, #36	; 0x24
 800c174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f022 0201 	bic.w	r2, r2, #1
 800c18e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c196:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c19e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f8c3 	bl	800c334 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d101      	bne.n	800c1de <HAL_UARTEx_DisableFifoMode+0x16>
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e027      	b.n	800c22e <HAL_UARTEx_DisableFifoMode+0x66>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2224      	movs	r2, #36	; 0x24
 800c1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f022 0201 	bic.w	r2, r2, #1
 800c204:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c20c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2220      	movs	r2, #32
 800c220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d101      	bne.n	800c252 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c24e:	2302      	movs	r3, #2
 800c250:	e02d      	b.n	800c2ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2224      	movs	r2, #36	; 0x24
 800c25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f022 0201 	bic.w	r2, r2, #1
 800c278:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f850 	bl	800c334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d101      	bne.n	800c2ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	e02d      	b.n	800c32a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2224      	movs	r2, #36	; 0x24
 800c2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f022 0201 	bic.w	r2, r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	430a      	orrs	r2, r1
 800c308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f812 	bl	800c334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2220      	movs	r2, #32
 800c31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
	...

0800c334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c340:	2b00      	cmp	r3, #0
 800c342:	d108      	bne.n	800c356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c354:	e031      	b.n	800c3ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c356:	2310      	movs	r3, #16
 800c358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c35a:	2310      	movs	r3, #16
 800c35c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	0e5b      	lsrs	r3, r3, #25
 800c366:	b2db      	uxtb	r3, r3
 800c368:	f003 0307 	and.w	r3, r3, #7
 800c36c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	0f5b      	lsrs	r3, r3, #29
 800c376:	b2db      	uxtb	r3, r3
 800c378:	f003 0307 	and.w	r3, r3, #7
 800c37c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
 800c380:	7b3a      	ldrb	r2, [r7, #12]
 800c382:	4911      	ldr	r1, [pc, #68]	; (800c3c8 <UARTEx_SetNbDataToProcess+0x94>)
 800c384:	5c8a      	ldrb	r2, [r1, r2]
 800c386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c38a:	7b3a      	ldrb	r2, [r7, #12]
 800c38c:	490f      	ldr	r1, [pc, #60]	; (800c3cc <UARTEx_SetNbDataToProcess+0x98>)
 800c38e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c390:	fb93 f3f2 	sdiv	r3, r3, r2
 800c394:	b29a      	uxth	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	7b7a      	ldrb	r2, [r7, #13]
 800c3a0:	4909      	ldr	r1, [pc, #36]	; (800c3c8 <UARTEx_SetNbDataToProcess+0x94>)
 800c3a2:	5c8a      	ldrb	r2, [r1, r2]
 800c3a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c3a8:	7b7a      	ldrb	r2, [r7, #13]
 800c3aa:	4908      	ldr	r1, [pc, #32]	; (800c3cc <UARTEx_SetNbDataToProcess+0x98>)
 800c3ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c3ba:	bf00      	nop
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	0800f390 	.word	0x0800f390
 800c3cc:	0800f398 	.word	0x0800f398

0800c3d0 <sinf_poly>:
 800c3d0:	07cb      	lsls	r3, r1, #31
 800c3d2:	d412      	bmi.n	800c3fa <sinf_poly+0x2a>
 800c3d4:	ee21 6b00 	vmul.f64	d6, d1, d0
 800c3d8:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800c3dc:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800c3e0:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c3e4:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800c3e8:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c3ec:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c3f0:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c3f4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c3f8:	4770      	bx	lr
 800c3fa:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800c3fe:	ee21 6b01 	vmul.f64	d6, d1, d1
 800c402:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800c406:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800c40a:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c40e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800c412:	eea1 0b05 	vfma.f64	d0, d1, d5
 800c416:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800c41a:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c41e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c422:	e7e5      	b.n	800c3f0 <sinf_poly+0x20>
 800c424:	0000      	movs	r0, r0
	...

0800c428 <cosf>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	ee10 4a10 	vmov	r4, s0
 800c42e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c432:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800c436:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c43a:	d20c      	bcs.n	800c456 <cosf+0x2e>
 800c43c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c440:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800c444:	d378      	bcc.n	800c538 <cosf+0x110>
 800c446:	eeb0 0b46 	vmov.f64	d0, d6
 800c44a:	483f      	ldr	r0, [pc, #252]	; (800c548 <cosf+0x120>)
 800c44c:	2101      	movs	r1, #1
 800c44e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c452:	f7ff bfbd 	b.w	800c3d0 <sinf_poly>
 800c456:	f240 422e 	movw	r2, #1070	; 0x42e
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d826      	bhi.n	800c4ac <cosf+0x84>
 800c45e:	4b3a      	ldr	r3, [pc, #232]	; (800c548 <cosf+0x120>)
 800c460:	ed93 7b08 	vldr	d7, [r3, #32]
 800c464:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c468:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c46c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c470:	ee17 1a90 	vmov	r1, s15
 800c474:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800c478:	1609      	asrs	r1, r1, #24
 800c47a:	ee07 1a90 	vmov	s15, r1
 800c47e:	f001 0203 	and.w	r2, r1, #3
 800c482:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c486:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c48a:	ed92 0b00 	vldr	d0, [r2]
 800c48e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800c492:	f011 0f02 	tst.w	r1, #2
 800c496:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c49a:	f081 0101 	eor.w	r1, r1, #1
 800c49e:	bf08      	it	eq
 800c4a0:	4618      	moveq	r0, r3
 800c4a2:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c4a6:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c4aa:	e7d0      	b.n	800c44e <cosf+0x26>
 800c4ac:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c4b0:	d23e      	bcs.n	800c530 <cosf+0x108>
 800c4b2:	4b26      	ldr	r3, [pc, #152]	; (800c54c <cosf+0x124>)
 800c4b4:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800c4b8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800c4bc:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800c4c0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c4c4:	6a06      	ldr	r6, [r0, #32]
 800c4c6:	6900      	ldr	r0, [r0, #16]
 800c4c8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c4cc:	40a9      	lsls	r1, r5
 800c4ce:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c4d2:	fba1 6706 	umull	r6, r7, r1, r6
 800c4d6:	fb05 f301 	mul.w	r3, r5, r1
 800c4da:	463a      	mov	r2, r7
 800c4dc:	fbe0 2301 	umlal	r2, r3, r0, r1
 800c4e0:	1c11      	adds	r1, r2, #0
 800c4e2:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	1a10      	subs	r0, r2, r0
 800c4ea:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800c4ee:	eb63 0101 	sbc.w	r1, r3, r1
 800c4f2:	f7f4 f8db 	bl	80006ac <__aeabi_l2d>
 800c4f6:	0fb5      	lsrs	r5, r6, #30
 800c4f8:	4b13      	ldr	r3, [pc, #76]	; (800c548 <cosf+0x120>)
 800c4fa:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800c4fe:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800c540 <cosf+0x118>
 800c502:	ec41 0b17 	vmov	d7, r0, r1
 800c506:	f004 0203 	and.w	r2, r4, #3
 800c50a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c50e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c512:	ed92 7b00 	vldr	d7, [r2]
 800c516:	ee20 1b00 	vmul.f64	d1, d0, d0
 800c51a:	f014 0f02 	tst.w	r4, #2
 800c51e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c522:	f085 0101 	eor.w	r1, r5, #1
 800c526:	bf08      	it	eq
 800c528:	4618      	moveq	r0, r3
 800c52a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c52e:	e78e      	b.n	800c44e <cosf+0x26>
 800c530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c534:	f000 b817 	b.w	800c566 <__math_invalidf>
 800c538:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c53e:	bf00      	nop
 800c540:	54442d18 	.word	0x54442d18
 800c544:	3c1921fb 	.word	0x3c1921fb
 800c548:	0800f400 	.word	0x0800f400
 800c54c:	0800f3a0 	.word	0x0800f3a0

0800c550 <with_errnof>:
 800c550:	b513      	push	{r0, r1, r4, lr}
 800c552:	4604      	mov	r4, r0
 800c554:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c558:	f000 fa84 	bl	800ca64 <__errno>
 800c55c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c560:	6004      	str	r4, [r0, #0]
 800c562:	b002      	add	sp, #8
 800c564:	bd10      	pop	{r4, pc}

0800c566 <__math_invalidf>:
 800c566:	eef0 7a40 	vmov.f32	s15, s0
 800c56a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c56e:	eef4 7a67 	vcmp.f32	s15, s15
 800c572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c576:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c57a:	d602      	bvs.n	800c582 <__math_invalidf+0x1c>
 800c57c:	2021      	movs	r0, #33	; 0x21
 800c57e:	f7ff bfe7 	b.w	800c550 <with_errnof>
 800c582:	4770      	bx	lr

0800c584 <sinf_poly>:
 800c584:	07cb      	lsls	r3, r1, #31
 800c586:	d412      	bmi.n	800c5ae <sinf_poly+0x2a>
 800c588:	ee21 6b00 	vmul.f64	d6, d1, d0
 800c58c:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800c590:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800c594:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c598:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800c59c:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c5a0:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c5a4:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c5a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c5ac:	4770      	bx	lr
 800c5ae:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800c5b2:	ee21 6b01 	vmul.f64	d6, d1, d1
 800c5b6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800c5ba:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800c5be:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c5c2:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800c5c6:	eea1 0b05 	vfma.f64	d0, d1, d5
 800c5ca:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800c5ce:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c5d2:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c5d6:	e7e5      	b.n	800c5a4 <sinf_poly+0x20>

0800c5d8 <sinf>:
 800c5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5da:	ee10 4a10 	vmov	r4, s0
 800c5de:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c5e2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800c5e6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c5ea:	eef0 7a40 	vmov.f32	s15, s0
 800c5ee:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800c5f2:	d218      	bcs.n	800c626 <sinf+0x4e>
 800c5f4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c5f8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800c5fc:	d20a      	bcs.n	800c614 <sinf+0x3c>
 800c5fe:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800c602:	d103      	bne.n	800c60c <sinf+0x34>
 800c604:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800c608:	ed8d 1a01 	vstr	s2, [sp, #4]
 800c60c:	eeb0 0a67 	vmov.f32	s0, s15
 800c610:	b003      	add	sp, #12
 800c612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c614:	483e      	ldr	r0, [pc, #248]	; (800c710 <sinf+0x138>)
 800c616:	eeb0 0b46 	vmov.f64	d0, d6
 800c61a:	2100      	movs	r1, #0
 800c61c:	b003      	add	sp, #12
 800c61e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c622:	f7ff bfaf 	b.w	800c584 <sinf_poly>
 800c626:	f240 422e 	movw	r2, #1070	; 0x42e
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d824      	bhi.n	800c678 <sinf+0xa0>
 800c62e:	4b38      	ldr	r3, [pc, #224]	; (800c710 <sinf+0x138>)
 800c630:	ed93 7b08 	vldr	d7, [r3, #32]
 800c634:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c638:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c63c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c640:	ee17 1a90 	vmov	r1, s15
 800c644:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800c648:	1609      	asrs	r1, r1, #24
 800c64a:	ee07 1a90 	vmov	s15, r1
 800c64e:	f001 0203 	and.w	r2, r1, #3
 800c652:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c656:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c65a:	ed92 0b00 	vldr	d0, [r2]
 800c65e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800c662:	f011 0f02 	tst.w	r1, #2
 800c666:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c66a:	bf08      	it	eq
 800c66c:	4618      	moveq	r0, r3
 800c66e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c672:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c676:	e7d1      	b.n	800c61c <sinf+0x44>
 800c678:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c67c:	d23d      	bcs.n	800c6fa <sinf+0x122>
 800c67e:	4b25      	ldr	r3, [pc, #148]	; (800c714 <sinf+0x13c>)
 800c680:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800c684:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800c688:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800c68c:	6a06      	ldr	r6, [r0, #32]
 800c68e:	6900      	ldr	r0, [r0, #16]
 800c690:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c694:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c698:	40a9      	lsls	r1, r5
 800c69a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c69e:	fba1 6706 	umull	r6, r7, r1, r6
 800c6a2:	fb05 f301 	mul.w	r3, r5, r1
 800c6a6:	463a      	mov	r2, r7
 800c6a8:	fbe0 2301 	umlal	r2, r3, r0, r1
 800c6ac:	1c11      	adds	r1, r2, #0
 800c6ae:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	1a10      	subs	r0, r2, r0
 800c6b6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800c6ba:	eb63 0101 	sbc.w	r1, r3, r1
 800c6be:	f7f3 fff5 	bl	80006ac <__aeabi_l2d>
 800c6c2:	0fb5      	lsrs	r5, r6, #30
 800c6c4:	4a12      	ldr	r2, [pc, #72]	; (800c710 <sinf+0x138>)
 800c6c6:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800c6ca:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800c708 <sinf+0x130>
 800c6ce:	ec41 0b17 	vmov	d7, r0, r1
 800c6d2:	f003 0103 	and.w	r1, r3, #3
 800c6d6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800c6da:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c6de:	ed91 7b00 	vldr	d7, [r1]
 800c6e2:	ee20 1b00 	vmul.f64	d1, d0, d0
 800c6e6:	f013 0f02 	tst.w	r3, #2
 800c6ea:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	bf08      	it	eq
 800c6f2:	4610      	moveq	r0, r2
 800c6f4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c6f8:	e790      	b.n	800c61c <sinf+0x44>
 800c6fa:	b003      	add	sp, #12
 800c6fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c700:	f7ff bf31 	b.w	800c566 <__math_invalidf>
 800c704:	f3af 8000 	nop.w
 800c708:	54442d18 	.word	0x54442d18
 800c70c:	3c1921fb 	.word	0x3c1921fb
 800c710:	0800f400 	.word	0x0800f400
 800c714:	0800f3a0 	.word	0x0800f3a0

0800c718 <atan2f>:
 800c718:	f000 b826 	b.w	800c768 <__ieee754_atan2f>

0800c71c <sqrtf>:
 800c71c:	b508      	push	{r3, lr}
 800c71e:	ed2d 8b02 	vpush	{d8}
 800c722:	eeb0 8a40 	vmov.f32	s16, s0
 800c726:	f000 f8bd 	bl	800c8a4 <__ieee754_sqrtf>
 800c72a:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <sqrtf+0x44>)
 800c72c:	f993 3000 	ldrsb.w	r3, [r3]
 800c730:	3301      	adds	r3, #1
 800c732:	d011      	beq.n	800c758 <sqrtf+0x3c>
 800c734:	eeb4 8a48 	vcmp.f32	s16, s16
 800c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73c:	d60c      	bvs.n	800c758 <sqrtf+0x3c>
 800c73e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c764 <sqrtf+0x48>
 800c742:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c74a:	d505      	bpl.n	800c758 <sqrtf+0x3c>
 800c74c:	f000 f98a 	bl	800ca64 <__errno>
 800c750:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c754:	2321      	movs	r3, #33	; 0x21
 800c756:	6003      	str	r3, [r0, #0]
 800c758:	ecbd 8b02 	vpop	{d8}
 800c75c:	bd08      	pop	{r3, pc}
 800c75e:	bf00      	nop
 800c760:	24000035 	.word	0x24000035
 800c764:	00000000 	.word	0x00000000

0800c768 <__ieee754_atan2f>:
 800c768:	ee10 2a90 	vmov	r2, s1
 800c76c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c770:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c774:	b510      	push	{r4, lr}
 800c776:	eef0 7a40 	vmov.f32	s15, s0
 800c77a:	dc06      	bgt.n	800c78a <__ieee754_atan2f+0x22>
 800c77c:	ee10 0a10 	vmov	r0, s0
 800c780:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c784:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c788:	dd04      	ble.n	800c794 <__ieee754_atan2f+0x2c>
 800c78a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c78e:	eeb0 0a67 	vmov.f32	s0, s15
 800c792:	bd10      	pop	{r4, pc}
 800c794:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c798:	d103      	bne.n	800c7a2 <__ieee754_atan2f+0x3a>
 800c79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c79e:	f000 b885 	b.w	800c8ac <atanf>
 800c7a2:	1794      	asrs	r4, r2, #30
 800c7a4:	f004 0402 	and.w	r4, r4, #2
 800c7a8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c7ac:	b93b      	cbnz	r3, 800c7be <__ieee754_atan2f+0x56>
 800c7ae:	2c02      	cmp	r4, #2
 800c7b0:	d05c      	beq.n	800c86c <__ieee754_atan2f+0x104>
 800c7b2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c880 <__ieee754_atan2f+0x118>
 800c7b6:	2c03      	cmp	r4, #3
 800c7b8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c7bc:	e7e7      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c7be:	b939      	cbnz	r1, 800c7d0 <__ieee754_atan2f+0x68>
 800c7c0:	eddf 7a30 	vldr	s15, [pc, #192]	; 800c884 <__ieee754_atan2f+0x11c>
 800c7c4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800c888 <__ieee754_atan2f+0x120>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	fe67 7a80 	vselge.f32	s15, s15, s0
 800c7ce:	e7de      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c7d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7d4:	d110      	bne.n	800c7f8 <__ieee754_atan2f+0x90>
 800c7d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c7da:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7de:	d107      	bne.n	800c7f0 <__ieee754_atan2f+0x88>
 800c7e0:	2c02      	cmp	r4, #2
 800c7e2:	d846      	bhi.n	800c872 <__ieee754_atan2f+0x10a>
 800c7e4:	4b29      	ldr	r3, [pc, #164]	; (800c88c <__ieee754_atan2f+0x124>)
 800c7e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7ea:	edd4 7a00 	vldr	s15, [r4]
 800c7ee:	e7ce      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c7f0:	2c02      	cmp	r4, #2
 800c7f2:	d841      	bhi.n	800c878 <__ieee754_atan2f+0x110>
 800c7f4:	4b26      	ldr	r3, [pc, #152]	; (800c890 <__ieee754_atan2f+0x128>)
 800c7f6:	e7f6      	b.n	800c7e6 <__ieee754_atan2f+0x7e>
 800c7f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c7fc:	d0e0      	beq.n	800c7c0 <__ieee754_atan2f+0x58>
 800c7fe:	1a5b      	subs	r3, r3, r1
 800c800:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c804:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c808:	da1a      	bge.n	800c840 <__ieee754_atan2f+0xd8>
 800c80a:	2a00      	cmp	r2, #0
 800c80c:	da01      	bge.n	800c812 <__ieee754_atan2f+0xaa>
 800c80e:	313c      	adds	r1, #60	; 0x3c
 800c810:	db19      	blt.n	800c846 <__ieee754_atan2f+0xde>
 800c812:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c816:	f000 f91d 	bl	800ca54 <fabsf>
 800c81a:	f000 f847 	bl	800c8ac <atanf>
 800c81e:	eef0 7a40 	vmov.f32	s15, s0
 800c822:	2c01      	cmp	r4, #1
 800c824:	d012      	beq.n	800c84c <__ieee754_atan2f+0xe4>
 800c826:	2c02      	cmp	r4, #2
 800c828:	d017      	beq.n	800c85a <__ieee754_atan2f+0xf2>
 800c82a:	2c00      	cmp	r4, #0
 800c82c:	d0af      	beq.n	800c78e <__ieee754_atan2f+0x26>
 800c82e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c894 <__ieee754_atan2f+0x12c>
 800c832:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c836:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c898 <__ieee754_atan2f+0x130>
 800c83a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c83e:	e7a6      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c840:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c884 <__ieee754_atan2f+0x11c>
 800c844:	e7ed      	b.n	800c822 <__ieee754_atan2f+0xba>
 800c846:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c89c <__ieee754_atan2f+0x134>
 800c84a:	e7ea      	b.n	800c822 <__ieee754_atan2f+0xba>
 800c84c:	ee17 3a90 	vmov	r3, s15
 800c850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c854:	ee07 3a90 	vmov	s15, r3
 800c858:	e799      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c85a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c894 <__ieee754_atan2f+0x12c>
 800c85e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c862:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c898 <__ieee754_atan2f+0x130>
 800c866:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c86a:	e790      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c86c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c898 <__ieee754_atan2f+0x130>
 800c870:	e78d      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c872:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c8a0 <__ieee754_atan2f+0x138>
 800c876:	e78a      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c878:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c89c <__ieee754_atan2f+0x134>
 800c87c:	e787      	b.n	800c78e <__ieee754_atan2f+0x26>
 800c87e:	bf00      	nop
 800c880:	c0490fdb 	.word	0xc0490fdb
 800c884:	3fc90fdb 	.word	0x3fc90fdb
 800c888:	bfc90fdb 	.word	0xbfc90fdb
 800c88c:	0800f4e0 	.word	0x0800f4e0
 800c890:	0800f4ec 	.word	0x0800f4ec
 800c894:	33bbbd2e 	.word	0x33bbbd2e
 800c898:	40490fdb 	.word	0x40490fdb
 800c89c:	00000000 	.word	0x00000000
 800c8a0:	3f490fdb 	.word	0x3f490fdb

0800c8a4 <__ieee754_sqrtf>:
 800c8a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c8a8:	4770      	bx	lr
	...

0800c8ac <atanf>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	ee10 5a10 	vmov	r5, s0
 800c8b2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c8b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c8ba:	eef0 7a40 	vmov.f32	s15, s0
 800c8be:	db0f      	blt.n	800c8e0 <atanf+0x34>
 800c8c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c8c4:	dd04      	ble.n	800c8d0 <atanf+0x24>
 800c8c6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c8ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ca08 <atanf+0x15c>
 800c8d4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ca0c <atanf+0x160>
 800c8d8:	2d00      	cmp	r5, #0
 800c8da:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800c8de:	e7f4      	b.n	800c8ca <atanf+0x1e>
 800c8e0:	4b4b      	ldr	r3, [pc, #300]	; (800ca10 <atanf+0x164>)
 800c8e2:	429c      	cmp	r4, r3
 800c8e4:	dc10      	bgt.n	800c908 <atanf+0x5c>
 800c8e6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c8ea:	da0a      	bge.n	800c902 <atanf+0x56>
 800c8ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ca14 <atanf+0x168>
 800c8f0:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c8f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8f8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c900:	dce3      	bgt.n	800c8ca <atanf+0x1e>
 800c902:	f04f 33ff 	mov.w	r3, #4294967295
 800c906:	e013      	b.n	800c930 <atanf+0x84>
 800c908:	f000 f8a4 	bl	800ca54 <fabsf>
 800c90c:	4b42      	ldr	r3, [pc, #264]	; (800ca18 <atanf+0x16c>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	dc4f      	bgt.n	800c9b2 <atanf+0x106>
 800c912:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c916:	429c      	cmp	r4, r3
 800c918:	dc41      	bgt.n	800c99e <atanf+0xf2>
 800c91a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c91e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c922:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c926:	2300      	movs	r3, #0
 800c928:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c92c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c936:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ca1c <atanf+0x170>
 800c93a:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800ca20 <atanf+0x174>
 800c93e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800ca24 <atanf+0x178>
 800c942:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800ca28 <atanf+0x17c>
 800c946:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c94a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c94e:	eddf 5a37 	vldr	s11, [pc, #220]	; 800ca2c <atanf+0x180>
 800c952:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c956:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800ca30 <atanf+0x184>
 800c95a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c95e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ca34 <atanf+0x188>
 800c962:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c966:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800ca38 <atanf+0x18c>
 800c96a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c96e:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ca3c <atanf+0x190>
 800c972:	eee7 5a05 	vfma.f32	s11, s14, s10
 800c976:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800ca40 <atanf+0x194>
 800c97a:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c97e:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ca44 <atanf+0x198>
 800c982:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c986:	eea5 0a87 	vfma.f32	s0, s11, s14
 800c98a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c98e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c992:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c996:	d121      	bne.n	800c9dc <atanf+0x130>
 800c998:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c99c:	e795      	b.n	800c8ca <atanf+0x1e>
 800c99e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c9a2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c9a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c9b0:	e7be      	b.n	800c930 <atanf+0x84>
 800c9b2:	4b25      	ldr	r3, [pc, #148]	; (800ca48 <atanf+0x19c>)
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	dc0b      	bgt.n	800c9d0 <atanf+0x124>
 800c9b8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c9bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9c0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9ce:	e7af      	b.n	800c930 <atanf+0x84>
 800c9d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c9d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e7a9      	b.n	800c930 <atanf+0x84>
 800c9dc:	4a1b      	ldr	r2, [pc, #108]	; (800ca4c <atanf+0x1a0>)
 800c9de:	491c      	ldr	r1, [pc, #112]	; (800ca50 <atanf+0x1a4>)
 800c9e0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c9e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c9e8:	ed93 7a00 	vldr	s14, [r3]
 800c9ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c9f6:	ed92 0a00 	vldr	s0, [r2]
 800c9fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c9fe:	bfb8      	it	lt
 800ca00:	eef1 7a67 	vneglt.f32	s15, s15
 800ca04:	e761      	b.n	800c8ca <atanf+0x1e>
 800ca06:	bf00      	nop
 800ca08:	3fc90fdb 	.word	0x3fc90fdb
 800ca0c:	bfc90fdb 	.word	0xbfc90fdb
 800ca10:	3edfffff 	.word	0x3edfffff
 800ca14:	7149f2ca 	.word	0x7149f2ca
 800ca18:	3f97ffff 	.word	0x3f97ffff
 800ca1c:	3c8569d7 	.word	0x3c8569d7
 800ca20:	3d4bda59 	.word	0x3d4bda59
 800ca24:	bd15a221 	.word	0xbd15a221
 800ca28:	be4ccccd 	.word	0xbe4ccccd
 800ca2c:	3d886b35 	.word	0x3d886b35
 800ca30:	3dba2e6e 	.word	0x3dba2e6e
 800ca34:	3e124925 	.word	0x3e124925
 800ca38:	3eaaaaab 	.word	0x3eaaaaab
 800ca3c:	bd6ef16b 	.word	0xbd6ef16b
 800ca40:	bd9d8795 	.word	0xbd9d8795
 800ca44:	bde38e38 	.word	0xbde38e38
 800ca48:	401bffff 	.word	0x401bffff
 800ca4c:	0800f4f8 	.word	0x0800f4f8
 800ca50:	0800f508 	.word	0x0800f508

0800ca54 <fabsf>:
 800ca54:	ee10 3a10 	vmov	r3, s0
 800ca58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca5c:	ee00 3a10 	vmov	s0, r3
 800ca60:	4770      	bx	lr
	...

0800ca64 <__errno>:
 800ca64:	4b01      	ldr	r3, [pc, #4]	; (800ca6c <__errno+0x8>)
 800ca66:	6818      	ldr	r0, [r3, #0]
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	24000038 	.word	0x24000038

0800ca70 <__libc_init_array>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	4d0d      	ldr	r5, [pc, #52]	; (800caa8 <__libc_init_array+0x38>)
 800ca74:	4c0d      	ldr	r4, [pc, #52]	; (800caac <__libc_init_array+0x3c>)
 800ca76:	1b64      	subs	r4, r4, r5
 800ca78:	10a4      	asrs	r4, r4, #2
 800ca7a:	2600      	movs	r6, #0
 800ca7c:	42a6      	cmp	r6, r4
 800ca7e:	d109      	bne.n	800ca94 <__libc_init_array+0x24>
 800ca80:	4d0b      	ldr	r5, [pc, #44]	; (800cab0 <__libc_init_array+0x40>)
 800ca82:	4c0c      	ldr	r4, [pc, #48]	; (800cab4 <__libc_init_array+0x44>)
 800ca84:	f002 fc60 	bl	800f348 <_init>
 800ca88:	1b64      	subs	r4, r4, r5
 800ca8a:	10a4      	asrs	r4, r4, #2
 800ca8c:	2600      	movs	r6, #0
 800ca8e:	42a6      	cmp	r6, r4
 800ca90:	d105      	bne.n	800ca9e <__libc_init_array+0x2e>
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
 800ca94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca98:	4798      	blx	r3
 800ca9a:	3601      	adds	r6, #1
 800ca9c:	e7ee      	b.n	800ca7c <__libc_init_array+0xc>
 800ca9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800caa2:	4798      	blx	r3
 800caa4:	3601      	adds	r6, #1
 800caa6:	e7f2      	b.n	800ca8e <__libc_init_array+0x1e>
 800caa8:	0800f904 	.word	0x0800f904
 800caac:	0800f904 	.word	0x0800f904
 800cab0:	0800f904 	.word	0x0800f904
 800cab4:	0800f90c 	.word	0x0800f90c

0800cab8 <memset>:
 800cab8:	4402      	add	r2, r0
 800caba:	4603      	mov	r3, r0
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d100      	bne.n	800cac2 <memset+0xa>
 800cac0:	4770      	bx	lr
 800cac2:	f803 1b01 	strb.w	r1, [r3], #1
 800cac6:	e7f9      	b.n	800cabc <memset+0x4>

0800cac8 <__cvt>:
 800cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caca:	ed2d 8b02 	vpush	{d8}
 800cace:	eeb0 8b40 	vmov.f64	d8, d0
 800cad2:	b085      	sub	sp, #20
 800cad4:	4617      	mov	r7, r2
 800cad6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cad8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cada:	ee18 2a90 	vmov	r2, s17
 800cade:	f025 0520 	bic.w	r5, r5, #32
 800cae2:	2a00      	cmp	r2, #0
 800cae4:	bfb6      	itet	lt
 800cae6:	222d      	movlt	r2, #45	; 0x2d
 800cae8:	2200      	movge	r2, #0
 800caea:	eeb1 8b40 	vneglt.f64	d8, d0
 800caee:	2d46      	cmp	r5, #70	; 0x46
 800caf0:	460c      	mov	r4, r1
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	d004      	beq.n	800cb00 <__cvt+0x38>
 800caf6:	2d45      	cmp	r5, #69	; 0x45
 800caf8:	d100      	bne.n	800cafc <__cvt+0x34>
 800cafa:	3401      	adds	r4, #1
 800cafc:	2102      	movs	r1, #2
 800cafe:	e000      	b.n	800cb02 <__cvt+0x3a>
 800cb00:	2103      	movs	r1, #3
 800cb02:	ab03      	add	r3, sp, #12
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	ab02      	add	r3, sp, #8
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	4633      	mov	r3, r6
 800cb0e:	eeb0 0b48 	vmov.f64	d0, d8
 800cb12:	f000 fca9 	bl	800d468 <_dtoa_r>
 800cb16:	2d47      	cmp	r5, #71	; 0x47
 800cb18:	d109      	bne.n	800cb2e <__cvt+0x66>
 800cb1a:	07fb      	lsls	r3, r7, #31
 800cb1c:	d407      	bmi.n	800cb2e <__cvt+0x66>
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb22:	1a1b      	subs	r3, r3, r0
 800cb24:	6013      	str	r3, [r2, #0]
 800cb26:	b005      	add	sp, #20
 800cb28:	ecbd 8b02 	vpop	{d8}
 800cb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb2e:	2d46      	cmp	r5, #70	; 0x46
 800cb30:	eb00 0204 	add.w	r2, r0, r4
 800cb34:	d10c      	bne.n	800cb50 <__cvt+0x88>
 800cb36:	7803      	ldrb	r3, [r0, #0]
 800cb38:	2b30      	cmp	r3, #48	; 0x30
 800cb3a:	d107      	bne.n	800cb4c <__cvt+0x84>
 800cb3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb44:	bf1c      	itt	ne
 800cb46:	f1c4 0401 	rsbne	r4, r4, #1
 800cb4a:	6034      	strne	r4, [r6, #0]
 800cb4c:	6833      	ldr	r3, [r6, #0]
 800cb4e:	441a      	add	r2, r3
 800cb50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb58:	bf08      	it	eq
 800cb5a:	9203      	streq	r2, [sp, #12]
 800cb5c:	2130      	movs	r1, #48	; 0x30
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d2dc      	bcs.n	800cb1e <__cvt+0x56>
 800cb64:	1c5c      	adds	r4, r3, #1
 800cb66:	9403      	str	r4, [sp, #12]
 800cb68:	7019      	strb	r1, [r3, #0]
 800cb6a:	e7f8      	b.n	800cb5e <__cvt+0x96>

0800cb6c <__exponent>:
 800cb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2900      	cmp	r1, #0
 800cb72:	bfb8      	it	lt
 800cb74:	4249      	neglt	r1, r1
 800cb76:	f803 2b02 	strb.w	r2, [r3], #2
 800cb7a:	bfb4      	ite	lt
 800cb7c:	222d      	movlt	r2, #45	; 0x2d
 800cb7e:	222b      	movge	r2, #43	; 0x2b
 800cb80:	2909      	cmp	r1, #9
 800cb82:	7042      	strb	r2, [r0, #1]
 800cb84:	dd2a      	ble.n	800cbdc <__exponent+0x70>
 800cb86:	f10d 0407 	add.w	r4, sp, #7
 800cb8a:	46a4      	mov	ip, r4
 800cb8c:	270a      	movs	r7, #10
 800cb8e:	46a6      	mov	lr, r4
 800cb90:	460a      	mov	r2, r1
 800cb92:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb96:	fb07 1516 	mls	r5, r7, r6, r1
 800cb9a:	3530      	adds	r5, #48	; 0x30
 800cb9c:	2a63      	cmp	r2, #99	; 0x63
 800cb9e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cba2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cba6:	4631      	mov	r1, r6
 800cba8:	dcf1      	bgt.n	800cb8e <__exponent+0x22>
 800cbaa:	3130      	adds	r1, #48	; 0x30
 800cbac:	f1ae 0502 	sub.w	r5, lr, #2
 800cbb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cbb4:	1c44      	adds	r4, r0, #1
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	4561      	cmp	r1, ip
 800cbba:	d30a      	bcc.n	800cbd2 <__exponent+0x66>
 800cbbc:	f10d 0209 	add.w	r2, sp, #9
 800cbc0:	eba2 020e 	sub.w	r2, r2, lr
 800cbc4:	4565      	cmp	r5, ip
 800cbc6:	bf88      	it	hi
 800cbc8:	2200      	movhi	r2, #0
 800cbca:	4413      	add	r3, r2
 800cbcc:	1a18      	subs	r0, r3, r0
 800cbce:	b003      	add	sp, #12
 800cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cbda:	e7ed      	b.n	800cbb8 <__exponent+0x4c>
 800cbdc:	2330      	movs	r3, #48	; 0x30
 800cbde:	3130      	adds	r1, #48	; 0x30
 800cbe0:	7083      	strb	r3, [r0, #2]
 800cbe2:	70c1      	strb	r1, [r0, #3]
 800cbe4:	1d03      	adds	r3, r0, #4
 800cbe6:	e7f1      	b.n	800cbcc <__exponent+0x60>

0800cbe8 <_printf_float>:
 800cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	b08b      	sub	sp, #44	; 0x2c
 800cbee:	460c      	mov	r4, r1
 800cbf0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cbf4:	4616      	mov	r6, r2
 800cbf6:	461f      	mov	r7, r3
 800cbf8:	4605      	mov	r5, r0
 800cbfa:	f001 f9b7 	bl	800df6c <_localeconv_r>
 800cbfe:	f8d0 b000 	ldr.w	fp, [r0]
 800cc02:	4658      	mov	r0, fp
 800cc04:	f7f3 fb6c 	bl	80002e0 <strlen>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	9308      	str	r3, [sp, #32]
 800cc0c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc10:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc14:	6822      	ldr	r2, [r4, #0]
 800cc16:	3307      	adds	r3, #7
 800cc18:	f023 0307 	bic.w	r3, r3, #7
 800cc1c:	f103 0108 	add.w	r1, r3, #8
 800cc20:	f8c8 1000 	str.w	r1, [r8]
 800cc24:	4682      	mov	sl, r0
 800cc26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc2a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cc2e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ce90 <_printf_float+0x2a8>
 800cc32:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cc36:	eeb0 6bc0 	vabs.f64	d6, d0
 800cc3a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc42:	dd24      	ble.n	800cc8e <_printf_float+0xa6>
 800cc44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4c:	d502      	bpl.n	800cc54 <_printf_float+0x6c>
 800cc4e:	232d      	movs	r3, #45	; 0x2d
 800cc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc54:	4b90      	ldr	r3, [pc, #576]	; (800ce98 <_printf_float+0x2b0>)
 800cc56:	4891      	ldr	r0, [pc, #580]	; (800ce9c <_printf_float+0x2b4>)
 800cc58:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cc5c:	bf94      	ite	ls
 800cc5e:	4698      	movls	r8, r3
 800cc60:	4680      	movhi	r8, r0
 800cc62:	2303      	movs	r3, #3
 800cc64:	6123      	str	r3, [r4, #16]
 800cc66:	f022 0204 	bic.w	r2, r2, #4
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6022      	str	r2, [r4, #0]
 800cc6e:	9304      	str	r3, [sp, #16]
 800cc70:	9700      	str	r7, [sp, #0]
 800cc72:	4633      	mov	r3, r6
 800cc74:	aa09      	add	r2, sp, #36	; 0x24
 800cc76:	4621      	mov	r1, r4
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f000 f9d3 	bl	800d024 <_printf_common>
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f040 808a 	bne.w	800cd98 <_printf_float+0x1b0>
 800cc84:	f04f 30ff 	mov.w	r0, #4294967295
 800cc88:	b00b      	add	sp, #44	; 0x2c
 800cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc96:	d709      	bvc.n	800ccac <_printf_float+0xc4>
 800cc98:	ee10 3a90 	vmov	r3, s1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	bfbc      	itt	lt
 800cca0:	232d      	movlt	r3, #45	; 0x2d
 800cca2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cca6:	487e      	ldr	r0, [pc, #504]	; (800cea0 <_printf_float+0x2b8>)
 800cca8:	4b7e      	ldr	r3, [pc, #504]	; (800cea4 <_printf_float+0x2bc>)
 800ccaa:	e7d5      	b.n	800cc58 <_printf_float+0x70>
 800ccac:	6863      	ldr	r3, [r4, #4]
 800ccae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ccb2:	9104      	str	r1, [sp, #16]
 800ccb4:	1c59      	adds	r1, r3, #1
 800ccb6:	d13c      	bne.n	800cd32 <_printf_float+0x14a>
 800ccb8:	2306      	movs	r3, #6
 800ccba:	6063      	str	r3, [r4, #4]
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9303      	str	r3, [sp, #12]
 800ccc0:	ab08      	add	r3, sp, #32
 800ccc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ccc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ccca:	ab07      	add	r3, sp, #28
 800cccc:	6861      	ldr	r1, [r4, #4]
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	6022      	str	r2, [r4, #0]
 800ccd2:	f10d 031b 	add.w	r3, sp, #27
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f7ff fef6 	bl	800cac8 <__cvt>
 800ccdc:	9b04      	ldr	r3, [sp, #16]
 800ccde:	9907      	ldr	r1, [sp, #28]
 800cce0:	2b47      	cmp	r3, #71	; 0x47
 800cce2:	4680      	mov	r8, r0
 800cce4:	d108      	bne.n	800ccf8 <_printf_float+0x110>
 800cce6:	1cc8      	adds	r0, r1, #3
 800cce8:	db02      	blt.n	800ccf0 <_printf_float+0x108>
 800ccea:	6863      	ldr	r3, [r4, #4]
 800ccec:	4299      	cmp	r1, r3
 800ccee:	dd41      	ble.n	800cd74 <_printf_float+0x18c>
 800ccf0:	f1a9 0902 	sub.w	r9, r9, #2
 800ccf4:	fa5f f989 	uxtb.w	r9, r9
 800ccf8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ccfc:	d820      	bhi.n	800cd40 <_printf_float+0x158>
 800ccfe:	3901      	subs	r1, #1
 800cd00:	464a      	mov	r2, r9
 800cd02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd06:	9107      	str	r1, [sp, #28]
 800cd08:	f7ff ff30 	bl	800cb6c <__exponent>
 800cd0c:	9a08      	ldr	r2, [sp, #32]
 800cd0e:	9004      	str	r0, [sp, #16]
 800cd10:	1813      	adds	r3, r2, r0
 800cd12:	2a01      	cmp	r2, #1
 800cd14:	6123      	str	r3, [r4, #16]
 800cd16:	dc02      	bgt.n	800cd1e <_printf_float+0x136>
 800cd18:	6822      	ldr	r2, [r4, #0]
 800cd1a:	07d2      	lsls	r2, r2, #31
 800cd1c:	d501      	bpl.n	800cd22 <_printf_float+0x13a>
 800cd1e:	3301      	adds	r3, #1
 800cd20:	6123      	str	r3, [r4, #16]
 800cd22:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0a2      	beq.n	800cc70 <_printf_float+0x88>
 800cd2a:	232d      	movs	r3, #45	; 0x2d
 800cd2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd30:	e79e      	b.n	800cc70 <_printf_float+0x88>
 800cd32:	9904      	ldr	r1, [sp, #16]
 800cd34:	2947      	cmp	r1, #71	; 0x47
 800cd36:	d1c1      	bne.n	800ccbc <_printf_float+0xd4>
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1bf      	bne.n	800ccbc <_printf_float+0xd4>
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e7bc      	b.n	800ccba <_printf_float+0xd2>
 800cd40:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cd44:	d118      	bne.n	800cd78 <_printf_float+0x190>
 800cd46:	2900      	cmp	r1, #0
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	dd0b      	ble.n	800cd64 <_printf_float+0x17c>
 800cd4c:	6121      	str	r1, [r4, #16]
 800cd4e:	b913      	cbnz	r3, 800cd56 <_printf_float+0x16e>
 800cd50:	6822      	ldr	r2, [r4, #0]
 800cd52:	07d0      	lsls	r0, r2, #31
 800cd54:	d502      	bpl.n	800cd5c <_printf_float+0x174>
 800cd56:	3301      	adds	r3, #1
 800cd58:	440b      	add	r3, r1
 800cd5a:	6123      	str	r3, [r4, #16]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd60:	9304      	str	r3, [sp, #16]
 800cd62:	e7de      	b.n	800cd22 <_printf_float+0x13a>
 800cd64:	b913      	cbnz	r3, 800cd6c <_printf_float+0x184>
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	07d2      	lsls	r2, r2, #31
 800cd6a:	d501      	bpl.n	800cd70 <_printf_float+0x188>
 800cd6c:	3302      	adds	r3, #2
 800cd6e:	e7f4      	b.n	800cd5a <_printf_float+0x172>
 800cd70:	2301      	movs	r3, #1
 800cd72:	e7f2      	b.n	800cd5a <_printf_float+0x172>
 800cd74:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cd78:	9b08      	ldr	r3, [sp, #32]
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	db05      	blt.n	800cd8a <_printf_float+0x1a2>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	6121      	str	r1, [r4, #16]
 800cd82:	07d8      	lsls	r0, r3, #31
 800cd84:	d5ea      	bpl.n	800cd5c <_printf_float+0x174>
 800cd86:	1c4b      	adds	r3, r1, #1
 800cd88:	e7e7      	b.n	800cd5a <_printf_float+0x172>
 800cd8a:	2900      	cmp	r1, #0
 800cd8c:	bfd4      	ite	le
 800cd8e:	f1c1 0202 	rsble	r2, r1, #2
 800cd92:	2201      	movgt	r2, #1
 800cd94:	4413      	add	r3, r2
 800cd96:	e7e0      	b.n	800cd5a <_printf_float+0x172>
 800cd98:	6823      	ldr	r3, [r4, #0]
 800cd9a:	055a      	lsls	r2, r3, #21
 800cd9c:	d407      	bmi.n	800cdae <_printf_float+0x1c6>
 800cd9e:	6923      	ldr	r3, [r4, #16]
 800cda0:	4642      	mov	r2, r8
 800cda2:	4631      	mov	r1, r6
 800cda4:	4628      	mov	r0, r5
 800cda6:	47b8      	blx	r7
 800cda8:	3001      	adds	r0, #1
 800cdaa:	d12a      	bne.n	800ce02 <_printf_float+0x21a>
 800cdac:	e76a      	b.n	800cc84 <_printf_float+0x9c>
 800cdae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cdb2:	f240 80e2 	bls.w	800cf7a <_printf_float+0x392>
 800cdb6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cdba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc2:	d133      	bne.n	800ce2c <_printf_float+0x244>
 800cdc4:	4a38      	ldr	r2, [pc, #224]	; (800cea8 <_printf_float+0x2c0>)
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	4631      	mov	r1, r6
 800cdca:	4628      	mov	r0, r5
 800cdcc:	47b8      	blx	r7
 800cdce:	3001      	adds	r0, #1
 800cdd0:	f43f af58 	beq.w	800cc84 <_printf_float+0x9c>
 800cdd4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	db02      	blt.n	800cde2 <_printf_float+0x1fa>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	07d8      	lsls	r0, r3, #31
 800cde0:	d50f      	bpl.n	800ce02 <_printf_float+0x21a>
 800cde2:	4653      	mov	r3, sl
 800cde4:	465a      	mov	r2, fp
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	f43f af49 	beq.w	800cc84 <_printf_float+0x9c>
 800cdf2:	f04f 0800 	mov.w	r8, #0
 800cdf6:	f104 091a 	add.w	r9, r4, #26
 800cdfa:	9b08      	ldr	r3, [sp, #32]
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	4543      	cmp	r3, r8
 800ce00:	dc09      	bgt.n	800ce16 <_printf_float+0x22e>
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	079b      	lsls	r3, r3, #30
 800ce06:	f100 8108 	bmi.w	800d01a <_printf_float+0x432>
 800ce0a:	68e0      	ldr	r0, [r4, #12]
 800ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0e:	4298      	cmp	r0, r3
 800ce10:	bfb8      	it	lt
 800ce12:	4618      	movlt	r0, r3
 800ce14:	e738      	b.n	800cc88 <_printf_float+0xa0>
 800ce16:	2301      	movs	r3, #1
 800ce18:	464a      	mov	r2, r9
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	47b8      	blx	r7
 800ce20:	3001      	adds	r0, #1
 800ce22:	f43f af2f 	beq.w	800cc84 <_printf_float+0x9c>
 800ce26:	f108 0801 	add.w	r8, r8, #1
 800ce2a:	e7e6      	b.n	800cdfa <_printf_float+0x212>
 800ce2c:	9b07      	ldr	r3, [sp, #28]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	dc3c      	bgt.n	800ceac <_printf_float+0x2c4>
 800ce32:	4a1d      	ldr	r2, [pc, #116]	; (800cea8 <_printf_float+0x2c0>)
 800ce34:	2301      	movs	r3, #1
 800ce36:	4631      	mov	r1, r6
 800ce38:	4628      	mov	r0, r5
 800ce3a:	47b8      	blx	r7
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	f43f af21 	beq.w	800cc84 <_printf_float+0x9c>
 800ce42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	d102      	bne.n	800ce50 <_printf_float+0x268>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	07d9      	lsls	r1, r3, #31
 800ce4e:	d5d8      	bpl.n	800ce02 <_printf_float+0x21a>
 800ce50:	4653      	mov	r3, sl
 800ce52:	465a      	mov	r2, fp
 800ce54:	4631      	mov	r1, r6
 800ce56:	4628      	mov	r0, r5
 800ce58:	47b8      	blx	r7
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	f43f af12 	beq.w	800cc84 <_printf_float+0x9c>
 800ce60:	f04f 0900 	mov.w	r9, #0
 800ce64:	f104 0a1a 	add.w	sl, r4, #26
 800ce68:	9b07      	ldr	r3, [sp, #28]
 800ce6a:	425b      	negs	r3, r3
 800ce6c:	454b      	cmp	r3, r9
 800ce6e:	dc01      	bgt.n	800ce74 <_printf_float+0x28c>
 800ce70:	9b08      	ldr	r3, [sp, #32]
 800ce72:	e795      	b.n	800cda0 <_printf_float+0x1b8>
 800ce74:	2301      	movs	r3, #1
 800ce76:	4652      	mov	r2, sl
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	47b8      	blx	r7
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f43f af00 	beq.w	800cc84 <_printf_float+0x9c>
 800ce84:	f109 0901 	add.w	r9, r9, #1
 800ce88:	e7ee      	b.n	800ce68 <_printf_float+0x280>
 800ce8a:	bf00      	nop
 800ce8c:	f3af 8000 	nop.w
 800ce90:	ffffffff 	.word	0xffffffff
 800ce94:	7fefffff 	.word	0x7fefffff
 800ce98:	0800f51c 	.word	0x0800f51c
 800ce9c:	0800f520 	.word	0x0800f520
 800cea0:	0800f528 	.word	0x0800f528
 800cea4:	0800f524 	.word	0x0800f524
 800cea8:	0800f52c 	.word	0x0800f52c
 800ceac:	9a08      	ldr	r2, [sp, #32]
 800ceae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	bfa8      	it	ge
 800ceb4:	461a      	movge	r2, r3
 800ceb6:	2a00      	cmp	r2, #0
 800ceb8:	4691      	mov	r9, r2
 800ceba:	dc38      	bgt.n	800cf2e <_printf_float+0x346>
 800cebc:	2300      	movs	r3, #0
 800cebe:	9305      	str	r3, [sp, #20]
 800cec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cec4:	f104 021a 	add.w	r2, r4, #26
 800cec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceca:	9905      	ldr	r1, [sp, #20]
 800cecc:	9304      	str	r3, [sp, #16]
 800cece:	eba3 0309 	sub.w	r3, r3, r9
 800ced2:	428b      	cmp	r3, r1
 800ced4:	dc33      	bgt.n	800cf3e <_printf_float+0x356>
 800ced6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	db3c      	blt.n	800cf58 <_printf_float+0x370>
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	07da      	lsls	r2, r3, #31
 800cee2:	d439      	bmi.n	800cf58 <_printf_float+0x370>
 800cee4:	9a08      	ldr	r2, [sp, #32]
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	9907      	ldr	r1, [sp, #28]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	eba2 0901 	sub.w	r9, r2, r1
 800cef0:	4599      	cmp	r9, r3
 800cef2:	bfa8      	it	ge
 800cef4:	4699      	movge	r9, r3
 800cef6:	f1b9 0f00 	cmp.w	r9, #0
 800cefa:	dc35      	bgt.n	800cf68 <_printf_float+0x380>
 800cefc:	f04f 0800 	mov.w	r8, #0
 800cf00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf04:	f104 0a1a 	add.w	sl, r4, #26
 800cf08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf0c:	1a9b      	subs	r3, r3, r2
 800cf0e:	eba3 0309 	sub.w	r3, r3, r9
 800cf12:	4543      	cmp	r3, r8
 800cf14:	f77f af75 	ble.w	800ce02 <_printf_float+0x21a>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	4652      	mov	r2, sl
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	4628      	mov	r0, r5
 800cf20:	47b8      	blx	r7
 800cf22:	3001      	adds	r0, #1
 800cf24:	f43f aeae 	beq.w	800cc84 <_printf_float+0x9c>
 800cf28:	f108 0801 	add.w	r8, r8, #1
 800cf2c:	e7ec      	b.n	800cf08 <_printf_float+0x320>
 800cf2e:	4613      	mov	r3, r2
 800cf30:	4631      	mov	r1, r6
 800cf32:	4642      	mov	r2, r8
 800cf34:	4628      	mov	r0, r5
 800cf36:	47b8      	blx	r7
 800cf38:	3001      	adds	r0, #1
 800cf3a:	d1bf      	bne.n	800cebc <_printf_float+0x2d4>
 800cf3c:	e6a2      	b.n	800cc84 <_printf_float+0x9c>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4631      	mov	r1, r6
 800cf42:	4628      	mov	r0, r5
 800cf44:	9204      	str	r2, [sp, #16]
 800cf46:	47b8      	blx	r7
 800cf48:	3001      	adds	r0, #1
 800cf4a:	f43f ae9b 	beq.w	800cc84 <_printf_float+0x9c>
 800cf4e:	9b05      	ldr	r3, [sp, #20]
 800cf50:	9a04      	ldr	r2, [sp, #16]
 800cf52:	3301      	adds	r3, #1
 800cf54:	9305      	str	r3, [sp, #20]
 800cf56:	e7b7      	b.n	800cec8 <_printf_float+0x2e0>
 800cf58:	4653      	mov	r3, sl
 800cf5a:	465a      	mov	r2, fp
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	d1be      	bne.n	800cee4 <_printf_float+0x2fc>
 800cf66:	e68d      	b.n	800cc84 <_printf_float+0x9c>
 800cf68:	9a04      	ldr	r2, [sp, #16]
 800cf6a:	464b      	mov	r3, r9
 800cf6c:	4442      	add	r2, r8
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b8      	blx	r7
 800cf74:	3001      	adds	r0, #1
 800cf76:	d1c1      	bne.n	800cefc <_printf_float+0x314>
 800cf78:	e684      	b.n	800cc84 <_printf_float+0x9c>
 800cf7a:	9a08      	ldr	r2, [sp, #32]
 800cf7c:	2a01      	cmp	r2, #1
 800cf7e:	dc01      	bgt.n	800cf84 <_printf_float+0x39c>
 800cf80:	07db      	lsls	r3, r3, #31
 800cf82:	d537      	bpl.n	800cff4 <_printf_float+0x40c>
 800cf84:	2301      	movs	r3, #1
 800cf86:	4642      	mov	r2, r8
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f43f ae78 	beq.w	800cc84 <_printf_float+0x9c>
 800cf94:	4653      	mov	r3, sl
 800cf96:	465a      	mov	r2, fp
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	47b8      	blx	r7
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	f43f ae70 	beq.w	800cc84 <_printf_float+0x9c>
 800cfa4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cfa8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb0:	d01b      	beq.n	800cfea <_printf_float+0x402>
 800cfb2:	9b08      	ldr	r3, [sp, #32]
 800cfb4:	f108 0201 	add.w	r2, r8, #1
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d10e      	bne.n	800cfe2 <_printf_float+0x3fa>
 800cfc4:	e65e      	b.n	800cc84 <_printf_float+0x9c>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	464a      	mov	r2, r9
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4628      	mov	r0, r5
 800cfce:	47b8      	blx	r7
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	f43f ae57 	beq.w	800cc84 <_printf_float+0x9c>
 800cfd6:	f108 0801 	add.w	r8, r8, #1
 800cfda:	9b08      	ldr	r3, [sp, #32]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	4543      	cmp	r3, r8
 800cfe0:	dcf1      	bgt.n	800cfc6 <_printf_float+0x3de>
 800cfe2:	9b04      	ldr	r3, [sp, #16]
 800cfe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfe8:	e6db      	b.n	800cda2 <_printf_float+0x1ba>
 800cfea:	f04f 0800 	mov.w	r8, #0
 800cfee:	f104 091a 	add.w	r9, r4, #26
 800cff2:	e7f2      	b.n	800cfda <_printf_float+0x3f2>
 800cff4:	2301      	movs	r3, #1
 800cff6:	4642      	mov	r2, r8
 800cff8:	e7df      	b.n	800cfba <_printf_float+0x3d2>
 800cffa:	2301      	movs	r3, #1
 800cffc:	464a      	mov	r2, r9
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	47b8      	blx	r7
 800d004:	3001      	adds	r0, #1
 800d006:	f43f ae3d 	beq.w	800cc84 <_printf_float+0x9c>
 800d00a:	f108 0801 	add.w	r8, r8, #1
 800d00e:	68e3      	ldr	r3, [r4, #12]
 800d010:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d012:	1a5b      	subs	r3, r3, r1
 800d014:	4543      	cmp	r3, r8
 800d016:	dcf0      	bgt.n	800cffa <_printf_float+0x412>
 800d018:	e6f7      	b.n	800ce0a <_printf_float+0x222>
 800d01a:	f04f 0800 	mov.w	r8, #0
 800d01e:	f104 0919 	add.w	r9, r4, #25
 800d022:	e7f4      	b.n	800d00e <_printf_float+0x426>

0800d024 <_printf_common>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	4616      	mov	r6, r2
 800d02a:	4699      	mov	r9, r3
 800d02c:	688a      	ldr	r2, [r1, #8]
 800d02e:	690b      	ldr	r3, [r1, #16]
 800d030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d034:	4293      	cmp	r3, r2
 800d036:	bfb8      	it	lt
 800d038:	4613      	movlt	r3, r2
 800d03a:	6033      	str	r3, [r6, #0]
 800d03c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d040:	4607      	mov	r7, r0
 800d042:	460c      	mov	r4, r1
 800d044:	b10a      	cbz	r2, 800d04a <_printf_common+0x26>
 800d046:	3301      	adds	r3, #1
 800d048:	6033      	str	r3, [r6, #0]
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	0699      	lsls	r1, r3, #26
 800d04e:	bf42      	ittt	mi
 800d050:	6833      	ldrmi	r3, [r6, #0]
 800d052:	3302      	addmi	r3, #2
 800d054:	6033      	strmi	r3, [r6, #0]
 800d056:	6825      	ldr	r5, [r4, #0]
 800d058:	f015 0506 	ands.w	r5, r5, #6
 800d05c:	d106      	bne.n	800d06c <_printf_common+0x48>
 800d05e:	f104 0a19 	add.w	sl, r4, #25
 800d062:	68e3      	ldr	r3, [r4, #12]
 800d064:	6832      	ldr	r2, [r6, #0]
 800d066:	1a9b      	subs	r3, r3, r2
 800d068:	42ab      	cmp	r3, r5
 800d06a:	dc26      	bgt.n	800d0ba <_printf_common+0x96>
 800d06c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d070:	1e13      	subs	r3, r2, #0
 800d072:	6822      	ldr	r2, [r4, #0]
 800d074:	bf18      	it	ne
 800d076:	2301      	movne	r3, #1
 800d078:	0692      	lsls	r2, r2, #26
 800d07a:	d42b      	bmi.n	800d0d4 <_printf_common+0xb0>
 800d07c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d080:	4649      	mov	r1, r9
 800d082:	4638      	mov	r0, r7
 800d084:	47c0      	blx	r8
 800d086:	3001      	adds	r0, #1
 800d088:	d01e      	beq.n	800d0c8 <_printf_common+0xa4>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	68e5      	ldr	r5, [r4, #12]
 800d08e:	6832      	ldr	r2, [r6, #0]
 800d090:	f003 0306 	and.w	r3, r3, #6
 800d094:	2b04      	cmp	r3, #4
 800d096:	bf08      	it	eq
 800d098:	1aad      	subeq	r5, r5, r2
 800d09a:	68a3      	ldr	r3, [r4, #8]
 800d09c:	6922      	ldr	r2, [r4, #16]
 800d09e:	bf0c      	ite	eq
 800d0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0a4:	2500      	movne	r5, #0
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	bfc4      	itt	gt
 800d0aa:	1a9b      	subgt	r3, r3, r2
 800d0ac:	18ed      	addgt	r5, r5, r3
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	341a      	adds	r4, #26
 800d0b2:	42b5      	cmp	r5, r6
 800d0b4:	d11a      	bne.n	800d0ec <_printf_common+0xc8>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e008      	b.n	800d0cc <_printf_common+0xa8>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	4652      	mov	r2, sl
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	47c0      	blx	r8
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d103      	bne.n	800d0d0 <_printf_common+0xac>
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d0:	3501      	adds	r5, #1
 800d0d2:	e7c6      	b.n	800d062 <_printf_common+0x3e>
 800d0d4:	18e1      	adds	r1, r4, r3
 800d0d6:	1c5a      	adds	r2, r3, #1
 800d0d8:	2030      	movs	r0, #48	; 0x30
 800d0da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0de:	4422      	add	r2, r4
 800d0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0e8:	3302      	adds	r3, #2
 800d0ea:	e7c7      	b.n	800d07c <_printf_common+0x58>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	4649      	mov	r1, r9
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	47c0      	blx	r8
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	d0e6      	beq.n	800d0c8 <_printf_common+0xa4>
 800d0fa:	3601      	adds	r6, #1
 800d0fc:	e7d9      	b.n	800d0b2 <_printf_common+0x8e>
	...

0800d100 <_printf_i>:
 800d100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	4691      	mov	r9, r2
 800d108:	7e27      	ldrb	r7, [r4, #24]
 800d10a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d10c:	2f78      	cmp	r7, #120	; 0x78
 800d10e:	4680      	mov	r8, r0
 800d110:	469a      	mov	sl, r3
 800d112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d116:	d807      	bhi.n	800d128 <_printf_i+0x28>
 800d118:	2f62      	cmp	r7, #98	; 0x62
 800d11a:	d80a      	bhi.n	800d132 <_printf_i+0x32>
 800d11c:	2f00      	cmp	r7, #0
 800d11e:	f000 80d8 	beq.w	800d2d2 <_printf_i+0x1d2>
 800d122:	2f58      	cmp	r7, #88	; 0x58
 800d124:	f000 80a3 	beq.w	800d26e <_printf_i+0x16e>
 800d128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d12c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d130:	e03a      	b.n	800d1a8 <_printf_i+0xa8>
 800d132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d136:	2b15      	cmp	r3, #21
 800d138:	d8f6      	bhi.n	800d128 <_printf_i+0x28>
 800d13a:	a001      	add	r0, pc, #4	; (adr r0, 800d140 <_printf_i+0x40>)
 800d13c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d140:	0800d199 	.word	0x0800d199
 800d144:	0800d1ad 	.word	0x0800d1ad
 800d148:	0800d129 	.word	0x0800d129
 800d14c:	0800d129 	.word	0x0800d129
 800d150:	0800d129 	.word	0x0800d129
 800d154:	0800d129 	.word	0x0800d129
 800d158:	0800d1ad 	.word	0x0800d1ad
 800d15c:	0800d129 	.word	0x0800d129
 800d160:	0800d129 	.word	0x0800d129
 800d164:	0800d129 	.word	0x0800d129
 800d168:	0800d129 	.word	0x0800d129
 800d16c:	0800d2b9 	.word	0x0800d2b9
 800d170:	0800d1dd 	.word	0x0800d1dd
 800d174:	0800d29b 	.word	0x0800d29b
 800d178:	0800d129 	.word	0x0800d129
 800d17c:	0800d129 	.word	0x0800d129
 800d180:	0800d2db 	.word	0x0800d2db
 800d184:	0800d129 	.word	0x0800d129
 800d188:	0800d1dd 	.word	0x0800d1dd
 800d18c:	0800d129 	.word	0x0800d129
 800d190:	0800d129 	.word	0x0800d129
 800d194:	0800d2a3 	.word	0x0800d2a3
 800d198:	680b      	ldr	r3, [r1, #0]
 800d19a:	1d1a      	adds	r2, r3, #4
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	600a      	str	r2, [r1, #0]
 800d1a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e0a3      	b.n	800d2f4 <_printf_i+0x1f4>
 800d1ac:	6825      	ldr	r5, [r4, #0]
 800d1ae:	6808      	ldr	r0, [r1, #0]
 800d1b0:	062e      	lsls	r6, r5, #24
 800d1b2:	f100 0304 	add.w	r3, r0, #4
 800d1b6:	d50a      	bpl.n	800d1ce <_printf_i+0xce>
 800d1b8:	6805      	ldr	r5, [r0, #0]
 800d1ba:	600b      	str	r3, [r1, #0]
 800d1bc:	2d00      	cmp	r5, #0
 800d1be:	da03      	bge.n	800d1c8 <_printf_i+0xc8>
 800d1c0:	232d      	movs	r3, #45	; 0x2d
 800d1c2:	426d      	negs	r5, r5
 800d1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c8:	485e      	ldr	r0, [pc, #376]	; (800d344 <_printf_i+0x244>)
 800d1ca:	230a      	movs	r3, #10
 800d1cc:	e019      	b.n	800d202 <_printf_i+0x102>
 800d1ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d1d2:	6805      	ldr	r5, [r0, #0]
 800d1d4:	600b      	str	r3, [r1, #0]
 800d1d6:	bf18      	it	ne
 800d1d8:	b22d      	sxthne	r5, r5
 800d1da:	e7ef      	b.n	800d1bc <_printf_i+0xbc>
 800d1dc:	680b      	ldr	r3, [r1, #0]
 800d1de:	6825      	ldr	r5, [r4, #0]
 800d1e0:	1d18      	adds	r0, r3, #4
 800d1e2:	6008      	str	r0, [r1, #0]
 800d1e4:	0628      	lsls	r0, r5, #24
 800d1e6:	d501      	bpl.n	800d1ec <_printf_i+0xec>
 800d1e8:	681d      	ldr	r5, [r3, #0]
 800d1ea:	e002      	b.n	800d1f2 <_printf_i+0xf2>
 800d1ec:	0669      	lsls	r1, r5, #25
 800d1ee:	d5fb      	bpl.n	800d1e8 <_printf_i+0xe8>
 800d1f0:	881d      	ldrh	r5, [r3, #0]
 800d1f2:	4854      	ldr	r0, [pc, #336]	; (800d344 <_printf_i+0x244>)
 800d1f4:	2f6f      	cmp	r7, #111	; 0x6f
 800d1f6:	bf0c      	ite	eq
 800d1f8:	2308      	moveq	r3, #8
 800d1fa:	230a      	movne	r3, #10
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d202:	6866      	ldr	r6, [r4, #4]
 800d204:	60a6      	str	r6, [r4, #8]
 800d206:	2e00      	cmp	r6, #0
 800d208:	bfa2      	ittt	ge
 800d20a:	6821      	ldrge	r1, [r4, #0]
 800d20c:	f021 0104 	bicge.w	r1, r1, #4
 800d210:	6021      	strge	r1, [r4, #0]
 800d212:	b90d      	cbnz	r5, 800d218 <_printf_i+0x118>
 800d214:	2e00      	cmp	r6, #0
 800d216:	d04d      	beq.n	800d2b4 <_printf_i+0x1b4>
 800d218:	4616      	mov	r6, r2
 800d21a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d21e:	fb03 5711 	mls	r7, r3, r1, r5
 800d222:	5dc7      	ldrb	r7, [r0, r7]
 800d224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d228:	462f      	mov	r7, r5
 800d22a:	42bb      	cmp	r3, r7
 800d22c:	460d      	mov	r5, r1
 800d22e:	d9f4      	bls.n	800d21a <_printf_i+0x11a>
 800d230:	2b08      	cmp	r3, #8
 800d232:	d10b      	bne.n	800d24c <_printf_i+0x14c>
 800d234:	6823      	ldr	r3, [r4, #0]
 800d236:	07df      	lsls	r7, r3, #31
 800d238:	d508      	bpl.n	800d24c <_printf_i+0x14c>
 800d23a:	6923      	ldr	r3, [r4, #16]
 800d23c:	6861      	ldr	r1, [r4, #4]
 800d23e:	4299      	cmp	r1, r3
 800d240:	bfde      	ittt	le
 800d242:	2330      	movle	r3, #48	; 0x30
 800d244:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d248:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d24c:	1b92      	subs	r2, r2, r6
 800d24e:	6122      	str	r2, [r4, #16]
 800d250:	f8cd a000 	str.w	sl, [sp]
 800d254:	464b      	mov	r3, r9
 800d256:	aa03      	add	r2, sp, #12
 800d258:	4621      	mov	r1, r4
 800d25a:	4640      	mov	r0, r8
 800d25c:	f7ff fee2 	bl	800d024 <_printf_common>
 800d260:	3001      	adds	r0, #1
 800d262:	d14c      	bne.n	800d2fe <_printf_i+0x1fe>
 800d264:	f04f 30ff 	mov.w	r0, #4294967295
 800d268:	b004      	add	sp, #16
 800d26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26e:	4835      	ldr	r0, [pc, #212]	; (800d344 <_printf_i+0x244>)
 800d270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	680e      	ldr	r6, [r1, #0]
 800d278:	061f      	lsls	r7, r3, #24
 800d27a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d27e:	600e      	str	r6, [r1, #0]
 800d280:	d514      	bpl.n	800d2ac <_printf_i+0x1ac>
 800d282:	07d9      	lsls	r1, r3, #31
 800d284:	bf44      	itt	mi
 800d286:	f043 0320 	orrmi.w	r3, r3, #32
 800d28a:	6023      	strmi	r3, [r4, #0]
 800d28c:	b91d      	cbnz	r5, 800d296 <_printf_i+0x196>
 800d28e:	6823      	ldr	r3, [r4, #0]
 800d290:	f023 0320 	bic.w	r3, r3, #32
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	2310      	movs	r3, #16
 800d298:	e7b0      	b.n	800d1fc <_printf_i+0xfc>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	f043 0320 	orr.w	r3, r3, #32
 800d2a0:	6023      	str	r3, [r4, #0]
 800d2a2:	2378      	movs	r3, #120	; 0x78
 800d2a4:	4828      	ldr	r0, [pc, #160]	; (800d348 <_printf_i+0x248>)
 800d2a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2aa:	e7e3      	b.n	800d274 <_printf_i+0x174>
 800d2ac:	065e      	lsls	r6, r3, #25
 800d2ae:	bf48      	it	mi
 800d2b0:	b2ad      	uxthmi	r5, r5
 800d2b2:	e7e6      	b.n	800d282 <_printf_i+0x182>
 800d2b4:	4616      	mov	r6, r2
 800d2b6:	e7bb      	b.n	800d230 <_printf_i+0x130>
 800d2b8:	680b      	ldr	r3, [r1, #0]
 800d2ba:	6826      	ldr	r6, [r4, #0]
 800d2bc:	6960      	ldr	r0, [r4, #20]
 800d2be:	1d1d      	adds	r5, r3, #4
 800d2c0:	600d      	str	r5, [r1, #0]
 800d2c2:	0635      	lsls	r5, r6, #24
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	d501      	bpl.n	800d2cc <_printf_i+0x1cc>
 800d2c8:	6018      	str	r0, [r3, #0]
 800d2ca:	e002      	b.n	800d2d2 <_printf_i+0x1d2>
 800d2cc:	0671      	lsls	r1, r6, #25
 800d2ce:	d5fb      	bpl.n	800d2c8 <_printf_i+0x1c8>
 800d2d0:	8018      	strh	r0, [r3, #0]
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	6123      	str	r3, [r4, #16]
 800d2d6:	4616      	mov	r6, r2
 800d2d8:	e7ba      	b.n	800d250 <_printf_i+0x150>
 800d2da:	680b      	ldr	r3, [r1, #0]
 800d2dc:	1d1a      	adds	r2, r3, #4
 800d2de:	600a      	str	r2, [r1, #0]
 800d2e0:	681e      	ldr	r6, [r3, #0]
 800d2e2:	6862      	ldr	r2, [r4, #4]
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f7f3 f802 	bl	80002f0 <memchr>
 800d2ec:	b108      	cbz	r0, 800d2f2 <_printf_i+0x1f2>
 800d2ee:	1b80      	subs	r0, r0, r6
 800d2f0:	6060      	str	r0, [r4, #4]
 800d2f2:	6863      	ldr	r3, [r4, #4]
 800d2f4:	6123      	str	r3, [r4, #16]
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2fc:	e7a8      	b.n	800d250 <_printf_i+0x150>
 800d2fe:	6923      	ldr	r3, [r4, #16]
 800d300:	4632      	mov	r2, r6
 800d302:	4649      	mov	r1, r9
 800d304:	4640      	mov	r0, r8
 800d306:	47d0      	blx	sl
 800d308:	3001      	adds	r0, #1
 800d30a:	d0ab      	beq.n	800d264 <_printf_i+0x164>
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	079b      	lsls	r3, r3, #30
 800d310:	d413      	bmi.n	800d33a <_printf_i+0x23a>
 800d312:	68e0      	ldr	r0, [r4, #12]
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	4298      	cmp	r0, r3
 800d318:	bfb8      	it	lt
 800d31a:	4618      	movlt	r0, r3
 800d31c:	e7a4      	b.n	800d268 <_printf_i+0x168>
 800d31e:	2301      	movs	r3, #1
 800d320:	4632      	mov	r2, r6
 800d322:	4649      	mov	r1, r9
 800d324:	4640      	mov	r0, r8
 800d326:	47d0      	blx	sl
 800d328:	3001      	adds	r0, #1
 800d32a:	d09b      	beq.n	800d264 <_printf_i+0x164>
 800d32c:	3501      	adds	r5, #1
 800d32e:	68e3      	ldr	r3, [r4, #12]
 800d330:	9903      	ldr	r1, [sp, #12]
 800d332:	1a5b      	subs	r3, r3, r1
 800d334:	42ab      	cmp	r3, r5
 800d336:	dcf2      	bgt.n	800d31e <_printf_i+0x21e>
 800d338:	e7eb      	b.n	800d312 <_printf_i+0x212>
 800d33a:	2500      	movs	r5, #0
 800d33c:	f104 0619 	add.w	r6, r4, #25
 800d340:	e7f5      	b.n	800d32e <_printf_i+0x22e>
 800d342:	bf00      	nop
 800d344:	0800f52e 	.word	0x0800f52e
 800d348:	0800f53f 	.word	0x0800f53f

0800d34c <quorem>:
 800d34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	6903      	ldr	r3, [r0, #16]
 800d352:	690c      	ldr	r4, [r1, #16]
 800d354:	42a3      	cmp	r3, r4
 800d356:	4607      	mov	r7, r0
 800d358:	f2c0 8081 	blt.w	800d45e <quorem+0x112>
 800d35c:	3c01      	subs	r4, #1
 800d35e:	f101 0814 	add.w	r8, r1, #20
 800d362:	f100 0514 	add.w	r5, r0, #20
 800d366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d36a:	9301      	str	r3, [sp, #4]
 800d36c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d374:	3301      	adds	r3, #1
 800d376:	429a      	cmp	r2, r3
 800d378:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d37c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d380:	fbb2 f6f3 	udiv	r6, r2, r3
 800d384:	d331      	bcc.n	800d3ea <quorem+0x9e>
 800d386:	f04f 0e00 	mov.w	lr, #0
 800d38a:	4640      	mov	r0, r8
 800d38c:	46ac      	mov	ip, r5
 800d38e:	46f2      	mov	sl, lr
 800d390:	f850 2b04 	ldr.w	r2, [r0], #4
 800d394:	b293      	uxth	r3, r2
 800d396:	fb06 e303 	mla	r3, r6, r3, lr
 800d39a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	ebaa 0303 	sub.w	r3, sl, r3
 800d3a4:	0c12      	lsrs	r2, r2, #16
 800d3a6:	f8dc a000 	ldr.w	sl, [ip]
 800d3aa:	fb06 e202 	mla	r2, r6, r2, lr
 800d3ae:	fa13 f38a 	uxtah	r3, r3, sl
 800d3b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3b6:	fa1f fa82 	uxth.w	sl, r2
 800d3ba:	f8dc 2000 	ldr.w	r2, [ip]
 800d3be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d3c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3cc:	4581      	cmp	r9, r0
 800d3ce:	f84c 3b04 	str.w	r3, [ip], #4
 800d3d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d3d6:	d2db      	bcs.n	800d390 <quorem+0x44>
 800d3d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d3dc:	b92b      	cbnz	r3, 800d3ea <quorem+0x9e>
 800d3de:	9b01      	ldr	r3, [sp, #4]
 800d3e0:	3b04      	subs	r3, #4
 800d3e2:	429d      	cmp	r5, r3
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	d32e      	bcc.n	800d446 <quorem+0xfa>
 800d3e8:	613c      	str	r4, [r7, #16]
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	f001 f856 	bl	800e49c <__mcmp>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	db24      	blt.n	800d43e <quorem+0xf2>
 800d3f4:	3601      	adds	r6, #1
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	f04f 0c00 	mov.w	ip, #0
 800d3fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d400:	f8d0 e000 	ldr.w	lr, [r0]
 800d404:	b293      	uxth	r3, r2
 800d406:	ebac 0303 	sub.w	r3, ip, r3
 800d40a:	0c12      	lsrs	r2, r2, #16
 800d40c:	fa13 f38e 	uxtah	r3, r3, lr
 800d410:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d418:	b29b      	uxth	r3, r3
 800d41a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d41e:	45c1      	cmp	r9, r8
 800d420:	f840 3b04 	str.w	r3, [r0], #4
 800d424:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d428:	d2e8      	bcs.n	800d3fc <quorem+0xb0>
 800d42a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d42e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d432:	b922      	cbnz	r2, 800d43e <quorem+0xf2>
 800d434:	3b04      	subs	r3, #4
 800d436:	429d      	cmp	r5, r3
 800d438:	461a      	mov	r2, r3
 800d43a:	d30a      	bcc.n	800d452 <quorem+0x106>
 800d43c:	613c      	str	r4, [r7, #16]
 800d43e:	4630      	mov	r0, r6
 800d440:	b003      	add	sp, #12
 800d442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d446:	6812      	ldr	r2, [r2, #0]
 800d448:	3b04      	subs	r3, #4
 800d44a:	2a00      	cmp	r2, #0
 800d44c:	d1cc      	bne.n	800d3e8 <quorem+0x9c>
 800d44e:	3c01      	subs	r4, #1
 800d450:	e7c7      	b.n	800d3e2 <quorem+0x96>
 800d452:	6812      	ldr	r2, [r2, #0]
 800d454:	3b04      	subs	r3, #4
 800d456:	2a00      	cmp	r2, #0
 800d458:	d1f0      	bne.n	800d43c <quorem+0xf0>
 800d45a:	3c01      	subs	r4, #1
 800d45c:	e7eb      	b.n	800d436 <quorem+0xea>
 800d45e:	2000      	movs	r0, #0
 800d460:	e7ee      	b.n	800d440 <quorem+0xf4>
 800d462:	0000      	movs	r0, r0
 800d464:	0000      	movs	r0, r0
	...

0800d468 <_dtoa_r>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	ec59 8b10 	vmov	r8, r9, d0
 800d470:	b095      	sub	sp, #84	; 0x54
 800d472:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d474:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d476:	9107      	str	r1, [sp, #28]
 800d478:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d47c:	4606      	mov	r6, r0
 800d47e:	9209      	str	r2, [sp, #36]	; 0x24
 800d480:	9310      	str	r3, [sp, #64]	; 0x40
 800d482:	b975      	cbnz	r5, 800d4a2 <_dtoa_r+0x3a>
 800d484:	2010      	movs	r0, #16
 800d486:	f000 fd75 	bl	800df74 <malloc>
 800d48a:	4602      	mov	r2, r0
 800d48c:	6270      	str	r0, [r6, #36]	; 0x24
 800d48e:	b920      	cbnz	r0, 800d49a <_dtoa_r+0x32>
 800d490:	4bab      	ldr	r3, [pc, #684]	; (800d740 <_dtoa_r+0x2d8>)
 800d492:	21ea      	movs	r1, #234	; 0xea
 800d494:	48ab      	ldr	r0, [pc, #684]	; (800d744 <_dtoa_r+0x2dc>)
 800d496:	f001 f9cb 	bl	800e830 <__assert_func>
 800d49a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d49e:	6005      	str	r5, [r0, #0]
 800d4a0:	60c5      	str	r5, [r0, #12]
 800d4a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4a4:	6819      	ldr	r1, [r3, #0]
 800d4a6:	b151      	cbz	r1, 800d4be <_dtoa_r+0x56>
 800d4a8:	685a      	ldr	r2, [r3, #4]
 800d4aa:	604a      	str	r2, [r1, #4]
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	4093      	lsls	r3, r2
 800d4b0:	608b      	str	r3, [r1, #8]
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f000 fdb4 	bl	800e020 <_Bfree>
 800d4b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	f1b9 0300 	subs.w	r3, r9, #0
 800d4c2:	bfbb      	ittet	lt
 800d4c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d4c8:	9303      	strlt	r3, [sp, #12]
 800d4ca:	2300      	movge	r3, #0
 800d4cc:	2201      	movlt	r2, #1
 800d4ce:	bfac      	ite	ge
 800d4d0:	6023      	strge	r3, [r4, #0]
 800d4d2:	6022      	strlt	r2, [r4, #0]
 800d4d4:	4b9c      	ldr	r3, [pc, #624]	; (800d748 <_dtoa_r+0x2e0>)
 800d4d6:	9c03      	ldr	r4, [sp, #12]
 800d4d8:	43a3      	bics	r3, r4
 800d4da:	d11a      	bne.n	800d512 <_dtoa_r+0xaa>
 800d4dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d4de:	f242 730f 	movw	r3, #9999	; 0x270f
 800d4e2:	6013      	str	r3, [r2, #0]
 800d4e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d4e8:	ea53 0308 	orrs.w	r3, r3, r8
 800d4ec:	f000 8512 	beq.w	800df14 <_dtoa_r+0xaac>
 800d4f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d4f2:	b953      	cbnz	r3, 800d50a <_dtoa_r+0xa2>
 800d4f4:	4b95      	ldr	r3, [pc, #596]	; (800d74c <_dtoa_r+0x2e4>)
 800d4f6:	e01f      	b.n	800d538 <_dtoa_r+0xd0>
 800d4f8:	4b95      	ldr	r3, [pc, #596]	; (800d750 <_dtoa_r+0x2e8>)
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	9800      	ldr	r0, [sp, #0]
 800d504:	b015      	add	sp, #84	; 0x54
 800d506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50a:	4b90      	ldr	r3, [pc, #576]	; (800d74c <_dtoa_r+0x2e4>)
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	3303      	adds	r3, #3
 800d510:	e7f5      	b.n	800d4fe <_dtoa_r+0x96>
 800d512:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d516:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d522:	d10b      	bne.n	800d53c <_dtoa_r+0xd4>
 800d524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d526:	2301      	movs	r3, #1
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 84ee 	beq.w	800df0e <_dtoa_r+0xaa6>
 800d532:	4888      	ldr	r0, [pc, #544]	; (800d754 <_dtoa_r+0x2ec>)
 800d534:	6018      	str	r0, [r3, #0]
 800d536:	1e43      	subs	r3, r0, #1
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	e7e2      	b.n	800d502 <_dtoa_r+0x9a>
 800d53c:	a913      	add	r1, sp, #76	; 0x4c
 800d53e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d542:	aa12      	add	r2, sp, #72	; 0x48
 800d544:	4630      	mov	r0, r6
 800d546:	f001 f84d 	bl	800e5e4 <__d2b>
 800d54a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d54e:	4605      	mov	r5, r0
 800d550:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d552:	2900      	cmp	r1, #0
 800d554:	d047      	beq.n	800d5e6 <_dtoa_r+0x17e>
 800d556:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d558:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d55c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d560:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d564:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d568:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d56c:	2400      	movs	r4, #0
 800d56e:	ec43 2b16 	vmov	d6, r2, r3
 800d572:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d576:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d728 <_dtoa_r+0x2c0>
 800d57a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d57e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d730 <_dtoa_r+0x2c8>
 800d582:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d586:	eeb0 7b46 	vmov.f64	d7, d6
 800d58a:	ee06 1a90 	vmov	s13, r1
 800d58e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d592:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d738 <_dtoa_r+0x2d0>
 800d596:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d59a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d59e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a6:	ee16 ba90 	vmov	fp, s13
 800d5aa:	9411      	str	r4, [sp, #68]	; 0x44
 800d5ac:	d508      	bpl.n	800d5c0 <_dtoa_r+0x158>
 800d5ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d5b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ba:	bf18      	it	ne
 800d5bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d5c0:	f1bb 0f16 	cmp.w	fp, #22
 800d5c4:	d832      	bhi.n	800d62c <_dtoa_r+0x1c4>
 800d5c6:	4b64      	ldr	r3, [pc, #400]	; (800d758 <_dtoa_r+0x2f0>)
 800d5c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d5cc:	ed93 7b00 	vldr	d7, [r3]
 800d5d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d5d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5dc:	d501      	bpl.n	800d5e2 <_dtoa_r+0x17a>
 800d5de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e023      	b.n	800d62e <_dtoa_r+0x1c6>
 800d5e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d5e8:	4401      	add	r1, r0
 800d5ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d5ee:	2b20      	cmp	r3, #32
 800d5f0:	bfc3      	ittte	gt
 800d5f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5f6:	fa04 f303 	lslgt.w	r3, r4, r3
 800d5fa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d5fe:	f1c3 0320 	rsble	r3, r3, #32
 800d602:	bfc6      	itte	gt
 800d604:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d608:	ea43 0308 	orrgt.w	r3, r3, r8
 800d60c:	fa08 f303 	lslle.w	r3, r8, r3
 800d610:	ee07 3a90 	vmov	s15, r3
 800d614:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d618:	3901      	subs	r1, #1
 800d61a:	ed8d 7b00 	vstr	d7, [sp]
 800d61e:	9c01      	ldr	r4, [sp, #4]
 800d620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d624:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d628:	2401      	movs	r4, #1
 800d62a:	e7a0      	b.n	800d56e <_dtoa_r+0x106>
 800d62c:	2301      	movs	r3, #1
 800d62e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d630:	1a43      	subs	r3, r0, r1
 800d632:	1e5a      	subs	r2, r3, #1
 800d634:	bf45      	ittet	mi
 800d636:	f1c3 0301 	rsbmi	r3, r3, #1
 800d63a:	9305      	strmi	r3, [sp, #20]
 800d63c:	2300      	movpl	r3, #0
 800d63e:	2300      	movmi	r3, #0
 800d640:	9206      	str	r2, [sp, #24]
 800d642:	bf54      	ite	pl
 800d644:	9305      	strpl	r3, [sp, #20]
 800d646:	9306      	strmi	r3, [sp, #24]
 800d648:	f1bb 0f00 	cmp.w	fp, #0
 800d64c:	db18      	blt.n	800d680 <_dtoa_r+0x218>
 800d64e:	9b06      	ldr	r3, [sp, #24]
 800d650:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d654:	445b      	add	r3, fp
 800d656:	9306      	str	r3, [sp, #24]
 800d658:	2300      	movs	r3, #0
 800d65a:	9a07      	ldr	r2, [sp, #28]
 800d65c:	2a09      	cmp	r2, #9
 800d65e:	d849      	bhi.n	800d6f4 <_dtoa_r+0x28c>
 800d660:	2a05      	cmp	r2, #5
 800d662:	bfc4      	itt	gt
 800d664:	3a04      	subgt	r2, #4
 800d666:	9207      	strgt	r2, [sp, #28]
 800d668:	9a07      	ldr	r2, [sp, #28]
 800d66a:	f1a2 0202 	sub.w	r2, r2, #2
 800d66e:	bfcc      	ite	gt
 800d670:	2400      	movgt	r4, #0
 800d672:	2401      	movle	r4, #1
 800d674:	2a03      	cmp	r2, #3
 800d676:	d848      	bhi.n	800d70a <_dtoa_r+0x2a2>
 800d678:	e8df f002 	tbb	[pc, r2]
 800d67c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d680:	9b05      	ldr	r3, [sp, #20]
 800d682:	2200      	movs	r2, #0
 800d684:	eba3 030b 	sub.w	r3, r3, fp
 800d688:	9305      	str	r3, [sp, #20]
 800d68a:	920e      	str	r2, [sp, #56]	; 0x38
 800d68c:	f1cb 0300 	rsb	r3, fp, #0
 800d690:	e7e3      	b.n	800d65a <_dtoa_r+0x1f2>
 800d692:	2200      	movs	r2, #0
 800d694:	9208      	str	r2, [sp, #32]
 800d696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d698:	2a00      	cmp	r2, #0
 800d69a:	dc39      	bgt.n	800d710 <_dtoa_r+0x2a8>
 800d69c:	f04f 0a01 	mov.w	sl, #1
 800d6a0:	46d1      	mov	r9, sl
 800d6a2:	4652      	mov	r2, sl
 800d6a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d6a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	6079      	str	r1, [r7, #4]
 800d6ae:	2004      	movs	r0, #4
 800d6b0:	f100 0c14 	add.w	ip, r0, #20
 800d6b4:	4594      	cmp	ip, r2
 800d6b6:	6879      	ldr	r1, [r7, #4]
 800d6b8:	d92f      	bls.n	800d71a <_dtoa_r+0x2b2>
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	930c      	str	r3, [sp, #48]	; 0x30
 800d6be:	f000 fc6f 	bl	800dfa0 <_Balloc>
 800d6c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6c4:	9000      	str	r0, [sp, #0]
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d149      	bne.n	800d760 <_dtoa_r+0x2f8>
 800d6cc:	4b23      	ldr	r3, [pc, #140]	; (800d75c <_dtoa_r+0x2f4>)
 800d6ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d6d2:	e6df      	b.n	800d494 <_dtoa_r+0x2c>
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	e7dd      	b.n	800d694 <_dtoa_r+0x22c>
 800d6d8:	2200      	movs	r2, #0
 800d6da:	9208      	str	r2, [sp, #32]
 800d6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6de:	eb0b 0a02 	add.w	sl, fp, r2
 800d6e2:	f10a 0901 	add.w	r9, sl, #1
 800d6e6:	464a      	mov	r2, r9
 800d6e8:	2a01      	cmp	r2, #1
 800d6ea:	bfb8      	it	lt
 800d6ec:	2201      	movlt	r2, #1
 800d6ee:	e7db      	b.n	800d6a8 <_dtoa_r+0x240>
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	e7f2      	b.n	800d6da <_dtoa_r+0x272>
 800d6f4:	2401      	movs	r4, #1
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800d700:	2100      	movs	r1, #0
 800d702:	46d1      	mov	r9, sl
 800d704:	2212      	movs	r2, #18
 800d706:	9109      	str	r1, [sp, #36]	; 0x24
 800d708:	e7ce      	b.n	800d6a8 <_dtoa_r+0x240>
 800d70a:	2201      	movs	r2, #1
 800d70c:	9208      	str	r2, [sp, #32]
 800d70e:	e7f5      	b.n	800d6fc <_dtoa_r+0x294>
 800d710:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d714:	46d1      	mov	r9, sl
 800d716:	4652      	mov	r2, sl
 800d718:	e7c6      	b.n	800d6a8 <_dtoa_r+0x240>
 800d71a:	3101      	adds	r1, #1
 800d71c:	6079      	str	r1, [r7, #4]
 800d71e:	0040      	lsls	r0, r0, #1
 800d720:	e7c6      	b.n	800d6b0 <_dtoa_r+0x248>
 800d722:	bf00      	nop
 800d724:	f3af 8000 	nop.w
 800d728:	636f4361 	.word	0x636f4361
 800d72c:	3fd287a7 	.word	0x3fd287a7
 800d730:	8b60c8b3 	.word	0x8b60c8b3
 800d734:	3fc68a28 	.word	0x3fc68a28
 800d738:	509f79fb 	.word	0x509f79fb
 800d73c:	3fd34413 	.word	0x3fd34413
 800d740:	0800f55d 	.word	0x0800f55d
 800d744:	0800f574 	.word	0x0800f574
 800d748:	7ff00000 	.word	0x7ff00000
 800d74c:	0800f559 	.word	0x0800f559
 800d750:	0800f550 	.word	0x0800f550
 800d754:	0800f52d 	.word	0x0800f52d
 800d758:	0800f670 	.word	0x0800f670
 800d75c:	0800f5d3 	.word	0x0800f5d3
 800d760:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d762:	9900      	ldr	r1, [sp, #0]
 800d764:	6011      	str	r1, [r2, #0]
 800d766:	f1b9 0f0e 	cmp.w	r9, #14
 800d76a:	d872      	bhi.n	800d852 <_dtoa_r+0x3ea>
 800d76c:	2c00      	cmp	r4, #0
 800d76e:	d070      	beq.n	800d852 <_dtoa_r+0x3ea>
 800d770:	f1bb 0f00 	cmp.w	fp, #0
 800d774:	f340 80a6 	ble.w	800d8c4 <_dtoa_r+0x45c>
 800d778:	49ca      	ldr	r1, [pc, #808]	; (800daa4 <_dtoa_r+0x63c>)
 800d77a:	f00b 020f 	and.w	r2, fp, #15
 800d77e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d782:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d786:	ed92 7b00 	vldr	d7, [r2]
 800d78a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d78e:	f000 808d 	beq.w	800d8ac <_dtoa_r+0x444>
 800d792:	4ac5      	ldr	r2, [pc, #788]	; (800daa8 <_dtoa_r+0x640>)
 800d794:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d798:	ed92 6b08 	vldr	d6, [r2, #32]
 800d79c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d7a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d7a4:	f001 010f 	and.w	r1, r1, #15
 800d7a8:	2203      	movs	r2, #3
 800d7aa:	48bf      	ldr	r0, [pc, #764]	; (800daa8 <_dtoa_r+0x640>)
 800d7ac:	2900      	cmp	r1, #0
 800d7ae:	d17f      	bne.n	800d8b0 <_dtoa_r+0x448>
 800d7b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d7b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d7b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d7be:	2900      	cmp	r1, #0
 800d7c0:	f000 80b2 	beq.w	800d928 <_dtoa_r+0x4c0>
 800d7c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d7c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d4:	f140 80a8 	bpl.w	800d928 <_dtoa_r+0x4c0>
 800d7d8:	f1b9 0f00 	cmp.w	r9, #0
 800d7dc:	f000 80a4 	beq.w	800d928 <_dtoa_r+0x4c0>
 800d7e0:	f1ba 0f00 	cmp.w	sl, #0
 800d7e4:	dd31      	ble.n	800d84a <_dtoa_r+0x3e2>
 800d7e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d7ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d7f6:	3201      	adds	r2, #1
 800d7f8:	4650      	mov	r0, sl
 800d7fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d7fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d802:	ee07 2a90 	vmov	s15, r2
 800d806:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d80a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d80e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d812:	9c03      	ldr	r4, [sp, #12]
 800d814:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d818:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d81c:	2800      	cmp	r0, #0
 800d81e:	f040 8086 	bne.w	800d92e <_dtoa_r+0x4c6>
 800d822:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d826:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d82a:	ec42 1b17 	vmov	d7, r1, r2
 800d82e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d836:	f300 8272 	bgt.w	800dd1e <_dtoa_r+0x8b6>
 800d83a:	eeb1 7b47 	vneg.f64	d7, d7
 800d83e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d846:	f100 8267 	bmi.w	800dd18 <_dtoa_r+0x8b0>
 800d84a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d84e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d852:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d854:	2a00      	cmp	r2, #0
 800d856:	f2c0 8129 	blt.w	800daac <_dtoa_r+0x644>
 800d85a:	f1bb 0f0e 	cmp.w	fp, #14
 800d85e:	f300 8125 	bgt.w	800daac <_dtoa_r+0x644>
 800d862:	4b90      	ldr	r3, [pc, #576]	; (800daa4 <_dtoa_r+0x63c>)
 800d864:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d868:	ed93 6b00 	vldr	d6, [r3]
 800d86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f280 80c3 	bge.w	800d9fa <_dtoa_r+0x592>
 800d874:	f1b9 0f00 	cmp.w	r9, #0
 800d878:	f300 80bf 	bgt.w	800d9fa <_dtoa_r+0x592>
 800d87c:	f040 824c 	bne.w	800dd18 <_dtoa_r+0x8b0>
 800d880:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d884:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d88c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d894:	464c      	mov	r4, r9
 800d896:	464f      	mov	r7, r9
 800d898:	f280 8222 	bge.w	800dce0 <_dtoa_r+0x878>
 800d89c:	f8dd 8000 	ldr.w	r8, [sp]
 800d8a0:	2331      	movs	r3, #49	; 0x31
 800d8a2:	f808 3b01 	strb.w	r3, [r8], #1
 800d8a6:	f10b 0b01 	add.w	fp, fp, #1
 800d8aa:	e21e      	b.n	800dcea <_dtoa_r+0x882>
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	e77c      	b.n	800d7aa <_dtoa_r+0x342>
 800d8b0:	07cc      	lsls	r4, r1, #31
 800d8b2:	d504      	bpl.n	800d8be <_dtoa_r+0x456>
 800d8b4:	ed90 6b00 	vldr	d6, [r0]
 800d8b8:	3201      	adds	r2, #1
 800d8ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8be:	1049      	asrs	r1, r1, #1
 800d8c0:	3008      	adds	r0, #8
 800d8c2:	e773      	b.n	800d7ac <_dtoa_r+0x344>
 800d8c4:	d02e      	beq.n	800d924 <_dtoa_r+0x4bc>
 800d8c6:	f1cb 0100 	rsb	r1, fp, #0
 800d8ca:	4a76      	ldr	r2, [pc, #472]	; (800daa4 <_dtoa_r+0x63c>)
 800d8cc:	f001 000f 	and.w	r0, r1, #15
 800d8d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d8d4:	ed92 7b00 	vldr	d7, [r2]
 800d8d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d8dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d8e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d8e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d8e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d8ec:	486e      	ldr	r0, [pc, #440]	; (800daa8 <_dtoa_r+0x640>)
 800d8ee:	1109      	asrs	r1, r1, #4
 800d8f0:	2400      	movs	r4, #0
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	b939      	cbnz	r1, 800d906 <_dtoa_r+0x49e>
 800d8f6:	2c00      	cmp	r4, #0
 800d8f8:	f43f af60 	beq.w	800d7bc <_dtoa_r+0x354>
 800d8fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d904:	e75a      	b.n	800d7bc <_dtoa_r+0x354>
 800d906:	07cf      	lsls	r7, r1, #31
 800d908:	d509      	bpl.n	800d91e <_dtoa_r+0x4b6>
 800d90a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d90e:	ed90 7b00 	vldr	d7, [r0]
 800d912:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d916:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d91a:	3201      	adds	r2, #1
 800d91c:	2401      	movs	r4, #1
 800d91e:	1049      	asrs	r1, r1, #1
 800d920:	3008      	adds	r0, #8
 800d922:	e7e7      	b.n	800d8f4 <_dtoa_r+0x48c>
 800d924:	2202      	movs	r2, #2
 800d926:	e749      	b.n	800d7bc <_dtoa_r+0x354>
 800d928:	465f      	mov	r7, fp
 800d92a:	4648      	mov	r0, r9
 800d92c:	e765      	b.n	800d7fa <_dtoa_r+0x392>
 800d92e:	ec42 1b17 	vmov	d7, r1, r2
 800d932:	4a5c      	ldr	r2, [pc, #368]	; (800daa4 <_dtoa_r+0x63c>)
 800d934:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d938:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d93c:	9a00      	ldr	r2, [sp, #0]
 800d93e:	1814      	adds	r4, r2, r0
 800d940:	9a08      	ldr	r2, [sp, #32]
 800d942:	b352      	cbz	r2, 800d99a <_dtoa_r+0x532>
 800d944:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d948:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d94c:	f8dd 8000 	ldr.w	r8, [sp]
 800d950:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d954:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d958:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d95c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d960:	ee14 2a90 	vmov	r2, s9
 800d964:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d968:	3230      	adds	r2, #48	; 0x30
 800d96a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d96e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d976:	f808 2b01 	strb.w	r2, [r8], #1
 800d97a:	d439      	bmi.n	800d9f0 <_dtoa_r+0x588>
 800d97c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d980:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d988:	d472      	bmi.n	800da70 <_dtoa_r+0x608>
 800d98a:	45a0      	cmp	r8, r4
 800d98c:	f43f af5d 	beq.w	800d84a <_dtoa_r+0x3e2>
 800d990:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d994:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d998:	e7e0      	b.n	800d95c <_dtoa_r+0x4f4>
 800d99a:	f8dd 8000 	ldr.w	r8, [sp]
 800d99e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d9a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9ac:	ee14 2a90 	vmov	r2, s9
 800d9b0:	3230      	adds	r2, #48	; 0x30
 800d9b2:	f808 2b01 	strb.w	r2, [r8], #1
 800d9b6:	45a0      	cmp	r8, r4
 800d9b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d9c0:	d118      	bne.n	800d9f4 <_dtoa_r+0x58c>
 800d9c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d9c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d9ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d2:	dc4d      	bgt.n	800da70 <_dtoa_r+0x608>
 800d9d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d9d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e0:	f57f af33 	bpl.w	800d84a <_dtoa_r+0x3e2>
 800d9e4:	4688      	mov	r8, r1
 800d9e6:	3901      	subs	r1, #1
 800d9e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d9ec:	2b30      	cmp	r3, #48	; 0x30
 800d9ee:	d0f9      	beq.n	800d9e4 <_dtoa_r+0x57c>
 800d9f0:	46bb      	mov	fp, r7
 800d9f2:	e02a      	b.n	800da4a <_dtoa_r+0x5e2>
 800d9f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d9f8:	e7d6      	b.n	800d9a8 <_dtoa_r+0x540>
 800d9fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800da02:	f8dd 8000 	ldr.w	r8, [sp]
 800da06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800da0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800da0e:	ee15 3a10 	vmov	r3, s10
 800da12:	3330      	adds	r3, #48	; 0x30
 800da14:	f808 3b01 	strb.w	r3, [r8], #1
 800da18:	9b00      	ldr	r3, [sp, #0]
 800da1a:	eba8 0303 	sub.w	r3, r8, r3
 800da1e:	4599      	cmp	r9, r3
 800da20:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800da24:	eea3 7b46 	vfms.f64	d7, d3, d6
 800da28:	d133      	bne.n	800da92 <_dtoa_r+0x62a>
 800da2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800da2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da36:	dc1a      	bgt.n	800da6e <_dtoa_r+0x606>
 800da38:	eeb4 7b46 	vcmp.f64	d7, d6
 800da3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da40:	d103      	bne.n	800da4a <_dtoa_r+0x5e2>
 800da42:	ee15 3a10 	vmov	r3, s10
 800da46:	07d9      	lsls	r1, r3, #31
 800da48:	d411      	bmi.n	800da6e <_dtoa_r+0x606>
 800da4a:	4629      	mov	r1, r5
 800da4c:	4630      	mov	r0, r6
 800da4e:	f000 fae7 	bl	800e020 <_Bfree>
 800da52:	2300      	movs	r3, #0
 800da54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800da56:	f888 3000 	strb.w	r3, [r8]
 800da5a:	f10b 0301 	add.w	r3, fp, #1
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800da62:	2b00      	cmp	r3, #0
 800da64:	f43f ad4d 	beq.w	800d502 <_dtoa_r+0x9a>
 800da68:	f8c3 8000 	str.w	r8, [r3]
 800da6c:	e549      	b.n	800d502 <_dtoa_r+0x9a>
 800da6e:	465f      	mov	r7, fp
 800da70:	4643      	mov	r3, r8
 800da72:	4698      	mov	r8, r3
 800da74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da78:	2a39      	cmp	r2, #57	; 0x39
 800da7a:	d106      	bne.n	800da8a <_dtoa_r+0x622>
 800da7c:	9a00      	ldr	r2, [sp, #0]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d1f7      	bne.n	800da72 <_dtoa_r+0x60a>
 800da82:	9900      	ldr	r1, [sp, #0]
 800da84:	2230      	movs	r2, #48	; 0x30
 800da86:	3701      	adds	r7, #1
 800da88:	700a      	strb	r2, [r1, #0]
 800da8a:	781a      	ldrb	r2, [r3, #0]
 800da8c:	3201      	adds	r2, #1
 800da8e:	701a      	strb	r2, [r3, #0]
 800da90:	e7ae      	b.n	800d9f0 <_dtoa_r+0x588>
 800da92:	ee27 7b04 	vmul.f64	d7, d7, d4
 800da96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da9e:	d1b2      	bne.n	800da06 <_dtoa_r+0x59e>
 800daa0:	e7d3      	b.n	800da4a <_dtoa_r+0x5e2>
 800daa2:	bf00      	nop
 800daa4:	0800f670 	.word	0x0800f670
 800daa8:	0800f648 	.word	0x0800f648
 800daac:	9908      	ldr	r1, [sp, #32]
 800daae:	2900      	cmp	r1, #0
 800dab0:	f000 80d1 	beq.w	800dc56 <_dtoa_r+0x7ee>
 800dab4:	9907      	ldr	r1, [sp, #28]
 800dab6:	2901      	cmp	r1, #1
 800dab8:	f300 80b4 	bgt.w	800dc24 <_dtoa_r+0x7bc>
 800dabc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dabe:	2900      	cmp	r1, #0
 800dac0:	f000 80ac 	beq.w	800dc1c <_dtoa_r+0x7b4>
 800dac4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dac8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dacc:	461c      	mov	r4, r3
 800dace:	930a      	str	r3, [sp, #40]	; 0x28
 800dad0:	9b05      	ldr	r3, [sp, #20]
 800dad2:	4413      	add	r3, r2
 800dad4:	9305      	str	r3, [sp, #20]
 800dad6:	9b06      	ldr	r3, [sp, #24]
 800dad8:	2101      	movs	r1, #1
 800dada:	4413      	add	r3, r2
 800dadc:	4630      	mov	r0, r6
 800dade:	9306      	str	r3, [sp, #24]
 800dae0:	f000 fb5a 	bl	800e198 <__i2b>
 800dae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae6:	4607      	mov	r7, r0
 800dae8:	f1b8 0f00 	cmp.w	r8, #0
 800daec:	dd0d      	ble.n	800db0a <_dtoa_r+0x6a2>
 800daee:	9a06      	ldr	r2, [sp, #24]
 800daf0:	2a00      	cmp	r2, #0
 800daf2:	dd0a      	ble.n	800db0a <_dtoa_r+0x6a2>
 800daf4:	4542      	cmp	r2, r8
 800daf6:	9905      	ldr	r1, [sp, #20]
 800daf8:	bfa8      	it	ge
 800dafa:	4642      	movge	r2, r8
 800dafc:	1a89      	subs	r1, r1, r2
 800dafe:	9105      	str	r1, [sp, #20]
 800db00:	9906      	ldr	r1, [sp, #24]
 800db02:	eba8 0802 	sub.w	r8, r8, r2
 800db06:	1a8a      	subs	r2, r1, r2
 800db08:	9206      	str	r2, [sp, #24]
 800db0a:	b303      	cbz	r3, 800db4e <_dtoa_r+0x6e6>
 800db0c:	9a08      	ldr	r2, [sp, #32]
 800db0e:	2a00      	cmp	r2, #0
 800db10:	f000 80a6 	beq.w	800dc60 <_dtoa_r+0x7f8>
 800db14:	2c00      	cmp	r4, #0
 800db16:	dd13      	ble.n	800db40 <_dtoa_r+0x6d8>
 800db18:	4639      	mov	r1, r7
 800db1a:	4622      	mov	r2, r4
 800db1c:	4630      	mov	r0, r6
 800db1e:	930c      	str	r3, [sp, #48]	; 0x30
 800db20:	f000 fbf6 	bl	800e310 <__pow5mult>
 800db24:	462a      	mov	r2, r5
 800db26:	4601      	mov	r1, r0
 800db28:	4607      	mov	r7, r0
 800db2a:	4630      	mov	r0, r6
 800db2c:	f000 fb4a 	bl	800e1c4 <__multiply>
 800db30:	4629      	mov	r1, r5
 800db32:	900a      	str	r0, [sp, #40]	; 0x28
 800db34:	4630      	mov	r0, r6
 800db36:	f000 fa73 	bl	800e020 <_Bfree>
 800db3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db3e:	4615      	mov	r5, r2
 800db40:	1b1a      	subs	r2, r3, r4
 800db42:	d004      	beq.n	800db4e <_dtoa_r+0x6e6>
 800db44:	4629      	mov	r1, r5
 800db46:	4630      	mov	r0, r6
 800db48:	f000 fbe2 	bl	800e310 <__pow5mult>
 800db4c:	4605      	mov	r5, r0
 800db4e:	2101      	movs	r1, #1
 800db50:	4630      	mov	r0, r6
 800db52:	f000 fb21 	bl	800e198 <__i2b>
 800db56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db58:	2b00      	cmp	r3, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	f340 8082 	ble.w	800dc64 <_dtoa_r+0x7fc>
 800db60:	461a      	mov	r2, r3
 800db62:	4601      	mov	r1, r0
 800db64:	4630      	mov	r0, r6
 800db66:	f000 fbd3 	bl	800e310 <__pow5mult>
 800db6a:	9b07      	ldr	r3, [sp, #28]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	4604      	mov	r4, r0
 800db70:	dd7b      	ble.n	800dc6a <_dtoa_r+0x802>
 800db72:	2300      	movs	r3, #0
 800db74:	930a      	str	r3, [sp, #40]	; 0x28
 800db76:	6922      	ldr	r2, [r4, #16]
 800db78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800db7c:	6910      	ldr	r0, [r2, #16]
 800db7e:	f000 fabb 	bl	800e0f8 <__hi0bits>
 800db82:	f1c0 0020 	rsb	r0, r0, #32
 800db86:	9b06      	ldr	r3, [sp, #24]
 800db88:	4418      	add	r0, r3
 800db8a:	f010 001f 	ands.w	r0, r0, #31
 800db8e:	f000 808d 	beq.w	800dcac <_dtoa_r+0x844>
 800db92:	f1c0 0220 	rsb	r2, r0, #32
 800db96:	2a04      	cmp	r2, #4
 800db98:	f340 8086 	ble.w	800dca8 <_dtoa_r+0x840>
 800db9c:	f1c0 001c 	rsb	r0, r0, #28
 800dba0:	9b05      	ldr	r3, [sp, #20]
 800dba2:	4403      	add	r3, r0
 800dba4:	9305      	str	r3, [sp, #20]
 800dba6:	9b06      	ldr	r3, [sp, #24]
 800dba8:	4403      	add	r3, r0
 800dbaa:	4480      	add	r8, r0
 800dbac:	9306      	str	r3, [sp, #24]
 800dbae:	9b05      	ldr	r3, [sp, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dd05      	ble.n	800dbc0 <_dtoa_r+0x758>
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	4630      	mov	r0, r6
 800dbba:	f000 fc03 	bl	800e3c4 <__lshift>
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	9b06      	ldr	r3, [sp, #24]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	dd05      	ble.n	800dbd2 <_dtoa_r+0x76a>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f000 fbfa 	bl	800e3c4 <__lshift>
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d06b      	beq.n	800dcb0 <_dtoa_r+0x848>
 800dbd8:	4621      	mov	r1, r4
 800dbda:	4628      	mov	r0, r5
 800dbdc:	f000 fc5e 	bl	800e49c <__mcmp>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	da65      	bge.n	800dcb0 <_dtoa_r+0x848>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	220a      	movs	r2, #10
 800dbea:	4630      	mov	r0, r6
 800dbec:	f000 fa3a 	bl	800e064 <__multadd>
 800dbf0:	9b08      	ldr	r3, [sp, #32]
 800dbf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 8192 	beq.w	800df22 <_dtoa_r+0xaba>
 800dbfe:	4639      	mov	r1, r7
 800dc00:	2300      	movs	r3, #0
 800dc02:	220a      	movs	r2, #10
 800dc04:	4630      	mov	r0, r6
 800dc06:	f000 fa2d 	bl	800e064 <__multadd>
 800dc0a:	f1ba 0f00 	cmp.w	sl, #0
 800dc0e:	4607      	mov	r7, r0
 800dc10:	f300 808e 	bgt.w	800dd30 <_dtoa_r+0x8c8>
 800dc14:	9b07      	ldr	r3, [sp, #28]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	dc51      	bgt.n	800dcbe <_dtoa_r+0x856>
 800dc1a:	e089      	b.n	800dd30 <_dtoa_r+0x8c8>
 800dc1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dc22:	e751      	b.n	800dac8 <_dtoa_r+0x660>
 800dc24:	f109 34ff 	add.w	r4, r9, #4294967295
 800dc28:	42a3      	cmp	r3, r4
 800dc2a:	bfbf      	itttt	lt
 800dc2c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800dc2e:	1ae3      	sublt	r3, r4, r3
 800dc30:	18d2      	addlt	r2, r2, r3
 800dc32:	4613      	movlt	r3, r2
 800dc34:	bfb7      	itett	lt
 800dc36:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dc38:	1b1c      	subge	r4, r3, r4
 800dc3a:	4623      	movlt	r3, r4
 800dc3c:	2400      	movlt	r4, #0
 800dc3e:	f1b9 0f00 	cmp.w	r9, #0
 800dc42:	bfb5      	itete	lt
 800dc44:	9a05      	ldrlt	r2, [sp, #20]
 800dc46:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800dc4a:	eba2 0809 	sublt.w	r8, r2, r9
 800dc4e:	464a      	movge	r2, r9
 800dc50:	bfb8      	it	lt
 800dc52:	2200      	movlt	r2, #0
 800dc54:	e73b      	b.n	800dace <_dtoa_r+0x666>
 800dc56:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dc5a:	9f08      	ldr	r7, [sp, #32]
 800dc5c:	461c      	mov	r4, r3
 800dc5e:	e743      	b.n	800dae8 <_dtoa_r+0x680>
 800dc60:	461a      	mov	r2, r3
 800dc62:	e76f      	b.n	800db44 <_dtoa_r+0x6dc>
 800dc64:	9b07      	ldr	r3, [sp, #28]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	dc18      	bgt.n	800dc9c <_dtoa_r+0x834>
 800dc6a:	9b02      	ldr	r3, [sp, #8]
 800dc6c:	b9b3      	cbnz	r3, 800dc9c <_dtoa_r+0x834>
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dc74:	b9a2      	cbnz	r2, 800dca0 <_dtoa_r+0x838>
 800dc76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dc7a:	0d12      	lsrs	r2, r2, #20
 800dc7c:	0512      	lsls	r2, r2, #20
 800dc7e:	b18a      	cbz	r2, 800dca4 <_dtoa_r+0x83c>
 800dc80:	9b05      	ldr	r3, [sp, #20]
 800dc82:	3301      	adds	r3, #1
 800dc84:	9305      	str	r3, [sp, #20]
 800dc86:	9b06      	ldr	r3, [sp, #24]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	9306      	str	r3, [sp, #24]
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f47f af6f 	bne.w	800db76 <_dtoa_r+0x70e>
 800dc98:	2001      	movs	r0, #1
 800dc9a:	e774      	b.n	800db86 <_dtoa_r+0x71e>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	e7f6      	b.n	800dc8e <_dtoa_r+0x826>
 800dca0:	9b02      	ldr	r3, [sp, #8]
 800dca2:	e7f4      	b.n	800dc8e <_dtoa_r+0x826>
 800dca4:	920a      	str	r2, [sp, #40]	; 0x28
 800dca6:	e7f3      	b.n	800dc90 <_dtoa_r+0x828>
 800dca8:	d081      	beq.n	800dbae <_dtoa_r+0x746>
 800dcaa:	4610      	mov	r0, r2
 800dcac:	301c      	adds	r0, #28
 800dcae:	e777      	b.n	800dba0 <_dtoa_r+0x738>
 800dcb0:	f1b9 0f00 	cmp.w	r9, #0
 800dcb4:	dc37      	bgt.n	800dd26 <_dtoa_r+0x8be>
 800dcb6:	9b07      	ldr	r3, [sp, #28]
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	dd34      	ble.n	800dd26 <_dtoa_r+0x8be>
 800dcbc:	46ca      	mov	sl, r9
 800dcbe:	f1ba 0f00 	cmp.w	sl, #0
 800dcc2:	d10d      	bne.n	800dce0 <_dtoa_r+0x878>
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	4653      	mov	r3, sl
 800dcc8:	2205      	movs	r2, #5
 800dcca:	4630      	mov	r0, r6
 800dccc:	f000 f9ca 	bl	800e064 <__multadd>
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f000 fbe1 	bl	800e49c <__mcmp>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	f73f adde 	bgt.w	800d89c <_dtoa_r+0x434>
 800dce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce2:	f8dd 8000 	ldr.w	r8, [sp]
 800dce6:	ea6f 0b03 	mvn.w	fp, r3
 800dcea:	f04f 0900 	mov.w	r9, #0
 800dcee:	4621      	mov	r1, r4
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f000 f995 	bl	800e020 <_Bfree>
 800dcf6:	2f00      	cmp	r7, #0
 800dcf8:	f43f aea7 	beq.w	800da4a <_dtoa_r+0x5e2>
 800dcfc:	f1b9 0f00 	cmp.w	r9, #0
 800dd00:	d005      	beq.n	800dd0e <_dtoa_r+0x8a6>
 800dd02:	45b9      	cmp	r9, r7
 800dd04:	d003      	beq.n	800dd0e <_dtoa_r+0x8a6>
 800dd06:	4649      	mov	r1, r9
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f000 f989 	bl	800e020 <_Bfree>
 800dd0e:	4639      	mov	r1, r7
 800dd10:	4630      	mov	r0, r6
 800dd12:	f000 f985 	bl	800e020 <_Bfree>
 800dd16:	e698      	b.n	800da4a <_dtoa_r+0x5e2>
 800dd18:	2400      	movs	r4, #0
 800dd1a:	4627      	mov	r7, r4
 800dd1c:	e7e0      	b.n	800dce0 <_dtoa_r+0x878>
 800dd1e:	46bb      	mov	fp, r7
 800dd20:	4604      	mov	r4, r0
 800dd22:	4607      	mov	r7, r0
 800dd24:	e5ba      	b.n	800d89c <_dtoa_r+0x434>
 800dd26:	9b08      	ldr	r3, [sp, #32]
 800dd28:	46ca      	mov	sl, r9
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 8100 	beq.w	800df30 <_dtoa_r+0xac8>
 800dd30:	f1b8 0f00 	cmp.w	r8, #0
 800dd34:	dd05      	ble.n	800dd42 <_dtoa_r+0x8da>
 800dd36:	4639      	mov	r1, r7
 800dd38:	4642      	mov	r2, r8
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f000 fb42 	bl	800e3c4 <__lshift>
 800dd40:	4607      	mov	r7, r0
 800dd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d05d      	beq.n	800de04 <_dtoa_r+0x99c>
 800dd48:	6879      	ldr	r1, [r7, #4]
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f000 f928 	bl	800dfa0 <_Balloc>
 800dd50:	4680      	mov	r8, r0
 800dd52:	b928      	cbnz	r0, 800dd60 <_dtoa_r+0x8f8>
 800dd54:	4b82      	ldr	r3, [pc, #520]	; (800df60 <_dtoa_r+0xaf8>)
 800dd56:	4602      	mov	r2, r0
 800dd58:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd5c:	f7ff bb9a 	b.w	800d494 <_dtoa_r+0x2c>
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	3202      	adds	r2, #2
 800dd64:	0092      	lsls	r2, r2, #2
 800dd66:	f107 010c 	add.w	r1, r7, #12
 800dd6a:	300c      	adds	r0, #12
 800dd6c:	f000 f90a 	bl	800df84 <memcpy>
 800dd70:	2201      	movs	r2, #1
 800dd72:	4641      	mov	r1, r8
 800dd74:	4630      	mov	r0, r6
 800dd76:	f000 fb25 	bl	800e3c4 <__lshift>
 800dd7a:	9b00      	ldr	r3, [sp, #0]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	9305      	str	r3, [sp, #20]
 800dd80:	9b00      	ldr	r3, [sp, #0]
 800dd82:	4453      	add	r3, sl
 800dd84:	9309      	str	r3, [sp, #36]	; 0x24
 800dd86:	9b02      	ldr	r3, [sp, #8]
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	46b9      	mov	r9, r7
 800dd8e:	9308      	str	r3, [sp, #32]
 800dd90:	4607      	mov	r7, r0
 800dd92:	9b05      	ldr	r3, [sp, #20]
 800dd94:	4621      	mov	r1, r4
 800dd96:	3b01      	subs	r3, #1
 800dd98:	4628      	mov	r0, r5
 800dd9a:	9302      	str	r3, [sp, #8]
 800dd9c:	f7ff fad6 	bl	800d34c <quorem>
 800dda0:	4603      	mov	r3, r0
 800dda2:	3330      	adds	r3, #48	; 0x30
 800dda4:	9006      	str	r0, [sp, #24]
 800dda6:	4649      	mov	r1, r9
 800dda8:	4628      	mov	r0, r5
 800ddaa:	930a      	str	r3, [sp, #40]	; 0x28
 800ddac:	f000 fb76 	bl	800e49c <__mcmp>
 800ddb0:	463a      	mov	r2, r7
 800ddb2:	4682      	mov	sl, r0
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f000 fb8c 	bl	800e4d4 <__mdiff>
 800ddbc:	68c2      	ldr	r2, [r0, #12]
 800ddbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddc0:	4680      	mov	r8, r0
 800ddc2:	bb0a      	cbnz	r2, 800de08 <_dtoa_r+0x9a0>
 800ddc4:	4601      	mov	r1, r0
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f000 fb68 	bl	800e49c <__mcmp>
 800ddcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddce:	4602      	mov	r2, r0
 800ddd0:	4641      	mov	r1, r8
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	920e      	str	r2, [sp, #56]	; 0x38
 800ddd6:	930a      	str	r3, [sp, #40]	; 0x28
 800ddd8:	f000 f922 	bl	800e020 <_Bfree>
 800dddc:	9b07      	ldr	r3, [sp, #28]
 800ddde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dde0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dde4:	ea43 0102 	orr.w	r1, r3, r2
 800dde8:	9b08      	ldr	r3, [sp, #32]
 800ddea:	430b      	orrs	r3, r1
 800ddec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddee:	d10d      	bne.n	800de0c <_dtoa_r+0x9a4>
 800ddf0:	2b39      	cmp	r3, #57	; 0x39
 800ddf2:	d029      	beq.n	800de48 <_dtoa_r+0x9e0>
 800ddf4:	f1ba 0f00 	cmp.w	sl, #0
 800ddf8:	dd01      	ble.n	800ddfe <_dtoa_r+0x996>
 800ddfa:	9b06      	ldr	r3, [sp, #24]
 800ddfc:	3331      	adds	r3, #49	; 0x31
 800ddfe:	9a02      	ldr	r2, [sp, #8]
 800de00:	7013      	strb	r3, [r2, #0]
 800de02:	e774      	b.n	800dcee <_dtoa_r+0x886>
 800de04:	4638      	mov	r0, r7
 800de06:	e7b8      	b.n	800dd7a <_dtoa_r+0x912>
 800de08:	2201      	movs	r2, #1
 800de0a:	e7e1      	b.n	800ddd0 <_dtoa_r+0x968>
 800de0c:	f1ba 0f00 	cmp.w	sl, #0
 800de10:	db06      	blt.n	800de20 <_dtoa_r+0x9b8>
 800de12:	9907      	ldr	r1, [sp, #28]
 800de14:	ea41 0a0a 	orr.w	sl, r1, sl
 800de18:	9908      	ldr	r1, [sp, #32]
 800de1a:	ea5a 0101 	orrs.w	r1, sl, r1
 800de1e:	d120      	bne.n	800de62 <_dtoa_r+0x9fa>
 800de20:	2a00      	cmp	r2, #0
 800de22:	ddec      	ble.n	800ddfe <_dtoa_r+0x996>
 800de24:	4629      	mov	r1, r5
 800de26:	2201      	movs	r2, #1
 800de28:	4630      	mov	r0, r6
 800de2a:	9305      	str	r3, [sp, #20]
 800de2c:	f000 faca 	bl	800e3c4 <__lshift>
 800de30:	4621      	mov	r1, r4
 800de32:	4605      	mov	r5, r0
 800de34:	f000 fb32 	bl	800e49c <__mcmp>
 800de38:	2800      	cmp	r0, #0
 800de3a:	9b05      	ldr	r3, [sp, #20]
 800de3c:	dc02      	bgt.n	800de44 <_dtoa_r+0x9dc>
 800de3e:	d1de      	bne.n	800ddfe <_dtoa_r+0x996>
 800de40:	07da      	lsls	r2, r3, #31
 800de42:	d5dc      	bpl.n	800ddfe <_dtoa_r+0x996>
 800de44:	2b39      	cmp	r3, #57	; 0x39
 800de46:	d1d8      	bne.n	800ddfa <_dtoa_r+0x992>
 800de48:	9a02      	ldr	r2, [sp, #8]
 800de4a:	2339      	movs	r3, #57	; 0x39
 800de4c:	7013      	strb	r3, [r2, #0]
 800de4e:	4643      	mov	r3, r8
 800de50:	4698      	mov	r8, r3
 800de52:	3b01      	subs	r3, #1
 800de54:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800de58:	2a39      	cmp	r2, #57	; 0x39
 800de5a:	d051      	beq.n	800df00 <_dtoa_r+0xa98>
 800de5c:	3201      	adds	r2, #1
 800de5e:	701a      	strb	r2, [r3, #0]
 800de60:	e745      	b.n	800dcee <_dtoa_r+0x886>
 800de62:	2a00      	cmp	r2, #0
 800de64:	dd03      	ble.n	800de6e <_dtoa_r+0xa06>
 800de66:	2b39      	cmp	r3, #57	; 0x39
 800de68:	d0ee      	beq.n	800de48 <_dtoa_r+0x9e0>
 800de6a:	3301      	adds	r3, #1
 800de6c:	e7c7      	b.n	800ddfe <_dtoa_r+0x996>
 800de6e:	9a05      	ldr	r2, [sp, #20]
 800de70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de72:	f802 3c01 	strb.w	r3, [r2, #-1]
 800de76:	428a      	cmp	r2, r1
 800de78:	d02b      	beq.n	800ded2 <_dtoa_r+0xa6a>
 800de7a:	4629      	mov	r1, r5
 800de7c:	2300      	movs	r3, #0
 800de7e:	220a      	movs	r2, #10
 800de80:	4630      	mov	r0, r6
 800de82:	f000 f8ef 	bl	800e064 <__multadd>
 800de86:	45b9      	cmp	r9, r7
 800de88:	4605      	mov	r5, r0
 800de8a:	f04f 0300 	mov.w	r3, #0
 800de8e:	f04f 020a 	mov.w	r2, #10
 800de92:	4649      	mov	r1, r9
 800de94:	4630      	mov	r0, r6
 800de96:	d107      	bne.n	800dea8 <_dtoa_r+0xa40>
 800de98:	f000 f8e4 	bl	800e064 <__multadd>
 800de9c:	4681      	mov	r9, r0
 800de9e:	4607      	mov	r7, r0
 800dea0:	9b05      	ldr	r3, [sp, #20]
 800dea2:	3301      	adds	r3, #1
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	e774      	b.n	800dd92 <_dtoa_r+0x92a>
 800dea8:	f000 f8dc 	bl	800e064 <__multadd>
 800deac:	4639      	mov	r1, r7
 800deae:	4681      	mov	r9, r0
 800deb0:	2300      	movs	r3, #0
 800deb2:	220a      	movs	r2, #10
 800deb4:	4630      	mov	r0, r6
 800deb6:	f000 f8d5 	bl	800e064 <__multadd>
 800deba:	4607      	mov	r7, r0
 800debc:	e7f0      	b.n	800dea0 <_dtoa_r+0xa38>
 800debe:	f1ba 0f00 	cmp.w	sl, #0
 800dec2:	9a00      	ldr	r2, [sp, #0]
 800dec4:	bfcc      	ite	gt
 800dec6:	46d0      	movgt	r8, sl
 800dec8:	f04f 0801 	movle.w	r8, #1
 800decc:	4490      	add	r8, r2
 800dece:	f04f 0900 	mov.w	r9, #0
 800ded2:	4629      	mov	r1, r5
 800ded4:	2201      	movs	r2, #1
 800ded6:	4630      	mov	r0, r6
 800ded8:	9302      	str	r3, [sp, #8]
 800deda:	f000 fa73 	bl	800e3c4 <__lshift>
 800dede:	4621      	mov	r1, r4
 800dee0:	4605      	mov	r5, r0
 800dee2:	f000 fadb 	bl	800e49c <__mcmp>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	dcb1      	bgt.n	800de4e <_dtoa_r+0x9e6>
 800deea:	d102      	bne.n	800def2 <_dtoa_r+0xa8a>
 800deec:	9b02      	ldr	r3, [sp, #8]
 800deee:	07db      	lsls	r3, r3, #31
 800def0:	d4ad      	bmi.n	800de4e <_dtoa_r+0x9e6>
 800def2:	4643      	mov	r3, r8
 800def4:	4698      	mov	r8, r3
 800def6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800defa:	2a30      	cmp	r2, #48	; 0x30
 800defc:	d0fa      	beq.n	800def4 <_dtoa_r+0xa8c>
 800defe:	e6f6      	b.n	800dcee <_dtoa_r+0x886>
 800df00:	9a00      	ldr	r2, [sp, #0]
 800df02:	429a      	cmp	r2, r3
 800df04:	d1a4      	bne.n	800de50 <_dtoa_r+0x9e8>
 800df06:	f10b 0b01 	add.w	fp, fp, #1
 800df0a:	2331      	movs	r3, #49	; 0x31
 800df0c:	e778      	b.n	800de00 <_dtoa_r+0x998>
 800df0e:	4b15      	ldr	r3, [pc, #84]	; (800df64 <_dtoa_r+0xafc>)
 800df10:	f7ff bb12 	b.w	800d538 <_dtoa_r+0xd0>
 800df14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df16:	2b00      	cmp	r3, #0
 800df18:	f47f aaee 	bne.w	800d4f8 <_dtoa_r+0x90>
 800df1c:	4b12      	ldr	r3, [pc, #72]	; (800df68 <_dtoa_r+0xb00>)
 800df1e:	f7ff bb0b 	b.w	800d538 <_dtoa_r+0xd0>
 800df22:	f1ba 0f00 	cmp.w	sl, #0
 800df26:	dc03      	bgt.n	800df30 <_dtoa_r+0xac8>
 800df28:	9b07      	ldr	r3, [sp, #28]
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	f73f aec7 	bgt.w	800dcbe <_dtoa_r+0x856>
 800df30:	f8dd 8000 	ldr.w	r8, [sp]
 800df34:	4621      	mov	r1, r4
 800df36:	4628      	mov	r0, r5
 800df38:	f7ff fa08 	bl	800d34c <quorem>
 800df3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800df40:	f808 3b01 	strb.w	r3, [r8], #1
 800df44:	9a00      	ldr	r2, [sp, #0]
 800df46:	eba8 0202 	sub.w	r2, r8, r2
 800df4a:	4592      	cmp	sl, r2
 800df4c:	ddb7      	ble.n	800debe <_dtoa_r+0xa56>
 800df4e:	4629      	mov	r1, r5
 800df50:	2300      	movs	r3, #0
 800df52:	220a      	movs	r2, #10
 800df54:	4630      	mov	r0, r6
 800df56:	f000 f885 	bl	800e064 <__multadd>
 800df5a:	4605      	mov	r5, r0
 800df5c:	e7ea      	b.n	800df34 <_dtoa_r+0xacc>
 800df5e:	bf00      	nop
 800df60:	0800f5d3 	.word	0x0800f5d3
 800df64:	0800f52c 	.word	0x0800f52c
 800df68:	0800f550 	.word	0x0800f550

0800df6c <_localeconv_r>:
 800df6c:	4800      	ldr	r0, [pc, #0]	; (800df70 <_localeconv_r+0x4>)
 800df6e:	4770      	bx	lr
 800df70:	2400018c 	.word	0x2400018c

0800df74 <malloc>:
 800df74:	4b02      	ldr	r3, [pc, #8]	; (800df80 <malloc+0xc>)
 800df76:	4601      	mov	r1, r0
 800df78:	6818      	ldr	r0, [r3, #0]
 800df7a:	f000 bbef 	b.w	800e75c <_malloc_r>
 800df7e:	bf00      	nop
 800df80:	24000038 	.word	0x24000038

0800df84 <memcpy>:
 800df84:	440a      	add	r2, r1
 800df86:	4291      	cmp	r1, r2
 800df88:	f100 33ff 	add.w	r3, r0, #4294967295
 800df8c:	d100      	bne.n	800df90 <memcpy+0xc>
 800df8e:	4770      	bx	lr
 800df90:	b510      	push	{r4, lr}
 800df92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df9a:	4291      	cmp	r1, r2
 800df9c:	d1f9      	bne.n	800df92 <memcpy+0xe>
 800df9e:	bd10      	pop	{r4, pc}

0800dfa0 <_Balloc>:
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	460d      	mov	r5, r1
 800dfa8:	b976      	cbnz	r6, 800dfc8 <_Balloc+0x28>
 800dfaa:	2010      	movs	r0, #16
 800dfac:	f7ff ffe2 	bl	800df74 <malloc>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	6260      	str	r0, [r4, #36]	; 0x24
 800dfb4:	b920      	cbnz	r0, 800dfc0 <_Balloc+0x20>
 800dfb6:	4b18      	ldr	r3, [pc, #96]	; (800e018 <_Balloc+0x78>)
 800dfb8:	4818      	ldr	r0, [pc, #96]	; (800e01c <_Balloc+0x7c>)
 800dfba:	2166      	movs	r1, #102	; 0x66
 800dfbc:	f000 fc38 	bl	800e830 <__assert_func>
 800dfc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfc4:	6006      	str	r6, [r0, #0]
 800dfc6:	60c6      	str	r6, [r0, #12]
 800dfc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfca:	68f3      	ldr	r3, [r6, #12]
 800dfcc:	b183      	cbz	r3, 800dff0 <_Balloc+0x50>
 800dfce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfd6:	b9b8      	cbnz	r0, 800e008 <_Balloc+0x68>
 800dfd8:	2101      	movs	r1, #1
 800dfda:	fa01 f605 	lsl.w	r6, r1, r5
 800dfde:	1d72      	adds	r2, r6, #5
 800dfe0:	0092      	lsls	r2, r2, #2
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 fb5a 	bl	800e69c <_calloc_r>
 800dfe8:	b160      	cbz	r0, 800e004 <_Balloc+0x64>
 800dfea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfee:	e00e      	b.n	800e00e <_Balloc+0x6e>
 800dff0:	2221      	movs	r2, #33	; 0x21
 800dff2:	2104      	movs	r1, #4
 800dff4:	4620      	mov	r0, r4
 800dff6:	f000 fb51 	bl	800e69c <_calloc_r>
 800dffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dffc:	60f0      	str	r0, [r6, #12]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1e4      	bne.n	800dfce <_Balloc+0x2e>
 800e004:	2000      	movs	r0, #0
 800e006:	bd70      	pop	{r4, r5, r6, pc}
 800e008:	6802      	ldr	r2, [r0, #0]
 800e00a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e00e:	2300      	movs	r3, #0
 800e010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e014:	e7f7      	b.n	800e006 <_Balloc+0x66>
 800e016:	bf00      	nop
 800e018:	0800f55d 	.word	0x0800f55d
 800e01c:	0800f5e4 	.word	0x0800f5e4

0800e020 <_Bfree>:
 800e020:	b570      	push	{r4, r5, r6, lr}
 800e022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e024:	4605      	mov	r5, r0
 800e026:	460c      	mov	r4, r1
 800e028:	b976      	cbnz	r6, 800e048 <_Bfree+0x28>
 800e02a:	2010      	movs	r0, #16
 800e02c:	f7ff ffa2 	bl	800df74 <malloc>
 800e030:	4602      	mov	r2, r0
 800e032:	6268      	str	r0, [r5, #36]	; 0x24
 800e034:	b920      	cbnz	r0, 800e040 <_Bfree+0x20>
 800e036:	4b09      	ldr	r3, [pc, #36]	; (800e05c <_Bfree+0x3c>)
 800e038:	4809      	ldr	r0, [pc, #36]	; (800e060 <_Bfree+0x40>)
 800e03a:	218a      	movs	r1, #138	; 0x8a
 800e03c:	f000 fbf8 	bl	800e830 <__assert_func>
 800e040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e044:	6006      	str	r6, [r0, #0]
 800e046:	60c6      	str	r6, [r0, #12]
 800e048:	b13c      	cbz	r4, 800e05a <_Bfree+0x3a>
 800e04a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e04c:	6862      	ldr	r2, [r4, #4]
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e054:	6021      	str	r1, [r4, #0]
 800e056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e05a:	bd70      	pop	{r4, r5, r6, pc}
 800e05c:	0800f55d 	.word	0x0800f55d
 800e060:	0800f5e4 	.word	0x0800f5e4

0800e064 <__multadd>:
 800e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e068:	690e      	ldr	r6, [r1, #16]
 800e06a:	4607      	mov	r7, r0
 800e06c:	4698      	mov	r8, r3
 800e06e:	460c      	mov	r4, r1
 800e070:	f101 0014 	add.w	r0, r1, #20
 800e074:	2300      	movs	r3, #0
 800e076:	6805      	ldr	r5, [r0, #0]
 800e078:	b2a9      	uxth	r1, r5
 800e07a:	fb02 8101 	mla	r1, r2, r1, r8
 800e07e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e082:	0c2d      	lsrs	r5, r5, #16
 800e084:	fb02 c505 	mla	r5, r2, r5, ip
 800e088:	b289      	uxth	r1, r1
 800e08a:	3301      	adds	r3, #1
 800e08c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e090:	429e      	cmp	r6, r3
 800e092:	f840 1b04 	str.w	r1, [r0], #4
 800e096:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e09a:	dcec      	bgt.n	800e076 <__multadd+0x12>
 800e09c:	f1b8 0f00 	cmp.w	r8, #0
 800e0a0:	d022      	beq.n	800e0e8 <__multadd+0x84>
 800e0a2:	68a3      	ldr	r3, [r4, #8]
 800e0a4:	42b3      	cmp	r3, r6
 800e0a6:	dc19      	bgt.n	800e0dc <__multadd+0x78>
 800e0a8:	6861      	ldr	r1, [r4, #4]
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	3101      	adds	r1, #1
 800e0ae:	f7ff ff77 	bl	800dfa0 <_Balloc>
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	b928      	cbnz	r0, 800e0c2 <__multadd+0x5e>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	4b0d      	ldr	r3, [pc, #52]	; (800e0f0 <__multadd+0x8c>)
 800e0ba:	480e      	ldr	r0, [pc, #56]	; (800e0f4 <__multadd+0x90>)
 800e0bc:	21b5      	movs	r1, #181	; 0xb5
 800e0be:	f000 fbb7 	bl	800e830 <__assert_func>
 800e0c2:	6922      	ldr	r2, [r4, #16]
 800e0c4:	3202      	adds	r2, #2
 800e0c6:	f104 010c 	add.w	r1, r4, #12
 800e0ca:	0092      	lsls	r2, r2, #2
 800e0cc:	300c      	adds	r0, #12
 800e0ce:	f7ff ff59 	bl	800df84 <memcpy>
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f7ff ffa3 	bl	800e020 <_Bfree>
 800e0da:	462c      	mov	r4, r5
 800e0dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e0e0:	3601      	adds	r6, #1
 800e0e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800e0e6:	6126      	str	r6, [r4, #16]
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ee:	bf00      	nop
 800e0f0:	0800f5d3 	.word	0x0800f5d3
 800e0f4:	0800f5e4 	.word	0x0800f5e4

0800e0f8 <__hi0bits>:
 800e0f8:	0c03      	lsrs	r3, r0, #16
 800e0fa:	041b      	lsls	r3, r3, #16
 800e0fc:	b9d3      	cbnz	r3, 800e134 <__hi0bits+0x3c>
 800e0fe:	0400      	lsls	r0, r0, #16
 800e100:	2310      	movs	r3, #16
 800e102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e106:	bf04      	itt	eq
 800e108:	0200      	lsleq	r0, r0, #8
 800e10a:	3308      	addeq	r3, #8
 800e10c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e110:	bf04      	itt	eq
 800e112:	0100      	lsleq	r0, r0, #4
 800e114:	3304      	addeq	r3, #4
 800e116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e11a:	bf04      	itt	eq
 800e11c:	0080      	lsleq	r0, r0, #2
 800e11e:	3302      	addeq	r3, #2
 800e120:	2800      	cmp	r0, #0
 800e122:	db05      	blt.n	800e130 <__hi0bits+0x38>
 800e124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e128:	f103 0301 	add.w	r3, r3, #1
 800e12c:	bf08      	it	eq
 800e12e:	2320      	moveq	r3, #32
 800e130:	4618      	mov	r0, r3
 800e132:	4770      	bx	lr
 800e134:	2300      	movs	r3, #0
 800e136:	e7e4      	b.n	800e102 <__hi0bits+0xa>

0800e138 <__lo0bits>:
 800e138:	6803      	ldr	r3, [r0, #0]
 800e13a:	f013 0207 	ands.w	r2, r3, #7
 800e13e:	4601      	mov	r1, r0
 800e140:	d00b      	beq.n	800e15a <__lo0bits+0x22>
 800e142:	07da      	lsls	r2, r3, #31
 800e144:	d424      	bmi.n	800e190 <__lo0bits+0x58>
 800e146:	0798      	lsls	r0, r3, #30
 800e148:	bf49      	itett	mi
 800e14a:	085b      	lsrmi	r3, r3, #1
 800e14c:	089b      	lsrpl	r3, r3, #2
 800e14e:	2001      	movmi	r0, #1
 800e150:	600b      	strmi	r3, [r1, #0]
 800e152:	bf5c      	itt	pl
 800e154:	600b      	strpl	r3, [r1, #0]
 800e156:	2002      	movpl	r0, #2
 800e158:	4770      	bx	lr
 800e15a:	b298      	uxth	r0, r3
 800e15c:	b9b0      	cbnz	r0, 800e18c <__lo0bits+0x54>
 800e15e:	0c1b      	lsrs	r3, r3, #16
 800e160:	2010      	movs	r0, #16
 800e162:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e166:	bf04      	itt	eq
 800e168:	0a1b      	lsreq	r3, r3, #8
 800e16a:	3008      	addeq	r0, #8
 800e16c:	071a      	lsls	r2, r3, #28
 800e16e:	bf04      	itt	eq
 800e170:	091b      	lsreq	r3, r3, #4
 800e172:	3004      	addeq	r0, #4
 800e174:	079a      	lsls	r2, r3, #30
 800e176:	bf04      	itt	eq
 800e178:	089b      	lsreq	r3, r3, #2
 800e17a:	3002      	addeq	r0, #2
 800e17c:	07da      	lsls	r2, r3, #31
 800e17e:	d403      	bmi.n	800e188 <__lo0bits+0x50>
 800e180:	085b      	lsrs	r3, r3, #1
 800e182:	f100 0001 	add.w	r0, r0, #1
 800e186:	d005      	beq.n	800e194 <__lo0bits+0x5c>
 800e188:	600b      	str	r3, [r1, #0]
 800e18a:	4770      	bx	lr
 800e18c:	4610      	mov	r0, r2
 800e18e:	e7e8      	b.n	800e162 <__lo0bits+0x2a>
 800e190:	2000      	movs	r0, #0
 800e192:	4770      	bx	lr
 800e194:	2020      	movs	r0, #32
 800e196:	4770      	bx	lr

0800e198 <__i2b>:
 800e198:	b510      	push	{r4, lr}
 800e19a:	460c      	mov	r4, r1
 800e19c:	2101      	movs	r1, #1
 800e19e:	f7ff feff 	bl	800dfa0 <_Balloc>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	b928      	cbnz	r0, 800e1b2 <__i2b+0x1a>
 800e1a6:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <__i2b+0x24>)
 800e1a8:	4805      	ldr	r0, [pc, #20]	; (800e1c0 <__i2b+0x28>)
 800e1aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1ae:	f000 fb3f 	bl	800e830 <__assert_func>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	6144      	str	r4, [r0, #20]
 800e1b6:	6103      	str	r3, [r0, #16]
 800e1b8:	bd10      	pop	{r4, pc}
 800e1ba:	bf00      	nop
 800e1bc:	0800f5d3 	.word	0x0800f5d3
 800e1c0:	0800f5e4 	.word	0x0800f5e4

0800e1c4 <__multiply>:
 800e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	4614      	mov	r4, r2
 800e1ca:	690a      	ldr	r2, [r1, #16]
 800e1cc:	6923      	ldr	r3, [r4, #16]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	bfb8      	it	lt
 800e1d2:	460b      	movlt	r3, r1
 800e1d4:	460d      	mov	r5, r1
 800e1d6:	bfbc      	itt	lt
 800e1d8:	4625      	movlt	r5, r4
 800e1da:	461c      	movlt	r4, r3
 800e1dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e1e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e1e4:	68ab      	ldr	r3, [r5, #8]
 800e1e6:	6869      	ldr	r1, [r5, #4]
 800e1e8:	eb0a 0709 	add.w	r7, sl, r9
 800e1ec:	42bb      	cmp	r3, r7
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	bfb8      	it	lt
 800e1f2:	3101      	addlt	r1, #1
 800e1f4:	f7ff fed4 	bl	800dfa0 <_Balloc>
 800e1f8:	b930      	cbnz	r0, 800e208 <__multiply+0x44>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	4b42      	ldr	r3, [pc, #264]	; (800e308 <__multiply+0x144>)
 800e1fe:	4843      	ldr	r0, [pc, #268]	; (800e30c <__multiply+0x148>)
 800e200:	f240 115d 	movw	r1, #349	; 0x15d
 800e204:	f000 fb14 	bl	800e830 <__assert_func>
 800e208:	f100 0614 	add.w	r6, r0, #20
 800e20c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e210:	4633      	mov	r3, r6
 800e212:	2200      	movs	r2, #0
 800e214:	4543      	cmp	r3, r8
 800e216:	d31e      	bcc.n	800e256 <__multiply+0x92>
 800e218:	f105 0c14 	add.w	ip, r5, #20
 800e21c:	f104 0314 	add.w	r3, r4, #20
 800e220:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e224:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e228:	9202      	str	r2, [sp, #8]
 800e22a:	ebac 0205 	sub.w	r2, ip, r5
 800e22e:	3a15      	subs	r2, #21
 800e230:	f022 0203 	bic.w	r2, r2, #3
 800e234:	3204      	adds	r2, #4
 800e236:	f105 0115 	add.w	r1, r5, #21
 800e23a:	458c      	cmp	ip, r1
 800e23c:	bf38      	it	cc
 800e23e:	2204      	movcc	r2, #4
 800e240:	9201      	str	r2, [sp, #4]
 800e242:	9a02      	ldr	r2, [sp, #8]
 800e244:	9303      	str	r3, [sp, #12]
 800e246:	429a      	cmp	r2, r3
 800e248:	d808      	bhi.n	800e25c <__multiply+0x98>
 800e24a:	2f00      	cmp	r7, #0
 800e24c:	dc55      	bgt.n	800e2fa <__multiply+0x136>
 800e24e:	6107      	str	r7, [r0, #16]
 800e250:	b005      	add	sp, #20
 800e252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e256:	f843 2b04 	str.w	r2, [r3], #4
 800e25a:	e7db      	b.n	800e214 <__multiply+0x50>
 800e25c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e260:	f1ba 0f00 	cmp.w	sl, #0
 800e264:	d020      	beq.n	800e2a8 <__multiply+0xe4>
 800e266:	f105 0e14 	add.w	lr, r5, #20
 800e26a:	46b1      	mov	r9, r6
 800e26c:	2200      	movs	r2, #0
 800e26e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e272:	f8d9 b000 	ldr.w	fp, [r9]
 800e276:	b2a1      	uxth	r1, r4
 800e278:	fa1f fb8b 	uxth.w	fp, fp
 800e27c:	fb0a b101 	mla	r1, sl, r1, fp
 800e280:	4411      	add	r1, r2
 800e282:	f8d9 2000 	ldr.w	r2, [r9]
 800e286:	0c24      	lsrs	r4, r4, #16
 800e288:	0c12      	lsrs	r2, r2, #16
 800e28a:	fb0a 2404 	mla	r4, sl, r4, r2
 800e28e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e292:	b289      	uxth	r1, r1
 800e294:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e298:	45f4      	cmp	ip, lr
 800e29a:	f849 1b04 	str.w	r1, [r9], #4
 800e29e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e2a2:	d8e4      	bhi.n	800e26e <__multiply+0xaa>
 800e2a4:	9901      	ldr	r1, [sp, #4]
 800e2a6:	5072      	str	r2, [r6, r1]
 800e2a8:	9a03      	ldr	r2, [sp, #12]
 800e2aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	f1b9 0f00 	cmp.w	r9, #0
 800e2b4:	d01f      	beq.n	800e2f6 <__multiply+0x132>
 800e2b6:	6834      	ldr	r4, [r6, #0]
 800e2b8:	f105 0114 	add.w	r1, r5, #20
 800e2bc:	46b6      	mov	lr, r6
 800e2be:	f04f 0a00 	mov.w	sl, #0
 800e2c2:	880a      	ldrh	r2, [r1, #0]
 800e2c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e2c8:	fb09 b202 	mla	r2, r9, r2, fp
 800e2cc:	4492      	add	sl, r2
 800e2ce:	b2a4      	uxth	r4, r4
 800e2d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e2d4:	f84e 4b04 	str.w	r4, [lr], #4
 800e2d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800e2dc:	f8be 2000 	ldrh.w	r2, [lr]
 800e2e0:	0c24      	lsrs	r4, r4, #16
 800e2e2:	fb09 2404 	mla	r4, r9, r4, r2
 800e2e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e2ea:	458c      	cmp	ip, r1
 800e2ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e2f0:	d8e7      	bhi.n	800e2c2 <__multiply+0xfe>
 800e2f2:	9a01      	ldr	r2, [sp, #4]
 800e2f4:	50b4      	str	r4, [r6, r2]
 800e2f6:	3604      	adds	r6, #4
 800e2f8:	e7a3      	b.n	800e242 <__multiply+0x7e>
 800e2fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1a5      	bne.n	800e24e <__multiply+0x8a>
 800e302:	3f01      	subs	r7, #1
 800e304:	e7a1      	b.n	800e24a <__multiply+0x86>
 800e306:	bf00      	nop
 800e308:	0800f5d3 	.word	0x0800f5d3
 800e30c:	0800f5e4 	.word	0x0800f5e4

0800e310 <__pow5mult>:
 800e310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e314:	4615      	mov	r5, r2
 800e316:	f012 0203 	ands.w	r2, r2, #3
 800e31a:	4606      	mov	r6, r0
 800e31c:	460f      	mov	r7, r1
 800e31e:	d007      	beq.n	800e330 <__pow5mult+0x20>
 800e320:	4c25      	ldr	r4, [pc, #148]	; (800e3b8 <__pow5mult+0xa8>)
 800e322:	3a01      	subs	r2, #1
 800e324:	2300      	movs	r3, #0
 800e326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e32a:	f7ff fe9b 	bl	800e064 <__multadd>
 800e32e:	4607      	mov	r7, r0
 800e330:	10ad      	asrs	r5, r5, #2
 800e332:	d03d      	beq.n	800e3b0 <__pow5mult+0xa0>
 800e334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e336:	b97c      	cbnz	r4, 800e358 <__pow5mult+0x48>
 800e338:	2010      	movs	r0, #16
 800e33a:	f7ff fe1b 	bl	800df74 <malloc>
 800e33e:	4602      	mov	r2, r0
 800e340:	6270      	str	r0, [r6, #36]	; 0x24
 800e342:	b928      	cbnz	r0, 800e350 <__pow5mult+0x40>
 800e344:	4b1d      	ldr	r3, [pc, #116]	; (800e3bc <__pow5mult+0xac>)
 800e346:	481e      	ldr	r0, [pc, #120]	; (800e3c0 <__pow5mult+0xb0>)
 800e348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e34c:	f000 fa70 	bl	800e830 <__assert_func>
 800e350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e354:	6004      	str	r4, [r0, #0]
 800e356:	60c4      	str	r4, [r0, #12]
 800e358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e35c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e360:	b94c      	cbnz	r4, 800e376 <__pow5mult+0x66>
 800e362:	f240 2171 	movw	r1, #625	; 0x271
 800e366:	4630      	mov	r0, r6
 800e368:	f7ff ff16 	bl	800e198 <__i2b>
 800e36c:	2300      	movs	r3, #0
 800e36e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e372:	4604      	mov	r4, r0
 800e374:	6003      	str	r3, [r0, #0]
 800e376:	f04f 0900 	mov.w	r9, #0
 800e37a:	07eb      	lsls	r3, r5, #31
 800e37c:	d50a      	bpl.n	800e394 <__pow5mult+0x84>
 800e37e:	4639      	mov	r1, r7
 800e380:	4622      	mov	r2, r4
 800e382:	4630      	mov	r0, r6
 800e384:	f7ff ff1e 	bl	800e1c4 <__multiply>
 800e388:	4639      	mov	r1, r7
 800e38a:	4680      	mov	r8, r0
 800e38c:	4630      	mov	r0, r6
 800e38e:	f7ff fe47 	bl	800e020 <_Bfree>
 800e392:	4647      	mov	r7, r8
 800e394:	106d      	asrs	r5, r5, #1
 800e396:	d00b      	beq.n	800e3b0 <__pow5mult+0xa0>
 800e398:	6820      	ldr	r0, [r4, #0]
 800e39a:	b938      	cbnz	r0, 800e3ac <__pow5mult+0x9c>
 800e39c:	4622      	mov	r2, r4
 800e39e:	4621      	mov	r1, r4
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f7ff ff0f 	bl	800e1c4 <__multiply>
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	f8c0 9000 	str.w	r9, [r0]
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	e7e4      	b.n	800e37a <__pow5mult+0x6a>
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3b6:	bf00      	nop
 800e3b8:	0800f738 	.word	0x0800f738
 800e3bc:	0800f55d 	.word	0x0800f55d
 800e3c0:	0800f5e4 	.word	0x0800f5e4

0800e3c4 <__lshift>:
 800e3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c8:	460c      	mov	r4, r1
 800e3ca:	6849      	ldr	r1, [r1, #4]
 800e3cc:	6923      	ldr	r3, [r4, #16]
 800e3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3d2:	68a3      	ldr	r3, [r4, #8]
 800e3d4:	4607      	mov	r7, r0
 800e3d6:	4691      	mov	r9, r2
 800e3d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3dc:	f108 0601 	add.w	r6, r8, #1
 800e3e0:	42b3      	cmp	r3, r6
 800e3e2:	db0b      	blt.n	800e3fc <__lshift+0x38>
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	f7ff fddb 	bl	800dfa0 <_Balloc>
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	b948      	cbnz	r0, 800e402 <__lshift+0x3e>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	4b28      	ldr	r3, [pc, #160]	; (800e494 <__lshift+0xd0>)
 800e3f2:	4829      	ldr	r0, [pc, #164]	; (800e498 <__lshift+0xd4>)
 800e3f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3f8:	f000 fa1a 	bl	800e830 <__assert_func>
 800e3fc:	3101      	adds	r1, #1
 800e3fe:	005b      	lsls	r3, r3, #1
 800e400:	e7ee      	b.n	800e3e0 <__lshift+0x1c>
 800e402:	2300      	movs	r3, #0
 800e404:	f100 0114 	add.w	r1, r0, #20
 800e408:	f100 0210 	add.w	r2, r0, #16
 800e40c:	4618      	mov	r0, r3
 800e40e:	4553      	cmp	r3, sl
 800e410:	db33      	blt.n	800e47a <__lshift+0xb6>
 800e412:	6920      	ldr	r0, [r4, #16]
 800e414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e418:	f104 0314 	add.w	r3, r4, #20
 800e41c:	f019 091f 	ands.w	r9, r9, #31
 800e420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e428:	d02b      	beq.n	800e482 <__lshift+0xbe>
 800e42a:	f1c9 0e20 	rsb	lr, r9, #32
 800e42e:	468a      	mov	sl, r1
 800e430:	2200      	movs	r2, #0
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	fa00 f009 	lsl.w	r0, r0, r9
 800e438:	4302      	orrs	r2, r0
 800e43a:	f84a 2b04 	str.w	r2, [sl], #4
 800e43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e442:	459c      	cmp	ip, r3
 800e444:	fa22 f20e 	lsr.w	r2, r2, lr
 800e448:	d8f3      	bhi.n	800e432 <__lshift+0x6e>
 800e44a:	ebac 0304 	sub.w	r3, ip, r4
 800e44e:	3b15      	subs	r3, #21
 800e450:	f023 0303 	bic.w	r3, r3, #3
 800e454:	3304      	adds	r3, #4
 800e456:	f104 0015 	add.w	r0, r4, #21
 800e45a:	4584      	cmp	ip, r0
 800e45c:	bf38      	it	cc
 800e45e:	2304      	movcc	r3, #4
 800e460:	50ca      	str	r2, [r1, r3]
 800e462:	b10a      	cbz	r2, 800e468 <__lshift+0xa4>
 800e464:	f108 0602 	add.w	r6, r8, #2
 800e468:	3e01      	subs	r6, #1
 800e46a:	4638      	mov	r0, r7
 800e46c:	612e      	str	r6, [r5, #16]
 800e46e:	4621      	mov	r1, r4
 800e470:	f7ff fdd6 	bl	800e020 <_Bfree>
 800e474:	4628      	mov	r0, r5
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e47e:	3301      	adds	r3, #1
 800e480:	e7c5      	b.n	800e40e <__lshift+0x4a>
 800e482:	3904      	subs	r1, #4
 800e484:	f853 2b04 	ldr.w	r2, [r3], #4
 800e488:	f841 2f04 	str.w	r2, [r1, #4]!
 800e48c:	459c      	cmp	ip, r3
 800e48e:	d8f9      	bhi.n	800e484 <__lshift+0xc0>
 800e490:	e7ea      	b.n	800e468 <__lshift+0xa4>
 800e492:	bf00      	nop
 800e494:	0800f5d3 	.word	0x0800f5d3
 800e498:	0800f5e4 	.word	0x0800f5e4

0800e49c <__mcmp>:
 800e49c:	b530      	push	{r4, r5, lr}
 800e49e:	6902      	ldr	r2, [r0, #16]
 800e4a0:	690c      	ldr	r4, [r1, #16]
 800e4a2:	1b12      	subs	r2, r2, r4
 800e4a4:	d10e      	bne.n	800e4c4 <__mcmp+0x28>
 800e4a6:	f100 0314 	add.w	r3, r0, #20
 800e4aa:	3114      	adds	r1, #20
 800e4ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4bc:	42a5      	cmp	r5, r4
 800e4be:	d003      	beq.n	800e4c8 <__mcmp+0x2c>
 800e4c0:	d305      	bcc.n	800e4ce <__mcmp+0x32>
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	bd30      	pop	{r4, r5, pc}
 800e4c8:	4283      	cmp	r3, r0
 800e4ca:	d3f3      	bcc.n	800e4b4 <__mcmp+0x18>
 800e4cc:	e7fa      	b.n	800e4c4 <__mcmp+0x28>
 800e4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d2:	e7f7      	b.n	800e4c4 <__mcmp+0x28>

0800e4d4 <__mdiff>:
 800e4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	460c      	mov	r4, r1
 800e4da:	4606      	mov	r6, r0
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4620      	mov	r0, r4
 800e4e0:	4617      	mov	r7, r2
 800e4e2:	f7ff ffdb 	bl	800e49c <__mcmp>
 800e4e6:	1e05      	subs	r5, r0, #0
 800e4e8:	d110      	bne.n	800e50c <__mdiff+0x38>
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	f7ff fd57 	bl	800dfa0 <_Balloc>
 800e4f2:	b930      	cbnz	r0, 800e502 <__mdiff+0x2e>
 800e4f4:	4b39      	ldr	r3, [pc, #228]	; (800e5dc <__mdiff+0x108>)
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	f240 2132 	movw	r1, #562	; 0x232
 800e4fc:	4838      	ldr	r0, [pc, #224]	; (800e5e0 <__mdiff+0x10c>)
 800e4fe:	f000 f997 	bl	800e830 <__assert_func>
 800e502:	2301      	movs	r3, #1
 800e504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e50c:	bfa4      	itt	ge
 800e50e:	463b      	movge	r3, r7
 800e510:	4627      	movge	r7, r4
 800e512:	4630      	mov	r0, r6
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	bfa6      	itte	ge
 800e518:	461c      	movge	r4, r3
 800e51a:	2500      	movge	r5, #0
 800e51c:	2501      	movlt	r5, #1
 800e51e:	f7ff fd3f 	bl	800dfa0 <_Balloc>
 800e522:	b920      	cbnz	r0, 800e52e <__mdiff+0x5a>
 800e524:	4b2d      	ldr	r3, [pc, #180]	; (800e5dc <__mdiff+0x108>)
 800e526:	4602      	mov	r2, r0
 800e528:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e52c:	e7e6      	b.n	800e4fc <__mdiff+0x28>
 800e52e:	693e      	ldr	r6, [r7, #16]
 800e530:	60c5      	str	r5, [r0, #12]
 800e532:	6925      	ldr	r5, [r4, #16]
 800e534:	f107 0114 	add.w	r1, r7, #20
 800e538:	f104 0914 	add.w	r9, r4, #20
 800e53c:	f100 0e14 	add.w	lr, r0, #20
 800e540:	f107 0210 	add.w	r2, r7, #16
 800e544:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e548:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e54c:	46f2      	mov	sl, lr
 800e54e:	2700      	movs	r7, #0
 800e550:	f859 3b04 	ldr.w	r3, [r9], #4
 800e554:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e558:	fa1f f883 	uxth.w	r8, r3
 800e55c:	fa17 f78b 	uxtah	r7, r7, fp
 800e560:	0c1b      	lsrs	r3, r3, #16
 800e562:	eba7 0808 	sub.w	r8, r7, r8
 800e566:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e56a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e56e:	fa1f f888 	uxth.w	r8, r8
 800e572:	141f      	asrs	r7, r3, #16
 800e574:	454d      	cmp	r5, r9
 800e576:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e57a:	f84a 3b04 	str.w	r3, [sl], #4
 800e57e:	d8e7      	bhi.n	800e550 <__mdiff+0x7c>
 800e580:	1b2b      	subs	r3, r5, r4
 800e582:	3b15      	subs	r3, #21
 800e584:	f023 0303 	bic.w	r3, r3, #3
 800e588:	3304      	adds	r3, #4
 800e58a:	3415      	adds	r4, #21
 800e58c:	42a5      	cmp	r5, r4
 800e58e:	bf38      	it	cc
 800e590:	2304      	movcc	r3, #4
 800e592:	4419      	add	r1, r3
 800e594:	4473      	add	r3, lr
 800e596:	469e      	mov	lr, r3
 800e598:	460d      	mov	r5, r1
 800e59a:	4565      	cmp	r5, ip
 800e59c:	d30e      	bcc.n	800e5bc <__mdiff+0xe8>
 800e59e:	f10c 0203 	add.w	r2, ip, #3
 800e5a2:	1a52      	subs	r2, r2, r1
 800e5a4:	f022 0203 	bic.w	r2, r2, #3
 800e5a8:	3903      	subs	r1, #3
 800e5aa:	458c      	cmp	ip, r1
 800e5ac:	bf38      	it	cc
 800e5ae:	2200      	movcc	r2, #0
 800e5b0:	441a      	add	r2, r3
 800e5b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5b6:	b17b      	cbz	r3, 800e5d8 <__mdiff+0x104>
 800e5b8:	6106      	str	r6, [r0, #16]
 800e5ba:	e7a5      	b.n	800e508 <__mdiff+0x34>
 800e5bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800e5c0:	fa17 f488 	uxtah	r4, r7, r8
 800e5c4:	1422      	asrs	r2, r4, #16
 800e5c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e5ca:	b2a4      	uxth	r4, r4
 800e5cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e5d0:	f84e 4b04 	str.w	r4, [lr], #4
 800e5d4:	1417      	asrs	r7, r2, #16
 800e5d6:	e7e0      	b.n	800e59a <__mdiff+0xc6>
 800e5d8:	3e01      	subs	r6, #1
 800e5da:	e7ea      	b.n	800e5b2 <__mdiff+0xde>
 800e5dc:	0800f5d3 	.word	0x0800f5d3
 800e5e0:	0800f5e4 	.word	0x0800f5e4

0800e5e4 <__d2b>:
 800e5e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5e8:	4689      	mov	r9, r1
 800e5ea:	2101      	movs	r1, #1
 800e5ec:	ec57 6b10 	vmov	r6, r7, d0
 800e5f0:	4690      	mov	r8, r2
 800e5f2:	f7ff fcd5 	bl	800dfa0 <_Balloc>
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	b930      	cbnz	r0, 800e608 <__d2b+0x24>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	4b25      	ldr	r3, [pc, #148]	; (800e694 <__d2b+0xb0>)
 800e5fe:	4826      	ldr	r0, [pc, #152]	; (800e698 <__d2b+0xb4>)
 800e600:	f240 310a 	movw	r1, #778	; 0x30a
 800e604:	f000 f914 	bl	800e830 <__assert_func>
 800e608:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e60c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e610:	bb35      	cbnz	r5, 800e660 <__d2b+0x7c>
 800e612:	2e00      	cmp	r6, #0
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	d028      	beq.n	800e66a <__d2b+0x86>
 800e618:	4668      	mov	r0, sp
 800e61a:	9600      	str	r6, [sp, #0]
 800e61c:	f7ff fd8c 	bl	800e138 <__lo0bits>
 800e620:	9900      	ldr	r1, [sp, #0]
 800e622:	b300      	cbz	r0, 800e666 <__d2b+0x82>
 800e624:	9a01      	ldr	r2, [sp, #4]
 800e626:	f1c0 0320 	rsb	r3, r0, #32
 800e62a:	fa02 f303 	lsl.w	r3, r2, r3
 800e62e:	430b      	orrs	r3, r1
 800e630:	40c2      	lsrs	r2, r0
 800e632:	6163      	str	r3, [r4, #20]
 800e634:	9201      	str	r2, [sp, #4]
 800e636:	9b01      	ldr	r3, [sp, #4]
 800e638:	61a3      	str	r3, [r4, #24]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	bf14      	ite	ne
 800e63e:	2202      	movne	r2, #2
 800e640:	2201      	moveq	r2, #1
 800e642:	6122      	str	r2, [r4, #16]
 800e644:	b1d5      	cbz	r5, 800e67c <__d2b+0x98>
 800e646:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e64a:	4405      	add	r5, r0
 800e64c:	f8c9 5000 	str.w	r5, [r9]
 800e650:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e654:	f8c8 0000 	str.w	r0, [r8]
 800e658:	4620      	mov	r0, r4
 800e65a:	b003      	add	sp, #12
 800e65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e664:	e7d5      	b.n	800e612 <__d2b+0x2e>
 800e666:	6161      	str	r1, [r4, #20]
 800e668:	e7e5      	b.n	800e636 <__d2b+0x52>
 800e66a:	a801      	add	r0, sp, #4
 800e66c:	f7ff fd64 	bl	800e138 <__lo0bits>
 800e670:	9b01      	ldr	r3, [sp, #4]
 800e672:	6163      	str	r3, [r4, #20]
 800e674:	2201      	movs	r2, #1
 800e676:	6122      	str	r2, [r4, #16]
 800e678:	3020      	adds	r0, #32
 800e67a:	e7e3      	b.n	800e644 <__d2b+0x60>
 800e67c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e680:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e684:	f8c9 0000 	str.w	r0, [r9]
 800e688:	6918      	ldr	r0, [r3, #16]
 800e68a:	f7ff fd35 	bl	800e0f8 <__hi0bits>
 800e68e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e692:	e7df      	b.n	800e654 <__d2b+0x70>
 800e694:	0800f5d3 	.word	0x0800f5d3
 800e698:	0800f5e4 	.word	0x0800f5e4

0800e69c <_calloc_r>:
 800e69c:	b513      	push	{r0, r1, r4, lr}
 800e69e:	434a      	muls	r2, r1
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	9201      	str	r2, [sp, #4]
 800e6a4:	f000 f85a 	bl	800e75c <_malloc_r>
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	b118      	cbz	r0, 800e6b4 <_calloc_r+0x18>
 800e6ac:	9a01      	ldr	r2, [sp, #4]
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	f7fe fa02 	bl	800cab8 <memset>
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	b002      	add	sp, #8
 800e6b8:	bd10      	pop	{r4, pc}
	...

0800e6bc <_free_r>:
 800e6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6be:	2900      	cmp	r1, #0
 800e6c0:	d048      	beq.n	800e754 <_free_r+0x98>
 800e6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6c6:	9001      	str	r0, [sp, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f1a1 0404 	sub.w	r4, r1, #4
 800e6ce:	bfb8      	it	lt
 800e6d0:	18e4      	addlt	r4, r4, r3
 800e6d2:	f000 f8ef 	bl	800e8b4 <__malloc_lock>
 800e6d6:	4a20      	ldr	r2, [pc, #128]	; (800e758 <_free_r+0x9c>)
 800e6d8:	9801      	ldr	r0, [sp, #4]
 800e6da:	6813      	ldr	r3, [r2, #0]
 800e6dc:	4615      	mov	r5, r2
 800e6de:	b933      	cbnz	r3, 800e6ee <_free_r+0x32>
 800e6e0:	6063      	str	r3, [r4, #4]
 800e6e2:	6014      	str	r4, [r2, #0]
 800e6e4:	b003      	add	sp, #12
 800e6e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6ea:	f000 b8e9 	b.w	800e8c0 <__malloc_unlock>
 800e6ee:	42a3      	cmp	r3, r4
 800e6f0:	d90b      	bls.n	800e70a <_free_r+0x4e>
 800e6f2:	6821      	ldr	r1, [r4, #0]
 800e6f4:	1862      	adds	r2, r4, r1
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	bf04      	itt	eq
 800e6fa:	681a      	ldreq	r2, [r3, #0]
 800e6fc:	685b      	ldreq	r3, [r3, #4]
 800e6fe:	6063      	str	r3, [r4, #4]
 800e700:	bf04      	itt	eq
 800e702:	1852      	addeq	r2, r2, r1
 800e704:	6022      	streq	r2, [r4, #0]
 800e706:	602c      	str	r4, [r5, #0]
 800e708:	e7ec      	b.n	800e6e4 <_free_r+0x28>
 800e70a:	461a      	mov	r2, r3
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	b10b      	cbz	r3, 800e714 <_free_r+0x58>
 800e710:	42a3      	cmp	r3, r4
 800e712:	d9fa      	bls.n	800e70a <_free_r+0x4e>
 800e714:	6811      	ldr	r1, [r2, #0]
 800e716:	1855      	adds	r5, r2, r1
 800e718:	42a5      	cmp	r5, r4
 800e71a:	d10b      	bne.n	800e734 <_free_r+0x78>
 800e71c:	6824      	ldr	r4, [r4, #0]
 800e71e:	4421      	add	r1, r4
 800e720:	1854      	adds	r4, r2, r1
 800e722:	42a3      	cmp	r3, r4
 800e724:	6011      	str	r1, [r2, #0]
 800e726:	d1dd      	bne.n	800e6e4 <_free_r+0x28>
 800e728:	681c      	ldr	r4, [r3, #0]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	6053      	str	r3, [r2, #4]
 800e72e:	4421      	add	r1, r4
 800e730:	6011      	str	r1, [r2, #0]
 800e732:	e7d7      	b.n	800e6e4 <_free_r+0x28>
 800e734:	d902      	bls.n	800e73c <_free_r+0x80>
 800e736:	230c      	movs	r3, #12
 800e738:	6003      	str	r3, [r0, #0]
 800e73a:	e7d3      	b.n	800e6e4 <_free_r+0x28>
 800e73c:	6825      	ldr	r5, [r4, #0]
 800e73e:	1961      	adds	r1, r4, r5
 800e740:	428b      	cmp	r3, r1
 800e742:	bf04      	itt	eq
 800e744:	6819      	ldreq	r1, [r3, #0]
 800e746:	685b      	ldreq	r3, [r3, #4]
 800e748:	6063      	str	r3, [r4, #4]
 800e74a:	bf04      	itt	eq
 800e74c:	1949      	addeq	r1, r1, r5
 800e74e:	6021      	streq	r1, [r4, #0]
 800e750:	6054      	str	r4, [r2, #4]
 800e752:	e7c7      	b.n	800e6e4 <_free_r+0x28>
 800e754:	b003      	add	sp, #12
 800e756:	bd30      	pop	{r4, r5, pc}
 800e758:	24000b10 	.word	0x24000b10

0800e75c <_malloc_r>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	1ccd      	adds	r5, r1, #3
 800e760:	f025 0503 	bic.w	r5, r5, #3
 800e764:	3508      	adds	r5, #8
 800e766:	2d0c      	cmp	r5, #12
 800e768:	bf38      	it	cc
 800e76a:	250c      	movcc	r5, #12
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	4606      	mov	r6, r0
 800e770:	db01      	blt.n	800e776 <_malloc_r+0x1a>
 800e772:	42a9      	cmp	r1, r5
 800e774:	d903      	bls.n	800e77e <_malloc_r+0x22>
 800e776:	230c      	movs	r3, #12
 800e778:	6033      	str	r3, [r6, #0]
 800e77a:	2000      	movs	r0, #0
 800e77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e77e:	f000 f899 	bl	800e8b4 <__malloc_lock>
 800e782:	4921      	ldr	r1, [pc, #132]	; (800e808 <_malloc_r+0xac>)
 800e784:	680a      	ldr	r2, [r1, #0]
 800e786:	4614      	mov	r4, r2
 800e788:	b99c      	cbnz	r4, 800e7b2 <_malloc_r+0x56>
 800e78a:	4f20      	ldr	r7, [pc, #128]	; (800e80c <_malloc_r+0xb0>)
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	b923      	cbnz	r3, 800e79a <_malloc_r+0x3e>
 800e790:	4621      	mov	r1, r4
 800e792:	4630      	mov	r0, r6
 800e794:	f000 f83c 	bl	800e810 <_sbrk_r>
 800e798:	6038      	str	r0, [r7, #0]
 800e79a:	4629      	mov	r1, r5
 800e79c:	4630      	mov	r0, r6
 800e79e:	f000 f837 	bl	800e810 <_sbrk_r>
 800e7a2:	1c43      	adds	r3, r0, #1
 800e7a4:	d123      	bne.n	800e7ee <_malloc_r+0x92>
 800e7a6:	230c      	movs	r3, #12
 800e7a8:	6033      	str	r3, [r6, #0]
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f000 f888 	bl	800e8c0 <__malloc_unlock>
 800e7b0:	e7e3      	b.n	800e77a <_malloc_r+0x1e>
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	1b5b      	subs	r3, r3, r5
 800e7b6:	d417      	bmi.n	800e7e8 <_malloc_r+0x8c>
 800e7b8:	2b0b      	cmp	r3, #11
 800e7ba:	d903      	bls.n	800e7c4 <_malloc_r+0x68>
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	441c      	add	r4, r3
 800e7c0:	6025      	str	r5, [r4, #0]
 800e7c2:	e004      	b.n	800e7ce <_malloc_r+0x72>
 800e7c4:	6863      	ldr	r3, [r4, #4]
 800e7c6:	42a2      	cmp	r2, r4
 800e7c8:	bf0c      	ite	eq
 800e7ca:	600b      	streq	r3, [r1, #0]
 800e7cc:	6053      	strne	r3, [r2, #4]
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	f000 f876 	bl	800e8c0 <__malloc_unlock>
 800e7d4:	f104 000b 	add.w	r0, r4, #11
 800e7d8:	1d23      	adds	r3, r4, #4
 800e7da:	f020 0007 	bic.w	r0, r0, #7
 800e7de:	1ac2      	subs	r2, r0, r3
 800e7e0:	d0cc      	beq.n	800e77c <_malloc_r+0x20>
 800e7e2:	1a1b      	subs	r3, r3, r0
 800e7e4:	50a3      	str	r3, [r4, r2]
 800e7e6:	e7c9      	b.n	800e77c <_malloc_r+0x20>
 800e7e8:	4622      	mov	r2, r4
 800e7ea:	6864      	ldr	r4, [r4, #4]
 800e7ec:	e7cc      	b.n	800e788 <_malloc_r+0x2c>
 800e7ee:	1cc4      	adds	r4, r0, #3
 800e7f0:	f024 0403 	bic.w	r4, r4, #3
 800e7f4:	42a0      	cmp	r0, r4
 800e7f6:	d0e3      	beq.n	800e7c0 <_malloc_r+0x64>
 800e7f8:	1a21      	subs	r1, r4, r0
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f000 f808 	bl	800e810 <_sbrk_r>
 800e800:	3001      	adds	r0, #1
 800e802:	d1dd      	bne.n	800e7c0 <_malloc_r+0x64>
 800e804:	e7cf      	b.n	800e7a6 <_malloc_r+0x4a>
 800e806:	bf00      	nop
 800e808:	24000b10 	.word	0x24000b10
 800e80c:	24000b14 	.word	0x24000b14

0800e810 <_sbrk_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4d06      	ldr	r5, [pc, #24]	; (800e82c <_sbrk_r+0x1c>)
 800e814:	2300      	movs	r3, #0
 800e816:	4604      	mov	r4, r0
 800e818:	4608      	mov	r0, r1
 800e81a:	602b      	str	r3, [r5, #0]
 800e81c:	f7f5 f848 	bl	80038b0 <_sbrk>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	d102      	bne.n	800e82a <_sbrk_r+0x1a>
 800e824:	682b      	ldr	r3, [r5, #0]
 800e826:	b103      	cbz	r3, 800e82a <_sbrk_r+0x1a>
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	bd38      	pop	{r3, r4, r5, pc}
 800e82c:	24000b1c 	.word	0x24000b1c

0800e830 <__assert_func>:
 800e830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e832:	4614      	mov	r4, r2
 800e834:	461a      	mov	r2, r3
 800e836:	4b09      	ldr	r3, [pc, #36]	; (800e85c <__assert_func+0x2c>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4605      	mov	r5, r0
 800e83c:	68d8      	ldr	r0, [r3, #12]
 800e83e:	b14c      	cbz	r4, 800e854 <__assert_func+0x24>
 800e840:	4b07      	ldr	r3, [pc, #28]	; (800e860 <__assert_func+0x30>)
 800e842:	9100      	str	r1, [sp, #0]
 800e844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e848:	4906      	ldr	r1, [pc, #24]	; (800e864 <__assert_func+0x34>)
 800e84a:	462b      	mov	r3, r5
 800e84c:	f000 f80e 	bl	800e86c <fiprintf>
 800e850:	f000 fa64 	bl	800ed1c <abort>
 800e854:	4b04      	ldr	r3, [pc, #16]	; (800e868 <__assert_func+0x38>)
 800e856:	461c      	mov	r4, r3
 800e858:	e7f3      	b.n	800e842 <__assert_func+0x12>
 800e85a:	bf00      	nop
 800e85c:	24000038 	.word	0x24000038
 800e860:	0800f744 	.word	0x0800f744
 800e864:	0800f751 	.word	0x0800f751
 800e868:	0800f77f 	.word	0x0800f77f

0800e86c <fiprintf>:
 800e86c:	b40e      	push	{r1, r2, r3}
 800e86e:	b503      	push	{r0, r1, lr}
 800e870:	4601      	mov	r1, r0
 800e872:	ab03      	add	r3, sp, #12
 800e874:	4805      	ldr	r0, [pc, #20]	; (800e88c <fiprintf+0x20>)
 800e876:	f853 2b04 	ldr.w	r2, [r3], #4
 800e87a:	6800      	ldr	r0, [r0, #0]
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	f000 f84f 	bl	800e920 <_vfiprintf_r>
 800e882:	b002      	add	sp, #8
 800e884:	f85d eb04 	ldr.w	lr, [sp], #4
 800e888:	b003      	add	sp, #12
 800e88a:	4770      	bx	lr
 800e88c:	24000038 	.word	0x24000038

0800e890 <__ascii_mbtowc>:
 800e890:	b082      	sub	sp, #8
 800e892:	b901      	cbnz	r1, 800e896 <__ascii_mbtowc+0x6>
 800e894:	a901      	add	r1, sp, #4
 800e896:	b142      	cbz	r2, 800e8aa <__ascii_mbtowc+0x1a>
 800e898:	b14b      	cbz	r3, 800e8ae <__ascii_mbtowc+0x1e>
 800e89a:	7813      	ldrb	r3, [r2, #0]
 800e89c:	600b      	str	r3, [r1, #0]
 800e89e:	7812      	ldrb	r2, [r2, #0]
 800e8a0:	1e10      	subs	r0, r2, #0
 800e8a2:	bf18      	it	ne
 800e8a4:	2001      	movne	r0, #1
 800e8a6:	b002      	add	sp, #8
 800e8a8:	4770      	bx	lr
 800e8aa:	4610      	mov	r0, r2
 800e8ac:	e7fb      	b.n	800e8a6 <__ascii_mbtowc+0x16>
 800e8ae:	f06f 0001 	mvn.w	r0, #1
 800e8b2:	e7f8      	b.n	800e8a6 <__ascii_mbtowc+0x16>

0800e8b4 <__malloc_lock>:
 800e8b4:	4801      	ldr	r0, [pc, #4]	; (800e8bc <__malloc_lock+0x8>)
 800e8b6:	f000 bbf1 	b.w	800f09c <__retarget_lock_acquire_recursive>
 800e8ba:	bf00      	nop
 800e8bc:	24000b24 	.word	0x24000b24

0800e8c0 <__malloc_unlock>:
 800e8c0:	4801      	ldr	r0, [pc, #4]	; (800e8c8 <__malloc_unlock+0x8>)
 800e8c2:	f000 bbec 	b.w	800f09e <__retarget_lock_release_recursive>
 800e8c6:	bf00      	nop
 800e8c8:	24000b24 	.word	0x24000b24

0800e8cc <__sfputc_r>:
 800e8cc:	6893      	ldr	r3, [r2, #8]
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	b410      	push	{r4}
 800e8d4:	6093      	str	r3, [r2, #8]
 800e8d6:	da08      	bge.n	800e8ea <__sfputc_r+0x1e>
 800e8d8:	6994      	ldr	r4, [r2, #24]
 800e8da:	42a3      	cmp	r3, r4
 800e8dc:	db01      	blt.n	800e8e2 <__sfputc_r+0x16>
 800e8de:	290a      	cmp	r1, #10
 800e8e0:	d103      	bne.n	800e8ea <__sfputc_r+0x1e>
 800e8e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8e6:	f000 b94b 	b.w	800eb80 <__swbuf_r>
 800e8ea:	6813      	ldr	r3, [r2, #0]
 800e8ec:	1c58      	adds	r0, r3, #1
 800e8ee:	6010      	str	r0, [r2, #0]
 800e8f0:	7019      	strb	r1, [r3, #0]
 800e8f2:	4608      	mov	r0, r1
 800e8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8f8:	4770      	bx	lr

0800e8fa <__sfputs_r>:
 800e8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fc:	4606      	mov	r6, r0
 800e8fe:	460f      	mov	r7, r1
 800e900:	4614      	mov	r4, r2
 800e902:	18d5      	adds	r5, r2, r3
 800e904:	42ac      	cmp	r4, r5
 800e906:	d101      	bne.n	800e90c <__sfputs_r+0x12>
 800e908:	2000      	movs	r0, #0
 800e90a:	e007      	b.n	800e91c <__sfputs_r+0x22>
 800e90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e910:	463a      	mov	r2, r7
 800e912:	4630      	mov	r0, r6
 800e914:	f7ff ffda 	bl	800e8cc <__sfputc_r>
 800e918:	1c43      	adds	r3, r0, #1
 800e91a:	d1f3      	bne.n	800e904 <__sfputs_r+0xa>
 800e91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e920 <_vfiprintf_r>:
 800e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	460d      	mov	r5, r1
 800e926:	b09d      	sub	sp, #116	; 0x74
 800e928:	4614      	mov	r4, r2
 800e92a:	4698      	mov	r8, r3
 800e92c:	4606      	mov	r6, r0
 800e92e:	b118      	cbz	r0, 800e938 <_vfiprintf_r+0x18>
 800e930:	6983      	ldr	r3, [r0, #24]
 800e932:	b90b      	cbnz	r3, 800e938 <_vfiprintf_r+0x18>
 800e934:	f000 fb14 	bl	800ef60 <__sinit>
 800e938:	4b89      	ldr	r3, [pc, #548]	; (800eb60 <_vfiprintf_r+0x240>)
 800e93a:	429d      	cmp	r5, r3
 800e93c:	d11b      	bne.n	800e976 <_vfiprintf_r+0x56>
 800e93e:	6875      	ldr	r5, [r6, #4]
 800e940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e942:	07d9      	lsls	r1, r3, #31
 800e944:	d405      	bmi.n	800e952 <_vfiprintf_r+0x32>
 800e946:	89ab      	ldrh	r3, [r5, #12]
 800e948:	059a      	lsls	r2, r3, #22
 800e94a:	d402      	bmi.n	800e952 <_vfiprintf_r+0x32>
 800e94c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e94e:	f000 fba5 	bl	800f09c <__retarget_lock_acquire_recursive>
 800e952:	89ab      	ldrh	r3, [r5, #12]
 800e954:	071b      	lsls	r3, r3, #28
 800e956:	d501      	bpl.n	800e95c <_vfiprintf_r+0x3c>
 800e958:	692b      	ldr	r3, [r5, #16]
 800e95a:	b9eb      	cbnz	r3, 800e998 <_vfiprintf_r+0x78>
 800e95c:	4629      	mov	r1, r5
 800e95e:	4630      	mov	r0, r6
 800e960:	f000 f96e 	bl	800ec40 <__swsetup_r>
 800e964:	b1c0      	cbz	r0, 800e998 <_vfiprintf_r+0x78>
 800e966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e968:	07dc      	lsls	r4, r3, #31
 800e96a:	d50e      	bpl.n	800e98a <_vfiprintf_r+0x6a>
 800e96c:	f04f 30ff 	mov.w	r0, #4294967295
 800e970:	b01d      	add	sp, #116	; 0x74
 800e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e976:	4b7b      	ldr	r3, [pc, #492]	; (800eb64 <_vfiprintf_r+0x244>)
 800e978:	429d      	cmp	r5, r3
 800e97a:	d101      	bne.n	800e980 <_vfiprintf_r+0x60>
 800e97c:	68b5      	ldr	r5, [r6, #8]
 800e97e:	e7df      	b.n	800e940 <_vfiprintf_r+0x20>
 800e980:	4b79      	ldr	r3, [pc, #484]	; (800eb68 <_vfiprintf_r+0x248>)
 800e982:	429d      	cmp	r5, r3
 800e984:	bf08      	it	eq
 800e986:	68f5      	ldreq	r5, [r6, #12]
 800e988:	e7da      	b.n	800e940 <_vfiprintf_r+0x20>
 800e98a:	89ab      	ldrh	r3, [r5, #12]
 800e98c:	0598      	lsls	r0, r3, #22
 800e98e:	d4ed      	bmi.n	800e96c <_vfiprintf_r+0x4c>
 800e990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e992:	f000 fb84 	bl	800f09e <__retarget_lock_release_recursive>
 800e996:	e7e9      	b.n	800e96c <_vfiprintf_r+0x4c>
 800e998:	2300      	movs	r3, #0
 800e99a:	9309      	str	r3, [sp, #36]	; 0x24
 800e99c:	2320      	movs	r3, #32
 800e99e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9a6:	2330      	movs	r3, #48	; 0x30
 800e9a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb6c <_vfiprintf_r+0x24c>
 800e9ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9b0:	f04f 0901 	mov.w	r9, #1
 800e9b4:	4623      	mov	r3, r4
 800e9b6:	469a      	mov	sl, r3
 800e9b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9bc:	b10a      	cbz	r2, 800e9c2 <_vfiprintf_r+0xa2>
 800e9be:	2a25      	cmp	r2, #37	; 0x25
 800e9c0:	d1f9      	bne.n	800e9b6 <_vfiprintf_r+0x96>
 800e9c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e9c6:	d00b      	beq.n	800e9e0 <_vfiprintf_r+0xc0>
 800e9c8:	465b      	mov	r3, fp
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f7ff ff93 	bl	800e8fa <__sfputs_r>
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	f000 80aa 	beq.w	800eb2e <_vfiprintf_r+0x20e>
 800e9da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9dc:	445a      	add	r2, fp
 800e9de:	9209      	str	r2, [sp, #36]	; 0x24
 800e9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 80a2 	beq.w	800eb2e <_vfiprintf_r+0x20e>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9f4:	f10a 0a01 	add.w	sl, sl, #1
 800e9f8:	9304      	str	r3, [sp, #16]
 800e9fa:	9307      	str	r3, [sp, #28]
 800e9fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea00:	931a      	str	r3, [sp, #104]	; 0x68
 800ea02:	4654      	mov	r4, sl
 800ea04:	2205      	movs	r2, #5
 800ea06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea0a:	4858      	ldr	r0, [pc, #352]	; (800eb6c <_vfiprintf_r+0x24c>)
 800ea0c:	f7f1 fc70 	bl	80002f0 <memchr>
 800ea10:	9a04      	ldr	r2, [sp, #16]
 800ea12:	b9d8      	cbnz	r0, 800ea4c <_vfiprintf_r+0x12c>
 800ea14:	06d1      	lsls	r1, r2, #27
 800ea16:	bf44      	itt	mi
 800ea18:	2320      	movmi	r3, #32
 800ea1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea1e:	0713      	lsls	r3, r2, #28
 800ea20:	bf44      	itt	mi
 800ea22:	232b      	movmi	r3, #43	; 0x2b
 800ea24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea28:	f89a 3000 	ldrb.w	r3, [sl]
 800ea2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2e:	d015      	beq.n	800ea5c <_vfiprintf_r+0x13c>
 800ea30:	9a07      	ldr	r2, [sp, #28]
 800ea32:	4654      	mov	r4, sl
 800ea34:	2000      	movs	r0, #0
 800ea36:	f04f 0c0a 	mov.w	ip, #10
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea40:	3b30      	subs	r3, #48	; 0x30
 800ea42:	2b09      	cmp	r3, #9
 800ea44:	d94e      	bls.n	800eae4 <_vfiprintf_r+0x1c4>
 800ea46:	b1b0      	cbz	r0, 800ea76 <_vfiprintf_r+0x156>
 800ea48:	9207      	str	r2, [sp, #28]
 800ea4a:	e014      	b.n	800ea76 <_vfiprintf_r+0x156>
 800ea4c:	eba0 0308 	sub.w	r3, r0, r8
 800ea50:	fa09 f303 	lsl.w	r3, r9, r3
 800ea54:	4313      	orrs	r3, r2
 800ea56:	9304      	str	r3, [sp, #16]
 800ea58:	46a2      	mov	sl, r4
 800ea5a:	e7d2      	b.n	800ea02 <_vfiprintf_r+0xe2>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	1d19      	adds	r1, r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	9103      	str	r1, [sp, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bfbb      	ittet	lt
 800ea68:	425b      	neglt	r3, r3
 800ea6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ea6e:	9307      	strge	r3, [sp, #28]
 800ea70:	9307      	strlt	r3, [sp, #28]
 800ea72:	bfb8      	it	lt
 800ea74:	9204      	strlt	r2, [sp, #16]
 800ea76:	7823      	ldrb	r3, [r4, #0]
 800ea78:	2b2e      	cmp	r3, #46	; 0x2e
 800ea7a:	d10c      	bne.n	800ea96 <_vfiprintf_r+0x176>
 800ea7c:	7863      	ldrb	r3, [r4, #1]
 800ea7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea80:	d135      	bne.n	800eaee <_vfiprintf_r+0x1ce>
 800ea82:	9b03      	ldr	r3, [sp, #12]
 800ea84:	1d1a      	adds	r2, r3, #4
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	9203      	str	r2, [sp, #12]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	bfb8      	it	lt
 800ea8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea92:	3402      	adds	r4, #2
 800ea94:	9305      	str	r3, [sp, #20]
 800ea96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb7c <_vfiprintf_r+0x25c>
 800ea9a:	7821      	ldrb	r1, [r4, #0]
 800ea9c:	2203      	movs	r2, #3
 800ea9e:	4650      	mov	r0, sl
 800eaa0:	f7f1 fc26 	bl	80002f0 <memchr>
 800eaa4:	b140      	cbz	r0, 800eab8 <_vfiprintf_r+0x198>
 800eaa6:	2340      	movs	r3, #64	; 0x40
 800eaa8:	eba0 000a 	sub.w	r0, r0, sl
 800eaac:	fa03 f000 	lsl.w	r0, r3, r0
 800eab0:	9b04      	ldr	r3, [sp, #16]
 800eab2:	4303      	orrs	r3, r0
 800eab4:	3401      	adds	r4, #1
 800eab6:	9304      	str	r3, [sp, #16]
 800eab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eabc:	482c      	ldr	r0, [pc, #176]	; (800eb70 <_vfiprintf_r+0x250>)
 800eabe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eac2:	2206      	movs	r2, #6
 800eac4:	f7f1 fc14 	bl	80002f0 <memchr>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	d03f      	beq.n	800eb4c <_vfiprintf_r+0x22c>
 800eacc:	4b29      	ldr	r3, [pc, #164]	; (800eb74 <_vfiprintf_r+0x254>)
 800eace:	bb1b      	cbnz	r3, 800eb18 <_vfiprintf_r+0x1f8>
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	3307      	adds	r3, #7
 800ead4:	f023 0307 	bic.w	r3, r3, #7
 800ead8:	3308      	adds	r3, #8
 800eada:	9303      	str	r3, [sp, #12]
 800eadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eade:	443b      	add	r3, r7
 800eae0:	9309      	str	r3, [sp, #36]	; 0x24
 800eae2:	e767      	b.n	800e9b4 <_vfiprintf_r+0x94>
 800eae4:	fb0c 3202 	mla	r2, ip, r2, r3
 800eae8:	460c      	mov	r4, r1
 800eaea:	2001      	movs	r0, #1
 800eaec:	e7a5      	b.n	800ea3a <_vfiprintf_r+0x11a>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	3401      	adds	r4, #1
 800eaf2:	9305      	str	r3, [sp, #20]
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	f04f 0c0a 	mov.w	ip, #10
 800eafa:	4620      	mov	r0, r4
 800eafc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb00:	3a30      	subs	r2, #48	; 0x30
 800eb02:	2a09      	cmp	r2, #9
 800eb04:	d903      	bls.n	800eb0e <_vfiprintf_r+0x1ee>
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d0c5      	beq.n	800ea96 <_vfiprintf_r+0x176>
 800eb0a:	9105      	str	r1, [sp, #20]
 800eb0c:	e7c3      	b.n	800ea96 <_vfiprintf_r+0x176>
 800eb0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb12:	4604      	mov	r4, r0
 800eb14:	2301      	movs	r3, #1
 800eb16:	e7f0      	b.n	800eafa <_vfiprintf_r+0x1da>
 800eb18:	ab03      	add	r3, sp, #12
 800eb1a:	9300      	str	r3, [sp, #0]
 800eb1c:	462a      	mov	r2, r5
 800eb1e:	4b16      	ldr	r3, [pc, #88]	; (800eb78 <_vfiprintf_r+0x258>)
 800eb20:	a904      	add	r1, sp, #16
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7fe f860 	bl	800cbe8 <_printf_float>
 800eb28:	4607      	mov	r7, r0
 800eb2a:	1c78      	adds	r0, r7, #1
 800eb2c:	d1d6      	bne.n	800eadc <_vfiprintf_r+0x1bc>
 800eb2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb30:	07d9      	lsls	r1, r3, #31
 800eb32:	d405      	bmi.n	800eb40 <_vfiprintf_r+0x220>
 800eb34:	89ab      	ldrh	r3, [r5, #12]
 800eb36:	059a      	lsls	r2, r3, #22
 800eb38:	d402      	bmi.n	800eb40 <_vfiprintf_r+0x220>
 800eb3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb3c:	f000 faaf 	bl	800f09e <__retarget_lock_release_recursive>
 800eb40:	89ab      	ldrh	r3, [r5, #12]
 800eb42:	065b      	lsls	r3, r3, #25
 800eb44:	f53f af12 	bmi.w	800e96c <_vfiprintf_r+0x4c>
 800eb48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb4a:	e711      	b.n	800e970 <_vfiprintf_r+0x50>
 800eb4c:	ab03      	add	r3, sp, #12
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	462a      	mov	r2, r5
 800eb52:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <_vfiprintf_r+0x258>)
 800eb54:	a904      	add	r1, sp, #16
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7fe fad2 	bl	800d100 <_printf_i>
 800eb5c:	e7e4      	b.n	800eb28 <_vfiprintf_r+0x208>
 800eb5e:	bf00      	nop
 800eb60:	0800f8bc 	.word	0x0800f8bc
 800eb64:	0800f8dc 	.word	0x0800f8dc
 800eb68:	0800f89c 	.word	0x0800f89c
 800eb6c:	0800f78a 	.word	0x0800f78a
 800eb70:	0800f794 	.word	0x0800f794
 800eb74:	0800cbe9 	.word	0x0800cbe9
 800eb78:	0800e8fb 	.word	0x0800e8fb
 800eb7c:	0800f790 	.word	0x0800f790

0800eb80 <__swbuf_r>:
 800eb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb82:	460e      	mov	r6, r1
 800eb84:	4614      	mov	r4, r2
 800eb86:	4605      	mov	r5, r0
 800eb88:	b118      	cbz	r0, 800eb92 <__swbuf_r+0x12>
 800eb8a:	6983      	ldr	r3, [r0, #24]
 800eb8c:	b90b      	cbnz	r3, 800eb92 <__swbuf_r+0x12>
 800eb8e:	f000 f9e7 	bl	800ef60 <__sinit>
 800eb92:	4b21      	ldr	r3, [pc, #132]	; (800ec18 <__swbuf_r+0x98>)
 800eb94:	429c      	cmp	r4, r3
 800eb96:	d12b      	bne.n	800ebf0 <__swbuf_r+0x70>
 800eb98:	686c      	ldr	r4, [r5, #4]
 800eb9a:	69a3      	ldr	r3, [r4, #24]
 800eb9c:	60a3      	str	r3, [r4, #8]
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	071a      	lsls	r2, r3, #28
 800eba2:	d52f      	bpl.n	800ec04 <__swbuf_r+0x84>
 800eba4:	6923      	ldr	r3, [r4, #16]
 800eba6:	b36b      	cbz	r3, 800ec04 <__swbuf_r+0x84>
 800eba8:	6923      	ldr	r3, [r4, #16]
 800ebaa:	6820      	ldr	r0, [r4, #0]
 800ebac:	1ac0      	subs	r0, r0, r3
 800ebae:	6963      	ldr	r3, [r4, #20]
 800ebb0:	b2f6      	uxtb	r6, r6
 800ebb2:	4283      	cmp	r3, r0
 800ebb4:	4637      	mov	r7, r6
 800ebb6:	dc04      	bgt.n	800ebc2 <__swbuf_r+0x42>
 800ebb8:	4621      	mov	r1, r4
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f000 f93c 	bl	800ee38 <_fflush_r>
 800ebc0:	bb30      	cbnz	r0, 800ec10 <__swbuf_r+0x90>
 800ebc2:	68a3      	ldr	r3, [r4, #8]
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	60a3      	str	r3, [r4, #8]
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	1c5a      	adds	r2, r3, #1
 800ebcc:	6022      	str	r2, [r4, #0]
 800ebce:	701e      	strb	r6, [r3, #0]
 800ebd0:	6963      	ldr	r3, [r4, #20]
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	4283      	cmp	r3, r0
 800ebd6:	d004      	beq.n	800ebe2 <__swbuf_r+0x62>
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	07db      	lsls	r3, r3, #31
 800ebdc:	d506      	bpl.n	800ebec <__swbuf_r+0x6c>
 800ebde:	2e0a      	cmp	r6, #10
 800ebe0:	d104      	bne.n	800ebec <__swbuf_r+0x6c>
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	f000 f927 	bl	800ee38 <_fflush_r>
 800ebea:	b988      	cbnz	r0, 800ec10 <__swbuf_r+0x90>
 800ebec:	4638      	mov	r0, r7
 800ebee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf0:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <__swbuf_r+0x9c>)
 800ebf2:	429c      	cmp	r4, r3
 800ebf4:	d101      	bne.n	800ebfa <__swbuf_r+0x7a>
 800ebf6:	68ac      	ldr	r4, [r5, #8]
 800ebf8:	e7cf      	b.n	800eb9a <__swbuf_r+0x1a>
 800ebfa:	4b09      	ldr	r3, [pc, #36]	; (800ec20 <__swbuf_r+0xa0>)
 800ebfc:	429c      	cmp	r4, r3
 800ebfe:	bf08      	it	eq
 800ec00:	68ec      	ldreq	r4, [r5, #12]
 800ec02:	e7ca      	b.n	800eb9a <__swbuf_r+0x1a>
 800ec04:	4621      	mov	r1, r4
 800ec06:	4628      	mov	r0, r5
 800ec08:	f000 f81a 	bl	800ec40 <__swsetup_r>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d0cb      	beq.n	800eba8 <__swbuf_r+0x28>
 800ec10:	f04f 37ff 	mov.w	r7, #4294967295
 800ec14:	e7ea      	b.n	800ebec <__swbuf_r+0x6c>
 800ec16:	bf00      	nop
 800ec18:	0800f8bc 	.word	0x0800f8bc
 800ec1c:	0800f8dc 	.word	0x0800f8dc
 800ec20:	0800f89c 	.word	0x0800f89c

0800ec24 <__ascii_wctomb>:
 800ec24:	b149      	cbz	r1, 800ec3a <__ascii_wctomb+0x16>
 800ec26:	2aff      	cmp	r2, #255	; 0xff
 800ec28:	bf85      	ittet	hi
 800ec2a:	238a      	movhi	r3, #138	; 0x8a
 800ec2c:	6003      	strhi	r3, [r0, #0]
 800ec2e:	700a      	strbls	r2, [r1, #0]
 800ec30:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec34:	bf98      	it	ls
 800ec36:	2001      	movls	r0, #1
 800ec38:	4770      	bx	lr
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	4770      	bx	lr
	...

0800ec40 <__swsetup_r>:
 800ec40:	4b32      	ldr	r3, [pc, #200]	; (800ed0c <__swsetup_r+0xcc>)
 800ec42:	b570      	push	{r4, r5, r6, lr}
 800ec44:	681d      	ldr	r5, [r3, #0]
 800ec46:	4606      	mov	r6, r0
 800ec48:	460c      	mov	r4, r1
 800ec4a:	b125      	cbz	r5, 800ec56 <__swsetup_r+0x16>
 800ec4c:	69ab      	ldr	r3, [r5, #24]
 800ec4e:	b913      	cbnz	r3, 800ec56 <__swsetup_r+0x16>
 800ec50:	4628      	mov	r0, r5
 800ec52:	f000 f985 	bl	800ef60 <__sinit>
 800ec56:	4b2e      	ldr	r3, [pc, #184]	; (800ed10 <__swsetup_r+0xd0>)
 800ec58:	429c      	cmp	r4, r3
 800ec5a:	d10f      	bne.n	800ec7c <__swsetup_r+0x3c>
 800ec5c:	686c      	ldr	r4, [r5, #4]
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec64:	0719      	lsls	r1, r3, #28
 800ec66:	d42c      	bmi.n	800ecc2 <__swsetup_r+0x82>
 800ec68:	06dd      	lsls	r5, r3, #27
 800ec6a:	d411      	bmi.n	800ec90 <__swsetup_r+0x50>
 800ec6c:	2309      	movs	r3, #9
 800ec6e:	6033      	str	r3, [r6, #0]
 800ec70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec74:	81a3      	strh	r3, [r4, #12]
 800ec76:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7a:	e03e      	b.n	800ecfa <__swsetup_r+0xba>
 800ec7c:	4b25      	ldr	r3, [pc, #148]	; (800ed14 <__swsetup_r+0xd4>)
 800ec7e:	429c      	cmp	r4, r3
 800ec80:	d101      	bne.n	800ec86 <__swsetup_r+0x46>
 800ec82:	68ac      	ldr	r4, [r5, #8]
 800ec84:	e7eb      	b.n	800ec5e <__swsetup_r+0x1e>
 800ec86:	4b24      	ldr	r3, [pc, #144]	; (800ed18 <__swsetup_r+0xd8>)
 800ec88:	429c      	cmp	r4, r3
 800ec8a:	bf08      	it	eq
 800ec8c:	68ec      	ldreq	r4, [r5, #12]
 800ec8e:	e7e6      	b.n	800ec5e <__swsetup_r+0x1e>
 800ec90:	0758      	lsls	r0, r3, #29
 800ec92:	d512      	bpl.n	800ecba <__swsetup_r+0x7a>
 800ec94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec96:	b141      	cbz	r1, 800ecaa <__swsetup_r+0x6a>
 800ec98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec9c:	4299      	cmp	r1, r3
 800ec9e:	d002      	beq.n	800eca6 <__swsetup_r+0x66>
 800eca0:	4630      	mov	r0, r6
 800eca2:	f7ff fd0b 	bl	800e6bc <_free_r>
 800eca6:	2300      	movs	r3, #0
 800eca8:	6363      	str	r3, [r4, #52]	; 0x34
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecb0:	81a3      	strh	r3, [r4, #12]
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	6063      	str	r3, [r4, #4]
 800ecb6:	6923      	ldr	r3, [r4, #16]
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	89a3      	ldrh	r3, [r4, #12]
 800ecbc:	f043 0308 	orr.w	r3, r3, #8
 800ecc0:	81a3      	strh	r3, [r4, #12]
 800ecc2:	6923      	ldr	r3, [r4, #16]
 800ecc4:	b94b      	cbnz	r3, 800ecda <__swsetup_r+0x9a>
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecd0:	d003      	beq.n	800ecda <__swsetup_r+0x9a>
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	f000 fa07 	bl	800f0e8 <__smakebuf_r>
 800ecda:	89a0      	ldrh	r0, [r4, #12]
 800ecdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ece0:	f010 0301 	ands.w	r3, r0, #1
 800ece4:	d00a      	beq.n	800ecfc <__swsetup_r+0xbc>
 800ece6:	2300      	movs	r3, #0
 800ece8:	60a3      	str	r3, [r4, #8]
 800ecea:	6963      	ldr	r3, [r4, #20]
 800ecec:	425b      	negs	r3, r3
 800ecee:	61a3      	str	r3, [r4, #24]
 800ecf0:	6923      	ldr	r3, [r4, #16]
 800ecf2:	b943      	cbnz	r3, 800ed06 <__swsetup_r+0xc6>
 800ecf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ecf8:	d1ba      	bne.n	800ec70 <__swsetup_r+0x30>
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	0781      	lsls	r1, r0, #30
 800ecfe:	bf58      	it	pl
 800ed00:	6963      	ldrpl	r3, [r4, #20]
 800ed02:	60a3      	str	r3, [r4, #8]
 800ed04:	e7f4      	b.n	800ecf0 <__swsetup_r+0xb0>
 800ed06:	2000      	movs	r0, #0
 800ed08:	e7f7      	b.n	800ecfa <__swsetup_r+0xba>
 800ed0a:	bf00      	nop
 800ed0c:	24000038 	.word	0x24000038
 800ed10:	0800f8bc 	.word	0x0800f8bc
 800ed14:	0800f8dc 	.word	0x0800f8dc
 800ed18:	0800f89c 	.word	0x0800f89c

0800ed1c <abort>:
 800ed1c:	b508      	push	{r3, lr}
 800ed1e:	2006      	movs	r0, #6
 800ed20:	f000 fa4a 	bl	800f1b8 <raise>
 800ed24:	2001      	movs	r0, #1
 800ed26:	f7f4 fd4b 	bl	80037c0 <_exit>
	...

0800ed2c <__sflush_r>:
 800ed2c:	898a      	ldrh	r2, [r1, #12]
 800ed2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed32:	4605      	mov	r5, r0
 800ed34:	0710      	lsls	r0, r2, #28
 800ed36:	460c      	mov	r4, r1
 800ed38:	d458      	bmi.n	800edec <__sflush_r+0xc0>
 800ed3a:	684b      	ldr	r3, [r1, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	dc05      	bgt.n	800ed4c <__sflush_r+0x20>
 800ed40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	dc02      	bgt.n	800ed4c <__sflush_r+0x20>
 800ed46:	2000      	movs	r0, #0
 800ed48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed4e:	2e00      	cmp	r6, #0
 800ed50:	d0f9      	beq.n	800ed46 <__sflush_r+0x1a>
 800ed52:	2300      	movs	r3, #0
 800ed54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed58:	682f      	ldr	r7, [r5, #0]
 800ed5a:	602b      	str	r3, [r5, #0]
 800ed5c:	d032      	beq.n	800edc4 <__sflush_r+0x98>
 800ed5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	075a      	lsls	r2, r3, #29
 800ed64:	d505      	bpl.n	800ed72 <__sflush_r+0x46>
 800ed66:	6863      	ldr	r3, [r4, #4]
 800ed68:	1ac0      	subs	r0, r0, r3
 800ed6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed6c:	b10b      	cbz	r3, 800ed72 <__sflush_r+0x46>
 800ed6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed70:	1ac0      	subs	r0, r0, r3
 800ed72:	2300      	movs	r3, #0
 800ed74:	4602      	mov	r2, r0
 800ed76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed78:	6a21      	ldr	r1, [r4, #32]
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	47b0      	blx	r6
 800ed7e:	1c43      	adds	r3, r0, #1
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	d106      	bne.n	800ed92 <__sflush_r+0x66>
 800ed84:	6829      	ldr	r1, [r5, #0]
 800ed86:	291d      	cmp	r1, #29
 800ed88:	d82c      	bhi.n	800ede4 <__sflush_r+0xb8>
 800ed8a:	4a2a      	ldr	r2, [pc, #168]	; (800ee34 <__sflush_r+0x108>)
 800ed8c:	40ca      	lsrs	r2, r1
 800ed8e:	07d6      	lsls	r6, r2, #31
 800ed90:	d528      	bpl.n	800ede4 <__sflush_r+0xb8>
 800ed92:	2200      	movs	r2, #0
 800ed94:	6062      	str	r2, [r4, #4]
 800ed96:	04d9      	lsls	r1, r3, #19
 800ed98:	6922      	ldr	r2, [r4, #16]
 800ed9a:	6022      	str	r2, [r4, #0]
 800ed9c:	d504      	bpl.n	800eda8 <__sflush_r+0x7c>
 800ed9e:	1c42      	adds	r2, r0, #1
 800eda0:	d101      	bne.n	800eda6 <__sflush_r+0x7a>
 800eda2:	682b      	ldr	r3, [r5, #0]
 800eda4:	b903      	cbnz	r3, 800eda8 <__sflush_r+0x7c>
 800eda6:	6560      	str	r0, [r4, #84]	; 0x54
 800eda8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edaa:	602f      	str	r7, [r5, #0]
 800edac:	2900      	cmp	r1, #0
 800edae:	d0ca      	beq.n	800ed46 <__sflush_r+0x1a>
 800edb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edb4:	4299      	cmp	r1, r3
 800edb6:	d002      	beq.n	800edbe <__sflush_r+0x92>
 800edb8:	4628      	mov	r0, r5
 800edba:	f7ff fc7f 	bl	800e6bc <_free_r>
 800edbe:	2000      	movs	r0, #0
 800edc0:	6360      	str	r0, [r4, #52]	; 0x34
 800edc2:	e7c1      	b.n	800ed48 <__sflush_r+0x1c>
 800edc4:	6a21      	ldr	r1, [r4, #32]
 800edc6:	2301      	movs	r3, #1
 800edc8:	4628      	mov	r0, r5
 800edca:	47b0      	blx	r6
 800edcc:	1c41      	adds	r1, r0, #1
 800edce:	d1c7      	bne.n	800ed60 <__sflush_r+0x34>
 800edd0:	682b      	ldr	r3, [r5, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0c4      	beq.n	800ed60 <__sflush_r+0x34>
 800edd6:	2b1d      	cmp	r3, #29
 800edd8:	d001      	beq.n	800edde <__sflush_r+0xb2>
 800edda:	2b16      	cmp	r3, #22
 800eddc:	d101      	bne.n	800ede2 <__sflush_r+0xb6>
 800edde:	602f      	str	r7, [r5, #0]
 800ede0:	e7b1      	b.n	800ed46 <__sflush_r+0x1a>
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ede8:	81a3      	strh	r3, [r4, #12]
 800edea:	e7ad      	b.n	800ed48 <__sflush_r+0x1c>
 800edec:	690f      	ldr	r7, [r1, #16]
 800edee:	2f00      	cmp	r7, #0
 800edf0:	d0a9      	beq.n	800ed46 <__sflush_r+0x1a>
 800edf2:	0793      	lsls	r3, r2, #30
 800edf4:	680e      	ldr	r6, [r1, #0]
 800edf6:	bf08      	it	eq
 800edf8:	694b      	ldreq	r3, [r1, #20]
 800edfa:	600f      	str	r7, [r1, #0]
 800edfc:	bf18      	it	ne
 800edfe:	2300      	movne	r3, #0
 800ee00:	eba6 0807 	sub.w	r8, r6, r7
 800ee04:	608b      	str	r3, [r1, #8]
 800ee06:	f1b8 0f00 	cmp.w	r8, #0
 800ee0a:	dd9c      	ble.n	800ed46 <__sflush_r+0x1a>
 800ee0c:	6a21      	ldr	r1, [r4, #32]
 800ee0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee10:	4643      	mov	r3, r8
 800ee12:	463a      	mov	r2, r7
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b0      	blx	r6
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	dc06      	bgt.n	800ee2a <__sflush_r+0xfe>
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	e78e      	b.n	800ed48 <__sflush_r+0x1c>
 800ee2a:	4407      	add	r7, r0
 800ee2c:	eba8 0800 	sub.w	r8, r8, r0
 800ee30:	e7e9      	b.n	800ee06 <__sflush_r+0xda>
 800ee32:	bf00      	nop
 800ee34:	20400001 	.word	0x20400001

0800ee38 <_fflush_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	690b      	ldr	r3, [r1, #16]
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	460c      	mov	r4, r1
 800ee40:	b913      	cbnz	r3, 800ee48 <_fflush_r+0x10>
 800ee42:	2500      	movs	r5, #0
 800ee44:	4628      	mov	r0, r5
 800ee46:	bd38      	pop	{r3, r4, r5, pc}
 800ee48:	b118      	cbz	r0, 800ee52 <_fflush_r+0x1a>
 800ee4a:	6983      	ldr	r3, [r0, #24]
 800ee4c:	b90b      	cbnz	r3, 800ee52 <_fflush_r+0x1a>
 800ee4e:	f000 f887 	bl	800ef60 <__sinit>
 800ee52:	4b14      	ldr	r3, [pc, #80]	; (800eea4 <_fflush_r+0x6c>)
 800ee54:	429c      	cmp	r4, r3
 800ee56:	d11b      	bne.n	800ee90 <_fflush_r+0x58>
 800ee58:	686c      	ldr	r4, [r5, #4]
 800ee5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0ef      	beq.n	800ee42 <_fflush_r+0xa>
 800ee62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee64:	07d0      	lsls	r0, r2, #31
 800ee66:	d404      	bmi.n	800ee72 <_fflush_r+0x3a>
 800ee68:	0599      	lsls	r1, r3, #22
 800ee6a:	d402      	bmi.n	800ee72 <_fflush_r+0x3a>
 800ee6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee6e:	f000 f915 	bl	800f09c <__retarget_lock_acquire_recursive>
 800ee72:	4628      	mov	r0, r5
 800ee74:	4621      	mov	r1, r4
 800ee76:	f7ff ff59 	bl	800ed2c <__sflush_r>
 800ee7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee7c:	07da      	lsls	r2, r3, #31
 800ee7e:	4605      	mov	r5, r0
 800ee80:	d4e0      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	059b      	lsls	r3, r3, #22
 800ee86:	d4dd      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee8a:	f000 f908 	bl	800f09e <__retarget_lock_release_recursive>
 800ee8e:	e7d9      	b.n	800ee44 <_fflush_r+0xc>
 800ee90:	4b05      	ldr	r3, [pc, #20]	; (800eea8 <_fflush_r+0x70>)
 800ee92:	429c      	cmp	r4, r3
 800ee94:	d101      	bne.n	800ee9a <_fflush_r+0x62>
 800ee96:	68ac      	ldr	r4, [r5, #8]
 800ee98:	e7df      	b.n	800ee5a <_fflush_r+0x22>
 800ee9a:	4b04      	ldr	r3, [pc, #16]	; (800eeac <_fflush_r+0x74>)
 800ee9c:	429c      	cmp	r4, r3
 800ee9e:	bf08      	it	eq
 800eea0:	68ec      	ldreq	r4, [r5, #12]
 800eea2:	e7da      	b.n	800ee5a <_fflush_r+0x22>
 800eea4:	0800f8bc 	.word	0x0800f8bc
 800eea8:	0800f8dc 	.word	0x0800f8dc
 800eeac:	0800f89c 	.word	0x0800f89c

0800eeb0 <std>:
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	b510      	push	{r4, lr}
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	e9c0 3300 	strd	r3, r3, [r0]
 800eeba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eebe:	6083      	str	r3, [r0, #8]
 800eec0:	8181      	strh	r1, [r0, #12]
 800eec2:	6643      	str	r3, [r0, #100]	; 0x64
 800eec4:	81c2      	strh	r2, [r0, #14]
 800eec6:	6183      	str	r3, [r0, #24]
 800eec8:	4619      	mov	r1, r3
 800eeca:	2208      	movs	r2, #8
 800eecc:	305c      	adds	r0, #92	; 0x5c
 800eece:	f7fd fdf3 	bl	800cab8 <memset>
 800eed2:	4b05      	ldr	r3, [pc, #20]	; (800eee8 <std+0x38>)
 800eed4:	6263      	str	r3, [r4, #36]	; 0x24
 800eed6:	4b05      	ldr	r3, [pc, #20]	; (800eeec <std+0x3c>)
 800eed8:	62a3      	str	r3, [r4, #40]	; 0x28
 800eeda:	4b05      	ldr	r3, [pc, #20]	; (800eef0 <std+0x40>)
 800eedc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eede:	4b05      	ldr	r3, [pc, #20]	; (800eef4 <std+0x44>)
 800eee0:	6224      	str	r4, [r4, #32]
 800eee2:	6323      	str	r3, [r4, #48]	; 0x30
 800eee4:	bd10      	pop	{r4, pc}
 800eee6:	bf00      	nop
 800eee8:	0800f1f1 	.word	0x0800f1f1
 800eeec:	0800f213 	.word	0x0800f213
 800eef0:	0800f24b 	.word	0x0800f24b
 800eef4:	0800f26f 	.word	0x0800f26f

0800eef8 <_cleanup_r>:
 800eef8:	4901      	ldr	r1, [pc, #4]	; (800ef00 <_cleanup_r+0x8>)
 800eefa:	f000 b8af 	b.w	800f05c <_fwalk_reent>
 800eefe:	bf00      	nop
 800ef00:	0800ee39 	.word	0x0800ee39

0800ef04 <__sfmoreglue>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	1e4a      	subs	r2, r1, #1
 800ef08:	2568      	movs	r5, #104	; 0x68
 800ef0a:	4355      	muls	r5, r2
 800ef0c:	460e      	mov	r6, r1
 800ef0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef12:	f7ff fc23 	bl	800e75c <_malloc_r>
 800ef16:	4604      	mov	r4, r0
 800ef18:	b140      	cbz	r0, 800ef2c <__sfmoreglue+0x28>
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	e9c0 1600 	strd	r1, r6, [r0]
 800ef20:	300c      	adds	r0, #12
 800ef22:	60a0      	str	r0, [r4, #8]
 800ef24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef28:	f7fd fdc6 	bl	800cab8 <memset>
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}

0800ef30 <__sfp_lock_acquire>:
 800ef30:	4801      	ldr	r0, [pc, #4]	; (800ef38 <__sfp_lock_acquire+0x8>)
 800ef32:	f000 b8b3 	b.w	800f09c <__retarget_lock_acquire_recursive>
 800ef36:	bf00      	nop
 800ef38:	24000b28 	.word	0x24000b28

0800ef3c <__sfp_lock_release>:
 800ef3c:	4801      	ldr	r0, [pc, #4]	; (800ef44 <__sfp_lock_release+0x8>)
 800ef3e:	f000 b8ae 	b.w	800f09e <__retarget_lock_release_recursive>
 800ef42:	bf00      	nop
 800ef44:	24000b28 	.word	0x24000b28

0800ef48 <__sinit_lock_acquire>:
 800ef48:	4801      	ldr	r0, [pc, #4]	; (800ef50 <__sinit_lock_acquire+0x8>)
 800ef4a:	f000 b8a7 	b.w	800f09c <__retarget_lock_acquire_recursive>
 800ef4e:	bf00      	nop
 800ef50:	24000b23 	.word	0x24000b23

0800ef54 <__sinit_lock_release>:
 800ef54:	4801      	ldr	r0, [pc, #4]	; (800ef5c <__sinit_lock_release+0x8>)
 800ef56:	f000 b8a2 	b.w	800f09e <__retarget_lock_release_recursive>
 800ef5a:	bf00      	nop
 800ef5c:	24000b23 	.word	0x24000b23

0800ef60 <__sinit>:
 800ef60:	b510      	push	{r4, lr}
 800ef62:	4604      	mov	r4, r0
 800ef64:	f7ff fff0 	bl	800ef48 <__sinit_lock_acquire>
 800ef68:	69a3      	ldr	r3, [r4, #24]
 800ef6a:	b11b      	cbz	r3, 800ef74 <__sinit+0x14>
 800ef6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef70:	f7ff bff0 	b.w	800ef54 <__sinit_lock_release>
 800ef74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ef78:	6523      	str	r3, [r4, #80]	; 0x50
 800ef7a:	4b13      	ldr	r3, [pc, #76]	; (800efc8 <__sinit+0x68>)
 800ef7c:	4a13      	ldr	r2, [pc, #76]	; (800efcc <__sinit+0x6c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef82:	42a3      	cmp	r3, r4
 800ef84:	bf04      	itt	eq
 800ef86:	2301      	moveq	r3, #1
 800ef88:	61a3      	streq	r3, [r4, #24]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 f820 	bl	800efd0 <__sfp>
 800ef90:	6060      	str	r0, [r4, #4]
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 f81c 	bl	800efd0 <__sfp>
 800ef98:	60a0      	str	r0, [r4, #8]
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 f818 	bl	800efd0 <__sfp>
 800efa0:	2200      	movs	r2, #0
 800efa2:	60e0      	str	r0, [r4, #12]
 800efa4:	2104      	movs	r1, #4
 800efa6:	6860      	ldr	r0, [r4, #4]
 800efa8:	f7ff ff82 	bl	800eeb0 <std>
 800efac:	68a0      	ldr	r0, [r4, #8]
 800efae:	2201      	movs	r2, #1
 800efb0:	2109      	movs	r1, #9
 800efb2:	f7ff ff7d 	bl	800eeb0 <std>
 800efb6:	68e0      	ldr	r0, [r4, #12]
 800efb8:	2202      	movs	r2, #2
 800efba:	2112      	movs	r1, #18
 800efbc:	f7ff ff78 	bl	800eeb0 <std>
 800efc0:	2301      	movs	r3, #1
 800efc2:	61a3      	str	r3, [r4, #24]
 800efc4:	e7d2      	b.n	800ef6c <__sinit+0xc>
 800efc6:	bf00      	nop
 800efc8:	0800f518 	.word	0x0800f518
 800efcc:	0800eef9 	.word	0x0800eef9

0800efd0 <__sfp>:
 800efd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd2:	4607      	mov	r7, r0
 800efd4:	f7ff ffac 	bl	800ef30 <__sfp_lock_acquire>
 800efd8:	4b1e      	ldr	r3, [pc, #120]	; (800f054 <__sfp+0x84>)
 800efda:	681e      	ldr	r6, [r3, #0]
 800efdc:	69b3      	ldr	r3, [r6, #24]
 800efde:	b913      	cbnz	r3, 800efe6 <__sfp+0x16>
 800efe0:	4630      	mov	r0, r6
 800efe2:	f7ff ffbd 	bl	800ef60 <__sinit>
 800efe6:	3648      	adds	r6, #72	; 0x48
 800efe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800efec:	3b01      	subs	r3, #1
 800efee:	d503      	bpl.n	800eff8 <__sfp+0x28>
 800eff0:	6833      	ldr	r3, [r6, #0]
 800eff2:	b30b      	cbz	r3, 800f038 <__sfp+0x68>
 800eff4:	6836      	ldr	r6, [r6, #0]
 800eff6:	e7f7      	b.n	800efe8 <__sfp+0x18>
 800eff8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800effc:	b9d5      	cbnz	r5, 800f034 <__sfp+0x64>
 800effe:	4b16      	ldr	r3, [pc, #88]	; (800f058 <__sfp+0x88>)
 800f000:	60e3      	str	r3, [r4, #12]
 800f002:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f006:	6665      	str	r5, [r4, #100]	; 0x64
 800f008:	f000 f847 	bl	800f09a <__retarget_lock_init_recursive>
 800f00c:	f7ff ff96 	bl	800ef3c <__sfp_lock_release>
 800f010:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f014:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f018:	6025      	str	r5, [r4, #0]
 800f01a:	61a5      	str	r5, [r4, #24]
 800f01c:	2208      	movs	r2, #8
 800f01e:	4629      	mov	r1, r5
 800f020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f024:	f7fd fd48 	bl	800cab8 <memset>
 800f028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f02c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f030:	4620      	mov	r0, r4
 800f032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f034:	3468      	adds	r4, #104	; 0x68
 800f036:	e7d9      	b.n	800efec <__sfp+0x1c>
 800f038:	2104      	movs	r1, #4
 800f03a:	4638      	mov	r0, r7
 800f03c:	f7ff ff62 	bl	800ef04 <__sfmoreglue>
 800f040:	4604      	mov	r4, r0
 800f042:	6030      	str	r0, [r6, #0]
 800f044:	2800      	cmp	r0, #0
 800f046:	d1d5      	bne.n	800eff4 <__sfp+0x24>
 800f048:	f7ff ff78 	bl	800ef3c <__sfp_lock_release>
 800f04c:	230c      	movs	r3, #12
 800f04e:	603b      	str	r3, [r7, #0]
 800f050:	e7ee      	b.n	800f030 <__sfp+0x60>
 800f052:	bf00      	nop
 800f054:	0800f518 	.word	0x0800f518
 800f058:	ffff0001 	.word	0xffff0001

0800f05c <_fwalk_reent>:
 800f05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f060:	4606      	mov	r6, r0
 800f062:	4688      	mov	r8, r1
 800f064:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f068:	2700      	movs	r7, #0
 800f06a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f06e:	f1b9 0901 	subs.w	r9, r9, #1
 800f072:	d505      	bpl.n	800f080 <_fwalk_reent+0x24>
 800f074:	6824      	ldr	r4, [r4, #0]
 800f076:	2c00      	cmp	r4, #0
 800f078:	d1f7      	bne.n	800f06a <_fwalk_reent+0xe>
 800f07a:	4638      	mov	r0, r7
 800f07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f080:	89ab      	ldrh	r3, [r5, #12]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d907      	bls.n	800f096 <_fwalk_reent+0x3a>
 800f086:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f08a:	3301      	adds	r3, #1
 800f08c:	d003      	beq.n	800f096 <_fwalk_reent+0x3a>
 800f08e:	4629      	mov	r1, r5
 800f090:	4630      	mov	r0, r6
 800f092:	47c0      	blx	r8
 800f094:	4307      	orrs	r7, r0
 800f096:	3568      	adds	r5, #104	; 0x68
 800f098:	e7e9      	b.n	800f06e <_fwalk_reent+0x12>

0800f09a <__retarget_lock_init_recursive>:
 800f09a:	4770      	bx	lr

0800f09c <__retarget_lock_acquire_recursive>:
 800f09c:	4770      	bx	lr

0800f09e <__retarget_lock_release_recursive>:
 800f09e:	4770      	bx	lr

0800f0a0 <__swhatbuf_r>:
 800f0a0:	b570      	push	{r4, r5, r6, lr}
 800f0a2:	460e      	mov	r6, r1
 800f0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a8:	2900      	cmp	r1, #0
 800f0aa:	b096      	sub	sp, #88	; 0x58
 800f0ac:	4614      	mov	r4, r2
 800f0ae:	461d      	mov	r5, r3
 800f0b0:	da07      	bge.n	800f0c2 <__swhatbuf_r+0x22>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	602b      	str	r3, [r5, #0]
 800f0b6:	89b3      	ldrh	r3, [r6, #12]
 800f0b8:	061a      	lsls	r2, r3, #24
 800f0ba:	d410      	bmi.n	800f0de <__swhatbuf_r+0x3e>
 800f0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0c0:	e00e      	b.n	800f0e0 <__swhatbuf_r+0x40>
 800f0c2:	466a      	mov	r2, sp
 800f0c4:	f000 f8fa 	bl	800f2bc <_fstat_r>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	dbf2      	blt.n	800f0b2 <__swhatbuf_r+0x12>
 800f0cc:	9a01      	ldr	r2, [sp, #4]
 800f0ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0d6:	425a      	negs	r2, r3
 800f0d8:	415a      	adcs	r2, r3
 800f0da:	602a      	str	r2, [r5, #0]
 800f0dc:	e7ee      	b.n	800f0bc <__swhatbuf_r+0x1c>
 800f0de:	2340      	movs	r3, #64	; 0x40
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	b016      	add	sp, #88	; 0x58
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}

0800f0e8 <__smakebuf_r>:
 800f0e8:	898b      	ldrh	r3, [r1, #12]
 800f0ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0ec:	079d      	lsls	r5, r3, #30
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	d507      	bpl.n	800f104 <__smakebuf_r+0x1c>
 800f0f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0f8:	6023      	str	r3, [r4, #0]
 800f0fa:	6123      	str	r3, [r4, #16]
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	6163      	str	r3, [r4, #20]
 800f100:	b002      	add	sp, #8
 800f102:	bd70      	pop	{r4, r5, r6, pc}
 800f104:	ab01      	add	r3, sp, #4
 800f106:	466a      	mov	r2, sp
 800f108:	f7ff ffca 	bl	800f0a0 <__swhatbuf_r>
 800f10c:	9900      	ldr	r1, [sp, #0]
 800f10e:	4605      	mov	r5, r0
 800f110:	4630      	mov	r0, r6
 800f112:	f7ff fb23 	bl	800e75c <_malloc_r>
 800f116:	b948      	cbnz	r0, 800f12c <__smakebuf_r+0x44>
 800f118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f11c:	059a      	lsls	r2, r3, #22
 800f11e:	d4ef      	bmi.n	800f100 <__smakebuf_r+0x18>
 800f120:	f023 0303 	bic.w	r3, r3, #3
 800f124:	f043 0302 	orr.w	r3, r3, #2
 800f128:	81a3      	strh	r3, [r4, #12]
 800f12a:	e7e3      	b.n	800f0f4 <__smakebuf_r+0xc>
 800f12c:	4b0d      	ldr	r3, [pc, #52]	; (800f164 <__smakebuf_r+0x7c>)
 800f12e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	6020      	str	r0, [r4, #0]
 800f134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f138:	81a3      	strh	r3, [r4, #12]
 800f13a:	9b00      	ldr	r3, [sp, #0]
 800f13c:	6163      	str	r3, [r4, #20]
 800f13e:	9b01      	ldr	r3, [sp, #4]
 800f140:	6120      	str	r0, [r4, #16]
 800f142:	b15b      	cbz	r3, 800f15c <__smakebuf_r+0x74>
 800f144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f148:	4630      	mov	r0, r6
 800f14a:	f000 f8c9 	bl	800f2e0 <_isatty_r>
 800f14e:	b128      	cbz	r0, 800f15c <__smakebuf_r+0x74>
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	f023 0303 	bic.w	r3, r3, #3
 800f156:	f043 0301 	orr.w	r3, r3, #1
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	89a0      	ldrh	r0, [r4, #12]
 800f15e:	4305      	orrs	r5, r0
 800f160:	81a5      	strh	r5, [r4, #12]
 800f162:	e7cd      	b.n	800f100 <__smakebuf_r+0x18>
 800f164:	0800eef9 	.word	0x0800eef9

0800f168 <_raise_r>:
 800f168:	291f      	cmp	r1, #31
 800f16a:	b538      	push	{r3, r4, r5, lr}
 800f16c:	4604      	mov	r4, r0
 800f16e:	460d      	mov	r5, r1
 800f170:	d904      	bls.n	800f17c <_raise_r+0x14>
 800f172:	2316      	movs	r3, #22
 800f174:	6003      	str	r3, [r0, #0]
 800f176:	f04f 30ff 	mov.w	r0, #4294967295
 800f17a:	bd38      	pop	{r3, r4, r5, pc}
 800f17c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f17e:	b112      	cbz	r2, 800f186 <_raise_r+0x1e>
 800f180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f184:	b94b      	cbnz	r3, 800f19a <_raise_r+0x32>
 800f186:	4620      	mov	r0, r4
 800f188:	f000 f830 	bl	800f1ec <_getpid_r>
 800f18c:	462a      	mov	r2, r5
 800f18e:	4601      	mov	r1, r0
 800f190:	4620      	mov	r0, r4
 800f192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f196:	f000 b817 	b.w	800f1c8 <_kill_r>
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d00a      	beq.n	800f1b4 <_raise_r+0x4c>
 800f19e:	1c59      	adds	r1, r3, #1
 800f1a0:	d103      	bne.n	800f1aa <_raise_r+0x42>
 800f1a2:	2316      	movs	r3, #22
 800f1a4:	6003      	str	r3, [r0, #0]
 800f1a6:	2001      	movs	r0, #1
 800f1a8:	e7e7      	b.n	800f17a <_raise_r+0x12>
 800f1aa:	2400      	movs	r4, #0
 800f1ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	4798      	blx	r3
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	e7e0      	b.n	800f17a <_raise_r+0x12>

0800f1b8 <raise>:
 800f1b8:	4b02      	ldr	r3, [pc, #8]	; (800f1c4 <raise+0xc>)
 800f1ba:	4601      	mov	r1, r0
 800f1bc:	6818      	ldr	r0, [r3, #0]
 800f1be:	f7ff bfd3 	b.w	800f168 <_raise_r>
 800f1c2:	bf00      	nop
 800f1c4:	24000038 	.word	0x24000038

0800f1c8 <_kill_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4d07      	ldr	r5, [pc, #28]	; (800f1e8 <_kill_r+0x20>)
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	4611      	mov	r1, r2
 800f1d4:	602b      	str	r3, [r5, #0]
 800f1d6:	f7f4 fae3 	bl	80037a0 <_kill>
 800f1da:	1c43      	adds	r3, r0, #1
 800f1dc:	d102      	bne.n	800f1e4 <_kill_r+0x1c>
 800f1de:	682b      	ldr	r3, [r5, #0]
 800f1e0:	b103      	cbz	r3, 800f1e4 <_kill_r+0x1c>
 800f1e2:	6023      	str	r3, [r4, #0]
 800f1e4:	bd38      	pop	{r3, r4, r5, pc}
 800f1e6:	bf00      	nop
 800f1e8:	24000b1c 	.word	0x24000b1c

0800f1ec <_getpid_r>:
 800f1ec:	f7f4 bad0 	b.w	8003790 <_getpid>

0800f1f0 <__sread>:
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f8:	f000 f894 	bl	800f324 <_read_r>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	bfab      	itete	ge
 800f200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f202:	89a3      	ldrhlt	r3, [r4, #12]
 800f204:	181b      	addge	r3, r3, r0
 800f206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f20a:	bfac      	ite	ge
 800f20c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f20e:	81a3      	strhlt	r3, [r4, #12]
 800f210:	bd10      	pop	{r4, pc}

0800f212 <__swrite>:
 800f212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f216:	461f      	mov	r7, r3
 800f218:	898b      	ldrh	r3, [r1, #12]
 800f21a:	05db      	lsls	r3, r3, #23
 800f21c:	4605      	mov	r5, r0
 800f21e:	460c      	mov	r4, r1
 800f220:	4616      	mov	r6, r2
 800f222:	d505      	bpl.n	800f230 <__swrite+0x1e>
 800f224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f228:	2302      	movs	r3, #2
 800f22a:	2200      	movs	r2, #0
 800f22c:	f000 f868 	bl	800f300 <_lseek_r>
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f23a:	81a3      	strh	r3, [r4, #12]
 800f23c:	4632      	mov	r2, r6
 800f23e:	463b      	mov	r3, r7
 800f240:	4628      	mov	r0, r5
 800f242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f246:	f000 b817 	b.w	800f278 <_write_r>

0800f24a <__sseek>:
 800f24a:	b510      	push	{r4, lr}
 800f24c:	460c      	mov	r4, r1
 800f24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f252:	f000 f855 	bl	800f300 <_lseek_r>
 800f256:	1c43      	adds	r3, r0, #1
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	bf15      	itete	ne
 800f25c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f25e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f266:	81a3      	strheq	r3, [r4, #12]
 800f268:	bf18      	it	ne
 800f26a:	81a3      	strhne	r3, [r4, #12]
 800f26c:	bd10      	pop	{r4, pc}

0800f26e <__sclose>:
 800f26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f272:	f000 b813 	b.w	800f29c <_close_r>
	...

0800f278 <_write_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d07      	ldr	r5, [pc, #28]	; (800f298 <_write_r+0x20>)
 800f27c:	4604      	mov	r4, r0
 800f27e:	4608      	mov	r0, r1
 800f280:	4611      	mov	r1, r2
 800f282:	2200      	movs	r2, #0
 800f284:	602a      	str	r2, [r5, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	f7f4 fac1 	bl	800380e <_write>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d102      	bne.n	800f296 <_write_r+0x1e>
 800f290:	682b      	ldr	r3, [r5, #0]
 800f292:	b103      	cbz	r3, 800f296 <_write_r+0x1e>
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	24000b1c 	.word	0x24000b1c

0800f29c <_close_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4d06      	ldr	r5, [pc, #24]	; (800f2b8 <_close_r+0x1c>)
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	602b      	str	r3, [r5, #0]
 800f2a8:	f7f4 facd 	bl	8003846 <_close>
 800f2ac:	1c43      	adds	r3, r0, #1
 800f2ae:	d102      	bne.n	800f2b6 <_close_r+0x1a>
 800f2b0:	682b      	ldr	r3, [r5, #0]
 800f2b2:	b103      	cbz	r3, 800f2b6 <_close_r+0x1a>
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	bd38      	pop	{r3, r4, r5, pc}
 800f2b8:	24000b1c 	.word	0x24000b1c

0800f2bc <_fstat_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4d07      	ldr	r5, [pc, #28]	; (800f2dc <_fstat_r+0x20>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	602b      	str	r3, [r5, #0]
 800f2ca:	f7f4 fac8 	bl	800385e <_fstat>
 800f2ce:	1c43      	adds	r3, r0, #1
 800f2d0:	d102      	bne.n	800f2d8 <_fstat_r+0x1c>
 800f2d2:	682b      	ldr	r3, [r5, #0]
 800f2d4:	b103      	cbz	r3, 800f2d8 <_fstat_r+0x1c>
 800f2d6:	6023      	str	r3, [r4, #0]
 800f2d8:	bd38      	pop	{r3, r4, r5, pc}
 800f2da:	bf00      	nop
 800f2dc:	24000b1c 	.word	0x24000b1c

0800f2e0 <_isatty_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	4d06      	ldr	r5, [pc, #24]	; (800f2fc <_isatty_r+0x1c>)
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	602b      	str	r3, [r5, #0]
 800f2ec:	f7f4 fac7 	bl	800387e <_isatty>
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	d102      	bne.n	800f2fa <_isatty_r+0x1a>
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	b103      	cbz	r3, 800f2fa <_isatty_r+0x1a>
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	bd38      	pop	{r3, r4, r5, pc}
 800f2fc:	24000b1c 	.word	0x24000b1c

0800f300 <_lseek_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d07      	ldr	r5, [pc, #28]	; (800f320 <_lseek_r+0x20>)
 800f304:	4604      	mov	r4, r0
 800f306:	4608      	mov	r0, r1
 800f308:	4611      	mov	r1, r2
 800f30a:	2200      	movs	r2, #0
 800f30c:	602a      	str	r2, [r5, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	f7f4 fac0 	bl	8003894 <_lseek>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_lseek_r+0x1e>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_lseek_r+0x1e>
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	24000b1c 	.word	0x24000b1c

0800f324 <_read_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4d07      	ldr	r5, [pc, #28]	; (800f344 <_read_r+0x20>)
 800f328:	4604      	mov	r4, r0
 800f32a:	4608      	mov	r0, r1
 800f32c:	4611      	mov	r1, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	602a      	str	r2, [r5, #0]
 800f332:	461a      	mov	r2, r3
 800f334:	f7f4 fa4e 	bl	80037d4 <_read>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_read_r+0x1e>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_read_r+0x1e>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	24000b1c 	.word	0x24000b1c

0800f348 <_init>:
 800f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34a:	bf00      	nop
 800f34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f34e:	bc08      	pop	{r3}
 800f350:	469e      	mov	lr, r3
 800f352:	4770      	bx	lr

0800f354 <_fini>:
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	bf00      	nop
 800f358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f35a:	bc08      	pop	{r3}
 800f35c:	469e      	mov	lr, r3
 800f35e:	4770      	bx	lr
