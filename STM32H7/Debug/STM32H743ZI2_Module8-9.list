
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c090  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800c330  0800c330  0001c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c41c  0800c41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c424  0800c424  0001c424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c428  0800c428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800c42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008dc  20000078  0800c4a0  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20000954  0800c4a0  00020954  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a5f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003975  00000000  00000000  00043b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001428  00000000  00000000  00047478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001310  00000000  00000000  000488a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004392  00000000  00000000  00049bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019c2b  00000000  00000000  0004df42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167c20  00000000  00000000  00067b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf78d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d40  00000000  00000000  001cf7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000078 	.word	0x20000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c318 	.word	0x0800c318

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	0800c318 	.word	0x0800c318

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f001 ff82 	bl	8002588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f8fe 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 ff1e 	bl	80014c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 fdcc 	bl	8001228 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000690:	f000 fd7e 	bl	8001190 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000694:	f000 fa98 	bl	8000bc8 <MX_TIM2_Init>
  MX_UART4_Init();
 8000698:	f000 fd2a 	bl	80010f0 <MX_UART4_Init>
  MX_TIM4_Init();
 800069c:	f000 fb84 	bl	8000da8 <MX_TIM4_Init>
  MX_SPI3_Init();
 80006a0:	f000 f98e 	bl	80009c0 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006a4:	f000 f9e2 	bl	8000a6c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006a8:	f000 fb06 	bl	8000cb8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006ac:	f000 fbf4 	bl	8000e98 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006b0:	f000 fc7a 	bl	8000fa8 <MX_TIM15_Init>
  MX_TIM12_Init();
 80006b4:	f000 fc3e 	bl	8000f34 <MX_TIM12_Init>
  MX_CRC_Init();
 80006b8:	f000 f960 	bl	800097c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	485d      	ldr	r0, [pc, #372]	; (8000838 <main+0x1c0>)
 80006c2:	f005 f899 	bl	80057f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2102      	movs	r1, #2
 80006ca:	485c      	ldr	r0, [pc, #368]	; (800083c <main+0x1c4>)
 80006cc:	f005 f894 	bl	80057f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d6:	4858      	ldr	r0, [pc, #352]	; (8000838 <main+0x1c0>)
 80006d8:	f005 f88e 	bl	80057f8 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  HAL_DMA_Start(&hdma_memtomem_dma2_stream2, q1, q1, 1);
 80006dc:	4b58      	ldr	r3, [pc, #352]	; (8000840 <main+0x1c8>)
 80006de:	ed93 7b00 	vldr	d7, [r3]
 80006e2:	eefc 6bc7 	vcvt.u32.f64	s13, d7
 80006e6:	4b56      	ldr	r3, [pc, #344]	; (8000840 <main+0x1c8>)
 80006e8:	ed93 7b00 	vldr	d7, [r3]
 80006ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006f0:	2301      	movs	r3, #1
 80006f2:	ee17 2a90 	vmov	r2, s15
 80006f6:	ee16 1a90 	vmov	r1, s13
 80006fa:	4852      	ldr	r0, [pc, #328]	; (8000844 <main+0x1cc>)
 80006fc:	f002 fd38 	bl	8003170 <HAL_DMA_Start>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000700:	4b51      	ldr	r3, [pc, #324]	; (8000848 <main+0x1d0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b50      	ldr	r3, [pc, #320]	; (8000848 <main+0x1d0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0220 	orr.w	r2, r2, #32
 800070e:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000710:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <main+0x1d0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <main+0x1d0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800071e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000720:	2204      	movs	r2, #4
 8000722:	494a      	ldr	r1, [pc, #296]	; (800084c <main+0x1d4>)
 8000724:	4848      	ldr	r0, [pc, #288]	; (8000848 <main+0x1d0>)
 8000726:	f008 ff03 	bl	8009530 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(State_Checksum_Error)
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <main+0x1d8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00b      	beq.n	800074a <main+0xd2>
	  {
		  State_Checksum_Error = 0;
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <main+0x1d8>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_CheckSumError_Address;
 8000738:	4b46      	ldr	r3, [pc, #280]	; (8000854 <main+0x1dc>)
 800073a:	22ee      	movs	r2, #238	; 0xee
 800073c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	2201      	movs	r2, #1
 8000742:	4944      	ldr	r1, [pc, #272]	; (8000854 <main+0x1dc>)
 8000744:	4840      	ldr	r0, [pc, #256]	; (8000848 <main+0x1d0>)
 8000746:	f008 fe5d 	bl	8009404 <HAL_UART_Transmit>
	  }
	  if(State_Input_Joint_State)
 800074a:	4b43      	ldr	r3, [pc, #268]	; (8000858 <main+0x1e0>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00b      	beq.n	800076a <main+0xf2>
	  {
		  State_Input_Joint_State = 0;
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <main+0x1e0>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <main+0x1dc>)
 800075a:	22ad      	movs	r2, #173	; 0xad
 800075c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800075e:	2364      	movs	r3, #100	; 0x64
 8000760:	2201      	movs	r2, #1
 8000762:	493c      	ldr	r1, [pc, #240]	; (8000854 <main+0x1dc>)
 8000764:	4838      	ldr	r0, [pc, #224]	; (8000848 <main+0x1d0>)
 8000766:	f008 fe4d 	bl	8009404 <HAL_UART_Transmit>
	  }
	  if(State_Print_4_Joint_State)
 800076a:	4b3c      	ldr	r3, [pc, #240]	; (800085c <main+0x1e4>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d022      	beq.n	80007b8 <main+0x140>
	  {
		  State_Print_4_Joint_State = 0;
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <main+0x1e4>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
		  printf("\n%3f %3f %3f %3f\n\r", q1, q2, q3, q4);
 8000778:	4b31      	ldr	r3, [pc, #196]	; (8000840 <main+0x1c8>)
 800077a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <main+0x1e8>)
 8000780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000784:	4937      	ldr	r1, [pc, #220]	; (8000864 <main+0x1ec>)
 8000786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800078a:	4c37      	ldr	r4, [pc, #220]	; (8000868 <main+0x1f0>)
 800078c:	e9d4 4500 	ldrd	r4, r5, [r4]
 8000790:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000798:	e9cd 2300 	strd	r2, r3, [sp]
 800079c:	4642      	mov	r2, r8
 800079e:	464b      	mov	r3, r9
 80007a0:	4832      	ldr	r0, [pc, #200]	; (800086c <main+0x1f4>)
 80007a2:	f00a fe63 	bl	800b46c <iprintf>
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <main+0x1dc>)
 80007a8:	22ad      	movs	r2, #173	; 0xad
 80007aa:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	2201      	movs	r2, #1
 80007b0:	4928      	ldr	r1, [pc, #160]	; (8000854 <main+0x1dc>)
 80007b2:	4825      	ldr	r0, [pc, #148]	; (8000848 <main+0x1d0>)
 80007b4:	f008 fe26 	bl	8009404 <HAL_UART_Transmit>
	  }
	  if(State_Activate_Gripper)
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <main+0x1f8>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00b      	beq.n	80007d8 <main+0x160>
	  {
		  State_Activate_Gripper = 0;
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <main+0x1f8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <main+0x1dc>)
 80007c8:	22ad      	movs	r2, #173	; 0xad
 80007ca:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2201      	movs	r2, #1
 80007d0:	4920      	ldr	r1, [pc, #128]	; (8000854 <main+0x1dc>)
 80007d2:	481d      	ldr	r0, [pc, #116]	; (8000848 <main+0x1d0>)
 80007d4:	f008 fe16 	bl	8009404 <HAL_UART_Transmit>
	  }
	  if(State_Deactivate_Gripper)
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <main+0x1fc>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00b      	beq.n	80007f8 <main+0x180>
	  {
		  State_Deactivate_Gripper = 0;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <main+0x1fc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <main+0x1dc>)
 80007e8:	22ad      	movs	r2, #173	; 0xad
 80007ea:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	2201      	movs	r2, #1
 80007f0:	4918      	ldr	r1, [pc, #96]	; (8000854 <main+0x1dc>)
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <main+0x1d0>)
 80007f4:	f008 fe06 	bl	8009404 <HAL_UART_Transmit>
	  }
	  if(State_Set_Home)
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <main+0x200>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00b      	beq.n	8000818 <main+0x1a0>
	  {
		  State_Set_Home = 0;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <main+0x200>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0x1dc>)
 8000808:	22ad      	movs	r2, #173	; 0xad
 800080a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	2201      	movs	r2, #1
 8000810:	4910      	ldr	r1, [pc, #64]	; (8000854 <main+0x1dc>)
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <main+0x1d0>)
 8000814:	f008 fdf6 	bl	8009404 <HAL_UART_Transmit>
	  }
	  if(State_PID_Control_Timer)
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <main+0x204>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <main+0x1ae>
	  {
//		  HAL_TIM_Base_Start_IT(&htim5);
		  State_PID_Control_Timer = 0;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <main+0x204>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
	  }
	  if(State_Casade_Control_Timer)
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <main+0x208>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	f43f af7d 	beq.w	800072a <main+0xb2>
	  {
//		  HAL_TIM_Base_Start_IT(&htim12);
		  State_Casade_Control_Timer = 0;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <main+0x208>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
	  if(State_Checksum_Error)
 8000836:	e778      	b.n	800072a <main+0xb2>
 8000838:	58020400 	.word	0x58020400
 800083c:	58021000 	.word	0x58021000
 8000840:	20000630 	.word	0x20000630
 8000844:	20000798 	.word	0x20000798
 8000848:	200002d0 	.word	0x200002d0
 800084c:	2000093c 	.word	0x2000093c
 8000850:	200008b4 	.word	0x200008b4
 8000854:	20000638 	.word	0x20000638
 8000858:	200004bc 	.word	0x200004bc
 800085c:	2000063a 	.word	0x2000063a
 8000860:	200003e8 	.word	0x200003e8
 8000864:	20000620 	.word	0x20000620
 8000868:	200008b8 	.word	0x200008b8
 800086c:	0800c330 	.word	0x0800c330
 8000870:	20000938 	.word	0x20000938
 8000874:	200003e4 	.word	0x200003e4
 8000878:	20000639 	.word	0x20000639
 800087c:	20000628 	.word	0x20000628
 8000880:	20000810 	.word	0x20000810

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f00a fde2 	bl	800b45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f00a fddc 	bl	800b45c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f004 ffdb 	bl	8005860 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <SystemClock_Config+0xf0>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a30      	ldr	r2, [pc, #192]	; (8000974 <SystemClock_Config+0xf0>)
 80008b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <SystemClock_Config+0xf0>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <SystemClock_Config+0xf4>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <SystemClock_Config+0xf4>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <SystemClock_Config+0xf4>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xf0>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000904:	233c      	movs	r3, #60	; 0x3c
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800090c:	2306      	movs	r3, #6
 800090e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000914:	230c      	movs	r3, #12
 8000916:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000918:	2300      	movs	r3, #0
 800091a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4618      	mov	r0, r3
 8000926:	f004 ffd5 	bl	80058d4 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000930:	f001 f837 	bl	80019a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	233f      	movs	r3, #63	; 0x3f
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2303      	movs	r3, #3
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000940:	2308      	movs	r3, #8
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000950:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2104      	movs	r1, #4
 800095a:	4618      	mov	r0, r3
 800095c:	f005 fbca 	bl	80060f4 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000966:	f001 f81c 	bl	80019a2 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3770      	adds	r7, #112	; 0x70
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	58024800 	.word	0x58024800
 8000978:	58000400 	.word	0x58000400

0800097c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_CRC_Init+0x3c>)
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <MX_CRC_Init+0x40>)
 8000984:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_CRC_Init+0x3c>)
 8000988:	2200      	movs	r2, #0
 800098a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_CRC_Init+0x3c>)
 800098e:	2200      	movs	r2, #0
 8000990:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_CRC_Init+0x3c>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_CRC_Init+0x3c>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_CRC_Init+0x3c>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_CRC_Init+0x3c>)
 80009a6:	f001 ff9d 	bl	80028e4 <HAL_CRC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009b0:	f000 fff7 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200003c0 	.word	0x200003c0
 80009bc:	58024c00 	.word	0x58024c00

080009c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009c6:	4a28      	ldr	r2, [pc, #160]	; (8000a68 <MX_SPI3_Init+0xa8>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009da:	2203      	movs	r2, #3
 80009dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a50:	f007 fa3e 	bl	8007ed0 <HAL_SPI_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000a5a:	f000 ffa2 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000050c 	.word	0x2000050c
 8000a68:	40003c00 	.word	0x40003c00

08000a6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09a      	sub	sp, #104	; 0x68
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	222c      	movs	r2, #44	; 0x2c
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00a fcd8 	bl	800b45c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aac:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000aae:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <MX_TIM1_Init+0x158>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000ab4:	22ef      	movs	r2, #239	; 0xef
 8000ab6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b41      	ldr	r3, [pc, #260]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000abe:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000ac0:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000acc:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ad8:	4839      	ldr	r0, [pc, #228]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000ada:	f007 fb16 	bl	800810a <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ae4:	f000 ff5d 	bl	80019a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000af2:	4619      	mov	r1, r3
 8000af4:	4832      	ldr	r0, [pc, #200]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000af6:	f007 fdef 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b00:	f000 ff4f 	bl	80019a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b04:	482e      	ldr	r0, [pc, #184]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000b06:	f007 fb57 	bl	80081b8 <HAL_TIM_PWM_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b10:	f000 ff47 	bl	80019a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b24:	4619      	mov	r1, r3
 8000b26:	4826      	ldr	r0, [pc, #152]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000b28:	f008 faf8 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b32:	f000 ff36 	bl	80019a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b36:	2360      	movs	r3, #96	; 0x60
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000b3a:	f240 1339 	movw	r3, #313	; 0x139
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b58:	2204      	movs	r2, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000b5e:	f007 fcab 	bl	80084b8 <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000b68:	f000 ff1b 	bl	80019a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000ba2:	f008 fb43 	bl	800922c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000bac:	f000 fef9 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <MX_TIM1_Init+0x154>)
 8000bb2:	f001 f85d 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8000bb6:	bf00      	nop
 8000bb8:	3768      	adds	r7, #104	; 0x68
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200006b4 	.word	0x200006b4
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08e      	sub	sp, #56	; 0x38
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c04:	22ef      	movs	r2, #239	; 0xef
 8000c06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c10:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c22:	4824      	ldr	r0, [pc, #144]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c24:	f007 fa71 	bl	800810a <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f000 feb8 	bl	80019a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481d      	ldr	r0, [pc, #116]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c40:	f007 fd4a 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c4a:	f000 feaa 	bl	80019a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c4e:	4819      	ldr	r0, [pc, #100]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c50:	f007 fab2 	bl	80081b8 <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c5a:	f000 fea2 	bl	80019a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c6e:	f008 fa55 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c78:	f000 fe93 	bl	80019a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c80:	f240 1339 	movw	r3, #313	; 0x139
 8000c84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2208      	movs	r2, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000c96:	f007 fc0f 	bl	80084b8 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ca0:	f000 fe7f 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <MX_TIM2_Init+0xec>)
 8000ca6:	f000 ffe3 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3738      	adds	r7, #56	; 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000814 	.word	0x20000814

08000cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000cec:	4a2d      	ldr	r2, [pc, #180]	; (8000da4 <MX_TIM3_Init+0xec>)
 8000cee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000cf2:	22ef      	movs	r2, #239	; 0xef
 8000cf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000cfe:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000d02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d10:	4823      	ldr	r0, [pc, #140]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d12:	f007 f9fa 	bl	800810a <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d1c:	f000 fe41 	bl	80019a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d2e:	f007 fcd3 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d38:	f000 fe33 	bl	80019a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d3e:	f007 fa3b 	bl	80081b8 <HAL_TIM_PWM_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d48:	f000 fe2b 	bl	80019a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d5c:	f008 f9de 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d66:	f000 fe1c 	bl	80019a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6a:	2360      	movs	r3, #96	; 0x60
 8000d6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d6e:	f240 1339 	movw	r3, #313	; 0x139
 8000d72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d84:	f007 fb98 	bl	80084b8 <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d8e:	f000 fe08 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000d94:	f000 ff6c 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200004c0 	.word	0x200004c0
 8000da4:	40000400 	.word	0x40000400

08000da8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <MX_TIM4_Init+0xec>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000de0:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000de2:	22ef      	movs	r2, #239	; 0xef
 8000de4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000dee:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000df2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e00:	4823      	ldr	r0, [pc, #140]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000e02:	f007 f982 	bl	800810a <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e0c:	f000 fdc9 	bl	80019a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	481c      	ldr	r0, [pc, #112]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000e1e:	f007 fc5b 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e28:	f000 fdbb 	bl	80019a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000e2e:	f007 f9c3 	bl	80081b8 <HAL_TIM_PWM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e38:	f000 fdb3 	bl	80019a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000e4c:	f008 f966 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e56:	f000 fda4 	bl	80019a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5a:	2360      	movs	r3, #96	; 0x60
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000e5e:	f240 1339 	movw	r3, #313	; 0x139
 8000e62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2208      	movs	r2, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000e74:	f007 fb20 	bl	80084b8 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e7e:	f000 fd90 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM4_Init+0xe8>)
 8000e84:	f000 fef4 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000020c 	.word	0x2000020c
 8000e94:	40000800 	.word	0x40000800

08000e98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <MX_TIM5_Init+0x98>)
 8000eba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ebe:	22ef      	movs	r2, #239	; 0xef
 8000ec0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000eca:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ece:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ede:	f007 f914 	bl	800810a <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ee8:	f000 fd5b 	bl	80019a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000efa:	f007 fbed 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fd4d 	bl	80019a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000f16:	f008 f901 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f000 fd3f 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000470 	.word	0x20000470
 8000f30:	40000c00 	.word	0x40000c00

08000f34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f48:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <MX_TIM12_Init+0x70>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f4e:	22ef      	movs	r2, #239	; 0xef
 8000f50:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f5a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f5e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f6e:	f007 f8cc 	bl	800810a <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000f78:	f000 fd13 	bl	80019a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_TIM12_Init+0x6c>)
 8000f88:	f007 fba6 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000f92:	f000 fd06 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000868 	.word	0x20000868
 8000fa4:	40001800 	.word	0x40001800

08000fa8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b09a      	sub	sp, #104	; 0x68
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	222c      	movs	r2, #44	; 0x2c
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00a fa3a 	bl	800b45c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <MX_TIM15_Init+0x140>)
 8000fea:	4a40      	ldr	r2, [pc, #256]	; (80010ec <MX_TIM15_Init+0x144>)
 8000fec:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <MX_TIM15_Init+0x140>)
 8000ff0:	22ef      	movs	r2, #239	; 0xef
 8000ff2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <MX_TIM15_Init+0x140>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <MX_TIM15_Init+0x140>)
 8000ffc:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001000:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_TIM15_Init+0x140>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <MX_TIM15_Init+0x140>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_TIM15_Init+0x140>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001014:	4834      	ldr	r0, [pc, #208]	; (80010e8 <MX_TIM15_Init+0x140>)
 8001016:	f007 f878 	bl	800810a <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001020:	f000 fcbf 	bl	80019a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800102a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800102e:	4619      	mov	r1, r3
 8001030:	482d      	ldr	r0, [pc, #180]	; (80010e8 <MX_TIM15_Init+0x140>)
 8001032:	f007 fb51 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800103c:	f000 fcb1 	bl	80019a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001040:	4829      	ldr	r0, [pc, #164]	; (80010e8 <MX_TIM15_Init+0x140>)
 8001042:	f007 f8b9 	bl	80081b8 <HAL_TIM_PWM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800104c:	f000 fca9 	bl	80019a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105c:	4619      	mov	r1, r3
 800105e:	4822      	ldr	r0, [pc, #136]	; (80010e8 <MX_TIM15_Init+0x140>)
 8001060:	f008 f85c 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800106a:	f000 fc9a 	bl	80019a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2360      	movs	r3, #96	; 0x60
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001072:	f240 1339 	movw	r3, #313	; 0x139
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107c:	2300      	movs	r3, #0
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800108c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001090:	2204      	movs	r2, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_TIM15_Init+0x140>)
 8001096:	f007 fa0f 	bl	80084b8 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80010a0:	f000 fc7f 	bl	80019a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <MX_TIM15_Init+0x140>)
 80010cc:	f008 f8ae 	bl	800922c <HAL_TIMEx_ConfigBreakDeadTime>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80010d6:	f000 fc64 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <MX_TIM15_Init+0x140>)
 80010dc:	f000 fdc8 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3768      	adds	r7, #104	; 0x68
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000368 	.word	0x20000368
 80010ec:	40014000 	.word	0x40014000

080010f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <MX_UART4_Init+0x94>)
 80010f6:	4a24      	ldr	r2, [pc, #144]	; (8001188 <MX_UART4_Init+0x98>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_UART4_Init+0x94>)
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <MX_UART4_Init+0x9c>)
 80010fe:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <MX_UART4_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_UART4_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_UART4_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_UART4_Init+0x94>)
 8001114:	220c      	movs	r2, #12
 8001116:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_UART4_Init+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_UART4_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_UART4_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_UART4_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_UART4_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001136:	2300      	movs	r3, #0
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <MX_UART4_Init+0x94>)
 800113e:	f009 ffd7 	bl	800b0f0 <HAL_RS485Ex_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001148:	f000 fc2b 	bl	80019a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_UART4_Init+0x94>)
 8001150:	f00a f88f 	bl	800b272 <HAL_UARTEx_SetTxFifoThreshold>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 fc22 	bl	80019a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <MX_UART4_Init+0x94>)
 8001162:	f00a f8c4 	bl	800b2ee <HAL_UARTEx_SetRxFifoThreshold>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 800116c:	f000 fc19 	bl	80019a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_UART4_Init+0x94>)
 8001172:	f00a f845 	bl	800b200 <HAL_UARTEx_DisableFifoMode>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 800117c:	f000 fc11 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000700 	.word	0x20000700
 8001188:	40004c00 	.word	0x40004c00
 800118c:	001e8480 	.word	0x001e8480

08001190 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <MX_USART3_UART_Init+0x90>)
 8001196:	4a23      	ldr	r2, [pc, #140]	; (8001224 <MX_USART3_UART_Init+0x94>)
 8001198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <MX_USART3_UART_Init+0x90>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d8:	4811      	ldr	r0, [pc, #68]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011da:	f008 f8c3 	bl	8009364 <HAL_UART_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011e4:	f000 fbdd 	bl	80019a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011ec:	f00a f841 	bl	800b272 <HAL_UARTEx_SetTxFifoThreshold>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011f6:	f000 fbd4 	bl	80019a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <MX_USART3_UART_Init+0x90>)
 80011fe:	f00a f876 	bl	800b2ee <HAL_UARTEx_SetRxFifoThreshold>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001208:	f000 fbcb 	bl	80019a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_USART3_UART_Init+0x90>)
 800120e:	f009 fff7 	bl	800b200 <HAL_UARTEx_DisableFifoMode>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001218:	f000 fbc3 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002d0 	.word	0x200002d0
 8001224:	40004800 	.word	0x40004800

08001228 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	4b9b      	ldr	r3, [pc, #620]	; (800149c <MX_DMA_Init+0x274>)
 8001230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001234:	4a99      	ldr	r2, [pc, #612]	; (800149c <MX_DMA_Init+0x274>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800123e:	4b97      	ldr	r3, [pc, #604]	; (800149c <MX_DMA_Init+0x274>)
 8001240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <MX_DMA_Init+0x274>)
 800124e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001252:	4a92      	ldr	r2, [pc, #584]	; (800149c <MX_DMA_Init+0x274>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125c:	4b8f      	ldr	r3, [pc, #572]	; (800149c <MX_DMA_Init+0x274>)
 800125e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream6 on DMA2_Stream6 */
  hdma_memtomem_dma2_stream6.Instance = DMA2_Stream6;
 800126a:	4b8d      	ldr	r3, [pc, #564]	; (80014a0 <MX_DMA_Init+0x278>)
 800126c:	4a8d      	ldr	r2, [pc, #564]	; (80014a4 <MX_DMA_Init+0x27c>)
 800126e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream6.Init.Request = DMA_REQUEST_MEM2MEM;
 8001270:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <MX_DMA_Init+0x278>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream6.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001276:	4b8a      	ldr	r3, [pc, #552]	; (80014a0 <MX_DMA_Init+0x278>)
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream6.Init.PeriphInc = DMA_PINC_ENABLE;
 800127c:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <MX_DMA_Init+0x278>)
 800127e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001282:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream6.Init.MemInc = DMA_MINC_ENABLE;
 8001284:	4b86      	ldr	r3, [pc, #536]	; (80014a0 <MX_DMA_Init+0x278>)
 8001286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream6.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800128c:	4b84      	ldr	r3, [pc, #528]	; (80014a0 <MX_DMA_Init+0x278>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream6.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001292:	4b83      	ldr	r3, [pc, #524]	; (80014a0 <MX_DMA_Init+0x278>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream6.Init.Mode = DMA_NORMAL;
 8001298:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <MX_DMA_Init+0x278>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream6.Init.Priority = DMA_PRIORITY_LOW;
 800129e:	4b80      	ldr	r3, [pc, #512]	; (80014a0 <MX_DMA_Init+0x278>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream6.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012a4:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <MX_DMA_Init+0x278>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream6.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <MX_DMA_Init+0x278>)
 80012ac:	2203      	movs	r2, #3
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream6.Init.MemBurst = DMA_MBURST_SINGLE;
 80012b0:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <MX_DMA_Init+0x278>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream6.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <MX_DMA_Init+0x278>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream6) != HAL_OK)
 80012bc:	4878      	ldr	r0, [pc, #480]	; (80014a0 <MX_DMA_Init+0x278>)
 80012be:	f001 fbfb 	bl	8002ab8 <HAL_DMA_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 80012c8:	f000 fb6b 	bl	80019a2 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 80012cc:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <MX_DMA_Init+0x280>)
 80012ce:	4a77      	ldr	r2, [pc, #476]	; (80014ac <MX_DMA_Init+0x284>)
 80012d0:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 80012d2:	4b75      	ldr	r3, [pc, #468]	; (80014a8 <MX_DMA_Init+0x280>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012d8:	4b73      	ldr	r3, [pc, #460]	; (80014a8 <MX_DMA_Init+0x280>)
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <MX_DMA_Init+0x280>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b70      	ldr	r3, [pc, #448]	; (80014a8 <MX_DMA_Init+0x280>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ec:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ee:	4b6e      	ldr	r3, [pc, #440]	; (80014a8 <MX_DMA_Init+0x280>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f4:	4b6c      	ldr	r3, [pc, #432]	; (80014a8 <MX_DMA_Init+0x280>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 80012fa:	4b6b      	ldr	r3, [pc, #428]	; (80014a8 <MX_DMA_Init+0x280>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 8001300:	4b69      	ldr	r3, [pc, #420]	; (80014a8 <MX_DMA_Init+0x280>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001306:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <MX_DMA_Init+0x280>)
 8001308:	2204      	movs	r2, #4
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <MX_DMA_Init+0x280>)
 800130e:	2203      	movs	r2, #3
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001312:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <MX_DMA_Init+0x280>)
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <MX_DMA_Init+0x280>)
 800131a:	2200      	movs	r2, #0
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 800131e:	4862      	ldr	r0, [pc, #392]	; (80014a8 <MX_DMA_Init+0x280>)
 8001320:	f001 fbca 	bl	8002ab8 <HAL_DMA_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 800132a:	f000 fb3a 	bl	80019a2 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 800132e:	4b60      	ldr	r3, [pc, #384]	; (80014b0 <MX_DMA_Init+0x288>)
 8001330:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <MX_DMA_Init+0x28c>)
 8001332:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001334:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <MX_DMA_Init+0x288>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <MX_DMA_Init+0x288>)
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001340:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <MX_DMA_Init+0x288>)
 8001342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001346:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <MX_DMA_Init+0x288>)
 800134a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001350:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <MX_DMA_Init+0x288>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001356:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <MX_DMA_Init+0x288>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <MX_DMA_Init+0x288>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <MX_DMA_Init+0x288>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <MX_DMA_Init+0x288>)
 800136a:	2204      	movs	r2, #4
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800136e:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <MX_DMA_Init+0x288>)
 8001370:	2203      	movs	r2, #3
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001374:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <MX_DMA_Init+0x288>)
 8001376:	2200      	movs	r2, #0
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <MX_DMA_Init+0x288>)
 800137c:	2200      	movs	r2, #0
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8001380:	484b      	ldr	r0, [pc, #300]	; (80014b0 <MX_DMA_Init+0x288>)
 8001382:	f001 fb99 	bl	8002ab8 <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 800138c:	f000 fb09 	bl	80019a2 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 8001390:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <MX_DMA_Init+0x290>)
 8001392:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <MX_DMA_Init+0x294>)
 8001394:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 8001396:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <MX_DMA_Init+0x290>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800139c:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <MX_DMA_Init+0x290>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <MX_DMA_Init+0x290>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 80013aa:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <MX_DMA_Init+0x290>)
 80013ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b0:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <MX_DMA_Init+0x290>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b8:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <MX_DMA_Init+0x290>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <MX_DMA_Init+0x290>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <MX_DMA_Init+0x290>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <MX_DMA_Init+0x290>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013d0:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <MX_DMA_Init+0x290>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <MX_DMA_Init+0x290>)
 80013d8:	2200      	movs	r2, #0
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013dc:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <MX_DMA_Init+0x290>)
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 80013e2:	4835      	ldr	r0, [pc, #212]	; (80014b8 <MX_DMA_Init+0x290>)
 80013e4:	f001 fb68 	bl	8002ab8 <HAL_DMA_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 80013ee:	f000 fad8 	bl	80019a2 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <MX_DMA_Init+0x298>)
 80013f4:	4a33      	ldr	r2, [pc, #204]	; (80014c4 <MX_DMA_Init+0x29c>)
 80013f6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <MX_DMA_Init+0x298>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80013fe:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <MX_DMA_Init+0x298>)
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <MX_DMA_Init+0x298>)
 8001406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <MX_DMA_Init+0x298>)
 800140e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001412:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_DMA_Init+0x298>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <MX_DMA_Init+0x298>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <MX_DMA_Init+0x298>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_DMA_Init+0x298>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <MX_DMA_Init+0x298>)
 800142e:	2204      	movs	r2, #4
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_DMA_Init+0x298>)
 8001434:	2203      	movs	r2, #3
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_DMA_Init+0x298>)
 800143a:	2200      	movs	r2, #0
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_DMA_Init+0x298>)
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 8001444:	481e      	ldr	r0, [pc, #120]	; (80014c0 <MX_DMA_Init+0x298>)
 8001446:	f001 fb37 	bl	8002ab8 <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 8001450:	f000 faa7 	bl	80019a2 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	200c      	movs	r0, #12
 800145a:	f001 fa0e 	bl	800287a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800145e:	200c      	movs	r0, #12
 8001460:	f001 fa25 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	200d      	movs	r0, #13
 800146a:	f001 fa06 	bl	800287a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800146e:	200d      	movs	r0, #13
 8001470:	f001 fa1d 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2038      	movs	r0, #56	; 0x38
 800147a:	f001 f9fe 	bl	800287a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800147e:	2038      	movs	r0, #56	; 0x38
 8001480:	f001 fa15 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2039      	movs	r0, #57	; 0x39
 800148a:	f001 f9f6 	bl	800287a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800148e:	2039      	movs	r0, #57	; 0x39
 8001490:	f001 fa0d 	bl	80028ae <HAL_NVIC_EnableIRQ>

}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	58024400 	.word	0x58024400
 80014a0:	2000063c 	.word	0x2000063c
 80014a4:	400204a0 	.word	0x400204a0
 80014a8:	20000798 	.word	0x20000798
 80014ac:	40020440 	.word	0x40020440
 80014b0:	20000594 	.word	0x20000594
 80014b4:	40020458 	.word	0x40020458
 80014b8:	200000a4 	.word	0x200000a4
 80014bc:	40020470 	.word	0x40020470
 80014c0:	2000011c 	.word	0x2000011c
 80014c4:	40020488 	.word	0x40020488

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <MX_GPIO_Init+0x204>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	4a79      	ldr	r2, [pc, #484]	; (80016cc <MX_GPIO_Init+0x204>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ee:	4b77      	ldr	r3, [pc, #476]	; (80016cc <MX_GPIO_Init+0x204>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fc:	4b73      	ldr	r3, [pc, #460]	; (80016cc <MX_GPIO_Init+0x204>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001502:	4a72      	ldr	r2, [pc, #456]	; (80016cc <MX_GPIO_Init+0x204>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150c:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <MX_GPIO_Init+0x204>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	4b6c      	ldr	r3, [pc, #432]	; (80016cc <MX_GPIO_Init+0x204>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4a6a      	ldr	r2, [pc, #424]	; (80016cc <MX_GPIO_Init+0x204>)
 8001522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4b68      	ldr	r3, [pc, #416]	; (80016cc <MX_GPIO_Init+0x204>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <MX_GPIO_Init+0x204>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	4a63      	ldr	r2, [pc, #396]	; (80016cc <MX_GPIO_Init+0x204>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001548:	4b60      	ldr	r3, [pc, #384]	; (80016cc <MX_GPIO_Init+0x204>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <MX_GPIO_Init+0x204>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	4a5b      	ldr	r2, [pc, #364]	; (80016cc <MX_GPIO_Init+0x204>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001566:	4b59      	ldr	r3, [pc, #356]	; (80016cc <MX_GPIO_Init+0x204>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <MX_GPIO_Init+0x204>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	4a54      	ldr	r2, [pc, #336]	; (80016cc <MX_GPIO_Init+0x204>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001584:	4b51      	ldr	r3, [pc, #324]	; (80016cc <MX_GPIO_Init+0x204>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001592:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <MX_GPIO_Init+0x204>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a4c      	ldr	r2, [pc, #304]	; (80016cc <MX_GPIO_Init+0x204>)
 800159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <MX_GPIO_Init+0x204>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80015b0:	2200      	movs	r2, #0
 80015b2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80015b6:	4846      	ldr	r0, [pc, #280]	; (80016d0 <MX_GPIO_Init+0x208>)
 80015b8:	f004 f91e 	bl	80057f8 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f24c 0102 	movw	r1, #49154	; 0xc002
 80015c2:	4844      	ldr	r0, [pc, #272]	; (80016d4 <MX_GPIO_Init+0x20c>)
 80015c4:	f004 f918 	bl	80057f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	4842      	ldr	r0, [pc, #264]	; (80016d8 <MX_GPIO_Init+0x210>)
 80015d0:	f004 f912 	bl	80057f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015da:	4840      	ldr	r0, [pc, #256]	; (80016dc <MX_GPIO_Init+0x214>)
 80015dc:	f004 f90c 	bl	80057f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80015e0:	f644 2321 	movw	r3, #18977	; 0x4a21
 80015e4:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4835      	ldr	r0, [pc, #212]	; (80016d0 <MX_GPIO_Init+0x208>)
 80015fa:	f003 ff4d 	bl	8005498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 80015fe:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <MX_GPIO_Init+0x218>)
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4830      	ldr	r0, [pc, #192]	; (80016d4 <MX_GPIO_Init+0x20c>)
 8001614:	f003 ff40 	bl	8005498 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001618:	f24c 0302 	movw	r3, #49154	; 0xc002
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4828      	ldr	r0, [pc, #160]	; (80016d4 <MX_GPIO_Init+0x20c>)
 8001632:	f003 ff31 	bl	8005498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4822      	ldr	r0, [pc, #136]	; (80016d8 <MX_GPIO_Init+0x210>)
 8001650:	f003 ff22 	bl	8005498 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	481b      	ldr	r0, [pc, #108]	; (80016dc <MX_GPIO_Init+0x214>)
 800166e:	f003 ff13 	bl	8005498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_GPIO_Init+0x218>)
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4817      	ldr	r0, [pc, #92]	; (80016e4 <MX_GPIO_Init+0x21c>)
 8001688:	f003 ff06 	bl	8005498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 800168c:	23c0      	movs	r3, #192	; 0xc0
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_GPIO_Init+0x218>)
 8001692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_GPIO_Init+0x208>)
 80016a0:	f003 fefa 	bl	8005498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2103      	movs	r1, #3
 80016a8:	2017      	movs	r0, #23
 80016aa:	f001 f8e6 	bl	800287a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ae:	2017      	movs	r0, #23
 80016b0:	f001 f8fd 	bl	80028ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2103      	movs	r1, #3
 80016b8:	2028      	movs	r0, #40	; 0x28
 80016ba:	f001 f8de 	bl	800287a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016be:	2028      	movs	r0, #40	; 0x28
 80016c0:	f001 f8f5 	bl	80028ae <HAL_NVIC_EnableIRQ>

}
 80016c4:	bf00      	nop
 80016c6:	3730      	adds	r7, #48	; 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58020400 	.word	0x58020400
 80016d4:	58021000 	.word	0x58021000
 80016d8:	58020c00 	.word	0x58020c00
 80016dc:	58020800 	.word	0x58020800
 80016e0:	11110000 	.word	0x11110000
 80016e4:	58021800 	.word	0x58021800

080016e8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80016f0:	1d39      	adds	r1, r7, #4
 80016f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f6:	2201      	movs	r2, #1
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <__io_putchar+0x20>)
 80016fa:	f007 fe83 	bl	8009404 <HAL_UART_Transmit>

return ch;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002d0 	.word	0x200002d0

0800170c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a83      	ldr	r2, [pc, #524]	; (8001924 <HAL_UART_RxCpltCallback+0x218>)
 8001718:	4293      	cmp	r3, r2
 800171a:	f040 80ff 	bne.w	800191c <HAL_UART_RxCpltCallback+0x210>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 800171e:	4b82      	ldr	r3, [pc, #520]	; (8001928 <HAL_UART_RxCpltCallback+0x21c>)
 8001720:	22ac      	movs	r2, #172	; 0xac
 8001722:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001724:	2364      	movs	r3, #100	; 0x64
 8001726:	2201      	movs	r2, #1
 8001728:	497f      	ldr	r1, [pc, #508]	; (8001928 <HAL_UART_RxCpltCallback+0x21c>)
 800172a:	487e      	ldr	r0, [pc, #504]	; (8001924 <HAL_UART_RxCpltCallback+0x218>)
 800172c:	f007 fe6a 	bl	8009404 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	487d      	ldr	r0, [pc, #500]	; (800192c <HAL_UART_RxCpltCallback+0x220>)
 8001736:	f004 f85f 	bl	80057f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2102      	movs	r1, #2
 800173e:	487c      	ldr	r0, [pc, #496]	; (8001930 <HAL_UART_RxCpltCallback+0x224>)
 8001740:	f004 f85a 	bl	80057f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174a:	4878      	ldr	r0, [pc, #480]	; (800192c <HAL_UART_RxCpltCallback+0x220>)
 800174c:	f004 f854 	bl	80057f8 <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 8001750:	4b78      	ldr	r3, [pc, #480]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	b2db      	uxtb	r3, r3
 800175a:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 800175c:	4b75      	ldr	r3, [pc, #468]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 800175e:	78db      	ldrb	r3, [r3, #3]
 8001760:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001766:	2400      	movs	r4, #0
 8001768:	e006      	b.n	8001778 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 800176a:	4b72      	ldr	r3, [pc, #456]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 800176c:	5d1b      	ldrb	r3, [r3, r4]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001776:	3401      	adds	r4, #1
 8001778:	2c02      	cmp	r4, #2
 800177a:	ddf6      	ble.n	800176a <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43db      	mvns	r3, r3
 8001780:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 80ad 	bne.w	80018ec <HAL_UART_RxCpltCallback+0x1e0>
		{
			switch(num_mode)
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	2b0e      	cmp	r3, #14
 800179a:	f200 8095 	bhi.w	80018c8 <HAL_UART_RxCpltCallback+0x1bc>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <HAL_UART_RxCpltCallback+0x98>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080018c9 	.word	0x080018c9
 80017a8:	080018c9 	.word	0x080018c9
 80017ac:	080018c9 	.word	0x080018c9
 80017b0:	080018c9 	.word	0x080018c9
 80017b4:	080018c9 	.word	0x080018c9
 80017b8:	080017e1 	.word	0x080017e1
 80017bc:	08001811 	.word	0x08001811
 80017c0:	08001841 	.word	0x08001841
 80017c4:	08001871 	.word	0x08001871
 80017c8:	080018a1 	.word	0x080018a1
 80017cc:	080018a9 	.word	0x080018a9
 80017d0:	080018b1 	.word	0x080018b1
 80017d4:	080018b9 	.word	0x080018b9
 80017d8:	080018c1 	.word	0x080018c1
 80017dc:	080018c9 	.word	0x080018c9
			{
				case 6:		// q1 Mode
				{
					q1 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 80017e0:	4b54      	ldr	r3, [pc, #336]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001802:	4b4d      	ldr	r3, [pc, #308]	; (8001938 <HAL_UART_RxCpltCallback+0x22c>)
 8001804:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_UART_RxCpltCallback+0x230>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
					break;
 800180e:	e05c      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				}
				case 7:		// q2 Mode
				{
					q2 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001810:	4b48      	ldr	r3, [pc, #288]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b29b      	uxth	r3, r3
 8001818:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b45      	ldr	r3, [pc, #276]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	b21b      	sxth	r3, r3
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001832:	4b43      	ldr	r3, [pc, #268]	; (8001940 <HAL_UART_RxCpltCallback+0x234>)
 8001834:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_UART_RxCpltCallback+0x230>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
					break;
 800183e:	e044      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				}
				case 8:		// q3 Mode
				{
					q3 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001840:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001842:	785b      	ldrb	r3, [r3, #1]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b29b      	uxth	r3, r3
 8001848:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4413      	add	r3, r2
 8001856:	b29b      	uxth	r3, r3
 8001858:	b21b      	sxth	r3, r3
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_UART_RxCpltCallback+0x238>)
 8001864:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_UART_RxCpltCallback+0x230>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
					break;
 800186e:	e02c      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				}
				case 9:		// q4 Mode
				{
					q4 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b29b      	uxth	r3, r3
 8001878:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001880:	789b      	ldrb	r3, [r3, #2]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_UART_RxCpltCallback+0x23c>)
 8001894:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_UART_RxCpltCallback+0x230>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
					break;
 800189e:	e014      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_UART_RxCpltCallback+0x240>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
					break;
 80018a6:	e010      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_UART_RxCpltCallback+0x244>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
					break;
 80018ae:	e00c      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_UART_RxCpltCallback+0x248>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
					break;
 80018b6:	e008      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HAL_UART_RxCpltCallback+0x24c>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
					break;
 80018be:	e004      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_UART_RxCpltCallback+0x250>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
					break;
 80018c6:	e000      	b.n	80018ca <HAL_UART_RxCpltCallback+0x1be>
				{
					break;
				}
				default:
				{
					break;
 80018c8:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2101      	movs	r1, #1
 80018ce:	4817      	ldr	r0, [pc, #92]	; (800192c <HAL_UART_RxCpltCallback+0x220>)
 80018d0:	f003 ff92 	bl	80057f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2102      	movs	r1, #2
 80018d8:	4815      	ldr	r0, [pc, #84]	; (8001930 <HAL_UART_RxCpltCallback+0x224>)
 80018da:	f003 ff8d 	bl	80057f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	4811      	ldr	r0, [pc, #68]	; (800192c <HAL_UART_RxCpltCallback+0x220>)
 80018e6:	f003 ff87 	bl	80057f8 <HAL_GPIO_WritePin>
 80018ea:	e012      	b.n	8001912 <HAL_UART_RxCpltCallback+0x206>
		}
		else
		{
			  State_Checksum_Error = 1;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_UART_RxCpltCallback+0x254>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2101      	movs	r1, #1
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <HAL_UART_RxCpltCallback+0x220>)
 80018f8:	f003 ff7e 	bl	80057f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2102      	movs	r1, #2
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_UART_RxCpltCallback+0x224>)
 8001902:	f003 ff79 	bl	80057f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <HAL_UART_RxCpltCallback+0x220>)
 800190e:	f003 ff73 	bl	80057f8 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001912:	2204      	movs	r2, #4
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <HAL_UART_RxCpltCallback+0x228>)
 8001916:	4803      	ldr	r0, [pc, #12]	; (8001924 <HAL_UART_RxCpltCallback+0x218>)
 8001918:	f007 fe0a 	bl	8009530 <HAL_UART_Receive_IT>
	}
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	200002d0 	.word	0x200002d0
 8001928:	20000638 	.word	0x20000638
 800192c:	58020400 	.word	0x58020400
 8001930:	58021000 	.word	0x58021000
 8001934:	2000093c 	.word	0x2000093c
 8001938:	20000630 	.word	0x20000630
 800193c:	200004bc 	.word	0x200004bc
 8001940:	200003e8 	.word	0x200003e8
 8001944:	20000620 	.word	0x20000620
 8001948:	200008b8 	.word	0x200008b8
 800194c:	20000639 	.word	0x20000639
 8001950:	2000063a 	.word	0x2000063a
 8001954:	200000a0 	.word	0x200000a0
 8001958:	20000938 	.word	0x20000938
 800195c:	200003e4 	.word	0x200003e4
 8001960:	200008b4 	.word	0x200008b4

08001964 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]


}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a6:	b672      	cpsid	i
}
 80019a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019aa:	e7fe      	b.n	80019aa <Error_Handler+0x8>

080019ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_MspInit+0x30>)
 80019b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019b8:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_MspInit+0x30>)
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_MspInit+0x30>)
 80019c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	58024400 	.word	0x58024400

080019e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_CRC_MspInit+0x3c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_CRC_MspInit+0x40>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_CRC_MspInit+0x40>)
 80019fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_CRC_MspInit+0x40>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	58024c00 	.word	0x58024c00
 8001a20:	58024400 	.word	0x58024400

08001a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b8      	sub	sp, #224	; 0xe0
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	22bc      	movs	r2, #188	; 0xbc
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f009 fd09 	bl	800b45c <memset>
  if(hspi->Instance==SPI3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a25      	ldr	r2, [pc, #148]	; (8001ae4 <HAL_SPI_MspInit+0xc0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d142      	bne.n	8001ada <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 fed2 	bl	800680c <HAL_RCCEx_PeriphCLKConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a6e:	f7ff ff98 	bl	80019a2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001aae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ac8:	2306      	movs	r3, #6
 8001aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <HAL_SPI_MspInit+0xc8>)
 8001ad6:	f003 fcdf 	bl	8005498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	37e0      	adds	r7, #224	; 0xe0
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40003c00 	.word	0x40003c00
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	58020800 	.word	0x58020800

08001af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_TIM_Base_MspInit+0x164>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10f      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b02:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b08:	4a53      	ldr	r2, [pc, #332]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b12:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b20:	e094      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2a:	d10f      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2c:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b32:	4a49      	ldr	r2, [pc, #292]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	6a3b      	ldr	r3, [r7, #32]
}
 8001b4a:	e07f      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a42      	ldr	r2, [pc, #264]	; (8001c5c <HAL_TIM_Base_MspInit+0x16c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10f      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b56:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5c:	4a3e      	ldr	r2, [pc, #248]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b66:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	69fb      	ldr	r3, [r7, #28]
}
 8001b74:	e06a      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a39      	ldr	r2, [pc, #228]	; (8001c60 <HAL_TIM_Base_MspInit+0x170>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b86:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b90:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
}
 8001b9e:	e055      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <HAL_TIM_Base_MspInit+0x174>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d117      	bne.n	8001bda <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb0:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2032      	movs	r0, #50	; 0x32
 8001bce:	f000 fe54 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bd2:	2032      	movs	r0, #50	; 0x32
 8001bd4:	f000 fe6b 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 8001bd8:	e038      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_TIM_Base_MspInit+0x178>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d117      	bne.n	8001c14 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	202b      	movs	r0, #43	; 0x2b
 8001c08:	f000 fe37 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001c0c:	202b      	movs	r0, #43	; 0x2b
 8001c0e:	f000 fe4e 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 8001c12:	e01b      	b.n	8001c4c <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_TIM_Base_MspInit+0x17c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d116      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c24:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_TIM_Base_MspInit+0x168>)
 8001c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2074      	movs	r0, #116	; 0x74
 8001c42:	f000 fe1a 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001c46:	2074      	movs	r0, #116	; 0x74
 8001c48:	f000 fe31 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40010000 	.word	0x40010000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40000800 	.word	0x40000800
 8001c64:	40000c00 	.word	0x40000c00
 8001c68:	40001800 	.word	0x40001800
 8001c6c:	40014000 	.word	0x40014000

08001c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a5e      	ldr	r2, [pc, #376]	; (8001e08 <HAL_TIM_MspPostInit+0x198>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d120      	bne.n	8001cd4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c92:	4b5e      	ldr	r3, [pc, #376]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	4a5c      	ldr	r2, [pc, #368]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca2:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001cb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4850      	ldr	r0, [pc, #320]	; (8001e10 <HAL_TIM_MspPostInit+0x1a0>)
 8001cce:	f003 fbe3 	bl	8005498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001cd2:	e094      	b.n	8001dfe <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cdc:	d120      	bne.n	8001d20 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4a49      	ldr	r2, [pc, #292]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	483e      	ldr	r0, [pc, #248]	; (8001e14 <HAL_TIM_MspPostInit+0x1a4>)
 8001d1a:	f003 fbbd 	bl	8005498 <HAL_GPIO_Init>
}
 8001d1e:	e06e      	b.n	8001dfe <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_TIM_MspPostInit+0x1a8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11f      	bne.n	8001d6a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	4a36      	ldr	r2, [pc, #216]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001d48:	2340      	movs	r3, #64	; 0x40
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	482e      	ldr	r0, [pc, #184]	; (8001e1c <HAL_TIM_MspPostInit+0x1ac>)
 8001d64:	f003 fb98 	bl	8005498 <HAL_GPIO_Init>
}
 8001d68:	e049      	b.n	8001dfe <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2c      	ldr	r2, [pc, #176]	; (8001e20 <HAL_TIM_MspPostInit+0x1b0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d120      	bne.n	8001db6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <HAL_TIM_MspPostInit+0x1a4>)
 8001db0:	f003 fb72 	bl	8005498 <HAL_GPIO_Init>
}
 8001db4:	e023      	b.n	8001dfe <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1a      	ldr	r2, [pc, #104]	; (8001e24 <HAL_TIM_MspPostInit+0x1b4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d11e      	bne.n	8001dfe <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_TIM_MspPostInit+0x19c>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001dee:	2304      	movs	r3, #4
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_TIM_MspPostInit+0x1a0>)
 8001dfa:	f003 fb4d 	bl	8005498 <HAL_GPIO_Init>
}
 8001dfe:	bf00      	nop
 8001e00:	3730      	adds	r7, #48	; 0x30
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	58021000 	.word	0x58021000
 8001e14:	58020400 	.word	0x58020400
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	58020000 	.word	0x58020000
 8001e20:	40000800 	.word	0x40000800
 8001e24:	40014000 	.word	0x40014000

08001e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0bc      	sub	sp, #240	; 0xf0
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	22bc      	movs	r2, #188	; 0xbc
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f009 fb07 	bl	800b45c <memset>
  if(huart->Instance==UART4)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a67      	ldr	r2, [pc, #412]	; (8001ff0 <HAL_UART_MspInit+0x1c8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	f040 80db 	bne.w	8002010 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fccf 	bl	800680c <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001e74:	f7ff fd95 	bl	80019a2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e78:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e88:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9c:	4a55      	ldr	r2, [pc, #340]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea6:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eba:	4a4e      	ldr	r2, [pc, #312]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_UART_MspInit+0x1cc>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001eec:	2308      	movs	r3, #8
 8001eee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	483f      	ldr	r0, [pc, #252]	; (8001ff8 <HAL_UART_MspInit+0x1d0>)
 8001efa:	f003 facd 	bl	8005498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001efe:	2303      	movs	r3, #3
 8001f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f16:	2308      	movs	r3, #8
 8001f18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f20:	4619      	mov	r1, r3
 8001f22:	4836      	ldr	r0, [pc, #216]	; (8001ffc <HAL_UART_MspInit+0x1d4>)
 8001f24:	f003 fab8 	bl	8005498 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f2a:	4a36      	ldr	r2, [pc, #216]	; (8002004 <HAL_UART_MspInit+0x1dc>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f66:	4826      	ldr	r0, [pc, #152]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f68:	f000 fda6 	bl	8002ab8 <HAL_DMA_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001f72:	f7ff fd16 	bl	80019a2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f7a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_UART_MspInit+0x1d8>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <HAL_UART_MspInit+0x1e4>)
 8001f86:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001fc2:	f000 fd79 	bl	8002ab8 <HAL_DMA_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001fcc:	f7ff fce9 	bl	80019a2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001fd4:	679a      	str	r2, [r3, #120]	; 0x78
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_UART_MspInit+0x1e0>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2034      	movs	r0, #52	; 0x34
 8001fe2:	f000 fc4a 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001fe6:	2034      	movs	r0, #52	; 0x34
 8001fe8:	f000 fc61 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fec:	e0bd      	b.n	800216a <HAL_UART_MspInit+0x342>
 8001fee:	bf00      	nop
 8001ff0:	40004c00 	.word	0x40004c00
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020000 	.word	0x58020000
 8001ffc:	58020c00 	.word	0x58020c00
 8002000:	20000194 	.word	0x20000194
 8002004:	40020410 	.word	0x40020410
 8002008:	200008c0 	.word	0x200008c0
 800200c:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a57      	ldr	r2, [pc, #348]	; (8002174 <HAL_UART_MspInit+0x34c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	f040 80a7 	bne.w	800216a <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	4618      	mov	r0, r3
 800202c:	f004 fbee 	bl	800680c <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_UART_MspInit+0x212>
      Error_Handler();
 8002036:	f7ff fcb4 	bl	80019a2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_UART_MspInit+0x350>)
 800203c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002040:	4a4d      	ldr	r2, [pc, #308]	; (8002178 <HAL_UART_MspInit+0x350>)
 8002042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002046:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_UART_MspInit+0x350>)
 800204c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002058:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_UART_MspInit+0x350>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205e:	4a46      	ldr	r2, [pc, #280]	; (8002178 <HAL_UART_MspInit+0x350>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_UART_MspInit+0x350>)
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002090:	2307      	movs	r3, #7
 8002092:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002096:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800209a:	4619      	mov	r1, r3
 800209c:	4837      	ldr	r0, [pc, #220]	; (800217c <HAL_UART_MspInit+0x354>)
 800209e:	f003 f9fb 	bl	8005498 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020a4:	4a37      	ldr	r2, [pc, #220]	; (8002184 <HAL_UART_MspInit+0x35c>)
 80020a6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020aa:	222d      	movs	r2, #45	; 0x2d
 80020ac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020da:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020e2:	4827      	ldr	r0, [pc, #156]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020e4:	f000 fce8 	bl	8002ab8 <HAL_DMA_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 80020ee:	f7ff fc58 	bl	80019a2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a22      	ldr	r2, [pc, #136]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80020f8:	4a21      	ldr	r2, [pc, #132]	; (8002180 <HAL_UART_MspInit+0x358>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_UART_MspInit+0x364>)
 8002102:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002106:	222e      	movs	r2, #46	; 0x2e
 8002108:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_UART_MspInit+0x360>)
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_UART_MspInit+0x360>)
 800212c:	2200      	movs	r2, #0
 800212e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002136:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_UART_MspInit+0x360>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800213e:	4812      	ldr	r0, [pc, #72]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002140:	f000 fcba 	bl	8002ab8 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_UART_MspInit+0x326>
      Error_Handler();
 800214a:	f7ff fc2a 	bl	80019a2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002152:	679a      	str	r2, [r3, #120]	; 0x78
 8002154:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <HAL_UART_MspInit+0x360>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2027      	movs	r0, #39	; 0x27
 8002160:	f000 fb8b 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002164:	2027      	movs	r0, #39	; 0x27
 8002166:	f000 fba2 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	37f0      	adds	r7, #240	; 0xf0
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40004800 	.word	0x40004800
 8002178:	58024400 	.word	0x58024400
 800217c:	58020c00 	.word	0x58020c00
 8002180:	20000258 	.word	0x20000258
 8002184:	40020028 	.word	0x40020028
 8002188:	200003f8 	.word	0x200003f8
 800218c:	40020040 	.word	0x40020040

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <NMI_Handler+0x4>

08002196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <HardFault_Handler+0x4>

0800219c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <MemManage_Handler+0x4>

080021a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <UsageFault_Handler+0x4>

080021ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021dc:	f000 fa46 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <DMA1_Stream1_IRQHandler+0x10>)
 80021ea:	f001 fe43 	bl	8003e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000258 	.word	0x20000258

080021f8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA1_Stream2_IRQHandler+0x10>)
 80021fe:	f001 fe39 	bl	8003e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200003f8 	.word	0x200003f8

0800220c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002210:	2040      	movs	r0, #64	; 0x40
 8002212:	f003 fb0a 	bl	800582a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002216:	2080      	movs	r0, #128	; 0x80
 8002218:	f003 fb07 	bl	800582a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <USART3_IRQHandler+0x10>)
 8002226:	f007 f9c9 	bl	80095bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200002d0 	.word	0x200002d0

08002234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002238:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800223c:	f003 faf5 	bl	800582a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002240:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002244:	f003 faf1 	bl	800582a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002248:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800224c:	f003 faed 	bl	800582a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002250:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002254:	f003 fae9 	bl	800582a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002262:	f006 f80a 	bl	800827a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000868 	.word	0x20000868

08002270 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <TIM5_IRQHandler+0x10>)
 8002276:	f006 f800 	bl	800827a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000470 	.word	0x20000470

08002284 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <UART4_IRQHandler+0x10>)
 800228a:	f007 f997 	bl	80095bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000700 	.word	0x20000700

08002298 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA2_Stream0_IRQHandler+0x10>)
 800229e:	f001 fde9 	bl	8003e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000194 	.word	0x20000194

080022ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <DMA2_Stream1_IRQHandler+0x10>)
 80022b2:	f001 fddf 	bl	8003e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200008c0 	.word	0x200008c0

080022c0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM15_IRQHandler+0x10>)
 80022c6:	f005 ffd8 	bl	800827a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000368 	.word	0x20000368

080022d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
	}

return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e009      	b.n	8002334 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f9dd 	bl	80016e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf1      	blt.n	8002320 <_write+0x12>
	}
	return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:

int _close(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
	return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e0:	f009 f812 	bl	800b408 <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20020000 	.word	0x20020000
 8002410:	00000400 	.word	0x00000400
 8002414:	20000094 	.word	0x20000094
 8002418:	20000958 	.word	0x20000958

0800241c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002420:	4b39      	ldr	r3, [pc, #228]	; (8002508 <SystemInit+0xec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a38      	ldr	r2, [pc, #224]	; (8002508 <SystemInit+0xec>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <SystemInit+0xf0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2b06      	cmp	r3, #6
 800243a:	d807      	bhi.n	800244c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <SystemInit+0xf0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 030f 	bic.w	r3, r3, #15
 8002444:	4a31      	ldr	r2, [pc, #196]	; (800250c <SystemInit+0xf0>)
 8002446:	f043 0307 	orr.w	r3, r3, #7
 800244a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800244c:	4b30      	ldr	r3, [pc, #192]	; (8002510 <SystemInit+0xf4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <SystemInit+0xf4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <SystemInit+0xf4>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <SystemInit+0xf4>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	492b      	ldr	r1, [pc, #172]	; (8002510 <SystemInit+0xf4>)
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <SystemInit+0xf8>)
 8002466:	4013      	ands	r3, r2
 8002468:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <SystemInit+0xf0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <SystemInit+0xf0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 030f 	bic.w	r3, r3, #15
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <SystemInit+0xf0>)
 8002480:	f043 0307 	orr.w	r3, r3, #7
 8002484:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <SystemInit+0xf4>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <SystemInit+0xf4>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <SystemInit+0xf4>)
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <SystemInit+0xf4>)
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <SystemInit+0xfc>)
 800249c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <SystemInit+0xf4>)
 80024a0:	4a1e      	ldr	r2, [pc, #120]	; (800251c <SystemInit+0x100>)
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <SystemInit+0xf4>)
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <SystemInit+0x104>)
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <SystemInit+0xf4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <SystemInit+0xf4>)
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <SystemInit+0x104>)
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <SystemInit+0xf4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <SystemInit+0xf4>)
 80024be:	4a18      	ldr	r2, [pc, #96]	; (8002520 <SystemInit+0x104>)
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <SystemInit+0xf4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <SystemInit+0xf4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a10      	ldr	r2, [pc, #64]	; (8002510 <SystemInit+0xf4>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <SystemInit+0xf4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <SystemInit+0x108>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <SystemInit+0x10c>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e6:	d202      	bcs.n	80024ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <SystemInit+0x110>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <SystemInit+0x114>)
 80024f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SystemInit+0xec>)
 80024f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00
 800250c:	52002000 	.word	0x52002000
 8002510:	58024400 	.word	0x58024400
 8002514:	eaf6ed7f 	.word	0xeaf6ed7f
 8002518:	02020200 	.word	0x02020200
 800251c:	01ff0000 	.word	0x01ff0000
 8002520:	01010280 	.word	0x01010280
 8002524:	5c001000 	.word	0x5c001000
 8002528:	ffff0000 	.word	0xffff0000
 800252c:	51008108 	.word	0x51008108
 8002530:	52004000 	.word	0x52004000

08002534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800256c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002538:	f7ff ff70 	bl	800241c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	; (8002580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002562:	f008 ff57 	bl	800b414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002566:	f7fe f887 	bl	8000678 <main>
  bx  lr
 800256a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800256c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002578:	0800c42c 	.word	0x0800c42c
  ldr r2, =_sbss
 800257c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002580:	20000954 	.word	0x20000954

08002584 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC3_IRQHandler>
	...

08002588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800258e:	2003      	movs	r0, #3
 8002590:	f000 f968 	bl	8002864 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002594:	f003 ff64 	bl	8006460 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_Init+0x68>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	4913      	ldr	r1, [pc, #76]	; (80025f4 <HAL_Init+0x6c>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_Init+0x68>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_Init+0x6c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_Init+0x70>)
 80025ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_Init+0x74>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d2:	2000      	movs	r0, #0
 80025d4:	f000 f814 	bl	8002600 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e002      	b.n	80025e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025e2:	f7ff f9e3 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58024400 	.word	0x58024400
 80025f4:	0800c344 	.word	0x0800c344
 80025f8:	20000004 	.word	0x20000004
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_InitTick+0x60>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e021      	b.n	8002658 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_InitTick+0x64>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_InitTick+0x60>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f94d 	bl	80028ca <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f000 f917 	bl	800287a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_InitTick+0x68>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000000c 	.word	0x2000000c
 8002664:	20000000 	.word	0x20000000
 8002668:	20000008 	.word	0x20000008

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	2000000c 	.word	0x2000000c
 8002690:	20000940 	.word	0x20000940

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000940 	.word	0x20000940

080026ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetREVID+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0c1b      	lsrs	r3, r3, #16
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	5c001000 	.word	0x5c001000

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <__NVIC_SetPriorityGrouping+0x40>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <__NVIC_SetPriorityGrouping+0x40>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00
 8002708:	05fa0000 	.word	0x05fa0000

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <__NVIC_EnableIRQ+0x38>)
 8002742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f1c3 0307 	rsb	r3, r3, #7
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf28      	it	cs
 80027d6:	2304      	movcs	r3, #4
 80027d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3304      	adds	r3, #4
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d902      	bls.n	80027e8 <NVIC_EncodePriority+0x30>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	e000      	b.n	80027ea <NVIC_EncodePriority+0x32>
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43d9      	mvns	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	4313      	orrs	r3, r2
         );
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002830:	d301      	bcc.n	8002836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2301      	movs	r3, #1
 8002834:	e00f      	b.n	8002856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <SysTick_Config+0x40>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283e:	210f      	movs	r1, #15
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f7ff ff8e 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SysTick_Config+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <SysTick_Config+0x40>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010

08002864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff29 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002888:	f7ff ff40 	bl	800270c <__NVIC_GetPriorityGrouping>
 800288c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff90 	bl	80027b8 <NVIC_EncodePriority>
 8002898:	4602      	mov	r2, r0
 800289a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5f 	bl	8002764 <__NVIC_SetPriority>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff33 	bl	8002728 <__NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffa4 	bl	8002820 <SysTick_Config>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e054      	b.n	80029a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7f5b      	ldrb	r3, [r3, #29]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff f86a 	bl	80019e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	791b      	ldrb	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_CRC_Init+0xc4>)
 8002920:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0218 	bic.w	r2, r2, #24
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	e00c      	b.n	800294e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	461a      	mov	r2, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f834 	bl	80029ac <HAL_CRCEx_Polynomial_Set>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e028      	b.n	80029a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	795b      	ldrb	r3, [r3, #5]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f04f 32ff 	mov.w	r2, #4294967295
 800295e:	611a      	str	r2, [r3, #16]
 8002960:	e004      	b.n	800296c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6912      	ldr	r2, [r2, #16]
 800296a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	04c11db7 	.word	0x04c11db7

080029ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80029bc:	231f      	movs	r3, #31
 80029be:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80029c0:	bf00      	nop
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	613a      	str	r2, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d009      	beq.n	80029e0 <HAL_CRCEx_Polynomial_Set+0x34>
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_CRCEx_Polynomial_Set+0x16>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b18      	cmp	r3, #24
 80029e4:	d846      	bhi.n	8002a74 <HAL_CRCEx_Polynomial_Set+0xc8>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <HAL_CRCEx_Polynomial_Set+0x40>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	08002a7b 	.word	0x08002a7b
 80029f0:	08002a75 	.word	0x08002a75
 80029f4:	08002a75 	.word	0x08002a75
 80029f8:	08002a75 	.word	0x08002a75
 80029fc:	08002a75 	.word	0x08002a75
 8002a00:	08002a75 	.word	0x08002a75
 8002a04:	08002a75 	.word	0x08002a75
 8002a08:	08002a75 	.word	0x08002a75
 8002a0c:	08002a69 	.word	0x08002a69
 8002a10:	08002a75 	.word	0x08002a75
 8002a14:	08002a75 	.word	0x08002a75
 8002a18:	08002a75 	.word	0x08002a75
 8002a1c:	08002a75 	.word	0x08002a75
 8002a20:	08002a75 	.word	0x08002a75
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a75 	.word	0x08002a75
 8002a2c:	08002a5d 	.word	0x08002a5d
 8002a30:	08002a75 	.word	0x08002a75
 8002a34:	08002a75 	.word	0x08002a75
 8002a38:	08002a75 	.word	0x08002a75
 8002a3c:	08002a75 	.word	0x08002a75
 8002a40:	08002a75 	.word	0x08002a75
 8002a44:	08002a75 	.word	0x08002a75
 8002a48:	08002a75 	.word	0x08002a75
 8002a4c:	08002a51 	.word	0x08002a51
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d913      	bls.n	8002a7e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a5a:	e010      	b.n	8002a7e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	d90f      	bls.n	8002a82 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a66:	e00c      	b.n	8002a82 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d90b      	bls.n	8002a86 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a72:	e008      	b.n	8002a86 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
      break;
 8002a78:	e006      	b.n	8002a88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a86:	bf00      	nop
  }
  if (status == HAL_OK)
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 0118 	bic.w	r1, r3, #24
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff fde8 	bl	8002694 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e316      	b.n	80030fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a66      	ldr	r2, [pc, #408]	; (8002c70 <HAL_DMA_Init+0x1b8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04a      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a65      	ldr	r2, [pc, #404]	; (8002c74 <HAL_DMA_Init+0x1bc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d045      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_DMA_Init+0x1c0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d040      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a62      	ldr	r2, [pc, #392]	; (8002c7c <HAL_DMA_Init+0x1c4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d03b      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <HAL_DMA_Init+0x1c8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d036      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5f      	ldr	r2, [pc, #380]	; (8002c84 <HAL_DMA_Init+0x1cc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5d      	ldr	r2, [pc, #372]	; (8002c88 <HAL_DMA_Init+0x1d0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02c      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_DMA_Init+0x1d4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d027      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5a      	ldr	r2, [pc, #360]	; (8002c90 <HAL_DMA_Init+0x1d8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d022      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a59      	ldr	r2, [pc, #356]	; (8002c94 <HAL_DMA_Init+0x1dc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01d      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <HAL_DMA_Init+0x1e0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d018      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <HAL_DMA_Init+0x1e4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a54      	ldr	r2, [pc, #336]	; (8002ca0 <HAL_DMA_Init+0x1e8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00e      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a53      	ldr	r2, [pc, #332]	; (8002ca4 <HAL_DMA_Init+0x1ec>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a51      	ldr	r2, [pc, #324]	; (8002ca8 <HAL_DMA_Init+0x1f0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Init+0xb8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a50      	ldr	r2, [pc, #320]	; (8002cac <HAL_DMA_Init+0x1f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Init+0xbc>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_DMA_Init+0xbe>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 813b 	beq.w	8002df2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a37      	ldr	r2, [pc, #220]	; (8002c70 <HAL_DMA_Init+0x1b8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d04a      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <HAL_DMA_Init+0x1bc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d045      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_DMA_Init+0x1c0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d040      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a33      	ldr	r2, [pc, #204]	; (8002c7c <HAL_DMA_Init+0x1c4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d03b      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_DMA_Init+0x1c8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d036      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <HAL_DMA_Init+0x1cc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d031      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <HAL_DMA_Init+0x1d0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02c      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <HAL_DMA_Init+0x1d4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d027      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2b      	ldr	r2, [pc, #172]	; (8002c90 <HAL_DMA_Init+0x1d8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <HAL_DMA_Init+0x1dc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d01d      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <HAL_DMA_Init+0x1e0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_DMA_Init+0x1e4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <HAL_DMA_Init+0x1e8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a24      	ldr	r2, [pc, #144]	; (8002ca4 <HAL_DMA_Init+0x1ec>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <HAL_DMA_Init+0x1f0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_Init+0x174>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a21      	ldr	r2, [pc, #132]	; (8002cac <HAL_DMA_Init+0x1f4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <HAL_DMA_Init+0x186>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e007      	b.n	8002c4e <HAL_DMA_Init+0x196>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c4e:	e02f      	b.n	8002cb0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c50:	f7ff fd20 	bl	8002694 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d928      	bls.n	8002cb0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2203      	movs	r2, #3
 8002c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e246      	b.n	80030fe <HAL_DMA_Init+0x646>
 8002c70:	40020010 	.word	0x40020010
 8002c74:	40020028 	.word	0x40020028
 8002c78:	40020040 	.word	0x40020040
 8002c7c:	40020058 	.word	0x40020058
 8002c80:	40020070 	.word	0x40020070
 8002c84:	40020088 	.word	0x40020088
 8002c88:	400200a0 	.word	0x400200a0
 8002c8c:	400200b8 	.word	0x400200b8
 8002c90:	40020410 	.word	0x40020410
 8002c94:	40020428 	.word	0x40020428
 8002c98:	40020440 	.word	0x40020440
 8002c9c:	40020458 	.word	0x40020458
 8002ca0:	40020470 	.word	0x40020470
 8002ca4:	40020488 	.word	0x40020488
 8002ca8:	400204a0 	.word	0x400204a0
 8002cac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1c8      	bne.n	8002c50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4b83      	ldr	r3, [pc, #524]	; (8002ed8 <HAL_DMA_Init+0x420>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002cd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d107      	bne.n	8002d14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d14:	4b71      	ldr	r3, [pc, #452]	; (8002edc <HAL_DMA_Init+0x424>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b71      	ldr	r3, [pc, #452]	; (8002ee0 <HAL_DMA_Init+0x428>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d20:	d328      	bcc.n	8002d74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b28      	cmp	r3, #40	; 0x28
 8002d28:	d903      	bls.n	8002d32 <HAL_DMA_Init+0x27a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d30:	d917      	bls.n	8002d62 <HAL_DMA_Init+0x2aa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b3e      	cmp	r3, #62	; 0x3e
 8002d38:	d903      	bls.n	8002d42 <HAL_DMA_Init+0x28a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b42      	cmp	r3, #66	; 0x42
 8002d40:	d90f      	bls.n	8002d62 <HAL_DMA_Init+0x2aa>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b46      	cmp	r3, #70	; 0x46
 8002d48:	d903      	bls.n	8002d52 <HAL_DMA_Init+0x29a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b48      	cmp	r3, #72	; 0x48
 8002d50:	d907      	bls.n	8002d62 <HAL_DMA_Init+0x2aa>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b4e      	cmp	r3, #78	; 0x4e
 8002d58:	d905      	bls.n	8002d66 <HAL_DMA_Init+0x2ae>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b52      	cmp	r3, #82	; 0x52
 8002d60:	d801      	bhi.n	8002d66 <HAL_DMA_Init+0x2ae>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_DMA_Init+0x2b0>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d117      	bne.n	8002dce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f002 f9e7 	bl	8005184 <DMA_CheckFifoParam>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e197      	b.n	80030fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f002 f922 	bl	8005020 <DMA_CalcBaseAndBitshift>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	223f      	movs	r2, #63	; 0x3f
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	e0cd      	b.n	8002f8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <HAL_DMA_Init+0x42c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMA_Init+0x38a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a39      	ldr	r2, [pc, #228]	; (8002ee8 <HAL_DMA_Init+0x430>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_Init+0x38a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_DMA_Init+0x434>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_Init+0x38a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a36      	ldr	r2, [pc, #216]	; (8002ef0 <HAL_DMA_Init+0x438>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_DMA_Init+0x38a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <HAL_DMA_Init+0x43c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Init+0x38a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <HAL_DMA_Init+0x440>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_DMA_Init+0x38a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a32      	ldr	r2, [pc, #200]	; (8002efc <HAL_DMA_Init+0x444>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_DMA_Init+0x38a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <HAL_DMA_Init+0x448>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Init+0x38e>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_DMA_Init+0x390>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8097 	beq.w	8002f7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <HAL_DMA_Init+0x42c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d021      	beq.n	8002e9c <HAL_DMA_Init+0x3e4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_DMA_Init+0x430>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01c      	beq.n	8002e9c <HAL_DMA_Init+0x3e4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_DMA_Init+0x434>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d017      	beq.n	8002e9c <HAL_DMA_Init+0x3e4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_DMA_Init+0x438>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d012      	beq.n	8002e9c <HAL_DMA_Init+0x3e4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_DMA_Init+0x43c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00d      	beq.n	8002e9c <HAL_DMA_Init+0x3e4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_DMA_Init+0x440>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d008      	beq.n	8002e9c <HAL_DMA_Init+0x3e4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_DMA_Init+0x444>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <HAL_DMA_Init+0x3e4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_DMA_Init+0x448>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_DMA_Init+0x44c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d020      	beq.n	8002f08 <HAL_DMA_Init+0x450>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d102      	bne.n	8002ed4 <HAL_DMA_Init+0x41c>
 8002ece:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ed2:	e01a      	b.n	8002f0a <HAL_DMA_Init+0x452>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e018      	b.n	8002f0a <HAL_DMA_Init+0x452>
 8002ed8:	fe10803f 	.word	0xfe10803f
 8002edc:	5c001000 	.word	0x5c001000
 8002ee0:	ffff0000 	.word	0xffff0000
 8002ee4:	58025408 	.word	0x58025408
 8002ee8:	5802541c 	.word	0x5802541c
 8002eec:	58025430 	.word	0x58025430
 8002ef0:	58025444 	.word	0x58025444
 8002ef4:	58025458 	.word	0x58025458
 8002ef8:	5802546c 	.word	0x5802546c
 8002efc:	58025480 	.word	0x58025480
 8002f00:	58025494 	.word	0x58025494
 8002f04:	fffe000f 	.word	0xfffe000f
 8002f08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68d2      	ldr	r2, [r2, #12]
 8002f0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b6e      	ldr	r3, [pc, #440]	; (8003108 <HAL_DMA_Init+0x650>)
 8002f50:	4413      	add	r3, r2
 8002f52:	4a6e      	ldr	r2, [pc, #440]	; (800310c <HAL_DMA_Init+0x654>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	009a      	lsls	r2, r3, #2
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f002 f85d 	bl	8005020 <DMA_CalcBaseAndBitshift>
 8002f66:	4603      	mov	r3, r0
 8002f68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e008      	b.n	8002f8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2203      	movs	r2, #3
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0b7      	b.n	80030fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5f      	ldr	r2, [pc, #380]	; (8003110 <HAL_DMA_Init+0x658>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d072      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5d      	ldr	r2, [pc, #372]	; (8003114 <HAL_DMA_Init+0x65c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d06d      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5c      	ldr	r2, [pc, #368]	; (8003118 <HAL_DMA_Init+0x660>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d068      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5a      	ldr	r2, [pc, #360]	; (800311c <HAL_DMA_Init+0x664>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d063      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a59      	ldr	r2, [pc, #356]	; (8003120 <HAL_DMA_Init+0x668>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d05e      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a57      	ldr	r2, [pc, #348]	; (8003124 <HAL_DMA_Init+0x66c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d059      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a56      	ldr	r2, [pc, #344]	; (8003128 <HAL_DMA_Init+0x670>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d054      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <HAL_DMA_Init+0x674>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d04f      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a53      	ldr	r2, [pc, #332]	; (8003130 <HAL_DMA_Init+0x678>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d04a      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a51      	ldr	r2, [pc, #324]	; (8003134 <HAL_DMA_Init+0x67c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d045      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a50      	ldr	r2, [pc, #320]	; (8003138 <HAL_DMA_Init+0x680>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d040      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a4e      	ldr	r2, [pc, #312]	; (800313c <HAL_DMA_Init+0x684>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d03b      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a4d      	ldr	r2, [pc, #308]	; (8003140 <HAL_DMA_Init+0x688>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d036      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_DMA_Init+0x68c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d031      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_DMA_Init+0x690>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d02c      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a48      	ldr	r2, [pc, #288]	; (800314c <HAL_DMA_Init+0x694>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d027      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a47      	ldr	r2, [pc, #284]	; (8003150 <HAL_DMA_Init+0x698>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a45      	ldr	r2, [pc, #276]	; (8003154 <HAL_DMA_Init+0x69c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01d      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a44      	ldr	r2, [pc, #272]	; (8003158 <HAL_DMA_Init+0x6a0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a42      	ldr	r2, [pc, #264]	; (800315c <HAL_DMA_Init+0x6a4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a41      	ldr	r2, [pc, #260]	; (8003160 <HAL_DMA_Init+0x6a8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a3f      	ldr	r2, [pc, #252]	; (8003164 <HAL_DMA_Init+0x6ac>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a3e      	ldr	r2, [pc, #248]	; (8003168 <HAL_DMA_Init+0x6b0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_DMA_Init+0x5c6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3c      	ldr	r2, [pc, #240]	; (800316c <HAL_DMA_Init+0x6b4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_DMA_Init+0x5ca>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_DMA_Init+0x5cc>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d032      	beq.n	80030ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f002 f8f7 	bl	800527c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d102      	bne.n	800309c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <HAL_DMA_Init+0x624>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d80c      	bhi.n	80030dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f002 f974 	bl	80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e008      	b.n	80030ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	a7fdabf8 	.word	0xa7fdabf8
 800310c:	cccccccd 	.word	0xcccccccd
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494

08003170 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0ec      	b.n	8003366 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_DMA_Start+0x2a>
 8003196:	2302      	movs	r3, #2
 8003198:	e0e5      	b.n	8003366 <HAL_DMA_Start+0x1f6>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 80d0 	bne.w	8003350 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6b      	ldr	r2, [pc, #428]	; (8003370 <HAL_DMA_Start+0x200>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04a      	beq.n	800325e <HAL_DMA_Start+0xee>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a69      	ldr	r2, [pc, #420]	; (8003374 <HAL_DMA_Start+0x204>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d045      	beq.n	800325e <HAL_DMA_Start+0xee>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a68      	ldr	r2, [pc, #416]	; (8003378 <HAL_DMA_Start+0x208>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d040      	beq.n	800325e <HAL_DMA_Start+0xee>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a66      	ldr	r2, [pc, #408]	; (800337c <HAL_DMA_Start+0x20c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d03b      	beq.n	800325e <HAL_DMA_Start+0xee>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_DMA_Start+0x210>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d036      	beq.n	800325e <HAL_DMA_Start+0xee>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a63      	ldr	r2, [pc, #396]	; (8003384 <HAL_DMA_Start+0x214>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d031      	beq.n	800325e <HAL_DMA_Start+0xee>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a62      	ldr	r2, [pc, #392]	; (8003388 <HAL_DMA_Start+0x218>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d02c      	beq.n	800325e <HAL_DMA_Start+0xee>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a60      	ldr	r2, [pc, #384]	; (800338c <HAL_DMA_Start+0x21c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d027      	beq.n	800325e <HAL_DMA_Start+0xee>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a5f      	ldr	r2, [pc, #380]	; (8003390 <HAL_DMA_Start+0x220>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_DMA_Start+0xee>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_DMA_Start+0x224>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01d      	beq.n	800325e <HAL_DMA_Start+0xee>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_DMA_Start+0x228>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_DMA_Start+0xee>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5a      	ldr	r2, [pc, #360]	; (800339c <HAL_DMA_Start+0x22c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_DMA_Start+0xee>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a59      	ldr	r2, [pc, #356]	; (80033a0 <HAL_DMA_Start+0x230>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_DMA_Start+0xee>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a57      	ldr	r2, [pc, #348]	; (80033a4 <HAL_DMA_Start+0x234>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_DMA_Start+0xee>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <HAL_DMA_Start+0x238>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_DMA_Start+0xee>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a54      	ldr	r2, [pc, #336]	; (80033ac <HAL_DMA_Start+0x23c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d108      	bne.n	8003270 <HAL_DMA_Start+0x100>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e007      	b.n	8003280 <HAL_DMA_Start+0x110>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f001 fd1e 	bl	8004cc8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a37      	ldr	r2, [pc, #220]	; (8003370 <HAL_DMA_Start+0x200>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04a      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a36      	ldr	r2, [pc, #216]	; (8003374 <HAL_DMA_Start+0x204>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d045      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a34      	ldr	r2, [pc, #208]	; (8003378 <HAL_DMA_Start+0x208>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d040      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a33      	ldr	r2, [pc, #204]	; (800337c <HAL_DMA_Start+0x20c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d03b      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a31      	ldr	r2, [pc, #196]	; (8003380 <HAL_DMA_Start+0x210>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d036      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a30      	ldr	r2, [pc, #192]	; (8003384 <HAL_DMA_Start+0x214>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d031      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2e      	ldr	r2, [pc, #184]	; (8003388 <HAL_DMA_Start+0x218>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02c      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2d      	ldr	r2, [pc, #180]	; (800338c <HAL_DMA_Start+0x21c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d027      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_DMA_Start+0x220>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <HAL_DMA_Start+0x224>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a28      	ldr	r2, [pc, #160]	; (8003398 <HAL_DMA_Start+0x228>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a27      	ldr	r2, [pc, #156]	; (800339c <HAL_DMA_Start+0x22c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <HAL_DMA_Start+0x230>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_DMA_Start+0x234>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_DMA_Start+0x238>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_DMA_Start+0x1bc>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_DMA_Start+0x23c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <HAL_DMA_Start+0x1ce>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e012      	b.n	8003364 <HAL_DMA_Start+0x1f4>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e009      	b.n	8003364 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800335e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003364:	7dfb      	ldrb	r3, [r7, #23]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40020010 	.word	0x40020010
 8003374:	40020028 	.word	0x40020028
 8003378:	40020040 	.word	0x40020040
 800337c:	40020058 	.word	0x40020058
 8003380:	40020070 	.word	0x40020070
 8003384:	40020088 	.word	0x40020088
 8003388:	400200a0 	.word	0x400200a0
 800338c:	400200b8 	.word	0x400200b8
 8003390:	40020410 	.word	0x40020410
 8003394:	40020428 	.word	0x40020428
 8003398:	40020440 	.word	0x40020440
 800339c:	40020458 	.word	0x40020458
 80033a0:	40020470 	.word	0x40020470
 80033a4:	40020488 	.word	0x40020488
 80033a8:	400204a0 	.word	0x400204a0
 80033ac:	400204b8 	.word	0x400204b8

080033b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff f96c 	bl	8002694 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e2dc      	b.n	8003982 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e2cd      	b.n	8003982 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <HAL_DMA_Abort+0x214>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a74      	ldr	r2, [pc, #464]	; (80035c8 <HAL_DMA_Abort+0x218>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a73      	ldr	r2, [pc, #460]	; (80035cc <HAL_DMA_Abort+0x21c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a71      	ldr	r2, [pc, #452]	; (80035d0 <HAL_DMA_Abort+0x220>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a70      	ldr	r2, [pc, #448]	; (80035d4 <HAL_DMA_Abort+0x224>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6e      	ldr	r2, [pc, #440]	; (80035d8 <HAL_DMA_Abort+0x228>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6d      	ldr	r2, [pc, #436]	; (80035dc <HAL_DMA_Abort+0x22c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6b      	ldr	r2, [pc, #428]	; (80035e0 <HAL_DMA_Abort+0x230>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_DMA_Abort+0x234>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_DMA_Abort+0x238>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <HAL_DMA_Abort+0x23c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_DMA_Abort+0x240>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a64      	ldr	r2, [pc, #400]	; (80035f4 <HAL_DMA_Abort+0x244>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a62      	ldr	r2, [pc, #392]	; (80035f8 <HAL_DMA_Abort+0x248>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a61      	ldr	r2, [pc, #388]	; (80035fc <HAL_DMA_Abort+0x24c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5f      	ldr	r2, [pc, #380]	; (8003600 <HAL_DMA_Abort+0x250>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_DMA_Abort+0xda>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_DMA_Abort+0xdc>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 021e 	bic.w	r2, r2, #30
 800349e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e00a      	b.n	80034ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 020e 	bic.w	r2, r2, #14
 80034c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a3c      	ldr	r2, [pc, #240]	; (80035c4 <HAL_DMA_Abort+0x214>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d072      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3a      	ldr	r2, [pc, #232]	; (80035c8 <HAL_DMA_Abort+0x218>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d06d      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_DMA_Abort+0x21c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d068      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <HAL_DMA_Abort+0x220>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d063      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a36      	ldr	r2, [pc, #216]	; (80035d4 <HAL_DMA_Abort+0x224>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d05e      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a34      	ldr	r2, [pc, #208]	; (80035d8 <HAL_DMA_Abort+0x228>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d059      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a33      	ldr	r2, [pc, #204]	; (80035dc <HAL_DMA_Abort+0x22c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d054      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <HAL_DMA_Abort+0x230>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d04f      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <HAL_DMA_Abort+0x234>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d04a      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <HAL_DMA_Abort+0x238>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d045      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <HAL_DMA_Abort+0x23c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d040      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <HAL_DMA_Abort+0x240>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d03b      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_DMA_Abort+0x244>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d036      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <HAL_DMA_Abort+0x248>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d031      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_DMA_Abort+0x24c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d02c      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <HAL_DMA_Abort+0x250>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d027      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a24      	ldr	r2, [pc, #144]	; (8003604 <HAL_DMA_Abort+0x254>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_DMA_Abort+0x258>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01d      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a21      	ldr	r2, [pc, #132]	; (800360c <HAL_DMA_Abort+0x25c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_DMA_Abort+0x260>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_DMA_Abort+0x264>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_DMA_Abort+0x268>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_DMA_Abort+0x26c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_DMA_Abort+0x270>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d132      	bne.n	8003624 <HAL_DMA_Abort+0x274>
 80035be:	2301      	movs	r3, #1
 80035c0:	e031      	b.n	8003626 <HAL_DMA_Abort+0x276>
 80035c2:	bf00      	nop
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
 8003604:	58025408 	.word	0x58025408
 8003608:	5802541c 	.word	0x5802541c
 800360c:	58025430 	.word	0x58025430
 8003610:	58025444 	.word	0x58025444
 8003614:	58025458 	.word	0x58025458
 8003618:	5802546c 	.word	0x5802546c
 800361c:	58025480 	.word	0x58025480
 8003620:	58025494 	.word	0x58025494
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6d      	ldr	r2, [pc, #436]	; (80037f4 <HAL_DMA_Abort+0x444>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d04a      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6b      	ldr	r2, [pc, #428]	; (80037f8 <HAL_DMA_Abort+0x448>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d045      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6a      	ldr	r2, [pc, #424]	; (80037fc <HAL_DMA_Abort+0x44c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d040      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a68      	ldr	r2, [pc, #416]	; (8003800 <HAL_DMA_Abort+0x450>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d03b      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a67      	ldr	r2, [pc, #412]	; (8003804 <HAL_DMA_Abort+0x454>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d036      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a65      	ldr	r2, [pc, #404]	; (8003808 <HAL_DMA_Abort+0x458>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d031      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a64      	ldr	r2, [pc, #400]	; (800380c <HAL_DMA_Abort+0x45c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d02c      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a62      	ldr	r2, [pc, #392]	; (8003810 <HAL_DMA_Abort+0x460>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d027      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a61      	ldr	r2, [pc, #388]	; (8003814 <HAL_DMA_Abort+0x464>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5f      	ldr	r2, [pc, #380]	; (8003818 <HAL_DMA_Abort+0x468>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01d      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5e      	ldr	r2, [pc, #376]	; (800381c <HAL_DMA_Abort+0x46c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_DMA_Abort+0x470>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_DMA_Abort+0x474>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a59      	ldr	r2, [pc, #356]	; (8003828 <HAL_DMA_Abort+0x478>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a58      	ldr	r2, [pc, #352]	; (800382c <HAL_DMA_Abort+0x47c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a56      	ldr	r2, [pc, #344]	; (8003830 <HAL_DMA_Abort+0x480>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d108      	bne.n	80036ec <HAL_DMA_Abort+0x33c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <HAL_DMA_Abort+0x34c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036fc:	e013      	b.n	8003726 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036fe:	f7fe ffc9 	bl	8002694 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b05      	cmp	r3, #5
 800370a:	d90c      	bls.n	8003726 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e12d      	b.n	8003982 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <HAL_DMA_Abort+0x444>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04a      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <HAL_DMA_Abort+0x448>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d045      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2c      	ldr	r2, [pc, #176]	; (80037fc <HAL_DMA_Abort+0x44c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d040      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_DMA_Abort+0x450>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d03b      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_DMA_Abort+0x454>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d036      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_DMA_Abort+0x458>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_DMA_Abort+0x45c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d02c      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <HAL_DMA_Abort+0x460>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d027      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a23      	ldr	r2, [pc, #140]	; (8003814 <HAL_DMA_Abort+0x464>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_DMA_Abort+0x468>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01d      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a20      	ldr	r2, [pc, #128]	; (800381c <HAL_DMA_Abort+0x46c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_DMA_Abort+0x470>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_DMA_Abort+0x474>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_DMA_Abort+0x478>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_DMA_Abort+0x47c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_DMA_Abort+0x480>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Abort+0x426>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_DMA_Abort+0x428>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02b      	beq.n	8003834 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	223f      	movs	r2, #63	; 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	e02a      	b.n	800384a <HAL_DMA_Abort+0x49a>
 80037f4:	40020010 	.word	0x40020010
 80037f8:	40020028 	.word	0x40020028
 80037fc:	40020040 	.word	0x40020040
 8003800:	40020058 	.word	0x40020058
 8003804:	40020070 	.word	0x40020070
 8003808:	40020088 	.word	0x40020088
 800380c:	400200a0 	.word	0x400200a0
 8003810:	400200b8 	.word	0x400200b8
 8003814:	40020410 	.word	0x40020410
 8003818:	40020428 	.word	0x40020428
 800381c:	40020440 	.word	0x40020440
 8003820:	40020458 	.word	0x40020458
 8003824:	40020470 	.word	0x40020470
 8003828:	40020488 	.word	0x40020488
 800382c:	400204a0 	.word	0x400204a0
 8003830:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2201      	movs	r2, #1
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_DMA_Abort+0x5dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d072      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_DMA_Abort+0x5e0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d06d      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_DMA_Abort+0x5e4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d068      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_DMA_Abort+0x5e8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d063      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a49      	ldr	r2, [pc, #292]	; (800399c <HAL_DMA_Abort+0x5ec>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d05e      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_DMA_Abort+0x5f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d059      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_DMA_Abort+0x5f4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d054      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <HAL_DMA_Abort+0x5f8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04f      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a43      	ldr	r2, [pc, #268]	; (80039ac <HAL_DMA_Abort+0x5fc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d04a      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a41      	ldr	r2, [pc, #260]	; (80039b0 <HAL_DMA_Abort+0x600>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d045      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <HAL_DMA_Abort+0x604>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a3e      	ldr	r2, [pc, #248]	; (80039b8 <HAL_DMA_Abort+0x608>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d03b      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <HAL_DMA_Abort+0x60c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d036      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <HAL_DMA_Abort+0x610>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3a      	ldr	r2, [pc, #232]	; (80039c4 <HAL_DMA_Abort+0x614>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <HAL_DMA_Abort+0x618>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d027      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a37      	ldr	r2, [pc, #220]	; (80039cc <HAL_DMA_Abort+0x61c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a35      	ldr	r2, [pc, #212]	; (80039d0 <HAL_DMA_Abort+0x620>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <HAL_DMA_Abort+0x624>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <HAL_DMA_Abort+0x628>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a31      	ldr	r2, [pc, #196]	; (80039dc <HAL_DMA_Abort+0x62c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <HAL_DMA_Abort+0x630>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <HAL_DMA_Abort+0x634>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <HAL_DMA_Abort+0x638>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_DMA_Abort+0x58e>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_DMA_Abort+0x590>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d015      	beq.n	8003970 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800394c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003964:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800396e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40020010 	.word	0x40020010
 8003990:	40020028 	.word	0x40020028
 8003994:	40020040 	.word	0x40020040
 8003998:	40020058 	.word	0x40020058
 800399c:	40020070 	.word	0x40020070
 80039a0:	40020088 	.word	0x40020088
 80039a4:	400200a0 	.word	0x400200a0
 80039a8:	400200b8 	.word	0x400200b8
 80039ac:	40020410 	.word	0x40020410
 80039b0:	40020428 	.word	0x40020428
 80039b4:	40020440 	.word	0x40020440
 80039b8:	40020458 	.word	0x40020458
 80039bc:	40020470 	.word	0x40020470
 80039c0:	40020488 	.word	0x40020488
 80039c4:	400204a0 	.word	0x400204a0
 80039c8:	400204b8 	.word	0x400204b8
 80039cc:	58025408 	.word	0x58025408
 80039d0:	5802541c 	.word	0x5802541c
 80039d4:	58025430 	.word	0x58025430
 80039d8:	58025444 	.word	0x58025444
 80039dc:	58025458 	.word	0x58025458
 80039e0:	5802546c 	.word	0x5802546c
 80039e4:	58025480 	.word	0x58025480
 80039e8:	58025494 	.word	0x58025494

080039ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e205      	b.n	8003e0a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d004      	beq.n	8003a14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e1fa      	b.n	8003e0a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a8c      	ldr	r2, [pc, #560]	; (8003c4c <HAL_DMA_Abort_IT+0x260>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d04a      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a8b      	ldr	r2, [pc, #556]	; (8003c50 <HAL_DMA_Abort_IT+0x264>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d045      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a89      	ldr	r2, [pc, #548]	; (8003c54 <HAL_DMA_Abort_IT+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d040      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a88      	ldr	r2, [pc, #544]	; (8003c58 <HAL_DMA_Abort_IT+0x26c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d03b      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a86      	ldr	r2, [pc, #536]	; (8003c5c <HAL_DMA_Abort_IT+0x270>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d036      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a85      	ldr	r2, [pc, #532]	; (8003c60 <HAL_DMA_Abort_IT+0x274>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d031      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a83      	ldr	r2, [pc, #524]	; (8003c64 <HAL_DMA_Abort_IT+0x278>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02c      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a82      	ldr	r2, [pc, #520]	; (8003c68 <HAL_DMA_Abort_IT+0x27c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d027      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a80      	ldr	r2, [pc, #512]	; (8003c6c <HAL_DMA_Abort_IT+0x280>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7f      	ldr	r2, [pc, #508]	; (8003c70 <HAL_DMA_Abort_IT+0x284>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01d      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a7d      	ldr	r2, [pc, #500]	; (8003c74 <HAL_DMA_Abort_IT+0x288>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7c      	ldr	r2, [pc, #496]	; (8003c78 <HAL_DMA_Abort_IT+0x28c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7a      	ldr	r2, [pc, #488]	; (8003c7c <HAL_DMA_Abort_IT+0x290>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a79      	ldr	r2, [pc, #484]	; (8003c80 <HAL_DMA_Abort_IT+0x294>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a77      	ldr	r2, [pc, #476]	; (8003c84 <HAL_DMA_Abort_IT+0x298>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a76      	ldr	r2, [pc, #472]	; (8003c88 <HAL_DMA_Abort_IT+0x29c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_DMA_Abort_IT+0xcc>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_DMA_Abort_IT+0xce>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d065      	beq.n	8003b8a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a60      	ldr	r2, [pc, #384]	; (8003c4c <HAL_DMA_Abort_IT+0x260>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04a      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5e      	ldr	r2, [pc, #376]	; (8003c50 <HAL_DMA_Abort_IT+0x264>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d045      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5d      	ldr	r2, [pc, #372]	; (8003c54 <HAL_DMA_Abort_IT+0x268>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d040      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a5b      	ldr	r2, [pc, #364]	; (8003c58 <HAL_DMA_Abort_IT+0x26c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d03b      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5a      	ldr	r2, [pc, #360]	; (8003c5c <HAL_DMA_Abort_IT+0x270>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d036      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_DMA_Abort_IT+0x274>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d031      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a57      	ldr	r2, [pc, #348]	; (8003c64 <HAL_DMA_Abort_IT+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d02c      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a55      	ldr	r2, [pc, #340]	; (8003c68 <HAL_DMA_Abort_IT+0x27c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d027      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a54      	ldr	r2, [pc, #336]	; (8003c6c <HAL_DMA_Abort_IT+0x280>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_DMA_Abort_IT+0x284>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01d      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a51      	ldr	r2, [pc, #324]	; (8003c74 <HAL_DMA_Abort_IT+0x288>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a4f      	ldr	r2, [pc, #316]	; (8003c78 <HAL_DMA_Abort_IT+0x28c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a4e      	ldr	r2, [pc, #312]	; (8003c7c <HAL_DMA_Abort_IT+0x290>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_DMA_Abort_IT+0x294>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4b      	ldr	r2, [pc, #300]	; (8003c84 <HAL_DMA_Abort_IT+0x298>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a49      	ldr	r2, [pc, #292]	; (8003c88 <HAL_DMA_Abort_IT+0x29c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <HAL_DMA_Abort_IT+0x18c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e147      	b.n	8003e08 <HAL_DMA_Abort_IT+0x41c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e13e      	b.n	8003e08 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 020e 	bic.w	r2, r2, #14
 8003b98:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <HAL_DMA_Abort_IT+0x260>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <HAL_DMA_Abort_IT+0x264>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <HAL_DMA_Abort_IT+0x268>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_DMA_Abort_IT+0x26c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a25      	ldr	r2, [pc, #148]	; (8003c5c <HAL_DMA_Abort_IT+0x270>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_DMA_Abort_IT+0x274>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <HAL_DMA_Abort_IT+0x278>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_DMA_Abort_IT+0x27c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <HAL_DMA_Abort_IT+0x280>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <HAL_DMA_Abort_IT+0x284>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1c      	ldr	r2, [pc, #112]	; (8003c74 <HAL_DMA_Abort_IT+0x288>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1a      	ldr	r2, [pc, #104]	; (8003c78 <HAL_DMA_Abort_IT+0x28c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a19      	ldr	r2, [pc, #100]	; (8003c7c <HAL_DMA_Abort_IT+0x290>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <HAL_DMA_Abort_IT+0x294>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <HAL_DMA_Abort_IT+0x298>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <HAL_DMA_Abort_IT+0x29c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d128      	bne.n	8003c8c <HAL_DMA_Abort_IT+0x2a0>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e027      	b.n	8003c9c <HAL_DMA_Abort_IT+0x2b0>
 8003c4c:	40020010 	.word	0x40020010
 8003c50:	40020028 	.word	0x40020028
 8003c54:	40020040 	.word	0x40020040
 8003c58:	40020058 	.word	0x40020058
 8003c5c:	40020070 	.word	0x40020070
 8003c60:	40020088 	.word	0x40020088
 8003c64:	400200a0 	.word	0x400200a0
 8003c68:	400200b8 	.word	0x400200b8
 8003c6c:	40020410 	.word	0x40020410
 8003c70:	40020428 	.word	0x40020428
 8003c74:	40020440 	.word	0x40020440
 8003c78:	40020458 	.word	0x40020458
 8003c7c:	40020470 	.word	0x40020470
 8003c80:	40020488 	.word	0x40020488
 8003c84:	400204a0 	.word	0x400204a0
 8003c88:	400204b8 	.word	0x400204b8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	; (8003e14 <HAL_DMA_Abort_IT+0x428>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d072      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <HAL_DMA_Abort_IT+0x42c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d06d      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a59      	ldr	r2, [pc, #356]	; (8003e1c <HAL_DMA_Abort_IT+0x430>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d068      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_DMA_Abort_IT+0x434>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d063      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a56      	ldr	r2, [pc, #344]	; (8003e24 <HAL_DMA_Abort_IT+0x438>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d05e      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a55      	ldr	r2, [pc, #340]	; (8003e28 <HAL_DMA_Abort_IT+0x43c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d059      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a53      	ldr	r2, [pc, #332]	; (8003e2c <HAL_DMA_Abort_IT+0x440>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d054      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_DMA_Abort_IT+0x444>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d04f      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a50      	ldr	r2, [pc, #320]	; (8003e34 <HAL_DMA_Abort_IT+0x448>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d04a      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4f      	ldr	r2, [pc, #316]	; (8003e38 <HAL_DMA_Abort_IT+0x44c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d045      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4d      	ldr	r2, [pc, #308]	; (8003e3c <HAL_DMA_Abort_IT+0x450>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d040      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4c      	ldr	r2, [pc, #304]	; (8003e40 <HAL_DMA_Abort_IT+0x454>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d03b      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4a      	ldr	r2, [pc, #296]	; (8003e44 <HAL_DMA_Abort_IT+0x458>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d036      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a49      	ldr	r2, [pc, #292]	; (8003e48 <HAL_DMA_Abort_IT+0x45c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d031      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a47      	ldr	r2, [pc, #284]	; (8003e4c <HAL_DMA_Abort_IT+0x460>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02c      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a46      	ldr	r2, [pc, #280]	; (8003e50 <HAL_DMA_Abort_IT+0x464>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d027      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a44      	ldr	r2, [pc, #272]	; (8003e54 <HAL_DMA_Abort_IT+0x468>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d022      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <HAL_DMA_Abort_IT+0x46c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d01d      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <HAL_DMA_Abort_IT+0x470>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d018      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <HAL_DMA_Abort_IT+0x474>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3e      	ldr	r2, [pc, #248]	; (8003e64 <HAL_DMA_Abort_IT+0x478>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00e      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3d      	ldr	r2, [pc, #244]	; (8003e68 <HAL_DMA_Abort_IT+0x47c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d009      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <HAL_DMA_Abort_IT+0x480>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <HAL_DMA_Abort_IT+0x484>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_DMA_Abort_IT+0x3a4>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_DMA_Abort_IT+0x3a6>
 8003d90:	2300      	movs	r3, #0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d028      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003de6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494

08003e74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e80:	4b67      	ldr	r3, [pc, #412]	; (8004020 <HAL_DMA_IRQHandler+0x1ac>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a67      	ldr	r2, [pc, #412]	; (8004024 <HAL_DMA_IRQHandler+0x1b0>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a5f      	ldr	r2, [pc, #380]	; (8004028 <HAL_DMA_IRQHandler+0x1b4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d04a      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a5d      	ldr	r2, [pc, #372]	; (800402c <HAL_DMA_IRQHandler+0x1b8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d045      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a5c      	ldr	r2, [pc, #368]	; (8004030 <HAL_DMA_IRQHandler+0x1bc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d040      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5a      	ldr	r2, [pc, #360]	; (8004034 <HAL_DMA_IRQHandler+0x1c0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d03b      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a59      	ldr	r2, [pc, #356]	; (8004038 <HAL_DMA_IRQHandler+0x1c4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d036      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a57      	ldr	r2, [pc, #348]	; (800403c <HAL_DMA_IRQHandler+0x1c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a56      	ldr	r2, [pc, #344]	; (8004040 <HAL_DMA_IRQHandler+0x1cc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d02c      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a54      	ldr	r2, [pc, #336]	; (8004044 <HAL_DMA_IRQHandler+0x1d0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a53      	ldr	r2, [pc, #332]	; (8004048 <HAL_DMA_IRQHandler+0x1d4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a51      	ldr	r2, [pc, #324]	; (800404c <HAL_DMA_IRQHandler+0x1d8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a50      	ldr	r2, [pc, #320]	; (8004050 <HAL_DMA_IRQHandler+0x1dc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a4e      	ldr	r2, [pc, #312]	; (8004054 <HAL_DMA_IRQHandler+0x1e0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a4d      	ldr	r2, [pc, #308]	; (8004058 <HAL_DMA_IRQHandler+0x1e4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a4b      	ldr	r2, [pc, #300]	; (800405c <HAL_DMA_IRQHandler+0x1e8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a4a      	ldr	r2, [pc, #296]	; (8004060 <HAL_DMA_IRQHandler+0x1ec>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a48      	ldr	r2, [pc, #288]	; (8004064 <HAL_DMA_IRQHandler+0x1f0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_IRQHandler+0xd6>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_DMA_IRQHandler+0xd8>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 842b 	beq.w	80047a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a2 	beq.w	80040ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2e      	ldr	r2, [pc, #184]	; (8004028 <HAL_DMA_IRQHandler+0x1b4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2d      	ldr	r2, [pc, #180]	; (800402c <HAL_DMA_IRQHandler+0x1b8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2b      	ldr	r2, [pc, #172]	; (8004030 <HAL_DMA_IRQHandler+0x1bc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2a      	ldr	r2, [pc, #168]	; (8004034 <HAL_DMA_IRQHandler+0x1c0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a28      	ldr	r2, [pc, #160]	; (8004038 <HAL_DMA_IRQHandler+0x1c4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a27      	ldr	r2, [pc, #156]	; (800403c <HAL_DMA_IRQHandler+0x1c8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_DMA_IRQHandler+0x1cc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a24      	ldr	r2, [pc, #144]	; (8004044 <HAL_DMA_IRQHandler+0x1d0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a22      	ldr	r2, [pc, #136]	; (8004048 <HAL_DMA_IRQHandler+0x1d4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a21      	ldr	r2, [pc, #132]	; (800404c <HAL_DMA_IRQHandler+0x1d8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_DMA_IRQHandler+0x1dc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_DMA_IRQHandler+0x1e0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <HAL_DMA_IRQHandler+0x1e4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_DMA_IRQHandler+0x1e8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_DMA_IRQHandler+0x1ec>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_DMA_IRQHandler+0x1f0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d12f      	bne.n	8004068 <HAL_DMA_IRQHandler+0x1f4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e02e      	b.n	800407c <HAL_DMA_IRQHandler+0x208>
 800401e:	bf00      	nop
 8004020:	20000000 	.word	0x20000000
 8004024:	1b4e81b5 	.word	0x1b4e81b5
 8004028:	40020010 	.word	0x40020010
 800402c:	40020028 	.word	0x40020028
 8004030:	40020040 	.word	0x40020040
 8004034:	40020058 	.word	0x40020058
 8004038:	40020070 	.word	0x40020070
 800403c:	40020088 	.word	0x40020088
 8004040:	400200a0 	.word	0x400200a0
 8004044:	400200b8 	.word	0x400200b8
 8004048:	40020410 	.word	0x40020410
 800404c:	40020428 	.word	0x40020428
 8004050:	40020440 	.word	0x40020440
 8004054:	40020458 	.word	0x40020458
 8004058:	40020470 	.word	0x40020470
 800405c:	40020488 	.word	0x40020488
 8004060:	400204a0 	.word	0x400204a0
 8004064:	400204b8 	.word	0x400204b8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0204 	bic.w	r2, r2, #4
 800408e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2208      	movs	r2, #8
 800409a:	409a      	lsls	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d06e      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a69      	ldr	r2, [pc, #420]	; (800426c <HAL_DMA_IRQHandler+0x3f8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d04a      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a67      	ldr	r2, [pc, #412]	; (8004270 <HAL_DMA_IRQHandler+0x3fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d045      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a66      	ldr	r2, [pc, #408]	; (8004274 <HAL_DMA_IRQHandler+0x400>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d040      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a64      	ldr	r2, [pc, #400]	; (8004278 <HAL_DMA_IRQHandler+0x404>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d03b      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_DMA_IRQHandler+0x408>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d036      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a61      	ldr	r2, [pc, #388]	; (8004280 <HAL_DMA_IRQHandler+0x40c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d031      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a60      	ldr	r2, [pc, #384]	; (8004284 <HAL_DMA_IRQHandler+0x410>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d02c      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a5e      	ldr	r2, [pc, #376]	; (8004288 <HAL_DMA_IRQHandler+0x414>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d027      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a5d      	ldr	r2, [pc, #372]	; (800428c <HAL_DMA_IRQHandler+0x418>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5b      	ldr	r2, [pc, #364]	; (8004290 <HAL_DMA_IRQHandler+0x41c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01d      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5a      	ldr	r2, [pc, #360]	; (8004294 <HAL_DMA_IRQHandler+0x420>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_DMA_IRQHandler+0x424>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a57      	ldr	r2, [pc, #348]	; (800429c <HAL_DMA_IRQHandler+0x428>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a55      	ldr	r2, [pc, #340]	; (80042a0 <HAL_DMA_IRQHandler+0x42c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a54      	ldr	r2, [pc, #336]	; (80042a4 <HAL_DMA_IRQHandler+0x430>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_DMA_IRQHandler+0x434>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10a      	bne.n	8004178 <HAL_DMA_IRQHandler+0x304>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e003      	b.n	8004180 <HAL_DMA_IRQHandler+0x30c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0202 	orr.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2204      	movs	r2, #4
 80041aa:	409a      	lsls	r2, r3
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 808f 	beq.w	80042d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2c      	ldr	r2, [pc, #176]	; (800426c <HAL_DMA_IRQHandler+0x3f8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04a      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <HAL_DMA_IRQHandler+0x3fc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d045      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <HAL_DMA_IRQHandler+0x400>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d040      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <HAL_DMA_IRQHandler+0x404>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d03b      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_DMA_IRQHandler+0x408>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d036      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a24      	ldr	r2, [pc, #144]	; (8004280 <HAL_DMA_IRQHandler+0x40c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d031      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a23      	ldr	r2, [pc, #140]	; (8004284 <HAL_DMA_IRQHandler+0x410>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d02c      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a21      	ldr	r2, [pc, #132]	; (8004288 <HAL_DMA_IRQHandler+0x414>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d027      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_DMA_IRQHandler+0x418>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <HAL_DMA_IRQHandler+0x41c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_DMA_IRQHandler+0x420>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_DMA_IRQHandler+0x424>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_DMA_IRQHandler+0x428>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_DMA_IRQHandler+0x42c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_DMA_IRQHandler+0x430>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_DMA_IRQHandler+0x434>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d12a      	bne.n	80042ac <HAL_DMA_IRQHandler+0x438>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e023      	b.n	80042b4 <HAL_DMA_IRQHandler+0x440>
 800426c:	40020010 	.word	0x40020010
 8004270:	40020028 	.word	0x40020028
 8004274:	40020040 	.word	0x40020040
 8004278:	40020058 	.word	0x40020058
 800427c:	40020070 	.word	0x40020070
 8004280:	40020088 	.word	0x40020088
 8004284:	400200a0 	.word	0x400200a0
 8004288:	400200b8 	.word	0x400200b8
 800428c:	40020410 	.word	0x40020410
 8004290:	40020428 	.word	0x40020428
 8004294:	40020440 	.word	0x40020440
 8004298:	40020458 	.word	0x40020458
 800429c:	40020470 	.word	0x40020470
 80042a0:	40020488 	.word	0x40020488
 80042a4:	400204a0 	.word	0x400204a0
 80042a8:	400204b8 	.word	0x400204b8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2204      	movs	r2, #4
 80042c2:	409a      	lsls	r2, r3
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	f043 0204 	orr.w	r2, r3, #4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2210      	movs	r2, #16
 80042de:	409a      	lsls	r2, r3
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a6 	beq.w	8004436 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a85      	ldr	r2, [pc, #532]	; (8004504 <HAL_DMA_IRQHandler+0x690>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d04a      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a83      	ldr	r2, [pc, #524]	; (8004508 <HAL_DMA_IRQHandler+0x694>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d045      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a82      	ldr	r2, [pc, #520]	; (800450c <HAL_DMA_IRQHandler+0x698>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a80      	ldr	r2, [pc, #512]	; (8004510 <HAL_DMA_IRQHandler+0x69c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d03b      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7f      	ldr	r2, [pc, #508]	; (8004514 <HAL_DMA_IRQHandler+0x6a0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d036      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <HAL_DMA_IRQHandler+0x6a4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d031      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7c      	ldr	r2, [pc, #496]	; (800451c <HAL_DMA_IRQHandler+0x6a8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d02c      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7a      	ldr	r2, [pc, #488]	; (8004520 <HAL_DMA_IRQHandler+0x6ac>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d027      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a79      	ldr	r2, [pc, #484]	; (8004524 <HAL_DMA_IRQHandler+0x6b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_DMA_IRQHandler+0x6b4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01d      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a76      	ldr	r2, [pc, #472]	; (800452c <HAL_DMA_IRQHandler+0x6b8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a74      	ldr	r2, [pc, #464]	; (8004530 <HAL_DMA_IRQHandler+0x6bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a73      	ldr	r2, [pc, #460]	; (8004534 <HAL_DMA_IRQHandler+0x6c0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a71      	ldr	r2, [pc, #452]	; (8004538 <HAL_DMA_IRQHandler+0x6c4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a70      	ldr	r2, [pc, #448]	; (800453c <HAL_DMA_IRQHandler+0x6c8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_DMA_IRQHandler+0x6cc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10a      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x52c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e009      	b.n	80043b4 <HAL_DMA_IRQHandler+0x540>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf14      	ite	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	2300      	moveq	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d03e      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2210      	movs	r2, #16
 80043c2:	409a      	lsls	r2, r3
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d018      	beq.n	8004408 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d024      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
 80043f4:	e01f      	b.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01b      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e016      	b.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0208 	bic.w	r2, r2, #8
 8004424:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2220      	movs	r2, #32
 8004440:	409a      	lsls	r2, r3
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8110 	beq.w	800466c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <HAL_DMA_IRQHandler+0x690>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <HAL_DMA_IRQHandler+0x694>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a29      	ldr	r2, [pc, #164]	; (800450c <HAL_DMA_IRQHandler+0x698>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <HAL_DMA_IRQHandler+0x69c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_DMA_IRQHandler+0x6a0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a25      	ldr	r2, [pc, #148]	; (8004518 <HAL_DMA_IRQHandler+0x6a4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <HAL_DMA_IRQHandler+0x6a8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a22      	ldr	r2, [pc, #136]	; (8004520 <HAL_DMA_IRQHandler+0x6ac>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_DMA_IRQHandler+0x6b0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_DMA_IRQHandler+0x6b4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_DMA_IRQHandler+0x6b8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_DMA_IRQHandler+0x6bc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_DMA_IRQHandler+0x6c0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_DMA_IRQHandler+0x6c4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_DMA_IRQHandler+0x6c8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	; (8004540 <HAL_DMA_IRQHandler+0x6cc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d12b      	bne.n	8004544 <HAL_DMA_IRQHandler+0x6d0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e02a      	b.n	8004558 <HAL_DMA_IRQHandler+0x6e4>
 8004502:	bf00      	nop
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8087 	beq.w	800466c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2220      	movs	r2, #32
 8004568:	409a      	lsls	r2, r3
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b04      	cmp	r3, #4
 8004578:	d139      	bne.n	80045ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0216 	bic.w	r2, r2, #22
 8004588:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004598:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_DMA_IRQHandler+0x736>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0208 	bic.w	r2, r2, #8
 80045b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	223f      	movs	r2, #63	; 0x3f
 80045c4:	409a      	lsls	r2, r3
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 834a 	beq.w	8004c78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
          }
          return;
 80045ec:	e344      	b.n	8004c78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d018      	beq.n	800462e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d108      	bne.n	800461c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02c      	beq.n	800466c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
 800461a:	e027      	b.n	800466c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d023      	beq.n	800466c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
 800462c:	e01e      	b.n	800466c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10f      	bne.n	800465c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0210 	bic.w	r2, r2, #16
 800464a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8306 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8088 	beq.w	8004794 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2204      	movs	r2, #4
 8004688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a7a      	ldr	r2, [pc, #488]	; (800487c <HAL_DMA_IRQHandler+0xa08>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04a      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a79      	ldr	r2, [pc, #484]	; (8004880 <HAL_DMA_IRQHandler+0xa0c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d045      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a77      	ldr	r2, [pc, #476]	; (8004884 <HAL_DMA_IRQHandler+0xa10>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d040      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a76      	ldr	r2, [pc, #472]	; (8004888 <HAL_DMA_IRQHandler+0xa14>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d03b      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a74      	ldr	r2, [pc, #464]	; (800488c <HAL_DMA_IRQHandler+0xa18>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d036      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a73      	ldr	r2, [pc, #460]	; (8004890 <HAL_DMA_IRQHandler+0xa1c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d031      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a71      	ldr	r2, [pc, #452]	; (8004894 <HAL_DMA_IRQHandler+0xa20>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a70      	ldr	r2, [pc, #448]	; (8004898 <HAL_DMA_IRQHandler+0xa24>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d027      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a6e      	ldr	r2, [pc, #440]	; (800489c <HAL_DMA_IRQHandler+0xa28>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a6d      	ldr	r2, [pc, #436]	; (80048a0 <HAL_DMA_IRQHandler+0xa2c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a6b      	ldr	r2, [pc, #428]	; (80048a4 <HAL_DMA_IRQHandler+0xa30>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6a      	ldr	r2, [pc, #424]	; (80048a8 <HAL_DMA_IRQHandler+0xa34>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a68      	ldr	r2, [pc, #416]	; (80048ac <HAL_DMA_IRQHandler+0xa38>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a67      	ldr	r2, [pc, #412]	; (80048b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a65      	ldr	r2, [pc, #404]	; (80048b4 <HAL_DMA_IRQHandler+0xa40>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a64      	ldr	r2, [pc, #400]	; (80048b8 <HAL_DMA_IRQHandler+0xa44>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <HAL_DMA_IRQHandler+0x8ca>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e007      	b.n	800474e <HAL_DMA_IRQHandler+0x8da>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3301      	adds	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	429a      	cmp	r2, r3
 8004758:	d307      	bcc.n	800476a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f2      	bne.n	800474e <HAL_DMA_IRQHandler+0x8da>
 8004768:	e000      	b.n	800476c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800476a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800478a:	e003      	b.n	8004794 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8272 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
 80047a6:	e26c      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a43      	ldr	r2, [pc, #268]	; (80048bc <HAL_DMA_IRQHandler+0xa48>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a42      	ldr	r2, [pc, #264]	; (80048c0 <HAL_DMA_IRQHandler+0xa4c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d01d      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a40      	ldr	r2, [pc, #256]	; (80048c4 <HAL_DMA_IRQHandler+0xa50>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a3f      	ldr	r2, [pc, #252]	; (80048c8 <HAL_DMA_IRQHandler+0xa54>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3d      	ldr	r2, [pc, #244]	; (80048cc <HAL_DMA_IRQHandler+0xa58>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3c      	ldr	r2, [pc, #240]	; (80048d0 <HAL_DMA_IRQHandler+0xa5c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_DMA_IRQHandler+0xa60>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a39      	ldr	r2, [pc, #228]	; (80048d8 <HAL_DMA_IRQHandler+0xa64>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_DMA_IRQHandler+0x988>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_DMA_IRQHandler+0x98a>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 823f 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2204      	movs	r2, #4
 8004816:	409a      	lsls	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80cd 	beq.w	80049bc <HAL_DMA_IRQHandler+0xb48>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80c7 	beq.w	80049bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2204      	movs	r2, #4
 8004838:	409a      	lsls	r2, r3
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d049      	beq.n	80048dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8210 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004864:	e20a      	b.n	8004c7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8206 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004878:	e200      	b.n	8004c7c <HAL_DMA_IRQHandler+0xe08>
 800487a:	bf00      	nop
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
 80048bc:	58025408 	.word	0x58025408
 80048c0:	5802541c 	.word	0x5802541c
 80048c4:	58025430 	.word	0x58025430
 80048c8:	58025444 	.word	0x58025444
 80048cc:	58025458 	.word	0x58025458
 80048d0:	5802546c 	.word	0x5802546c
 80048d4:	58025480 	.word	0x58025480
 80048d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d160      	bne.n	80049a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a8c      	ldr	r2, [pc, #560]	; (8004b1c <HAL_DMA_IRQHandler+0xca8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d04a      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a8a      	ldr	r2, [pc, #552]	; (8004b20 <HAL_DMA_IRQHandler+0xcac>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d045      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a89      	ldr	r2, [pc, #548]	; (8004b24 <HAL_DMA_IRQHandler+0xcb0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d040      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a87      	ldr	r2, [pc, #540]	; (8004b28 <HAL_DMA_IRQHandler+0xcb4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d03b      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a86      	ldr	r2, [pc, #536]	; (8004b2c <HAL_DMA_IRQHandler+0xcb8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d036      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a84      	ldr	r2, [pc, #528]	; (8004b30 <HAL_DMA_IRQHandler+0xcbc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d031      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a83      	ldr	r2, [pc, #524]	; (8004b34 <HAL_DMA_IRQHandler+0xcc0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d02c      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a81      	ldr	r2, [pc, #516]	; (8004b38 <HAL_DMA_IRQHandler+0xcc4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d027      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a80      	ldr	r2, [pc, #512]	; (8004b3c <HAL_DMA_IRQHandler+0xcc8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d022      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a7e      	ldr	r2, [pc, #504]	; (8004b40 <HAL_DMA_IRQHandler+0xccc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01d      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7d      	ldr	r2, [pc, #500]	; (8004b44 <HAL_DMA_IRQHandler+0xcd0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7b      	ldr	r2, [pc, #492]	; (8004b48 <HAL_DMA_IRQHandler+0xcd4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7a      	ldr	r2, [pc, #488]	; (8004b4c <HAL_DMA_IRQHandler+0xcd8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a78      	ldr	r2, [pc, #480]	; (8004b50 <HAL_DMA_IRQHandler+0xcdc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a77      	ldr	r2, [pc, #476]	; (8004b54 <HAL_DMA_IRQHandler+0xce0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a75      	ldr	r2, [pc, #468]	; (8004b58 <HAL_DMA_IRQHandler+0xce4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <HAL_DMA_IRQHandler+0xb24>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0208 	bic.w	r2, r2, #8
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e007      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb34>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0204 	bic.w	r2, r2, #4
 80049a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8165 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ba:	e15f      	b.n	8004c7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2202      	movs	r2, #2
 80049c6:	409a      	lsls	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80c5 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xce8>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80bf 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2202      	movs	r2, #2
 80049e8:	409a      	lsls	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d018      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 813a 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a14:	e134      	b.n	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8130 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a28:	e12a      	b.n	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d168      	bne.n	8004b06 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a38      	ldr	r2, [pc, #224]	; (8004b1c <HAL_DMA_IRQHandler+0xca8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04a      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <HAL_DMA_IRQHandler+0xcac>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d045      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a35      	ldr	r2, [pc, #212]	; (8004b24 <HAL_DMA_IRQHandler+0xcb0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d040      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <HAL_DMA_IRQHandler+0xcb4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d03b      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <HAL_DMA_IRQHandler+0xcb8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d036      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a31      	ldr	r2, [pc, #196]	; (8004b30 <HAL_DMA_IRQHandler+0xcbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d031      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <HAL_DMA_IRQHandler+0xcc0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02c      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2e      	ldr	r2, [pc, #184]	; (8004b38 <HAL_DMA_IRQHandler+0xcc4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d027      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <HAL_DMA_IRQHandler+0xcc8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <HAL_DMA_IRQHandler+0xccc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d01d      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <HAL_DMA_IRQHandler+0xcd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <HAL_DMA_IRQHandler+0xcd4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <HAL_DMA_IRQHandler+0xcd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <HAL_DMA_IRQHandler+0xcdc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_DMA_IRQHandler+0xce0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_DMA_IRQHandler+0xce4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d108      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0xc72>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0214 	bic.w	r2, r2, #20
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e007      	b.n	8004af6 <HAL_DMA_IRQHandler+0xc82>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 020a 	bic.w	r2, r2, #10
 8004af4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80b8 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b18:	e0b2      	b.n	8004c80 <HAL_DMA_IRQHandler+0xe0c>
 8004b1a:	bf00      	nop
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	2208      	movs	r2, #8
 8004b66:	409a      	lsls	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8088 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8082 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a41      	ldr	r2, [pc, #260]	; (8004c88 <HAL_DMA_IRQHandler+0xe14>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d04a      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <HAL_DMA_IRQHandler+0xe18>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d045      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3e      	ldr	r2, [pc, #248]	; (8004c90 <HAL_DMA_IRQHandler+0xe1c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d040      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3c      	ldr	r2, [pc, #240]	; (8004c94 <HAL_DMA_IRQHandler+0xe20>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03b      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3b      	ldr	r2, [pc, #236]	; (8004c98 <HAL_DMA_IRQHandler+0xe24>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d036      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a39      	ldr	r2, [pc, #228]	; (8004c9c <HAL_DMA_IRQHandler+0xe28>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <HAL_DMA_IRQHandler+0xe2c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d02c      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a36      	ldr	r2, [pc, #216]	; (8004ca4 <HAL_DMA_IRQHandler+0xe30>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a35      	ldr	r2, [pc, #212]	; (8004ca8 <HAL_DMA_IRQHandler+0xe34>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a33      	ldr	r2, [pc, #204]	; (8004cac <HAL_DMA_IRQHandler+0xe38>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a32      	ldr	r2, [pc, #200]	; (8004cb0 <HAL_DMA_IRQHandler+0xe3c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <HAL_DMA_IRQHandler+0xe40>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <HAL_DMA_IRQHandler+0xe44>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <HAL_DMA_IRQHandler+0xe48>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <HAL_DMA_IRQHandler+0xe4c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <HAL_DMA_IRQHandler+0xe50>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <HAL_DMA_IRQHandler+0xdbc>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 021c 	bic.w	r2, r2, #28
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e007      	b.n	8004c40 <HAL_DMA_IRQHandler+0xdcc>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 020e 	bic.w	r2, r2, #14
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2201      	movs	r2, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	e004      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c78:	bf00      	nop
 8004c7a:	e002      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c7c:	bf00      	nop
 8004c7e:	e000      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c82:	3728      	adds	r7, #40	; 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8

08004cc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a84      	ldr	r2, [pc, #528]	; (8004ef8 <DMA_SetConfig+0x230>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d072      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a82      	ldr	r2, [pc, #520]	; (8004efc <DMA_SetConfig+0x234>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d06d      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a81      	ldr	r2, [pc, #516]	; (8004f00 <DMA_SetConfig+0x238>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d068      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7f      	ldr	r2, [pc, #508]	; (8004f04 <DMA_SetConfig+0x23c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d063      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7e      	ldr	r2, [pc, #504]	; (8004f08 <DMA_SetConfig+0x240>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d05e      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7c      	ldr	r2, [pc, #496]	; (8004f0c <DMA_SetConfig+0x244>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d059      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7b      	ldr	r2, [pc, #492]	; (8004f10 <DMA_SetConfig+0x248>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d054      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a79      	ldr	r2, [pc, #484]	; (8004f14 <DMA_SetConfig+0x24c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04f      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a78      	ldr	r2, [pc, #480]	; (8004f18 <DMA_SetConfig+0x250>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d04a      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a76      	ldr	r2, [pc, #472]	; (8004f1c <DMA_SetConfig+0x254>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d045      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a75      	ldr	r2, [pc, #468]	; (8004f20 <DMA_SetConfig+0x258>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d040      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a73      	ldr	r2, [pc, #460]	; (8004f24 <DMA_SetConfig+0x25c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d03b      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a72      	ldr	r2, [pc, #456]	; (8004f28 <DMA_SetConfig+0x260>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d036      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a70      	ldr	r2, [pc, #448]	; (8004f2c <DMA_SetConfig+0x264>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d031      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a6f      	ldr	r2, [pc, #444]	; (8004f30 <DMA_SetConfig+0x268>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d02c      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6d      	ldr	r2, [pc, #436]	; (8004f34 <DMA_SetConfig+0x26c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d027      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6c      	ldr	r2, [pc, #432]	; (8004f38 <DMA_SetConfig+0x270>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d022      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a6a      	ldr	r2, [pc, #424]	; (8004f3c <DMA_SetConfig+0x274>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01d      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a69      	ldr	r2, [pc, #420]	; (8004f40 <DMA_SetConfig+0x278>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a67      	ldr	r2, [pc, #412]	; (8004f44 <DMA_SetConfig+0x27c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a66      	ldr	r2, [pc, #408]	; (8004f48 <DMA_SetConfig+0x280>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a64      	ldr	r2, [pc, #400]	; (8004f4c <DMA_SetConfig+0x284>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a63      	ldr	r2, [pc, #396]	; (8004f50 <DMA_SetConfig+0x288>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <DMA_SetConfig+0x10a>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a61      	ldr	r2, [pc, #388]	; (8004f54 <DMA_SetConfig+0x28c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <DMA_SetConfig+0x10e>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <DMA_SetConfig+0x110>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004de4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004df6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3e      	ldr	r2, [pc, #248]	; (8004ef8 <DMA_SetConfig+0x230>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d04a      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3d      	ldr	r2, [pc, #244]	; (8004efc <DMA_SetConfig+0x234>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d045      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a3b      	ldr	r2, [pc, #236]	; (8004f00 <DMA_SetConfig+0x238>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d040      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a3a      	ldr	r2, [pc, #232]	; (8004f04 <DMA_SetConfig+0x23c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d03b      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a38      	ldr	r2, [pc, #224]	; (8004f08 <DMA_SetConfig+0x240>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d036      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a37      	ldr	r2, [pc, #220]	; (8004f0c <DMA_SetConfig+0x244>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d031      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a35      	ldr	r2, [pc, #212]	; (8004f10 <DMA_SetConfig+0x248>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d02c      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a34      	ldr	r2, [pc, #208]	; (8004f14 <DMA_SetConfig+0x24c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d027      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a32      	ldr	r2, [pc, #200]	; (8004f18 <DMA_SetConfig+0x250>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d022      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a31      	ldr	r2, [pc, #196]	; (8004f1c <DMA_SetConfig+0x254>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d01d      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <DMA_SetConfig+0x258>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d018      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <DMA_SetConfig+0x25c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <DMA_SetConfig+0x260>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <DMA_SetConfig+0x264>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <DMA_SetConfig+0x268>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <DMA_SetConfig+0x1d0>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <DMA_SetConfig+0x26c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d101      	bne.n	8004e9c <DMA_SetConfig+0x1d4>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <DMA_SetConfig+0x1d6>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d05a      	beq.n	8004f58 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	223f      	movs	r2, #63	; 0x3f
 8004eac:	409a      	lsls	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ec0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d108      	bne.n	8004ee4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ee2:	e087      	b.n	8004ff4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]
}
 8004ef4:	e07e      	b.n	8004ff4 <DMA_SetConfig+0x32c>
 8004ef6:	bf00      	nop
 8004ef8:	40020010 	.word	0x40020010
 8004efc:	40020028 	.word	0x40020028
 8004f00:	40020040 	.word	0x40020040
 8004f04:	40020058 	.word	0x40020058
 8004f08:	40020070 	.word	0x40020070
 8004f0c:	40020088 	.word	0x40020088
 8004f10:	400200a0 	.word	0x400200a0
 8004f14:	400200b8 	.word	0x400200b8
 8004f18:	40020410 	.word	0x40020410
 8004f1c:	40020428 	.word	0x40020428
 8004f20:	40020440 	.word	0x40020440
 8004f24:	40020458 	.word	0x40020458
 8004f28:	40020470 	.word	0x40020470
 8004f2c:	40020488 	.word	0x40020488
 8004f30:	400204a0 	.word	0x400204a0
 8004f34:	400204b8 	.word	0x400204b8
 8004f38:	58025408 	.word	0x58025408
 8004f3c:	5802541c 	.word	0x5802541c
 8004f40:	58025430 	.word	0x58025430
 8004f44:	58025444 	.word	0x58025444
 8004f48:	58025458 	.word	0x58025458
 8004f4c:	5802546c 	.word	0x5802546c
 8004f50:	58025480 	.word	0x58025480
 8004f54:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <DMA_SetConfig+0x338>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <DMA_SetConfig+0x2e0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a27      	ldr	r2, [pc, #156]	; (8005004 <DMA_SetConfig+0x33c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01d      	beq.n	8004fa8 <DMA_SetConfig+0x2e0>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a25      	ldr	r2, [pc, #148]	; (8005008 <DMA_SetConfig+0x340>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <DMA_SetConfig+0x2e0>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a24      	ldr	r2, [pc, #144]	; (800500c <DMA_SetConfig+0x344>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <DMA_SetConfig+0x2e0>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a22      	ldr	r2, [pc, #136]	; (8005010 <DMA_SetConfig+0x348>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <DMA_SetConfig+0x2e0>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a21      	ldr	r2, [pc, #132]	; (8005014 <DMA_SetConfig+0x34c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <DMA_SetConfig+0x2e0>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <DMA_SetConfig+0x350>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <DMA_SetConfig+0x2e0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <DMA_SetConfig+0x354>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <DMA_SetConfig+0x2e4>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <DMA_SetConfig+0x2e6>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d020      	beq.n	8004ff4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	2201      	movs	r2, #1
 8004fbc:	409a      	lsls	r2, r3
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d108      	bne.n	8004fe4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
}
 8004fe2:	e007      	b.n	8004ff4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	58025408 	.word	0x58025408
 8005004:	5802541c 	.word	0x5802541c
 8005008:	58025430 	.word	0x58025430
 800500c:	58025444 	.word	0x58025444
 8005010:	58025458 	.word	0x58025458
 8005014:	5802546c 	.word	0x5802546c
 8005018:	58025480 	.word	0x58025480
 800501c:	58025494 	.word	0x58025494

08005020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a42      	ldr	r2, [pc, #264]	; (8005138 <DMA_CalcBaseAndBitshift+0x118>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d04a      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a41      	ldr	r2, [pc, #260]	; (800513c <DMA_CalcBaseAndBitshift+0x11c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d045      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3f      	ldr	r2, [pc, #252]	; (8005140 <DMA_CalcBaseAndBitshift+0x120>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d040      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3e      	ldr	r2, [pc, #248]	; (8005144 <DMA_CalcBaseAndBitshift+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d03b      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <DMA_CalcBaseAndBitshift+0x128>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d036      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3b      	ldr	r2, [pc, #236]	; (800514c <DMA_CalcBaseAndBitshift+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d031      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a39      	ldr	r2, [pc, #228]	; (8005150 <DMA_CalcBaseAndBitshift+0x130>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d02c      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a38      	ldr	r2, [pc, #224]	; (8005154 <DMA_CalcBaseAndBitshift+0x134>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d027      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a36      	ldr	r2, [pc, #216]	; (8005158 <DMA_CalcBaseAndBitshift+0x138>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d022      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a35      	ldr	r2, [pc, #212]	; (800515c <DMA_CalcBaseAndBitshift+0x13c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d01d      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a33      	ldr	r2, [pc, #204]	; (8005160 <DMA_CalcBaseAndBitshift+0x140>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d018      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a32      	ldr	r2, [pc, #200]	; (8005164 <DMA_CalcBaseAndBitshift+0x144>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a30      	ldr	r2, [pc, #192]	; (8005168 <DMA_CalcBaseAndBitshift+0x148>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a2f      	ldr	r2, [pc, #188]	; (800516c <DMA_CalcBaseAndBitshift+0x14c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2d      	ldr	r2, [pc, #180]	; (8005170 <DMA_CalcBaseAndBitshift+0x150>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xa8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2c      	ldr	r2, [pc, #176]	; (8005174 <DMA_CalcBaseAndBitshift+0x154>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d101      	bne.n	80050cc <DMA_CalcBaseAndBitshift+0xac>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <DMA_CalcBaseAndBitshift+0xae>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d024      	beq.n	800511c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	3b10      	subs	r3, #16
 80050da:	4a27      	ldr	r2, [pc, #156]	; (8005178 <DMA_CalcBaseAndBitshift+0x158>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	4a24      	ldr	r2, [pc, #144]	; (800517c <DMA_CalcBaseAndBitshift+0x15c>)
 80050ec:	5cd3      	ldrb	r3, [r2, r3]
 80050ee:	461a      	mov	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d908      	bls.n	800510c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <DMA_CalcBaseAndBitshift+0x160>)
 8005102:	4013      	ands	r3, r2
 8005104:	1d1a      	adds	r2, r3, #4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	659a      	str	r2, [r3, #88]	; 0x58
 800510a:	e00d      	b.n	8005128 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <DMA_CalcBaseAndBitshift+0x160>)
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6593      	str	r3, [r2, #88]	; 0x58
 800511a:	e005      	b.n	8005128 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40020010 	.word	0x40020010
 800513c:	40020028 	.word	0x40020028
 8005140:	40020040 	.word	0x40020040
 8005144:	40020058 	.word	0x40020058
 8005148:	40020070 	.word	0x40020070
 800514c:	40020088 	.word	0x40020088
 8005150:	400200a0 	.word	0x400200a0
 8005154:	400200b8 	.word	0x400200b8
 8005158:	40020410 	.word	0x40020410
 800515c:	40020428 	.word	0x40020428
 8005160:	40020440 	.word	0x40020440
 8005164:	40020458 	.word	0x40020458
 8005168:	40020470 	.word	0x40020470
 800516c:	40020488 	.word	0x40020488
 8005170:	400204a0 	.word	0x400204a0
 8005174:	400204b8 	.word	0x400204b8
 8005178:	aaaaaaab 	.word	0xaaaaaaab
 800517c:	0800c354 	.word	0x0800c354
 8005180:	fffffc00 	.word	0xfffffc00

08005184 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d120      	bne.n	80051da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	2b03      	cmp	r3, #3
 800519e:	d858      	bhi.n	8005252 <DMA_CheckFifoParam+0xce>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <DMA_CheckFifoParam+0x24>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051cb 	.word	0x080051cb
 80051b0:	080051b9 	.word	0x080051b9
 80051b4:	08005253 	.word	0x08005253
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d048      	beq.n	8005256 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051c8:	e045      	b.n	8005256 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051d2:	d142      	bne.n	800525a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051d8:	e03f      	b.n	800525a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	d123      	bne.n	800522c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d838      	bhi.n	800525e <DMA_CheckFifoParam+0xda>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <DMA_CheckFifoParam+0x70>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005205 	.word	0x08005205
 80051f8:	0800520b 	.word	0x0800520b
 80051fc:	08005205 	.word	0x08005205
 8005200:	0800521d 	.word	0x0800521d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
        break;
 8005208:	e030      	b.n	800526c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d025      	beq.n	8005262 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800521a:	e022      	b.n	8005262 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005224:	d11f      	bne.n	8005266 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800522a:	e01c      	b.n	8005266 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	2b02      	cmp	r3, #2
 8005232:	d902      	bls.n	800523a <DMA_CheckFifoParam+0xb6>
 8005234:	2b03      	cmp	r3, #3
 8005236:	d003      	beq.n	8005240 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005238:	e018      	b.n	800526c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
        break;
 800523e:	e015      	b.n	800526c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00e      	beq.n	800526a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
    break;
 8005250:	e00b      	b.n	800526a <DMA_CheckFifoParam+0xe6>
        break;
 8005252:	bf00      	nop
 8005254:	e00a      	b.n	800526c <DMA_CheckFifoParam+0xe8>
        break;
 8005256:	bf00      	nop
 8005258:	e008      	b.n	800526c <DMA_CheckFifoParam+0xe8>
        break;
 800525a:	bf00      	nop
 800525c:	e006      	b.n	800526c <DMA_CheckFifoParam+0xe8>
        break;
 800525e:	bf00      	nop
 8005260:	e004      	b.n	800526c <DMA_CheckFifoParam+0xe8>
        break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <DMA_CheckFifoParam+0xe8>
        break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <DMA_CheckFifoParam+0xe8>
    break;
 800526a:	bf00      	nop
    }
  }

  return status;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop

0800527c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a38      	ldr	r2, [pc, #224]	; (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d022      	beq.n	80052da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a36      	ldr	r2, [pc, #216]	; (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01d      	beq.n	80052da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a35      	ldr	r2, [pc, #212]	; (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d018      	beq.n	80052da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a33      	ldr	r2, [pc, #204]	; (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a32      	ldr	r2, [pc, #200]	; (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00e      	beq.n	80052da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a30      	ldr	r2, [pc, #192]	; (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d009      	beq.n	80052da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2f      	ldr	r2, [pc, #188]	; (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d004      	beq.n	80052da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2d      	ldr	r2, [pc, #180]	; (800538c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01a      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	3b08      	subs	r3, #8
 80052ec:	4a28      	ldr	r2, [pc, #160]	; (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	091b      	lsrs	r3, r3, #4
 80052f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4b26      	ldr	r3, [pc, #152]	; (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	461a      	mov	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005308:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2201      	movs	r2, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005318:	e024      	b.n	8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	3b10      	subs	r3, #16
 8005322:	4a1e      	ldr	r2, [pc, #120]	; (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005324:	fba2 2303 	umull	r2, r3, r2, r3
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d806      	bhi.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d902      	bls.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3308      	adds	r3, #8
 8005340:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a16      	ldr	r2, [pc, #88]	; (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005354:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2201      	movs	r2, #1
 800535e:	409a      	lsls	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	58025408 	.word	0x58025408
 8005374:	5802541c 	.word	0x5802541c
 8005378:	58025430 	.word	0x58025430
 800537c:	58025444 	.word	0x58025444
 8005380:	58025458 	.word	0x58025458
 8005384:	5802546c 	.word	0x5802546c
 8005388:	58025480 	.word	0x58025480
 800538c:	58025494 	.word	0x58025494
 8005390:	cccccccd 	.word	0xcccccccd
 8005394:	16009600 	.word	0x16009600
 8005398:	58025880 	.word	0x58025880
 800539c:	aaaaaaab 	.word	0xaaaaaaab
 80053a0:	400204b8 	.word	0x400204b8
 80053a4:	4002040f 	.word	0x4002040f
 80053a8:	10008200 	.word	0x10008200
 80053ac:	40020880 	.word	0x40020880

080053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d04a      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d847      	bhi.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a25      	ldr	r2, [pc, #148]	; (8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d022      	beq.n	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a24      	ldr	r2, [pc, #144]	; (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01d      	beq.n	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a22      	ldr	r2, [pc, #136]	; (8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d018      	beq.n	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00e      	beq.n	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d101      	bne.n	8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4b17      	ldr	r3, [pc, #92]	; (8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a15      	ldr	r2, [pc, #84]	; (800548c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005438:	671a      	str	r2, [r3, #112]	; 0x70
 800543a:	e009      	b.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a11      	ldr	r2, [pc, #68]	; (8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800544e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b01      	subs	r3, #1
 8005454:	2201      	movs	r2, #1
 8005456:	409a      	lsls	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	58025408 	.word	0x58025408
 800546c:	5802541c 	.word	0x5802541c
 8005470:	58025430 	.word	0x58025430
 8005474:	58025444 	.word	0x58025444
 8005478:	58025458 	.word	0x58025458
 800547c:	5802546c 	.word	0x5802546c
 8005480:	58025480 	.word	0x58025480
 8005484:	58025494 	.word	0x58025494
 8005488:	1600963f 	.word	0x1600963f
 800548c:	58025940 	.word	0x58025940
 8005490:	1000823f 	.word	0x1000823f
 8005494:	40020940 	.word	0x40020940

08005498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	; 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054a6:	4b89      	ldr	r3, [pc, #548]	; (80056cc <HAL_GPIO_Init+0x234>)
 80054a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054aa:	e194      	b.n	80057d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	2101      	movs	r1, #1
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	4013      	ands	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8186 	beq.w	80057d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d00b      	beq.n	80054e4 <HAL_GPIO_Init+0x4c>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d007      	beq.n	80054e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054d8:	2b11      	cmp	r3, #17
 80054da:	d003      	beq.n	80054e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b12      	cmp	r3, #18
 80054e2:	d130      	bne.n	8005546 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	2203      	movs	r2, #3
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	43db      	mvns	r3, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4013      	ands	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800551a:	2201      	movs	r2, #1
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	f003 0201 	and.w	r2, r3, #1
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	2203      	movs	r2, #3
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d003      	beq.n	8005586 <HAL_GPIO_Init+0xee>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b12      	cmp	r3, #18
 8005584:	d123      	bne.n	80055ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	220f      	movs	r2, #15
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4313      	orrs	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	08da      	lsrs	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3208      	adds	r2, #8
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f003 0203 	and.w	r2, r3, #3
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80e0 	beq.w	80057d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005610:	4b2f      	ldr	r3, [pc, #188]	; (80056d0 <HAL_GPIO_Init+0x238>)
 8005612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005616:	4a2e      	ldr	r2, [pc, #184]	; (80056d0 <HAL_GPIO_Init+0x238>)
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005620:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <HAL_GPIO_Init+0x238>)
 8005622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800562e:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <HAL_GPIO_Init+0x23c>)
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	3302      	adds	r3, #2
 8005636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	220f      	movs	r2, #15
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43db      	mvns	r3, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a20      	ldr	r2, [pc, #128]	; (80056d8 <HAL_GPIO_Init+0x240>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d052      	beq.n	8005700 <HAL_GPIO_Init+0x268>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <HAL_GPIO_Init+0x244>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_GPIO_Init+0x22e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1e      	ldr	r2, [pc, #120]	; (80056e0 <HAL_GPIO_Init+0x248>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d02b      	beq.n	80056c2 <HAL_GPIO_Init+0x22a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <HAL_GPIO_Init+0x24c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d025      	beq.n	80056be <HAL_GPIO_Init+0x226>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_GPIO_Init+0x250>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01f      	beq.n	80056ba <HAL_GPIO_Init+0x222>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <HAL_GPIO_Init+0x254>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d019      	beq.n	80056b6 <HAL_GPIO_Init+0x21e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a1a      	ldr	r2, [pc, #104]	; (80056f0 <HAL_GPIO_Init+0x258>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_GPIO_Init+0x21a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <HAL_GPIO_Init+0x25c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00d      	beq.n	80056ae <HAL_GPIO_Init+0x216>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_GPIO_Init+0x260>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <HAL_GPIO_Init+0x212>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a17      	ldr	r2, [pc, #92]	; (80056fc <HAL_GPIO_Init+0x264>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d101      	bne.n	80056a6 <HAL_GPIO_Init+0x20e>
 80056a2:	2309      	movs	r3, #9
 80056a4:	e02d      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056a6:	230a      	movs	r3, #10
 80056a8:	e02b      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056aa:	2308      	movs	r3, #8
 80056ac:	e029      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056ae:	2307      	movs	r3, #7
 80056b0:	e027      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056b2:	2306      	movs	r3, #6
 80056b4:	e025      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056b6:	2305      	movs	r3, #5
 80056b8:	e023      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056ba:	2304      	movs	r3, #4
 80056bc:	e021      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056be:	2303      	movs	r3, #3
 80056c0:	e01f      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e01d      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e01b      	b.n	8005702 <HAL_GPIO_Init+0x26a>
 80056ca:	bf00      	nop
 80056cc:	58000080 	.word	0x58000080
 80056d0:	58024400 	.word	0x58024400
 80056d4:	58000400 	.word	0x58000400
 80056d8:	58020000 	.word	0x58020000
 80056dc:	58020400 	.word	0x58020400
 80056e0:	58020800 	.word	0x58020800
 80056e4:	58020c00 	.word	0x58020c00
 80056e8:	58021000 	.word	0x58021000
 80056ec:	58021400 	.word	0x58021400
 80056f0:	58021800 	.word	0x58021800
 80056f4:	58021c00 	.word	0x58021c00
 80056f8:	58022000 	.word	0x58022000
 80056fc:	58022400 	.word	0x58022400
 8005700:	2300      	movs	r3, #0
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	f002 0203 	and.w	r2, r2, #3
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	4093      	lsls	r3, r2
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005712:	4938      	ldr	r1, [pc, #224]	; (80057f4 <HAL_GPIO_Init+0x35c>)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	089b      	lsrs	r3, r3, #2
 8005718:	3302      	adds	r3, #2
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	43db      	mvns	r3, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4013      	ands	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	43db      	mvns	r3, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800579a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f ae63 	bne.w	80054ac <HAL_GPIO_Init+0x14>
  }
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	3724      	adds	r7, #36	; 0x24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	58000400 	.word	0x58000400

080057f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	807b      	strh	r3, [r7, #2]
 8005804:	4613      	mov	r3, r2
 8005806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005808:	787b      	ldrb	r3, [r7, #1]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800580e:	887a      	ldrh	r2, [r7, #2]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005814:	e003      	b.n	800581e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005816:	887b      	ldrh	r3, [r7, #2]
 8005818:	041a      	lsls	r2, r3, #16
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	619a      	str	r2, [r3, #24]
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	4618      	mov	r0, r3
 8005852:	f7fc f891 	bl	8001978 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <HAL_PWREx_ConfigSupply+0x70>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d00a      	beq.n	800588a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <HAL_PWREx_ConfigSupply+0x70>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d001      	beq.n	8005886 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e01f      	b.n	80058c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e01d      	b.n	80058c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <HAL_PWREx_ConfigSupply+0x70>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f023 0207 	bic.w	r2, r3, #7
 8005892:	490f      	ldr	r1, [pc, #60]	; (80058d0 <HAL_PWREx_ConfigSupply+0x70>)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4313      	orrs	r3, r2
 8005898:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800589a:	f7fc fefb 	bl	8002694 <HAL_GetTick>
 800589e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058a0:	e009      	b.n	80058b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058a2:	f7fc fef7 	bl	8002694 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b0:	d901      	bls.n	80058b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e007      	b.n	80058c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_PWREx_ConfigSupply+0x70>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c2:	d1ee      	bne.n	80058a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	58024800 	.word	0x58024800

080058d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08c      	sub	sp, #48	; 0x30
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e3ff      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8087 	beq.w	8005a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f4:	4b99      	ldr	r3, [pc, #612]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058fe:	4b97      	ldr	r3, [pc, #604]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	2b10      	cmp	r3, #16
 8005908:	d007      	beq.n	800591a <HAL_RCC_OscConfig+0x46>
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	2b18      	cmp	r3, #24
 800590e:	d110      	bne.n	8005932 <HAL_RCC_OscConfig+0x5e>
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d10b      	bne.n	8005932 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591a:	4b90      	ldr	r3, [pc, #576]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d06c      	beq.n	8005a00 <HAL_RCC_OscConfig+0x12c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d168      	bne.n	8005a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e3d9      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593a:	d106      	bne.n	800594a <HAL_RCC_OscConfig+0x76>
 800593c:	4b87      	ldr	r3, [pc, #540]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a86      	ldr	r2, [pc, #536]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e02e      	b.n	80059a8 <HAL_RCC_OscConfig+0xd4>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x98>
 8005952:	4b82      	ldr	r3, [pc, #520]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a81      	ldr	r2, [pc, #516]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b7f      	ldr	r3, [pc, #508]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a7e      	ldr	r2, [pc, #504]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e01d      	b.n	80059a8 <HAL_RCC_OscConfig+0xd4>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0xbc>
 8005976:	4b79      	ldr	r3, [pc, #484]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a78      	ldr	r2, [pc, #480]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 800597c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b76      	ldr	r3, [pc, #472]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a75      	ldr	r2, [pc, #468]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_OscConfig+0xd4>
 8005990:	4b72      	ldr	r3, [pc, #456]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a71      	ldr	r2, [pc, #452]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b6f      	ldr	r3, [pc, #444]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a6e      	ldr	r2, [pc, #440]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 80059a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7fc fe70 	bl	8002694 <HAL_GetTick>
 80059b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b8:	f7fc fe6c 	bl	8002694 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	; 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e38d      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ca:	4b64      	ldr	r3, [pc, #400]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0xe4>
 80059d6:	e014      	b.n	8005a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fc fe5c 	bl	8002694 <HAL_GetTick>
 80059dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fc fe58 	bl	8002694 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e379      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059f2:	4b5a      	ldr	r3, [pc, #360]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x10c>
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80ae 	beq.w	8005b6c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a10:	4b52      	ldr	r3, [pc, #328]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a1a:	4b50      	ldr	r3, [pc, #320]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_RCC_OscConfig+0x162>
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	2b18      	cmp	r3, #24
 8005a2a:	d13a      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x1ce>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d135      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a36:	4b49      	ldr	r3, [pc, #292]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_RCC_OscConfig+0x17a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e34b      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	f7fc fe2d 	bl	80026ac <HAL_GetREVID>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d817      	bhi.n	8005a8c <HAL_RCC_OscConfig+0x1b8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d108      	bne.n	8005a76 <HAL_RCC_OscConfig+0x1a2>
 8005a64:	4b3d      	ldr	r3, [pc, #244]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a6c:	4a3b      	ldr	r2, [pc, #236]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a72:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a74:	e07a      	b.n	8005b6c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	031b      	lsls	r3, r3, #12
 8005a84:	4935      	ldr	r1, [pc, #212]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a8a:	e06f      	b.n	8005b6c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8c:	4b33      	ldr	r3, [pc, #204]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	061b      	lsls	r3, r3, #24
 8005a9a:	4930      	ldr	r1, [pc, #192]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa0:	e064      	b.n	8005b6c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d045      	beq.n	8005b36 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aaa:	4b2c      	ldr	r3, [pc, #176]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0219 	bic.w	r2, r3, #25
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4929      	ldr	r1, [pc, #164]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fc fdea 	bl	8002694 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac4:	f7fc fde6 	bl	8002694 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e307      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad6:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae2:	f7fc fde3 	bl	80026ac <HAL_GetREVID>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d817      	bhi.n	8005b20 <HAL_RCC_OscConfig+0x24c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d108      	bne.n	8005b0a <HAL_RCC_OscConfig+0x236>
 8005af8:	4b18      	ldr	r3, [pc, #96]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b00:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b06:	6053      	str	r3, [r2, #4]
 8005b08:	e030      	b.n	8005b6c <HAL_RCC_OscConfig+0x298>
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	031b      	lsls	r3, r3, #12
 8005b18:	4910      	ldr	r1, [pc, #64]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
 8005b1e:	e025      	b.n	8005b6c <HAL_RCC_OscConfig+0x298>
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	490b      	ldr	r1, [pc, #44]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]
 8005b34:	e01a      	b.n	8005b6c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <HAL_RCC_OscConfig+0x288>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fc fda7 	bl	8002694 <HAL_GetTick>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b48:	e00a      	b.n	8005b60 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b4a:	f7fc fda3 	bl	8002694 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d903      	bls.n	8005b60 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e2c4      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
 8005b5c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b60:	4ba4      	ldr	r3, [pc, #656]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ee      	bne.n	8005b4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80a9 	beq.w	8005ccc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7a:	4b9e      	ldr	r3, [pc, #632]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b84:	4b9b      	ldr	r3, [pc, #620]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d007      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x2cc>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b18      	cmp	r3, #24
 8005b94:	d13a      	bne.n	8005c0c <HAL_RCC_OscConfig+0x338>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d135      	bne.n	8005c0c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ba0:	4b94      	ldr	r3, [pc, #592]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x2e4>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e296      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bb8:	f7fc fd78 	bl	80026ac <HAL_GetREVID>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d817      	bhi.n	8005bf6 <HAL_RCC_OscConfig+0x322>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d108      	bne.n	8005be0 <HAL_RCC_OscConfig+0x30c>
 8005bce:	4b89      	ldr	r3, [pc, #548]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005bd6:	4a87      	ldr	r2, [pc, #540]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bdc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bde:	e075      	b.n	8005ccc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005be0:	4b84      	ldr	r3, [pc, #528]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	069b      	lsls	r3, r3, #26
 8005bee:	4981      	ldr	r1, [pc, #516]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bf4:	e06a      	b.n	8005ccc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bf6:	4b7f      	ldr	r3, [pc, #508]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	497b      	ldr	r1, [pc, #492]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c0a:	e05f      	b.n	8005ccc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d042      	beq.n	8005c9a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c14:	4b77      	ldr	r3, [pc, #476]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a76      	ldr	r2, [pc, #472]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fc fd38 	bl	8002694 <HAL_GetTick>
 8005c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c28:	f7fc fd34 	bl	8002694 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e255      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c3a:	4b6e      	ldr	r3, [pc, #440]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c46:	f7fc fd31 	bl	80026ac <HAL_GetREVID>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d817      	bhi.n	8005c84 <HAL_RCC_OscConfig+0x3b0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d108      	bne.n	8005c6e <HAL_RCC_OscConfig+0x39a>
 8005c5c:	4b65      	ldr	r3, [pc, #404]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c64:	4a63      	ldr	r2, [pc, #396]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c6a:	6053      	str	r3, [r2, #4]
 8005c6c:	e02e      	b.n	8005ccc <HAL_RCC_OscConfig+0x3f8>
 8005c6e:	4b61      	ldr	r3, [pc, #388]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	069b      	lsls	r3, r3, #26
 8005c7c:	495d      	ldr	r1, [pc, #372]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	604b      	str	r3, [r1, #4]
 8005c82:	e023      	b.n	8005ccc <HAL_RCC_OscConfig+0x3f8>
 8005c84:	4b5b      	ldr	r3, [pc, #364]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	061b      	lsls	r3, r3, #24
 8005c92:	4958      	ldr	r1, [pc, #352]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60cb      	str	r3, [r1, #12]
 8005c98:	e018      	b.n	8005ccc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c9a:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a55      	ldr	r2, [pc, #340]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fc fcf5 	bl	8002694 <HAL_GetTick>
 8005caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005cae:	f7fc fcf1 	bl	8002694 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e212      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cc0:	4b4c      	ldr	r3, [pc, #304]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d036      	beq.n	8005d46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d019      	beq.n	8005d14 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ce0:	4b44      	ldr	r3, [pc, #272]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce4:	4a43      	ldr	r2, [pc, #268]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fc fcd2 	bl	8002694 <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf4:	f7fc fcce 	bl	8002694 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e1ef      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d06:	4b3b      	ldr	r3, [pc, #236]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x420>
 8005d12:	e018      	b.n	8005d46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d14:	4b37      	ldr	r3, [pc, #220]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d18:	4a36      	ldr	r2, [pc, #216]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d20:	f7fc fcb8 	bl	8002694 <HAL_GetTick>
 8005d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d28:	f7fc fcb4 	bl	8002694 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e1d5      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d3a:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d036      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d019      	beq.n	8005d8e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d5a:	4b26      	ldr	r3, [pc, #152]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a25      	ldr	r2, [pc, #148]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d66:	f7fc fc95 	bl	8002694 <HAL_GetTick>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d6e:	f7fc fc91 	bl	8002694 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e1b2      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x49a>
 8005d8c:	e018      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d8e:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d9a:	f7fc fc7b 	bl	8002694 <HAL_GetTick>
 8005d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005da2:	f7fc fc77 	bl	8002694 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e198      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <HAL_RCC_OscConfig+0x520>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f0      	bne.n	8005da2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8085 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_RCC_OscConfig+0x524>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a09      	ldr	r2, [pc, #36]	; (8005df8 <HAL_RCC_OscConfig+0x524>)
 8005dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dda:	f7fc fc5b 	bl	8002694 <HAL_GetTick>
 8005dde:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005de0:	e00c      	b.n	8005dfc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005de2:	f7fc fc57 	bl	8002694 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b64      	cmp	r3, #100	; 0x64
 8005dee:	d905      	bls.n	8005dfc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e178      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
 8005df4:	58024400 	.word	0x58024400
 8005df8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dfc:	4b96      	ldr	r3, [pc, #600]	; (8006058 <HAL_RCC_OscConfig+0x784>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0ec      	beq.n	8005de2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d106      	bne.n	8005e1e <HAL_RCC_OscConfig+0x54a>
 8005e10:	4b92      	ldr	r3, [pc, #584]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	4a91      	ldr	r2, [pc, #580]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1c:	e02d      	b.n	8005e7a <HAL_RCC_OscConfig+0x5a6>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10c      	bne.n	8005e40 <HAL_RCC_OscConfig+0x56c>
 8005e26:	4b8d      	ldr	r3, [pc, #564]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	4a8c      	ldr	r2, [pc, #560]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	6713      	str	r3, [r2, #112]	; 0x70
 8005e32:	4b8a      	ldr	r3, [pc, #552]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	4a89      	ldr	r2, [pc, #548]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3e:	e01c      	b.n	8005e7a <HAL_RCC_OscConfig+0x5a6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d10c      	bne.n	8005e62 <HAL_RCC_OscConfig+0x58e>
 8005e48:	4b84      	ldr	r3, [pc, #528]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a83      	ldr	r2, [pc, #524]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e4e:	f043 0304 	orr.w	r3, r3, #4
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	4b81      	ldr	r3, [pc, #516]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a80      	ldr	r2, [pc, #512]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e60:	e00b      	b.n	8005e7a <HAL_RCC_OscConfig+0x5a6>
 8005e62:	4b7e      	ldr	r3, [pc, #504]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	4a7d      	ldr	r2, [pc, #500]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6e:	4b7b      	ldr	r3, [pc, #492]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	4a7a      	ldr	r2, [pc, #488]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005e74:	f023 0304 	bic.w	r3, r3, #4
 8005e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d015      	beq.n	8005eae <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fc fc07 	bl	8002694 <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fc fc03 	bl	8002694 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e122      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea0:	4b6e      	ldr	r3, [pc, #440]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0ee      	beq.n	8005e8a <HAL_RCC_OscConfig+0x5b6>
 8005eac:	e014      	b.n	8005ed8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7fc fbf1 	bl	8002694 <HAL_GetTick>
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005eb4:	e00a      	b.n	8005ecc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb6:	f7fc fbed 	bl	8002694 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e10c      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ecc:	4b63      	ldr	r3, [pc, #396]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1ee      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8101 	beq.w	80060e4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ee2:	4b5e      	ldr	r3, [pc, #376]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eea:	2b18      	cmp	r3, #24
 8005eec:	f000 80bc 	beq.w	8006068 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	f040 8095 	bne.w	8006024 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efa:	4b58      	ldr	r3, [pc, #352]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a57      	ldr	r2, [pc, #348]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fc fbc5 	bl	8002694 <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f0e:	f7fc fbc1 	bl	8002694 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e0e2      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f20:	4b4e      	ldr	r3, [pc, #312]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f0      	bne.n	8005f0e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f30:	4b4b      	ldr	r3, [pc, #300]	; (8006060 <HAL_RCC_OscConfig+0x78c>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f3c:	0112      	lsls	r2, r2, #4
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	4946      	ldr	r1, [pc, #280]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	628b      	str	r3, [r1, #40]	; 0x28
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	3b01      	subs	r3, #1
 8005f56:	025b      	lsls	r3, r3, #9
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	3b01      	subs	r3, #1
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	061b      	lsls	r3, r3, #24
 8005f72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f76:	4939      	ldr	r1, [pc, #228]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f7c:	4b37      	ldr	r3, [pc, #220]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	4a36      	ldr	r2, [pc, #216]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <HAL_RCC_OscConfig+0x790>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f94:	00d2      	lsls	r2, r2, #3
 8005f96:	4931      	ldr	r1, [pc, #196]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f9c:	4b2f      	ldr	r3, [pc, #188]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	f023 020c 	bic.w	r2, r3, #12
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	492c      	ldr	r1, [pc, #176]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fae:	4b2b      	ldr	r3, [pc, #172]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f023 0202 	bic.w	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	4928      	ldr	r1, [pc, #160]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fc0:	4b26      	ldr	r3, [pc, #152]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	4a25      	ldr	r2, [pc, #148]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fcc:	4b23      	ldr	r3, [pc, #140]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a22      	ldr	r2, [pc, #136]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005fd8:	4b20      	ldr	r3, [pc, #128]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4a1f      	ldr	r2, [pc, #124]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a19      	ldr	r2, [pc, #100]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8005ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fc fb4a 	bl	8002694 <HAL_GetTick>
 8006000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006004:	f7fc fb46 	bl	8002694 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e067      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x730>
 8006022:	e05f      	b.n	80060e4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <HAL_RCC_OscConfig+0x788>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0c      	ldr	r2, [pc, #48]	; (800605c <HAL_RCC_OscConfig+0x788>)
 800602a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800602e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fc fb30 	bl	8002694 <HAL_GetTick>
 8006034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006038:	f7fc fb2c 	bl	8002694 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e04d      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <HAL_RCC_OscConfig+0x788>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x764>
 8006056:	e045      	b.n	80060e4 <HAL_RCC_OscConfig+0x810>
 8006058:	58024800 	.word	0x58024800
 800605c:	58024400 	.word	0x58024400
 8006060:	fffffc0c 	.word	0xfffffc0c
 8006064:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006068:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <HAL_RCC_OscConfig+0x81c>)
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <HAL_RCC_OscConfig+0x81c>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b01      	cmp	r3, #1
 800607a:	d031      	beq.n	80060e0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f003 0203 	and.w	r2, r3, #3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006086:	429a      	cmp	r2, r3
 8006088:	d12a      	bne.n	80060e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	091b      	lsrs	r3, r3, #4
 800608e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006096:	429a      	cmp	r2, r3
 8006098:	d122      	bne.n	80060e0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d11a      	bne.n	80060e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	0a5b      	lsrs	r3, r3, #9
 80060ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d111      	bne.n	80060e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	0c1b      	lsrs	r3, r3, #16
 80060c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d108      	bne.n	80060e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	0e1b      	lsrs	r3, r3, #24
 80060d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d001      	beq.n	80060e4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3730      	adds	r7, #48	; 0x30
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400

080060f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e19c      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006108:	4b8a      	ldr	r3, [pc, #552]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d910      	bls.n	8006138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4b87      	ldr	r3, [pc, #540]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f023 020f 	bic.w	r2, r3, #15
 800611e:	4985      	ldr	r1, [pc, #532]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	4313      	orrs	r3, r2
 8006124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006126:	4b83      	ldr	r3, [pc, #524]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e184      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	4b7b      	ldr	r3, [pc, #492]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006150:	429a      	cmp	r2, r3
 8006152:	d908      	bls.n	8006166 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006154:	4b78      	ldr	r3, [pc, #480]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	4975      	ldr	r1, [pc, #468]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006162:	4313      	orrs	r3, r2
 8006164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d010      	beq.n	8006194 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	4b70      	ldr	r3, [pc, #448]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800617e:	429a      	cmp	r2, r3
 8006180:	d908      	bls.n	8006194 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006182:	4b6d      	ldr	r3, [pc, #436]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	496a      	ldr	r1, [pc, #424]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006190:	4313      	orrs	r3, r2
 8006192:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	d010      	beq.n	80061c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699a      	ldr	r2, [r3, #24]
 80061a4:	4b64      	ldr	r3, [pc, #400]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d908      	bls.n	80061c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061b0:	4b61      	ldr	r3, [pc, #388]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	495e      	ldr	r1, [pc, #376]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d010      	beq.n	80061f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69da      	ldr	r2, [r3, #28]
 80061d2:	4b59      	ldr	r3, [pc, #356]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061da:	429a      	cmp	r2, r3
 80061dc:	d908      	bls.n	80061f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061de:	4b56      	ldr	r3, [pc, #344]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	4953      	ldr	r1, [pc, #332]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d010      	beq.n	800621e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	4b4d      	ldr	r3, [pc, #308]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	429a      	cmp	r2, r3
 800620a:	d908      	bls.n	800621e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800620c:	4b4a      	ldr	r3, [pc, #296]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	f023 020f 	bic.w	r2, r3, #15
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4947      	ldr	r1, [pc, #284]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 800621a:	4313      	orrs	r3, r2
 800621c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d055      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800622a:	4b43      	ldr	r3, [pc, #268]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	4940      	ldr	r1, [pc, #256]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006238:	4313      	orrs	r3, r2
 800623a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d107      	bne.n	8006254 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006244:	4b3c      	ldr	r3, [pc, #240]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d121      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0f6      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d107      	bne.n	800626c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800625c:	4b36      	ldr	r3, [pc, #216]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d115      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0ea      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006274:	4b30      	ldr	r3, [pc, #192]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0de      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006284:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0d6      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006294:	4b28      	ldr	r3, [pc, #160]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f023 0207 	bic.w	r2, r3, #7
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4925      	ldr	r1, [pc, #148]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a6:	f7fc f9f5 	bl	8002694 <HAL_GetTick>
 80062aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ac:	e00a      	b.n	80062c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ae:	f7fc f9f1 	bl	8002694 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e0be      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c4:	4b1c      	ldr	r3, [pc, #112]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d1eb      	bne.n	80062ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d010      	beq.n	8006304 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d208      	bcs.n	8006304 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f2:	4b11      	ldr	r3, [pc, #68]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f023 020f 	bic.w	r2, r3, #15
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	490e      	ldr	r1, [pc, #56]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 8006300:	4313      	orrs	r3, r2
 8006302:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006304:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d214      	bcs.n	800633c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b08      	ldr	r3, [pc, #32]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 020f 	bic.w	r2, r3, #15
 800631a:	4906      	ldr	r1, [pc, #24]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d005      	beq.n	800633c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e086      	b.n	8006442 <HAL_RCC_ClockConfig+0x34e>
 8006334:	52002000 	.word	0x52002000
 8006338:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d010      	beq.n	800636a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	4b3f      	ldr	r3, [pc, #252]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006354:	429a      	cmp	r2, r3
 8006356:	d208      	bcs.n	800636a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006358:	4b3c      	ldr	r3, [pc, #240]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	4939      	ldr	r1, [pc, #228]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 8006366:	4313      	orrs	r3, r2
 8006368:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	4b34      	ldr	r3, [pc, #208]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006382:	429a      	cmp	r2, r3
 8006384:	d208      	bcs.n	8006398 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006386:	4b31      	ldr	r3, [pc, #196]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	492e      	ldr	r1, [pc, #184]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 8006394:	4313      	orrs	r3, r2
 8006396:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d010      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699a      	ldr	r2, [r3, #24]
 80063a8:	4b28      	ldr	r3, [pc, #160]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d208      	bcs.n	80063c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063b4:	4b25      	ldr	r3, [pc, #148]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	4922      	ldr	r1, [pc, #136]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d010      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69da      	ldr	r2, [r3, #28]
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063de:	429a      	cmp	r2, r3
 80063e0:	d208      	bcs.n	80063f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063e2:	4b1a      	ldr	r3, [pc, #104]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	4917      	ldr	r1, [pc, #92]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063f4:	f000 f834 	bl	8006460 <HAL_RCC_GetSysClockFreq>
 80063f8:	4602      	mov	r2, r0
 80063fa:	4b14      	ldr	r3, [pc, #80]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	4912      	ldr	r1, [pc, #72]	; (8006450 <HAL_RCC_ClockConfig+0x35c>)
 8006406:	5ccb      	ldrb	r3, [r1, r3]
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
 8006410:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <HAL_RCC_ClockConfig+0x358>)
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <HAL_RCC_ClockConfig+0x35c>)
 800641c:	5cd3      	ldrb	r3, [r2, r3]
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <HAL_RCC_ClockConfig+0x360>)
 800642a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800642c:	4a0a      	ldr	r2, [pc, #40]	; (8006458 <HAL_RCC_ClockConfig+0x364>)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <HAL_RCC_ClockConfig+0x368>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fc f8e2 	bl	8002600 <HAL_InitTick>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	58024400 	.word	0x58024400
 8006450:	0800c344 	.word	0x0800c344
 8006454:	20000004 	.word	0x20000004
 8006458:	20000000 	.word	0x20000000
 800645c:	20000008 	.word	0x20000008

08006460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006466:	4bb3      	ldr	r3, [pc, #716]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800646e:	2b18      	cmp	r3, #24
 8006470:	f200 8155 	bhi.w	800671e <HAL_RCC_GetSysClockFreq+0x2be>
 8006474:	a201      	add	r2, pc, #4	; (adr r2, 800647c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647a:	bf00      	nop
 800647c:	080064e1 	.word	0x080064e1
 8006480:	0800671f 	.word	0x0800671f
 8006484:	0800671f 	.word	0x0800671f
 8006488:	0800671f 	.word	0x0800671f
 800648c:	0800671f 	.word	0x0800671f
 8006490:	0800671f 	.word	0x0800671f
 8006494:	0800671f 	.word	0x0800671f
 8006498:	0800671f 	.word	0x0800671f
 800649c:	08006507 	.word	0x08006507
 80064a0:	0800671f 	.word	0x0800671f
 80064a4:	0800671f 	.word	0x0800671f
 80064a8:	0800671f 	.word	0x0800671f
 80064ac:	0800671f 	.word	0x0800671f
 80064b0:	0800671f 	.word	0x0800671f
 80064b4:	0800671f 	.word	0x0800671f
 80064b8:	0800671f 	.word	0x0800671f
 80064bc:	0800650d 	.word	0x0800650d
 80064c0:	0800671f 	.word	0x0800671f
 80064c4:	0800671f 	.word	0x0800671f
 80064c8:	0800671f 	.word	0x0800671f
 80064cc:	0800671f 	.word	0x0800671f
 80064d0:	0800671f 	.word	0x0800671f
 80064d4:	0800671f 	.word	0x0800671f
 80064d8:	0800671f 	.word	0x0800671f
 80064dc:	08006513 	.word	0x08006513
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e0:	4b94      	ldr	r3, [pc, #592]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064ec:	4b91      	ldr	r3, [pc, #580]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	08db      	lsrs	r3, r3, #3
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	4a90      	ldr	r2, [pc, #576]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
 80064fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80064fe:	e111      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006500:	4b8d      	ldr	r3, [pc, #564]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006502:	61bb      	str	r3, [r7, #24]
    break;
 8006504:	e10e      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006506:	4b8d      	ldr	r3, [pc, #564]	; (800673c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006508:	61bb      	str	r3, [r7, #24]
    break;
 800650a:	e10b      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800650c:	4b8c      	ldr	r3, [pc, #560]	; (8006740 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800650e:	61bb      	str	r3, [r7, #24]
    break;
 8006510:	e108      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006512:	4b88      	ldr	r3, [pc, #544]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800651c:	4b85      	ldr	r3, [pc, #532]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006526:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006528:	4b82      	ldr	r3, [pc, #520]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006532:	4b80      	ldr	r3, [pc, #512]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	08db      	lsrs	r3, r3, #3
 8006538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80e1 	beq.w	8006718 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b02      	cmp	r3, #2
 800655a:	f000 8083 	beq.w	8006664 <HAL_RCC_GetSysClockFreq+0x204>
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b02      	cmp	r3, #2
 8006562:	f200 80a1 	bhi.w	80066a8 <HAL_RCC_GetSysClockFreq+0x248>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_RCC_GetSysClockFreq+0x114>
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d056      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006572:	e099      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006574:	4b6f      	ldr	r3, [pc, #444]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d02d      	beq.n	80065dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006580:	4b6c      	ldr	r3, [pc, #432]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	08db      	lsrs	r3, r3, #3
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	4a6b      	ldr	r2, [pc, #428]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
 8006590:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065aa:	4b62      	ldr	r3, [pc, #392]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80065be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006744 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80065da:	e087      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2e8>
 80065ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ee:	4b51      	ldr	r3, [pc, #324]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006602:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006744 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800661e:	e065      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800674c <HAL_RCC_GetSysClockFreq+0x2ec>
 800662e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006632:	4b40      	ldr	r3, [pc, #256]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006642:	ed97 6a02 	vldr	s12, [r7, #8]
 8006646:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006744 <HAL_RCC_GetSysClockFreq+0x2e4>
 800664a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006662:	e043      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006750 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006676:	4b2f      	ldr	r3, [pc, #188]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006686:	ed97 6a02 	vldr	s12, [r7, #8]
 800668a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006744 <HAL_RCC_GetSysClockFreq+0x2e4>
 800668e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800669a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066a6:	e021      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800674c <HAL_RCC_GetSysClockFreq+0x2ec>
 80066b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ba:	4b1e      	ldr	r3, [pc, #120]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006744 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066ec:	4b11      	ldr	r3, [pc, #68]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	0a5b      	lsrs	r3, r3, #9
 80066f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f6:	3301      	adds	r3, #1
 80066f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006704:	edd7 6a07 	vldr	s13, [r7, #28]
 8006708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006710:	ee17 3a90 	vmov	r3, s15
 8006714:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006716:	e005      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
    break;
 800671c:	e002      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006720:	61bb      	str	r3, [r7, #24]
    break;
 8006722:	bf00      	nop
  }

  return sysclockfreq;
 8006724:	69bb      	ldr	r3, [r7, #24]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3724      	adds	r7, #36	; 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	58024400 	.word	0x58024400
 8006738:	03d09000 	.word	0x03d09000
 800673c:	003d0900 	.word	0x003d0900
 8006740:	02dc6c00 	.word	0x02dc6c00
 8006744:	46000000 	.word	0x46000000
 8006748:	4c742400 	.word	0x4c742400
 800674c:	4a742400 	.word	0x4a742400
 8006750:	4c371b00 	.word	0x4c371b00

08006754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800675a:	f7ff fe81 	bl	8006460 <HAL_RCC_GetSysClockFreq>
 800675e:	4602      	mov	r2, r0
 8006760:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	490f      	ldr	r1, [pc, #60]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800676c:	5ccb      	ldrb	r3, [r1, r3]
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006782:	5cd3      	ldrb	r3, [r2, r3]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	fa22 f303 	lsr.w	r3, r2, r3
 800678e:	4a07      	ldr	r2, [pc, #28]	; (80067ac <HAL_RCC_GetHCLKFreq+0x58>)
 8006790:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006792:	4a07      	ldr	r2, [pc, #28]	; (80067b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <HAL_RCC_GetHCLKFreq+0x58>)
 800679a:	681b      	ldr	r3, [r3, #0]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	58024400 	.word	0x58024400
 80067a8:	0800c344 	.word	0x0800c344
 80067ac:	20000004 	.word	0x20000004
 80067b0:	20000000 	.word	0x20000000

080067b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80067b8:	f7ff ffcc 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 80067bc:	4602      	mov	r2, r0
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	4904      	ldr	r1, [pc, #16]	; (80067dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80067ca:	5ccb      	ldrb	r3, [r1, r3]
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	58024400 	.word	0x58024400
 80067dc:	0800c344 	.word	0x0800c344

080067e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067e4:	f7ff ffb6 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b06      	ldr	r3, [pc, #24]	; (8006804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4904      	ldr	r1, [pc, #16]	; (8006808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006800:	4618      	mov	r0, r3
 8006802:	bd80      	pop	{r7, pc}
 8006804:	58024400 	.word	0x58024400
 8006808:	0800c344 	.word	0x0800c344

0800680c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006814:	2300      	movs	r3, #0
 8006816:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006818:	2300      	movs	r3, #0
 800681a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d03f      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006830:	d02a      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006832:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006836:	d824      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800683c:	d018      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800683e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006842:	d81e      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684c:	d007      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800684e:	e018      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006850:	4bab      	ldr	r3, [pc, #684]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4aaa      	ldr	r2, [pc, #680]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800685c:	e015      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3304      	adds	r3, #4
 8006862:	2102      	movs	r1, #2
 8006864:	4618      	mov	r0, r3
 8006866:	f001 f9cf 	bl	8007c08 <RCCEx_PLL2_Config>
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800686e:	e00c      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3324      	adds	r3, #36	; 0x24
 8006874:	2102      	movs	r1, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fa78 	bl	8007d6c <RCCEx_PLL3_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006880:	e003      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	75fb      	strb	r3, [r7, #23]
      break;
 8006886:	e000      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006890:	4b9b      	ldr	r3, [pc, #620]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800689c:	4998      	ldr	r1, [pc, #608]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	650b      	str	r3, [r1, #80]	; 0x50
 80068a2:	e001      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d03d      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d826      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068d9 	.word	0x080068d9
 80068c8:	080068e7 	.word	0x080068e7
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	08006911 	.word	0x08006911
 80068d4:	08006911 	.word	0x08006911
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d8:	4b89      	ldr	r3, [pc, #548]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	4a88      	ldr	r2, [pc, #544]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068e4:	e015      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3304      	adds	r3, #4
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 f98b 	bl	8007c08 <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068f6:	e00c      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	2100      	movs	r1, #0
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 fa34 	bl	8007d6c <RCCEx_PLL3_Config>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006908:	e003      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	75fb      	strb	r3, [r7, #23]
      break;
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006918:	4b79      	ldr	r3, [pc, #484]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	f023 0207 	bic.w	r2, r3, #7
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	4976      	ldr	r1, [pc, #472]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006926:	4313      	orrs	r3, r2
 8006928:	650b      	str	r3, [r1, #80]	; 0x50
 800692a:	e001      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006938:	2b00      	cmp	r3, #0
 800693a:	d042      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006944:	d02b      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	d825      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800694c:	2bc0      	cmp	r3, #192	; 0xc0
 800694e:	d028      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006950:	2bc0      	cmp	r3, #192	; 0xc0
 8006952:	d821      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d016      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006958:	2b80      	cmp	r3, #128	; 0x80
 800695a:	d81d      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d007      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006964:	e018      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006966:	4b66      	ldr	r3, [pc, #408]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	4a65      	ldr	r2, [pc, #404]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800696c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006970:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006972:	e017      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3304      	adds	r3, #4
 8006978:	2100      	movs	r1, #0
 800697a:	4618      	mov	r0, r3
 800697c:	f001 f944 	bl	8007c08 <RCCEx_PLL2_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006984:	e00e      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3324      	adds	r3, #36	; 0x24
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f001 f9ed 	bl	8007d6c <RCCEx_PLL3_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006996:	e005      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
      break;
 800699c:	e002      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80069a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80069aa:	4b55      	ldr	r3, [pc, #340]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b6:	4952      	ldr	r1, [pc, #328]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	650b      	str	r3, [r1, #80]	; 0x50
 80069bc:	e001      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d049      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d8:	d030      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80069da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069de:	d82a      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069e4:	d02c      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80069e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069ea:	d824      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f0:	d018      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f6:	d81e      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80069fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a00:	d007      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006a02:	e018      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a04:	4b3e      	ldr	r3, [pc, #248]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	4a3d      	ldr	r2, [pc, #244]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a10:	e017      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3304      	adds	r3, #4
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 f8f5 	bl	8007c08 <RCCEx_PLL2_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a22:	e00e      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 f99e 	bl	8007d6c <RCCEx_PLL3_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a34:	e005      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3a:	e002      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a3c:	bf00      	nop
 8006a3e:	e000      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a48:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a56:	492a      	ldr	r1, [pc, #168]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	658b      	str	r3, [r1, #88]	; 0x58
 8006a5c:	e001      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d04c      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a78:	d030      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a7e:	d82a      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a84:	d02c      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006a86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a8a:	d824      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a90:	d018      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a96:	d81e      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aa0:	d007      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006aa2:	e018      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ab0:	e017      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 f8a5 	bl	8007c08 <RCCEx_PLL2_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ac2:	e00e      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3324      	adds	r3, #36	; 0x24
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 f94e 	bl	8007d6c <RCCEx_PLL3_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ad4:	e005      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ada:	e002      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006adc:	bf00      	nop
 8006ade:	e000      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10d      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006af6:	4902      	ldr	r1, [pc, #8]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	658b      	str	r3, [r1, #88]	; 0x58
 8006afc:	e004      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006afe:	bf00      	nop
 8006b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d032      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b18:	2b30      	cmp	r3, #48	; 0x30
 8006b1a:	d01c      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006b1c:	2b30      	cmp	r3, #48	; 0x30
 8006b1e:	d817      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d00c      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d813      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d016      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d10f      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b30:	4baf      	ldr	r3, [pc, #700]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	4aae      	ldr	r2, [pc, #696]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b3c:	e00e      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3304      	adds	r3, #4
 8006b42:	2102      	movs	r1, #2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 f85f 	bl	8007c08 <RCCEx_PLL2_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b4e:	e005      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	75fb      	strb	r3, [r7, #23]
      break;
 8006b54:	e002      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006b56:	bf00      	nop
 8006b58:	e000      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b62:	4ba3      	ldr	r3, [pc, #652]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6e:	49a0      	ldr	r1, [pc, #640]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b74:	e001      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d047      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8e:	d030      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b94:	d82a      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006b96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b9a:	d02c      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006b9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ba0:	d824      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d018      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bac:	d81e      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	d007      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006bb8:	e018      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bba:	4b8d      	ldr	r3, [pc, #564]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	4a8c      	ldr	r2, [pc, #560]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bc6:	e017      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 f81a 	bl	8007c08 <RCCEx_PLL2_Config>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bd8:	e00e      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3324      	adds	r3, #36	; 0x24
 8006bde:	2100      	movs	r1, #0
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 f8c3 	bl	8007d6c <RCCEx_PLL3_Config>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bea:	e005      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf0:	e002      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006bf2:	bf00      	nop
 8006bf4:	e000      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bfe:	4b7c      	ldr	r3, [pc, #496]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c02:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0a:	4979      	ldr	r1, [pc, #484]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	650b      	str	r3, [r1, #80]	; 0x50
 8006c10:	e001      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d049      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c2a:	d02e      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c30:	d828      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006c32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c36:	d02a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006c38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c3c:	d822      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c42:	d026      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006c44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c48:	d81c      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c54:	d816      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01d      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5e:	d111      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	2101      	movs	r1, #1
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 ffce 	bl	8007c08 <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c70:	e012      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3324      	adds	r3, #36	; 0x24
 8006c76:	2101      	movs	r1, #1
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 f877 	bl	8007d6c <RCCEx_PLL3_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c82:	e009      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
      break;
 8006c88:	e006      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c9e:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006caa:	4951      	ldr	r1, [pc, #324]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	650b      	str	r3, [r1, #80]	; 0x50
 8006cb0:	e001      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d04b      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ccc:	d02e      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cd2:	d828      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d02a      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cde:	d822      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ce4:	d026      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006ce6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cea:	d81c      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf0:	d010      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf6:	d816      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01d      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d00:	d111      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	2101      	movs	r1, #1
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 ff7d 	bl	8007c08 <RCCEx_PLL2_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d12:	e012      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3324      	adds	r3, #36	; 0x24
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 f826 	bl	8007d6c <RCCEx_PLL3_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d24:	e009      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2a:	e006      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006d2c:	bf00      	nop
 8006d2e:	e004      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d40:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d44:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d4e:	4928      	ldr	r1, [pc, #160]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	658b      	str	r3, [r1, #88]	; 0x58
 8006d54:	e001      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d02f      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6e:	d00e      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d74:	d814      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d015      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d7e:	d10f      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d80:	4b1b      	ldr	r3, [pc, #108]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4a1a      	ldr	r2, [pc, #104]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d8c:	e00c      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3304      	adds	r3, #4
 8006d92:	2101      	movs	r1, #1
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 ff37 	bl	8007c08 <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d9e:	e003      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
      break;
 8006da4:	e000      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dba:	490d      	ldr	r1, [pc, #52]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	650b      	str	r3, [r1, #80]	; 0x50
 8006dc0:	e001      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d033      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d81c      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e1b 	.word	0x08006e1b
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e03 	.word	0x08006e03
 8006dec:	08006e1b 	.word	0x08006e1b
 8006df0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df4:	4bb8      	ldr	r3, [pc, #736]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4ab7      	ldr	r2, [pc, #732]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e00:	e00c      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	2102      	movs	r1, #2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fefd 	bl	8007c08 <RCCEx_PLL2_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e12:	e003      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	75fb      	strb	r3, [r7, #23]
      break;
 8006e18:	e000      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e22:	4bad      	ldr	r3, [pc, #692]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e26:	f023 0203 	bic.w	r2, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	49aa      	ldr	r1, [pc, #680]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e34:	e001      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8086 	beq.w	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e48:	4ba4      	ldr	r3, [pc, #656]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4aa3      	ldr	r2, [pc, #652]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e54:	f7fb fc1e 	bl	8002694 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e5a:	e009      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5c:	f7fb fc1a 	bl	8002694 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b64      	cmp	r3, #100	; 0x64
 8006e68:	d902      	bls.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	75fb      	strb	r3, [r7, #23]
        break;
 8006e6e:	e005      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e70:	4b9a      	ldr	r3, [pc, #616]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0ef      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d166      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e82:	4b95      	ldr	r3, [pc, #596]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e8c:	4053      	eors	r3, r2
 8006e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d013      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e96:	4b90      	ldr	r3, [pc, #576]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ea0:	4b8d      	ldr	r3, [pc, #564]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	4a8c      	ldr	r2, [pc, #560]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eaa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006eac:	4b8a      	ldr	r3, [pc, #552]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	4a89      	ldr	r2, [pc, #548]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006eb8:	4a87      	ldr	r2, [pc, #540]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec8:	d115      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eca:	f7fb fbe3 	bl	8002694 <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed0:	e00b      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed2:	f7fb fbdf 	bl	8002694 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d902      	bls.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ee8:	e005      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eea:	4b7b      	ldr	r3, [pc, #492]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0ed      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d126      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f0a:	d10d      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006f0c:	4b72      	ldr	r3, [pc, #456]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f1a:	0919      	lsrs	r1, r3, #4
 8006f1c:	4b70      	ldr	r3, [pc, #448]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006f1e:	400b      	ands	r3, r1
 8006f20:	496d      	ldr	r1, [pc, #436]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	610b      	str	r3, [r1, #16]
 8006f26:	e005      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006f28:	4b6b      	ldr	r3, [pc, #428]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	4a6a      	ldr	r2, [pc, #424]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f32:	6113      	str	r3, [r2, #16]
 8006f34:	4b68      	ldr	r3, [pc, #416]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f42:	4965      	ldr	r1, [pc, #404]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	670b      	str	r3, [r1, #112]	; 0x70
 8006f48:	e004      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	75bb      	strb	r3, [r7, #22]
 8006f4e:	e001      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d07e      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f64:	2b28      	cmp	r3, #40	; 0x28
 8006f66:	d867      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	0800703f 	.word	0x0800703f
 8006f74:	08007039 	.word	0x08007039
 8006f78:	08007039 	.word	0x08007039
 8006f7c:	08007039 	.word	0x08007039
 8006f80:	08007039 	.word	0x08007039
 8006f84:	08007039 	.word	0x08007039
 8006f88:	08007039 	.word	0x08007039
 8006f8c:	08007039 	.word	0x08007039
 8006f90:	08007015 	.word	0x08007015
 8006f94:	08007039 	.word	0x08007039
 8006f98:	08007039 	.word	0x08007039
 8006f9c:	08007039 	.word	0x08007039
 8006fa0:	08007039 	.word	0x08007039
 8006fa4:	08007039 	.word	0x08007039
 8006fa8:	08007039 	.word	0x08007039
 8006fac:	08007039 	.word	0x08007039
 8006fb0:	08007027 	.word	0x08007027
 8006fb4:	08007039 	.word	0x08007039
 8006fb8:	08007039 	.word	0x08007039
 8006fbc:	08007039 	.word	0x08007039
 8006fc0:	08007039 	.word	0x08007039
 8006fc4:	08007039 	.word	0x08007039
 8006fc8:	08007039 	.word	0x08007039
 8006fcc:	08007039 	.word	0x08007039
 8006fd0:	0800703f 	.word	0x0800703f
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007039 	.word	0x08007039
 8006fdc:	08007039 	.word	0x08007039
 8006fe0:	08007039 	.word	0x08007039
 8006fe4:	08007039 	.word	0x08007039
 8006fe8:	08007039 	.word	0x08007039
 8006fec:	08007039 	.word	0x08007039
 8006ff0:	0800703f 	.word	0x0800703f
 8006ff4:	08007039 	.word	0x08007039
 8006ff8:	08007039 	.word	0x08007039
 8006ffc:	08007039 	.word	0x08007039
 8007000:	08007039 	.word	0x08007039
 8007004:	08007039 	.word	0x08007039
 8007008:	08007039 	.word	0x08007039
 800700c:	08007039 	.word	0x08007039
 8007010:	0800703f 	.word	0x0800703f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	2101      	movs	r1, #1
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fdf4 	bl	8007c08 <RCCEx_PLL2_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007024:	e00c      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3324      	adds	r3, #36	; 0x24
 800702a:	2101      	movs	r1, #1
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fe9d 	bl	8007d6c <RCCEx_PLL3_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007036:	e003      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
      break;
 800703c:	e000      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800703e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007046:	4b24      	ldr	r3, [pc, #144]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007052:	4921      	ldr	r1, [pc, #132]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007054:	4313      	orrs	r3, r2
 8007056:	654b      	str	r3, [r1, #84]	; 0x54
 8007058:	e001      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d03e      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706e:	2b05      	cmp	r3, #5
 8007070:	d820      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	080070bb 	.word	0x080070bb
 800707c:	08007091 	.word	0x08007091
 8007080:	080070a3 	.word	0x080070a3
 8007084:	080070bb 	.word	0x080070bb
 8007088:	080070bb 	.word	0x080070bb
 800708c:	080070bb 	.word	0x080070bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3304      	adds	r3, #4
 8007094:	2101      	movs	r1, #1
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fdb6 	bl	8007c08 <RCCEx_PLL2_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80070a0:	e00c      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3324      	adds	r3, #36	; 0x24
 80070a6:	2101      	movs	r1, #1
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fe5f 	bl	8007d6c <RCCEx_PLL3_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80070b2:	e003      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
      break;
 80070b8:	e000      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80070ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d110      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80070c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c6:	f023 0207 	bic.w	r2, r3, #7
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ce:	4902      	ldr	r1, [pc, #8]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	654b      	str	r3, [r1, #84]	; 0x54
 80070d4:	e008      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80070d6:	bf00      	nop
 80070d8:	58024400 	.word	0x58024400
 80070dc:	58024800 	.word	0x58024800
 80070e0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d039      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d820      	bhi.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007147 	.word	0x08007147
 8007108:	0800711d 	.word	0x0800711d
 800710c:	0800712f 	.word	0x0800712f
 8007110:	08007147 	.word	0x08007147
 8007114:	08007147 	.word	0x08007147
 8007118:	08007147 	.word	0x08007147
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	2101      	movs	r1, #1
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fd70 	bl	8007c08 <RCCEx_PLL2_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800712c:	e00c      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3324      	adds	r3, #36	; 0x24
 8007132:	2101      	movs	r1, #1
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fe19 	bl	8007d6c <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800713e:	e003      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	75fb      	strb	r3, [r7, #23]
      break;
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800714e:	4bb7      	ldr	r3, [pc, #732]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007152:	f023 0207 	bic.w	r2, r3, #7
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	49b3      	ldr	r1, [pc, #716]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800715e:	4313      	orrs	r3, r2
 8007160:	658b      	str	r3, [r1, #88]	; 0x58
 8007162:	e001      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d04b      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800717a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800717e:	d02e      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007184:	d828      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718a:	d02a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800718c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007190:	d822      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007196:	d026      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800719c:	d81c      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800719e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a2:	d010      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80071a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a8:	d816      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01d      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80071ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b2:	d111      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3304      	adds	r3, #4
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fd24 	bl	8007c08 <RCCEx_PLL2_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071c4:	e012      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fdcd 	bl	8007d6c <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071d6:	e009      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071f2:	4b8e      	ldr	r3, [pc, #568]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007200:	498a      	ldr	r1, [pc, #552]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007202:	4313      	orrs	r3, r2
 8007204:	654b      	str	r3, [r1, #84]	; 0x54
 8007206:	e001      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d04b      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800721e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007222:	d02e      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007224:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007228:	d828      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722e:	d02a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007234:	d822      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800723a:	d026      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800723c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007240:	d81c      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007246:	d010      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724c:	d816      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01d      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007256:	d111      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fcd2 	bl	8007c08 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007268:	e012      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3324      	adds	r3, #36	; 0x24
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fd7b 	bl	8007d6c <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800727a:	e009      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007282:	bf00      	nop
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800728e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007296:	4b65      	ldr	r3, [pc, #404]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072a4:	4961      	ldr	r1, [pc, #388]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	658b      	str	r3, [r1, #88]	; 0x58
 80072aa:	e001      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d04b      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072c6:	d02e      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80072c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072cc:	d828      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80072ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d2:	d02a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80072d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d8:	d822      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80072da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072de:	d026      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80072e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072e4:	d81c      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80072e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ea:	d010      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80072ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f0:	d816      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01d      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fa:	d111      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fc80 	bl	8007c08 <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800730c:	e012      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3324      	adds	r3, #36	; 0x24
 8007312:	2102      	movs	r1, #2
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fd29 	bl	8007d6c <RCCEx_PLL3_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800731e:	e009      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
      break;
 8007324:	e006      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007326:	bf00      	nop
 8007328:	e004      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800732a:	bf00      	nop
 800732c:	e002      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800732e:	bf00      	nop
 8007330:	e000      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800733a:	4b3c      	ldr	r3, [pc, #240]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007348:	4938      	ldr	r1, [pc, #224]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800734a:	4313      	orrs	r3, r2
 800734c:	658b      	str	r3, [r1, #88]	; 0x58
 800734e:	e001      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01a      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736a:	d10a      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3324      	adds	r3, #36	; 0x24
 8007370:	2102      	movs	r1, #2
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fcfa 	bl	8007d6c <RCCEx_PLL3_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007390:	4926      	ldr	r1, [pc, #152]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007392:	4313      	orrs	r3, r2
 8007394:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ac:	d10a      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3324      	adds	r3, #36	; 0x24
 80073b2:	2102      	movs	r1, #2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fcd9 	bl	8007d6c <RCCEx_PLL3_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073c4:	4b19      	ldr	r3, [pc, #100]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80073c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d2:	4916      	ldr	r1, [pc, #88]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d036      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ee:	d01f      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80073f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073f4:	d817      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80073fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fe:	d009      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007400:	e011      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fbfd 	bl	8007c08 <RCCEx_PLL2_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007412:	e00e      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3324      	adds	r3, #36	; 0x24
 8007418:	2102      	movs	r1, #2
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fca6 	bl	8007d6c <RCCEx_PLL3_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007424:	e005      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	75fb      	strb	r3, [r7, #23]
      break;
 800742a:	e002      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800742c:	58024400 	.word	0x58024400
      break;
 8007430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007438:	4b93      	ldr	r3, [pc, #588]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800743a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007446:	4990      	ldr	r1, [pc, #576]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007448:	4313      	orrs	r3, r2
 800744a:	658b      	str	r3, [r1, #88]	; 0x58
 800744c:	e001      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d033      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007468:	d01c      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800746a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800746e:	d816      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007474:	d003      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800747a:	d007      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800747c:	e00f      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747e:	4b82      	ldr	r3, [pc, #520]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	4a81      	ldr	r2, [pc, #516]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800748a:	e00c      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3324      	adds	r3, #36	; 0x24
 8007490:	2101      	movs	r1, #1
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fc6a 	bl	8007d6c <RCCEx_PLL3_Config>
 8007498:	4603      	mov	r3, r0
 800749a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800749c:	e003      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	75fb      	strb	r3, [r7, #23]
      break;
 80074a2:	e000      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80074a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074ac:	4b76      	ldr	r3, [pc, #472]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ba:	4973      	ldr	r1, [pc, #460]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	654b      	str	r3, [r1, #84]	; 0x54
 80074c0:	e001      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d029      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074de:	d007      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80074e0:	e00f      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e2:	4b69      	ldr	r3, [pc, #420]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e6:	4a68      	ldr	r2, [pc, #416]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074ee:	e00b      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	2102      	movs	r1, #2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fb86 	bl	8007c08 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007500:	e002      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	75fb      	strb	r3, [r7, #23]
      break;
 8007506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800750e:	4b5e      	ldr	r3, [pc, #376]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	495b      	ldr	r1, [pc, #364]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800751c:	4313      	orrs	r3, r2
 800751e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007520:	e001      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2102      	movs	r1, #2
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fc17 	bl	8007d6c <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d030      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755c:	d017      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800755e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007562:	d811      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007568:	d013      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800756a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756e:	d80b      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d010      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007578:	d106      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757a:	4b43      	ldr	r3, [pc, #268]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a42      	ldr	r2, [pc, #264]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007586:	e007      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	75fb      	strb	r3, [r7, #23]
      break;
 800758c:	e004      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800759e:	4b3a      	ldr	r3, [pc, #232]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075aa:	4937      	ldr	r1, [pc, #220]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	654b      	str	r3, [r1, #84]	; 0x54
 80075b0:	e001      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075c2:	4b31      	ldr	r3, [pc, #196]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ce:	492e      	ldr	r1, [pc, #184]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80075e0:	4b29      	ldr	r3, [pc, #164]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075ee:	4926      	ldr	r1, [pc, #152]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007600:	4b21      	ldr	r3, [pc, #132]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007604:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800760c:	491e      	ldr	r1, [pc, #120]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800760e:	4313      	orrs	r3, r2
 8007610:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00d      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800761e:	4b1a      	ldr	r3, [pc, #104]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	4a19      	ldr	r2, [pc, #100]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007624:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007628:	6113      	str	r3, [r2, #16]
 800762a:	4b17      	ldr	r3, [pc, #92]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007634:	4914      	ldr	r1, [pc, #80]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007636:	4313      	orrs	r3, r2
 8007638:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	da08      	bge.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007642:	4b11      	ldr	r3, [pc, #68]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007646:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764e:	490e      	ldr	r1, [pc, #56]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007664:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766e:	4906      	ldr	r1, [pc, #24]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007674:	7dbb      	ldrb	r3, [r7, #22]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	58024400 	.word	0x58024400

0800768c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007690:	f7ff f860 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4904      	ldr	r1, [pc, #16]	; (80076b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	58024400 	.word	0x58024400
 80076b4:	0800c344 	.word	0x0800c344

080076b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b089      	sub	sp, #36	; 0x24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c0:	4ba1      	ldr	r3, [pc, #644]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80076ca:	4b9f      	ldr	r3, [pc, #636]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	0b1b      	lsrs	r3, r3, #12
 80076d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076d6:	4b9c      	ldr	r3, [pc, #624]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	091b      	lsrs	r3, r3, #4
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80076e2:	4b99      	ldr	r3, [pc, #612]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	08db      	lsrs	r3, r3, #3
 80076e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8111 	beq.w	8007928 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2b02      	cmp	r3, #2
 800770a:	f000 8083 	beq.w	8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	f200 80a1 	bhi.w	8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d056      	beq.n	80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007722:	e099      	b.n	8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007724:	4b88      	ldr	r3, [pc, #544]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d02d      	beq.n	800778c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007730:	4b85      	ldr	r3, [pc, #532]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	4a84      	ldr	r2, [pc, #528]	; (800794c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
 8007740:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775a:	4b7b      	ldr	r3, [pc, #492]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776a:	ed97 6a03 	vldr	s12, [r7, #12]
 800776e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007786:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800778a:	e087      	b.n	800789c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007954 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	4b6a      	ldr	r3, [pc, #424]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077ce:	e065      	b.n	800789c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e2:	4b59      	ldr	r3, [pc, #356]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007812:	e043      	b.n	800789c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800795c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007826:	4b48      	ldr	r3, [pc, #288]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	ed97 6a03 	vldr	s12, [r7, #12]
 800783a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007856:	e021      	b.n	800789c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786a:	4b37      	ldr	r3, [pc, #220]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787a:	ed97 6a03 	vldr	s12, [r7, #12]
 800787e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800789a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800789c:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	0a5b      	lsrs	r3, r3, #9
 80078a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c2:	ee17 2a90 	vmov	r2, s15
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80078ca:	4b1f      	ldr	r3, [pc, #124]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	0c1b      	lsrs	r3, r3, #16
 80078d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f0:	ee17 2a90 	vmov	r2, s15
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80078f8:	4b13      	ldr	r3, [pc, #76]	; (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800790e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007912:	edd7 6a07 	vldr	s13, [r7, #28]
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	ee17 2a90 	vmov	r2, s15
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007926:	e008      	b.n	800793a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	609a      	str	r2, [r3, #8]
}
 800793a:	bf00      	nop
 800793c:	3724      	adds	r7, #36	; 0x24
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	03d09000 	.word	0x03d09000
 8007950:	46000000 	.word	0x46000000
 8007954:	4c742400 	.word	0x4c742400
 8007958:	4a742400 	.word	0x4a742400
 800795c:	4c371b00 	.word	0x4c371b00

08007960 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	; 0x24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007968:	4ba1      	ldr	r3, [pc, #644]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007972:	4b9f      	ldr	r3, [pc, #636]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	0d1b      	lsrs	r3, r3, #20
 8007978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800797c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800797e:	4b9c      	ldr	r3, [pc, #624]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800798a:	4b99      	ldr	r3, [pc, #612]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	08db      	lsrs	r3, r3, #3
 8007990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8111 	beq.w	8007bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	f000 8083 	beq.w	8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	f200 80a1 	bhi.w	8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d056      	beq.n	8007a78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079ca:	e099      	b.n	8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079cc:	4b88      	ldr	r3, [pc, #544]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d02d      	beq.n	8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079d8:	4b85      	ldr	r3, [pc, #532]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	08db      	lsrs	r3, r3, #3
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	4a84      	ldr	r2, [pc, #528]	; (8007bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
 80079e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a02:	4b7b      	ldr	r3, [pc, #492]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a32:	e087      	b.n	8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a46:	4b6a      	ldr	r3, [pc, #424]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a76:	e065      	b.n	8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8a:	4b59      	ldr	r3, [pc, #356]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aba:	e043      	b.n	8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ace:	4b48      	ldr	r3, [pc, #288]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007afe:	e021      	b.n	8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b12:	4b37      	ldr	r3, [pc, #220]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007b44:	4b2a      	ldr	r3, [pc, #168]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	0a5b      	lsrs	r3, r3, #9
 8007b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6a:	ee17 2a90 	vmov	r2, s15
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b98:	ee17 2a90 	vmov	r2, s15
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ba0:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	0e1b      	lsrs	r3, r3, #24
 8007ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc6:	ee17 2a90 	vmov	r2, s15
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007bce:	e008      	b.n	8007be2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	609a      	str	r2, [r3, #8]
}
 8007be2:	bf00      	nop
 8007be4:	3724      	adds	r7, #36	; 0x24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	03d09000 	.word	0x03d09000
 8007bf8:	46000000 	.word	0x46000000
 8007bfc:	4c742400 	.word	0x4c742400
 8007c00:	4a742400 	.word	0x4a742400
 8007c04:	4c371b00 	.word	0x4c371b00

08007c08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c16:	4b53      	ldr	r3, [pc, #332]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d101      	bne.n	8007c26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e099      	b.n	8007d5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c26:	4b4f      	ldr	r3, [pc, #316]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a4e      	ldr	r2, [pc, #312]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c32:	f7fa fd2f 	bl	8002694 <HAL_GetTick>
 8007c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c38:	e008      	b.n	8007c4c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c3a:	f7fa fd2b 	bl	8002694 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e086      	b.n	8007d5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c4c:	4b45      	ldr	r3, [pc, #276]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f0      	bne.n	8007c3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c58:	4b42      	ldr	r3, [pc, #264]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	031b      	lsls	r3, r3, #12
 8007c66:	493f      	ldr	r1, [pc, #252]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	025b      	lsls	r3, r3, #9
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c9c:	4931      	ldr	r1, [pc, #196]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ca2:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	492d      	ldr	r1, [pc, #180]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	f023 0220 	bic.w	r2, r3, #32
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	4928      	ldr	r1, [pc, #160]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	4a26      	ldr	r2, [pc, #152]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	f023 0310 	bic.w	r3, r3, #16
 8007cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cd2:	4b24      	ldr	r3, [pc, #144]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cd6:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <RCCEx_PLL2_Config+0x160>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	69d2      	ldr	r2, [r2, #28]
 8007cde:	00d2      	lsls	r2, r2, #3
 8007ce0:	4920      	ldr	r1, [pc, #128]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ce6:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	f043 0310 	orr.w	r3, r3, #16
 8007cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a19      	ldr	r2, [pc, #100]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d04:	e00f      	b.n	8007d26 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d106      	bne.n	8007d1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d0c:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d18:	e005      	b.n	8007d26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a0e      	ldr	r2, [pc, #56]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d32:	f7fa fcaf 	bl	8002694 <HAL_GetTick>
 8007d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d38:	e008      	b.n	8007d4c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d3a:	f7fa fcab 	bl	8002694 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e006      	b.n	8007d5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0f0      	beq.n	8007d3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	58024400 	.word	0x58024400
 8007d68:	ffff0007 	.word	0xffff0007

08007d6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d7a:	4b53      	ldr	r3, [pc, #332]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d101      	bne.n	8007d8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e099      	b.n	8007ebe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d8a:	4b4f      	ldr	r3, [pc, #316]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a4e      	ldr	r2, [pc, #312]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d96:	f7fa fc7d 	bl	8002694 <HAL_GetTick>
 8007d9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d9c:	e008      	b.n	8007db0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d9e:	f7fa fc79 	bl	8002694 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d901      	bls.n	8007db0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e086      	b.n	8007ebe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007db0:	4b45      	ldr	r3, [pc, #276]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f0      	bne.n	8007d9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007dbc:	4b42      	ldr	r3, [pc, #264]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	051b      	lsls	r3, r3, #20
 8007dca:	493f      	ldr	r1, [pc, #252]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	628b      	str	r3, [r1, #40]	; 0x28
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	025b      	lsls	r3, r3, #9
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	041b      	lsls	r3, r3, #16
 8007dee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	061b      	lsls	r3, r3, #24
 8007dfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e00:	4931      	ldr	r1, [pc, #196]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e06:	4b30      	ldr	r3, [pc, #192]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	492d      	ldr	r1, [pc, #180]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e18:	4b2b      	ldr	r3, [pc, #172]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	4928      	ldr	r1, [pc, #160]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e2a:	4b27      	ldr	r3, [pc, #156]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	4a26      	ldr	r2, [pc, #152]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e36:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <RCCEx_PLL3_Config+0x160>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	69d2      	ldr	r2, [r2, #28]
 8007e42:	00d2      	lsls	r2, r2, #3
 8007e44:	4920      	ldr	r1, [pc, #128]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e4a:	4b1f      	ldr	r3, [pc, #124]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d106      	bne.n	8007e6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e5c:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	4a19      	ldr	r2, [pc, #100]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e68:	e00f      	b.n	8007e8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d106      	bne.n	8007e7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e70:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	4a14      	ldr	r2, [pc, #80]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e7c:	e005      	b.n	8007e8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a0e      	ldr	r2, [pc, #56]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e96:	f7fa fbfd 	bl	8002694 <HAL_GetTick>
 8007e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e9c:	e008      	b.n	8007eb0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e9e:	f7fa fbf9 	bl	8002694 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d901      	bls.n	8007eb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e006      	b.n	8007ebe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eb0:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0f0      	beq.n	8007e9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	58024400 	.word	0x58024400
 8007ecc:	ffff0007 	.word	0xffff0007

08007ed0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e0eb      	b.n	80080be <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a75      	ldr	r2, [pc, #468]	; (80080c8 <HAL_SPI_Init+0x1f8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <HAL_SPI_Init+0x46>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a74      	ldr	r2, [pc, #464]	; (80080cc <HAL_SPI_Init+0x1fc>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00a      	beq.n	8007f16 <HAL_SPI_Init+0x46>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a72      	ldr	r2, [pc, #456]	; (80080d0 <HAL_SPI_Init+0x200>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d005      	beq.n	8007f16 <HAL_SPI_Init+0x46>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2b0f      	cmp	r3, #15
 8007f10:	d901      	bls.n	8007f16 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e0d3      	b.n	80080be <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8dc 	bl	80080d4 <SPI_GetPacketSize>
 8007f1c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a69      	ldr	r2, [pc, #420]	; (80080c8 <HAL_SPI_Init+0x1f8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00c      	beq.n	8007f42 <HAL_SPI_Init+0x72>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a67      	ldr	r2, [pc, #412]	; (80080cc <HAL_SPI_Init+0x1fc>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d007      	beq.n	8007f42 <HAL_SPI_Init+0x72>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a66      	ldr	r2, [pc, #408]	; (80080d0 <HAL_SPI_Init+0x200>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d002      	beq.n	8007f42 <HAL_SPI_Init+0x72>
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2b08      	cmp	r3, #8
 8007f40:	d811      	bhi.n	8007f66 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f46:	4a60      	ldr	r2, [pc, #384]	; (80080c8 <HAL_SPI_Init+0x1f8>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a5e      	ldr	r2, [pc, #376]	; (80080cc <HAL_SPI_Init+0x1fc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_SPI_Init+0x90>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a5d      	ldr	r2, [pc, #372]	; (80080d0 <HAL_SPI_Init+0x200>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d104      	bne.n	8007f6a <HAL_SPI_Init+0x9a>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d901      	bls.n	8007f6a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e0a9      	b.n	80080be <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7f9 fd50 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0201 	bic.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fa4:	d119      	bne.n	8007fda <HAL_SPI_Init+0x10a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fae:	d103      	bne.n	8007fb8 <HAL_SPI_Init+0xe8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10c      	bne.n	8007fda <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc8:	d107      	bne.n	8007fda <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69da      	ldr	r2, [r3, #28]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	ea42 0103 	orr.w	r1, r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803a:	ea42 0103 	orr.w	r1, r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d113      	bne.n	800807a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008064:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008078:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	40013000 	.word	0x40013000
 80080cc:	40003800 	.word	0x40003800
 80080d0:	40003c00 	.word	0x40003c00

080080d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e0:	095b      	lsrs	r3, r3, #5
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	3307      	adds	r3, #7
 80080f2:	08db      	lsrs	r3, r3, #3
 80080f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e049      	b.n	80081b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7f9 fcdd 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	3304      	adds	r3, #4
 8008146:	4619      	mov	r1, r3
 8008148:	4610      	mov	r0, r2
 800814a:	f000 fbe1 	bl	8008910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e049      	b.n	800825e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d106      	bne.n	80081e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f841 	bl	8008266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f000 fb8a 	bl	8008910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b02      	cmp	r3, #2
 800828e:	d122      	bne.n	80082d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b02      	cmp	r3, #2
 800829c:	d11b      	bne.n	80082d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f06f 0202 	mvn.w	r2, #2
 80082a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb09 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 80082c2:	e005      	b.n	80082d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fafb 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fb0c 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d122      	bne.n	800832a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d11b      	bne.n	800832a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0204 	mvn.w	r2, #4
 80082fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fadf 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 8008316:	e005      	b.n	8008324 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fad1 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fae2 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b08      	cmp	r3, #8
 8008336:	d122      	bne.n	800837e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b08      	cmp	r3, #8
 8008344:	d11b      	bne.n	800837e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f06f 0208 	mvn.w	r2, #8
 800834e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2204      	movs	r2, #4
 8008354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fab5 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 800836a:	e005      	b.n	8008378 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 faa7 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fab8 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b10      	cmp	r3, #16
 800838a:	d122      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d11b      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f06f 0210 	mvn.w	r2, #16
 80083a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2208      	movs	r2, #8
 80083a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fa8b 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 80083be:	e005      	b.n	80083cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa7d 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa8e 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d10e      	bne.n	80083fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d107      	bne.n	80083fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f06f 0201 	mvn.w	r2, #1
 80083f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7f9 fac8 	bl	800198e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008408:	2b80      	cmp	r3, #128	; 0x80
 800840a:	d10e      	bne.n	800842a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d107      	bne.n	800842a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 ff89 	bl	800933c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008438:	d10e      	bne.n	8008458 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d107      	bne.n	8008458 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 ff7c 	bl	8009350 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d10e      	bne.n	8008484 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d107      	bne.n	8008484 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800847c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa3c 	bl	80088fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b20      	cmp	r3, #32
 8008490:	d10e      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b20      	cmp	r3, #32
 800849e:	d107      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f06f 0220 	mvn.w	r2, #32
 80084a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 ff3c 	bl	8009328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e0fd      	b.n	80086ce <HAL_TIM_PWM_ConfigChannel+0x216>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b14      	cmp	r3, #20
 80084de:	f200 80f0 	bhi.w	80086c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	0800853d 	.word	0x0800853d
 80084ec:	080086c3 	.word	0x080086c3
 80084f0:	080086c3 	.word	0x080086c3
 80084f4:	080086c3 	.word	0x080086c3
 80084f8:	0800857d 	.word	0x0800857d
 80084fc:	080086c3 	.word	0x080086c3
 8008500:	080086c3 	.word	0x080086c3
 8008504:	080086c3 	.word	0x080086c3
 8008508:	080085bf 	.word	0x080085bf
 800850c:	080086c3 	.word	0x080086c3
 8008510:	080086c3 	.word	0x080086c3
 8008514:	080086c3 	.word	0x080086c3
 8008518:	080085ff 	.word	0x080085ff
 800851c:	080086c3 	.word	0x080086c3
 8008520:	080086c3 	.word	0x080086c3
 8008524:	080086c3 	.word	0x080086c3
 8008528:	08008641 	.word	0x08008641
 800852c:	080086c3 	.word	0x080086c3
 8008530:	080086c3 	.word	0x080086c3
 8008534:	080086c3 	.word	0x080086c3
 8008538:	08008681 	.word	0x08008681
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68b9      	ldr	r1, [r7, #8]
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fa7e 	bl	8008a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0208 	orr.w	r2, r2, #8
 8008556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699a      	ldr	r2, [r3, #24]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0204 	bic.w	r2, r2, #4
 8008566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6999      	ldr	r1, [r3, #24]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	691a      	ldr	r2, [r3, #16]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	619a      	str	r2, [r3, #24]
      break;
 800857a:	e0a3      	b.n	80086c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 faee 	bl	8008b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699a      	ldr	r2, [r3, #24]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6999      	ldr	r1, [r3, #24]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	021a      	lsls	r2, r3, #8
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	619a      	str	r2, [r3, #24]
      break;
 80085bc:	e082      	b.n	80086c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fb57 	bl	8008c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69da      	ldr	r2, [r3, #28]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f042 0208 	orr.w	r2, r2, #8
 80085d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0204 	bic.w	r2, r2, #4
 80085e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69d9      	ldr	r1, [r3, #28]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	61da      	str	r2, [r3, #28]
      break;
 80085fc:	e062      	b.n	80086c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68b9      	ldr	r1, [r7, #8]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fbbd 	bl	8008d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69da      	ldr	r2, [r3, #28]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69da      	ldr	r2, [r3, #28]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69d9      	ldr	r1, [r3, #28]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	021a      	lsls	r2, r3, #8
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	61da      	str	r2, [r3, #28]
      break;
 800863e:	e041      	b.n	80086c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fc04 	bl	8008e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f042 0208 	orr.w	r2, r2, #8
 800865a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0204 	bic.w	r2, r2, #4
 800866a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	691a      	ldr	r2, [r3, #16]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800867e:	e021      	b.n	80086c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fc46 	bl	8008f18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800869a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	021a      	lsls	r2, r3, #8
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086c0:	e000      	b.n	80086c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80086c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop

080086d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_ConfigClockSource+0x18>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e0db      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4b69      	ldr	r3, [pc, #420]	; (80088b0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800870c:	4013      	ands	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008716:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a63      	ldr	r2, [pc, #396]	; (80088b4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008726:	4293      	cmp	r3, r2
 8008728:	f000 80a9 	beq.w	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 800872c:	4a61      	ldr	r2, [pc, #388]	; (80088b4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	f200 80ae 	bhi.w	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008734:	4a60      	ldr	r2, [pc, #384]	; (80088b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	f000 80a1 	beq.w	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 800873c:	4a5e      	ldr	r2, [pc, #376]	; (80088b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	f200 80a6 	bhi.w	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008744:	4a5d      	ldr	r2, [pc, #372]	; (80088bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	f000 8099 	beq.w	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 800874c:	4a5b      	ldr	r2, [pc, #364]	; (80088bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	f200 809e 	bhi.w	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008754:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008758:	f000 8091 	beq.w	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 800875c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008760:	f200 8096 	bhi.w	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008768:	f000 8089 	beq.w	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 800876c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008770:	f200 808e 	bhi.w	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008778:	d03e      	beq.n	80087f8 <HAL_TIM_ConfigClockSource+0x120>
 800877a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800877e:	f200 8087 	bhi.w	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008786:	f000 8085 	beq.w	8008894 <HAL_TIM_ConfigClockSource+0x1bc>
 800878a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878e:	d87f      	bhi.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008790:	2b70      	cmp	r3, #112	; 0x70
 8008792:	d01a      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0xf2>
 8008794:	2b70      	cmp	r3, #112	; 0x70
 8008796:	d87b      	bhi.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 8008798:	2b60      	cmp	r3, #96	; 0x60
 800879a:	d050      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x166>
 800879c:	2b60      	cmp	r3, #96	; 0x60
 800879e:	d877      	bhi.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 80087a0:	2b50      	cmp	r3, #80	; 0x50
 80087a2:	d03c      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x146>
 80087a4:	2b50      	cmp	r3, #80	; 0x50
 80087a6:	d873      	bhi.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 80087a8:	2b40      	cmp	r3, #64	; 0x40
 80087aa:	d058      	beq.n	800885e <HAL_TIM_ConfigClockSource+0x186>
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	d86f      	bhi.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 80087b0:	2b30      	cmp	r3, #48	; 0x30
 80087b2:	d064      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 80087b4:	2b30      	cmp	r3, #48	; 0x30
 80087b6:	d86b      	bhi.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d060      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 80087bc:	2b20      	cmp	r3, #32
 80087be:	d867      	bhi.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d05c      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x1a6>
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d05a      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80087c8:	e062      	b.n	8008890 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	6899      	ldr	r1, [r3, #8]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f000 fc7f 	bl	80090dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	609a      	str	r2, [r3, #8]
      break;
 80087f6:	e04e      	b.n	8008896 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	6899      	ldr	r1, [r3, #8]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f000 fc68 	bl	80090dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800881a:	609a      	str	r2, [r3, #8]
      break;
 800881c:	e03b      	b.n	8008896 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6859      	ldr	r1, [r3, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	461a      	mov	r2, r3
 800882c:	f000 fbd8 	bl	8008fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2150      	movs	r1, #80	; 0x50
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fc32 	bl	80090a0 <TIM_ITRx_SetConfig>
      break;
 800883c:	e02b      	b.n	8008896 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	6859      	ldr	r1, [r3, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	461a      	mov	r2, r3
 800884c:	f000 fbf7 	bl	800903e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2160      	movs	r1, #96	; 0x60
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fc22 	bl	80090a0 <TIM_ITRx_SetConfig>
      break;
 800885c:	e01b      	b.n	8008896 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6859      	ldr	r1, [r3, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	461a      	mov	r2, r3
 800886c:	f000 fbb8 	bl	8008fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2140      	movs	r1, #64	; 0x40
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fc12 	bl	80090a0 <TIM_ITRx_SetConfig>
      break;
 800887c:	e00b      	b.n	8008896 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f000 fc09 	bl	80090a0 <TIM_ITRx_SetConfig>
        break;
 800888e:	e002      	b.n	8008896 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008890:	bf00      	nop
 8008892:	e000      	b.n	8008896 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008894:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	ffceff88 	.word	0xffceff88
 80088b4:	00100040 	.word	0x00100040
 80088b8:	00100030 	.word	0x00100030
 80088bc:	00100020 	.word	0x00100020

080088c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a40      	ldr	r2, [pc, #256]	; (8008a24 <TIM_Base_SetConfig+0x114>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d013      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892e:	d00f      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a3d      	ldr	r2, [pc, #244]	; (8008a28 <TIM_Base_SetConfig+0x118>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00b      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a3c      	ldr	r2, [pc, #240]	; (8008a2c <TIM_Base_SetConfig+0x11c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d007      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a3b      	ldr	r2, [pc, #236]	; (8008a30 <TIM_Base_SetConfig+0x120>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a3a      	ldr	r2, [pc, #232]	; (8008a34 <TIM_Base_SetConfig+0x124>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d108      	bne.n	8008962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a2f      	ldr	r2, [pc, #188]	; (8008a24 <TIM_Base_SetConfig+0x114>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01f      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008970:	d01b      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2c      	ldr	r2, [pc, #176]	; (8008a28 <TIM_Base_SetConfig+0x118>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d017      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2b      	ldr	r2, [pc, #172]	; (8008a2c <TIM_Base_SetConfig+0x11c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d013      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2a      	ldr	r2, [pc, #168]	; (8008a30 <TIM_Base_SetConfig+0x120>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00f      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a29      	ldr	r2, [pc, #164]	; (8008a34 <TIM_Base_SetConfig+0x124>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00b      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a28      	ldr	r2, [pc, #160]	; (8008a38 <TIM_Base_SetConfig+0x128>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d007      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a27      	ldr	r2, [pc, #156]	; (8008a3c <TIM_Base_SetConfig+0x12c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d003      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a26      	ldr	r2, [pc, #152]	; (8008a40 <TIM_Base_SetConfig+0x130>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d108      	bne.n	80089bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a10      	ldr	r2, [pc, #64]	; (8008a24 <TIM_Base_SetConfig+0x114>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d00f      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a12      	ldr	r2, [pc, #72]	; (8008a34 <TIM_Base_SetConfig+0x124>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00b      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a11      	ldr	r2, [pc, #68]	; (8008a38 <TIM_Base_SetConfig+0x128>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d007      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a10      	ldr	r2, [pc, #64]	; (8008a3c <TIM_Base_SetConfig+0x12c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a0f      	ldr	r2, [pc, #60]	; (8008a40 <TIM_Base_SetConfig+0x130>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d103      	bne.n	8008a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	691a      	ldr	r2, [r3, #16]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	615a      	str	r2, [r3, #20]
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40010000 	.word	0x40010000
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	40000c00 	.word	0x40000c00
 8008a34:	40010400 	.word	0x40010400
 8008a38:	40014000 	.word	0x40014000
 8008a3c:	40014400 	.word	0x40014400
 8008a40:	40014800 	.word	0x40014800

08008a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	f023 0201 	bic.w	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4b37      	ldr	r3, [pc, #220]	; (8008b4c <TIM_OC1_SetConfig+0x108>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f023 0302 	bic.w	r3, r3, #2
 8008a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a2d      	ldr	r2, [pc, #180]	; (8008b50 <TIM_OC1_SetConfig+0x10c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d00f      	beq.n	8008ac0 <TIM_OC1_SetConfig+0x7c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a2c      	ldr	r2, [pc, #176]	; (8008b54 <TIM_OC1_SetConfig+0x110>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00b      	beq.n	8008ac0 <TIM_OC1_SetConfig+0x7c>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a2b      	ldr	r2, [pc, #172]	; (8008b58 <TIM_OC1_SetConfig+0x114>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d007      	beq.n	8008ac0 <TIM_OC1_SetConfig+0x7c>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a2a      	ldr	r2, [pc, #168]	; (8008b5c <TIM_OC1_SetConfig+0x118>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d003      	beq.n	8008ac0 <TIM_OC1_SetConfig+0x7c>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a29      	ldr	r2, [pc, #164]	; (8008b60 <TIM_OC1_SetConfig+0x11c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d10c      	bne.n	8008ada <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f023 0308 	bic.w	r3, r3, #8
 8008ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f023 0304 	bic.w	r3, r3, #4
 8008ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a1c      	ldr	r2, [pc, #112]	; (8008b50 <TIM_OC1_SetConfig+0x10c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00f      	beq.n	8008b02 <TIM_OC1_SetConfig+0xbe>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a1b      	ldr	r2, [pc, #108]	; (8008b54 <TIM_OC1_SetConfig+0x110>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00b      	beq.n	8008b02 <TIM_OC1_SetConfig+0xbe>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a1a      	ldr	r2, [pc, #104]	; (8008b58 <TIM_OC1_SetConfig+0x114>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d007      	beq.n	8008b02 <TIM_OC1_SetConfig+0xbe>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a19      	ldr	r2, [pc, #100]	; (8008b5c <TIM_OC1_SetConfig+0x118>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d003      	beq.n	8008b02 <TIM_OC1_SetConfig+0xbe>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a18      	ldr	r2, [pc, #96]	; (8008b60 <TIM_OC1_SetConfig+0x11c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d111      	bne.n	8008b26 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	621a      	str	r2, [r3, #32]
}
 8008b40:	bf00      	nop
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	fffeff8f 	.word	0xfffeff8f
 8008b50:	40010000 	.word	0x40010000
 8008b54:	40010400 	.word	0x40010400
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40014400 	.word	0x40014400
 8008b60:	40014800 	.word	0x40014800

08008b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	f023 0210 	bic.w	r2, r3, #16
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	4b34      	ldr	r3, [pc, #208]	; (8008c60 <TIM_OC2_SetConfig+0xfc>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	021b      	lsls	r3, r3, #8
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f023 0320 	bic.w	r3, r3, #32
 8008bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a29      	ldr	r2, [pc, #164]	; (8008c64 <TIM_OC2_SetConfig+0x100>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d003      	beq.n	8008bcc <TIM_OC2_SetConfig+0x68>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a28      	ldr	r2, [pc, #160]	; (8008c68 <TIM_OC2_SetConfig+0x104>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d10d      	bne.n	8008be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1e      	ldr	r2, [pc, #120]	; (8008c64 <TIM_OC2_SetConfig+0x100>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00f      	beq.n	8008c10 <TIM_OC2_SetConfig+0xac>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a1d      	ldr	r2, [pc, #116]	; (8008c68 <TIM_OC2_SetConfig+0x104>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d00b      	beq.n	8008c10 <TIM_OC2_SetConfig+0xac>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a1c      	ldr	r2, [pc, #112]	; (8008c6c <TIM_OC2_SetConfig+0x108>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d007      	beq.n	8008c10 <TIM_OC2_SetConfig+0xac>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <TIM_OC2_SetConfig+0x10c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d003      	beq.n	8008c10 <TIM_OC2_SetConfig+0xac>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a1a      	ldr	r2, [pc, #104]	; (8008c74 <TIM_OC2_SetConfig+0x110>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d113      	bne.n	8008c38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	feff8fff 	.word	0xfeff8fff
 8008c64:	40010000 	.word	0x40010000
 8008c68:	40010400 	.word	0x40010400
 8008c6c:	40014000 	.word	0x40014000
 8008c70:	40014400 	.word	0x40014400
 8008c74:	40014800 	.word	0x40014800

08008c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0303 	bic.w	r3, r3, #3
 8008cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	021b      	lsls	r3, r3, #8
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <TIM_OC3_SetConfig+0xf8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC3_SetConfig+0x66>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a26      	ldr	r2, [pc, #152]	; (8008d74 <TIM_OC3_SetConfig+0xfc>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d10d      	bne.n	8008cfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a1c      	ldr	r2, [pc, #112]	; (8008d70 <TIM_OC3_SetConfig+0xf8>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00f      	beq.n	8008d22 <TIM_OC3_SetConfig+0xaa>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a1b      	ldr	r2, [pc, #108]	; (8008d74 <TIM_OC3_SetConfig+0xfc>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00b      	beq.n	8008d22 <TIM_OC3_SetConfig+0xaa>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a1a      	ldr	r2, [pc, #104]	; (8008d78 <TIM_OC3_SetConfig+0x100>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d007      	beq.n	8008d22 <TIM_OC3_SetConfig+0xaa>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a19      	ldr	r2, [pc, #100]	; (8008d7c <TIM_OC3_SetConfig+0x104>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d003      	beq.n	8008d22 <TIM_OC3_SetConfig+0xaa>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a18      	ldr	r2, [pc, #96]	; (8008d80 <TIM_OC3_SetConfig+0x108>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d113      	bne.n	8008d4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	621a      	str	r2, [r3, #32]
}
 8008d64:	bf00      	nop
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40010000 	.word	0x40010000
 8008d74:	40010400 	.word	0x40010400
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40014400 	.word	0x40014400
 8008d80:	40014800 	.word	0x40014800

08008d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	031b      	lsls	r3, r3, #12
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a18      	ldr	r2, [pc, #96]	; (8008e40 <TIM_OC4_SetConfig+0xbc>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_OC4_SetConfig+0x80>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a17      	ldr	r2, [pc, #92]	; (8008e44 <TIM_OC4_SetConfig+0xc0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00b      	beq.n	8008e04 <TIM_OC4_SetConfig+0x80>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a16      	ldr	r2, [pc, #88]	; (8008e48 <TIM_OC4_SetConfig+0xc4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_OC4_SetConfig+0x80>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <TIM_OC4_SetConfig+0xc8>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_OC4_SetConfig+0x80>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a14      	ldr	r2, [pc, #80]	; (8008e50 <TIM_OC4_SetConfig+0xcc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d109      	bne.n	8008e18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	019b      	lsls	r3, r3, #6
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	621a      	str	r2, [r3, #32]
}
 8008e32:	bf00      	nop
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	40010000 	.word	0x40010000
 8008e44:	40010400 	.word	0x40010400
 8008e48:	40014000 	.word	0x40014000
 8008e4c:	40014400 	.word	0x40014400
 8008e50:	40014800 	.word	0x40014800

08008e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	041b      	lsls	r3, r3, #16
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a17      	ldr	r2, [pc, #92]	; (8008f04 <TIM_OC5_SetConfig+0xb0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00f      	beq.n	8008eca <TIM_OC5_SetConfig+0x76>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a16      	ldr	r2, [pc, #88]	; (8008f08 <TIM_OC5_SetConfig+0xb4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00b      	beq.n	8008eca <TIM_OC5_SetConfig+0x76>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <TIM_OC5_SetConfig+0xb8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d007      	beq.n	8008eca <TIM_OC5_SetConfig+0x76>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <TIM_OC5_SetConfig+0xbc>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d003      	beq.n	8008eca <TIM_OC5_SetConfig+0x76>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a13      	ldr	r2, [pc, #76]	; (8008f14 <TIM_OC5_SetConfig+0xc0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d109      	bne.n	8008ede <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	621a      	str	r2, [r3, #32]
}
 8008ef8:	bf00      	nop
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800

08008f18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	051b      	lsls	r3, r3, #20
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <TIM_OC6_SetConfig+0xb4>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d00f      	beq.n	8008f90 <TIM_OC6_SetConfig+0x78>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a17      	ldr	r2, [pc, #92]	; (8008fd0 <TIM_OC6_SetConfig+0xb8>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00b      	beq.n	8008f90 <TIM_OC6_SetConfig+0x78>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a16      	ldr	r2, [pc, #88]	; (8008fd4 <TIM_OC6_SetConfig+0xbc>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d007      	beq.n	8008f90 <TIM_OC6_SetConfig+0x78>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a15      	ldr	r2, [pc, #84]	; (8008fd8 <TIM_OC6_SetConfig+0xc0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d003      	beq.n	8008f90 <TIM_OC6_SetConfig+0x78>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a14      	ldr	r2, [pc, #80]	; (8008fdc <TIM_OC6_SetConfig+0xc4>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d109      	bne.n	8008fa4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	029b      	lsls	r3, r3, #10
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40010000 	.word	0x40010000
 8008fd0:	40010400 	.word	0x40010400
 8008fd4:	40014000 	.word	0x40014000
 8008fd8:	40014400 	.word	0x40014400
 8008fdc:	40014800 	.word	0x40014800

08008fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f023 0201 	bic.w	r2, r3, #1
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800900a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f023 030a 	bic.w	r3, r3, #10
 800901c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800903e:	b480      	push	{r7}
 8009040:	b087      	sub	sp, #28
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	f023 0210 	bic.w	r2, r3, #16
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	031b      	lsls	r3, r3, #12
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	4313      	orrs	r3, r2
 8009072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800907a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
	...

080090a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <TIM_ITRx_SetConfig+0x38>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	f043 0307 	orr.w	r3, r3, #7
 80090c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	609a      	str	r2, [r3, #8]
}
 80090ca:	bf00      	nop
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	ffcfff8f 	.word	0xffcfff8f

080090dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	021a      	lsls	r2, r3, #8
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	431a      	orrs	r2, r3
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	4313      	orrs	r3, r2
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	4313      	orrs	r3, r2
 8009108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	609a      	str	r2, [r3, #8]
}
 8009110:	bf00      	nop
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009130:	2302      	movs	r3, #2
 8009132:	e068      	b.n	8009206 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a2e      	ldr	r2, [pc, #184]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d004      	beq.n	8009168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a2d      	ldr	r2, [pc, #180]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d108      	bne.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800916e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1e      	ldr	r2, [pc, #120]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d01d      	beq.n	80091da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a6:	d018      	beq.n	80091da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1b      	ldr	r2, [pc, #108]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d013      	beq.n	80091da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1a      	ldr	r2, [pc, #104]	; (8009220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00e      	beq.n	80091da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a18      	ldr	r2, [pc, #96]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d009      	beq.n	80091da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a13      	ldr	r2, [pc, #76]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d004      	beq.n	80091da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a14      	ldr	r2, [pc, #80]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d10c      	bne.n	80091f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	40010000 	.word	0x40010000
 8009218:	40010400 	.word	0x40010400
 800921c:	40000400 	.word	0x40000400
 8009220:	40000800 	.word	0x40000800
 8009224:	40000c00 	.word	0x40000c00
 8009228:	40001800 	.word	0x40001800

0800922c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009244:	2302      	movs	r3, #2
 8009246:	e065      	b.n	8009314 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	4313      	orrs	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4313      	orrs	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a16      	ldr	r2, [pc, #88]	; (8009320 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d004      	beq.n	80092d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a14      	ldr	r2, [pc, #80]	; (8009324 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d115      	bne.n	8009302 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	051b      	lsls	r3, r3, #20
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	40010000 	.word	0x40010000
 8009324:	40010400 	.word	0x40010400

08009328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e042      	b.n	80093fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800937c:	2b00      	cmp	r3, #0
 800937e:	d106      	bne.n	800938e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7f8 fd4d 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2224      	movs	r2, #36	; 0x24
 8009392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 0201 	bic.w	r2, r2, #1
 80093a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fbd8 	bl	8009b5c <UART_SetConfig>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e022      	b.n	80093fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 f92c 	bl	800a61c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f042 0201 	orr.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 f9b3 	bl	800a760 <UART_CheckIdleState>
 80093fa:	4603      	mov	r3, r0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08a      	sub	sp, #40	; 0x28
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	4613      	mov	r3, r2
 8009412:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800941a:	2b20      	cmp	r3, #32
 800941c:	f040 8083 	bne.w	8009526 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <HAL_UART_Transmit+0x28>
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e07b      	b.n	8009528 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_UART_Transmit+0x3a>
 800943a:	2302      	movs	r3, #2
 800943c:	e074      	b.n	8009528 <HAL_UART_Transmit+0x124>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2221      	movs	r2, #33	; 0x21
 8009452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009456:	f7f9 f91d 	bl	8002694 <HAL_GetTick>
 800945a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	88fa      	ldrh	r2, [r7, #6]
 8009460:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	88fa      	ldrh	r2, [r7, #6]
 8009468:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009474:	d108      	bne.n	8009488 <HAL_UART_Transmit+0x84>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	61bb      	str	r3, [r7, #24]
 8009486:	e003      	b.n	8009490 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009498:	e02c      	b.n	80094f4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2200      	movs	r2, #0
 80094a2:	2180      	movs	r1, #128	; 0x80
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f001 f9a6 	bl	800a7f6 <UART_WaitOnFlagUntilTimeout>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e039      	b.n	8009528 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	3302      	adds	r3, #2
 80094ce:	61bb      	str	r3, [r7, #24]
 80094d0:	e007      	b.n	80094e2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	781a      	ldrb	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	3301      	adds	r3, #1
 80094e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1cc      	bne.n	800949a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2200      	movs	r2, #0
 8009508:	2140      	movs	r1, #64	; 0x40
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 f973 	bl	800a7f6 <UART_WaitOnFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e006      	b.n	8009528 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	e000      	b.n	8009528 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009526:	2302      	movs	r3, #2
  }
}
 8009528:	4618      	mov	r0, r3
 800952a:	3720      	adds	r7, #32
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009544:	2b20      	cmp	r3, #32
 8009546:	d131      	bne.n	80095ac <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <HAL_UART_Receive_IT+0x24>
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e02a      	b.n	80095ae <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_UART_Receive_IT+0x36>
 8009562:	2302      	movs	r3, #2
 8009564:	e023      	b.n	80095ae <HAL_UART_Receive_IT+0x7e>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a0f      	ldr	r2, [pc, #60]	; (80095b8 <HAL_UART_Receive_IT+0x88>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00e      	beq.n	800959c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d007      	beq.n	800959c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800959a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	461a      	mov	r2, r3
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f001 f9a8 	bl	800a8f8 <UART_Start_Receive_IT>
 80095a8:	4603      	mov	r3, r0
 80095aa:	e000      	b.n	80095ae <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80095ac:	2302      	movs	r3, #2
  }
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	58000c00 	.word	0x58000c00

080095bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	f640 030f 	movw	r3, #2063	; 0x80f
 80095e2:	4013      	ands	r3, r2
 80095e4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d118      	bne.n	800961e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d013      	beq.n	800961e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d104      	bne.n	800960a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 8282 	beq.w	8009b18 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	4798      	blx	r3
      }
      return;
 800961c:	e27c      	b.n	8009b18 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 80ef 	beq.w	8009804 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4b73      	ldr	r3, [pc, #460]	; (80097f8 <HAL_UART_IRQHandler+0x23c>)
 800962a:	4013      	ands	r3, r2
 800962c:	2b00      	cmp	r3, #0
 800962e:	d105      	bne.n	800963c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	4b72      	ldr	r3, [pc, #456]	; (80097fc <HAL_UART_IRQHandler+0x240>)
 8009634:	4013      	ands	r3, r2
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 80e4 	beq.w	8009804 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d010      	beq.n	8009668 <HAL_UART_IRQHandler+0xac>
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2201      	movs	r2, #1
 8009656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800965e:	f043 0201 	orr.w	r2, r3, #1
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d010      	beq.n	8009694 <HAL_UART_IRQHandler+0xd8>
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2202      	movs	r2, #2
 8009682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800968a:	f043 0204 	orr.w	r2, r3, #4
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	d010      	beq.n	80096c0 <HAL_UART_IRQHandler+0x104>
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00b      	beq.n	80096c0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2204      	movs	r2, #4
 80096ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b6:	f043 0202 	orr.w	r2, r3, #2
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	f003 0308 	and.w	r3, r3, #8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d015      	beq.n	80096f6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	f003 0320 	and.w	r3, r3, #32
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d104      	bne.n	80096de <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	4b48      	ldr	r3, [pc, #288]	; (80097f8 <HAL_UART_IRQHandler+0x23c>)
 80096d8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00b      	beq.n	80096f6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2208      	movs	r2, #8
 80096e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096ec:	f043 0208 	orr.w	r2, r3, #8
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d011      	beq.n	8009724 <HAL_UART_IRQHandler+0x168>
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 81f6 	beq.w	8009b1c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d011      	beq.n	800975e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009764:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009770:	2b40      	cmp	r3, #64	; 0x40
 8009772:	d004      	beq.n	800977e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800977a:	2b00      	cmp	r3, #0
 800977c:	d031      	beq.n	80097e2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f001 f978 	bl	800aa74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	d123      	bne.n	80097da <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d013      	beq.n	80097d2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ae:	4a14      	ldr	r2, [pc, #80]	; (8009800 <HAL_UART_IRQHandler+0x244>)
 80097b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fa f918 	bl	80039ec <HAL_DMA_Abort_IT>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d017      	beq.n	80097f2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d0:	e00f      	b.n	80097f2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f9ac 	bl	8009b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d8:	e00b      	b.n	80097f2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9a8 	bl	8009b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e0:	e007      	b.n	80097f2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f9a4 	bl	8009b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80097f0:	e194      	b.n	8009b1c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f2:	bf00      	nop
    return;
 80097f4:	e192      	b.n	8009b1c <HAL_UART_IRQHandler+0x560>
 80097f6:	bf00      	nop
 80097f8:	10000001 	.word	0x10000001
 80097fc:	04000120 	.word	0x04000120
 8009800:	0800aad9 	.word	0x0800aad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009808:	2b01      	cmp	r3, #1
 800980a:	f040 810f 	bne.w	8009a2c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 8109 	beq.w	8009a2c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 8103 	beq.w	8009a2c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2210      	movs	r2, #16
 800982c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009838:	2b40      	cmp	r3, #64	; 0x40
 800983a:	f040 80bb 	bne.w	80099b4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a96      	ldr	r2, [pc, #600]	; (8009aa0 <HAL_UART_IRQHandler+0x4e4>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d059      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a94      	ldr	r2, [pc, #592]	; (8009aa4 <HAL_UART_IRQHandler+0x4e8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d053      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a92      	ldr	r2, [pc, #584]	; (8009aa8 <HAL_UART_IRQHandler+0x4ec>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d04d      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a90      	ldr	r2, [pc, #576]	; (8009aac <HAL_UART_IRQHandler+0x4f0>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d047      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a8e      	ldr	r2, [pc, #568]	; (8009ab0 <HAL_UART_IRQHandler+0x4f4>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d041      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a8c      	ldr	r2, [pc, #560]	; (8009ab4 <HAL_UART_IRQHandler+0x4f8>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d03b      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a8a      	ldr	r2, [pc, #552]	; (8009ab8 <HAL_UART_IRQHandler+0x4fc>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d035      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a88      	ldr	r2, [pc, #544]	; (8009abc <HAL_UART_IRQHandler+0x500>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d02f      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a86      	ldr	r2, [pc, #536]	; (8009ac0 <HAL_UART_IRQHandler+0x504>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d029      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a84      	ldr	r2, [pc, #528]	; (8009ac4 <HAL_UART_IRQHandler+0x508>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d023      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a82      	ldr	r2, [pc, #520]	; (8009ac8 <HAL_UART_IRQHandler+0x50c>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d01d      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a80      	ldr	r2, [pc, #512]	; (8009acc <HAL_UART_IRQHandler+0x510>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d017      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a7e      	ldr	r2, [pc, #504]	; (8009ad0 <HAL_UART_IRQHandler+0x514>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d011      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a7c      	ldr	r2, [pc, #496]	; (8009ad4 <HAL_UART_IRQHandler+0x518>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00b      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a7a      	ldr	r2, [pc, #488]	; (8009ad8 <HAL_UART_IRQHandler+0x51c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d005      	beq.n	80098fe <HAL_UART_IRQHandler+0x342>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a78      	ldr	r2, [pc, #480]	; (8009adc <HAL_UART_IRQHandler+0x520>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d105      	bne.n	800990a <HAL_UART_IRQHandler+0x34e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	b29b      	uxth	r3, r3
 8009908:	e004      	b.n	8009914 <HAL_UART_IRQHandler+0x358>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	b29b      	uxth	r3, r3
 8009914:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009916:	893b      	ldrh	r3, [r7, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8101 	beq.w	8009b20 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009924:	893a      	ldrh	r2, [r7, #8]
 8009926:	429a      	cmp	r2, r3
 8009928:	f080 80fa 	bcs.w	8009b20 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	893a      	ldrh	r2, [r7, #8]
 8009930:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800993e:	d02b      	beq.n	8009998 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800994e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f022 0201 	bic.w	r2, r2, #1
 800995e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800996e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2220      	movs	r2, #32
 8009974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f022 0210 	bic.w	r2, r2, #16
 800998c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009992:	4618      	mov	r0, r3
 8009994:	f7f9 fd0c 	bl	80033b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f8c9 	bl	8009b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099b2:	e0b5      	b.n	8009b20 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80a8 	beq.w	8009b24 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80099d4:	897b      	ldrh	r3, [r7, #10]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 80a4 	beq.w	8009b24 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099ea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6899      	ldr	r1, [r3, #8]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	4b3a      	ldr	r3, [pc, #232]	; (8009ae0 <HAL_UART_IRQHandler+0x524>)
 80099f8:	400b      	ands	r3, r1
 80099fa:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 0210 	bic.w	r2, r2, #16
 8009a1e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a20:	897b      	ldrh	r3, [r7, #10]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f88d 	bl	8009b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a2a:	e07b      	b.n	8009b24 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00d      	beq.n	8009a52 <HAL_UART_IRQHandler+0x496>
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d008      	beq.n	8009a52 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f001 fbba 	bl	800b1c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a50:	e06b      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d012      	beq.n	8009a82 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d104      	bne.n	8009a70 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d008      	beq.n	8009a82 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d057      	beq.n	8009b28 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	4798      	blx	r3
    }
    return;
 8009a80:	e052      	b.n	8009b28 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d02b      	beq.n	8009ae4 <HAL_UART_IRQHandler+0x528>
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d026      	beq.n	8009ae4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 f834 	bl	800ab04 <UART_EndTransmit_IT>
    return;
 8009a9c:	e045      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
 8009a9e:	bf00      	nop
 8009aa0:	40020010 	.word	0x40020010
 8009aa4:	40020028 	.word	0x40020028
 8009aa8:	40020040 	.word	0x40020040
 8009aac:	40020058 	.word	0x40020058
 8009ab0:	40020070 	.word	0x40020070
 8009ab4:	40020088 	.word	0x40020088
 8009ab8:	400200a0 	.word	0x400200a0
 8009abc:	400200b8 	.word	0x400200b8
 8009ac0:	40020410 	.word	0x40020410
 8009ac4:	40020428 	.word	0x40020428
 8009ac8:	40020440 	.word	0x40020440
 8009acc:	40020458 	.word	0x40020458
 8009ad0:	40020470 	.word	0x40020470
 8009ad4:	40020488 	.word	0x40020488
 8009ad8:	400204a0 	.word	0x400204a0
 8009adc:	400204b8 	.word	0x400204b8
 8009ae0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d008      	beq.n	8009b00 <HAL_UART_IRQHandler+0x544>
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f001 fb77 	bl	800b1ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009afe:	e014      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00f      	beq.n	8009b2a <HAL_UART_IRQHandler+0x56e>
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	da0c      	bge.n	8009b2a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 fb61 	bl	800b1d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b16:	e008      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
      return;
 8009b18:	bf00      	nop
 8009b1a:	e006      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
    return;
 8009b1c:	bf00      	nop
 8009b1e:	e004      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
      return;
 8009b20:	bf00      	nop
 8009b22:	e002      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
      return;
 8009b24:	bf00      	nop
 8009b26:	e000      	b.n	8009b2a <HAL_UART_IRQHandler+0x56e>
    return;
 8009b28:	bf00      	nop
  }
}
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b5c:	b5b0      	push	{r4, r5, r7, lr}
 8009b5e:	b08e      	sub	sp, #56	; 0x38
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	431a      	orrs	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	4bbf      	ldr	r3, [pc, #764]	; (8009e88 <UART_SetConfig+0x32c>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6812      	ldr	r2, [r2, #0]
 8009b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b92:	430b      	orrs	r3, r1
 8009b94:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4ab5      	ldr	r2, [pc, #724]	; (8009e8c <UART_SetConfig+0x330>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d004      	beq.n	8009bc6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	4bb0      	ldr	r3, [pc, #704]	; (8009e90 <UART_SetConfig+0x334>)
 8009bce:	4013      	ands	r3, r2
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	6812      	ldr	r2, [r2, #0]
 8009bd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bd6:	430b      	orrs	r3, r1
 8009bd8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	f023 010f 	bic.w	r1, r3, #15
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4aa7      	ldr	r2, [pc, #668]	; (8009e94 <UART_SetConfig+0x338>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d176      	bne.n	8009ce8 <UART_SetConfig+0x18c>
 8009bfa:	4ba7      	ldr	r3, [pc, #668]	; (8009e98 <UART_SetConfig+0x33c>)
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c02:	2b28      	cmp	r3, #40	; 0x28
 8009c04:	d86c      	bhi.n	8009ce0 <UART_SetConfig+0x184>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <UART_SetConfig+0xb0>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009cb1 	.word	0x08009cb1
 8009c10:	08009ce1 	.word	0x08009ce1
 8009c14:	08009ce1 	.word	0x08009ce1
 8009c18:	08009ce1 	.word	0x08009ce1
 8009c1c:	08009ce1 	.word	0x08009ce1
 8009c20:	08009ce1 	.word	0x08009ce1
 8009c24:	08009ce1 	.word	0x08009ce1
 8009c28:	08009ce1 	.word	0x08009ce1
 8009c2c:	08009cb9 	.word	0x08009cb9
 8009c30:	08009ce1 	.word	0x08009ce1
 8009c34:	08009ce1 	.word	0x08009ce1
 8009c38:	08009ce1 	.word	0x08009ce1
 8009c3c:	08009ce1 	.word	0x08009ce1
 8009c40:	08009ce1 	.word	0x08009ce1
 8009c44:	08009ce1 	.word	0x08009ce1
 8009c48:	08009ce1 	.word	0x08009ce1
 8009c4c:	08009cc1 	.word	0x08009cc1
 8009c50:	08009ce1 	.word	0x08009ce1
 8009c54:	08009ce1 	.word	0x08009ce1
 8009c58:	08009ce1 	.word	0x08009ce1
 8009c5c:	08009ce1 	.word	0x08009ce1
 8009c60:	08009ce1 	.word	0x08009ce1
 8009c64:	08009ce1 	.word	0x08009ce1
 8009c68:	08009ce1 	.word	0x08009ce1
 8009c6c:	08009cc9 	.word	0x08009cc9
 8009c70:	08009ce1 	.word	0x08009ce1
 8009c74:	08009ce1 	.word	0x08009ce1
 8009c78:	08009ce1 	.word	0x08009ce1
 8009c7c:	08009ce1 	.word	0x08009ce1
 8009c80:	08009ce1 	.word	0x08009ce1
 8009c84:	08009ce1 	.word	0x08009ce1
 8009c88:	08009ce1 	.word	0x08009ce1
 8009c8c:	08009cd1 	.word	0x08009cd1
 8009c90:	08009ce1 	.word	0x08009ce1
 8009c94:	08009ce1 	.word	0x08009ce1
 8009c98:	08009ce1 	.word	0x08009ce1
 8009c9c:	08009ce1 	.word	0x08009ce1
 8009ca0:	08009ce1 	.word	0x08009ce1
 8009ca4:	08009ce1 	.word	0x08009ce1
 8009ca8:	08009ce1 	.word	0x08009ce1
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e222      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e21e      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e21a      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e216      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e212      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e20e      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e20a      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a6b      	ldr	r2, [pc, #428]	; (8009e9c <UART_SetConfig+0x340>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d130      	bne.n	8009d54 <UART_SetConfig+0x1f8>
 8009cf2:	4b69      	ldr	r3, [pc, #420]	; (8009e98 <UART_SetConfig+0x33c>)
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	d826      	bhi.n	8009d4c <UART_SetConfig+0x1f0>
 8009cfe:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <UART_SetConfig+0x1a8>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009d1d 	.word	0x08009d1d
 8009d08:	08009d25 	.word	0x08009d25
 8009d0c:	08009d2d 	.word	0x08009d2d
 8009d10:	08009d35 	.word	0x08009d35
 8009d14:	08009d3d 	.word	0x08009d3d
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d22:	e1ec      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d24:	2304      	movs	r3, #4
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e1e8      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d2c:	2308      	movs	r3, #8
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e1e4      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d34:	2310      	movs	r3, #16
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e1e0      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e1dc      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e1d8      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d4c:	2380      	movs	r3, #128	; 0x80
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e1d4      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a51      	ldr	r2, [pc, #324]	; (8009ea0 <UART_SetConfig+0x344>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d130      	bne.n	8009dc0 <UART_SetConfig+0x264>
 8009d5e:	4b4e      	ldr	r3, [pc, #312]	; (8009e98 <UART_SetConfig+0x33c>)
 8009d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d62:	f003 0307 	and.w	r3, r3, #7
 8009d66:	2b05      	cmp	r3, #5
 8009d68:	d826      	bhi.n	8009db8 <UART_SetConfig+0x25c>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <UART_SetConfig+0x214>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009d89 	.word	0x08009d89
 8009d74:	08009d91 	.word	0x08009d91
 8009d78:	08009d99 	.word	0x08009d99
 8009d7c:	08009da1 	.word	0x08009da1
 8009d80:	08009da9 	.word	0x08009da9
 8009d84:	08009db1 	.word	0x08009db1
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e1b6      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d90:	2304      	movs	r3, #4
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	e1b2      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009d98:	2308      	movs	r3, #8
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e1ae      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009da0:	2310      	movs	r3, #16
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	e1aa      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009da8:	2320      	movs	r3, #32
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e1a6      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009db0:	2340      	movs	r3, #64	; 0x40
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e1a2      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009db8:	2380      	movs	r3, #128	; 0x80
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e19e      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a37      	ldr	r2, [pc, #220]	; (8009ea4 <UART_SetConfig+0x348>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d130      	bne.n	8009e2c <UART_SetConfig+0x2d0>
 8009dca:	4b33      	ldr	r3, [pc, #204]	; (8009e98 <UART_SetConfig+0x33c>)
 8009dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dce:	f003 0307 	and.w	r3, r3, #7
 8009dd2:	2b05      	cmp	r3, #5
 8009dd4:	d826      	bhi.n	8009e24 <UART_SetConfig+0x2c8>
 8009dd6:	a201      	add	r2, pc, #4	; (adr r2, 8009ddc <UART_SetConfig+0x280>)
 8009dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ddc:	08009df5 	.word	0x08009df5
 8009de0:	08009dfd 	.word	0x08009dfd
 8009de4:	08009e05 	.word	0x08009e05
 8009de8:	08009e0d 	.word	0x08009e0d
 8009dec:	08009e15 	.word	0x08009e15
 8009df0:	08009e1d 	.word	0x08009e1d
 8009df4:	2300      	movs	r3, #0
 8009df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfa:	e180      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009dfc:	2304      	movs	r3, #4
 8009dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e02:	e17c      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e04:	2308      	movs	r3, #8
 8009e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0a:	e178      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e0c:	2310      	movs	r3, #16
 8009e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e12:	e174      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e14:	2320      	movs	r3, #32
 8009e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1a:	e170      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e22:	e16c      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e24:	2380      	movs	r3, #128	; 0x80
 8009e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2a:	e168      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a1d      	ldr	r2, [pc, #116]	; (8009ea8 <UART_SetConfig+0x34c>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d142      	bne.n	8009ebc <UART_SetConfig+0x360>
 8009e36:	4b18      	ldr	r3, [pc, #96]	; (8009e98 <UART_SetConfig+0x33c>)
 8009e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	2b05      	cmp	r3, #5
 8009e40:	d838      	bhi.n	8009eb4 <UART_SetConfig+0x358>
 8009e42:	a201      	add	r2, pc, #4	; (adr r2, 8009e48 <UART_SetConfig+0x2ec>)
 8009e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e48:	08009e61 	.word	0x08009e61
 8009e4c:	08009e69 	.word	0x08009e69
 8009e50:	08009e71 	.word	0x08009e71
 8009e54:	08009e79 	.word	0x08009e79
 8009e58:	08009e81 	.word	0x08009e81
 8009e5c:	08009ead 	.word	0x08009ead
 8009e60:	2300      	movs	r3, #0
 8009e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e66:	e14a      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e68:	2304      	movs	r3, #4
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e146      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e70:	2308      	movs	r3, #8
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	e142      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e78:	2310      	movs	r3, #16
 8009e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7e:	e13e      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e80:	2320      	movs	r3, #32
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e13a      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009e88:	cfff69f3 	.word	0xcfff69f3
 8009e8c:	58000c00 	.word	0x58000c00
 8009e90:	11fff4ff 	.word	0x11fff4ff
 8009e94:	40011000 	.word	0x40011000
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	40004400 	.word	0x40004400
 8009ea0:	40004800 	.word	0x40004800
 8009ea4:	40004c00 	.word	0x40004c00
 8009ea8:	40005000 	.word	0x40005000
 8009eac:	2340      	movs	r3, #64	; 0x40
 8009eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb2:	e124      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009eb4:	2380      	movs	r3, #128	; 0x80
 8009eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eba:	e120      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4acc      	ldr	r2, [pc, #816]	; (800a1f4 <UART_SetConfig+0x698>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d176      	bne.n	8009fb4 <UART_SetConfig+0x458>
 8009ec6:	4bcc      	ldr	r3, [pc, #816]	; (800a1f8 <UART_SetConfig+0x69c>)
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ece:	2b28      	cmp	r3, #40	; 0x28
 8009ed0:	d86c      	bhi.n	8009fac <UART_SetConfig+0x450>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <UART_SetConfig+0x37c>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f7d 	.word	0x08009f7d
 8009edc:	08009fad 	.word	0x08009fad
 8009ee0:	08009fad 	.word	0x08009fad
 8009ee4:	08009fad 	.word	0x08009fad
 8009ee8:	08009fad 	.word	0x08009fad
 8009eec:	08009fad 	.word	0x08009fad
 8009ef0:	08009fad 	.word	0x08009fad
 8009ef4:	08009fad 	.word	0x08009fad
 8009ef8:	08009f85 	.word	0x08009f85
 8009efc:	08009fad 	.word	0x08009fad
 8009f00:	08009fad 	.word	0x08009fad
 8009f04:	08009fad 	.word	0x08009fad
 8009f08:	08009fad 	.word	0x08009fad
 8009f0c:	08009fad 	.word	0x08009fad
 8009f10:	08009fad 	.word	0x08009fad
 8009f14:	08009fad 	.word	0x08009fad
 8009f18:	08009f8d 	.word	0x08009f8d
 8009f1c:	08009fad 	.word	0x08009fad
 8009f20:	08009fad 	.word	0x08009fad
 8009f24:	08009fad 	.word	0x08009fad
 8009f28:	08009fad 	.word	0x08009fad
 8009f2c:	08009fad 	.word	0x08009fad
 8009f30:	08009fad 	.word	0x08009fad
 8009f34:	08009fad 	.word	0x08009fad
 8009f38:	08009f95 	.word	0x08009f95
 8009f3c:	08009fad 	.word	0x08009fad
 8009f40:	08009fad 	.word	0x08009fad
 8009f44:	08009fad 	.word	0x08009fad
 8009f48:	08009fad 	.word	0x08009fad
 8009f4c:	08009fad 	.word	0x08009fad
 8009f50:	08009fad 	.word	0x08009fad
 8009f54:	08009fad 	.word	0x08009fad
 8009f58:	08009f9d 	.word	0x08009f9d
 8009f5c:	08009fad 	.word	0x08009fad
 8009f60:	08009fad 	.word	0x08009fad
 8009f64:	08009fad 	.word	0x08009fad
 8009f68:	08009fad 	.word	0x08009fad
 8009f6c:	08009fad 	.word	0x08009fad
 8009f70:	08009fad 	.word	0x08009fad
 8009f74:	08009fad 	.word	0x08009fad
 8009f78:	08009fa5 	.word	0x08009fa5
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f82:	e0bc      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009f84:	2304      	movs	r3, #4
 8009f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8a:	e0b8      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f92:	e0b4      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009f94:	2310      	movs	r3, #16
 8009f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9a:	e0b0      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa2:	e0ac      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009fa4:	2340      	movs	r3, #64	; 0x40
 8009fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009faa:	e0a8      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009fac:	2380      	movs	r3, #128	; 0x80
 8009fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb2:	e0a4      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a90      	ldr	r2, [pc, #576]	; (800a1fc <UART_SetConfig+0x6a0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d130      	bne.n	800a020 <UART_SetConfig+0x4c4>
 8009fbe:	4b8e      	ldr	r3, [pc, #568]	; (800a1f8 <UART_SetConfig+0x69c>)
 8009fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	2b05      	cmp	r3, #5
 8009fc8:	d826      	bhi.n	800a018 <UART_SetConfig+0x4bc>
 8009fca:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <UART_SetConfig+0x474>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	08009fe9 	.word	0x08009fe9
 8009fd4:	08009ff1 	.word	0x08009ff1
 8009fd8:	08009ff9 	.word	0x08009ff9
 8009fdc:	0800a001 	.word	0x0800a001
 8009fe0:	0800a009 	.word	0x0800a009
 8009fe4:	0800a011 	.word	0x0800a011
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fee:	e086      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff6:	e082      	b.n	800a0fe <UART_SetConfig+0x5a2>
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffe:	e07e      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a000:	2310      	movs	r3, #16
 800a002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a006:	e07a      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a008:	2320      	movs	r3, #32
 800a00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00e:	e076      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a010:	2340      	movs	r3, #64	; 0x40
 800a012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a016:	e072      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a018:	2380      	movs	r3, #128	; 0x80
 800a01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01e:	e06e      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a76      	ldr	r2, [pc, #472]	; (800a200 <UART_SetConfig+0x6a4>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d130      	bne.n	800a08c <UART_SetConfig+0x530>
 800a02a:	4b73      	ldr	r3, [pc, #460]	; (800a1f8 <UART_SetConfig+0x69c>)
 800a02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a02e:	f003 0307 	and.w	r3, r3, #7
 800a032:	2b05      	cmp	r3, #5
 800a034:	d826      	bhi.n	800a084 <UART_SetConfig+0x528>
 800a036:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <UART_SetConfig+0x4e0>)
 800a038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03c:	0800a055 	.word	0x0800a055
 800a040:	0800a05d 	.word	0x0800a05d
 800a044:	0800a065 	.word	0x0800a065
 800a048:	0800a06d 	.word	0x0800a06d
 800a04c:	0800a075 	.word	0x0800a075
 800a050:	0800a07d 	.word	0x0800a07d
 800a054:	2300      	movs	r3, #0
 800a056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05a:	e050      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a05c:	2304      	movs	r3, #4
 800a05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a062:	e04c      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a064:	2308      	movs	r3, #8
 800a066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06a:	e048      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a06c:	2310      	movs	r3, #16
 800a06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a072:	e044      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a074:	2320      	movs	r3, #32
 800a076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07a:	e040      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a07c:	2340      	movs	r3, #64	; 0x40
 800a07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a082:	e03c      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a084:	2380      	movs	r3, #128	; 0x80
 800a086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08a:	e038      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a5c      	ldr	r2, [pc, #368]	; (800a204 <UART_SetConfig+0x6a8>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d130      	bne.n	800a0f8 <UART_SetConfig+0x59c>
 800a096:	4b58      	ldr	r3, [pc, #352]	; (800a1f8 <UART_SetConfig+0x69c>)
 800a098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	d826      	bhi.n	800a0f0 <UART_SetConfig+0x594>
 800a0a2:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <UART_SetConfig+0x54c>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0c1 	.word	0x0800a0c1
 800a0ac:	0800a0c9 	.word	0x0800a0c9
 800a0b0:	0800a0d1 	.word	0x0800a0d1
 800a0b4:	0800a0d9 	.word	0x0800a0d9
 800a0b8:	0800a0e1 	.word	0x0800a0e1
 800a0bc:	0800a0e9 	.word	0x0800a0e9
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c6:	e01a      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ce:	e016      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a0d0:	2308      	movs	r3, #8
 800a0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d6:	e012      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0de:	e00e      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a0e0:	2320      	movs	r3, #32
 800a0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e6:	e00a      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a0e8:	2340      	movs	r3, #64	; 0x40
 800a0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ee:	e006      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f6:	e002      	b.n	800a0fe <UART_SetConfig+0x5a2>
 800a0f8:	2380      	movs	r3, #128	; 0x80
 800a0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a40      	ldr	r2, [pc, #256]	; (800a204 <UART_SetConfig+0x6a8>)
 800a104:	4293      	cmp	r3, r2
 800a106:	f040 80ef 	bne.w	800a2e8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a10a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a10e:	2b20      	cmp	r3, #32
 800a110:	dc46      	bgt.n	800a1a0 <UART_SetConfig+0x644>
 800a112:	2b02      	cmp	r3, #2
 800a114:	f2c0 8081 	blt.w	800a21a <UART_SetConfig+0x6be>
 800a118:	3b02      	subs	r3, #2
 800a11a:	2b1e      	cmp	r3, #30
 800a11c:	d87d      	bhi.n	800a21a <UART_SetConfig+0x6be>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <UART_SetConfig+0x5c8>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a1a7 	.word	0x0800a1a7
 800a128:	0800a21b 	.word	0x0800a21b
 800a12c:	0800a1af 	.word	0x0800a1af
 800a130:	0800a21b 	.word	0x0800a21b
 800a134:	0800a21b 	.word	0x0800a21b
 800a138:	0800a21b 	.word	0x0800a21b
 800a13c:	0800a1bf 	.word	0x0800a1bf
 800a140:	0800a21b 	.word	0x0800a21b
 800a144:	0800a21b 	.word	0x0800a21b
 800a148:	0800a21b 	.word	0x0800a21b
 800a14c:	0800a21b 	.word	0x0800a21b
 800a150:	0800a21b 	.word	0x0800a21b
 800a154:	0800a21b 	.word	0x0800a21b
 800a158:	0800a21b 	.word	0x0800a21b
 800a15c:	0800a1cf 	.word	0x0800a1cf
 800a160:	0800a21b 	.word	0x0800a21b
 800a164:	0800a21b 	.word	0x0800a21b
 800a168:	0800a21b 	.word	0x0800a21b
 800a16c:	0800a21b 	.word	0x0800a21b
 800a170:	0800a21b 	.word	0x0800a21b
 800a174:	0800a21b 	.word	0x0800a21b
 800a178:	0800a21b 	.word	0x0800a21b
 800a17c:	0800a21b 	.word	0x0800a21b
 800a180:	0800a21b 	.word	0x0800a21b
 800a184:	0800a21b 	.word	0x0800a21b
 800a188:	0800a21b 	.word	0x0800a21b
 800a18c:	0800a21b 	.word	0x0800a21b
 800a190:	0800a21b 	.word	0x0800a21b
 800a194:	0800a21b 	.word	0x0800a21b
 800a198:	0800a21b 	.word	0x0800a21b
 800a19c:	0800a20d 	.word	0x0800a20d
 800a1a0:	2b40      	cmp	r3, #64	; 0x40
 800a1a2:	d036      	beq.n	800a212 <UART_SetConfig+0x6b6>
 800a1a4:	e039      	b.n	800a21a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a1a6:	f7fd fa71 	bl	800768c <HAL_RCCEx_GetD3PCLK1Freq>
 800a1aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1ac:	e03b      	b.n	800a226 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ae:	f107 0314 	add.w	r3, r7, #20
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fd fa80 	bl	80076b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1bc:	e033      	b.n	800a226 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1be:	f107 0308 	add.w	r3, r7, #8
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fd fbcc 	bl	8007960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1cc:	e02b      	b.n	800a226 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1ce:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <UART_SetConfig+0x69c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0320 	and.w	r3, r3, #32
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d009      	beq.n	800a1ee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <UART_SetConfig+0x69c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	08db      	lsrs	r3, r3, #3
 800a1e0:	f003 0303 	and.w	r3, r3, #3
 800a1e4:	4a08      	ldr	r2, [pc, #32]	; (800a208 <UART_SetConfig+0x6ac>)
 800a1e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1ec:	e01b      	b.n	800a226 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a1ee:	4b06      	ldr	r3, [pc, #24]	; (800a208 <UART_SetConfig+0x6ac>)
 800a1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1f2:	e018      	b.n	800a226 <UART_SetConfig+0x6ca>
 800a1f4:	40011400 	.word	0x40011400
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	40007800 	.word	0x40007800
 800a200:	40007c00 	.word	0x40007c00
 800a204:	58000c00 	.word	0x58000c00
 800a208:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a20c:	4bc4      	ldr	r3, [pc, #784]	; (800a520 <UART_SetConfig+0x9c4>)
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a210:	e009      	b.n	800a226 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a218:	e005      	b.n	800a226 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a224:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 81da 	beq.w	800a5e2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	4abc      	ldr	r2, [pc, #752]	; (800a524 <UART_SetConfig+0x9c8>)
 800a234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a238:	461a      	mov	r2, r3
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a240:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	4613      	mov	r3, r2
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	4413      	add	r3, r2
 800a24c:	6a3a      	ldr	r2, [r7, #32]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d305      	bcc.n	800a25e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a258:	6a3a      	ldr	r2, [r7, #32]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d903      	bls.n	800a266 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a264:	e1bd      	b.n	800a5e2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	4618      	mov	r0, r3
 800a26a:	f04f 0100 	mov.w	r1, #0
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	4aac      	ldr	r2, [pc, #688]	; (800a524 <UART_SetConfig+0x9c8>)
 800a274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a278:	b29a      	uxth	r2, r3
 800a27a:	f04f 0300 	mov.w	r3, #0
 800a27e:	f7f6 f87f 	bl	8000380 <__aeabi_uldivmod>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4610      	mov	r0, r2
 800a288:	4619      	mov	r1, r3
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	020b      	lsls	r3, r1, #8
 800a294:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a298:	0202      	lsls	r2, r0, #8
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	6849      	ldr	r1, [r1, #4]
 800a29e:	0849      	lsrs	r1, r1, #1
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	f04f 0100 	mov.w	r1, #0
 800a2a6:	1814      	adds	r4, r2, r0
 800a2a8:	eb43 0501 	adc.w	r5, r3, r1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	f04f 0300 	mov.w	r3, #0
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f6 f861 	bl	8000380 <__aeabi_uldivmod>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2cc:	d308      	bcc.n	800a2e0 <UART_SetConfig+0x784>
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d4:	d204      	bcs.n	800a2e0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	e180      	b.n	800a5e2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a2e6:	e17c      	b.n	800a5e2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f0:	f040 80bf 	bne.w	800a472 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a2f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	dc49      	bgt.n	800a390 <UART_SetConfig+0x834>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	db7c      	blt.n	800a3fa <UART_SetConfig+0x89e>
 800a300:	2b20      	cmp	r3, #32
 800a302:	d87a      	bhi.n	800a3fa <UART_SetConfig+0x89e>
 800a304:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <UART_SetConfig+0x7b0>)
 800a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30a:	bf00      	nop
 800a30c:	0800a397 	.word	0x0800a397
 800a310:	0800a39f 	.word	0x0800a39f
 800a314:	0800a3fb 	.word	0x0800a3fb
 800a318:	0800a3fb 	.word	0x0800a3fb
 800a31c:	0800a3a7 	.word	0x0800a3a7
 800a320:	0800a3fb 	.word	0x0800a3fb
 800a324:	0800a3fb 	.word	0x0800a3fb
 800a328:	0800a3fb 	.word	0x0800a3fb
 800a32c:	0800a3b7 	.word	0x0800a3b7
 800a330:	0800a3fb 	.word	0x0800a3fb
 800a334:	0800a3fb 	.word	0x0800a3fb
 800a338:	0800a3fb 	.word	0x0800a3fb
 800a33c:	0800a3fb 	.word	0x0800a3fb
 800a340:	0800a3fb 	.word	0x0800a3fb
 800a344:	0800a3fb 	.word	0x0800a3fb
 800a348:	0800a3fb 	.word	0x0800a3fb
 800a34c:	0800a3c7 	.word	0x0800a3c7
 800a350:	0800a3fb 	.word	0x0800a3fb
 800a354:	0800a3fb 	.word	0x0800a3fb
 800a358:	0800a3fb 	.word	0x0800a3fb
 800a35c:	0800a3fb 	.word	0x0800a3fb
 800a360:	0800a3fb 	.word	0x0800a3fb
 800a364:	0800a3fb 	.word	0x0800a3fb
 800a368:	0800a3fb 	.word	0x0800a3fb
 800a36c:	0800a3fb 	.word	0x0800a3fb
 800a370:	0800a3fb 	.word	0x0800a3fb
 800a374:	0800a3fb 	.word	0x0800a3fb
 800a378:	0800a3fb 	.word	0x0800a3fb
 800a37c:	0800a3fb 	.word	0x0800a3fb
 800a380:	0800a3fb 	.word	0x0800a3fb
 800a384:	0800a3fb 	.word	0x0800a3fb
 800a388:	0800a3fb 	.word	0x0800a3fb
 800a38c:	0800a3ed 	.word	0x0800a3ed
 800a390:	2b40      	cmp	r3, #64	; 0x40
 800a392:	d02e      	beq.n	800a3f2 <UART_SetConfig+0x896>
 800a394:	e031      	b.n	800a3fa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a396:	f7fc fa0d 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 800a39a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a39c:	e033      	b.n	800a406 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a39e:	f7fc fa1f 	bl	80067e0 <HAL_RCC_GetPCLK2Freq>
 800a3a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3a4:	e02f      	b.n	800a406 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a6:	f107 0314 	add.w	r3, r7, #20
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fd f984 	bl	80076b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3b4:	e027      	b.n	800a406 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3b6:	f107 0308 	add.w	r3, r7, #8
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fd fad0 	bl	8007960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3c4:	e01f      	b.n	800a406 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3c6:	4b58      	ldr	r3, [pc, #352]	; (800a528 <UART_SetConfig+0x9cc>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0320 	and.w	r3, r3, #32
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d009      	beq.n	800a3e6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3d2:	4b55      	ldr	r3, [pc, #340]	; (800a528 <UART_SetConfig+0x9cc>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	f003 0303 	and.w	r3, r3, #3
 800a3dc:	4a53      	ldr	r2, [pc, #332]	; (800a52c <UART_SetConfig+0x9d0>)
 800a3de:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3e4:	e00f      	b.n	800a406 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a3e6:	4b51      	ldr	r3, [pc, #324]	; (800a52c <UART_SetConfig+0x9d0>)
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3ea:	e00c      	b.n	800a406 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3ec:	4b4c      	ldr	r3, [pc, #304]	; (800a520 <UART_SetConfig+0x9c4>)
 800a3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3f0:	e009      	b.n	800a406 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3f8:	e005      	b.n	800a406 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80ea 	beq.w	800a5e2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	4a44      	ldr	r2, [pc, #272]	; (800a524 <UART_SetConfig+0x9c8>)
 800a414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a418:	461a      	mov	r2, r3
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a420:	005a      	lsls	r2, r3, #1
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	441a      	add	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a432:	b29b      	uxth	r3, r3
 800a434:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	2b0f      	cmp	r3, #15
 800a43a:	d916      	bls.n	800a46a <UART_SetConfig+0x90e>
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a442:	d212      	bcs.n	800a46a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	b29b      	uxth	r3, r3
 800a448:	f023 030f 	bic.w	r3, r3, #15
 800a44c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	085b      	lsrs	r3, r3, #1
 800a452:	b29b      	uxth	r3, r3
 800a454:	f003 0307 	and.w	r3, r3, #7
 800a458:	b29a      	uxth	r2, r3
 800a45a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a45c:	4313      	orrs	r3, r2
 800a45e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a466:	60da      	str	r2, [r3, #12]
 800a468:	e0bb      	b.n	800a5e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a470:	e0b7      	b.n	800a5e2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a476:	2b20      	cmp	r3, #32
 800a478:	dc4a      	bgt.n	800a510 <UART_SetConfig+0x9b4>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f2c0 8086 	blt.w	800a58c <UART_SetConfig+0xa30>
 800a480:	2b20      	cmp	r3, #32
 800a482:	f200 8083 	bhi.w	800a58c <UART_SetConfig+0xa30>
 800a486:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <UART_SetConfig+0x930>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a517 	.word	0x0800a517
 800a490:	0800a531 	.word	0x0800a531
 800a494:	0800a58d 	.word	0x0800a58d
 800a498:	0800a58d 	.word	0x0800a58d
 800a49c:	0800a539 	.word	0x0800a539
 800a4a0:	0800a58d 	.word	0x0800a58d
 800a4a4:	0800a58d 	.word	0x0800a58d
 800a4a8:	0800a58d 	.word	0x0800a58d
 800a4ac:	0800a549 	.word	0x0800a549
 800a4b0:	0800a58d 	.word	0x0800a58d
 800a4b4:	0800a58d 	.word	0x0800a58d
 800a4b8:	0800a58d 	.word	0x0800a58d
 800a4bc:	0800a58d 	.word	0x0800a58d
 800a4c0:	0800a58d 	.word	0x0800a58d
 800a4c4:	0800a58d 	.word	0x0800a58d
 800a4c8:	0800a58d 	.word	0x0800a58d
 800a4cc:	0800a559 	.word	0x0800a559
 800a4d0:	0800a58d 	.word	0x0800a58d
 800a4d4:	0800a58d 	.word	0x0800a58d
 800a4d8:	0800a58d 	.word	0x0800a58d
 800a4dc:	0800a58d 	.word	0x0800a58d
 800a4e0:	0800a58d 	.word	0x0800a58d
 800a4e4:	0800a58d 	.word	0x0800a58d
 800a4e8:	0800a58d 	.word	0x0800a58d
 800a4ec:	0800a58d 	.word	0x0800a58d
 800a4f0:	0800a58d 	.word	0x0800a58d
 800a4f4:	0800a58d 	.word	0x0800a58d
 800a4f8:	0800a58d 	.word	0x0800a58d
 800a4fc:	0800a58d 	.word	0x0800a58d
 800a500:	0800a58d 	.word	0x0800a58d
 800a504:	0800a58d 	.word	0x0800a58d
 800a508:	0800a58d 	.word	0x0800a58d
 800a50c:	0800a57f 	.word	0x0800a57f
 800a510:	2b40      	cmp	r3, #64	; 0x40
 800a512:	d037      	beq.n	800a584 <UART_SetConfig+0xa28>
 800a514:	e03a      	b.n	800a58c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a516:	f7fc f94d 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 800a51a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a51c:	e03c      	b.n	800a598 <UART_SetConfig+0xa3c>
 800a51e:	bf00      	nop
 800a520:	003d0900 	.word	0x003d0900
 800a524:	0800c35c 	.word	0x0800c35c
 800a528:	58024400 	.word	0x58024400
 800a52c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a530:	f7fc f956 	bl	80067e0 <HAL_RCC_GetPCLK2Freq>
 800a534:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a536:	e02f      	b.n	800a598 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a538:	f107 0314 	add.w	r3, r7, #20
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fd f8bb 	bl	80076b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a546:	e027      	b.n	800a598 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a548:	f107 0308 	add.w	r3, r7, #8
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fd fa07 	bl	8007960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a556:	e01f      	b.n	800a598 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a558:	4b2c      	ldr	r3, [pc, #176]	; (800a60c <UART_SetConfig+0xab0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0320 	and.w	r3, r3, #32
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a564:	4b29      	ldr	r3, [pc, #164]	; (800a60c <UART_SetConfig+0xab0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	08db      	lsrs	r3, r3, #3
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	4a28      	ldr	r2, [pc, #160]	; (800a610 <UART_SetConfig+0xab4>)
 800a570:	fa22 f303 	lsr.w	r3, r2, r3
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a576:	e00f      	b.n	800a598 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a578:	4b25      	ldr	r3, [pc, #148]	; (800a610 <UART_SetConfig+0xab4>)
 800a57a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a57c:	e00c      	b.n	800a598 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a57e:	4b25      	ldr	r3, [pc, #148]	; (800a614 <UART_SetConfig+0xab8>)
 800a580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a582:	e009      	b.n	800a598 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a58a:	e005      	b.n	800a598 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a596:	bf00      	nop
    }

    if (pclk != 0U)
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d021      	beq.n	800a5e2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <UART_SetConfig+0xabc>)
 800a5a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	085b      	lsrs	r3, r3, #1
 800a5b6:	441a      	add	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	2b0f      	cmp	r3, #15
 800a5c8:	d908      	bls.n	800a5dc <UART_SetConfig+0xa80>
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d0:	d204      	bcs.n	800a5dc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d8:	60da      	str	r2, [r3, #12]
 800a5da:	e002      	b.n	800a5e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a5fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a602:	4618      	mov	r0, r3
 800a604:	3738      	adds	r7, #56	; 0x38
 800a606:	46bd      	mov	sp, r7
 800a608:	bdb0      	pop	{r4, r5, r7, pc}
 800a60a:	bf00      	nop
 800a60c:	58024400 	.word	0x58024400
 800a610:	03d09000 	.word	0x03d09000
 800a614:	003d0900 	.word	0x003d0900
 800a618:	0800c35c 	.word	0x0800c35c

0800a61c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00a      	beq.n	800a646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b0:	f003 0310 	and.w	r3, r3, #16
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01a      	beq.n	800a732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a71a:	d10a      	bne.n	800a732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00a      	beq.n	800a754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	605a      	str	r2, [r3, #4]
  }
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af02      	add	r7, sp, #8
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a770:	f7f7 ff90 	bl	8002694 <HAL_GetTick>
 800a774:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0308 	and.w	r3, r3, #8
 800a780:	2b08      	cmp	r3, #8
 800a782:	d10e      	bne.n	800a7a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f82f 	bl	800a7f6 <UART_WaitOnFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e025      	b.n	800a7ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d10e      	bne.n	800a7ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f819 	bl	800a7f6 <UART_WaitOnFlagUntilTimeout>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e00f      	b.n	800a7ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	603b      	str	r3, [r7, #0]
 800a802:	4613      	mov	r3, r2
 800a804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a806:	e062      	b.n	800a8ce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80e:	d05e      	beq.n	800a8ce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a810:	f7f7 ff40 	bl	8002694 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d302      	bcc.n	800a826 <UART_WaitOnFlagUntilTimeout+0x30>
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d11d      	bne.n	800a862 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a834:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	689a      	ldr	r2, [r3, #8]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f022 0201 	bic.w	r2, r2, #1
 800a844:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e045      	b.n	800a8ee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d02e      	beq.n	800a8ce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a87e:	d126      	bne.n	800a8ce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a888:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a898:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f022 0201 	bic.w	r2, r2, #1
 800a8a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e00f      	b.n	800a8ee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69da      	ldr	r2, [r3, #28]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	bf0c      	ite	eq
 800a8de:	2301      	moveq	r3, #1
 800a8e0:	2300      	movne	r3, #0
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d08d      	beq.n	800a808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	4613      	mov	r3, r2
 800a904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	88fa      	ldrh	r2, [r7, #6]
 800a910:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	88fa      	ldrh	r2, [r7, #6]
 800a918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92a:	d10e      	bne.n	800a94a <UART_Start_Receive_IT+0x52>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d105      	bne.n	800a940 <UART_Start_Receive_IT+0x48>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a93a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a93e:	e02d      	b.n	800a99c <UART_Start_Receive_IT+0xa4>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	22ff      	movs	r2, #255	; 0xff
 800a944:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a948:	e028      	b.n	800a99c <UART_Start_Receive_IT+0xa4>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10d      	bne.n	800a96e <UART_Start_Receive_IT+0x76>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <UART_Start_Receive_IT+0x6c>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	22ff      	movs	r2, #255	; 0xff
 800a95e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a962:	e01b      	b.n	800a99c <UART_Start_Receive_IT+0xa4>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	227f      	movs	r2, #127	; 0x7f
 800a968:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a96c:	e016      	b.n	800a99c <UART_Start_Receive_IT+0xa4>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a976:	d10d      	bne.n	800a994 <UART_Start_Receive_IT+0x9c>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <UART_Start_Receive_IT+0x92>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	227f      	movs	r2, #127	; 0x7f
 800a984:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a988:	e008      	b.n	800a99c <UART_Start_Receive_IT+0xa4>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	223f      	movs	r2, #63	; 0x3f
 800a98e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a992:	e003      	b.n	800a99c <UART_Start_Receive_IT+0xa4>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2222      	movs	r2, #34	; 0x22
 800a9a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f042 0201 	orr.w	r2, r2, #1
 800a9ba:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c4:	d12a      	bne.n	800aa1c <UART_Start_Receive_IT+0x124>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a9cc:	88fa      	ldrh	r2, [r7, #6]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d324      	bcc.n	800aa1c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9da:	d107      	bne.n	800a9ec <UART_Start_Receive_IT+0xf4>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d103      	bne.n	800a9ec <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4a1f      	ldr	r2, [pc, #124]	; (800aa64 <UART_Start_Receive_IT+0x16c>)
 800a9e8:	671a      	str	r2, [r3, #112]	; 0x70
 800a9ea:	e002      	b.n	800a9f2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4a1e      	ldr	r2, [pc, #120]	; (800aa68 <UART_Start_Receive_IT+0x170>)
 800a9f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa08:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689a      	ldr	r2, [r3, #8]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800aa18:	609a      	str	r2, [r3, #8]
 800aa1a:	e01b      	b.n	800aa54 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa24:	d107      	bne.n	800aa36 <UART_Start_Receive_IT+0x13e>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d103      	bne.n	800aa36 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4a0e      	ldr	r2, [pc, #56]	; (800aa6c <UART_Start_Receive_IT+0x174>)
 800aa32:	671a      	str	r2, [r3, #112]	; 0x70
 800aa34:	e002      	b.n	800aa3c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4a0d      	ldr	r2, [pc, #52]	; (800aa70 <UART_Start_Receive_IT+0x178>)
 800aa3a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800aa52:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	0800aeed 	.word	0x0800aeed
 800aa68:	0800ace9 	.word	0x0800ace9
 800aa6c:	0800ac11 	.word	0x0800ac11
 800aa70:	0800ab39 	.word	0x0800ab39

0800aa74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6899      	ldr	r1, [r3, #8]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	4b0f      	ldr	r3, [pc, #60]	; (800aad4 <UART_EndRxTransfer+0x60>)
 800aa98:	400b      	ands	r3, r1
 800aa9a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d107      	bne.n	800aab4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f022 0210 	bic.w	r2, r2, #16
 800aab2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	effffffe 	.word	0xeffffffe

0800aad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff f81a 	bl	8009b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aafc:	bf00      	nop
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7f6 ff1a 	bl	8001964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab46:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4e:	2b22      	cmp	r3, #34	; 0x22
 800ab50:	d152      	bne.n	800abf8 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab5a:	89bb      	ldrh	r3, [r7, #12]
 800ab5c:	b2d9      	uxtb	r1, r3
 800ab5e:	89fb      	ldrh	r3, [r7, #14]
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab66:	400a      	ands	r2, r1
 800ab68:	b2d2      	uxtb	r2, r2
 800ab6a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d139      	bne.n	800ac08 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aba2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f022 0201 	bic.w	r2, r2, #1
 800abb2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d10f      	bne.n	800abea <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0210 	bic.w	r2, r2, #16
 800abd8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7fe ffae 	bl	8009b44 <HAL_UARTEx_RxEventCallback>
 800abe8:	e002      	b.n	800abf0 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7f6 fd8e 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800abf6:	e007      	b.n	800ac08 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0208 	orr.w	r2, r2, #8
 800ac06:	619a      	str	r2, [r3, #24]
}
 800ac08:	bf00      	nop
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac1e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac26:	2b22      	cmp	r3, #34	; 0x22
 800ac28:	d152      	bne.n	800acd0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac36:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ac38:	89ba      	ldrh	r2, [r7, #12]
 800ac3a:	89fb      	ldrh	r3, [r7, #14]
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac48:	1c9a      	adds	r2, r3, #2
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	3b01      	subs	r3, #1
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d139      	bne.n	800ace0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac7a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f022 0201 	bic.w	r2, r2, #1
 800ac8a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2220      	movs	r2, #32
 800ac90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d10f      	bne.n	800acc2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0210 	bic.w	r2, r2, #16
 800acb0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7fe ff42 	bl	8009b44 <HAL_UARTEx_RxEventCallback>
 800acc0:	e002      	b.n	800acc8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7f6 fd22 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acce:	e007      	b.n	800ace0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699a      	ldr	r2, [r3, #24]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f042 0208 	orr.w	r2, r2, #8
 800acde:	619a      	str	r2, [r3, #24]
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acf6:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad16:	2b22      	cmp	r3, #34	; 0x22
 800ad18:	f040 80d8 	bne.w	800aecc <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad22:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad24:	e0a8      	b.n	800ae78 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad2e:	89bb      	ldrh	r3, [r7, #12]
 800ad30:	b2d9      	uxtb	r1, r3
 800ad32:	8b7b      	ldrh	r3, [r7, #26]
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad3a:	400a      	ands	r2, r1
 800ad3c:	b2d2      	uxtb	r2, r2
 800ad3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b01      	subs	r3, #1
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f003 0307 	and.w	r3, r3, #7
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d04d      	beq.n	800ae0a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d010      	beq.n	800ad9a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00b      	beq.n	800ad9a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2201      	movs	r2, #1
 800ad88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad90:	f043 0201 	orr.w	r2, r3, #1
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	f003 0302 	and.w	r3, r3, #2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d010      	beq.n	800adc6 <UART_RxISR_8BIT_FIFOEN+0xde>
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00b      	beq.n	800adc6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2202      	movs	r2, #2
 800adb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adbc:	f043 0204 	orr.w	r2, r3, #4
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d010      	beq.n	800adf2 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00b      	beq.n	800adf2 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2204      	movs	r2, #4
 800ade0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ade8:	f043 0202 	orr.w	r2, r3, #2
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d006      	beq.n	800ae0a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7fe fe97 	bl	8009b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d130      	bne.n	800ae78 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae24:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6899      	ldr	r1, [r3, #8]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	4b2c      	ldr	r3, [pc, #176]	; (800aee4 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800ae32:	400b      	ands	r3, r1
 800ae34:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d10f      	bne.n	800ae6c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0210 	bic.w	r2, r2, #16
 800ae5a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fe fe6d 	bl	8009b44 <HAL_UARTEx_RxEventCallback>
 800ae6a:	e002      	b.n	800ae72 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7f6 fc4d 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae78:	89fb      	ldrh	r3, [r7, #14]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d005      	beq.n	800ae8a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	f003 0320 	and.w	r3, r3, #32
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f47f af4e 	bne.w	800ad26 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae90:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ae92:	897b      	ldrh	r3, [r7, #10]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d021      	beq.n	800aedc <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ae9e:	897a      	ldrh	r2, [r7, #10]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d21b      	bcs.n	800aedc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689a      	ldr	r2, [r3, #8]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aeb2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a0c      	ldr	r2, [pc, #48]	; (800aee8 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800aeb8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f042 0220 	orr.w	r2, r2, #32
 800aec8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aeca:	e007      	b.n	800aedc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	699a      	ldr	r2, [r3, #24]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f042 0208 	orr.w	r2, r2, #8
 800aeda:	619a      	str	r2, [r3, #24]
}
 800aedc:	bf00      	nop
 800aede:	3720      	adds	r7, #32
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	effffffe 	.word	0xeffffffe
 800aee8:	0800ab39 	.word	0x0800ab39

0800aeec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	; 0x28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aefa:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af1a:	2b22      	cmp	r3, #34	; 0x22
 800af1c:	f040 80d8 	bne.w	800b0d0 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af26:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af28:	e0a8      	b.n	800b07c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af36:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800af38:	8aba      	ldrh	r2, [r7, #20]
 800af3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af3c:	4013      	ands	r3, r2
 800af3e:	b29a      	uxth	r2, r3
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af48:	1c9a      	adds	r2, r3, #2
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af54:	b29b      	uxth	r3, r3
 800af56:	3b01      	subs	r3, #1
 800af58:	b29a      	uxth	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d04d      	beq.n	800b00e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d010      	beq.n	800af9e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00b      	beq.n	800af9e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2201      	movs	r2, #1
 800af8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af94:	f043 0201 	orr.w	r2, r3, #1
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	f003 0302 	and.w	r3, r3, #2
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d010      	beq.n	800afca <UART_RxISR_16BIT_FIFOEN+0xde>
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00b      	beq.n	800afca <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2202      	movs	r2, #2
 800afb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afc0:	f043 0204 	orr.w	r2, r3, #4
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	f003 0304 	and.w	r3, r3, #4
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d010      	beq.n	800aff6 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00b      	beq.n	800aff6 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2204      	movs	r2, #4
 800afe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afec:	f043 0202 	orr.w	r2, r3, #2
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d006      	beq.n	800b00e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7fe fd95 	bl	8009b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b014:	b29b      	uxth	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d130      	bne.n	800b07c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b028:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6899      	ldr	r1, [r3, #8]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b2c      	ldr	r3, [pc, #176]	; (800b0e8 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800b036:	400b      	ands	r3, r1
 800b038:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d10f      	bne.n	800b070 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0210 	bic.w	r2, r2, #16
 800b05e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fe fd6b 	bl	8009b44 <HAL_UARTEx_RxEventCallback>
 800b06e:	e002      	b.n	800b076 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7f6 fb4b 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b07c:	8afb      	ldrh	r3, [r7, #22]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f47f af4e 	bne.w	800af2a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b094:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b096:	89fb      	ldrh	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d021      	beq.n	800b0e0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b0a2:	89fa      	ldrh	r2, [r7, #14]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d21b      	bcs.n	800b0e0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689a      	ldr	r2, [r3, #8]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b0b6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a0c      	ldr	r2, [pc, #48]	; (800b0ec <UART_RxISR_16BIT_FIFOEN+0x200>)
 800b0bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f042 0220 	orr.w	r2, r2, #32
 800b0cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0ce:	e007      	b.n	800b0e0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	699a      	ldr	r2, [r3, #24]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f042 0208 	orr.w	r2, r2, #8
 800b0de:	619a      	str	r2, [r3, #24]
}
 800b0e0:	bf00      	nop
 800b0e2:	3728      	adds	r7, #40	; 0x28
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	effffffe 	.word	0xeffffffe
 800b0ec:	0800ac11 	.word	0x0800ac11

0800b0f0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e056      	b.n	800b1b6 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d106      	bne.n	800b120 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7f6 fe84 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2224      	movs	r2, #36	; 0x24
 800b124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f022 0201 	bic.w	r2, r2, #1
 800b136:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7fe fd0f 	bl	8009b5c <UART_SetConfig>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b01      	cmp	r3, #1
 800b142:	d101      	bne.n	800b148 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e036      	b.n	800b1b6 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff fa63 	bl	800a61c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	689a      	ldr	r2, [r3, #8]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b164:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	430a      	orrs	r2, r1
 800b178:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	055b      	lsls	r3, r3, #21
 800b17e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	4313      	orrs	r3, r2
 800b188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	4b0b      	ldr	r3, [pc, #44]	; (800b1c0 <HAL_RS485Ex_Init+0xd0>)
 800b192:	4013      	ands	r3, r2
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	6812      	ldr	r2, [r2, #0]
 800b198:	6979      	ldr	r1, [r7, #20]
 800b19a:	430b      	orrs	r3, r1
 800b19c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f042 0201 	orr.w	r2, r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7ff fad6 	bl	800a760 <UART_CheckIdleState>
 800b1b4:	4603      	mov	r3, r0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	fc00ffff 	.word	0xfc00ffff

0800b1c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d101      	bne.n	800b216 <HAL_UARTEx_DisableFifoMode+0x16>
 800b212:	2302      	movs	r3, #2
 800b214:	e027      	b.n	800b266 <HAL_UARTEx_DisableFifoMode+0x66>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2224      	movs	r2, #36	; 0x24
 800b222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f022 0201 	bic.w	r2, r2, #1
 800b23c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b244:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2220      	movs	r2, #32
 800b258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b282:	2b01      	cmp	r3, #1
 800b284:	d101      	bne.n	800b28a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b286:	2302      	movs	r3, #2
 800b288:	e02d      	b.n	800b2e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2224      	movs	r2, #36	; 0x24
 800b296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 0201 	bic.w	r2, r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f850 	bl	800b36c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d101      	bne.n	800b306 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b302:	2302      	movs	r3, #2
 800b304:	e02d      	b.n	800b362 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2224      	movs	r2, #36	; 0x24
 800b312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0201 	bic.w	r2, r2, #1
 800b32c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	683a      	ldr	r2, [r7, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f812 	bl	800b36c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2220      	movs	r2, #32
 800b354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d108      	bne.n	800b38e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b38c:	e031      	b.n	800b3f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b38e:	2310      	movs	r3, #16
 800b390:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b392:	2310      	movs	r3, #16
 800b394:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	0e5b      	lsrs	r3, r3, #25
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	0f5b      	lsrs	r3, r3, #29
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 0307 	and.w	r3, r3, #7
 800b3b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3b6:	7bbb      	ldrb	r3, [r7, #14]
 800b3b8:	7b3a      	ldrb	r2, [r7, #12]
 800b3ba:	4911      	ldr	r1, [pc, #68]	; (800b400 <UARTEx_SetNbDataToProcess+0x94>)
 800b3bc:	5c8a      	ldrb	r2, [r1, r2]
 800b3be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3c2:	7b3a      	ldrb	r2, [r7, #12]
 800b3c4:	490f      	ldr	r1, [pc, #60]	; (800b404 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	7b7a      	ldrb	r2, [r7, #13]
 800b3d8:	4909      	ldr	r1, [pc, #36]	; (800b400 <UARTEx_SetNbDataToProcess+0x94>)
 800b3da:	5c8a      	ldrb	r2, [r1, r2]
 800b3dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3e0:	7b7a      	ldrb	r2, [r7, #13]
 800b3e2:	4908      	ldr	r1, [pc, #32]	; (800b404 <UARTEx_SetNbDataToProcess+0x98>)
 800b3e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3f2:	bf00      	nop
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	0800c374 	.word	0x0800c374
 800b404:	0800c37c 	.word	0x0800c37c

0800b408 <__errno>:
 800b408:	4b01      	ldr	r3, [pc, #4]	; (800b410 <__errno+0x8>)
 800b40a:	6818      	ldr	r0, [r3, #0]
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	20000010 	.word	0x20000010

0800b414 <__libc_init_array>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4d0d      	ldr	r5, [pc, #52]	; (800b44c <__libc_init_array+0x38>)
 800b418:	4c0d      	ldr	r4, [pc, #52]	; (800b450 <__libc_init_array+0x3c>)
 800b41a:	1b64      	subs	r4, r4, r5
 800b41c:	10a4      	asrs	r4, r4, #2
 800b41e:	2600      	movs	r6, #0
 800b420:	42a6      	cmp	r6, r4
 800b422:	d109      	bne.n	800b438 <__libc_init_array+0x24>
 800b424:	4d0b      	ldr	r5, [pc, #44]	; (800b454 <__libc_init_array+0x40>)
 800b426:	4c0c      	ldr	r4, [pc, #48]	; (800b458 <__libc_init_array+0x44>)
 800b428:	f000 ff76 	bl	800c318 <_init>
 800b42c:	1b64      	subs	r4, r4, r5
 800b42e:	10a4      	asrs	r4, r4, #2
 800b430:	2600      	movs	r6, #0
 800b432:	42a6      	cmp	r6, r4
 800b434:	d105      	bne.n	800b442 <__libc_init_array+0x2e>
 800b436:	bd70      	pop	{r4, r5, r6, pc}
 800b438:	f855 3b04 	ldr.w	r3, [r5], #4
 800b43c:	4798      	blx	r3
 800b43e:	3601      	adds	r6, #1
 800b440:	e7ee      	b.n	800b420 <__libc_init_array+0xc>
 800b442:	f855 3b04 	ldr.w	r3, [r5], #4
 800b446:	4798      	blx	r3
 800b448:	3601      	adds	r6, #1
 800b44a:	e7f2      	b.n	800b432 <__libc_init_array+0x1e>
 800b44c:	0800c424 	.word	0x0800c424
 800b450:	0800c424 	.word	0x0800c424
 800b454:	0800c424 	.word	0x0800c424
 800b458:	0800c428 	.word	0x0800c428

0800b45c <memset>:
 800b45c:	4402      	add	r2, r0
 800b45e:	4603      	mov	r3, r0
 800b460:	4293      	cmp	r3, r2
 800b462:	d100      	bne.n	800b466 <memset+0xa>
 800b464:	4770      	bx	lr
 800b466:	f803 1b01 	strb.w	r1, [r3], #1
 800b46a:	e7f9      	b.n	800b460 <memset+0x4>

0800b46c <iprintf>:
 800b46c:	b40f      	push	{r0, r1, r2, r3}
 800b46e:	4b0a      	ldr	r3, [pc, #40]	; (800b498 <iprintf+0x2c>)
 800b470:	b513      	push	{r0, r1, r4, lr}
 800b472:	681c      	ldr	r4, [r3, #0]
 800b474:	b124      	cbz	r4, 800b480 <iprintf+0x14>
 800b476:	69a3      	ldr	r3, [r4, #24]
 800b478:	b913      	cbnz	r3, 800b480 <iprintf+0x14>
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 f866 	bl	800b54c <__sinit>
 800b480:	ab05      	add	r3, sp, #20
 800b482:	9a04      	ldr	r2, [sp, #16]
 800b484:	68a1      	ldr	r1, [r4, #8]
 800b486:	9301      	str	r3, [sp, #4]
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 f983 	bl	800b794 <_vfiprintf_r>
 800b48e:	b002      	add	sp, #8
 800b490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b494:	b004      	add	sp, #16
 800b496:	4770      	bx	lr
 800b498:	20000010 	.word	0x20000010

0800b49c <std>:
 800b49c:	2300      	movs	r3, #0
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4aa:	6083      	str	r3, [r0, #8]
 800b4ac:	8181      	strh	r1, [r0, #12]
 800b4ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b4b0:	81c2      	strh	r2, [r0, #14]
 800b4b2:	6183      	str	r3, [r0, #24]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	2208      	movs	r2, #8
 800b4b8:	305c      	adds	r0, #92	; 0x5c
 800b4ba:	f7ff ffcf 	bl	800b45c <memset>
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <std+0x38>)
 800b4c0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <std+0x3c>)
 800b4c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <std+0x40>)
 800b4c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4ca:	4b05      	ldr	r3, [pc, #20]	; (800b4e0 <std+0x44>)
 800b4cc:	6224      	str	r4, [r4, #32]
 800b4ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0800bd3d 	.word	0x0800bd3d
 800b4d8:	0800bd5f 	.word	0x0800bd5f
 800b4dc:	0800bd97 	.word	0x0800bd97
 800b4e0:	0800bdbb 	.word	0x0800bdbb

0800b4e4 <_cleanup_r>:
 800b4e4:	4901      	ldr	r1, [pc, #4]	; (800b4ec <_cleanup_r+0x8>)
 800b4e6:	f000 b8af 	b.w	800b648 <_fwalk_reent>
 800b4ea:	bf00      	nop
 800b4ec:	0800c095 	.word	0x0800c095

0800b4f0 <__sfmoreglue>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	1e4a      	subs	r2, r1, #1
 800b4f4:	2568      	movs	r5, #104	; 0x68
 800b4f6:	4355      	muls	r5, r2
 800b4f8:	460e      	mov	r6, r1
 800b4fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4fe:	f000 f8c5 	bl	800b68c <_malloc_r>
 800b502:	4604      	mov	r4, r0
 800b504:	b140      	cbz	r0, 800b518 <__sfmoreglue+0x28>
 800b506:	2100      	movs	r1, #0
 800b508:	e9c0 1600 	strd	r1, r6, [r0]
 800b50c:	300c      	adds	r0, #12
 800b50e:	60a0      	str	r0, [r4, #8]
 800b510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b514:	f7ff ffa2 	bl	800b45c <memset>
 800b518:	4620      	mov	r0, r4
 800b51a:	bd70      	pop	{r4, r5, r6, pc}

0800b51c <__sfp_lock_acquire>:
 800b51c:	4801      	ldr	r0, [pc, #4]	; (800b524 <__sfp_lock_acquire+0x8>)
 800b51e:	f000 b8b3 	b.w	800b688 <__retarget_lock_acquire_recursive>
 800b522:	bf00      	nop
 800b524:	2000094c 	.word	0x2000094c

0800b528 <__sfp_lock_release>:
 800b528:	4801      	ldr	r0, [pc, #4]	; (800b530 <__sfp_lock_release+0x8>)
 800b52a:	f000 b8ae 	b.w	800b68a <__retarget_lock_release_recursive>
 800b52e:	bf00      	nop
 800b530:	2000094c 	.word	0x2000094c

0800b534 <__sinit_lock_acquire>:
 800b534:	4801      	ldr	r0, [pc, #4]	; (800b53c <__sinit_lock_acquire+0x8>)
 800b536:	f000 b8a7 	b.w	800b688 <__retarget_lock_acquire_recursive>
 800b53a:	bf00      	nop
 800b53c:	20000947 	.word	0x20000947

0800b540 <__sinit_lock_release>:
 800b540:	4801      	ldr	r0, [pc, #4]	; (800b548 <__sinit_lock_release+0x8>)
 800b542:	f000 b8a2 	b.w	800b68a <__retarget_lock_release_recursive>
 800b546:	bf00      	nop
 800b548:	20000947 	.word	0x20000947

0800b54c <__sinit>:
 800b54c:	b510      	push	{r4, lr}
 800b54e:	4604      	mov	r4, r0
 800b550:	f7ff fff0 	bl	800b534 <__sinit_lock_acquire>
 800b554:	69a3      	ldr	r3, [r4, #24]
 800b556:	b11b      	cbz	r3, 800b560 <__sinit+0x14>
 800b558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b55c:	f7ff bff0 	b.w	800b540 <__sinit_lock_release>
 800b560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b564:	6523      	str	r3, [r4, #80]	; 0x50
 800b566:	4b13      	ldr	r3, [pc, #76]	; (800b5b4 <__sinit+0x68>)
 800b568:	4a13      	ldr	r2, [pc, #76]	; (800b5b8 <__sinit+0x6c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b56e:	42a3      	cmp	r3, r4
 800b570:	bf04      	itt	eq
 800b572:	2301      	moveq	r3, #1
 800b574:	61a3      	streq	r3, [r4, #24]
 800b576:	4620      	mov	r0, r4
 800b578:	f000 f820 	bl	800b5bc <__sfp>
 800b57c:	6060      	str	r0, [r4, #4]
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 f81c 	bl	800b5bc <__sfp>
 800b584:	60a0      	str	r0, [r4, #8]
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f818 	bl	800b5bc <__sfp>
 800b58c:	2200      	movs	r2, #0
 800b58e:	60e0      	str	r0, [r4, #12]
 800b590:	2104      	movs	r1, #4
 800b592:	6860      	ldr	r0, [r4, #4]
 800b594:	f7ff ff82 	bl	800b49c <std>
 800b598:	68a0      	ldr	r0, [r4, #8]
 800b59a:	2201      	movs	r2, #1
 800b59c:	2109      	movs	r1, #9
 800b59e:	f7ff ff7d 	bl	800b49c <std>
 800b5a2:	68e0      	ldr	r0, [r4, #12]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	2112      	movs	r1, #18
 800b5a8:	f7ff ff78 	bl	800b49c <std>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	61a3      	str	r3, [r4, #24]
 800b5b0:	e7d2      	b.n	800b558 <__sinit+0xc>
 800b5b2:	bf00      	nop
 800b5b4:	0800c384 	.word	0x0800c384
 800b5b8:	0800b4e5 	.word	0x0800b4e5

0800b5bc <__sfp>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	4607      	mov	r7, r0
 800b5c0:	f7ff ffac 	bl	800b51c <__sfp_lock_acquire>
 800b5c4:	4b1e      	ldr	r3, [pc, #120]	; (800b640 <__sfp+0x84>)
 800b5c6:	681e      	ldr	r6, [r3, #0]
 800b5c8:	69b3      	ldr	r3, [r6, #24]
 800b5ca:	b913      	cbnz	r3, 800b5d2 <__sfp+0x16>
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7ff ffbd 	bl	800b54c <__sinit>
 800b5d2:	3648      	adds	r6, #72	; 0x48
 800b5d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	d503      	bpl.n	800b5e4 <__sfp+0x28>
 800b5dc:	6833      	ldr	r3, [r6, #0]
 800b5de:	b30b      	cbz	r3, 800b624 <__sfp+0x68>
 800b5e0:	6836      	ldr	r6, [r6, #0]
 800b5e2:	e7f7      	b.n	800b5d4 <__sfp+0x18>
 800b5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5e8:	b9d5      	cbnz	r5, 800b620 <__sfp+0x64>
 800b5ea:	4b16      	ldr	r3, [pc, #88]	; (800b644 <__sfp+0x88>)
 800b5ec:	60e3      	str	r3, [r4, #12]
 800b5ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5f2:	6665      	str	r5, [r4, #100]	; 0x64
 800b5f4:	f000 f847 	bl	800b686 <__retarget_lock_init_recursive>
 800b5f8:	f7ff ff96 	bl	800b528 <__sfp_lock_release>
 800b5fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b604:	6025      	str	r5, [r4, #0]
 800b606:	61a5      	str	r5, [r4, #24]
 800b608:	2208      	movs	r2, #8
 800b60a:	4629      	mov	r1, r5
 800b60c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b610:	f7ff ff24 	bl	800b45c <memset>
 800b614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b61c:	4620      	mov	r0, r4
 800b61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b620:	3468      	adds	r4, #104	; 0x68
 800b622:	e7d9      	b.n	800b5d8 <__sfp+0x1c>
 800b624:	2104      	movs	r1, #4
 800b626:	4638      	mov	r0, r7
 800b628:	f7ff ff62 	bl	800b4f0 <__sfmoreglue>
 800b62c:	4604      	mov	r4, r0
 800b62e:	6030      	str	r0, [r6, #0]
 800b630:	2800      	cmp	r0, #0
 800b632:	d1d5      	bne.n	800b5e0 <__sfp+0x24>
 800b634:	f7ff ff78 	bl	800b528 <__sfp_lock_release>
 800b638:	230c      	movs	r3, #12
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	e7ee      	b.n	800b61c <__sfp+0x60>
 800b63e:	bf00      	nop
 800b640:	0800c384 	.word	0x0800c384
 800b644:	ffff0001 	.word	0xffff0001

0800b648 <_fwalk_reent>:
 800b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b64c:	4606      	mov	r6, r0
 800b64e:	4688      	mov	r8, r1
 800b650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b654:	2700      	movs	r7, #0
 800b656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b65a:	f1b9 0901 	subs.w	r9, r9, #1
 800b65e:	d505      	bpl.n	800b66c <_fwalk_reent+0x24>
 800b660:	6824      	ldr	r4, [r4, #0]
 800b662:	2c00      	cmp	r4, #0
 800b664:	d1f7      	bne.n	800b656 <_fwalk_reent+0xe>
 800b666:	4638      	mov	r0, r7
 800b668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b66c:	89ab      	ldrh	r3, [r5, #12]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d907      	bls.n	800b682 <_fwalk_reent+0x3a>
 800b672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b676:	3301      	adds	r3, #1
 800b678:	d003      	beq.n	800b682 <_fwalk_reent+0x3a>
 800b67a:	4629      	mov	r1, r5
 800b67c:	4630      	mov	r0, r6
 800b67e:	47c0      	blx	r8
 800b680:	4307      	orrs	r7, r0
 800b682:	3568      	adds	r5, #104	; 0x68
 800b684:	e7e9      	b.n	800b65a <_fwalk_reent+0x12>

0800b686 <__retarget_lock_init_recursive>:
 800b686:	4770      	bx	lr

0800b688 <__retarget_lock_acquire_recursive>:
 800b688:	4770      	bx	lr

0800b68a <__retarget_lock_release_recursive>:
 800b68a:	4770      	bx	lr

0800b68c <_malloc_r>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	1ccd      	adds	r5, r1, #3
 800b690:	f025 0503 	bic.w	r5, r5, #3
 800b694:	3508      	adds	r5, #8
 800b696:	2d0c      	cmp	r5, #12
 800b698:	bf38      	it	cc
 800b69a:	250c      	movcc	r5, #12
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	4606      	mov	r6, r0
 800b6a0:	db01      	blt.n	800b6a6 <_malloc_r+0x1a>
 800b6a2:	42a9      	cmp	r1, r5
 800b6a4:	d903      	bls.n	800b6ae <_malloc_r+0x22>
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ae:	f000 fda3 	bl	800c1f8 <__malloc_lock>
 800b6b2:	4921      	ldr	r1, [pc, #132]	; (800b738 <_malloc_r+0xac>)
 800b6b4:	680a      	ldr	r2, [r1, #0]
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	b99c      	cbnz	r4, 800b6e2 <_malloc_r+0x56>
 800b6ba:	4f20      	ldr	r7, [pc, #128]	; (800b73c <_malloc_r+0xb0>)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	b923      	cbnz	r3, 800b6ca <_malloc_r+0x3e>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 fb2a 	bl	800bd1c <_sbrk_r>
 800b6c8:	6038      	str	r0, [r7, #0]
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f000 fb25 	bl	800bd1c <_sbrk_r>
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	d123      	bne.n	800b71e <_malloc_r+0x92>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	6033      	str	r3, [r6, #0]
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f000 fd92 	bl	800c204 <__malloc_unlock>
 800b6e0:	e7e3      	b.n	800b6aa <_malloc_r+0x1e>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	1b5b      	subs	r3, r3, r5
 800b6e6:	d417      	bmi.n	800b718 <_malloc_r+0x8c>
 800b6e8:	2b0b      	cmp	r3, #11
 800b6ea:	d903      	bls.n	800b6f4 <_malloc_r+0x68>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	441c      	add	r4, r3
 800b6f0:	6025      	str	r5, [r4, #0]
 800b6f2:	e004      	b.n	800b6fe <_malloc_r+0x72>
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	42a2      	cmp	r2, r4
 800b6f8:	bf0c      	ite	eq
 800b6fa:	600b      	streq	r3, [r1, #0]
 800b6fc:	6053      	strne	r3, [r2, #4]
 800b6fe:	4630      	mov	r0, r6
 800b700:	f000 fd80 	bl	800c204 <__malloc_unlock>
 800b704:	f104 000b 	add.w	r0, r4, #11
 800b708:	1d23      	adds	r3, r4, #4
 800b70a:	f020 0007 	bic.w	r0, r0, #7
 800b70e:	1ac2      	subs	r2, r0, r3
 800b710:	d0cc      	beq.n	800b6ac <_malloc_r+0x20>
 800b712:	1a1b      	subs	r3, r3, r0
 800b714:	50a3      	str	r3, [r4, r2]
 800b716:	e7c9      	b.n	800b6ac <_malloc_r+0x20>
 800b718:	4622      	mov	r2, r4
 800b71a:	6864      	ldr	r4, [r4, #4]
 800b71c:	e7cc      	b.n	800b6b8 <_malloc_r+0x2c>
 800b71e:	1cc4      	adds	r4, r0, #3
 800b720:	f024 0403 	bic.w	r4, r4, #3
 800b724:	42a0      	cmp	r0, r4
 800b726:	d0e3      	beq.n	800b6f0 <_malloc_r+0x64>
 800b728:	1a21      	subs	r1, r4, r0
 800b72a:	4630      	mov	r0, r6
 800b72c:	f000 faf6 	bl	800bd1c <_sbrk_r>
 800b730:	3001      	adds	r0, #1
 800b732:	d1dd      	bne.n	800b6f0 <_malloc_r+0x64>
 800b734:	e7cf      	b.n	800b6d6 <_malloc_r+0x4a>
 800b736:	bf00      	nop
 800b738:	20000098 	.word	0x20000098
 800b73c:	2000009c 	.word	0x2000009c

0800b740 <__sfputc_r>:
 800b740:	6893      	ldr	r3, [r2, #8]
 800b742:	3b01      	subs	r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	b410      	push	{r4}
 800b748:	6093      	str	r3, [r2, #8]
 800b74a:	da08      	bge.n	800b75e <__sfputc_r+0x1e>
 800b74c:	6994      	ldr	r4, [r2, #24]
 800b74e:	42a3      	cmp	r3, r4
 800b750:	db01      	blt.n	800b756 <__sfputc_r+0x16>
 800b752:	290a      	cmp	r1, #10
 800b754:	d103      	bne.n	800b75e <__sfputc_r+0x1e>
 800b756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b75a:	f000 bb33 	b.w	800bdc4 <__swbuf_r>
 800b75e:	6813      	ldr	r3, [r2, #0]
 800b760:	1c58      	adds	r0, r3, #1
 800b762:	6010      	str	r0, [r2, #0]
 800b764:	7019      	strb	r1, [r3, #0]
 800b766:	4608      	mov	r0, r1
 800b768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <__sfputs_r>:
 800b76e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b770:	4606      	mov	r6, r0
 800b772:	460f      	mov	r7, r1
 800b774:	4614      	mov	r4, r2
 800b776:	18d5      	adds	r5, r2, r3
 800b778:	42ac      	cmp	r4, r5
 800b77a:	d101      	bne.n	800b780 <__sfputs_r+0x12>
 800b77c:	2000      	movs	r0, #0
 800b77e:	e007      	b.n	800b790 <__sfputs_r+0x22>
 800b780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b784:	463a      	mov	r2, r7
 800b786:	4630      	mov	r0, r6
 800b788:	f7ff ffda 	bl	800b740 <__sfputc_r>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d1f3      	bne.n	800b778 <__sfputs_r+0xa>
 800b790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b794 <_vfiprintf_r>:
 800b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	460d      	mov	r5, r1
 800b79a:	b09d      	sub	sp, #116	; 0x74
 800b79c:	4614      	mov	r4, r2
 800b79e:	4698      	mov	r8, r3
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	b118      	cbz	r0, 800b7ac <_vfiprintf_r+0x18>
 800b7a4:	6983      	ldr	r3, [r0, #24]
 800b7a6:	b90b      	cbnz	r3, 800b7ac <_vfiprintf_r+0x18>
 800b7a8:	f7ff fed0 	bl	800b54c <__sinit>
 800b7ac:	4b89      	ldr	r3, [pc, #548]	; (800b9d4 <_vfiprintf_r+0x240>)
 800b7ae:	429d      	cmp	r5, r3
 800b7b0:	d11b      	bne.n	800b7ea <_vfiprintf_r+0x56>
 800b7b2:	6875      	ldr	r5, [r6, #4]
 800b7b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7b6:	07d9      	lsls	r1, r3, #31
 800b7b8:	d405      	bmi.n	800b7c6 <_vfiprintf_r+0x32>
 800b7ba:	89ab      	ldrh	r3, [r5, #12]
 800b7bc:	059a      	lsls	r2, r3, #22
 800b7be:	d402      	bmi.n	800b7c6 <_vfiprintf_r+0x32>
 800b7c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7c2:	f7ff ff61 	bl	800b688 <__retarget_lock_acquire_recursive>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	071b      	lsls	r3, r3, #28
 800b7ca:	d501      	bpl.n	800b7d0 <_vfiprintf_r+0x3c>
 800b7cc:	692b      	ldr	r3, [r5, #16]
 800b7ce:	b9eb      	cbnz	r3, 800b80c <_vfiprintf_r+0x78>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f000 fb5a 	bl	800be8c <__swsetup_r>
 800b7d8:	b1c0      	cbz	r0, 800b80c <_vfiprintf_r+0x78>
 800b7da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7dc:	07dc      	lsls	r4, r3, #31
 800b7de:	d50e      	bpl.n	800b7fe <_vfiprintf_r+0x6a>
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	b01d      	add	sp, #116	; 0x74
 800b7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ea:	4b7b      	ldr	r3, [pc, #492]	; (800b9d8 <_vfiprintf_r+0x244>)
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	d101      	bne.n	800b7f4 <_vfiprintf_r+0x60>
 800b7f0:	68b5      	ldr	r5, [r6, #8]
 800b7f2:	e7df      	b.n	800b7b4 <_vfiprintf_r+0x20>
 800b7f4:	4b79      	ldr	r3, [pc, #484]	; (800b9dc <_vfiprintf_r+0x248>)
 800b7f6:	429d      	cmp	r5, r3
 800b7f8:	bf08      	it	eq
 800b7fa:	68f5      	ldreq	r5, [r6, #12]
 800b7fc:	e7da      	b.n	800b7b4 <_vfiprintf_r+0x20>
 800b7fe:	89ab      	ldrh	r3, [r5, #12]
 800b800:	0598      	lsls	r0, r3, #22
 800b802:	d4ed      	bmi.n	800b7e0 <_vfiprintf_r+0x4c>
 800b804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b806:	f7ff ff40 	bl	800b68a <__retarget_lock_release_recursive>
 800b80a:	e7e9      	b.n	800b7e0 <_vfiprintf_r+0x4c>
 800b80c:	2300      	movs	r3, #0
 800b80e:	9309      	str	r3, [sp, #36]	; 0x24
 800b810:	2320      	movs	r3, #32
 800b812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b816:	f8cd 800c 	str.w	r8, [sp, #12]
 800b81a:	2330      	movs	r3, #48	; 0x30
 800b81c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9e0 <_vfiprintf_r+0x24c>
 800b820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b824:	f04f 0901 	mov.w	r9, #1
 800b828:	4623      	mov	r3, r4
 800b82a:	469a      	mov	sl, r3
 800b82c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b830:	b10a      	cbz	r2, 800b836 <_vfiprintf_r+0xa2>
 800b832:	2a25      	cmp	r2, #37	; 0x25
 800b834:	d1f9      	bne.n	800b82a <_vfiprintf_r+0x96>
 800b836:	ebba 0b04 	subs.w	fp, sl, r4
 800b83a:	d00b      	beq.n	800b854 <_vfiprintf_r+0xc0>
 800b83c:	465b      	mov	r3, fp
 800b83e:	4622      	mov	r2, r4
 800b840:	4629      	mov	r1, r5
 800b842:	4630      	mov	r0, r6
 800b844:	f7ff ff93 	bl	800b76e <__sfputs_r>
 800b848:	3001      	adds	r0, #1
 800b84a:	f000 80aa 	beq.w	800b9a2 <_vfiprintf_r+0x20e>
 800b84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b850:	445a      	add	r2, fp
 800b852:	9209      	str	r2, [sp, #36]	; 0x24
 800b854:	f89a 3000 	ldrb.w	r3, [sl]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 80a2 	beq.w	800b9a2 <_vfiprintf_r+0x20e>
 800b85e:	2300      	movs	r3, #0
 800b860:	f04f 32ff 	mov.w	r2, #4294967295
 800b864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b868:	f10a 0a01 	add.w	sl, sl, #1
 800b86c:	9304      	str	r3, [sp, #16]
 800b86e:	9307      	str	r3, [sp, #28]
 800b870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b874:	931a      	str	r3, [sp, #104]	; 0x68
 800b876:	4654      	mov	r4, sl
 800b878:	2205      	movs	r2, #5
 800b87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87e:	4858      	ldr	r0, [pc, #352]	; (800b9e0 <_vfiprintf_r+0x24c>)
 800b880:	f7f4 fd2e 	bl	80002e0 <memchr>
 800b884:	9a04      	ldr	r2, [sp, #16]
 800b886:	b9d8      	cbnz	r0, 800b8c0 <_vfiprintf_r+0x12c>
 800b888:	06d1      	lsls	r1, r2, #27
 800b88a:	bf44      	itt	mi
 800b88c:	2320      	movmi	r3, #32
 800b88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b892:	0713      	lsls	r3, r2, #28
 800b894:	bf44      	itt	mi
 800b896:	232b      	movmi	r3, #43	; 0x2b
 800b898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b89c:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a2:	d015      	beq.n	800b8d0 <_vfiprintf_r+0x13c>
 800b8a4:	9a07      	ldr	r2, [sp, #28]
 800b8a6:	4654      	mov	r4, sl
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	f04f 0c0a 	mov.w	ip, #10
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b4:	3b30      	subs	r3, #48	; 0x30
 800b8b6:	2b09      	cmp	r3, #9
 800b8b8:	d94e      	bls.n	800b958 <_vfiprintf_r+0x1c4>
 800b8ba:	b1b0      	cbz	r0, 800b8ea <_vfiprintf_r+0x156>
 800b8bc:	9207      	str	r2, [sp, #28]
 800b8be:	e014      	b.n	800b8ea <_vfiprintf_r+0x156>
 800b8c0:	eba0 0308 	sub.w	r3, r0, r8
 800b8c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	9304      	str	r3, [sp, #16]
 800b8cc:	46a2      	mov	sl, r4
 800b8ce:	e7d2      	b.n	800b876 <_vfiprintf_r+0xe2>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	1d19      	adds	r1, r3, #4
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	9103      	str	r1, [sp, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	bfbb      	ittet	lt
 800b8dc:	425b      	neglt	r3, r3
 800b8de:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e2:	9307      	strge	r3, [sp, #28]
 800b8e4:	9307      	strlt	r3, [sp, #28]
 800b8e6:	bfb8      	it	lt
 800b8e8:	9204      	strlt	r2, [sp, #16]
 800b8ea:	7823      	ldrb	r3, [r4, #0]
 800b8ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ee:	d10c      	bne.n	800b90a <_vfiprintf_r+0x176>
 800b8f0:	7863      	ldrb	r3, [r4, #1]
 800b8f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f4:	d135      	bne.n	800b962 <_vfiprintf_r+0x1ce>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	1d1a      	adds	r2, r3, #4
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	9203      	str	r2, [sp, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bfb8      	it	lt
 800b902:	f04f 33ff 	movlt.w	r3, #4294967295
 800b906:	3402      	adds	r4, #2
 800b908:	9305      	str	r3, [sp, #20]
 800b90a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9f0 <_vfiprintf_r+0x25c>
 800b90e:	7821      	ldrb	r1, [r4, #0]
 800b910:	2203      	movs	r2, #3
 800b912:	4650      	mov	r0, sl
 800b914:	f7f4 fce4 	bl	80002e0 <memchr>
 800b918:	b140      	cbz	r0, 800b92c <_vfiprintf_r+0x198>
 800b91a:	2340      	movs	r3, #64	; 0x40
 800b91c:	eba0 000a 	sub.w	r0, r0, sl
 800b920:	fa03 f000 	lsl.w	r0, r3, r0
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	4303      	orrs	r3, r0
 800b928:	3401      	adds	r4, #1
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b930:	482c      	ldr	r0, [pc, #176]	; (800b9e4 <_vfiprintf_r+0x250>)
 800b932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b936:	2206      	movs	r2, #6
 800b938:	f7f4 fcd2 	bl	80002e0 <memchr>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d03f      	beq.n	800b9c0 <_vfiprintf_r+0x22c>
 800b940:	4b29      	ldr	r3, [pc, #164]	; (800b9e8 <_vfiprintf_r+0x254>)
 800b942:	bb1b      	cbnz	r3, 800b98c <_vfiprintf_r+0x1f8>
 800b944:	9b03      	ldr	r3, [sp, #12]
 800b946:	3307      	adds	r3, #7
 800b948:	f023 0307 	bic.w	r3, r3, #7
 800b94c:	3308      	adds	r3, #8
 800b94e:	9303      	str	r3, [sp, #12]
 800b950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b952:	443b      	add	r3, r7
 800b954:	9309      	str	r3, [sp, #36]	; 0x24
 800b956:	e767      	b.n	800b828 <_vfiprintf_r+0x94>
 800b958:	fb0c 3202 	mla	r2, ip, r2, r3
 800b95c:	460c      	mov	r4, r1
 800b95e:	2001      	movs	r0, #1
 800b960:	e7a5      	b.n	800b8ae <_vfiprintf_r+0x11a>
 800b962:	2300      	movs	r3, #0
 800b964:	3401      	adds	r4, #1
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	4619      	mov	r1, r3
 800b96a:	f04f 0c0a 	mov.w	ip, #10
 800b96e:	4620      	mov	r0, r4
 800b970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b974:	3a30      	subs	r2, #48	; 0x30
 800b976:	2a09      	cmp	r2, #9
 800b978:	d903      	bls.n	800b982 <_vfiprintf_r+0x1ee>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0c5      	beq.n	800b90a <_vfiprintf_r+0x176>
 800b97e:	9105      	str	r1, [sp, #20]
 800b980:	e7c3      	b.n	800b90a <_vfiprintf_r+0x176>
 800b982:	fb0c 2101 	mla	r1, ip, r1, r2
 800b986:	4604      	mov	r4, r0
 800b988:	2301      	movs	r3, #1
 800b98a:	e7f0      	b.n	800b96e <_vfiprintf_r+0x1da>
 800b98c:	ab03      	add	r3, sp, #12
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	462a      	mov	r2, r5
 800b992:	4b16      	ldr	r3, [pc, #88]	; (800b9ec <_vfiprintf_r+0x258>)
 800b994:	a904      	add	r1, sp, #16
 800b996:	4630      	mov	r0, r6
 800b998:	f3af 8000 	nop.w
 800b99c:	4607      	mov	r7, r0
 800b99e:	1c78      	adds	r0, r7, #1
 800b9a0:	d1d6      	bne.n	800b950 <_vfiprintf_r+0x1bc>
 800b9a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a4:	07d9      	lsls	r1, r3, #31
 800b9a6:	d405      	bmi.n	800b9b4 <_vfiprintf_r+0x220>
 800b9a8:	89ab      	ldrh	r3, [r5, #12]
 800b9aa:	059a      	lsls	r2, r3, #22
 800b9ac:	d402      	bmi.n	800b9b4 <_vfiprintf_r+0x220>
 800b9ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9b0:	f7ff fe6b 	bl	800b68a <__retarget_lock_release_recursive>
 800b9b4:	89ab      	ldrh	r3, [r5, #12]
 800b9b6:	065b      	lsls	r3, r3, #25
 800b9b8:	f53f af12 	bmi.w	800b7e0 <_vfiprintf_r+0x4c>
 800b9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9be:	e711      	b.n	800b7e4 <_vfiprintf_r+0x50>
 800b9c0:	ab03      	add	r3, sp, #12
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <_vfiprintf_r+0x258>)
 800b9c8:	a904      	add	r1, sp, #16
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f000 f880 	bl	800bad0 <_printf_i>
 800b9d0:	e7e4      	b.n	800b99c <_vfiprintf_r+0x208>
 800b9d2:	bf00      	nop
 800b9d4:	0800c3a8 	.word	0x0800c3a8
 800b9d8:	0800c3c8 	.word	0x0800c3c8
 800b9dc:	0800c388 	.word	0x0800c388
 800b9e0:	0800c3e8 	.word	0x0800c3e8
 800b9e4:	0800c3f2 	.word	0x0800c3f2
 800b9e8:	00000000 	.word	0x00000000
 800b9ec:	0800b76f 	.word	0x0800b76f
 800b9f0:	0800c3ee 	.word	0x0800c3ee

0800b9f4 <_printf_common>:
 800b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	4616      	mov	r6, r2
 800b9fa:	4699      	mov	r9, r3
 800b9fc:	688a      	ldr	r2, [r1, #8]
 800b9fe:	690b      	ldr	r3, [r1, #16]
 800ba00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	bfb8      	it	lt
 800ba08:	4613      	movlt	r3, r2
 800ba0a:	6033      	str	r3, [r6, #0]
 800ba0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba10:	4607      	mov	r7, r0
 800ba12:	460c      	mov	r4, r1
 800ba14:	b10a      	cbz	r2, 800ba1a <_printf_common+0x26>
 800ba16:	3301      	adds	r3, #1
 800ba18:	6033      	str	r3, [r6, #0]
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	0699      	lsls	r1, r3, #26
 800ba1e:	bf42      	ittt	mi
 800ba20:	6833      	ldrmi	r3, [r6, #0]
 800ba22:	3302      	addmi	r3, #2
 800ba24:	6033      	strmi	r3, [r6, #0]
 800ba26:	6825      	ldr	r5, [r4, #0]
 800ba28:	f015 0506 	ands.w	r5, r5, #6
 800ba2c:	d106      	bne.n	800ba3c <_printf_common+0x48>
 800ba2e:	f104 0a19 	add.w	sl, r4, #25
 800ba32:	68e3      	ldr	r3, [r4, #12]
 800ba34:	6832      	ldr	r2, [r6, #0]
 800ba36:	1a9b      	subs	r3, r3, r2
 800ba38:	42ab      	cmp	r3, r5
 800ba3a:	dc26      	bgt.n	800ba8a <_printf_common+0x96>
 800ba3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba40:	1e13      	subs	r3, r2, #0
 800ba42:	6822      	ldr	r2, [r4, #0]
 800ba44:	bf18      	it	ne
 800ba46:	2301      	movne	r3, #1
 800ba48:	0692      	lsls	r2, r2, #26
 800ba4a:	d42b      	bmi.n	800baa4 <_printf_common+0xb0>
 800ba4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba50:	4649      	mov	r1, r9
 800ba52:	4638      	mov	r0, r7
 800ba54:	47c0      	blx	r8
 800ba56:	3001      	adds	r0, #1
 800ba58:	d01e      	beq.n	800ba98 <_printf_common+0xa4>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	68e5      	ldr	r5, [r4, #12]
 800ba5e:	6832      	ldr	r2, [r6, #0]
 800ba60:	f003 0306 	and.w	r3, r3, #6
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	bf08      	it	eq
 800ba68:	1aad      	subeq	r5, r5, r2
 800ba6a:	68a3      	ldr	r3, [r4, #8]
 800ba6c:	6922      	ldr	r2, [r4, #16]
 800ba6e:	bf0c      	ite	eq
 800ba70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba74:	2500      	movne	r5, #0
 800ba76:	4293      	cmp	r3, r2
 800ba78:	bfc4      	itt	gt
 800ba7a:	1a9b      	subgt	r3, r3, r2
 800ba7c:	18ed      	addgt	r5, r5, r3
 800ba7e:	2600      	movs	r6, #0
 800ba80:	341a      	adds	r4, #26
 800ba82:	42b5      	cmp	r5, r6
 800ba84:	d11a      	bne.n	800babc <_printf_common+0xc8>
 800ba86:	2000      	movs	r0, #0
 800ba88:	e008      	b.n	800ba9c <_printf_common+0xa8>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	4652      	mov	r2, sl
 800ba8e:	4649      	mov	r1, r9
 800ba90:	4638      	mov	r0, r7
 800ba92:	47c0      	blx	r8
 800ba94:	3001      	adds	r0, #1
 800ba96:	d103      	bne.n	800baa0 <_printf_common+0xac>
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa0:	3501      	adds	r5, #1
 800baa2:	e7c6      	b.n	800ba32 <_printf_common+0x3e>
 800baa4:	18e1      	adds	r1, r4, r3
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	2030      	movs	r0, #48	; 0x30
 800baaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baae:	4422      	add	r2, r4
 800bab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bab8:	3302      	adds	r3, #2
 800baba:	e7c7      	b.n	800ba4c <_printf_common+0x58>
 800babc:	2301      	movs	r3, #1
 800babe:	4622      	mov	r2, r4
 800bac0:	4649      	mov	r1, r9
 800bac2:	4638      	mov	r0, r7
 800bac4:	47c0      	blx	r8
 800bac6:	3001      	adds	r0, #1
 800bac8:	d0e6      	beq.n	800ba98 <_printf_common+0xa4>
 800baca:	3601      	adds	r6, #1
 800bacc:	e7d9      	b.n	800ba82 <_printf_common+0x8e>
	...

0800bad0 <_printf_i>:
 800bad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	460c      	mov	r4, r1
 800bad6:	4691      	mov	r9, r2
 800bad8:	7e27      	ldrb	r7, [r4, #24]
 800bada:	990c      	ldr	r1, [sp, #48]	; 0x30
 800badc:	2f78      	cmp	r7, #120	; 0x78
 800bade:	4680      	mov	r8, r0
 800bae0:	469a      	mov	sl, r3
 800bae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bae6:	d807      	bhi.n	800baf8 <_printf_i+0x28>
 800bae8:	2f62      	cmp	r7, #98	; 0x62
 800baea:	d80a      	bhi.n	800bb02 <_printf_i+0x32>
 800baec:	2f00      	cmp	r7, #0
 800baee:	f000 80d8 	beq.w	800bca2 <_printf_i+0x1d2>
 800baf2:	2f58      	cmp	r7, #88	; 0x58
 800baf4:	f000 80a3 	beq.w	800bc3e <_printf_i+0x16e>
 800baf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bafc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb00:	e03a      	b.n	800bb78 <_printf_i+0xa8>
 800bb02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb06:	2b15      	cmp	r3, #21
 800bb08:	d8f6      	bhi.n	800baf8 <_printf_i+0x28>
 800bb0a:	a001      	add	r0, pc, #4	; (adr r0, 800bb10 <_printf_i+0x40>)
 800bb0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb10:	0800bb69 	.word	0x0800bb69
 800bb14:	0800bb7d 	.word	0x0800bb7d
 800bb18:	0800baf9 	.word	0x0800baf9
 800bb1c:	0800baf9 	.word	0x0800baf9
 800bb20:	0800baf9 	.word	0x0800baf9
 800bb24:	0800baf9 	.word	0x0800baf9
 800bb28:	0800bb7d 	.word	0x0800bb7d
 800bb2c:	0800baf9 	.word	0x0800baf9
 800bb30:	0800baf9 	.word	0x0800baf9
 800bb34:	0800baf9 	.word	0x0800baf9
 800bb38:	0800baf9 	.word	0x0800baf9
 800bb3c:	0800bc89 	.word	0x0800bc89
 800bb40:	0800bbad 	.word	0x0800bbad
 800bb44:	0800bc6b 	.word	0x0800bc6b
 800bb48:	0800baf9 	.word	0x0800baf9
 800bb4c:	0800baf9 	.word	0x0800baf9
 800bb50:	0800bcab 	.word	0x0800bcab
 800bb54:	0800baf9 	.word	0x0800baf9
 800bb58:	0800bbad 	.word	0x0800bbad
 800bb5c:	0800baf9 	.word	0x0800baf9
 800bb60:	0800baf9 	.word	0x0800baf9
 800bb64:	0800bc73 	.word	0x0800bc73
 800bb68:	680b      	ldr	r3, [r1, #0]
 800bb6a:	1d1a      	adds	r2, r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	600a      	str	r2, [r1, #0]
 800bb70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e0a3      	b.n	800bcc4 <_printf_i+0x1f4>
 800bb7c:	6825      	ldr	r5, [r4, #0]
 800bb7e:	6808      	ldr	r0, [r1, #0]
 800bb80:	062e      	lsls	r6, r5, #24
 800bb82:	f100 0304 	add.w	r3, r0, #4
 800bb86:	d50a      	bpl.n	800bb9e <_printf_i+0xce>
 800bb88:	6805      	ldr	r5, [r0, #0]
 800bb8a:	600b      	str	r3, [r1, #0]
 800bb8c:	2d00      	cmp	r5, #0
 800bb8e:	da03      	bge.n	800bb98 <_printf_i+0xc8>
 800bb90:	232d      	movs	r3, #45	; 0x2d
 800bb92:	426d      	negs	r5, r5
 800bb94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb98:	485e      	ldr	r0, [pc, #376]	; (800bd14 <_printf_i+0x244>)
 800bb9a:	230a      	movs	r3, #10
 800bb9c:	e019      	b.n	800bbd2 <_printf_i+0x102>
 800bb9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bba2:	6805      	ldr	r5, [r0, #0]
 800bba4:	600b      	str	r3, [r1, #0]
 800bba6:	bf18      	it	ne
 800bba8:	b22d      	sxthne	r5, r5
 800bbaa:	e7ef      	b.n	800bb8c <_printf_i+0xbc>
 800bbac:	680b      	ldr	r3, [r1, #0]
 800bbae:	6825      	ldr	r5, [r4, #0]
 800bbb0:	1d18      	adds	r0, r3, #4
 800bbb2:	6008      	str	r0, [r1, #0]
 800bbb4:	0628      	lsls	r0, r5, #24
 800bbb6:	d501      	bpl.n	800bbbc <_printf_i+0xec>
 800bbb8:	681d      	ldr	r5, [r3, #0]
 800bbba:	e002      	b.n	800bbc2 <_printf_i+0xf2>
 800bbbc:	0669      	lsls	r1, r5, #25
 800bbbe:	d5fb      	bpl.n	800bbb8 <_printf_i+0xe8>
 800bbc0:	881d      	ldrh	r5, [r3, #0]
 800bbc2:	4854      	ldr	r0, [pc, #336]	; (800bd14 <_printf_i+0x244>)
 800bbc4:	2f6f      	cmp	r7, #111	; 0x6f
 800bbc6:	bf0c      	ite	eq
 800bbc8:	2308      	moveq	r3, #8
 800bbca:	230a      	movne	r3, #10
 800bbcc:	2100      	movs	r1, #0
 800bbce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbd2:	6866      	ldr	r6, [r4, #4]
 800bbd4:	60a6      	str	r6, [r4, #8]
 800bbd6:	2e00      	cmp	r6, #0
 800bbd8:	bfa2      	ittt	ge
 800bbda:	6821      	ldrge	r1, [r4, #0]
 800bbdc:	f021 0104 	bicge.w	r1, r1, #4
 800bbe0:	6021      	strge	r1, [r4, #0]
 800bbe2:	b90d      	cbnz	r5, 800bbe8 <_printf_i+0x118>
 800bbe4:	2e00      	cmp	r6, #0
 800bbe6:	d04d      	beq.n	800bc84 <_printf_i+0x1b4>
 800bbe8:	4616      	mov	r6, r2
 800bbea:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbee:	fb03 5711 	mls	r7, r3, r1, r5
 800bbf2:	5dc7      	ldrb	r7, [r0, r7]
 800bbf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbf8:	462f      	mov	r7, r5
 800bbfa:	42bb      	cmp	r3, r7
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	d9f4      	bls.n	800bbea <_printf_i+0x11a>
 800bc00:	2b08      	cmp	r3, #8
 800bc02:	d10b      	bne.n	800bc1c <_printf_i+0x14c>
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	07df      	lsls	r7, r3, #31
 800bc08:	d508      	bpl.n	800bc1c <_printf_i+0x14c>
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	6861      	ldr	r1, [r4, #4]
 800bc0e:	4299      	cmp	r1, r3
 800bc10:	bfde      	ittt	le
 800bc12:	2330      	movle	r3, #48	; 0x30
 800bc14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc1c:	1b92      	subs	r2, r2, r6
 800bc1e:	6122      	str	r2, [r4, #16]
 800bc20:	f8cd a000 	str.w	sl, [sp]
 800bc24:	464b      	mov	r3, r9
 800bc26:	aa03      	add	r2, sp, #12
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	f7ff fee2 	bl	800b9f4 <_printf_common>
 800bc30:	3001      	adds	r0, #1
 800bc32:	d14c      	bne.n	800bcce <_printf_i+0x1fe>
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	b004      	add	sp, #16
 800bc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc3e:	4835      	ldr	r0, [pc, #212]	; (800bd14 <_printf_i+0x244>)
 800bc40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	680e      	ldr	r6, [r1, #0]
 800bc48:	061f      	lsls	r7, r3, #24
 800bc4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bc4e:	600e      	str	r6, [r1, #0]
 800bc50:	d514      	bpl.n	800bc7c <_printf_i+0x1ac>
 800bc52:	07d9      	lsls	r1, r3, #31
 800bc54:	bf44      	itt	mi
 800bc56:	f043 0320 	orrmi.w	r3, r3, #32
 800bc5a:	6023      	strmi	r3, [r4, #0]
 800bc5c:	b91d      	cbnz	r5, 800bc66 <_printf_i+0x196>
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	f023 0320 	bic.w	r3, r3, #32
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	2310      	movs	r3, #16
 800bc68:	e7b0      	b.n	800bbcc <_printf_i+0xfc>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f043 0320 	orr.w	r3, r3, #32
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	2378      	movs	r3, #120	; 0x78
 800bc74:	4828      	ldr	r0, [pc, #160]	; (800bd18 <_printf_i+0x248>)
 800bc76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc7a:	e7e3      	b.n	800bc44 <_printf_i+0x174>
 800bc7c:	065e      	lsls	r6, r3, #25
 800bc7e:	bf48      	it	mi
 800bc80:	b2ad      	uxthmi	r5, r5
 800bc82:	e7e6      	b.n	800bc52 <_printf_i+0x182>
 800bc84:	4616      	mov	r6, r2
 800bc86:	e7bb      	b.n	800bc00 <_printf_i+0x130>
 800bc88:	680b      	ldr	r3, [r1, #0]
 800bc8a:	6826      	ldr	r6, [r4, #0]
 800bc8c:	6960      	ldr	r0, [r4, #20]
 800bc8e:	1d1d      	adds	r5, r3, #4
 800bc90:	600d      	str	r5, [r1, #0]
 800bc92:	0635      	lsls	r5, r6, #24
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	d501      	bpl.n	800bc9c <_printf_i+0x1cc>
 800bc98:	6018      	str	r0, [r3, #0]
 800bc9a:	e002      	b.n	800bca2 <_printf_i+0x1d2>
 800bc9c:	0671      	lsls	r1, r6, #25
 800bc9e:	d5fb      	bpl.n	800bc98 <_printf_i+0x1c8>
 800bca0:	8018      	strh	r0, [r3, #0]
 800bca2:	2300      	movs	r3, #0
 800bca4:	6123      	str	r3, [r4, #16]
 800bca6:	4616      	mov	r6, r2
 800bca8:	e7ba      	b.n	800bc20 <_printf_i+0x150>
 800bcaa:	680b      	ldr	r3, [r1, #0]
 800bcac:	1d1a      	adds	r2, r3, #4
 800bcae:	600a      	str	r2, [r1, #0]
 800bcb0:	681e      	ldr	r6, [r3, #0]
 800bcb2:	6862      	ldr	r2, [r4, #4]
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7f4 fb12 	bl	80002e0 <memchr>
 800bcbc:	b108      	cbz	r0, 800bcc2 <_printf_i+0x1f2>
 800bcbe:	1b80      	subs	r0, r0, r6
 800bcc0:	6060      	str	r0, [r4, #4]
 800bcc2:	6863      	ldr	r3, [r4, #4]
 800bcc4:	6123      	str	r3, [r4, #16]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bccc:	e7a8      	b.n	800bc20 <_printf_i+0x150>
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	47d0      	blx	sl
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d0ab      	beq.n	800bc34 <_printf_i+0x164>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	079b      	lsls	r3, r3, #30
 800bce0:	d413      	bmi.n	800bd0a <_printf_i+0x23a>
 800bce2:	68e0      	ldr	r0, [r4, #12]
 800bce4:	9b03      	ldr	r3, [sp, #12]
 800bce6:	4298      	cmp	r0, r3
 800bce8:	bfb8      	it	lt
 800bcea:	4618      	movlt	r0, r3
 800bcec:	e7a4      	b.n	800bc38 <_printf_i+0x168>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	47d0      	blx	sl
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d09b      	beq.n	800bc34 <_printf_i+0x164>
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	68e3      	ldr	r3, [r4, #12]
 800bd00:	9903      	ldr	r1, [sp, #12]
 800bd02:	1a5b      	subs	r3, r3, r1
 800bd04:	42ab      	cmp	r3, r5
 800bd06:	dcf2      	bgt.n	800bcee <_printf_i+0x21e>
 800bd08:	e7eb      	b.n	800bce2 <_printf_i+0x212>
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	f104 0619 	add.w	r6, r4, #25
 800bd10:	e7f5      	b.n	800bcfe <_printf_i+0x22e>
 800bd12:	bf00      	nop
 800bd14:	0800c3f9 	.word	0x0800c3f9
 800bd18:	0800c40a 	.word	0x0800c40a

0800bd1c <_sbrk_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d06      	ldr	r5, [pc, #24]	; (800bd38 <_sbrk_r+0x1c>)
 800bd20:	2300      	movs	r3, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	f7f6 fb42 	bl	80023b0 <_sbrk>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	d102      	bne.n	800bd36 <_sbrk_r+0x1a>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	b103      	cbz	r3, 800bd36 <_sbrk_r+0x1a>
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	20000950 	.word	0x20000950

0800bd3c <__sread>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	460c      	mov	r4, r1
 800bd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd44:	f000 fab4 	bl	800c2b0 <_read_r>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	bfab      	itete	ge
 800bd4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd4e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd50:	181b      	addge	r3, r3, r0
 800bd52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd56:	bfac      	ite	ge
 800bd58:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd5a:	81a3      	strhlt	r3, [r4, #12]
 800bd5c:	bd10      	pop	{r4, pc}

0800bd5e <__swrite>:
 800bd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd62:	461f      	mov	r7, r3
 800bd64:	898b      	ldrh	r3, [r1, #12]
 800bd66:	05db      	lsls	r3, r3, #23
 800bd68:	4605      	mov	r5, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	d505      	bpl.n	800bd7c <__swrite+0x1e>
 800bd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd74:	2302      	movs	r3, #2
 800bd76:	2200      	movs	r2, #0
 800bd78:	f000 f9c8 	bl	800c10c <_lseek_r>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	4632      	mov	r2, r6
 800bd8a:	463b      	mov	r3, r7
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd92:	f000 b869 	b.w	800be68 <_write_r>

0800bd96 <__sseek>:
 800bd96:	b510      	push	{r4, lr}
 800bd98:	460c      	mov	r4, r1
 800bd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9e:	f000 f9b5 	bl	800c10c <_lseek_r>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	bf15      	itete	ne
 800bda8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdb2:	81a3      	strheq	r3, [r4, #12]
 800bdb4:	bf18      	it	ne
 800bdb6:	81a3      	strhne	r3, [r4, #12]
 800bdb8:	bd10      	pop	{r4, pc}

0800bdba <__sclose>:
 800bdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdbe:	f000 b8d3 	b.w	800bf68 <_close_r>
	...

0800bdc4 <__swbuf_r>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	460e      	mov	r6, r1
 800bdc8:	4614      	mov	r4, r2
 800bdca:	4605      	mov	r5, r0
 800bdcc:	b118      	cbz	r0, 800bdd6 <__swbuf_r+0x12>
 800bdce:	6983      	ldr	r3, [r0, #24]
 800bdd0:	b90b      	cbnz	r3, 800bdd6 <__swbuf_r+0x12>
 800bdd2:	f7ff fbbb 	bl	800b54c <__sinit>
 800bdd6:	4b21      	ldr	r3, [pc, #132]	; (800be5c <__swbuf_r+0x98>)
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	d12b      	bne.n	800be34 <__swbuf_r+0x70>
 800bddc:	686c      	ldr	r4, [r5, #4]
 800bdde:	69a3      	ldr	r3, [r4, #24]
 800bde0:	60a3      	str	r3, [r4, #8]
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	071a      	lsls	r2, r3, #28
 800bde6:	d52f      	bpl.n	800be48 <__swbuf_r+0x84>
 800bde8:	6923      	ldr	r3, [r4, #16]
 800bdea:	b36b      	cbz	r3, 800be48 <__swbuf_r+0x84>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	1ac0      	subs	r0, r0, r3
 800bdf2:	6963      	ldr	r3, [r4, #20]
 800bdf4:	b2f6      	uxtb	r6, r6
 800bdf6:	4283      	cmp	r3, r0
 800bdf8:	4637      	mov	r7, r6
 800bdfa:	dc04      	bgt.n	800be06 <__swbuf_r+0x42>
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 f948 	bl	800c094 <_fflush_r>
 800be04:	bb30      	cbnz	r0, 800be54 <__swbuf_r+0x90>
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	3b01      	subs	r3, #1
 800be0a:	60a3      	str	r3, [r4, #8]
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	6022      	str	r2, [r4, #0]
 800be12:	701e      	strb	r6, [r3, #0]
 800be14:	6963      	ldr	r3, [r4, #20]
 800be16:	3001      	adds	r0, #1
 800be18:	4283      	cmp	r3, r0
 800be1a:	d004      	beq.n	800be26 <__swbuf_r+0x62>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	07db      	lsls	r3, r3, #31
 800be20:	d506      	bpl.n	800be30 <__swbuf_r+0x6c>
 800be22:	2e0a      	cmp	r6, #10
 800be24:	d104      	bne.n	800be30 <__swbuf_r+0x6c>
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 f933 	bl	800c094 <_fflush_r>
 800be2e:	b988      	cbnz	r0, 800be54 <__swbuf_r+0x90>
 800be30:	4638      	mov	r0, r7
 800be32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be34:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <__swbuf_r+0x9c>)
 800be36:	429c      	cmp	r4, r3
 800be38:	d101      	bne.n	800be3e <__swbuf_r+0x7a>
 800be3a:	68ac      	ldr	r4, [r5, #8]
 800be3c:	e7cf      	b.n	800bdde <__swbuf_r+0x1a>
 800be3e:	4b09      	ldr	r3, [pc, #36]	; (800be64 <__swbuf_r+0xa0>)
 800be40:	429c      	cmp	r4, r3
 800be42:	bf08      	it	eq
 800be44:	68ec      	ldreq	r4, [r5, #12]
 800be46:	e7ca      	b.n	800bdde <__swbuf_r+0x1a>
 800be48:	4621      	mov	r1, r4
 800be4a:	4628      	mov	r0, r5
 800be4c:	f000 f81e 	bl	800be8c <__swsetup_r>
 800be50:	2800      	cmp	r0, #0
 800be52:	d0cb      	beq.n	800bdec <__swbuf_r+0x28>
 800be54:	f04f 37ff 	mov.w	r7, #4294967295
 800be58:	e7ea      	b.n	800be30 <__swbuf_r+0x6c>
 800be5a:	bf00      	nop
 800be5c:	0800c3a8 	.word	0x0800c3a8
 800be60:	0800c3c8 	.word	0x0800c3c8
 800be64:	0800c388 	.word	0x0800c388

0800be68 <_write_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	; (800be88 <_write_r+0x20>)
 800be6c:	4604      	mov	r4, r0
 800be6e:	4608      	mov	r0, r1
 800be70:	4611      	mov	r1, r2
 800be72:	2200      	movs	r2, #0
 800be74:	602a      	str	r2, [r5, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f7f6 fa49 	bl	800230e <_write>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_write_r+0x1e>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	b103      	cbz	r3, 800be86 <_write_r+0x1e>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	20000950 	.word	0x20000950

0800be8c <__swsetup_r>:
 800be8c:	4b32      	ldr	r3, [pc, #200]	; (800bf58 <__swsetup_r+0xcc>)
 800be8e:	b570      	push	{r4, r5, r6, lr}
 800be90:	681d      	ldr	r5, [r3, #0]
 800be92:	4606      	mov	r6, r0
 800be94:	460c      	mov	r4, r1
 800be96:	b125      	cbz	r5, 800bea2 <__swsetup_r+0x16>
 800be98:	69ab      	ldr	r3, [r5, #24]
 800be9a:	b913      	cbnz	r3, 800bea2 <__swsetup_r+0x16>
 800be9c:	4628      	mov	r0, r5
 800be9e:	f7ff fb55 	bl	800b54c <__sinit>
 800bea2:	4b2e      	ldr	r3, [pc, #184]	; (800bf5c <__swsetup_r+0xd0>)
 800bea4:	429c      	cmp	r4, r3
 800bea6:	d10f      	bne.n	800bec8 <__swsetup_r+0x3c>
 800bea8:	686c      	ldr	r4, [r5, #4]
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beb0:	0719      	lsls	r1, r3, #28
 800beb2:	d42c      	bmi.n	800bf0e <__swsetup_r+0x82>
 800beb4:	06dd      	lsls	r5, r3, #27
 800beb6:	d411      	bmi.n	800bedc <__swsetup_r+0x50>
 800beb8:	2309      	movs	r3, #9
 800beba:	6033      	str	r3, [r6, #0]
 800bebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	f04f 30ff 	mov.w	r0, #4294967295
 800bec6:	e03e      	b.n	800bf46 <__swsetup_r+0xba>
 800bec8:	4b25      	ldr	r3, [pc, #148]	; (800bf60 <__swsetup_r+0xd4>)
 800beca:	429c      	cmp	r4, r3
 800becc:	d101      	bne.n	800bed2 <__swsetup_r+0x46>
 800bece:	68ac      	ldr	r4, [r5, #8]
 800bed0:	e7eb      	b.n	800beaa <__swsetup_r+0x1e>
 800bed2:	4b24      	ldr	r3, [pc, #144]	; (800bf64 <__swsetup_r+0xd8>)
 800bed4:	429c      	cmp	r4, r3
 800bed6:	bf08      	it	eq
 800bed8:	68ec      	ldreq	r4, [r5, #12]
 800beda:	e7e6      	b.n	800beaa <__swsetup_r+0x1e>
 800bedc:	0758      	lsls	r0, r3, #29
 800bede:	d512      	bpl.n	800bf06 <__swsetup_r+0x7a>
 800bee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee2:	b141      	cbz	r1, 800bef6 <__swsetup_r+0x6a>
 800bee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee8:	4299      	cmp	r1, r3
 800beea:	d002      	beq.n	800bef2 <__swsetup_r+0x66>
 800beec:	4630      	mov	r0, r6
 800beee:	f000 f98f 	bl	800c210 <_free_r>
 800bef2:	2300      	movs	r3, #0
 800bef4:	6363      	str	r3, [r4, #52]	; 0x34
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800befc:	81a3      	strh	r3, [r4, #12]
 800befe:	2300      	movs	r3, #0
 800bf00:	6063      	str	r3, [r4, #4]
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	f043 0308 	orr.w	r3, r3, #8
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	b94b      	cbnz	r3, 800bf26 <__swsetup_r+0x9a>
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf1c:	d003      	beq.n	800bf26 <__swsetup_r+0x9a>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4630      	mov	r0, r6
 800bf22:	f000 f929 	bl	800c178 <__smakebuf_r>
 800bf26:	89a0      	ldrh	r0, [r4, #12]
 800bf28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf2c:	f010 0301 	ands.w	r3, r0, #1
 800bf30:	d00a      	beq.n	800bf48 <__swsetup_r+0xbc>
 800bf32:	2300      	movs	r3, #0
 800bf34:	60a3      	str	r3, [r4, #8]
 800bf36:	6963      	ldr	r3, [r4, #20]
 800bf38:	425b      	negs	r3, r3
 800bf3a:	61a3      	str	r3, [r4, #24]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b943      	cbnz	r3, 800bf52 <__swsetup_r+0xc6>
 800bf40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf44:	d1ba      	bne.n	800bebc <__swsetup_r+0x30>
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	0781      	lsls	r1, r0, #30
 800bf4a:	bf58      	it	pl
 800bf4c:	6963      	ldrpl	r3, [r4, #20]
 800bf4e:	60a3      	str	r3, [r4, #8]
 800bf50:	e7f4      	b.n	800bf3c <__swsetup_r+0xb0>
 800bf52:	2000      	movs	r0, #0
 800bf54:	e7f7      	b.n	800bf46 <__swsetup_r+0xba>
 800bf56:	bf00      	nop
 800bf58:	20000010 	.word	0x20000010
 800bf5c:	0800c3a8 	.word	0x0800c3a8
 800bf60:	0800c3c8 	.word	0x0800c3c8
 800bf64:	0800c388 	.word	0x0800c388

0800bf68 <_close_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4d06      	ldr	r5, [pc, #24]	; (800bf84 <_close_r+0x1c>)
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4604      	mov	r4, r0
 800bf70:	4608      	mov	r0, r1
 800bf72:	602b      	str	r3, [r5, #0]
 800bf74:	f7f6 f9e7 	bl	8002346 <_close>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d102      	bne.n	800bf82 <_close_r+0x1a>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	b103      	cbz	r3, 800bf82 <_close_r+0x1a>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	20000950 	.word	0x20000950

0800bf88 <__sflush_r>:
 800bf88:	898a      	ldrh	r2, [r1, #12]
 800bf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8e:	4605      	mov	r5, r0
 800bf90:	0710      	lsls	r0, r2, #28
 800bf92:	460c      	mov	r4, r1
 800bf94:	d458      	bmi.n	800c048 <__sflush_r+0xc0>
 800bf96:	684b      	ldr	r3, [r1, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	dc05      	bgt.n	800bfa8 <__sflush_r+0x20>
 800bf9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	dc02      	bgt.n	800bfa8 <__sflush_r+0x20>
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfaa:	2e00      	cmp	r6, #0
 800bfac:	d0f9      	beq.n	800bfa2 <__sflush_r+0x1a>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfb4:	682f      	ldr	r7, [r5, #0]
 800bfb6:	602b      	str	r3, [r5, #0]
 800bfb8:	d032      	beq.n	800c020 <__sflush_r+0x98>
 800bfba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	075a      	lsls	r2, r3, #29
 800bfc0:	d505      	bpl.n	800bfce <__sflush_r+0x46>
 800bfc2:	6863      	ldr	r3, [r4, #4]
 800bfc4:	1ac0      	subs	r0, r0, r3
 800bfc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfc8:	b10b      	cbz	r3, 800bfce <__sflush_r+0x46>
 800bfca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfcc:	1ac0      	subs	r0, r0, r3
 800bfce:	2300      	movs	r3, #0
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfd4:	6a21      	ldr	r1, [r4, #32]
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	47b0      	blx	r6
 800bfda:	1c43      	adds	r3, r0, #1
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	d106      	bne.n	800bfee <__sflush_r+0x66>
 800bfe0:	6829      	ldr	r1, [r5, #0]
 800bfe2:	291d      	cmp	r1, #29
 800bfe4:	d82c      	bhi.n	800c040 <__sflush_r+0xb8>
 800bfe6:	4a2a      	ldr	r2, [pc, #168]	; (800c090 <__sflush_r+0x108>)
 800bfe8:	40ca      	lsrs	r2, r1
 800bfea:	07d6      	lsls	r6, r2, #31
 800bfec:	d528      	bpl.n	800c040 <__sflush_r+0xb8>
 800bfee:	2200      	movs	r2, #0
 800bff0:	6062      	str	r2, [r4, #4]
 800bff2:	04d9      	lsls	r1, r3, #19
 800bff4:	6922      	ldr	r2, [r4, #16]
 800bff6:	6022      	str	r2, [r4, #0]
 800bff8:	d504      	bpl.n	800c004 <__sflush_r+0x7c>
 800bffa:	1c42      	adds	r2, r0, #1
 800bffc:	d101      	bne.n	800c002 <__sflush_r+0x7a>
 800bffe:	682b      	ldr	r3, [r5, #0]
 800c000:	b903      	cbnz	r3, 800c004 <__sflush_r+0x7c>
 800c002:	6560      	str	r0, [r4, #84]	; 0x54
 800c004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c006:	602f      	str	r7, [r5, #0]
 800c008:	2900      	cmp	r1, #0
 800c00a:	d0ca      	beq.n	800bfa2 <__sflush_r+0x1a>
 800c00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c010:	4299      	cmp	r1, r3
 800c012:	d002      	beq.n	800c01a <__sflush_r+0x92>
 800c014:	4628      	mov	r0, r5
 800c016:	f000 f8fb 	bl	800c210 <_free_r>
 800c01a:	2000      	movs	r0, #0
 800c01c:	6360      	str	r0, [r4, #52]	; 0x34
 800c01e:	e7c1      	b.n	800bfa4 <__sflush_r+0x1c>
 800c020:	6a21      	ldr	r1, [r4, #32]
 800c022:	2301      	movs	r3, #1
 800c024:	4628      	mov	r0, r5
 800c026:	47b0      	blx	r6
 800c028:	1c41      	adds	r1, r0, #1
 800c02a:	d1c7      	bne.n	800bfbc <__sflush_r+0x34>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0c4      	beq.n	800bfbc <__sflush_r+0x34>
 800c032:	2b1d      	cmp	r3, #29
 800c034:	d001      	beq.n	800c03a <__sflush_r+0xb2>
 800c036:	2b16      	cmp	r3, #22
 800c038:	d101      	bne.n	800c03e <__sflush_r+0xb6>
 800c03a:	602f      	str	r7, [r5, #0]
 800c03c:	e7b1      	b.n	800bfa2 <__sflush_r+0x1a>
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c044:	81a3      	strh	r3, [r4, #12]
 800c046:	e7ad      	b.n	800bfa4 <__sflush_r+0x1c>
 800c048:	690f      	ldr	r7, [r1, #16]
 800c04a:	2f00      	cmp	r7, #0
 800c04c:	d0a9      	beq.n	800bfa2 <__sflush_r+0x1a>
 800c04e:	0793      	lsls	r3, r2, #30
 800c050:	680e      	ldr	r6, [r1, #0]
 800c052:	bf08      	it	eq
 800c054:	694b      	ldreq	r3, [r1, #20]
 800c056:	600f      	str	r7, [r1, #0]
 800c058:	bf18      	it	ne
 800c05a:	2300      	movne	r3, #0
 800c05c:	eba6 0807 	sub.w	r8, r6, r7
 800c060:	608b      	str	r3, [r1, #8]
 800c062:	f1b8 0f00 	cmp.w	r8, #0
 800c066:	dd9c      	ble.n	800bfa2 <__sflush_r+0x1a>
 800c068:	6a21      	ldr	r1, [r4, #32]
 800c06a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c06c:	4643      	mov	r3, r8
 800c06e:	463a      	mov	r2, r7
 800c070:	4628      	mov	r0, r5
 800c072:	47b0      	blx	r6
 800c074:	2800      	cmp	r0, #0
 800c076:	dc06      	bgt.n	800c086 <__sflush_r+0xfe>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	f04f 30ff 	mov.w	r0, #4294967295
 800c084:	e78e      	b.n	800bfa4 <__sflush_r+0x1c>
 800c086:	4407      	add	r7, r0
 800c088:	eba8 0800 	sub.w	r8, r8, r0
 800c08c:	e7e9      	b.n	800c062 <__sflush_r+0xda>
 800c08e:	bf00      	nop
 800c090:	20400001 	.word	0x20400001

0800c094 <_fflush_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	690b      	ldr	r3, [r1, #16]
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	b913      	cbnz	r3, 800c0a4 <_fflush_r+0x10>
 800c09e:	2500      	movs	r5, #0
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	b118      	cbz	r0, 800c0ae <_fflush_r+0x1a>
 800c0a6:	6983      	ldr	r3, [r0, #24]
 800c0a8:	b90b      	cbnz	r3, 800c0ae <_fflush_r+0x1a>
 800c0aa:	f7ff fa4f 	bl	800b54c <__sinit>
 800c0ae:	4b14      	ldr	r3, [pc, #80]	; (800c100 <_fflush_r+0x6c>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	d11b      	bne.n	800c0ec <_fflush_r+0x58>
 800c0b4:	686c      	ldr	r4, [r5, #4]
 800c0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0ef      	beq.n	800c09e <_fflush_r+0xa>
 800c0be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0c0:	07d0      	lsls	r0, r2, #31
 800c0c2:	d404      	bmi.n	800c0ce <_fflush_r+0x3a>
 800c0c4:	0599      	lsls	r1, r3, #22
 800c0c6:	d402      	bmi.n	800c0ce <_fflush_r+0x3a>
 800c0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ca:	f7ff fadd 	bl	800b688 <__retarget_lock_acquire_recursive>
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	f7ff ff59 	bl	800bf88 <__sflush_r>
 800c0d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0d8:	07da      	lsls	r2, r3, #31
 800c0da:	4605      	mov	r5, r0
 800c0dc:	d4e0      	bmi.n	800c0a0 <_fflush_r+0xc>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	059b      	lsls	r3, r3, #22
 800c0e2:	d4dd      	bmi.n	800c0a0 <_fflush_r+0xc>
 800c0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0e6:	f7ff fad0 	bl	800b68a <__retarget_lock_release_recursive>
 800c0ea:	e7d9      	b.n	800c0a0 <_fflush_r+0xc>
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <_fflush_r+0x70>)
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	d101      	bne.n	800c0f6 <_fflush_r+0x62>
 800c0f2:	68ac      	ldr	r4, [r5, #8]
 800c0f4:	e7df      	b.n	800c0b6 <_fflush_r+0x22>
 800c0f6:	4b04      	ldr	r3, [pc, #16]	; (800c108 <_fflush_r+0x74>)
 800c0f8:	429c      	cmp	r4, r3
 800c0fa:	bf08      	it	eq
 800c0fc:	68ec      	ldreq	r4, [r5, #12]
 800c0fe:	e7da      	b.n	800c0b6 <_fflush_r+0x22>
 800c100:	0800c3a8 	.word	0x0800c3a8
 800c104:	0800c3c8 	.word	0x0800c3c8
 800c108:	0800c388 	.word	0x0800c388

0800c10c <_lseek_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d07      	ldr	r5, [pc, #28]	; (800c12c <_lseek_r+0x20>)
 800c110:	4604      	mov	r4, r0
 800c112:	4608      	mov	r0, r1
 800c114:	4611      	mov	r1, r2
 800c116:	2200      	movs	r2, #0
 800c118:	602a      	str	r2, [r5, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	f7f6 f93a 	bl	8002394 <_lseek>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_lseek_r+0x1e>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	b103      	cbz	r3, 800c12a <_lseek_r+0x1e>
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	20000950 	.word	0x20000950

0800c130 <__swhatbuf_r>:
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	460e      	mov	r6, r1
 800c134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c138:	2900      	cmp	r1, #0
 800c13a:	b096      	sub	sp, #88	; 0x58
 800c13c:	4614      	mov	r4, r2
 800c13e:	461d      	mov	r5, r3
 800c140:	da07      	bge.n	800c152 <__swhatbuf_r+0x22>
 800c142:	2300      	movs	r3, #0
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	89b3      	ldrh	r3, [r6, #12]
 800c148:	061a      	lsls	r2, r3, #24
 800c14a:	d410      	bmi.n	800c16e <__swhatbuf_r+0x3e>
 800c14c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c150:	e00e      	b.n	800c170 <__swhatbuf_r+0x40>
 800c152:	466a      	mov	r2, sp
 800c154:	f000 f8be 	bl	800c2d4 <_fstat_r>
 800c158:	2800      	cmp	r0, #0
 800c15a:	dbf2      	blt.n	800c142 <__swhatbuf_r+0x12>
 800c15c:	9a01      	ldr	r2, [sp, #4]
 800c15e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c162:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c166:	425a      	negs	r2, r3
 800c168:	415a      	adcs	r2, r3
 800c16a:	602a      	str	r2, [r5, #0]
 800c16c:	e7ee      	b.n	800c14c <__swhatbuf_r+0x1c>
 800c16e:	2340      	movs	r3, #64	; 0x40
 800c170:	2000      	movs	r0, #0
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	b016      	add	sp, #88	; 0x58
 800c176:	bd70      	pop	{r4, r5, r6, pc}

0800c178 <__smakebuf_r>:
 800c178:	898b      	ldrh	r3, [r1, #12]
 800c17a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c17c:	079d      	lsls	r5, r3, #30
 800c17e:	4606      	mov	r6, r0
 800c180:	460c      	mov	r4, r1
 800c182:	d507      	bpl.n	800c194 <__smakebuf_r+0x1c>
 800c184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	2301      	movs	r3, #1
 800c18e:	6163      	str	r3, [r4, #20]
 800c190:	b002      	add	sp, #8
 800c192:	bd70      	pop	{r4, r5, r6, pc}
 800c194:	ab01      	add	r3, sp, #4
 800c196:	466a      	mov	r2, sp
 800c198:	f7ff ffca 	bl	800c130 <__swhatbuf_r>
 800c19c:	9900      	ldr	r1, [sp, #0]
 800c19e:	4605      	mov	r5, r0
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff fa73 	bl	800b68c <_malloc_r>
 800c1a6:	b948      	cbnz	r0, 800c1bc <__smakebuf_r+0x44>
 800c1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ac:	059a      	lsls	r2, r3, #22
 800c1ae:	d4ef      	bmi.n	800c190 <__smakebuf_r+0x18>
 800c1b0:	f023 0303 	bic.w	r3, r3, #3
 800c1b4:	f043 0302 	orr.w	r3, r3, #2
 800c1b8:	81a3      	strh	r3, [r4, #12]
 800c1ba:	e7e3      	b.n	800c184 <__smakebuf_r+0xc>
 800c1bc:	4b0d      	ldr	r3, [pc, #52]	; (800c1f4 <__smakebuf_r+0x7c>)
 800c1be:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	6020      	str	r0, [r4, #0]
 800c1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	9b00      	ldr	r3, [sp, #0]
 800c1cc:	6163      	str	r3, [r4, #20]
 800c1ce:	9b01      	ldr	r3, [sp, #4]
 800c1d0:	6120      	str	r0, [r4, #16]
 800c1d2:	b15b      	cbz	r3, 800c1ec <__smakebuf_r+0x74>
 800c1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d8:	4630      	mov	r0, r6
 800c1da:	f000 f88d 	bl	800c2f8 <_isatty_r>
 800c1de:	b128      	cbz	r0, 800c1ec <__smakebuf_r+0x74>
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	f023 0303 	bic.w	r3, r3, #3
 800c1e6:	f043 0301 	orr.w	r3, r3, #1
 800c1ea:	81a3      	strh	r3, [r4, #12]
 800c1ec:	89a0      	ldrh	r0, [r4, #12]
 800c1ee:	4305      	orrs	r5, r0
 800c1f0:	81a5      	strh	r5, [r4, #12]
 800c1f2:	e7cd      	b.n	800c190 <__smakebuf_r+0x18>
 800c1f4:	0800b4e5 	.word	0x0800b4e5

0800c1f8 <__malloc_lock>:
 800c1f8:	4801      	ldr	r0, [pc, #4]	; (800c200 <__malloc_lock+0x8>)
 800c1fa:	f7ff ba45 	b.w	800b688 <__retarget_lock_acquire_recursive>
 800c1fe:	bf00      	nop
 800c200:	20000948 	.word	0x20000948

0800c204 <__malloc_unlock>:
 800c204:	4801      	ldr	r0, [pc, #4]	; (800c20c <__malloc_unlock+0x8>)
 800c206:	f7ff ba40 	b.w	800b68a <__retarget_lock_release_recursive>
 800c20a:	bf00      	nop
 800c20c:	20000948 	.word	0x20000948

0800c210 <_free_r>:
 800c210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c212:	2900      	cmp	r1, #0
 800c214:	d048      	beq.n	800c2a8 <_free_r+0x98>
 800c216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c21a:	9001      	str	r0, [sp, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f1a1 0404 	sub.w	r4, r1, #4
 800c222:	bfb8      	it	lt
 800c224:	18e4      	addlt	r4, r4, r3
 800c226:	f7ff ffe7 	bl	800c1f8 <__malloc_lock>
 800c22a:	4a20      	ldr	r2, [pc, #128]	; (800c2ac <_free_r+0x9c>)
 800c22c:	9801      	ldr	r0, [sp, #4]
 800c22e:	6813      	ldr	r3, [r2, #0]
 800c230:	4615      	mov	r5, r2
 800c232:	b933      	cbnz	r3, 800c242 <_free_r+0x32>
 800c234:	6063      	str	r3, [r4, #4]
 800c236:	6014      	str	r4, [r2, #0]
 800c238:	b003      	add	sp, #12
 800c23a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c23e:	f7ff bfe1 	b.w	800c204 <__malloc_unlock>
 800c242:	42a3      	cmp	r3, r4
 800c244:	d90b      	bls.n	800c25e <_free_r+0x4e>
 800c246:	6821      	ldr	r1, [r4, #0]
 800c248:	1862      	adds	r2, r4, r1
 800c24a:	4293      	cmp	r3, r2
 800c24c:	bf04      	itt	eq
 800c24e:	681a      	ldreq	r2, [r3, #0]
 800c250:	685b      	ldreq	r3, [r3, #4]
 800c252:	6063      	str	r3, [r4, #4]
 800c254:	bf04      	itt	eq
 800c256:	1852      	addeq	r2, r2, r1
 800c258:	6022      	streq	r2, [r4, #0]
 800c25a:	602c      	str	r4, [r5, #0]
 800c25c:	e7ec      	b.n	800c238 <_free_r+0x28>
 800c25e:	461a      	mov	r2, r3
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	b10b      	cbz	r3, 800c268 <_free_r+0x58>
 800c264:	42a3      	cmp	r3, r4
 800c266:	d9fa      	bls.n	800c25e <_free_r+0x4e>
 800c268:	6811      	ldr	r1, [r2, #0]
 800c26a:	1855      	adds	r5, r2, r1
 800c26c:	42a5      	cmp	r5, r4
 800c26e:	d10b      	bne.n	800c288 <_free_r+0x78>
 800c270:	6824      	ldr	r4, [r4, #0]
 800c272:	4421      	add	r1, r4
 800c274:	1854      	adds	r4, r2, r1
 800c276:	42a3      	cmp	r3, r4
 800c278:	6011      	str	r1, [r2, #0]
 800c27a:	d1dd      	bne.n	800c238 <_free_r+0x28>
 800c27c:	681c      	ldr	r4, [r3, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	6053      	str	r3, [r2, #4]
 800c282:	4421      	add	r1, r4
 800c284:	6011      	str	r1, [r2, #0]
 800c286:	e7d7      	b.n	800c238 <_free_r+0x28>
 800c288:	d902      	bls.n	800c290 <_free_r+0x80>
 800c28a:	230c      	movs	r3, #12
 800c28c:	6003      	str	r3, [r0, #0]
 800c28e:	e7d3      	b.n	800c238 <_free_r+0x28>
 800c290:	6825      	ldr	r5, [r4, #0]
 800c292:	1961      	adds	r1, r4, r5
 800c294:	428b      	cmp	r3, r1
 800c296:	bf04      	itt	eq
 800c298:	6819      	ldreq	r1, [r3, #0]
 800c29a:	685b      	ldreq	r3, [r3, #4]
 800c29c:	6063      	str	r3, [r4, #4]
 800c29e:	bf04      	itt	eq
 800c2a0:	1949      	addeq	r1, r1, r5
 800c2a2:	6021      	streq	r1, [r4, #0]
 800c2a4:	6054      	str	r4, [r2, #4]
 800c2a6:	e7c7      	b.n	800c238 <_free_r+0x28>
 800c2a8:	b003      	add	sp, #12
 800c2aa:	bd30      	pop	{r4, r5, pc}
 800c2ac:	20000098 	.word	0x20000098

0800c2b0 <_read_r>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	4d07      	ldr	r5, [pc, #28]	; (800c2d0 <_read_r+0x20>)
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	4608      	mov	r0, r1
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	602a      	str	r2, [r5, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f7f6 f808 	bl	80022d4 <_read>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_read_r+0x1e>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_read_r+0x1e>
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	20000950 	.word	0x20000950

0800c2d4 <_fstat_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4d07      	ldr	r5, [pc, #28]	; (800c2f4 <_fstat_r+0x20>)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	4611      	mov	r1, r2
 800c2e0:	602b      	str	r3, [r5, #0]
 800c2e2:	f7f6 f83c 	bl	800235e <_fstat>
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	d102      	bne.n	800c2f0 <_fstat_r+0x1c>
 800c2ea:	682b      	ldr	r3, [r5, #0]
 800c2ec:	b103      	cbz	r3, 800c2f0 <_fstat_r+0x1c>
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	bd38      	pop	{r3, r4, r5, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20000950 	.word	0x20000950

0800c2f8 <_isatty_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4d06      	ldr	r5, [pc, #24]	; (800c314 <_isatty_r+0x1c>)
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4604      	mov	r4, r0
 800c300:	4608      	mov	r0, r1
 800c302:	602b      	str	r3, [r5, #0]
 800c304:	f7f6 f83b 	bl	800237e <_isatty>
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d102      	bne.n	800c312 <_isatty_r+0x1a>
 800c30c:	682b      	ldr	r3, [r5, #0]
 800c30e:	b103      	cbz	r3, 800c312 <_isatty_r+0x1a>
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	20000950 	.word	0x20000950

0800c318 <_init>:
 800c318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31a:	bf00      	nop
 800c31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31e:	bc08      	pop	{r3}
 800c320:	469e      	mov	lr, r3
 800c322:	4770      	bx	lr

0800c324 <_fini>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	bf00      	nop
 800c328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c32a:	bc08      	pop	{r3}
 800c32c:	469e      	mov	lr, r3
 800c32e:	4770      	bx	lr
